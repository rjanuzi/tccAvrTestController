
TCC_Test_Controller.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d58  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008e00  80008e00  00009200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000020d8  80009000  80009000  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000504  00000008  8000b0d8  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000050c  8000b5dc  0000bd0c  2**0
                  ALLOC
  8 .bss          00000358  00000510  00000510  00000000  2**2
                  ALLOC
  9 .heap         0000e798  00000868  00000868  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000bd0c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000e00  00000000  00000000  0000bd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001d9c  00000000  00000000  0000cb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002c547  00000000  00000000  0000e8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000057c0  00000000  00000000  0003ae23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ff65  00000000  00000000  000405e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000022ec  00000000  00000000  00050548  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005969  00000000  00000000  00052834  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a9d6  00000000  00000000  0005819d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00fa27c5  00000000  00000000  00062b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000f00  00000000  00000000  01005338  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cd 64 	sub	pc,pc,-12956

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf ed 68 	sub	pc,pc,-4760

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 10       	ld.sh	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 24       	ld.uh	r4,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 1c       	ld.sh	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 28       	ld.uh	r8,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 14       	ld.sh	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 18       	ld.sh	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 30       	ld.ub	r0,r2++
800020dc:	00 00       	add	r0,r0
800020de:	05 20       	ld.uh	r0,r2++
800020e0:	00 00       	add	r0,r0
800020e2:	05 2c       	ld.uh	r12,r2++

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c2 18       	rjmp	8000213c <twim_set_speed+0x58>
800020fc:	30 09       	mov	r9,0
800020fe:	30 16       	mov	r6,1
80002100:	30 7a       	mov	r10,7
80002102:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80002104:	2f f9       	sub	r9,-1
80002106:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002108:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000210a:	e0 48 00 ff 	cp.w	r8,255
8000210e:	f9 be 0b 01 	movhi	lr,1
80002112:	f9 be 08 00 	movls	lr,0
80002116:	f2 0a 18 00 	cp.b	r10,r9
8000211a:	ec 0b 17 20 	movhs	r11,r6
8000211e:	f9 bb 03 00 	movlo	r11,0
80002122:	fd eb 00 0b 	and	r11,lr,r11
80002126:	ee 0b 18 00 	cp.b	r11,r7
8000212a:	ce d1       	brne	80002104 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000212c:	30 7a       	mov	r10,7
8000212e:	f4 09 18 00 	cp.b	r9,r10
80002132:	e0 88 00 05 	brls	8000213c <twim_set_speed+0x58>
80002136:	3f 8c       	mov	r12,-8
80002138:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000213c:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002140:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002144:	14 18       	sub	r8,r10
80002146:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000214a:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000214e:	99 19       	st.w	r12[0x4],r9
80002150:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80002154 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002154:	48 38       	lddpc	r8,80002160 <twim_status+0xc>
80002156:	70 08       	ld.w	r8,r8[0x0]
80002158:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000215a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000215e:	5e fc       	retal	r12
80002160:	00 00       	add	r0,r0
80002162:	05 10       	ld.sh	r0,r2++

80002164 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002164:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002168:	e6 18 00 01 	andh	r8,0x1,COH
8000216c:	c0 21       	brne	80002170 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000216e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002170:	3f f8       	mov	r8,-1
80002172:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002174:	99 b8       	st.w	r12[0x2c],r8
}
80002176:	5e fc       	retal	r12

80002178 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002178:	eb cd 40 fe 	pushm	r1-r7,lr
8000217c:	18 97       	mov	r7,r12
8000217e:	16 93       	mov	r3,r11
80002180:	14 95       	mov	r5,r10
80002182:	12 92       	mov	r2,r9
80002184:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002186:	30 14       	mov	r4,1
80002188:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000218a:	e0 68 00 80 	mov	r8,128
8000218e:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002190:	30 28       	mov	r8,2
80002192:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002194:	49 e6       	lddpc	r6,8000220c <twim_write+0x94>
80002196:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002198:	f0 1f 00 1e 	mcall	80002210 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000219c:	49 e8       	lddpc	r8,80002214 <twim_write+0x9c>
8000219e:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800021a0:	49 e8       	lddpc	r8,80002218 <twim_write+0xa0>
800021a2:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800021a4:	30 09       	mov	r9,0
800021a6:	49 e8       	lddpc	r8,8000221c <twim_write+0xa4>
800021a8:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800021aa:	49 e9       	lddpc	r9,80002220 <twim_write+0xa8>
800021ac:	30 08       	mov	r8,0
800021ae:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021b0:	6c 08       	ld.w	r8,r6[0x0]
800021b2:	b1 65       	lsl	r5,0x10
800021b4:	e8 15 e0 00 	orl	r5,0xe000
800021b8:	eb e2 10 12 	or	r2,r5,r2<<0x1
800021bc:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
800021c0:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021c2:	49 9a       	lddpc	r10,80002224 <twim_write+0xac>
800021c4:	e0 6b 03 02 	mov	r11,770
800021c8:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021ca:	74 0a       	ld.w	r10,r10[0x0]
800021cc:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021ce:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
800021d0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d2:	72 08       	ld.w	r8,r9[0x0]
800021d4:	58 08       	cp.w	r8,0
800021d6:	c0 80       	breq	800021e6 <twim_write+0x6e>
800021d8:	c0 b8       	rjmp	800021ee <twim_write+0x76>
		cpu_relax();
800021da:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021de:	6c 08       	ld.w	r8,r6[0x0]
800021e0:	58 08       	cp.w	r8,0
800021e2:	c0 30       	breq	800021e8 <twim_write+0x70>
800021e4:	c0 58       	rjmp	800021ee <twim_write+0x76>
800021e6:	48 f6       	lddpc	r6,80002220 <twim_write+0xa8>
800021e8:	f0 1f 00 10 	mcall	80002228 <twim_write+0xb0>
800021ec:	cf 70       	breq	800021da <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800021ee:	30 28       	mov	r8,2
800021f0:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021f2:	48 c8       	lddpc	r8,80002220 <twim_write+0xa8>
800021f4:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021f6:	5b c8       	cp.w	r8,-4
800021f8:	c0 70       	breq	80002206 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021fa:	48 a8       	lddpc	r8,80002220 <twim_write+0xa8>
800021fc:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021fe:	5b e8       	cp.w	r8,-2
80002200:	c0 30       	breq	80002206 <twim_write+0x8e>
80002202:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002206:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000220a:	00 00       	add	r0,r0
8000220c:	00 00       	add	r0,r0
8000220e:	05 10       	ld.sh	r0,r2++
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 64       	sub	r4,22
80002214:	00 00       	add	r0,r0
80002216:	05 20       	ld.uh	r0,r2++
80002218:	00 00       	add	r0,r0
8000221a:	05 30       	ld.ub	r0,r2++
8000221c:	00 00       	add	r0,r0
8000221e:	05 28       	ld.uh	r8,r2++
80002220:	00 00       	add	r0,r0
80002222:	05 1c       	ld.sh	r12,r2++
80002224:	00 00       	add	r0,r0
80002226:	05 24       	ld.uh	r4,r2++
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	21 54       	sub	r4,21

8000222c <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8000222c:	d4 01       	pushm	lr
8000222e:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002230:	30 08       	mov	r8,0
80002232:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002234:	30 08       	mov	r8,0
80002236:	16 99       	mov	r9,r11
80002238:	10 9a       	mov	r10,r8
8000223a:	1a 9b       	mov	r11,sp
8000223c:	f0 1f 00 02 	mcall	80002244 <twim_probe+0x18>
}
80002240:	2f fd       	sub	sp,-4
80002242:	d8 02       	popm	pc
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	21 78       	sub	r8,23

80002248 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002248:	eb cd 40 e0 	pushm	r5-r7,lr
8000224c:	18 97       	mov	r7,r12
8000224e:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002250:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002254:	30 0a       	mov	r10,0
80002256:	4a 69       	lddpc	r9,800022ec <twim_master_init+0xa4>
80002258:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8000225a:	e6 18 00 01 	andh	r8,0x1,COH
8000225e:	c0 b1       	brne	80002274 <twim_master_init+0x2c>
		cpu_irq_disable ();
80002260:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002262:	3f f8       	mov	r8,-1
80002264:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002266:	30 18       	mov	r8,1
80002268:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226a:	e0 68 00 80 	mov	r8,128
8000226e:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002270:	d5 03       	csrf	0x10
80002272:	c0 88       	rjmp	80002282 <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002274:	3f f8       	mov	r8,-1
80002276:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002278:	30 18       	mov	r8,1
8000227a:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000227c:	e0 68 00 80 	mov	r8,128
80002280:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002282:	3f f8       	mov	r8,-1
80002284:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002286:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000228a:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
8000228c:	30 1a       	mov	r10,1
8000228e:	e0 6b 03 20 	mov	r11,800
80002292:	49 8c       	lddpc	r12,800022f0 <twim_master_init+0xa8>
80002294:	f0 1f 00 18 	mcall	800022f4 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002298:	e6 16 00 01 	andh	r6,0x1,COH
8000229c:	c0 21       	brne	800022a0 <twim_master_init+0x58>
      cpu_irq_enable();
8000229e:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800022a0:	eb 39 00 0c 	ld.ub	r9,r5[12]
800022a4:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800022a6:	f0 09 18 00 	cp.b	r9,r8
800022aa:	f9 b8 01 10 	movne	r8,16
800022ae:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800022b2:	f9 b8 01 ff 	movne	r8,-1
800022b6:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800022ba:	6a 0a       	ld.w	r10,r5[0x0]
800022bc:	6a 1b       	ld.w	r11,r5[0x4]
800022be:	0e 9c       	mov	r12,r7
800022c0:	f0 1f 00 0e 	mcall	800022f8 <twim_master_init+0xb0>
800022c4:	5b 8c       	cp.w	r12,-8
800022c6:	c1 00       	breq	800022e6 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800022c8:	6a 2b       	ld.w	r11,r5[0x8]
800022ca:	0e 9c       	mov	r12,r7
800022cc:	f0 1f 00 0c 	mcall	800022fc <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d0:	48 78       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022d4:	5b c8       	cp.w	r8,-4
800022d6:	c0 70       	breq	800022e4 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d8:	48 58       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022dc:	5b e8       	cp.w	r8,-2
800022de:	c0 30       	breq	800022e4 <twim_master_init+0x9c>
800022e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800022e4:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800022e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022ea:	00 00       	add	r0,r0
800022ec:	00 00       	add	r0,r0
800022ee:	05 1c       	ld.sh	r12,r2++
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	20 08       	sub	r8,0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	2f dc       	sub	r12,-3
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	20 e4       	sub	r4,14
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	22 2c       	sub	r12,34

80002300 <twis_slave_interrupt_handler>:
/**
 * \internal
 * \brief TWIS interrupt handler
 */
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
80002300:	eb cd 40 e0 	pushm	r5-r7,lr
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
80002304:	4c 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002306:	70 06       	ld.w	r6,r8[0x0]
80002308:	6c 65       	ld.w	r5,r6[0x18]
	unsigned long enabled = twis_inst_slave->imr;
8000230a:	6c 97       	ld.w	r7,r6[0x24]
	unsigned long pending = status & enabled;

	// An error has occurred, set only address match active and return
	if (status & AVR32_TWIS_SR_ERROR_MASK) {
8000230c:	0a 98       	mov	r8,r5
8000230e:	e2 18 70 c0 	andl	r8,0x70c0,COH
80002312:	c0 b0       	breq	80002328 <twis_slave_interrupt_handler+0x28>
		twis_inst_slave->idr = ~0UL;
80002314:	3f f8       	mov	r8,-1
80002316:	8d 88       	st.w	r6[0x20],r8
		twis_inst_slave->scr = ~0UL;
80002318:	8d a8       	st.w	r6[0x28],r8
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
8000231a:	e0 78 00 00 	mov	r8,65536
8000231e:	8d 78       	st.w	r6[0x1c],r8

		twis_slave_fct.stop();
80002320:	4b a8       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
80002322:	70 28       	ld.w	r8,r8[0x8]
80002324:	5d 18       	icall	r8

		return;
80002326:	c6 b8       	rjmp	800023fc <twis_slave_interrupt_handler+0xfc>
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
	unsigned long enabled = twis_inst_slave->imr;
	unsigned long pending = status & enabled;
80002328:	0a 67       	and	r7,r5

		return;
	}

	// Check if the slave address match flag is raised
	if (pending & AVR32_TWIS_IER_SAM_MASK) {
8000232a:	0e 98       	mov	r8,r7
8000232c:	e6 18 00 01 	andh	r8,0x1,COH
80002330:	c2 70       	breq	8000237e <twis_slave_interrupt_handler+0x7e>
		// Ignore repeated start and transmission complete flags
		if (pending & (AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK)) {
80002332:	0e 98       	mov	r8,r7
80002334:	e4 18 00 40 	andh	r8,0x40
80002338:	e0 18 00 08 	andl	r8,0x8
8000233c:	c0 60       	breq	80002348 <twis_slave_interrupt_handler+0x48>
			twis_inst_slave->scr = (AVR32_TWIS_SCR_REP_MASK |
8000233e:	30 88       	mov	r8,8
80002340:	ea 18 00 40 	orh	r8,0x40
80002344:	8d a8       	st.w	r6[0x28],r8
					AVR32_TWIS_SCR_TCOMP_MASK);
			twis_inst_slave->idr = (AVR32_TWIS_IDR_REP_MASK |
80002346:	8d 88       	st.w	r6[0x20],r8
					AVR32_TWIS_IDR_TCOMP_MASK);
		}
		pending &= ~(AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK);
80002348:	e4 17 ff bf 	andh	r7,0xffbf
8000234c:	e0 17 ff f7 	andl	r7,0xfff7

		// Enable error handling
		twis_inst_slave->ier = AVR32_TWIS_SR_ERROR_MASK;
80002350:	e0 68 70 c0 	mov	r8,28864
80002354:	8d 78       	st.w	r6[0x1c],r8

		// Check if the slave should be in receive or transmit mode
		if (status & AVR32_TWIS_SR_TRA_MASK) {
80002356:	0a 98       	mov	r8,r5
80002358:	e2 18 00 20 	andl	r8,0x20,COH
8000235c:	c0 d0       	breq	80002376 <twis_slave_interrupt_handler+0x76>
			// Transmit mode
			twis_inst_slave->scr = AVR32_TWIS_SR_BTF_MASK;
8000235e:	fc 18 00 80 	movh	r8,0x80
80002362:	8d a8       	st.w	r6[0x28],r8
			twis_inst_slave->ier = AVR32_TWIS_IER_BTF_MASK
80002364:	30 88       	mov	r8,8
80002366:	ea 18 00 80 	orh	r8,0x80
8000236a:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_TCOMP_MASK;
			twis_inst_slave->thr = twis_slave_fct.tx();
8000236c:	4a 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000236e:	70 1c       	ld.w	r12,r8[0x4]
80002370:	5d 1c       	icall	r12
80002372:	8d 4c       	st.w	r6[0x10],r12
80002374:	c0 58       	rjmp	8000237e <twis_slave_interrupt_handler+0x7e>
		} else {
			// Receive mode
			twis_inst_slave->ier = AVR32_TWIS_IER_RXRDY_MASK
80002376:	30 98       	mov	r8,9
80002378:	ea 18 00 40 	orh	r8,0x40
8000237c:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_REP_MASK;
		}
	}

	// Check if there is data ready to be read in the data receive register
	if (pending & AVR32_TWIS_IER_RXRDY_MASK) {
8000237e:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80002382:	c0 80       	breq	80002392 <twis_slave_interrupt_handler+0x92>
		// Call user specific receive function
		twis_slave_fct.rx(twis_inst_slave->rhr);
80002384:	4a 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002386:	70 08       	ld.w	r8,r8[0x0]
80002388:	70 3c       	ld.w	r12,r8[0xc]
8000238a:	4a 08       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000238c:	70 08       	ld.w	r8,r8[0x0]
8000238e:	5c 5c       	castu.b	r12
80002390:	5d 18       	icall	r8
	}

	// Check if the transmit ready flag is raised
	if (pending & AVR32_TWIS_SR_BTF_MASK) {
80002392:	0e 98       	mov	r8,r7
80002394:	e6 18 00 80 	andh	r8,0x80,COH
80002398:	c1 80       	breq	800023c8 <twis_slave_interrupt_handler+0xc8>
		if (status & AVR32_TWIS_SR_NAK_MASK) {
8000239a:	e2 15 01 00 	andl	r5,0x100,COH
8000239e:	c0 f0       	breq	800023bc <twis_slave_interrupt_handler+0xbc>
			twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK;
800023a0:	49 98       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023a2:	70 08       	ld.w	r8,r8[0x0]
800023a4:	fc 19 00 80 	movh	r9,0x80
800023a8:	91 89       	st.w	r8[0x20],r9
			twis_inst_slave->scr = AVR32_TWIS_SCR_BTF_MASK;
800023aa:	91 a9       	st.w	r8[0x28],r9
			twis_inst_slave->ier = AVR32_TWIS_IER_TCOMP_MASK
800023ac:	30 89       	mov	r9,8
800023ae:	ea 19 00 40 	orh	r9,0x40
800023b2:	91 79       	st.w	r8[0x1c],r9
				| AVR32_TWIS_IER_REP_MASK;
			// Clear the NAK
			twis_inst_slave->scr = AVR32_TWIS_SCR_NAK_MASK;
800023b4:	e0 69 01 00 	mov	r9,256
800023b8:	91 a9       	st.w	r8[0x28],r9
800023ba:	c0 78       	rjmp	800023c8 <twis_slave_interrupt_handler+0xc8>
		} else {
			twis_inst_slave->thr = twis_slave_fct.tx();
800023bc:	49 28       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023be:	70 06       	ld.w	r6,r8[0x0]
800023c0:	49 28       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023c2:	70 1c       	ld.w	r12,r8[0x4]
800023c4:	5d 1c       	icall	r12
800023c6:	8d 4c       	st.w	r6[0x10],r12
		}
	}

	// Check if the transmission complete or repeated start flags raised
	if (pending & (AVR32_TWIS_SR_TCOMP_MASK | AVR32_TWIS_SR_REP_MASK)) {
800023c8:	0e 98       	mov	r8,r7
800023ca:	e4 18 00 40 	andh	r8,0x40
800023ce:	e0 18 00 08 	andl	r8,0x8
800023d2:	c1 10       	breq	800023f4 <twis_slave_interrupt_handler+0xf4>
		// Clear transmit complete and repeated start flags
		twis_inst_slave->scr = AVR32_TWIS_SCR_TCOMP_MASK
800023d4:	48 c8       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023d6:	70 08       	ld.w	r8,r8[0x0]
800023d8:	30 89       	mov	r9,8
800023da:	ea 19 00 40 	orh	r9,0x40
800023de:	91 a9       	st.w	r8[0x28],r9
			| AVR32_TWIS_SCR_REP_MASK;
		// Disable transmission ready interrupt
		twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK
800023e0:	30 99       	mov	r9,9
800023e2:	ea 19 00 c0 	orh	r9,0xc0
800023e6:	91 89       	st.w	r8[0x20],r9
			| AVR32_TWIS_IDR_RXRDY_MASK
			| AVR32_TWIS_IDR_TCOMP_MASK
			| AVR32_TWIS_IDR_REP_MASK;
		// Enable slave address match interrupt
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
800023e8:	e0 79 00 00 	mov	r9,65536
800023ec:	91 79       	st.w	r8[0x1c],r9
		// Call user specific stop function
		twis_slave_fct.stop();
800023ee:	48 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023f0:	70 28       	ld.w	r8,r8[0x8]
800023f2:	5d 18       	icall	r8
	 *
	 * Fix/Workaround
	 * Clear SR.NAK only after the Byte Transfer Finished (BTF) bit of the same register has been
	 * set.
	 */
	twis_inst_slave->scr = pending & (~AVR32_TWIS_SCR_NAK_MASK);
800023f4:	48 48       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023f6:	70 08       	ld.w	r8,r8[0x0]
800023f8:	a9 c7       	cbr	r7,0x8
800023fa:	91 a7       	st.w	r8[0x28],r7
	return;
}
800023fc:	e3 cd 40 e0 	ldm	sp++,r5-r7,lr
80002400:	d6 03       	rete
80002402:	00 00       	add	r0,r0
80002404:	00 00       	add	r0,r0
80002406:	05 40       	ld.w	r0,--r2
80002408:	00 00       	add	r0,r0
8000240a:	05 34       	ld.ub	r4,r2++

8000240c <twis_slave_init>:
 *              (see \ref twis_options_t)
 * \param *slave_fct  Pointer on application functions
 */
status_code_t twis_slave_init(volatile avr32_twis_t *twis, const twis_options_t *opt,
		const twis_slave_fct_t *slave_fct)
{
8000240c:	d4 21       	pushm	r4-r7,lr
8000240e:	18 97       	mov	r7,r12
80002410:	16 95       	mov	r5,r11
80002412:	14 94       	mov	r4,r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002414:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002418:	d3 03       	ssrf	0x10
	irqflags_t irq_save;

	irq_save = cpu_irq_save();

	twis->idr = ~0UL;
8000241a:	3f f8       	mov	r8,-1
8000241c:	99 88       	st.w	r12[0x20],r8
	twis->scr = ~0UL;
8000241e:	99 a8       	st.w	r12[0x28],r8

	// Reset the TWIS module
	twis->cr = AVR32_TWIS_CR_SWRST_MASK;
80002420:	e0 68 00 80 	mov	r8,128
80002424:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002426:	12 98       	mov	r8,r9
80002428:	e6 18 00 01 	andh	r8,0x1,COH
8000242c:	c0 21       	brne	80002430 <twis_slave_init+0x24>
      cpu_irq_enable();
8000242e:	d5 03       	csrf	0x10

	cpu_irq_restore(irq_save);

	// Clear the TWIS status register
	twis->scr = ~0UL;;
80002430:	3f f8       	mov	r8,-1
80002432:	8f a8       	st.w	r7[0x28],r8

	// Disable all interrupts
	cpu_irq_disable();
80002434:	d3 03       	ssrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002436:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000243a:	d3 03       	ssrf	0x10

	// register Register twis_slave_interrupt_handler interrupt on level CONF_TWIS_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twis_slave_interrupt_handler,
8000243c:	30 1a       	mov	r10,1
8000243e:	e0 6b 03 60 	mov	r11,864
80002442:	4a 1c       	lddpc	r12,800024c4 <twis_slave_init+0xb8>
80002444:	f0 1f 00 21 	mcall	800024c8 <twis_slave_init+0xbc>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002448:	e6 16 00 01 	andh	r6,0x1,COH
8000244c:	c0 21       	brne	80002450 <twis_slave_init+0x44>
      cpu_irq_enable();
8000244e:	d5 03       	csrf	0x10
			CONF_TWIS_IRQ_LINE, CONF_TWIS_IRQ_LEVEL);
	cpu_irq_restore(flags);

	twis_inst_slave = twis;
80002450:	49 f8       	lddpc	r8,800024cc <twis_slave_init+0xc0>
80002452:	91 07       	st.w	r8[0x0],r7

	// Enable the TWI Slave Module and allow for clock stretching
	twis->cr = AVR32_TWIS_CR_SEN_MASK | AVR32_TWIS_CR_SMATCH_MASK
80002454:	31 58       	mov	r8,21
80002456:	8f 08       	st.w	r7[0x0],r8
	 */
#if AVR32_TWIS_H_VERSION > 120
	twis->cr |= AVR32_TWIS_CR_SOAM_MASK;
#endif

	if (opt->smbus) {
80002458:	eb 39 00 09 	ld.ub	r9,r5[9]
8000245c:	30 08       	mov	r8,0
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 40       	breq	8000246a <twis_slave_init+0x5e>
		twis->cr |= AVR32_TWIS_CR_SMEN_MASK;
80002464:	6e 08       	ld.w	r8,r7[0x0]
80002466:	a1 b8       	sbr	r8,0x1
80002468:	8f 08       	st.w	r7[0x0],r8
	}

	if (opt->tenbit) {
8000246a:	eb 39 00 0a 	ld.ub	r9,r5[10]
8000246e:	30 08       	mov	r8,0
80002470:	f0 09 18 00 	cp.b	r9,r8
80002474:	c0 40       	breq	8000247c <twis_slave_init+0x70>
		twis->cr |= AVR32_TWIS_CR_TENBIT_MASK;
80002476:	6e 08       	ld.w	r8,r7[0x0]
80002478:	bb a8       	sbr	r8,0x1a
8000247a:	8f 08       	st.w	r7[0x0],r8
	}

	// Set slave address
	twis->cr |= (opt->chip << AVR32_TWIS_CR_ADR_OFFSET);
8000247c:	6e 08       	ld.w	r8,r7[0x0]
8000247e:	eb 39 00 08 	ld.ub	r9,r5[8]
80002482:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002486:	8f 08       	st.w	r7[0x0],r8

	// Calculate the wait time from clk falling edge to
	//let the slave control the bus
	uint8_t setup_time = (opt->pba_hz / opt->speed)/7;
	twis->tr = (setup_time << AVR32_TWIS_TR_SUDAT_OFFSET);
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	6a 19       	ld.w	r9,r5[0x4]
8000248c:	f0 09 0d 08 	divu	r8,r8,r9
80002490:	10 9a       	mov	r10,r8
80002492:	e0 69 49 25 	mov	r9,18725
80002496:	ea 19 24 92 	orh	r9,0x2492
8000249a:	f0 09 06 48 	mulu.d	r8,r8,r9
8000249e:	12 1a       	sub	r10,r9
800024a0:	a1 9a       	lsr	r10,0x1
800024a2:	f4 09 00 09 	add	r9,r10,r9
800024a6:	f3 d9 c0 48 	bfextu	r9,r9,0x2,0x8
800024aa:	b1 69       	lsl	r9,0x10
800024ac:	8f 29       	st.w	r7[0x8],r9

	// Get a pointer to user specific functions
	twis_slave_fct = *slave_fct;
800024ae:	48 98       	lddpc	r8,800024d0 <twis_slave_init+0xc4>
800024b0:	e8 ea 00 00 	ld.d	r10,r4[0]
800024b4:	f0 eb 00 00 	st.d	r8[0],r10
800024b8:	68 29       	ld.w	r9,r4[0x8]
800024ba:	91 29       	st.w	r8[0x8],r9

	// Slave Address Match Interrupt Enable
	twis->ier = AVR32_TWIS_IER_SAM_MASK;
800024bc:	e0 78 00 00 	mov	r8,65536
800024c0:	8f 78       	st.w	r7[0x1c],r8

	return STATUS_OK;
}
800024c2:	d8 2a       	popm	r4-r7,pc,r12=0
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	23 00       	sub	r0,48
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	2f dc       	sub	r12,-3
800024cc:	00 00       	add	r0,r0
800024ce:	05 40       	ld.w	r0,--r2
800024d0:	00 00       	add	r0,r0
800024d2:	05 34       	ld.ub	r4,r2++

800024d4 <slaveTransmitterTest>:
		}
	}
}

void slaveTransmitterTest()
{
800024d4:	d4 01       	pushm	lr
	print_dbg("\n\n==============================\nExecutando i2c stx...\n==============================\n");
800024d6:	48 6b       	lddpc	r11,800024ec <slaveTransmitterTest+0x18>
800024d8:	fc 7c 14 00 	mov	r12,-191488
800024dc:	f0 1f 00 05 	mcall	800024f0 <slaveTransmitterTest+0x1c>
	print_dbg("\nFAIL - Nao implementado");
800024e0:	48 5b       	lddpc	r11,800024f4 <slaveTransmitterTest+0x20>
800024e2:	fc 7c 14 00 	mov	r12,-191488
800024e6:	f0 1f 00 03 	mcall	800024f0 <slaveTransmitterTest+0x1c>
}
800024ea:	d8 02       	popm	pc
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	a4 48       	st.h	r2[0x8],r8
800024f0:	80 00       	ld.sh	r0,r0[0x0]
800024f2:	31 80       	mov	r0,24
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	a4 a0       	st.b	r2[0x2],r0

800024f8 <masterReceiverTest>:
		}
	}
}

void masterReceiverTest()
{
800024f8:	d4 31       	pushm	r0-r7,lr
800024fa:	fa cd 01 04 	sub	sp,sp,260
	print_dbg("\n\n==============================\nExecutando i2c mrx...\n==============================\n");
800024fe:	4a eb       	lddpc	r11,800025b4 <masterReceiverTest+0xbc>
80002500:	fc 7c 14 00 	mov	r12,-191488
80002504:	f0 1f 00 2d 	mcall	800025b8 <masterReceiverTest+0xc0>
80002508:	4a d6       	lddpc	r6,800025bc <masterReceiverTest+0xc4>
8000250a:	2f e6       	sub	r6,-2
8000250c:	30 18       	mov	r8,1
8000250e:	30 07       	mov	r7,0
	char* text;
	bool testResult;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_RX)
80002510:	30 24       	mov	r4,2
		{
			trys = 0;
			sentBytesCount = 0;
80002512:	4a c0       	lddpc	r0,800025c0 <masterReceiverTest+0xc8>
80002514:	30 01       	mov	r1,0
			runningMrxTest = i; /* Para que a funcao de interrupcao TxFunction saiba qual teste estah sendo executado. */
			
			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
80002516:	fc 72 14 00 	mov	r2,-191488
	char* text;
	bool testResult;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_RX)
8000251a:	0d 89       	ld.ub	r9,r6[0x0]
8000251c:	e8 09 18 00 	cp.b	r9,r4
80002520:	c0 30       	breq	80002526 <masterReceiverTest+0x2e>
80002522:	10 95       	mov	r5,r8
80002524:	c3 f8       	rjmp	800025a2 <masterReceiverTest+0xaa>
		{
			trys = 0;
			sentBytesCount = 0;
80002526:	a0 81       	st.b	r0[0x0],r1
			runningMrxTest = i; /* Para que a funcao de interrupcao TxFunction saiba qual teste estah sendo executado. */
80002528:	4a 7a       	lddpc	r10,800025c4 <masterReceiverTest+0xcc>
8000252a:	b4 87       	st.b	r10[0x0],r7
			
			sprintf(text, "\nTest %d...", countAux++);
8000252c:	f0 c5 ff ff 	sub	r5,r8,-1
80002530:	1a d8       	st.w	--sp,r8
80002532:	4a 6b       	lddpc	r11,800025c8 <masterReceiverTest+0xd0>
80002534:	30 03       	mov	r3,0
80002536:	06 9c       	mov	r12,r3
80002538:	f0 1f 00 25 	mcall	800025cc <masterReceiverTest+0xd4>
			print_dbg(text);
8000253c:	06 9b       	mov	r11,r3
8000253e:	04 9c       	mov	r12,r2
80002540:	f0 1f 00 1e 	mcall	800025b8 <masterReceiverTest+0xc0>
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002544:	ee 0b 15 07 	lsl	r11,r7,0x7
80002548:	0e 0b       	add	r11,r7
8000254a:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000254e:	fa cd 01 04 	sub	sp,sp,260
80002552:	e0 6a 01 03 	mov	r10,259
80002556:	49 a8       	lddpc	r8,800025bc <masterReceiverTest+0xc4>
80002558:	f0 0b 00 0b 	add	r11,r8,r11
8000255c:	1a 9c       	mov	r12,sp
8000255e:	f0 1f 00 1d 	mcall	800025d0 <masterReceiverTest+0xd8>
80002562:	f0 1f 00 1d 	mcall	800025d4 <masterReceiverTest+0xdc>
			
			ansFrame = rcvTestCmdAnswer();
80002566:	fa cd fe f8 	sub	sp,sp,-264
8000256a:	fa cc ff ff 	sub	r12,sp,-1
8000256e:	f0 1f 00 1b 	mcall	800025d8 <masterReceiverTest+0xe0>
			
			if(ansFrame.magicCode != 0)
80002572:	1b 99       	ld.ub	r9,sp[0x1]
80002574:	1b a8       	ld.ub	r8,sp[0x2]
80002576:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000257a:	c1 00       	breq	8000259a <masterReceiverTest+0xa2>
			{
				if( ansFrame.data[0] == RESULT_TEST_FAIL )
8000257c:	3f f8       	mov	r8,-1
8000257e:	1b d9       	ld.ub	r9,sp[0x5]
80002580:	f0 09 18 00 	cp.b	r9,r8
80002584:	c0 61       	brne	80002590 <masterReceiverTest+0x98>
				{
					print_dbg( " FAIL" );
80002586:	49 6b       	lddpc	r11,800025dc <masterReceiverTest+0xe4>
80002588:	04 9c       	mov	r12,r2
8000258a:	f0 1f 00 0c 	mcall	800025b8 <masterReceiverTest+0xc0>
8000258e:	c0 a8       	rjmp	800025a2 <masterReceiverTest+0xaa>
				}
				else
				{
					print_dbg( " PASS" );
80002590:	49 4b       	lddpc	r11,800025e0 <masterReceiverTest+0xe8>
80002592:	04 9c       	mov	r12,r2
80002594:	f0 1f 00 09 	mcall	800025b8 <masterReceiverTest+0xc0>
80002598:	c0 58       	rjmp	800025a2 <masterReceiverTest+0xaa>
				}
			}
			else
			{
				print_dbg( " MagicCode error! - FAIL" );
8000259a:	49 3b       	lddpc	r11,800025e4 <masterReceiverTest+0xec>
8000259c:	04 9c       	mov	r12,r2
8000259e:	f0 1f 00 07 	mcall	800025b8 <masterReceiverTest+0xc0>
	int i, timeout = 100000000, trys, countAux = 1;
	cmd_frame_t ansFrame;
	char* text;
	bool testResult;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
800025a2:	2f f7       	sub	r7,-1
800025a4:	ec c6 fe fd 	sub	r6,r6,-259
800025a8:	59 47       	cp.w	r7,20
800025aa:	c0 30       	breq	800025b0 <masterReceiverTest+0xb8>
800025ac:	0a 98       	mov	r8,r5
800025ae:	cb 6b       	rjmp	8000251a <masterReceiverTest+0x22>
			{
				print_dbg( " MagicCode error! - FAIL" );
			}
		}
	}
}
800025b0:	2b fd       	sub	sp,-260
800025b2:	d8 32       	popm	r0-r7,pc
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	a4 bc       	st.b	r2[0x3],r12
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	31 80       	mov	r0,24
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	90 00       	ld.sh	r0,r8[0x0]
800025c0:	00 00       	add	r0,r0
800025c2:	05 44       	ld.w	r4,--r2
800025c4:	00 00       	add	r0,r0
800025c6:	05 47       	ld.w	r7,--r2
800025c8:	80 00       	ld.sh	r0,r0[0x0]
800025ca:	a5 14       	ld.d	r4,--r2
800025cc:	80 00       	ld.sh	r0,r0[0x0]
800025ce:	35 2c       	mov	r12,82
800025d0:	80 00       	ld.sh	r0,r0[0x0]
800025d2:	33 e4       	mov	r4,62
800025d4:	80 00       	ld.sh	r0,r0[0x0]
800025d6:	2b ac       	sub	r12,-70
800025d8:	80 00       	ld.sh	r0,r0[0x0]
800025da:	2c a4       	sub	r4,-54
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	a5 20       	st.d	r2++,r0
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	a5 28       	st.d	r2++,r8
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	a5 30       	mul	r0,r2

800025e8 <slaveReceiverTest>:
	print_dbg("\n\n==============================\nExecutando i2c stx...\n==============================\n");
	print_dbg("\nFAIL - Nao implementado");
}

void slaveReceiverTest()
{
800025e8:	d4 31       	pushm	r0-r7,lr
800025ea:	fa cd 01 04 	sub	sp,sp,260
	print_dbg("\n\n==============================\nExecutando i2c srx...\n==============================\n");
800025ee:	4c 2b       	lddpc	r11,800026f4 <slaveReceiverTest+0x10c>
800025f0:	fc 7c 14 00 	mov	r12,-191488
800025f4:	f0 1f 00 41 	mcall	800026f8 <slaveReceiverTest+0x110>
800025f8:	4c 16       	lddpc	r6,800026fc <slaveReceiverTest+0x114>
800025fa:	2f e6       	sub	r6,-2
800025fc:	30 18       	mov	r8,1
800025fe:	30 07       	mov	r7,0
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_S_RX)
80002600:	30 44       	mov	r4,4
		{
			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002602:	4b f3       	lddpc	r3,800026fc <slaveReceiverTest+0x114>

			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
			twim_write( TWI_MASTER, &test_cases[i].data[0], test_cases[i].dataSize, CUBE_COMPUTER_ADDRESS, false );
80002604:	0e 92       	mov	r2,r7
80002606:	30 51       	mov	r1,5
80002608:	fe 70 38 00 	mov	r0,-51200
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_S_RX)
8000260c:	0d 89       	ld.ub	r9,r6[0x0]
8000260e:	e8 09 18 00 	cp.b	r9,r4
80002612:	c0 30       	breq	80002618 <slaveReceiverTest+0x30>
80002614:	10 95       	mov	r5,r8
80002616:	c4 e8       	rjmp	800026b2 <slaveReceiverTest+0xca>
		{
			sprintf(text, "\nTest %d...", countAux++);
80002618:	f0 c5 ff ff 	sub	r5,r8,-1
8000261c:	1a d8       	st.w	--sp,r8
8000261e:	4b 9b       	lddpc	r11,80002700 <slaveReceiverTest+0x118>
80002620:	30 0c       	mov	r12,0
80002622:	f0 1f 00 39 	mcall	80002704 <slaveReceiverTest+0x11c>
			print_dbg(text);
80002626:	30 0b       	mov	r11,0
80002628:	fc 7c 14 00 	mov	r12,-191488
8000262c:	f0 1f 00 33 	mcall	800026f8 <slaveReceiverTest+0x110>
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002630:	ee 0b 15 07 	lsl	r11,r7,0x7
80002634:	0e 0b       	add	r11,r7
80002636:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000263a:	fa cd 01 04 	sub	sp,sp,260
8000263e:	e0 6a 01 03 	mov	r10,259
80002642:	e6 0b 00 0b 	add	r11,r3,r11
80002646:	1a 9c       	mov	r12,sp
80002648:	f0 1f 00 30 	mcall	80002708 <slaveReceiverTest+0x120>
8000264c:	f0 1f 00 30 	mcall	8000270c <slaveReceiverTest+0x124>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002650:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002654:	e0 69 24 00 	mov	r9,9216
80002658:	ea 19 00 f4 	orh	r9,0xf4
8000265c:	f0 09 00 0a 	add	r10,r8,r9
80002660:	fa cd fe f8 	sub	sp,sp,-264
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002664:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002668:	14 38       	cp.w	r8,r10
8000266a:	e0 88 00 08 	brls	8000267a <slaveReceiverTest+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000266e:	12 38       	cp.w	r8,r9
80002670:	fe 98 ff fa 	brls	80002664 <slaveReceiverTest+0x7c>
80002674:	12 3a       	cp.w	r10,r9
80002676:	c2 53       	brcs	800026c0 <slaveReceiverTest+0xd8>
80002678:	cf 6b       	rjmp	80002664 <slaveReceiverTest+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000267a:	12 38       	cp.w	r8,r9
8000267c:	e0 8b 00 22 	brhi	800026c0 <slaveReceiverTest+0xd8>
80002680:	12 3a       	cp.w	r10,r9
80002682:	c1 f3       	brcs	800026c0 <slaveReceiverTest+0xd8>
80002684:	cf 0b       	rjmp	80002664 <slaveReceiverTest+0x7c>
			
			ansFrame = rcvTestCmdAnswer();
			
			if(ansFrame.magicCode != 0)
			{
				if( ansFrame.data[0] == RESULT_TEST_FAIL )
80002686:	3f f8       	mov	r8,-1
80002688:	1b d9       	ld.ub	r9,sp[0x5]
8000268a:	f0 09 18 00 	cp.b	r9,r8
8000268e:	c0 71       	brne	8000269c <slaveReceiverTest+0xb4>
				{
					print_dbg( " FAIL" );
80002690:	4a 0b       	lddpc	r11,80002710 <slaveReceiverTest+0x128>
80002692:	fc 7c 14 00 	mov	r12,-191488
80002696:	f0 1f 00 19 	mcall	800026f8 <slaveReceiverTest+0x110>
8000269a:	c0 c8       	rjmp	800026b2 <slaveReceiverTest+0xca>
				}
				else
				{
					print_dbg( " PASS" );
8000269c:	49 eb       	lddpc	r11,80002714 <slaveReceiverTest+0x12c>
8000269e:	fc 7c 14 00 	mov	r12,-191488
800026a2:	f0 1f 00 16 	mcall	800026f8 <slaveReceiverTest+0x110>
800026a6:	c0 68       	rjmp	800026b2 <slaveReceiverTest+0xca>
				}
			}
			else
			{
				print_dbg( " MagicCode error! - FAIL" );
800026a8:	49 cb       	lddpc	r11,80002718 <slaveReceiverTest+0x130>
800026aa:	fc 7c 14 00 	mov	r12,-191488
800026ae:	f0 1f 00 13 	mcall	800026f8 <slaveReceiverTest+0x110>
	
	int i, countAux = 1;
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
800026b2:	2f f7       	sub	r7,-1
800026b4:	ec c6 fe fd 	sub	r6,r6,-259
800026b8:	59 47       	cp.w	r7,20
800026ba:	c1 b0       	breq	800026f0 <slaveReceiverTest+0x108>
800026bc:	0a 98       	mov	r8,r5
800026be:	ca 7b       	rjmp	8000260c <slaveReceiverTest+0x24>
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);

			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
			twim_write( TWI_MASTER, &test_cases[i].data[0], test_cases[i].dataSize, CUBE_COMPUTER_ADDRESS, false );
800026c0:	ee 0b 15 07 	lsl	r11,r7,0x7
800026c4:	0e 0b       	add	r11,r7
800026c6:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
800026ca:	2f cb       	sub	r11,-4
800026cc:	04 98       	mov	r8,r2
800026ce:	02 99       	mov	r9,r1
800026d0:	0d 9a       	ld.ub	r10,r6[0x1]
800026d2:	e6 0b 00 0b 	add	r11,r3,r11
800026d6:	00 9c       	mov	r12,r0
800026d8:	f0 1f 00 11 	mcall	8000271c <slaveReceiverTest+0x134>
			
			ansFrame = rcvTestCmdAnswer();
800026dc:	fa cc ff ff 	sub	r12,sp,-1
800026e0:	f0 1f 00 10 	mcall	80002720 <slaveReceiverTest+0x138>
			
			if(ansFrame.magicCode != 0)
800026e4:	1b 99       	ld.ub	r9,sp[0x1]
800026e6:	1b a8       	ld.ub	r8,sp[0x2]
800026e8:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800026ec:	cc d1       	brne	80002686 <slaveReceiverTest+0x9e>
800026ee:	cd db       	rjmp	800026a8 <slaveReceiverTest+0xc0>
			{
				print_dbg( " MagicCode error! - FAIL" );
			}
		}
	}
800026f0:	2b fd       	sub	sp,-260
800026f2:	d8 32       	popm	r0-r7,pc
800026f4:	80 00       	ld.sh	r0,r0[0x0]
800026f6:	a5 4c       	asr	r12,0x4
800026f8:	80 00       	ld.sh	r0,r0[0x0]
800026fa:	31 80       	mov	r0,24
800026fc:	80 00       	ld.sh	r0,r0[0x0]
800026fe:	90 00       	ld.sh	r0,r8[0x0]
80002700:	80 00       	ld.sh	r0,r0[0x0]
80002702:	a5 14       	ld.d	r4,--r2
80002704:	80 00       	ld.sh	r0,r0[0x0]
80002706:	35 2c       	mov	r12,82
80002708:	80 00       	ld.sh	r0,r0[0x0]
8000270a:	33 e4       	mov	r4,62
8000270c:	80 00       	ld.sh	r0,r0[0x0]
8000270e:	2b ac       	sub	r12,-70
80002710:	80 00       	ld.sh	r0,r0[0x0]
80002712:	a5 20       	st.d	r2++,r0
80002714:	80 00       	ld.sh	r0,r0[0x0]
80002716:	a5 28       	st.d	r2++,r8
80002718:	80 00       	ld.sh	r0,r0[0x0]
8000271a:	a5 30       	mul	r0,r2
8000271c:	80 00       	ld.sh	r0,r0[0x0]
8000271e:	21 78       	sub	r8,23
80002720:	80 00       	ld.sh	r0,r0[0x0]
80002722:	2c a4       	sub	r4,-54

80002724 <masterTransmitterTest>:
	slaveTransmitterTest();
	slaveReceiverTest();
}

void masterTransmitterTest()
{
80002724:	d4 31       	pushm	r0-r7,lr
	print_dbg("\n\n==============================\nExecutando i2c mtx...\n==============================\n");
80002726:	4c 8b       	lddpc	r11,80002844 <masterTransmitterTest+0x120>
80002728:	fc 7c 14 00 	mov	r12,-191488
8000272c:	f0 1f 00 47 	mcall	80002848 <masterTransmitterTest+0x124>
80002730:	4c 76       	lddpc	r6,8000284c <masterTransmitterTest+0x128>
80002732:	2f e6       	sub	r6,-2
80002734:	30 17       	mov	r7,1
80002736:	0e 98       	mov	r8,r7
80002738:	30 05       	mov	r5,0
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_TX)
8000273a:	30 13       	mov	r3,1
		
			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
		
			/* Aguarda ateh o CC tenha enviado todos os bytes da transmissao de teste. */
			while( (transmissionEnded != true) && (++trys < timeout) ) {};
8000273c:	4c 51       	lddpc	r1,80002850 <masterTransmitterTest+0x12c>
8000273e:	30 02       	mov	r2,0
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_TX)
80002740:	0d 89       	ld.ub	r9,r6[0x0]
80002742:	e6 09 18 00 	cp.b	r9,r3
80002746:	c0 30       	breq	8000274c <masterTransmitterTest+0x28>
80002748:	10 94       	mov	r4,r8
8000274a:	c7 58       	rjmp	80002834 <masterTransmitterTest+0x110>
		{
			trys = 0;
		
			sprintf(text, "\nTest %d...", countAux++);
8000274c:	f0 c4 ff ff 	sub	r4,r8,-1
80002750:	1a d8       	st.w	--sp,r8
80002752:	4c 1b       	lddpc	r11,80002854 <masterTransmitterTest+0x130>
80002754:	30 00       	mov	r0,0
80002756:	00 9c       	mov	r12,r0
80002758:	f0 1f 00 40 	mcall	80002858 <masterTransmitterTest+0x134>
			print_dbg(text);
8000275c:	00 9b       	mov	r11,r0
8000275e:	fc 7c 14 00 	mov	r12,-191488
80002762:	f0 1f 00 3a 	mcall	80002848 <masterTransmitterTest+0x124>
		
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002766:	ea 0b 15 07 	lsl	r11,r5,0x7
8000276a:	0a 0b       	add	r11,r5
8000276c:	ea 0b 00 1b 	add	r11,r5,r11<<0x1
80002770:	fa cd 01 04 	sub	sp,sp,260
80002774:	e0 6a 01 03 	mov	r10,259
80002778:	4b 59       	lddpc	r9,8000284c <masterTransmitterTest+0x128>
8000277a:	f2 0b 00 0b 	add	r11,r9,r11
8000277e:	1a 9c       	mov	r12,sp
80002780:	f0 1f 00 37 	mcall	8000285c <masterTransmitterTest+0x138>
80002784:	f0 1f 00 37 	mcall	80002860 <masterTransmitterTest+0x13c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002788:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000278c:	e0 69 24 00 	mov	r9,9216
80002790:	ea 19 00 f4 	orh	r9,0xf4
80002794:	f0 09 00 0a 	add	r10,r8,r9
80002798:	fa cd fe f8 	sub	sp,sp,-264
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000279c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800027a0:	14 38       	cp.w	r8,r10
800027a2:	e0 88 00 08 	brls	800027b2 <masterTransmitterTest+0x8e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800027a6:	12 38       	cp.w	r8,r9
800027a8:	fe 98 ff fa 	brls	8000279c <masterTransmitterTest+0x78>
800027ac:	12 3a       	cp.w	r10,r9
800027ae:	c0 53       	brcs	800027b8 <masterTransmitterTest+0x94>
800027b0:	cf 6b       	rjmp	8000279c <masterTransmitterTest+0x78>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027b2:	12 38       	cp.w	r8,r9
800027b4:	e0 88 00 07 	brls	800027c2 <masterTransmitterTest+0x9e>
		
			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
		
			/* Aguarda ateh o CC tenha enviado todos os bytes da transmissao de teste. */
			while( (transmissionEnded != true) && (++trys < timeout) ) {};
800027b8:	03 88       	ld.ub	r8,r1[0x0]
800027ba:	e4 08 18 00 	cp.b	r8,r2
800027be:	c1 31       	brne	800027e4 <masterTransmitterTest+0xc0>
800027c0:	c0 48       	rjmp	800027c8 <masterTransmitterTest+0xa4>
800027c2:	12 3a       	cp.w	r10,r9
800027c4:	cf a3       	brcs	800027b8 <masterTransmitterTest+0x94>
800027c6:	ce bb       	rjmp	8000279c <masterTransmitterTest+0x78>
800027c8:	30 08       	mov	r8,0
800027ca:	2f f8       	sub	r8,-1
800027cc:	e0 69 96 80 	mov	r9,38528
800027d0:	ea 19 00 98 	orh	r9,0x98
800027d4:	12 38       	cp.w	r8,r9
800027d6:	cf a1       	brne	800027ca <masterTransmitterTest+0xa6>
		
			if( trys >= timeout )
			{
				print_dbg("\nErro - i2c_tests.c - masterTransmitterTest - timeout");
800027d8:	4a 3b       	lddpc	r11,80002864 <masterTransmitterTest+0x140>
800027da:	fc 7c 14 00 	mov	r12,-191488
800027de:	f0 1f 00 1b 	mcall	80002848 <masterTransmitterTest+0x124>
800027e2:	30 07       	mov	r7,0
				testResult = false;
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
800027e4:	4a 18       	lddpc	r8,80002868 <masterTransmitterTest+0x144>
800027e6:	11 8c       	ld.ub	r12,r8[0x0]
800027e8:	58 0c       	cp.w	r12,0
800027ea:	e0 8a 00 15 	brle	80002814 <masterTransmitterTest+0xf0>
800027ee:	4a 08       	lddpc	r8,8000286c <masterTransmitterTest+0x148>
800027f0:	ea 0b 15 07 	lsl	r11,r5,0x7
800027f4:	0a 0b       	add	r11,r5
800027f6:	ea 0b 00 1b 	add	r11,r5,r11<<0x1
800027fa:	2f cb       	sub	r11,-4
800027fc:	49 49       	lddpc	r9,8000284c <masterTransmitterTest+0x128>
800027fe:	f2 0b 00 0b 	add	r11,r9,r11
	masterReceiverTest();
	slaveTransmitterTest();
	slaveReceiverTest();
}

void masterTransmitterTest()
80002802:	10 0c       	add	r12,r8
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
			{
				if( i2cBytesBuffer[j] != test_cases[i].data[j] )
80002804:	11 3a       	ld.ub	r10,r8++
80002806:	17 39       	ld.ub	r9,r11++
80002808:	f2 0a 18 00 	cp.b	r10,r9
8000280c:	f9 b7 01 00 	movne	r7,0
				print_dbg("\nErro - i2c_tests.c - masterTransmitterTest - timeout");
				testResult = false;
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
80002810:	18 38       	cp.w	r8,r12
80002812:	cf 91       	brne	80002804 <masterTransmitterTest+0xe0>
				if( i2cBytesBuffer[j] != test_cases[i].data[j] )
				testResult = false;
			}
		
			/* Reseta as flags globais */
			receivedBytesCount = 0;
80002814:	49 58       	lddpc	r8,80002868 <masterTransmitterTest+0x144>
80002816:	b0 82       	st.b	r8[0x0],r2
			transmissionEnded = false;
80002818:	a2 82       	st.b	r1[0x0],r2
		
			/* Verifica e imprime o resultado do teste */
			if( testResult == false)
8000281a:	58 07       	cp.w	r7,0
8000281c:	c0 71       	brne	8000282a <masterTransmitterTest+0x106>
			{
				print_dbg( " FAIL" );
8000281e:	49 5b       	lddpc	r11,80002870 <masterTransmitterTest+0x14c>
80002820:	fc 7c 14 00 	mov	r12,-191488
80002824:	f0 1f 00 09 	mcall	80002848 <masterTransmitterTest+0x124>
80002828:	c0 68       	rjmp	80002834 <masterTransmitterTest+0x110>
			}
			else
			{
				print_dbg( " PASS" );
8000282a:	49 3b       	lddpc	r11,80002874 <masterTransmitterTest+0x150>
8000282c:	fc 7c 14 00 	mov	r12,-191488
80002830:	f0 1f 00 06 	mcall	80002848 <masterTransmitterTest+0x124>
	
	int i, j, timeout = 10000000, trys, countAux = 1;
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
80002834:	2f f5       	sub	r5,-1
80002836:	ec c6 fe fd 	sub	r6,r6,-259
8000283a:	59 45       	cp.w	r5,20
8000283c:	c0 30       	breq	80002842 <masterTransmitterTest+0x11e>
8000283e:	08 98       	mov	r8,r4
80002840:	c8 0b       	rjmp	80002740 <masterTransmitterTest+0x1c>
80002842:	d8 32       	popm	r0-r7,pc
80002844:	80 00       	ld.sh	r0,r0[0x0]
80002846:	a5 a4       	sbr	r4,0x4
80002848:	80 00       	ld.sh	r0,r0[0x0]
8000284a:	31 80       	mov	r0,24
8000284c:	80 00       	ld.sh	r0,r0[0x0]
8000284e:	90 00       	ld.sh	r0,r8[0x0]
80002850:	00 00       	add	r0,r0
80002852:	05 46       	ld.w	r6,--r2
80002854:	80 00       	ld.sh	r0,r0[0x0]
80002856:	a5 14       	ld.d	r4,--r2
80002858:	80 00       	ld.sh	r0,r0[0x0]
8000285a:	35 2c       	mov	r12,82
8000285c:	80 00       	ld.sh	r0,r0[0x0]
8000285e:	33 e4       	mov	r4,62
80002860:	80 00       	ld.sh	r0,r0[0x0]
80002862:	2b ac       	sub	r12,-70
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	a5 fc       	*unknown*
80002868:	00 00       	add	r0,r0
8000286a:	05 45       	ld.w	r5,--r2
8000286c:	00 00       	add	r0,r0
8000286e:	07 60       	ld.uh	r0,--r3
80002870:	80 00       	ld.sh	r0,r0[0x0]
80002872:	a5 20       	st.d	r2++,r0
80002874:	80 00       	ld.sh	r0,r0[0x0]
80002876:	a5 28       	st.d	r2++,r8

80002878 <i2c_test_all>:
	transmissionEnded = true;	
	gpio_tgl_gpio_pin(ITASAT_LED5);
}

void i2c_test_all()
{
80002878:	d4 01       	pushm	lr
	masterTransmitterTest();
8000287a:	f0 1f 00 05 	mcall	8000288c <i2c_test_all+0x14>
	masterReceiverTest();
8000287e:	f0 1f 00 05 	mcall	80002890 <i2c_test_all+0x18>
	slaveTransmitterTest();
80002882:	f0 1f 00 05 	mcall	80002894 <i2c_test_all+0x1c>
	slaveReceiverTest();
80002886:	f0 1f 00 05 	mcall	80002898 <i2c_test_all+0x20>
}
8000288a:	d8 02       	popm	pc
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	27 24       	sub	r4,114
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	24 f8       	sub	r8,79
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	24 d4       	sub	r4,77
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	25 e8       	sub	r8,94

8000289c <StopFunction>:
	return byteToSend; /* Envia o byte de numero sentBytesCount do teste em andamento */
}

/* TODO - Add Text */
void StopFunction()
{
8000289c:	d4 01       	pushm	lr
	transmissionEnded = true;	
8000289e:	30 19       	mov	r9,1
800028a0:	48 38       	lddpc	r8,800028ac <StopFunction+0x10>
800028a2:	b0 89       	st.b	r8[0x0],r9
	gpio_tgl_gpio_pin(ITASAT_LED5);
800028a4:	30 dc       	mov	r12,13
800028a6:	f0 1f 00 03 	mcall	800028b0 <StopFunction+0x14>
}
800028aa:	d8 02       	popm	pc
800028ac:	00 00       	add	r0,r0
800028ae:	05 46       	ld.w	r6,--r2
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	2f be       	sub	lr,-5

800028b4 <TxFunction>:
	gpio_tgl_gpio_pin(ITASAT_LED7);
}

/* TODO - Add Text */
uint8_t TxFunction()
{
800028b4:	eb cd 40 80 	pushm	r7,lr
	uint8_t byteToSend = test_cases[runningMrxTest].data[sentBytesCount];
800028b8:	48 b9       	lddpc	r9,800028e4 <TxFunction+0x30>
800028ba:	13 8a       	ld.ub	r10,r9[0x0]
800028bc:	48 b8       	lddpc	r8,800028e8 <TxFunction+0x34>
800028be:	11 88       	ld.ub	r8,r8[0x0]
800028c0:	f0 0b 15 07 	lsl	r11,r8,0x7
800028c4:	10 0b       	add	r11,r8
800028c6:	f0 0b 00 18 	add	r8,r8,r11<<0x1
800028ca:	48 9b       	lddpc	r11,800028ec <TxFunction+0x38>
800028cc:	f6 08 00 08 	add	r8,r11,r8
800028d0:	14 08       	add	r8,r10
800028d2:	11 c7       	ld.ub	r7,r8[0x4]
	
	sentBytesCount++;
800028d4:	2f fa       	sub	r10,-1
800028d6:	b2 8a       	st.b	r9[0x0],r10
	
	gpio_tgl_gpio_pin(ITASAT_LED6);
800028d8:	30 ec       	mov	r12,14
800028da:	f0 1f 00 06 	mcall	800028f0 <TxFunction+0x3c>
	
	return byteToSend; /* Envia o byte de numero sentBytesCount do teste em andamento */
}
800028de:	0e 9c       	mov	r12,r7
800028e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800028e4:	00 00       	add	r0,r0
800028e6:	05 44       	ld.w	r4,--r2
800028e8:	00 00       	add	r0,r0
800028ea:	05 47       	ld.w	r7,--r2
800028ec:	80 00       	ld.sh	r0,r0[0x0]
800028ee:	90 00       	ld.sh	r0,r8[0x0]
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	2f be       	sub	lr,-5

800028f4 <RxFunction>:
		gpio_set_pin_low( ITASAT_LED3 );
}

/* TODO - Add Text */
void RxFunction( uint8_t ReceivedData )
{
800028f4:	d4 01       	pushm	lr
	i2cBytesBuffer[receivedBytesCount++] = ReceivedData;
800028f6:	48 68       	lddpc	r8,8000290c <RxFunction+0x18>
800028f8:	11 89       	ld.ub	r9,r8[0x0]
800028fa:	48 6a       	lddpc	r10,80002910 <RxFunction+0x1c>
800028fc:	f4 09 0b 0c 	st.b	r10[r9],r12
80002900:	2f f9       	sub	r9,-1
80002902:	b0 89       	st.b	r8[0x0],r9
	
	gpio_tgl_gpio_pin(ITASAT_LED7);
80002904:	30 fc       	mov	r12,15
80002906:	f0 1f 00 04 	mcall	80002914 <RxFunction+0x20>
}
8000290a:	d8 02       	popm	pc
8000290c:	00 00       	add	r0,r0
8000290e:	05 45       	ld.w	r5,--r2
80002910:	00 00       	add	r0,r0
80002912:	07 60       	ld.uh	r0,--r3
80002914:	80 00       	ld.sh	r0,r0[0x0]
80002916:	2f be       	sub	lr,-5

80002918 <initI2CTestsInterface>:
	.tx = &TxFunction,
	.stop = &StopFunction
};

void initI2CTestsInterface()
{
80002918:	d4 01       	pushm	lr
	gpio_enable_module_pin( TWIS0_1_TWD_PIN, TWIS0_1_TWD_FUNCTION );
8000291a:	30 0b       	mov	r11,0
8000291c:	34 2c       	mov	r12,66
8000291e:	f0 1f 00 0e 	mcall	80002954 <initI2CTestsInterface+0x3c>
	gpio_enable_module_pin( TWIS0_1_TWCK_PIN, TWIS0_1_TWCK_FUNCTION );
80002922:	30 0b       	mov	r11,0
80002924:	34 3c       	mov	r12,67
80002926:	f0 1f 00 0c 	mcall	80002954 <initI2CTestsInterface+0x3c>
	
	if( STATUS_OK == twis_slave_init( TWI_SLAVE, &TWIS_OPTIONS, &TWIS_FUNCTIONS ))
8000292a:	48 ca       	lddpc	r10,80002958 <initI2CTestsInterface+0x40>
8000292c:	48 cb       	lddpc	r11,8000295c <initI2CTestsInterface+0x44>
8000292e:	fe 7c 40 00 	mov	r12,-49152
80002932:	f0 1f 00 0c 	mcall	80002960 <initI2CTestsInterface+0x48>
80002936:	c0 41       	brne	8000293e <initI2CTestsInterface+0x26>
		gpio_set_pin_low( ITASAT_LED2 );
80002938:	30 ac       	mov	r12,10
8000293a:	f0 1f 00 0b 	mcall	80002964 <initI2CTestsInterface+0x4c>

	if( STATUS_OK == twim_master_init( TWI_MASTER, &TWIM_OPTIONS ))
8000293e:	48 bb       	lddpc	r11,80002968 <initI2CTestsInterface+0x50>
80002940:	fe 7c 38 00 	mov	r12,-51200
80002944:	f0 1f 00 0a 	mcall	8000296c <initI2CTestsInterface+0x54>
80002948:	c0 41       	brne	80002950 <initI2CTestsInterface+0x38>
		gpio_set_pin_low( ITASAT_LED3 );
8000294a:	30 bc       	mov	r12,11
8000294c:	f0 1f 00 06 	mcall	80002964 <initI2CTestsInterface+0x4c>
80002950:	d8 02       	popm	pc
80002952:	00 00       	add	r0,r0
80002954:	80 00       	ld.sh	r0,r0[0x0]
80002956:	2d e4       	sub	r4,-34
80002958:	80 00       	ld.sh	r0,r0[0x0]
8000295a:	a6 34       	st.h	r3[0x6],r4
8000295c:	80 00       	ld.sh	r0,r0[0x0]
8000295e:	a4 3c       	st.h	r2[0x6],r12
80002960:	80 00       	ld.sh	r0,r0[0x0]
80002962:	24 0c       	sub	r12,64
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	2f a8       	sub	r8,-6
80002968:	80 00       	ld.sh	r0,r0[0x0]
8000296a:	a6 40       	st.h	r3[0x8],r0
8000296c:	80 00       	ld.sh	r0,r0[0x0]
8000296e:	22 48       	sub	r8,36

80002970 <manage_command>:
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED0 );
}

void manage_command()
{
80002970:	eb cd 40 80 	pushm	r7,lr
	char* string_aux;
	bool cmd_recognized = false;
	command_buffer[free_index] = '\0';
80002974:	4b 6c       	lddpc	r12,80002a4c <manage_command+0xdc>
80002976:	4b 78       	lddpc	r8,80002a50 <manage_command+0xe0>
80002978:	70 08       	ld.w	r8,r8[0x0]
8000297a:	30 09       	mov	r9,0
8000297c:	f8 08 0b 09 	st.b	r12[r8],r9
	
	if( strcmp( command_buffer, "help" ) == 0 )
80002980:	4b 5b       	lddpc	r11,80002a54 <manage_command+0xe4>
80002982:	f0 1f 00 36 	mcall	80002a58 <manage_command+0xe8>
80002986:	c0 30       	breq	8000298c <manage_command+0x1c>
80002988:	30 07       	mov	r7,0
8000298a:	c2 08       	rjmp	800029ca <manage_command+0x5a>
	{
		print_dbg("\n\nhelp: Apresenta todos os comandos existentes.");
8000298c:	4b 4b       	lddpc	r11,80002a5c <manage_command+0xec>
8000298e:	fc 7c 14 00 	mov	r12,-191488
80002992:	f0 1f 00 34 	mcall	80002a60 <manage_command+0xf0>
		print_dbg("\n\ni2c all: Executa todos os testes do I2C.");
80002996:	4b 4b       	lddpc	r11,80002a64 <manage_command+0xf4>
80002998:	fc 7c 14 00 	mov	r12,-191488
8000299c:	f0 1f 00 31 	mcall	80002a60 <manage_command+0xf0>
		print_dbg("\n\ni2c mtx: Executa o teste da I2C com o CubeComputer como Master Transmitter.");
800029a0:	4b 2b       	lddpc	r11,80002a68 <manage_command+0xf8>
800029a2:	fc 7c 14 00 	mov	r12,-191488
800029a6:	f0 1f 00 2f 	mcall	80002a60 <manage_command+0xf0>
		print_dbg("\n\ni2c mrx: Executa o teste da I2C com o CubeComputer como Master Receiver.");
800029aa:	4b 1b       	lddpc	r11,80002a6c <manage_command+0xfc>
800029ac:	fc 7c 14 00 	mov	r12,-191488
800029b0:	f0 1f 00 2c 	mcall	80002a60 <manage_command+0xf0>
		print_dbg("\n\ni2c stx: Executa o teste da I2C com o CubeComputer como Slave Transmitter.");
800029b4:	4a fb       	lddpc	r11,80002a70 <manage_command+0x100>
800029b6:	fc 7c 14 00 	mov	r12,-191488
800029ba:	f0 1f 00 2a 	mcall	80002a60 <manage_command+0xf0>
		print_dbg("\n\ni2c srx: Executa o teste da I2C com o CubeComputer como Slave Receiver.");
800029be:	4a eb       	lddpc	r11,80002a74 <manage_command+0x104>
800029c0:	fc 7c 14 00 	mov	r12,-191488
800029c4:	f0 1f 00 27 	mcall	80002a60 <manage_command+0xf0>
800029c8:	30 17       	mov	r7,1
		
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "reset" ) == 0 )
800029ca:	4a cb       	lddpc	r11,80002a78 <manage_command+0x108>
800029cc:	4a 0c       	lddpc	r12,80002a4c <manage_command+0xdc>
800029ce:	f0 1f 00 23 	mcall	80002a58 <manage_command+0xe8>
800029d2:	c0 91       	brne	800029e4 <manage_command+0x74>
	{
		general_initialize();
800029d4:	f0 1f 00 2a 	mcall	80002a7c <manage_command+0x10c>
		print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
800029d8:	4a ab       	lddpc	r11,80002a80 <manage_command+0x110>
800029da:	fc 7c 14 00 	mov	r12,-191488
800029de:	f0 1f 00 21 	mcall	80002a60 <manage_command+0xf0>
800029e2:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c all" ) == 0 )
800029e4:	4a 8b       	lddpc	r11,80002a84 <manage_command+0x114>
800029e6:	49 ac       	lddpc	r12,80002a4c <manage_command+0xdc>
800029e8:	f0 1f 00 1c 	mcall	80002a58 <manage_command+0xe8>
800029ec:	c0 41       	brne	800029f4 <manage_command+0x84>
	{
		i2c_test_all();
800029ee:	f0 1f 00 27 	mcall	80002a88 <manage_command+0x118>
800029f2:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c mtx" ) == 0 )
800029f4:	4a 6b       	lddpc	r11,80002a8c <manage_command+0x11c>
800029f6:	49 6c       	lddpc	r12,80002a4c <manage_command+0xdc>
800029f8:	f0 1f 00 18 	mcall	80002a58 <manage_command+0xe8>
800029fc:	c0 41       	brne	80002a04 <manage_command+0x94>
	{
		masterTransmitterTest();
800029fe:	f0 1f 00 25 	mcall	80002a90 <manage_command+0x120>
80002a02:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c mrx" ) == 0 )
80002a04:	4a 4b       	lddpc	r11,80002a94 <manage_command+0x124>
80002a06:	49 2c       	lddpc	r12,80002a4c <manage_command+0xdc>
80002a08:	f0 1f 00 14 	mcall	80002a58 <manage_command+0xe8>
80002a0c:	c0 41       	brne	80002a14 <manage_command+0xa4>
	{
		masterReceiverTest();
80002a0e:	f0 1f 00 23 	mcall	80002a98 <manage_command+0x128>
80002a12:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c stx" ) == 0 )
80002a14:	4a 2b       	lddpc	r11,80002a9c <manage_command+0x12c>
80002a16:	48 ec       	lddpc	r12,80002a4c <manage_command+0xdc>
80002a18:	f0 1f 00 10 	mcall	80002a58 <manage_command+0xe8>
80002a1c:	c0 41       	brne	80002a24 <manage_command+0xb4>
	{
		slaveTransmitterTest();
80002a1e:	f0 1f 00 21 	mcall	80002aa0 <manage_command+0x130>
80002a22:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c srx" ) == 0 )
80002a24:	4a 0b       	lddpc	r11,80002aa4 <manage_command+0x134>
80002a26:	48 ac       	lddpc	r12,80002a4c <manage_command+0xdc>
80002a28:	f0 1f 00 0c 	mcall	80002a58 <manage_command+0xe8>
80002a2c:	c0 41       	brne	80002a34 <manage_command+0xc4>
	{
		slaveReceiverTest();
80002a2e:	f0 1f 00 1f 	mcall	80002aa8 <manage_command+0x138>
80002a32:	c0 88       	rjmp	80002a42 <manage_command+0xd2>
		cmd_recognized = true;
	}
	
	if(!cmd_recognized)
80002a34:	58 07       	cp.w	r7,0
80002a36:	c0 61       	brne	80002a42 <manage_command+0xd2>
	{
		print_dbg("\n\nComando nao reconhecido!");
80002a38:	49 db       	lddpc	r11,80002aac <manage_command+0x13c>
80002a3a:	fc 7c 14 00 	mov	r12,-191488
80002a3e:	f0 1f 00 09 	mcall	80002a60 <manage_command+0xf0>
	}
	
	free_index = 0; //Simulate the reset of command_buffer
80002a42:	30 09       	mov	r9,0
80002a44:	48 38       	lddpc	r8,80002a50 <manage_command+0xe0>
80002a46:	91 09       	st.w	r8[0x0],r9
}
80002a48:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a4c:	00 00       	add	r0,r0
80002a4e:	05 48       	ld.w	r8,--r2
80002a50:	00 00       	add	r0,r0
80002a52:	05 5c       	ld.sh	r12,--r2
80002a54:	80 00       	ld.sh	r0,r0[0x0]
80002a56:	a6 5c       	st.h	r3[0xa],r12
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	35 64       	mov	r4,86
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	a6 64       	st.h	r3[0xc],r4
80002a60:	80 00       	ld.sh	r0,r0[0x0]
80002a62:	31 80       	mov	r0,24
80002a64:	80 00       	ld.sh	r0,r0[0x0]
80002a66:	a6 94       	st.b	r3[0x1],r4
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	a6 c0       	st.b	r3[0x4],r0
80002a6c:	80 00       	ld.sh	r0,r0[0x0]
80002a6e:	a7 10       	ld.d	r0,--r3
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	a7 5c       	asr	r12,0x7
80002a74:	80 00       	ld.sh	r0,r0[0x0]
80002a76:	a7 ac       	sbr	r12,0x6
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	a7 f8       	*unknown*
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	33 54       	mov	r4,53
80002a80:	80 00       	ld.sh	r0,r0[0x0]
80002a82:	a8 00       	st.h	r4[0x0],r0
80002a84:	80 00       	ld.sh	r0,r0[0x0]
80002a86:	a8 54       	st.h	r4[0xa],r4
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	28 78       	sub	r8,-121
80002a8c:	80 00       	ld.sh	r0,r0[0x0]
80002a8e:	a8 5c       	st.h	r4[0xa],r12
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	27 24       	sub	r4,114
80002a94:	80 00       	ld.sh	r0,r0[0x0]
80002a96:	a8 64       	st.h	r4[0xc],r4
80002a98:	80 00       	ld.sh	r0,r0[0x0]
80002a9a:	24 f8       	sub	r8,79
80002a9c:	80 00       	ld.sh	r0,r0[0x0]
80002a9e:	a8 6c       	st.h	r4[0xc],r12
80002aa0:	80 00       	ld.sh	r0,r0[0x0]
80002aa2:	24 d4       	sub	r4,77
80002aa4:	80 00       	ld.sh	r0,r0[0x0]
80002aa6:	a8 74       	st.h	r4[0xe],r4
80002aa8:	80 00       	ld.sh	r0,r0[0x0]
80002aaa:	25 e8       	sub	r8,94
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	a8 7c       	st.h	r4[0xe],r12

80002ab0 <start_terminal>:

void start_terminal()
{
80002ab0:	eb cd 40 f8 	pushm	r3-r7,lr
	int received_char;
	
	while(true)
	{
		if(free_index == 0)
80002ab4:	49 46       	lddpc	r6,80002b04 <start_terminal+0x54>
			print_dbg("\n\n--> ");
80002ab6:	49 53       	lddpc	r3,80002b08 <start_terminal+0x58>
80002ab8:	fc 77 14 00 	mov	r7,-191488
		received_char = usart_getchar( TERMINAL_UART );

		switch(received_char)
		{
			case USART_FAILURE:
				print_dbg("\nterminal_controller.c - start_terminal - USART_FAILURE - A TRATAR!\n");
80002abc:	49 45       	lddpc	r5,80002b0c <start_terminal+0x5c>
				break;
			case ENTER_CHAR:
				manage_command();
				break;
			default:
				command_buffer[free_index] = (char) received_char;
80002abe:	49 54       	lddpc	r4,80002b10 <start_terminal+0x60>
{
	int received_char;
	
	while(true)
	{
		if(free_index == 0)
80002ac0:	6c 08       	ld.w	r8,r6[0x0]
80002ac2:	58 08       	cp.w	r8,0
80002ac4:	c0 51       	brne	80002ace <start_terminal+0x1e>
			print_dbg("\n\n--> ");
80002ac6:	06 9b       	mov	r11,r3
80002ac8:	0e 9c       	mov	r12,r7
80002aca:	f0 1f 00 13 	mcall	80002b14 <start_terminal+0x64>
		
		received_char = usart_getchar( TERMINAL_UART );
80002ace:	0e 9c       	mov	r12,r7
80002ad0:	f0 1f 00 12 	mcall	80002b18 <start_terminal+0x68>

		switch(received_char)
80002ad4:	5b fc       	cp.w	r12,-1
80002ad6:	c0 40       	breq	80002ade <start_terminal+0x2e>
80002ad8:	58 dc       	cp.w	r12,13
80002ada:	c0 a1       	brne	80002aee <start_terminal+0x3e>
80002adc:	c0 68       	rjmp	80002ae8 <start_terminal+0x38>
		{
			case USART_FAILURE:
				print_dbg("\nterminal_controller.c - start_terminal - USART_FAILURE - A TRATAR!\n");
80002ade:	0a 9b       	mov	r11,r5
80002ae0:	0e 9c       	mov	r12,r7
80002ae2:	f0 1f 00 0d 	mcall	80002b14 <start_terminal+0x64>
				break;
80002ae6:	ce db       	rjmp	80002ac0 <start_terminal+0x10>
			case ENTER_CHAR:
				manage_command();
80002ae8:	f0 1f 00 0d 	mcall	80002b1c <start_terminal+0x6c>
				break;
80002aec:	ce ab       	rjmp	80002ac0 <start_terminal+0x10>
			default:
				command_buffer[free_index] = (char) received_char;
80002aee:	6c 08       	ld.w	r8,r6[0x0]
80002af0:	e8 08 0b 0c 	st.b	r4[r8],r12
				free_index++;
80002af4:	2f f8       	sub	r8,-1
80002af6:	8d 08       	st.w	r6[0x0],r8
				usart_putchar( TERMINAL_UART, received_char ); //Echo in PC terminal.
80002af8:	18 9b       	mov	r11,r12
80002afa:	0e 9c       	mov	r12,r7
80002afc:	f0 1f 00 09 	mcall	80002b20 <start_terminal+0x70>
80002b00:	ce 0b       	rjmp	80002ac0 <start_terminal+0x10>
80002b02:	00 00       	add	r0,r0
80002b04:	00 00       	add	r0,r0
80002b06:	05 5c       	ld.sh	r12,--r2
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	a8 98       	st.b	r4[0x1],r8
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	a8 a0       	st.b	r4[0x2],r0
80002b10:	00 00       	add	r0,r0
80002b12:	05 48       	ld.w	r8,--r2
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	31 80       	mov	r0,24
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	31 54       	mov	r4,21
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	29 70       	sub	r0,-105
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	31 04       	mov	r4,16

80002b24 <initTerminalInterface>:
	.paritytype = USART_NO_PARITY,
	.stopbits = USART_1_STOPBIT
};

void initTerminalInterface()
{
80002b24:	d4 01       	pushm	lr
	gpio_enable_module_pin( USART1_1_TX_PIN, USART1_1_TX_FUNCTION );
80002b26:	30 0b       	mov	r11,0
80002b28:	33 1c       	mov	r12,49
80002b2a:	f0 1f 00 0b 	mcall	80002b54 <initTerminalInterface+0x30>
	gpio_enable_module_pin( USART1_1_RX_PIN, USART1_1_RX_FUNCTION );
80002b2e:	30 0b       	mov	r11,0
80002b30:	33 0c       	mov	r12,48
80002b32:	f0 1f 00 09 	mcall	80002b54 <initTerminalInterface+0x30>
	
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
80002b36:	e0 6a 24 00 	mov	r10,9216
80002b3a:	ea 1a 00 f4 	orh	r10,0xf4
80002b3e:	48 7b       	lddpc	r11,80002b58 <initTerminalInterface+0x34>
80002b40:	fc 7c 14 00 	mov	r12,-191488
80002b44:	f0 1f 00 06 	mcall	80002b5c <initTerminalInterface+0x38>
80002b48:	c0 41       	brne	80002b50 <initTerminalInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED0 );
80002b4a:	30 8c       	mov	r12,8
80002b4c:	f0 1f 00 05 	mcall	80002b60 <initTerminalInterface+0x3c>
80002b50:	d8 02       	popm	pc
80002b52:	00 00       	add	r0,r0
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	2d e4       	sub	r4,-34
80002b58:	80 00       	ld.sh	r0,r0[0x0]
80002b5a:	a6 50       	st.h	r3[0xa],r0
80002b5c:	80 00       	ld.sh	r0,r0[0x0]
80002b5e:	31 d0       	mov	r0,29
80002b60:	80 00       	ld.sh	r0,r0[0x0]
80002b62:	2f a8       	sub	r8,-6

80002b64 <newEmptyTestCmdFrame>:
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint8_t testType, uint8_t dataSize)
{
80002b64:	eb cd 40 80 	pushm	r7,lr
80002b68:	fa cd 01 04 	sub	sp,sp,260
80002b6c:	18 97       	mov	r7,r12
	
	newFrame.magicCode = 0x3C7E;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	for(i = 0; i < dataSize; i++)
80002b6e:	58 0a       	cp.w	r10,0
80002b70:	e0 8a 00 0a 	brle	80002b84 <newEmptyTestCmdFrame+0x20>
80002b74:	fa c8 ff fb 	sub	r8,sp,-5
	
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint8_t testType, uint8_t dataSize)
80002b78:	f0 0a 00 0c 	add	r12,r8,r10
	newFrame.magicCode = 0x3C7E;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	for(i = 0; i < dataSize; i++)
		newFrame.data[i] = 0;
80002b7c:	30 09       	mov	r9,0
80002b7e:	10 c9       	st.b	r8++,r9
	
	newFrame.magicCode = 0x3C7E;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	for(i = 0; i < dataSize; i++)
80002b80:	18 38       	cp.w	r8,r12
80002b82:	cf e1       	brne	80002b7e <newEmptyTestCmdFrame+0x1a>
		newFrame.data[i] = 0;
	
	return newFrame;
80002b84:	33 c8       	mov	r8,60
80002b86:	ba 98       	st.b	sp[0x1],r8
80002b88:	37 e8       	mov	r8,126
80002b8a:	ba a8       	st.b	sp[0x2],r8
80002b8c:	ba bb       	st.b	sp[0x3],r11
80002b8e:	ba ca       	st.b	sp[0x4],r10
80002b90:	e0 6a 01 03 	mov	r10,259
80002b94:	fa cb ff ff 	sub	r11,sp,-1
80002b98:	0e 9c       	mov	r12,r7
80002b9a:	f0 1f 00 04 	mcall	80002ba8 <newEmptyTestCmdFrame+0x44>
}
80002b9e:	0e 9c       	mov	r12,r7
80002ba0:	2b fd       	sub	sp,-260
80002ba2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ba6:	00 00       	add	r0,r0
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	33 e4       	mov	r4,62

80002bac <sendTestCmdFrame>:
	for(i = 0; i < frame.dataSize; i++)
		frame.data[i] = 0;
}

void sendTestCmdFrame(cmd_frame_t frame)
{
80002bac:	eb cd 40 fc 	pushm	r2-r7,lr
80002bb0:	fa c4 ff e4 	sub	r4,sp,-28
80002bb4:	88 07       	ld.sh	r7,r4[0x0]
80002bb6:	09 a6       	ld.ub	r6,r4[0x2]
80002bb8:	09 b5       	ld.ub	r5,r4[0x3]
	int aux, i;
	cmd_frame_t anwser;
	
	/* Send cmdCode */
	aux = (frame.magicCode>>8);	
	if( USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002bba:	f7 d7 c1 08 	bfextu	r11,r7,0x8,0x8
80002bbe:	fe 7c 28 00 	mov	r12,-55296
80002bc2:	f0 1f 00 26 	mcall	80002c58 <sendTestCmdFrame+0xac>
80002bc6:	5b fc       	cp.w	r12,-1
80002bc8:	c0 61       	brne	80002bd4 <sendTestCmdFrame+0x28>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002bca:	4a 5b       	lddpc	r11,80002c5c <sendTestCmdFrame+0xb0>
80002bcc:	fc 7c 14 00 	mov	r12,-191488
80002bd0:	f0 1f 00 24 	mcall	80002c60 <sendTestCmdFrame+0xb4>
	}
	aux = (frame.magicCode&0x00FF);
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002bd4:	0e 9b       	mov	r11,r7
80002bd6:	5c 5b       	castu.b	r11
80002bd8:	fe 7c 28 00 	mov	r12,-55296
80002bdc:	f0 1f 00 1f 	mcall	80002c58 <sendTestCmdFrame+0xac>
80002be0:	5b fc       	cp.w	r12,-1
80002be2:	c0 61       	brne	80002bee <sendTestCmdFrame+0x42>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002be4:	49 eb       	lddpc	r11,80002c5c <sendTestCmdFrame+0xb0>
80002be6:	fc 7c 14 00 	mov	r12,-191488
80002bea:	f0 1f 00 1e 	mcall	80002c60 <sendTestCmdFrame+0xb4>
	}
	
	/* Send testType */
	aux = frame.testType;
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002bee:	0c 9b       	mov	r11,r6
80002bf0:	fe 7c 28 00 	mov	r12,-55296
80002bf4:	f0 1f 00 19 	mcall	80002c58 <sendTestCmdFrame+0xac>
80002bf8:	5b fc       	cp.w	r12,-1
80002bfa:	c0 61       	brne	80002c06 <sendTestCmdFrame+0x5a>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002bfc:	49 8b       	lddpc	r11,80002c5c <sendTestCmdFrame+0xb0>
80002bfe:	fc 7c 14 00 	mov	r12,-191488
80002c02:	f0 1f 00 18 	mcall	80002c60 <sendTestCmdFrame+0xb4>
	}
	
	/* Send dataSize */
	aux = frame.dataSize;
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c06:	0a 9b       	mov	r11,r5
80002c08:	fe 7c 28 00 	mov	r12,-55296
80002c0c:	f0 1f 00 13 	mcall	80002c58 <sendTestCmdFrame+0xac>
80002c10:	5b fc       	cp.w	r12,-1
80002c12:	c0 61       	brne	80002c1e <sendTestCmdFrame+0x72>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002c14:	49 2b       	lddpc	r11,80002c5c <sendTestCmdFrame+0xb0>
80002c16:	fc 7c 14 00 	mov	r12,-191488
80002c1a:	f0 1f 00 12 	mcall	80002c60 <sendTestCmdFrame+0xb4>
	}
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
80002c1e:	58 05       	cp.w	r5,0
80002c20:	e0 8a 00 19 	brle	80002c52 <sendTestCmdFrame+0xa6>
80002c24:	e8 c6 ff fc 	sub	r6,r4,-4
80002c28:	30 07       	mov	r7,0
	{
		aux = frame.data[i];		
		if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c2a:	fe 74 28 00 	mov	r4,-55296
		{
			print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002c2e:	48 c3       	lddpc	r3,80002c5c <sendTestCmdFrame+0xb0>
80002c30:	fc 72 14 00 	mov	r2,-191488
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
	{
		aux = frame.data[i];		
		if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c34:	0d 8b       	ld.ub	r11,r6[0x0]
80002c36:	08 9c       	mov	r12,r4
80002c38:	f0 1f 00 08 	mcall	80002c58 <sendTestCmdFrame+0xac>
80002c3c:	5b fc       	cp.w	r12,-1
80002c3e:	c0 51       	brne	80002c48 <sendTestCmdFrame+0x9c>
		{
			print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002c40:	06 9b       	mov	r11,r3
80002c42:	04 9c       	mov	r12,r2
80002c44:	f0 1f 00 07 	mcall	80002c60 <sendTestCmdFrame+0xb4>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
	}
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
80002c48:	2f f7       	sub	r7,-1
80002c4a:	2f f6       	sub	r6,-1
80002c4c:	0e 35       	cp.w	r5,r7
80002c4e:	fe 99 ff f3 	brgt	80002c34 <sendTestCmdFrame+0x88>
80002c52:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002c56:	00 00       	add	r0,r0
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	31 04       	mov	r4,16
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	a8 f4       	st.b	r4[0x7],r4
80002c60:	80 00       	ld.sh	r0,r0[0x0]
80002c62:	31 80       	mov	r0,24

80002c64 <initTestsExecContrInterface>:
		print_dbg(textAux);
	}
}

void initTestsExecContrInterface()
{
80002c64:	d4 01       	pushm	lr
	gpio_enable_module_pin( USART0_1_TX_PIN, USART0_1_TX_FUNCTION );
80002c66:	30 3b       	mov	r11,3
80002c68:	35 0c       	mov	r12,80
80002c6a:	f0 1f 00 0b 	mcall	80002c94 <initTestsExecContrInterface+0x30>
	gpio_enable_module_pin( USART0_1_RX_PIN, USART0_1_RX_FUNCTION );
80002c6e:	30 3b       	mov	r11,3
80002c70:	34 fc       	mov	r12,79
80002c72:	f0 1f 00 09 	mcall	80002c94 <initTestsExecContrInterface+0x30>
	
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
80002c76:	e0 6a 24 00 	mov	r10,9216
80002c7a:	ea 1a 00 f4 	orh	r10,0xf4
80002c7e:	48 7b       	lddpc	r11,80002c98 <initTestsExecContrInterface+0x34>
80002c80:	fe 7c 28 00 	mov	r12,-55296
80002c84:	f0 1f 00 06 	mcall	80002c9c <initTestsExecContrInterface+0x38>
80002c88:	c0 41       	brne	80002c90 <initTestsExecContrInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED1 );
80002c8a:	30 9c       	mov	r12,9
80002c8c:	f0 1f 00 05 	mcall	80002ca0 <initTestsExecContrInterface+0x3c>
80002c90:	d8 02       	popm	pc
80002c92:	00 00       	add	r0,r0
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	2d e4       	sub	r4,-34
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	a8 e8       	st.b	r4[0x6],r8
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	31 d0       	mov	r0,29
80002ca0:	80 00       	ld.sh	r0,r0[0x0]
80002ca2:	2f a8       	sub	r8,-6

80002ca4 <rcvTestCmdAnswer>:
		}
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
80002ca4:	d4 31       	pushm	r0-r7,lr
80002ca6:	fa cd 01 14 	sub	sp,sp,276
80002caa:	18 92       	mov	r2,r12
80002cac:	30 03       	mov	r3,0
80002cae:	06 95       	mov	r5,r3
80002cb0:	30 17       	mov	r7,1
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{		
		//rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
		rcvByte = usart_getchar( TESTS_EXEC_CTRL_UART );
80002cb2:	fe 74 28 00 	mov	r4,-55296
			cmdAwsFrameRcv.dataSize = 0;
			cmdAwsFrameRcv.testType = 0;
			return cmdAwsFrameRcv;
		}

		switch( automataState )
80002cb6:	30 26       	mov	r6,2
80002cb8:	30 31       	mov	r1,3
					c++;
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == dataSize )
80002cba:	06 90       	mov	r0,r3
		}
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
80002cbc:	50 03       	stdsp	sp[0x0],r3
80002cbe:	c0 48       	rjmp	80002cc6 <rcvTestCmdAnswer+0x22>
80002cc0:	00 93       	mov	r3,r0
80002cc2:	40 05       	lddsp	r5,sp[0x0]
80002cc4:	30 17       	mov	r7,1
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{		
		//rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
		rcvByte = usart_getchar( TESTS_EXEC_CTRL_UART );
80002cc6:	08 9c       	mov	r12,r4
80002cc8:	f0 1f 00 35 	mcall	80002d9c <rcvTestCmdAnswer+0xf8>
		
		if(rcvByte == USART_TIMEOUT || rcvByte == USART_FAILURE)
80002ccc:	5b fc       	cp.w	r12,-1
80002cce:	c0 e1       	brne	80002cea <rcvTestCmdAnswer+0x46>
		{
			print_dbg("\n\ntests_execution_control - rcvTestCmdAnswer - USART_TIMEOUT OR USART_FAILURE");
80002cd0:	4b 4b       	lddpc	r11,80002da0 <rcvTestCmdAnswer+0xfc>
80002cd2:	fc 7c 14 00 	mov	r12,-191488
80002cd6:	f0 1f 00 34 	mcall	80002da4 <rcvTestCmdAnswer+0x100>
			initTestsExecContrInterface(); /* Reinicia a interface */
80002cda:	f0 1f 00 34 	mcall	80002da8 <rcvTestCmdAnswer+0x104>
			cmdAwsFrameRcv.magicCode = 0;
			cmdAwsFrameRcv.dataSize = 0;
			cmdAwsFrameRcv.testType = 0;
			return cmdAwsFrameRcv;
80002cde:	30 08       	mov	r8,0
80002ce0:	a4 88       	st.b	r2[0x0],r8
80002ce2:	a4 98       	st.b	r2[0x1],r8
80002ce4:	a4 b8       	st.b	r2[0x3],r8
80002ce6:	a4 a8       	st.b	r2[0x2],r8
80002ce8:	c5 78       	rjmp	80002d96 <rcvTestCmdAnswer+0xf2>
		}

		switch( automataState )
80002cea:	ec 07 18 00 	cp.b	r7,r6
80002cee:	c1 50       	breq	80002d18 <rcvTestCmdAnswer+0x74>
80002cf0:	e0 8b 00 07 	brhi	80002cfe <rcvTestCmdAnswer+0x5a>
80002cf4:	30 18       	mov	r8,1
80002cf6:	f0 07 18 00 	cp.b	r7,r8
80002cfa:	ce 31       	brne	80002cc0 <rcvTestCmdAnswer+0x1c>
80002cfc:	c0 98       	rjmp	80002d0e <rcvTestCmdAnswer+0x6a>
80002cfe:	e2 07 18 00 	cp.b	r7,r1
80002d02:	c1 20       	breq	80002d26 <rcvTestCmdAnswer+0x82>
80002d04:	30 48       	mov	r8,4
80002d06:	f0 07 18 00 	cp.b	r7,r8
80002d0a:	cd b1       	brne	80002cc0 <rcvTestCmdAnswer+0x1c>
80002d0c:	c2 78       	rjmp	80002d5a <rcvTestCmdAnswer+0xb6>
		{
		case 1:
			if( rcvByte == 0xE7 )
80002d0e:	e0 4c 00 e7 	cp.w	r12,231
80002d12:	f9 b7 00 02 	moveq	r7,2
80002d16:	cd 8b       	rjmp	80002cc6 <rcvTestCmdAnswer+0x22>
				automataState = 2;
			break;

		case 2:
			if( rcvByte == 0xC3 )
80002d18:	e0 4c 00 c3 	cp.w	r12,195
80002d1c:	f9 b7 00 03 	moveq	r7,3
80002d20:	f9 b7 01 01 	movne	r7,1
80002d24:	cd 1b       	rjmp	80002cc6 <rcvTestCmdAnswer+0x22>
			else
				automataState = 1;
			break;

		case 3:
			switch( c )
80002d26:	30 08       	mov	r8,0
80002d28:	f0 05 19 00 	cp.h	r5,r8
80002d2c:	c0 60       	breq	80002d38 <rcvTestCmdAnswer+0x94>
80002d2e:	30 19       	mov	r9,1
80002d30:	f2 05 19 00 	cp.h	r5,r9
80002d34:	cc 91       	brne	80002cc6 <rcvTestCmdAnswer+0x22>
80002d36:	c0 58       	rjmp	80002d40 <rcvTestCmdAnswer+0x9c>
			{
			case 0:
				/* Recebendo o MSByte do testCaseNumber */
				testType = rcvByte;
80002d38:	5c 5c       	castu.b	r12
80002d3a:	50 3c       	stdsp	sp[0xc],r12
80002d3c:	30 15       	mov	r5,1
				c++;
				break;
80002d3e:	cc 4b       	rjmp	80002cc6 <rcvTestCmdAnswer+0x22>

			case 1:
				/* Recebendo o MSByte do N */
				dataSize = rcvByte;
80002d40:	e7 dc b0 10 	bfexts	r3,r12,0x0,0x10
				automataState = 4;
				c = 0;
				
				/* Comando identificado, agora basta receber os parametros */
				cmdAwsFrameRcv = newEmptyTestCmdFrame( testType, dataSize );
80002d44:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
80002d48:	40 3b       	lddsp	r11,sp[0xc]
80002d4a:	04 9c       	mov	r12,r2
80002d4c:	f0 1f 00 18 	mcall	80002dac <rcvTestCmdAnswer+0x108>
80002d50:	05 b9       	ld.ub	r9,r2[0x3]
80002d52:	05 a8       	ld.ub	r8,r2[0x2]
				 * problemas, pois o automato identifica apenas frames com o parametro 0xE7C3.
				 */
				cmdAwsFrameRcv.magicCode = 0xE7C3;
				
				/* Caso nao irah ser recebido nenhum dado extra, o programa nao pode continuar aguardando*/
				if( dataSize == 0)
80002d54:	58 03       	cp.w	r3,0
80002d56:	c1 60       	breq	80002d82 <rcvTestCmdAnswer+0xde>
80002d58:	c1 08       	rjmp	80002d78 <rcvTestCmdAnswer+0xd4>
				break;
			}
			break;

			case 4:
				if( c < dataSize )
80002d5a:	ea 03 19 00 	cp.h	r3,r5
80002d5e:	e0 88 00 09 	brls	80002d70 <rcvTestCmdAnswer+0xcc>
				{
					cmdAwsFrameRcv.data[c] = rcvByte;
80002d62:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
80002d66:	e4 08 00 08 	add	r8,r2,r8
80002d6a:	b0 cc       	st.b	r8[0x4],r12
					c++;
80002d6c:	2f f5       	sub	r5,-1
80002d6e:	5c 85       	casts.h	r5
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == dataSize )
80002d70:	e6 05 19 00 	cp.h	r5,r3
80002d74:	ca 91       	brne	80002cc6 <rcvTestCmdAnswer+0x22>
80002d76:	c0 88       	rjmp	80002d86 <rcvTestCmdAnswer+0xe2>
80002d78:	50 19       	stdsp	sp[0x4],r9
80002d7a:	50 28       	stdsp	sp[0x8],r8
80002d7c:	00 95       	mov	r5,r0
80002d7e:	30 47       	mov	r7,4
80002d80:	ca 3b       	rjmp	80002cc6 <rcvTestCmdAnswer+0x22>
80002d82:	50 19       	stdsp	sp[0x4],r9
80002d84:	50 28       	stdsp	sp[0x8],r8
				dataSize = 0;
				break;
		}
	}
	
	return cmdAwsFrameRcv;
80002d86:	3e 78       	mov	r8,-25
80002d88:	a4 88       	st.b	r2[0x0],r8
80002d8a:	3c 38       	mov	r8,-61
80002d8c:	a4 98       	st.b	r2[0x1],r8
80002d8e:	40 18       	lddsp	r8,sp[0x4]
80002d90:	a4 b8       	st.b	r2[0x3],r8
80002d92:	40 29       	lddsp	r9,sp[0x8]
80002d94:	a4 a9       	st.b	r2[0x2],r9
80002d96:	04 9c       	mov	r12,r2
80002d98:	2b bd       	sub	sp,-276
80002d9a:	d8 32       	popm	r0-r7,pc
80002d9c:	80 00       	ld.sh	r0,r0[0x0]
80002d9e:	31 54       	mov	r4,21
80002da0:	80 00       	ld.sh	r0,r0[0x0]
80002da2:	a9 30       	mul	r0,r4
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	31 80       	mov	r0,24
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2c 64       	sub	r4,-58
80002dac:	80 00       	ld.sh	r0,r0[0x0]
80002dae:	2b 64       	sub	r4,-74

80002db0 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002db0:	fe 68 00 00 	mov	r8,-131072
80002db4:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002db6:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002dba:	91 09       	st.w	r8[0x0],r9
}
80002dbc:	5e fc       	retal	r12
80002dbe:	d7 03       	nop

80002dc0 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002dc0:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002dc2:	e0 68 8a 3f 	mov	r8,35391
80002dc6:	ea 18 01 f7 	orh	r8,0x1f7
80002dca:	10 3c       	cp.w	r12,r8
80002dcc:	e0 88 00 06 	brls	80002dd8 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80002dd0:	30 1c       	mov	r12,1
80002dd2:	f0 1f 00 04 	mcall	80002de0 <flashc_set_bus_freq+0x20>
80002dd6:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80002dd8:	30 0c       	mov	r12,0
80002dda:	f0 1f 00 02 	mcall	80002de0 <flashc_set_bus_freq+0x20>
80002dde:	d8 02       	popm	pc
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	2d b0       	sub	r0,-37

80002de4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002de4:	f8 08 16 05 	lsr	r8,r12,0x5
80002de8:	a9 78       	lsl	r8,0x9
80002dea:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80002dee:	58 7b       	cp.w	r11,7
80002df0:	e0 8b 00 05 	brhi	80002dfa <gpio_enable_module_pin+0x16>
80002df4:	4a 09       	lddpc	r9,80002e74 <gpio_enable_module_pin+0x90>
80002df6:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002dfa:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002dfc:	30 19       	mov	r9,1
80002dfe:	f2 0c 09 49 	lsl	r9,r9,r12
80002e02:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e04:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002e06:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002e08:	c3 18       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e0a:	30 19       	mov	r9,1
80002e0c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e10:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e12:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002e14:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002e16:	c2 a8       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e18:	30 19       	mov	r9,1
80002e1a:	f2 0c 09 49 	lsl	r9,r9,r12
80002e1e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e20:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002e22:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002e24:	c2 38       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e26:	30 19       	mov	r9,1
80002e28:	f2 0c 09 49 	lsl	r9,r9,r12
80002e2c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e2e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002e30:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002e32:	c1 c8       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e34:	30 19       	mov	r9,1
80002e36:	f2 0c 09 49 	lsl	r9,r9,r12
80002e3a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e3c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e3e:	91 d9       	st.w	r8[0x34],r9
		break;
80002e40:	c1 58       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e42:	30 19       	mov	r9,1
80002e44:	f2 0c 09 49 	lsl	r9,r9,r12
80002e48:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e4a:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e4c:	91 d9       	st.w	r8[0x34],r9
		break;
80002e4e:	c0 e8       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e50:	30 19       	mov	r9,1
80002e52:	f2 0c 09 49 	lsl	r9,r9,r12
80002e56:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e58:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e5a:	91 d9       	st.w	r8[0x34],r9
		break;
80002e5c:	c0 78       	rjmp	80002e6a <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e5e:	30 19       	mov	r9,1
80002e60:	f2 0c 09 49 	lsl	r9,r9,r12
80002e64:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e66:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e68:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002e6a:	30 19       	mov	r9,1
80002e6c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e70:	91 2c       	st.w	r8[0x8],r12
80002e72:	5e fd       	retal	0
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	a9 bc       	sbr	r12,0x9

80002e78 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002e78:	f8 08 16 05 	lsr	r8,r12,0x5
80002e7c:	a9 78       	lsl	r8,0x9
80002e7e:	e0 28 e0 00 	sub	r8,57344

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80002e82:	16 99       	mov	r9,r11
80002e84:	e2 19 00 08 	andl	r9,0x8,COH
80002e88:	c0 70       	breq	80002e96 <gpio_configure_pin+0x1e>
		gpio_port->pders = 1 << (pin & 0x1F);
80002e8a:	30 19       	mov	r9,1
80002e8c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e90:	f1 49 00 84 	st.w	r8[132],r9
80002e94:	c0 68       	rjmp	80002ea0 <gpio_configure_pin+0x28>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80002e96:	30 19       	mov	r9,1
80002e98:	f2 0c 09 49 	lsl	r9,r9,r12
80002e9c:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002ea0:	16 99       	mov	r9,r11
80002ea2:	e2 19 00 04 	andl	r9,0x4,COH
80002ea6:	c0 70       	breq	80002eb4 <gpio_configure_pin+0x3c>
		gpio_port->puers = 1 << (pin & 0x1F);
80002ea8:	30 19       	mov	r9,1
80002eaa:	f2 0c 09 49 	lsl	r9,r9,r12
80002eae:	f1 49 00 74 	st.w	r8[116],r9
80002eb2:	c0 68       	rjmp	80002ebe <gpio_configure_pin+0x46>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002eb4:	30 19       	mov	r9,1
80002eb6:	f2 0c 09 49 	lsl	r9,r9,r12
80002eba:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80002ebe:	16 99       	mov	r9,r11
80002ec0:	e2 19 00 40 	andl	r9,0x40,COH
80002ec4:	c0 70       	breq	80002ed2 <gpio_configure_pin+0x5a>
		gpio_port->odmers = 1 << (pin & 0x1F);
80002ec6:	30 19       	mov	r9,1
80002ec8:	f2 0c 09 49 	lsl	r9,r9,r12
80002ecc:	f1 49 00 e4 	st.w	r8[228],r9
80002ed0:	c0 68       	rjmp	80002edc <gpio_configure_pin+0x64>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80002ed2:	30 19       	mov	r9,1
80002ed4:	f2 0c 09 49 	lsl	r9,r9,r12
80002ed8:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
80002edc:	16 99       	mov	r9,r11
80002ede:	e2 19 00 10 	andl	r9,0x10,COH
80002ee2:	c0 70       	breq	80002ef0 <gpio_configure_pin+0x78>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80002ee4:	30 19       	mov	r9,1
80002ee6:	f2 0c 09 49 	lsl	r9,r9,r12
80002eea:	f1 49 01 04 	st.w	r8[260],r9
80002eee:	c0 68       	rjmp	80002efa <gpio_configure_pin+0x82>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80002ef0:	30 19       	mov	r9,1
80002ef2:	f2 0c 09 49 	lsl	r9,r9,r12
80002ef6:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80002efa:	16 99       	mov	r9,r11
80002efc:	e2 19 00 20 	andl	r9,0x20,COH
80002f00:	c0 70       	breq	80002f0e <gpio_configure_pin+0x96>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80002f02:	30 19       	mov	r9,1
80002f04:	f2 0c 09 49 	lsl	r9,r9,r12
80002f08:	f1 49 01 14 	st.w	r8[276],r9
80002f0c:	c0 68       	rjmp	80002f18 <gpio_configure_pin+0xa0>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
80002f0e:	30 19       	mov	r9,1
80002f10:	f2 0c 09 49 	lsl	r9,r9,r12
80002f14:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002f18:	16 99       	mov	r9,r11
80002f1a:	e2 19 00 80 	andl	r9,0x80,COH
80002f1e:	c2 40       	breq	80002f66 <gpio_configure_pin+0xee>
		if (flags & GPIO_BOTHEDGES) {
80002f20:	16 99       	mov	r9,r11
80002f22:	e2 19 01 80 	andl	r9,0x180,COH
80002f26:	c0 90       	breq	80002f38 <gpio_configure_pin+0xc0>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002f28:	30 19       	mov	r9,1
80002f2a:	f2 0c 09 49 	lsl	r9,r9,r12
80002f2e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002f32:	f1 49 00 b8 	st.w	r8[184],r9
80002f36:	c1 88       	rjmp	80002f66 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_RISING) {
80002f38:	16 99       	mov	r9,r11
80002f3a:	e2 19 02 80 	andl	r9,0x280,COH
80002f3e:	c0 90       	breq	80002f50 <gpio_configure_pin+0xd8>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002f40:	30 19       	mov	r9,1
80002f42:	f2 0c 09 49 	lsl	r9,r9,r12
80002f46:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002f4a:	f1 49 00 b8 	st.w	r8[184],r9
80002f4e:	c0 c8       	rjmp	80002f66 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_FALLING) {
80002f50:	16 99       	mov	r9,r11
80002f52:	e2 19 03 80 	andl	r9,0x380,COH
80002f56:	c0 80       	breq	80002f66 <gpio_configure_pin+0xee>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002f58:	30 19       	mov	r9,1
80002f5a:	f2 0c 09 49 	lsl	r9,r9,r12
80002f5e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002f62:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002f66:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002f6a:	c1 50       	breq	80002f94 <gpio_configure_pin+0x11c>
		if (flags & GPIO_INIT_HIGH) {
80002f6c:	e2 1b 00 02 	andl	r11,0x2,COH
80002f70:	c0 70       	breq	80002f7e <gpio_configure_pin+0x106>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002f72:	30 19       	mov	r9,1
80002f74:	f2 0c 09 49 	lsl	r9,r9,r12
80002f78:	f1 49 00 54 	st.w	r8[84],r9
80002f7c:	c0 68       	rjmp	80002f88 <gpio_configure_pin+0x110>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002f7e:	30 19       	mov	r9,1
80002f80:	f2 0c 09 49 	lsl	r9,r9,r12
80002f84:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002f88:	30 19       	mov	r9,1
80002f8a:	f2 0c 09 49 	lsl	r9,r9,r12
80002f8e:	f1 49 00 44 	st.w	r8[68],r9
80002f92:	c0 68       	rjmp	80002f9e <gpio_configure_pin+0x126>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002f94:	30 19       	mov	r9,1
80002f96:	f2 0c 09 49 	lsl	r9,r9,r12
80002f9a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002f9e:	30 19       	mov	r9,1
80002fa0:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fa4:	91 1c       	st.w	r8[0x4],r12
}
80002fa6:	5e fc       	retal	r12

80002fa8 <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002fa8:	f8 08 16 05 	lsr	r8,r12,0x5
80002fac:	a9 78       	lsl	r8,0x9
80002fae:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002fb2:	30 19       	mov	r9,1
80002fb4:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fb8:	f1 4c 00 58 	st.w	r8[88],r12
}
80002fbc:	5e fc       	retal	r12

80002fbe <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002fbe:	f8 08 16 05 	lsr	r8,r12,0x5
80002fc2:	a9 78       	lsl	r8,0x9
80002fc4:	e0 28 e0 00 	sub	r8,57344
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002fc8:	30 19       	mov	r9,1
80002fca:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fce:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002fd2:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002fd6:	91 1c       	st.w	r8[0x4],r12
}
80002fd8:	5e fc       	retal	r12
80002fda:	d7 03       	nop

80002fdc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002fdc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002fe0:	49 99       	lddpc	r9,80003044 <INTC_register_interrupt+0x68>
80002fe2:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002fe6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002fea:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002fec:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002ff0:	58 0a       	cp.w	r10,0
80002ff2:	c0 91       	brne	80003004 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002ff4:	49 59       	lddpc	r9,80003048 <INTC_register_interrupt+0x6c>
80002ff6:	49 6a       	lddpc	r10,8000304c <INTC_register_interrupt+0x70>
80002ff8:	12 1a       	sub	r10,r9
80002ffa:	fe 79 00 00 	mov	r9,-65536
80002ffe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003002:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80003004:	58 1a       	cp.w	r10,1
80003006:	c0 a1       	brne	8000301a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003008:	49 09       	lddpc	r9,80003048 <INTC_register_interrupt+0x6c>
8000300a:	49 2a       	lddpc	r10,80003050 <INTC_register_interrupt+0x74>
8000300c:	12 1a       	sub	r10,r9
8000300e:	bf aa       	sbr	r10,0x1e
80003010:	fe 79 00 00 	mov	r9,-65536
80003014:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003018:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000301a:	58 2a       	cp.w	r10,2
8000301c:	c0 a1       	brne	80003030 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000301e:	48 b9       	lddpc	r9,80003048 <INTC_register_interrupt+0x6c>
80003020:	48 da       	lddpc	r10,80003054 <INTC_register_interrupt+0x78>
80003022:	12 1a       	sub	r10,r9
80003024:	bf ba       	sbr	r10,0x1f
80003026:	fe 79 00 00 	mov	r9,-65536
8000302a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000302e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003030:	48 69       	lddpc	r9,80003048 <INTC_register_interrupt+0x6c>
80003032:	48 aa       	lddpc	r10,80003058 <INTC_register_interrupt+0x7c>
80003034:	12 1a       	sub	r10,r9
80003036:	ea 1a c0 00 	orh	r10,0xc000
8000303a:	fe 79 00 00 	mov	r9,-65536
8000303e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003042:	5e fc       	retal	r12
80003044:	80 00       	ld.sh	r0,r0[0x0]
80003046:	a9 dc       	cbr	r12,0x9
80003048:	80 00       	ld.sh	r0,r0[0x0]
8000304a:	8e 00       	ld.sh	r0,r7[0x0]
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	8f 04       	st.w	r7[0x0],r4
80003050:	80 00       	ld.sh	r0,r0[0x0]
80003052:	8f 12       	st.w	r7[0x4],r2
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	8f 20       	st.w	r7[0x8],r0
80003058:	80 00       	ld.sh	r0,r0[0x0]
8000305a:	8f 2e       	st.w	r7[0x8],lr

8000305c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000305c:	fe 78 00 00 	mov	r8,-65536
80003060:	e0 69 00 83 	mov	r9,131
80003064:	f2 0c 01 0c 	sub	r12,r9,r12
80003068:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000306c:	f2 ca ff c0 	sub	r10,r9,-64
80003070:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003074:	58 08       	cp.w	r8,0
80003076:	c0 21       	brne	8000307a <_get_interrupt_handler+0x1e>
80003078:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000307a:	f0 08 12 00 	clz	r8,r8
8000307e:	48 5a       	lddpc	r10,80003090 <_get_interrupt_handler+0x34>
80003080:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003084:	f0 08 11 1f 	rsub	r8,r8,31
80003088:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000308a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000308e:	5e fc       	retal	r12
80003090:	80 00       	ld.sh	r0,r0[0x0]
80003092:	a9 dc       	cbr	r12,0x9

80003094 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003094:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003096:	f6 08 15 04 	lsl	r8,r11,0x4
8000309a:	14 38       	cp.w	r8,r10
8000309c:	f9 b8 08 10 	movls	r8,16
800030a0:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800030a4:	f0 0b 02 4b 	mul	r11,r8,r11
800030a8:	f6 09 16 01 	lsr	r9,r11,0x1
800030ac:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
800030b0:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800030b4:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800030b8:	f2 cb 00 01 	sub	r11,r9,1
800030bc:	e0 4b ff fe 	cp.w	r11,65534
800030c0:	e0 88 00 03 	brls	800030c6 <usart_set_async_baudrate+0x32>
800030c4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800030c6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800030c8:	e8 6e 00 00 	mov	lr,524288
800030cc:	59 08       	cp.w	r8,16
800030ce:	fc 08 17 10 	movne	r8,lr
800030d2:	f9 b8 00 00 	moveq	r8,0
800030d6:	e4 1b ff f7 	andh	r11,0xfff7
800030da:	e0 1b fe cf 	andl	r11,0xfecf
800030de:	16 48       	or	r8,r11
800030e0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800030e2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800030e6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800030ea:	99 89       	st.w	r12[0x20],r9
800030ec:	d8 0a       	popm	pc,r12=0

800030ee <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800030ee:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800030f0:	e2 18 00 02 	andl	r8,0x2,COH
800030f4:	c0 31       	brne	800030fa <usart_write_char+0xc>
800030f6:	30 2c       	mov	r12,2
800030f8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800030fa:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800030fe:	99 7b       	st.w	r12[0x1c],r11
80003100:	5e fd       	retal	0
80003102:	d7 03       	nop

80003104 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003104:	eb cd 40 e0 	pushm	r5-r7,lr
80003108:	18 96       	mov	r6,r12
8000310a:	16 95       	mov	r5,r11
8000310c:	e0 77 86 9f 	mov	r7,99999
80003110:	c0 68       	rjmp	8000311c <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80003112:	58 07       	cp.w	r7,0
80003114:	c0 31       	brne	8000311a <usart_putchar+0x16>
80003116:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
8000311a:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8000311c:	0a 9b       	mov	r11,r5
8000311e:	0c 9c       	mov	r12,r6
80003120:	f0 1f 00 03 	mcall	8000312c <usart_putchar+0x28>
80003124:	cf 71       	brne	80003112 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80003126:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000312a:	00 00       	add	r0,r0
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	30 ee       	mov	lr,14

80003130 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80003130:	78 58       	ld.w	r8,r12[0x14]
80003132:	e2 18 00 e0 	andl	r8,0xe0,COH
80003136:	c0 30       	breq	8000313c <usart_read_char+0xc>
80003138:	30 4c       	mov	r12,4
8000313a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8000313c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8000313e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003142:	c0 31       	brne	80003148 <usart_read_char+0x18>
80003144:	30 3c       	mov	r12,3
80003146:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80003148:	78 68       	ld.w	r8,r12[0x18]
8000314a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8000314e:	97 08       	st.w	r11[0x0],r8
80003150:	5e fd       	retal	0
80003152:	d7 03       	nop

80003154 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
80003154:	eb cd 40 c0 	pushm	r6-r7,lr
80003158:	20 1d       	sub	sp,4
8000315a:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8000315c:	1a 97       	mov	r7,sp
8000315e:	1a 9b       	mov	r11,sp
80003160:	0c 9c       	mov	r12,r6
80003162:	f0 1f 00 07 	mcall	8000317c <usart_getchar+0x28>
80003166:	58 3c       	cp.w	r12,3
80003168:	cf b0       	breq	8000315e <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
8000316a:	58 4c       	cp.w	r12,4
8000316c:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
80003170:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80003174:	2f fd       	sub	sp,-4
80003176:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000317a:	00 00       	add	r0,r0
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	31 30       	mov	r0,19

80003180 <usart_write_line>:
	return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003180:	eb cd 40 c0 	pushm	r6-r7,lr
80003184:	18 96       	mov	r6,r12
80003186:	16 97       	mov	r7,r11
  while (*string != '\0')
80003188:	17 8b       	ld.ub	r11,r11[0x0]
8000318a:	58 0b       	cp.w	r11,0
8000318c:	c0 80       	breq	8000319c <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
8000318e:	2f f7       	sub	r7,-1
80003190:	0c 9c       	mov	r12,r6
80003192:	f0 1f 00 04 	mcall	800031a0 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003196:	0f 8b       	ld.ub	r11,r7[0x0]
80003198:	58 0b       	cp.w	r11,0
8000319a:	cf a1       	brne	8000318e <usart_write_line+0xe>
8000319c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	31 04       	mov	r4,16

800031a4 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800031a4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800031a8:	e6 18 00 01 	andh	r8,0x1,COH
800031ac:	c0 71       	brne	800031ba <usart_reset+0x16>
800031ae:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800031b0:	3f f8       	mov	r8,-1
800031b2:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800031b4:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800031b6:	d5 03       	csrf	0x10
800031b8:	c0 48       	rjmp	800031c0 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800031ba:	3f f8       	mov	r8,-1
800031bc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800031be:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800031c0:	30 08       	mov	r8,0
800031c2:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
800031c4:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
800031c6:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800031c8:	ea 68 61 0c 	mov	r8,680204
800031cc:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800031ce:	5e fc       	retal	r12

800031d0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800031d0:	eb cd 40 e0 	pushm	r5-r7,lr
800031d4:	18 96       	mov	r6,r12
800031d6:	16 97       	mov	r7,r11
800031d8:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800031da:	f0 1f 00 2f 	mcall	80003294 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
800031de:	58 07       	cp.w	r7,0
800031e0:	c5 80       	breq	80003290 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
800031e2:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800031e4:	30 49       	mov	r9,4
800031e6:	f2 08 18 00 	cp.b	r8,r9
800031ea:	e0 88 00 53 	brls	80003290 <usart_init_rs232+0xc0>
800031ee:	30 99       	mov	r9,9
800031f0:	f2 08 18 00 	cp.b	r8,r9
800031f4:	e0 8b 00 4e 	brhi	80003290 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
800031f8:	0f d9       	ld.ub	r9,r7[0x5]
800031fa:	30 78       	mov	r8,7
800031fc:	f0 09 18 00 	cp.b	r9,r8
80003200:	e0 8b 00 48 	brhi	80003290 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003204:	8e 39       	ld.sh	r9,r7[0x6]
80003206:	e0 68 01 01 	mov	r8,257
8000320a:	f0 09 19 00 	cp.h	r9,r8
8000320e:	e0 8b 00 41 	brhi	80003290 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80003212:	ef 39 00 08 	ld.ub	r9,r7[8]
80003216:	30 38       	mov	r8,3
80003218:	f0 09 18 00 	cp.b	r9,r8
8000321c:	e0 8b 00 3a 	brhi	80003290 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003220:	0a 9a       	mov	r10,r5
80003222:	6e 0b       	ld.w	r11,r7[0x0]
80003224:	0c 9c       	mov	r12,r6
80003226:	f0 1f 00 1d 	mcall	80003298 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000322a:	58 1c       	cp.w	r12,1
8000322c:	c3 20       	breq	80003290 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
8000322e:	0f c8       	ld.ub	r8,r7[0x4]
80003230:	30 99       	mov	r9,9
80003232:	f2 08 18 00 	cp.b	r8,r9
80003236:	c0 51       	brne	80003240 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003238:	6c 18       	ld.w	r8,r6[0x4]
8000323a:	b1 b8       	sbr	r8,0x11
8000323c:	8d 18       	st.w	r6[0x4],r8
8000323e:	c0 68       	rjmp	8000324a <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003240:	6c 19       	ld.w	r9,r6[0x4]
80003242:	20 58       	sub	r8,5
80003244:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003248:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000324a:	6c 19       	ld.w	r9,r6[0x4]
8000324c:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003250:	0f d8       	ld.ub	r8,r7[0x5]
80003252:	a9 78       	lsl	r8,0x9
80003254:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003258:	12 48       	or	r8,r9
8000325a:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000325c:	8e 38       	ld.sh	r8,r7[0x6]
8000325e:	30 29       	mov	r9,2
80003260:	f2 08 19 00 	cp.h	r8,r9
80003264:	e0 88 00 09 	brls	80003276 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003268:	6c 18       	ld.w	r8,r6[0x4]
8000326a:	ad b8       	sbr	r8,0xd
8000326c:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000326e:	8e b8       	ld.uh	r8,r7[0x6]
80003270:	20 28       	sub	r8,2
80003272:	8d a8       	st.w	r6[0x28],r8
80003274:	c0 68       	rjmp	80003280 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003276:	6c 19       	ld.w	r9,r6[0x4]
80003278:	5c 78       	castu.h	r8
8000327a:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
8000327e:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003280:	6c 18       	ld.w	r8,r6[0x4]
80003282:	e0 18 ff f0 	andl	r8,0xfff0
80003286:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003288:	35 08       	mov	r8,80
8000328a:	8d 08       	st.w	r6[0x0],r8
8000328c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003290:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	31 a4       	mov	r4,26
80003298:	80 00       	ld.sh	r0,r0[0x0]
8000329a:	30 94       	mov	r4,9

8000329c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000329c:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800032a0:	fe c0 a4 a0 	sub	r0,pc,-23392

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800032a4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800032a8:	d5 53       	csrf	0x15
  cp      r0, r1
800032aa:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800032ac:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800032b0:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800032b2:	c0 72       	brcc	800032c0 <idata_load_loop_end>
  cp      r0, r1
800032b4:	fe c2 81 dc 	sub	r2,pc,-32292

800032b8 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800032b8:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800032ba:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800032bc:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800032be:	cf d3       	brcs	800032b8 <idata_load_loop>

800032c0 <idata_load_loop_end>:
  mov     r2, 0
800032c0:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800032c4:	e0 61 08 68 	mov	r1,2152
  cp      r0, r1
  brlo    udata_clear_loop
800032c8:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800032ca:	c0 62       	brcc	800032d6 <udata_clear_loop_end>
800032cc:	30 02       	mov	r2,0
800032ce:	30 03       	mov	r3,0

800032d0 <udata_clear_loop>:
800032d0:	a1 22       	st.d	r0++,r2
800032d2:	02 30       	cp.w	r0,r1
800032d4:	cf e3       	brcs	800032d0 <udata_clear_loop>

800032d6 <udata_clear_loop_end>:
800032d6:	fe cf ff 1a 	sub	pc,pc,-230
800032da:	d7 03       	nop

800032dc <osc_priv_enable_osc0>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032dc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032e0:	d3 03       	ssrf	0x10
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
800032e2:	fe 78 08 00 	mov	r8,-63488
800032e6:	32 4a       	mov	r10,36
800032e8:	ea 1a aa 00 	orh	r10,0xaa00
800032ec:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
800032ee:	e0 7a 0c 07 	mov	r10,68615
800032f2:	91 9a       	st.w	r8[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800032f4:	12 98       	mov	r8,r9
800032f6:	e6 18 00 01 	andh	r8,0x1,COH
800032fa:	c0 21       	brne	800032fe <osc_priv_enable_osc0+0x22>
      cpu_irq_enable();
800032fc:	d5 03       	csrf	0x10
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
800032fe:	5e fc       	retal	r12

80003300 <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003300:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003304:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80003306:	fe 78 04 00 	mov	r8,-64512
8000330a:	fc 1a aa 00 	movh	r10,0xaa00
8000330e:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
80003312:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003314:	12 98       	mov	r8,r9
80003316:	e6 18 00 01 	andh	r8,0x1,COH
8000331a:	c0 21       	brne	8000331e <sysclk_set_source+0x1e>
      cpu_irq_enable();
8000331c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
8000331e:	5e fc       	retal	r12

80003320 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80003320:	d4 01       	pushm	lr
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80003322:	f0 1f 00 0a 	mcall	80003348 <sysclk_init+0x28>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80003326:	fe 78 08 00 	mov	r8,-63488
8000332a:	70 59       	ld.w	r9,r8[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
8000332c:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003330:	cf d0       	breq	8000332a <sysclk_init+0xa>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80003332:	e0 6c 24 00 	mov	r12,9216
80003336:	ea 1c 00 f4 	orh	r12,0xf4
8000333a:	f0 1f 00 05 	mcall	8000334c <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
8000333e:	30 1c       	mov	r12,1
80003340:	f0 1f 00 04 	mcall	80003350 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003344:	d8 02       	popm	pc
80003346:	00 00       	add	r0,r0
80003348:	80 00       	ld.sh	r0,r0[0x0]
8000334a:	32 dc       	mov	r12,45
8000334c:	80 00       	ld.sh	r0,r0[0x0]
8000334e:	2d c0       	sub	r0,-36
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	33 00       	mov	r0,48

80003354 <general_initialize>:
	while(true)
		start_terminal();
}

void general_initialize()
{
80003354:	d4 01       	pushm	lr
	sysclk_init();
80003356:	f0 1f 00 15 	mcall	800033a8 <general_initialize+0x54>
	delay_init(CPU_HZ);
	
	gpio_configure_pin( ITASAT_LED0, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000335a:	30 3b       	mov	r11,3
8000335c:	30 8c       	mov	r12,8
8000335e:	f0 1f 00 14 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED1, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003362:	30 3b       	mov	r11,3
80003364:	30 9c       	mov	r12,9
80003366:	f0 1f 00 12 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED2, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000336a:	30 3b       	mov	r11,3
8000336c:	30 ac       	mov	r12,10
8000336e:	f0 1f 00 10 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED3, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003372:	30 3b       	mov	r11,3
80003374:	30 bc       	mov	r12,11
80003376:	f0 1f 00 0e 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED4, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000337a:	30 3b       	mov	r11,3
8000337c:	30 cc       	mov	r12,12
8000337e:	f0 1f 00 0c 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED5, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003382:	30 3b       	mov	r11,3
80003384:	30 dc       	mov	r12,13
80003386:	f0 1f 00 0a 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED6, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000338a:	30 3b       	mov	r11,3
8000338c:	30 ec       	mov	r12,14
8000338e:	f0 1f 00 08 	mcall	800033ac <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED7, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003392:	30 3b       	mov	r11,3
80003394:	30 fc       	mov	r12,15
80003396:	f0 1f 00 06 	mcall	800033ac <general_initialize+0x58>
	
	initTerminalInterface();
8000339a:	f0 1f 00 06 	mcall	800033b0 <general_initialize+0x5c>
	initTestsExecContrInterface();
8000339e:	f0 1f 00 06 	mcall	800033b4 <general_initialize+0x60>
	/* 
	 * Importante: Caso o sistema esteja travando, verificar se 
	 * nao estah ocorrendo nenhum erro na inicializacao do I2C, pois 
	 * isso pode travar. 
	 */
	initI2CTestsInterface();
800033a2:	f0 1f 00 06 	mcall	800033b8 <general_initialize+0x64>
}
800033a6:	d8 02       	popm	pc
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	33 20       	mov	r0,50
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	2e 78       	sub	r8,-25
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	2b 24       	sub	r4,-78
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	2c 64       	sub	r4,-58
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	29 18       	sub	r8,-111

800033bc <main>:
#include <asf.h>
#include <itasat_pins_functions_stk600.h>
#include <tcc_test_controller.h>

int main (void)
{	
800033bc:	d4 01       	pushm	lr
	general_initialize();
800033be:	f0 1f 00 06 	mcall	800033d4 <main+0x18>
	
	print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
800033c2:	48 6b       	lddpc	r11,800033d8 <main+0x1c>
800033c4:	fc 7c 14 00 	mov	r12,-191488
800033c8:	f0 1f 00 05 	mcall	800033dc <main+0x20>
	
	while(true)
		start_terminal();
800033cc:	f0 1f 00 05 	mcall	800033e0 <main+0x24>
800033d0:	cf eb       	rjmp	800033cc <main+0x10>
800033d2:	00 00       	add	r0,r0
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	33 54       	mov	r4,53
800033d8:	80 00       	ld.sh	r0,r0[0x0]
800033da:	a8 00       	st.h	r4[0x0],r0
800033dc:	80 00       	ld.sh	r0,r0[0x0]
800033de:	31 80       	mov	r0,24
800033e0:	80 00       	ld.sh	r0,r0[0x0]
800033e2:	2a b0       	sub	r0,-85

800033e4 <memcpy>:
800033e4:	58 8a       	cp.w	r10,8
800033e6:	c2 f5       	brlt	80003444 <memcpy+0x60>
800033e8:	f9 eb 10 09 	or	r9,r12,r11
800033ec:	e2 19 00 03 	andl	r9,0x3,COH
800033f0:	e0 81 00 97 	brne	8000351e <memcpy+0x13a>
800033f4:	e0 4a 00 20 	cp.w	r10,32
800033f8:	c3 b4       	brge	8000346e <memcpy+0x8a>
800033fa:	f4 08 14 02 	asr	r8,r10,0x2
800033fe:	f0 09 11 08 	rsub	r9,r8,8
80003402:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003406:	76 69       	ld.w	r9,r11[0x18]
80003408:	99 69       	st.w	r12[0x18],r9
8000340a:	76 59       	ld.w	r9,r11[0x14]
8000340c:	99 59       	st.w	r12[0x14],r9
8000340e:	76 49       	ld.w	r9,r11[0x10]
80003410:	99 49       	st.w	r12[0x10],r9
80003412:	76 39       	ld.w	r9,r11[0xc]
80003414:	99 39       	st.w	r12[0xc],r9
80003416:	76 29       	ld.w	r9,r11[0x8]
80003418:	99 29       	st.w	r12[0x8],r9
8000341a:	76 19       	ld.w	r9,r11[0x4]
8000341c:	99 19       	st.w	r12[0x4],r9
8000341e:	76 09       	ld.w	r9,r11[0x0]
80003420:	99 09       	st.w	r12[0x0],r9
80003422:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003426:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000342a:	e0 1a 00 03 	andl	r10,0x3
8000342e:	f4 0a 11 04 	rsub	r10,r10,4
80003432:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003436:	17 a9       	ld.ub	r9,r11[0x2]
80003438:	b0 a9       	st.b	r8[0x2],r9
8000343a:	17 99       	ld.ub	r9,r11[0x1]
8000343c:	b0 99       	st.b	r8[0x1],r9
8000343e:	17 89       	ld.ub	r9,r11[0x0]
80003440:	b0 89       	st.b	r8[0x0],r9
80003442:	5e fc       	retal	r12
80003444:	f4 0a 11 09 	rsub	r10,r10,9
80003448:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000344c:	17 f9       	ld.ub	r9,r11[0x7]
8000344e:	b8 f9       	st.b	r12[0x7],r9
80003450:	17 e9       	ld.ub	r9,r11[0x6]
80003452:	b8 e9       	st.b	r12[0x6],r9
80003454:	17 d9       	ld.ub	r9,r11[0x5]
80003456:	b8 d9       	st.b	r12[0x5],r9
80003458:	17 c9       	ld.ub	r9,r11[0x4]
8000345a:	b8 c9       	st.b	r12[0x4],r9
8000345c:	17 b9       	ld.ub	r9,r11[0x3]
8000345e:	b8 b9       	st.b	r12[0x3],r9
80003460:	17 a9       	ld.ub	r9,r11[0x2]
80003462:	b8 a9       	st.b	r12[0x2],r9
80003464:	17 99       	ld.ub	r9,r11[0x1]
80003466:	b8 99       	st.b	r12[0x1],r9
80003468:	17 89       	ld.ub	r9,r11[0x0]
8000346a:	b8 89       	st.b	r12[0x0],r9
8000346c:	5e fc       	retal	r12
8000346e:	eb cd 40 c0 	pushm	r6-r7,lr
80003472:	18 99       	mov	r9,r12
80003474:	22 0a       	sub	r10,32
80003476:	b7 07       	ld.d	r6,r11++
80003478:	b3 26       	st.d	r9++,r6
8000347a:	b7 07       	ld.d	r6,r11++
8000347c:	b3 26       	st.d	r9++,r6
8000347e:	b7 07       	ld.d	r6,r11++
80003480:	b3 26       	st.d	r9++,r6
80003482:	b7 07       	ld.d	r6,r11++
80003484:	b3 26       	st.d	r9++,r6
80003486:	22 0a       	sub	r10,32
80003488:	cf 74       	brge	80003476 <memcpy+0x92>
8000348a:	2f 0a       	sub	r10,-16
8000348c:	c0 65       	brlt	80003498 <memcpy+0xb4>
8000348e:	b7 07       	ld.d	r6,r11++
80003490:	b3 26       	st.d	r9++,r6
80003492:	b7 07       	ld.d	r6,r11++
80003494:	b3 26       	st.d	r9++,r6
80003496:	21 0a       	sub	r10,16
80003498:	5c 3a       	neg	r10
8000349a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000349e:	d7 03       	nop
800034a0:	d7 03       	nop
800034a2:	f7 36 00 0e 	ld.ub	r6,r11[14]
800034a6:	f3 66 00 0e 	st.b	r9[14],r6
800034aa:	f7 36 00 0d 	ld.ub	r6,r11[13]
800034ae:	f3 66 00 0d 	st.b	r9[13],r6
800034b2:	f7 36 00 0c 	ld.ub	r6,r11[12]
800034b6:	f3 66 00 0c 	st.b	r9[12],r6
800034ba:	f7 36 00 0b 	ld.ub	r6,r11[11]
800034be:	f3 66 00 0b 	st.b	r9[11],r6
800034c2:	f7 36 00 0a 	ld.ub	r6,r11[10]
800034c6:	f3 66 00 0a 	st.b	r9[10],r6
800034ca:	f7 36 00 09 	ld.ub	r6,r11[9]
800034ce:	f3 66 00 09 	st.b	r9[9],r6
800034d2:	f7 36 00 08 	ld.ub	r6,r11[8]
800034d6:	f3 66 00 08 	st.b	r9[8],r6
800034da:	f7 36 00 07 	ld.ub	r6,r11[7]
800034de:	f3 66 00 07 	st.b	r9[7],r6
800034e2:	f7 36 00 06 	ld.ub	r6,r11[6]
800034e6:	f3 66 00 06 	st.b	r9[6],r6
800034ea:	f7 36 00 05 	ld.ub	r6,r11[5]
800034ee:	f3 66 00 05 	st.b	r9[5],r6
800034f2:	f7 36 00 04 	ld.ub	r6,r11[4]
800034f6:	f3 66 00 04 	st.b	r9[4],r6
800034fa:	f7 36 00 03 	ld.ub	r6,r11[3]
800034fe:	f3 66 00 03 	st.b	r9[3],r6
80003502:	f7 36 00 02 	ld.ub	r6,r11[2]
80003506:	f3 66 00 02 	st.b	r9[2],r6
8000350a:	f7 36 00 01 	ld.ub	r6,r11[1]
8000350e:	f3 66 00 01 	st.b	r9[1],r6
80003512:	f7 36 00 00 	ld.ub	r6,r11[0]
80003516:	f3 66 00 00 	st.b	r9[0],r6
8000351a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000351e:	20 1a       	sub	r10,1
80003520:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003524:	f8 0a 0b 09 	st.b	r12[r10],r9
80003528:	cf b1       	brne	8000351e <memcpy+0x13a>
8000352a:	5e fc       	retal	r12

8000352c <sprintf>:
8000352c:	d4 01       	pushm	lr
8000352e:	21 7d       	sub	sp,92
80003530:	e0 68 ff ff 	mov	r8,65535
80003534:	ea 18 7f ff 	orh	r8,0x7fff
80003538:	50 58       	stdsp	sp[0x14],r8
8000353a:	50 28       	stdsp	sp[0x8],r8
8000353c:	e0 68 02 08 	mov	r8,520
80003540:	ba 68       	st.h	sp[0xc],r8
80003542:	3f f8       	mov	r8,-1
80003544:	ba 78       	st.h	sp[0xe],r8
80003546:	e0 68 00 f8 	mov	r8,248
8000354a:	50 4c       	stdsp	sp[0x10],r12
8000354c:	16 9a       	mov	r10,r11
8000354e:	50 0c       	stdsp	sp[0x0],r12
80003550:	fa c9 ff a0 	sub	r9,sp,-96
80003554:	70 0c       	ld.w	r12,r8[0x0]
80003556:	1a 9b       	mov	r11,sp
80003558:	cf 2d       	rcall	8000393c <_vfprintf_r>
8000355a:	30 09       	mov	r9,0
8000355c:	40 08       	lddsp	r8,sp[0x0]
8000355e:	b0 89       	st.b	r8[0x0],r9
80003560:	2e 9d       	sub	sp,-92
80003562:	d8 02       	popm	pc

80003564 <strcmp>:
80003564:	f9 eb 10 0a 	or	r10,r12,r11
80003568:	e2 1a 00 03 	andl	r10,0x3,COH
8000356c:	c3 41       	brne	800035d4 <strcmp+0x70>
8000356e:	78 0a       	ld.w	r10,r12[0x0]
80003570:	76 09       	ld.w	r9,r11[0x0]
80003572:	5c ea       	tnbz	r10
80003574:	c1 70       	breq	800035a2 <strcmp+0x3e>
80003576:	12 3a       	cp.w	r10,r9
80003578:	c1 51       	brne	800035a2 <strcmp+0x3e>
8000357a:	78 1a       	ld.w	r10,r12[0x4]
8000357c:	76 19       	ld.w	r9,r11[0x4]
8000357e:	5c ea       	tnbz	r10
80003580:	c1 10       	breq	800035a2 <strcmp+0x3e>
80003582:	12 3a       	cp.w	r10,r9
80003584:	c0 f1       	brne	800035a2 <strcmp+0x3e>
80003586:	78 2a       	ld.w	r10,r12[0x8]
80003588:	76 29       	ld.w	r9,r11[0x8]
8000358a:	5c ea       	tnbz	r10
8000358c:	c0 b0       	breq	800035a2 <strcmp+0x3e>
8000358e:	12 3a       	cp.w	r10,r9
80003590:	c0 91       	brne	800035a2 <strcmp+0x3e>
80003592:	78 3a       	ld.w	r10,r12[0xc]
80003594:	76 39       	ld.w	r9,r11[0xc]
80003596:	5c ea       	tnbz	r10
80003598:	c0 50       	breq	800035a2 <strcmp+0x3e>
8000359a:	2f 0c       	sub	r12,-16
8000359c:	2f 0b       	sub	r11,-16
8000359e:	12 3a       	cp.w	r10,r9
800035a0:	ce 70       	breq	8000356e <strcmp+0xa>
800035a2:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
800035a6:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
800035aa:	5e 0c       	reteq	r12
800035ac:	16 1c       	sub	r12,r11
800035ae:	5e 1c       	retne	r12
800035b0:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
800035b4:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
800035b8:	5e 0c       	reteq	r12
800035ba:	16 1c       	sub	r12,r11
800035bc:	5e 1c       	retne	r12
800035be:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
800035c2:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
800035c6:	5e 0c       	reteq	r12
800035c8:	16 1c       	sub	r12,r11
800035ca:	5e 1c       	retne	r12
800035cc:	5c 5a       	castu.b	r10
800035ce:	5c 59       	castu.b	r9
800035d0:	12 1a       	sub	r10,r9
800035d2:	5e fa       	retal	r10
800035d4:	17 8a       	ld.ub	r10,r11[0x0]
800035d6:	19 89       	ld.ub	r9,r12[0x0]
800035d8:	58 0a       	cp.w	r10,0
800035da:	5e 09       	reteq	r9
800035dc:	14 19       	sub	r9,r10
800035de:	5e 19       	retne	r9
800035e0:	17 9a       	ld.ub	r10,r11[0x1]
800035e2:	19 99       	ld.ub	r9,r12[0x1]
800035e4:	58 0a       	cp.w	r10,0
800035e6:	5e 09       	reteq	r9
800035e8:	14 19       	sub	r9,r10
800035ea:	5e 19       	retne	r9
800035ec:	17 aa       	ld.ub	r10,r11[0x2]
800035ee:	19 a9       	ld.ub	r9,r12[0x2]
800035f0:	58 0a       	cp.w	r10,0
800035f2:	5e 09       	reteq	r9
800035f4:	14 19       	sub	r9,r10
800035f6:	5e 19       	retne	r9
800035f8:	17 ba       	ld.ub	r10,r11[0x3]
800035fa:	19 b9       	ld.ub	r9,r12[0x3]
800035fc:	58 0a       	cp.w	r10,0
800035fe:	5e 09       	reteq	r9
80003600:	14 19       	sub	r9,r10
80003602:	5e 19       	retne	r9
80003604:	2f cb       	sub	r11,-4
80003606:	2f cc       	sub	r12,-4
80003608:	ce 6b       	rjmp	800035d4 <strcmp+0x70>
8000360a:	d7 03       	nop

8000360c <get_arg>:
8000360c:	d4 31       	pushm	r0-r7,lr
8000360e:	20 8d       	sub	sp,32
80003610:	fa c4 ff bc 	sub	r4,sp,-68
80003614:	50 4b       	stdsp	sp[0x10],r11
80003616:	68 2e       	ld.w	lr,r4[0x8]
80003618:	50 58       	stdsp	sp[0x14],r8
8000361a:	12 96       	mov	r6,r9
8000361c:	7c 0b       	ld.w	r11,lr[0x0]
8000361e:	70 05       	ld.w	r5,r8[0x0]
80003620:	50 6e       	stdsp	sp[0x18],lr
80003622:	58 0b       	cp.w	r11,0
80003624:	f4 0b 17 00 	moveq	r11,r10
80003628:	68 03       	ld.w	r3,r4[0x0]
8000362a:	68 11       	ld.w	r1,r4[0x4]
8000362c:	40 49       	lddsp	r9,sp[0x10]
8000362e:	30 08       	mov	r8,0
80003630:	c2 89       	rjmp	80003880 <get_arg+0x274>
80003632:	2f fb       	sub	r11,-1
80003634:	32 5c       	mov	r12,37
80003636:	17 8a       	ld.ub	r10,r11[0x0]
80003638:	f8 0a 18 00 	cp.b	r10,r12
8000363c:	5f 1e       	srne	lr
8000363e:	f0 0a 18 00 	cp.b	r10,r8
80003642:	5f 1c       	srne	r12
80003644:	fd ec 00 0c 	and	r12,lr,r12
80003648:	f0 0c 18 00 	cp.b	r12,r8
8000364c:	cf 31       	brne	80003632 <get_arg+0x26>
8000364e:	58 0a       	cp.w	r10,0
80003650:	e0 80 01 25 	breq	8000389a <get_arg+0x28e>
80003654:	30 0c       	mov	r12,0
80003656:	3f fa       	mov	r10,-1
80003658:	18 90       	mov	r0,r12
8000365a:	50 3a       	stdsp	sp[0xc],r10
8000365c:	18 94       	mov	r4,r12
8000365e:	18 92       	mov	r2,r12
80003660:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003664:	16 97       	mov	r7,r11
80003666:	50 7c       	stdsp	sp[0x1c],r12
80003668:	fe cc 88 40 	sub	r12,pc,-30656
8000366c:	0f 3a       	ld.ub	r10,r7++
8000366e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003672:	40 7c       	lddsp	r12,sp[0x1c]
80003674:	1c 0c       	add	r12,lr
80003676:	fe ce 89 16 	sub	lr,pc,-30442
8000367a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000367e:	20 1e       	sub	lr,1
80003680:	50 0e       	stdsp	sp[0x0],lr
80003682:	fe ce 89 8e 	sub	lr,pc,-30322
80003686:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000368a:	50 7c       	stdsp	sp[0x1c],r12
8000368c:	40 0c       	lddsp	r12,sp[0x0]
8000368e:	58 7c       	cp.w	r12,7
80003690:	e0 8b 00 f1 	brhi	80003872 <get_arg+0x266>
80003694:	fe ce 8b 40 	sub	lr,pc,-29888
80003698:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000369c:	36 8b       	mov	r11,104
8000369e:	f6 0a 18 00 	cp.b	r10,r11
800036a2:	e0 80 00 e8 	breq	80003872 <get_arg+0x266>
800036a6:	37 1b       	mov	r11,113
800036a8:	f6 0a 18 00 	cp.b	r10,r11
800036ac:	c0 70       	breq	800036ba <get_arg+0xae>
800036ae:	34 cb       	mov	r11,76
800036b0:	f6 0a 18 00 	cp.b	r10,r11
800036b4:	c0 51       	brne	800036be <get_arg+0xb2>
800036b6:	a3 b4       	sbr	r4,0x3
800036b8:	cd d8       	rjmp	80003872 <get_arg+0x266>
800036ba:	a5 b4       	sbr	r4,0x5
800036bc:	cd b8       	rjmp	80003872 <get_arg+0x266>
800036be:	08 9a       	mov	r10,r4
800036c0:	0e 9b       	mov	r11,r7
800036c2:	a5 aa       	sbr	r10,0x4
800036c4:	17 3c       	ld.ub	r12,r11++
800036c6:	a5 b4       	sbr	r4,0x5
800036c8:	36 ce       	mov	lr,108
800036ca:	fc 0c 18 00 	cp.b	r12,lr
800036ce:	e0 80 00 d3 	breq	80003874 <get_arg+0x268>
800036d2:	14 94       	mov	r4,r10
800036d4:	cc f8       	rjmp	80003872 <get_arg+0x266>
800036d6:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800036da:	36 7c       	mov	r12,103
800036dc:	f8 0a 18 00 	cp.b	r10,r12
800036e0:	e0 8b 00 27 	brhi	8000372e <get_arg+0x122>
800036e4:	36 5b       	mov	r11,101
800036e6:	f6 0a 18 00 	cp.b	r10,r11
800036ea:	c4 82       	brcc	8000377a <get_arg+0x16e>
800036ec:	34 fb       	mov	r11,79
800036ee:	f6 0a 18 00 	cp.b	r10,r11
800036f2:	c4 80       	breq	80003782 <get_arg+0x176>
800036f4:	e0 8b 00 0c 	brhi	8000370c <get_arg+0x100>
800036f8:	34 5b       	mov	r11,69
800036fa:	f6 0a 18 00 	cp.b	r10,r11
800036fe:	c3 e0       	breq	8000377a <get_arg+0x16e>
80003700:	34 7b       	mov	r11,71
80003702:	f6 0a 18 00 	cp.b	r10,r11
80003706:	c3 a0       	breq	8000377a <get_arg+0x16e>
80003708:	34 4b       	mov	r11,68
8000370a:	c0 88       	rjmp	8000371a <get_arg+0x10e>
8000370c:	35 8b       	mov	r11,88
8000370e:	f6 0a 18 00 	cp.b	r10,r11
80003712:	c2 c0       	breq	8000376a <get_arg+0x15e>
80003714:	e0 8b 00 07 	brhi	80003722 <get_arg+0x116>
80003718:	35 5b       	mov	r11,85
8000371a:	f6 0a 18 00 	cp.b	r10,r11
8000371e:	c3 51       	brne	80003788 <get_arg+0x17c>
80003720:	c3 18       	rjmp	80003782 <get_arg+0x176>
80003722:	36 3b       	mov	r11,99
80003724:	f6 0a 18 00 	cp.b	r10,r11
80003728:	c2 f0       	breq	80003786 <get_arg+0x17a>
8000372a:	36 4b       	mov	r11,100
8000372c:	c0 e8       	rjmp	80003748 <get_arg+0x13c>
8000372e:	37 0b       	mov	r11,112
80003730:	f6 0a 18 00 	cp.b	r10,r11
80003734:	c2 50       	breq	8000377e <get_arg+0x172>
80003736:	e0 8b 00 0d 	brhi	80003750 <get_arg+0x144>
8000373a:	36 eb       	mov	r11,110
8000373c:	f6 0a 18 00 	cp.b	r10,r11
80003740:	c1 f0       	breq	8000377e <get_arg+0x172>
80003742:	e0 8b 00 14 	brhi	8000376a <get_arg+0x15e>
80003746:	36 9b       	mov	r11,105
80003748:	f6 0a 18 00 	cp.b	r10,r11
8000374c:	c1 e1       	brne	80003788 <get_arg+0x17c>
8000374e:	c0 e8       	rjmp	8000376a <get_arg+0x15e>
80003750:	37 5b       	mov	r11,117
80003752:	f6 0a 18 00 	cp.b	r10,r11
80003756:	c0 a0       	breq	8000376a <get_arg+0x15e>
80003758:	37 8b       	mov	r11,120
8000375a:	f6 0a 18 00 	cp.b	r10,r11
8000375e:	c0 60       	breq	8000376a <get_arg+0x15e>
80003760:	37 3b       	mov	r11,115
80003762:	f6 0a 18 00 	cp.b	r10,r11
80003766:	c1 11       	brne	80003788 <get_arg+0x17c>
80003768:	c0 b8       	rjmp	8000377e <get_arg+0x172>
8000376a:	ed b4 00 04 	bld	r4,0x4
8000376e:	c0 a0       	breq	80003782 <get_arg+0x176>
80003770:	ed b4 00 05 	bld	r4,0x5
80003774:	c0 91       	brne	80003786 <get_arg+0x17a>
80003776:	30 20       	mov	r0,2
80003778:	c0 88       	rjmp	80003788 <get_arg+0x17c>
8000377a:	30 40       	mov	r0,4
8000377c:	c0 68       	rjmp	80003788 <get_arg+0x17c>
8000377e:	30 30       	mov	r0,3
80003780:	c0 48       	rjmp	80003788 <get_arg+0x17c>
80003782:	30 10       	mov	r0,1
80003784:	c0 28       	rjmp	80003788 <get_arg+0x17c>
80003786:	30 00       	mov	r0,0
80003788:	40 3b       	lddsp	r11,sp[0xc]
8000378a:	5b fb       	cp.w	r11,-1
8000378c:	c0 40       	breq	80003794 <get_arg+0x188>
8000378e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003792:	c7 08       	rjmp	80003872 <get_arg+0x266>
80003794:	58 60       	cp.w	r0,6
80003796:	e0 8b 00 6e 	brhi	80003872 <get_arg+0x266>
8000379a:	6c 0a       	ld.w	r10,r6[0x0]
8000379c:	ea cc ff ff 	sub	r12,r5,-1
800037a0:	fe ce 8c 2c 	sub	lr,pc,-29652
800037a4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800037a8:	f4 cb ff f8 	sub	r11,r10,-8
800037ac:	8d 0b       	st.w	r6[0x0],r11
800037ae:	f4 ea 00 00 	ld.d	r10,r10[0]
800037b2:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800037b6:	c0 f8       	rjmp	800037d4 <get_arg+0x1c8>
800037b8:	f4 cb ff fc 	sub	r11,r10,-4
800037bc:	8d 0b       	st.w	r6[0x0],r11
800037be:	74 0a       	ld.w	r10,r10[0x0]
800037c0:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800037c4:	c0 88       	rjmp	800037d4 <get_arg+0x1c8>
800037c6:	f4 cb ff f8 	sub	r11,r10,-8
800037ca:	8d 0b       	st.w	r6[0x0],r11
800037cc:	f4 ea 00 00 	ld.d	r10,r10[0]
800037d0:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800037d4:	0e 9b       	mov	r11,r7
800037d6:	18 95       	mov	r5,r12
800037d8:	c4 e8       	rjmp	80003874 <get_arg+0x268>
800037da:	62 0a       	ld.w	r10,r1[0x0]
800037dc:	5b fa       	cp.w	r10,-1
800037de:	c0 b1       	brne	800037f4 <get_arg+0x1e8>
800037e0:	50 19       	stdsp	sp[0x4],r9
800037e2:	50 28       	stdsp	sp[0x8],r8
800037e4:	e0 6a 00 80 	mov	r10,128
800037e8:	30 0b       	mov	r11,0
800037ea:	02 9c       	mov	r12,r1
800037ec:	e0 a0 1d 78 	rcall	800072dc <memset>
800037f0:	40 28       	lddsp	r8,sp[0x8]
800037f2:	40 19       	lddsp	r9,sp[0x4]
800037f4:	e4 cc 00 01 	sub	r12,r2,1
800037f8:	0e 9b       	mov	r11,r7
800037fa:	50 3c       	stdsp	sp[0xc],r12
800037fc:	f2 0c 0c 49 	max	r9,r9,r12
80003800:	c3 a8       	rjmp	80003874 <get_arg+0x268>
80003802:	62 0a       	ld.w	r10,r1[0x0]
80003804:	5b fa       	cp.w	r10,-1
80003806:	c0 b1       	brne	8000381c <get_arg+0x210>
80003808:	50 19       	stdsp	sp[0x4],r9
8000380a:	50 28       	stdsp	sp[0x8],r8
8000380c:	e0 6a 00 80 	mov	r10,128
80003810:	30 0b       	mov	r11,0
80003812:	02 9c       	mov	r12,r1
80003814:	e0 a0 1d 64 	rcall	800072dc <memset>
80003818:	40 28       	lddsp	r8,sp[0x8]
8000381a:	40 19       	lddsp	r9,sp[0x4]
8000381c:	20 12       	sub	r2,1
8000381e:	30 0a       	mov	r10,0
80003820:	0e 9b       	mov	r11,r7
80003822:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003826:	f2 02 0c 49 	max	r9,r9,r2
8000382a:	c2 58       	rjmp	80003874 <get_arg+0x268>
8000382c:	16 97       	mov	r7,r11
8000382e:	6c 0a       	ld.w	r10,r6[0x0]
80003830:	f4 cb ff fc 	sub	r11,r10,-4
80003834:	8d 0b       	st.w	r6[0x0],r11
80003836:	74 0a       	ld.w	r10,r10[0x0]
80003838:	0e 9b       	mov	r11,r7
8000383a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000383e:	2f f5       	sub	r5,-1
80003840:	c1 a8       	rjmp	80003874 <get_arg+0x268>
80003842:	f4 c2 00 30 	sub	r2,r10,48
80003846:	c0 68       	rjmp	80003852 <get_arg+0x246>
80003848:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000384c:	2f f7       	sub	r7,-1
8000384e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003852:	0f 8a       	ld.ub	r10,r7[0x0]
80003854:	58 0a       	cp.w	r10,0
80003856:	c0 e0       	breq	80003872 <get_arg+0x266>
80003858:	23 0a       	sub	r10,48
8000385a:	58 9a       	cp.w	r10,9
8000385c:	fe 98 ff f6 	brls	80003848 <get_arg+0x23c>
80003860:	c0 98       	rjmp	80003872 <get_arg+0x266>
80003862:	2f f7       	sub	r7,-1
80003864:	0f 8a       	ld.ub	r10,r7[0x0]
80003866:	58 0a       	cp.w	r10,0
80003868:	c0 50       	breq	80003872 <get_arg+0x266>
8000386a:	23 0a       	sub	r10,48
8000386c:	58 9a       	cp.w	r10,9
8000386e:	fe 98 ff fa 	brls	80003862 <get_arg+0x256>
80003872:	0e 9b       	mov	r11,r7
80003874:	40 7c       	lddsp	r12,sp[0x1c]
80003876:	30 ba       	mov	r10,11
80003878:	f4 0c 18 00 	cp.b	r12,r10
8000387c:	fe 91 fe f2 	brne	80003660 <get_arg+0x54>
80003880:	40 42       	lddsp	r2,sp[0x10]
80003882:	17 8c       	ld.ub	r12,r11[0x0]
80003884:	0a 32       	cp.w	r2,r5
80003886:	5f 4a       	srge	r10
80003888:	f0 0c 18 00 	cp.b	r12,r8
8000388c:	5f 1c       	srne	r12
8000388e:	f9 ea 00 0a 	and	r10,r12,r10
80003892:	f0 0a 18 00 	cp.b	r10,r8
80003896:	fe 91 fe cf 	brne	80003634 <get_arg+0x28>
8000389a:	30 08       	mov	r8,0
8000389c:	40 4e       	lddsp	lr,sp[0x10]
8000389e:	17 8a       	ld.ub	r10,r11[0x0]
800038a0:	e2 05 00 21 	add	r1,r1,r5<<0x2
800038a4:	f0 0a 18 00 	cp.b	r10,r8
800038a8:	fc 09 17 10 	movne	r9,lr
800038ac:	e6 05 00 38 	add	r8,r3,r5<<0x3
800038b0:	06 9e       	mov	lr,r3
800038b2:	c2 a8       	rjmp	80003906 <get_arg+0x2fa>
800038b4:	62 0a       	ld.w	r10,r1[0x0]
800038b6:	58 3a       	cp.w	r10,3
800038b8:	c1 e0       	breq	800038f4 <get_arg+0x2e8>
800038ba:	e0 89 00 07 	brgt	800038c8 <get_arg+0x2bc>
800038be:	58 1a       	cp.w	r10,1
800038c0:	c1 a0       	breq	800038f4 <get_arg+0x2e8>
800038c2:	58 2a       	cp.w	r10,2
800038c4:	c1 81       	brne	800038f4 <get_arg+0x2e8>
800038c6:	c0 58       	rjmp	800038d0 <get_arg+0x2c4>
800038c8:	58 5a       	cp.w	r10,5
800038ca:	c0 c0       	breq	800038e2 <get_arg+0x2d6>
800038cc:	c0 b5       	brlt	800038e2 <get_arg+0x2d6>
800038ce:	c1 38       	rjmp	800038f4 <get_arg+0x2e8>
800038d0:	6c 0a       	ld.w	r10,r6[0x0]
800038d2:	f4 cc ff f8 	sub	r12,r10,-8
800038d6:	8d 0c       	st.w	r6[0x0],r12
800038d8:	f4 e2 00 00 	ld.d	r2,r10[0]
800038dc:	f0 e3 00 00 	st.d	r8[0],r2
800038e0:	c1 08       	rjmp	80003900 <get_arg+0x2f4>
800038e2:	6c 0a       	ld.w	r10,r6[0x0]
800038e4:	f4 cc ff f8 	sub	r12,r10,-8
800038e8:	8d 0c       	st.w	r6[0x0],r12
800038ea:	f4 e2 00 00 	ld.d	r2,r10[0]
800038ee:	f0 e3 00 00 	st.d	r8[0],r2
800038f2:	c0 78       	rjmp	80003900 <get_arg+0x2f4>
800038f4:	6c 0a       	ld.w	r10,r6[0x0]
800038f6:	f4 cc ff fc 	sub	r12,r10,-4
800038fa:	8d 0c       	st.w	r6[0x0],r12
800038fc:	74 0a       	ld.w	r10,r10[0x0]
800038fe:	91 0a       	st.w	r8[0x0],r10
80003900:	2f f5       	sub	r5,-1
80003902:	2f 88       	sub	r8,-8
80003904:	2f c1       	sub	r1,-4
80003906:	12 35       	cp.w	r5,r9
80003908:	fe 9a ff d6 	brle	800038b4 <get_arg+0x2a8>
8000390c:	1c 93       	mov	r3,lr
8000390e:	40 52       	lddsp	r2,sp[0x14]
80003910:	40 6e       	lddsp	lr,sp[0x18]
80003912:	85 05       	st.w	r2[0x0],r5
80003914:	9d 0b       	st.w	lr[0x0],r11
80003916:	40 4b       	lddsp	r11,sp[0x10]
80003918:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000391c:	2f 8d       	sub	sp,-32
8000391e:	d8 32       	popm	r0-r7,pc

80003920 <__sprint_r>:
80003920:	d4 21       	pushm	r4-r7,lr
80003922:	14 97       	mov	r7,r10
80003924:	74 28       	ld.w	r8,r10[0x8]
80003926:	58 08       	cp.w	r8,0
80003928:	c0 41       	brne	80003930 <__sprint_r+0x10>
8000392a:	95 18       	st.w	r10[0x4],r8
8000392c:	10 9c       	mov	r12,r8
8000392e:	d8 22       	popm	r4-r7,pc
80003930:	e0 a0 18 b4 	rcall	80006a98 <__sfvwrite_r>
80003934:	30 08       	mov	r8,0
80003936:	8f 18       	st.w	r7[0x4],r8
80003938:	8f 28       	st.w	r7[0x8],r8
8000393a:	d8 22       	popm	r4-r7,pc

8000393c <_vfprintf_r>:
8000393c:	d4 31       	pushm	r0-r7,lr
8000393e:	fa cd 06 bc 	sub	sp,sp,1724
80003942:	51 09       	stdsp	sp[0x40],r9
80003944:	16 91       	mov	r1,r11
80003946:	14 97       	mov	r7,r10
80003948:	18 95       	mov	r5,r12
8000394a:	e0 a0 1a 1d 	rcall	80006d84 <_localeconv_r>
8000394e:	78 0c       	ld.w	r12,r12[0x0]
80003950:	50 cc       	stdsp	sp[0x30],r12
80003952:	58 05       	cp.w	r5,0
80003954:	c0 70       	breq	80003962 <_vfprintf_r+0x26>
80003956:	6a 68       	ld.w	r8,r5[0x18]
80003958:	58 08       	cp.w	r8,0
8000395a:	c0 41       	brne	80003962 <_vfprintf_r+0x26>
8000395c:	0a 9c       	mov	r12,r5
8000395e:	e0 a0 17 3d 	rcall	800067d8 <__sinit>
80003962:	fe c8 8a 2a 	sub	r8,pc,-30166
80003966:	10 31       	cp.w	r1,r8
80003968:	c0 31       	brne	8000396e <_vfprintf_r+0x32>
8000396a:	6a 01       	ld.w	r1,r5[0x0]
8000396c:	c0 c8       	rjmp	80003984 <_vfprintf_r+0x48>
8000396e:	fe c8 8a 16 	sub	r8,pc,-30186
80003972:	10 31       	cp.w	r1,r8
80003974:	c0 31       	brne	8000397a <_vfprintf_r+0x3e>
80003976:	6a 11       	ld.w	r1,r5[0x4]
80003978:	c0 68       	rjmp	80003984 <_vfprintf_r+0x48>
8000397a:	fe c8 8a 02 	sub	r8,pc,-30206
8000397e:	10 31       	cp.w	r1,r8
80003980:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003984:	82 68       	ld.sh	r8,r1[0xc]
80003986:	ed b8 00 03 	bld	r8,0x3
8000398a:	c0 41       	brne	80003992 <_vfprintf_r+0x56>
8000398c:	62 48       	ld.w	r8,r1[0x10]
8000398e:	58 08       	cp.w	r8,0
80003990:	c0 71       	brne	8000399e <_vfprintf_r+0x62>
80003992:	02 9b       	mov	r11,r1
80003994:	0a 9c       	mov	r12,r5
80003996:	e0 a0 0f 5d 	rcall	80005850 <__swsetup_r>
8000399a:	e0 81 0f 54 	brne	80005842 <_vfprintf_r+0x1f06>
8000399e:	82 68       	ld.sh	r8,r1[0xc]
800039a0:	10 99       	mov	r9,r8
800039a2:	e2 19 00 1a 	andl	r9,0x1a,COH
800039a6:	58 a9       	cp.w	r9,10
800039a8:	c3 c1       	brne	80003a20 <_vfprintf_r+0xe4>
800039aa:	82 79       	ld.sh	r9,r1[0xe]
800039ac:	30 0a       	mov	r10,0
800039ae:	f4 09 19 00 	cp.h	r9,r10
800039b2:	c3 75       	brlt	80003a20 <_vfprintf_r+0xe4>
800039b4:	a1 d8       	cbr	r8,0x1
800039b6:	fb 58 05 d0 	st.h	sp[1488],r8
800039ba:	62 88       	ld.w	r8,r1[0x20]
800039bc:	fb 48 05 e4 	st.w	sp[1508],r8
800039c0:	62 a8       	ld.w	r8,r1[0x28]
800039c2:	fb 48 05 ec 	st.w	sp[1516],r8
800039c6:	fa c8 ff bc 	sub	r8,sp,-68
800039ca:	fb 48 05 d4 	st.w	sp[1492],r8
800039ce:	fb 48 05 c4 	st.w	sp[1476],r8
800039d2:	e0 68 04 00 	mov	r8,1024
800039d6:	fb 48 05 d8 	st.w	sp[1496],r8
800039da:	fb 48 05 cc 	st.w	sp[1484],r8
800039de:	30 08       	mov	r8,0
800039e0:	fb 59 05 d2 	st.h	sp[1490],r9
800039e4:	0e 9a       	mov	r10,r7
800039e6:	41 09       	lddsp	r9,sp[0x40]
800039e8:	fa c7 fa 3c 	sub	r7,sp,-1476
800039ec:	fb 48 05 dc 	st.w	sp[1500],r8
800039f0:	0a 9c       	mov	r12,r5
800039f2:	0e 9b       	mov	r11,r7
800039f4:	ca 4f       	rcall	8000393c <_vfprintf_r>
800039f6:	50 bc       	stdsp	sp[0x2c],r12
800039f8:	c0 95       	brlt	80003a0a <_vfprintf_r+0xce>
800039fa:	0e 9b       	mov	r11,r7
800039fc:	0a 9c       	mov	r12,r5
800039fe:	e0 a0 16 15 	rcall	80006628 <_fflush_r>
80003a02:	40 be       	lddsp	lr,sp[0x2c]
80003a04:	f9 be 01 ff 	movne	lr,-1
80003a08:	50 be       	stdsp	sp[0x2c],lr
80003a0a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003a0e:	ed b8 00 06 	bld	r8,0x6
80003a12:	e0 81 0f 1a 	brne	80005846 <_vfprintf_r+0x1f0a>
80003a16:	82 68       	ld.sh	r8,r1[0xc]
80003a18:	a7 a8       	sbr	r8,0x6
80003a1a:	a2 68       	st.h	r1[0xc],r8
80003a1c:	e0 8f 0f 15 	bral	80005846 <_vfprintf_r+0x1f0a>
80003a20:	30 08       	mov	r8,0
80003a22:	fb 48 06 b4 	st.w	sp[1716],r8
80003a26:	fb 48 06 90 	st.w	sp[1680],r8
80003a2a:	fb 48 06 8c 	st.w	sp[1676],r8
80003a2e:	fb 48 06 b0 	st.w	sp[1712],r8
80003a32:	30 08       	mov	r8,0
80003a34:	30 09       	mov	r9,0
80003a36:	50 a7       	stdsp	sp[0x28],r7
80003a38:	50 78       	stdsp	sp[0x1c],r8
80003a3a:	fa c3 f9 e0 	sub	r3,sp,-1568
80003a3e:	3f f8       	mov	r8,-1
80003a40:	50 59       	stdsp	sp[0x14],r9
80003a42:	fb 43 06 88 	st.w	sp[1672],r3
80003a46:	fb 48 05 44 	st.w	sp[1348],r8
80003a4a:	12 9c       	mov	r12,r9
80003a4c:	50 69       	stdsp	sp[0x18],r9
80003a4e:	50 d9       	stdsp	sp[0x34],r9
80003a50:	50 e9       	stdsp	sp[0x38],r9
80003a52:	50 b9       	stdsp	sp[0x2c],r9
80003a54:	12 97       	mov	r7,r9
80003a56:	0a 94       	mov	r4,r5
80003a58:	40 a2       	lddsp	r2,sp[0x28]
80003a5a:	32 5a       	mov	r10,37
80003a5c:	30 08       	mov	r8,0
80003a5e:	c0 28       	rjmp	80003a62 <_vfprintf_r+0x126>
80003a60:	2f f2       	sub	r2,-1
80003a62:	05 89       	ld.ub	r9,r2[0x0]
80003a64:	f0 09 18 00 	cp.b	r9,r8
80003a68:	5f 1b       	srne	r11
80003a6a:	f4 09 18 00 	cp.b	r9,r10
80003a6e:	5f 19       	srne	r9
80003a70:	f3 eb 00 0b 	and	r11,r9,r11
80003a74:	f0 0b 18 00 	cp.b	r11,r8
80003a78:	cf 41       	brne	80003a60 <_vfprintf_r+0x124>
80003a7a:	40 ab       	lddsp	r11,sp[0x28]
80003a7c:	e4 0b 01 06 	sub	r6,r2,r11
80003a80:	c1 e0       	breq	80003abc <_vfprintf_r+0x180>
80003a82:	fa f8 06 90 	ld.w	r8,sp[1680]
80003a86:	0c 08       	add	r8,r6
80003a88:	87 0b       	st.w	r3[0x0],r11
80003a8a:	fb 48 06 90 	st.w	sp[1680],r8
80003a8e:	87 16       	st.w	r3[0x4],r6
80003a90:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003a94:	2f f8       	sub	r8,-1
80003a96:	fb 48 06 8c 	st.w	sp[1676],r8
80003a9a:	58 78       	cp.w	r8,7
80003a9c:	e0 89 00 04 	brgt	80003aa4 <_vfprintf_r+0x168>
80003aa0:	2f 83       	sub	r3,-8
80003aa2:	c0 a8       	rjmp	80003ab6 <_vfprintf_r+0x17a>
80003aa4:	fa ca f9 78 	sub	r10,sp,-1672
80003aa8:	02 9b       	mov	r11,r1
80003aaa:	08 9c       	mov	r12,r4
80003aac:	c3 af       	rcall	80003920 <__sprint_r>
80003aae:	e0 81 0e c6 	brne	8000583a <_vfprintf_r+0x1efe>
80003ab2:	fa c3 f9 e0 	sub	r3,sp,-1568
80003ab6:	40 ba       	lddsp	r10,sp[0x2c]
80003ab8:	0c 0a       	add	r10,r6
80003aba:	50 ba       	stdsp	sp[0x2c],r10
80003abc:	05 89       	ld.ub	r9,r2[0x0]
80003abe:	30 08       	mov	r8,0
80003ac0:	f0 09 18 00 	cp.b	r9,r8
80003ac4:	e0 80 0e aa 	breq	80005818 <_vfprintf_r+0x1edc>
80003ac8:	30 09       	mov	r9,0
80003aca:	fb 68 06 bb 	st.b	sp[1723],r8
80003ace:	0e 96       	mov	r6,r7
80003ad0:	e4 c8 ff ff 	sub	r8,r2,-1
80003ad4:	3f fe       	mov	lr,-1
80003ad6:	50 93       	stdsp	sp[0x24],r3
80003ad8:	50 41       	stdsp	sp[0x10],r1
80003ada:	0e 93       	mov	r3,r7
80003adc:	04 91       	mov	r1,r2
80003ade:	50 89       	stdsp	sp[0x20],r9
80003ae0:	50 a8       	stdsp	sp[0x28],r8
80003ae2:	50 2e       	stdsp	sp[0x8],lr
80003ae4:	50 39       	stdsp	sp[0xc],r9
80003ae6:	12 95       	mov	r5,r9
80003ae8:	12 90       	mov	r0,r9
80003aea:	10 97       	mov	r7,r8
80003aec:	08 92       	mov	r2,r4
80003aee:	c0 78       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003af0:	3f fc       	mov	r12,-1
80003af2:	08 97       	mov	r7,r4
80003af4:	50 2c       	stdsp	sp[0x8],r12
80003af6:	c0 38       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003af8:	30 0b       	mov	r11,0
80003afa:	50 3b       	stdsp	sp[0xc],r11
80003afc:	0f 38       	ld.ub	r8,r7++
80003afe:	c0 28       	rjmp	80003b02 <_vfprintf_r+0x1c6>
80003b00:	12 90       	mov	r0,r9
80003b02:	f0 c9 00 20 	sub	r9,r8,32
80003b06:	e0 49 00 58 	cp.w	r9,88
80003b0a:	e0 8b 0a 30 	brhi	80004f6a <_vfprintf_r+0x162e>
80003b0e:	fe ca 8f 7e 	sub	r10,pc,-28802
80003b12:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003b16:	50 a7       	stdsp	sp[0x28],r7
80003b18:	50 80       	stdsp	sp[0x20],r0
80003b1a:	0c 97       	mov	r7,r6
80003b1c:	04 94       	mov	r4,r2
80003b1e:	06 96       	mov	r6,r3
80003b20:	02 92       	mov	r2,r1
80003b22:	fe c9 8d 56 	sub	r9,pc,-29354
80003b26:	40 93       	lddsp	r3,sp[0x24]
80003b28:	10 90       	mov	r0,r8
80003b2a:	40 41       	lddsp	r1,sp[0x10]
80003b2c:	50 d9       	stdsp	sp[0x34],r9
80003b2e:	e0 8f 08 8e 	bral	80004c4a <_vfprintf_r+0x130e>
80003b32:	30 08       	mov	r8,0
80003b34:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003b38:	f0 09 18 00 	cp.b	r9,r8
80003b3c:	ce 01       	brne	80003afc <_vfprintf_r+0x1c0>
80003b3e:	32 08       	mov	r8,32
80003b40:	c6 e8       	rjmp	80003c1c <_vfprintf_r+0x2e0>
80003b42:	a1 a5       	sbr	r5,0x0
80003b44:	cd cb       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003b46:	0f 89       	ld.ub	r9,r7[0x0]
80003b48:	f2 c8 00 30 	sub	r8,r9,48
80003b4c:	58 98       	cp.w	r8,9
80003b4e:	e0 8b 00 1d 	brhi	80003b88 <_vfprintf_r+0x24c>
80003b52:	ee c8 ff ff 	sub	r8,r7,-1
80003b56:	30 0b       	mov	r11,0
80003b58:	23 09       	sub	r9,48
80003b5a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003b5e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003b62:	11 39       	ld.ub	r9,r8++
80003b64:	f2 ca 00 30 	sub	r10,r9,48
80003b68:	58 9a       	cp.w	r10,9
80003b6a:	fe 98 ff f7 	brls	80003b58 <_vfprintf_r+0x21c>
80003b6e:	e0 49 00 24 	cp.w	r9,36
80003b72:	cc 31       	brne	80003af8 <_vfprintf_r+0x1bc>
80003b74:	e0 4b 00 20 	cp.w	r11,32
80003b78:	e0 89 0e 60 	brgt	80005838 <_vfprintf_r+0x1efc>
80003b7c:	20 1b       	sub	r11,1
80003b7e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b82:	12 3b       	cp.w	r11,r9
80003b84:	c0 95       	brlt	80003b96 <_vfprintf_r+0x25a>
80003b86:	c1 08       	rjmp	80003ba6 <_vfprintf_r+0x26a>
80003b88:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b8c:	ec ca ff ff 	sub	r10,r6,-1
80003b90:	12 36       	cp.w	r6,r9
80003b92:	c1 f5       	brlt	80003bd0 <_vfprintf_r+0x294>
80003b94:	c2 68       	rjmp	80003be0 <_vfprintf_r+0x2a4>
80003b96:	fa ce f9 44 	sub	lr,sp,-1724
80003b9a:	10 97       	mov	r7,r8
80003b9c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003ba0:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003ba4:	c3 58       	rjmp	80003c0e <_vfprintf_r+0x2d2>
80003ba6:	10 97       	mov	r7,r8
80003ba8:	fa c8 f9 50 	sub	r8,sp,-1712
80003bac:	1a d8       	st.w	--sp,r8
80003bae:	fa c8 fa b8 	sub	r8,sp,-1352
80003bb2:	1a d8       	st.w	--sp,r8
80003bb4:	fa c8 fb b4 	sub	r8,sp,-1100
80003bb8:	02 9a       	mov	r10,r1
80003bba:	1a d8       	st.w	--sp,r8
80003bbc:	04 9c       	mov	r12,r2
80003bbe:	fa c8 f9 40 	sub	r8,sp,-1728
80003bc2:	fa c9 ff b4 	sub	r9,sp,-76
80003bc6:	fe b0 fd 23 	rcall	8000360c <get_arg>
80003bca:	2f dd       	sub	sp,-12
80003bcc:	78 00       	ld.w	r0,r12[0x0]
80003bce:	c2 08       	rjmp	80003c0e <_vfprintf_r+0x2d2>
80003bd0:	fa cc f9 44 	sub	r12,sp,-1724
80003bd4:	14 96       	mov	r6,r10
80003bd6:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003bda:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003bde:	c1 88       	rjmp	80003c0e <_vfprintf_r+0x2d2>
80003be0:	41 08       	lddsp	r8,sp[0x40]
80003be2:	59 f9       	cp.w	r9,31
80003be4:	e0 89 00 11 	brgt	80003c06 <_vfprintf_r+0x2ca>
80003be8:	f0 cb ff fc 	sub	r11,r8,-4
80003bec:	51 0b       	stdsp	sp[0x40],r11
80003bee:	70 00       	ld.w	r0,r8[0x0]
80003bf0:	fa cb f9 44 	sub	r11,sp,-1724
80003bf4:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003bf8:	f1 40 fd 88 	st.w	r8[-632],r0
80003bfc:	2f f9       	sub	r9,-1
80003bfe:	14 96       	mov	r6,r10
80003c00:	fb 49 06 b4 	st.w	sp[1716],r9
80003c04:	c0 58       	rjmp	80003c0e <_vfprintf_r+0x2d2>
80003c06:	70 00       	ld.w	r0,r8[0x0]
80003c08:	14 96       	mov	r6,r10
80003c0a:	2f c8       	sub	r8,-4
80003c0c:	51 08       	stdsp	sp[0x40],r8
80003c0e:	58 00       	cp.w	r0,0
80003c10:	fe 94 ff 76 	brge	80003afc <_vfprintf_r+0x1c0>
80003c14:	5c 30       	neg	r0
80003c16:	a3 a5       	sbr	r5,0x2
80003c18:	c7 2b       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003c1a:	32 b8       	mov	r8,43
80003c1c:	fb 68 06 bb 	st.b	sp[1723],r8
80003c20:	c6 eb       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003c22:	0f 38       	ld.ub	r8,r7++
80003c24:	e0 48 00 2a 	cp.w	r8,42
80003c28:	c0 30       	breq	80003c2e <_vfprintf_r+0x2f2>
80003c2a:	30 09       	mov	r9,0
80003c2c:	c7 98       	rjmp	80003d1e <_vfprintf_r+0x3e2>
80003c2e:	0f 88       	ld.ub	r8,r7[0x0]
80003c30:	f0 c9 00 30 	sub	r9,r8,48
80003c34:	58 99       	cp.w	r9,9
80003c36:	e0 8b 00 1f 	brhi	80003c74 <_vfprintf_r+0x338>
80003c3a:	ee c4 ff ff 	sub	r4,r7,-1
80003c3e:	30 0b       	mov	r11,0
80003c40:	23 08       	sub	r8,48
80003c42:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003c46:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003c4a:	09 38       	ld.ub	r8,r4++
80003c4c:	f0 c9 00 30 	sub	r9,r8,48
80003c50:	58 99       	cp.w	r9,9
80003c52:	fe 98 ff f7 	brls	80003c40 <_vfprintf_r+0x304>
80003c56:	e0 48 00 24 	cp.w	r8,36
80003c5a:	fe 91 ff 4f 	brne	80003af8 <_vfprintf_r+0x1bc>
80003c5e:	e0 4b 00 20 	cp.w	r11,32
80003c62:	e0 89 0d eb 	brgt	80005838 <_vfprintf_r+0x1efc>
80003c66:	20 1b       	sub	r11,1
80003c68:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003c6c:	10 3b       	cp.w	r11,r8
80003c6e:	c0 a5       	brlt	80003c82 <_vfprintf_r+0x346>
80003c70:	c1 18       	rjmp	80003c92 <_vfprintf_r+0x356>
80003c72:	d7 03       	nop
80003c74:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003c78:	ec c9 ff ff 	sub	r9,r6,-1
80003c7c:	14 36       	cp.w	r6,r10
80003c7e:	c1 f5       	brlt	80003cbc <_vfprintf_r+0x380>
80003c80:	c2 88       	rjmp	80003cd0 <_vfprintf_r+0x394>
80003c82:	fa ca f9 44 	sub	r10,sp,-1724
80003c86:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003c8a:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003c8e:	50 2b       	stdsp	sp[0x8],r11
80003c90:	c3 c8       	rjmp	80003d08 <_vfprintf_r+0x3cc>
80003c92:	fa c8 f9 50 	sub	r8,sp,-1712
80003c96:	1a d8       	st.w	--sp,r8
80003c98:	fa c8 fa b8 	sub	r8,sp,-1352
80003c9c:	1a d8       	st.w	--sp,r8
80003c9e:	fa c8 fb b4 	sub	r8,sp,-1100
80003ca2:	02 9a       	mov	r10,r1
80003ca4:	1a d8       	st.w	--sp,r8
80003ca6:	04 9c       	mov	r12,r2
80003ca8:	fa c8 f9 40 	sub	r8,sp,-1728
80003cac:	fa c9 ff b4 	sub	r9,sp,-76
80003cb0:	fe b0 fc ae 	rcall	8000360c <get_arg>
80003cb4:	2f dd       	sub	sp,-12
80003cb6:	78 0c       	ld.w	r12,r12[0x0]
80003cb8:	50 2c       	stdsp	sp[0x8],r12
80003cba:	c2 78       	rjmp	80003d08 <_vfprintf_r+0x3cc>
80003cbc:	12 96       	mov	r6,r9
80003cbe:	0e 94       	mov	r4,r7
80003cc0:	fa c9 f9 44 	sub	r9,sp,-1724
80003cc4:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003cc8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003ccc:	50 28       	stdsp	sp[0x8],r8
80003cce:	c1 d8       	rjmp	80003d08 <_vfprintf_r+0x3cc>
80003cd0:	41 08       	lddsp	r8,sp[0x40]
80003cd2:	59 fa       	cp.w	r10,31
80003cd4:	e0 89 00 14 	brgt	80003cfc <_vfprintf_r+0x3c0>
80003cd8:	f0 cb ff fc 	sub	r11,r8,-4
80003cdc:	70 08       	ld.w	r8,r8[0x0]
80003cde:	51 0b       	stdsp	sp[0x40],r11
80003ce0:	50 28       	stdsp	sp[0x8],r8
80003ce2:	fa c6 f9 44 	sub	r6,sp,-1724
80003ce6:	40 2e       	lddsp	lr,sp[0x8]
80003ce8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003cec:	f1 4e fd 88 	st.w	r8[-632],lr
80003cf0:	2f fa       	sub	r10,-1
80003cf2:	0e 94       	mov	r4,r7
80003cf4:	fb 4a 06 b4 	st.w	sp[1716],r10
80003cf8:	12 96       	mov	r6,r9
80003cfa:	c0 78       	rjmp	80003d08 <_vfprintf_r+0x3cc>
80003cfc:	70 0c       	ld.w	r12,r8[0x0]
80003cfe:	0e 94       	mov	r4,r7
80003d00:	2f c8       	sub	r8,-4
80003d02:	50 2c       	stdsp	sp[0x8],r12
80003d04:	12 96       	mov	r6,r9
80003d06:	51 08       	stdsp	sp[0x40],r8
80003d08:	40 2b       	lddsp	r11,sp[0x8]
80003d0a:	58 0b       	cp.w	r11,0
80003d0c:	fe 95 fe f2 	brlt	80003af0 <_vfprintf_r+0x1b4>
80003d10:	08 97       	mov	r7,r4
80003d12:	cf 5a       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d14:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003d18:	0f 38       	ld.ub	r8,r7++
80003d1a:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003d1e:	f0 ca 00 30 	sub	r10,r8,48
80003d22:	58 9a       	cp.w	r10,9
80003d24:	fe 98 ff f8 	brls	80003d14 <_vfprintf_r+0x3d8>
80003d28:	3f fa       	mov	r10,-1
80003d2a:	f2 0a 0c 49 	max	r9,r9,r10
80003d2e:	50 29       	stdsp	sp[0x8],r9
80003d30:	ce 9a       	rjmp	80003b02 <_vfprintf_r+0x1c6>
80003d32:	a7 b5       	sbr	r5,0x7
80003d34:	ce 4a       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d36:	30 09       	mov	r9,0
80003d38:	23 08       	sub	r8,48
80003d3a:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003d3e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003d42:	0f 38       	ld.ub	r8,r7++
80003d44:	f0 ca 00 30 	sub	r10,r8,48
80003d48:	58 9a       	cp.w	r10,9
80003d4a:	fe 98 ff f7 	brls	80003d38 <_vfprintf_r+0x3fc>
80003d4e:	e0 48 00 24 	cp.w	r8,36
80003d52:	fe 91 fe d7 	brne	80003b00 <_vfprintf_r+0x1c4>
80003d56:	e0 49 00 20 	cp.w	r9,32
80003d5a:	e0 89 0d 6f 	brgt	80005838 <_vfprintf_r+0x1efc>
80003d5e:	f2 c3 00 01 	sub	r3,r9,1
80003d62:	30 19       	mov	r9,1
80003d64:	50 39       	stdsp	sp[0xc],r9
80003d66:	cc ba       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d68:	a3 b5       	sbr	r5,0x3
80003d6a:	cc 9a       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d6c:	a7 a5       	sbr	r5,0x6
80003d6e:	cc 7a       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d70:	0a 98       	mov	r8,r5
80003d72:	a5 b5       	sbr	r5,0x5
80003d74:	a5 a8       	sbr	r8,0x4
80003d76:	0f 89       	ld.ub	r9,r7[0x0]
80003d78:	36 ce       	mov	lr,108
80003d7a:	fc 09 18 00 	cp.b	r9,lr
80003d7e:	f7 b7 00 ff 	subeq	r7,-1
80003d82:	f0 05 17 10 	movne	r5,r8
80003d86:	cb ba       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d88:	a5 b5       	sbr	r5,0x5
80003d8a:	cb 9a       	rjmp	80003afc <_vfprintf_r+0x1c0>
80003d8c:	50 a7       	stdsp	sp[0x28],r7
80003d8e:	50 80       	stdsp	sp[0x20],r0
80003d90:	0c 97       	mov	r7,r6
80003d92:	10 90       	mov	r0,r8
80003d94:	06 96       	mov	r6,r3
80003d96:	04 94       	mov	r4,r2
80003d98:	40 93       	lddsp	r3,sp[0x24]
80003d9a:	02 92       	mov	r2,r1
80003d9c:	0e 99       	mov	r9,r7
80003d9e:	40 41       	lddsp	r1,sp[0x10]
80003da0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003da4:	40 3c       	lddsp	r12,sp[0xc]
80003da6:	58 0c       	cp.w	r12,0
80003da8:	c1 d0       	breq	80003de2 <_vfprintf_r+0x4a6>
80003daa:	10 36       	cp.w	r6,r8
80003dac:	c0 64       	brge	80003db8 <_vfprintf_r+0x47c>
80003dae:	fa cb f9 44 	sub	r11,sp,-1724
80003db2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003db6:	c1 d8       	rjmp	80003df0 <_vfprintf_r+0x4b4>
80003db8:	fa c8 f9 50 	sub	r8,sp,-1712
80003dbc:	1a d8       	st.w	--sp,r8
80003dbe:	fa c8 fa b8 	sub	r8,sp,-1352
80003dc2:	1a d8       	st.w	--sp,r8
80003dc4:	fa c8 fb b4 	sub	r8,sp,-1100
80003dc8:	1a d8       	st.w	--sp,r8
80003dca:	fa c8 f9 40 	sub	r8,sp,-1728
80003dce:	fa c9 ff b4 	sub	r9,sp,-76
80003dd2:	04 9a       	mov	r10,r2
80003dd4:	0c 9b       	mov	r11,r6
80003dd6:	08 9c       	mov	r12,r4
80003dd8:	fe b0 fc 1a 	rcall	8000360c <get_arg>
80003ddc:	2f dd       	sub	sp,-12
80003dde:	19 b8       	ld.ub	r8,r12[0x3]
80003de0:	c2 28       	rjmp	80003e24 <_vfprintf_r+0x4e8>
80003de2:	2f f7       	sub	r7,-1
80003de4:	10 39       	cp.w	r9,r8
80003de6:	c0 84       	brge	80003df6 <_vfprintf_r+0x4ba>
80003de8:	fa ca f9 44 	sub	r10,sp,-1724
80003dec:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003df0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003df4:	c1 88       	rjmp	80003e24 <_vfprintf_r+0x4e8>
80003df6:	41 09       	lddsp	r9,sp[0x40]
80003df8:	59 f8       	cp.w	r8,31
80003dfa:	e0 89 00 12 	brgt	80003e1e <_vfprintf_r+0x4e2>
80003dfe:	f2 ca ff fc 	sub	r10,r9,-4
80003e02:	51 0a       	stdsp	sp[0x40],r10
80003e04:	72 09       	ld.w	r9,r9[0x0]
80003e06:	fa c6 f9 44 	sub	r6,sp,-1724
80003e0a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003e0e:	2f f8       	sub	r8,-1
80003e10:	f5 49 fd 88 	st.w	r10[-632],r9
80003e14:	fb 48 06 b4 	st.w	sp[1716],r8
80003e18:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003e1c:	c0 48       	rjmp	80003e24 <_vfprintf_r+0x4e8>
80003e1e:	13 b8       	ld.ub	r8,r9[0x3]
80003e20:	2f c9       	sub	r9,-4
80003e22:	51 09       	stdsp	sp[0x40],r9
80003e24:	fb 68 06 60 	st.b	sp[1632],r8
80003e28:	30 0e       	mov	lr,0
80003e2a:	30 08       	mov	r8,0
80003e2c:	30 12       	mov	r2,1
80003e2e:	fb 68 06 bb 	st.b	sp[1723],r8
80003e32:	50 2e       	stdsp	sp[0x8],lr
80003e34:	e0 8f 08 ad 	bral	80004f8e <_vfprintf_r+0x1652>
80003e38:	50 a7       	stdsp	sp[0x28],r7
80003e3a:	50 80       	stdsp	sp[0x20],r0
80003e3c:	0c 97       	mov	r7,r6
80003e3e:	04 94       	mov	r4,r2
80003e40:	06 96       	mov	r6,r3
80003e42:	02 92       	mov	r2,r1
80003e44:	40 93       	lddsp	r3,sp[0x24]
80003e46:	10 90       	mov	r0,r8
80003e48:	40 41       	lddsp	r1,sp[0x10]
80003e4a:	a5 a5       	sbr	r5,0x4
80003e4c:	c0 a8       	rjmp	80003e60 <_vfprintf_r+0x524>
80003e4e:	50 a7       	stdsp	sp[0x28],r7
80003e50:	50 80       	stdsp	sp[0x20],r0
80003e52:	0c 97       	mov	r7,r6
80003e54:	04 94       	mov	r4,r2
80003e56:	06 96       	mov	r6,r3
80003e58:	02 92       	mov	r2,r1
80003e5a:	40 93       	lddsp	r3,sp[0x24]
80003e5c:	10 90       	mov	r0,r8
80003e5e:	40 41       	lddsp	r1,sp[0x10]
80003e60:	ed b5 00 05 	bld	r5,0x5
80003e64:	c5 11       	brne	80003f06 <_vfprintf_r+0x5ca>
80003e66:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e6a:	40 3c       	lddsp	r12,sp[0xc]
80003e6c:	58 0c       	cp.w	r12,0
80003e6e:	c1 e0       	breq	80003eaa <_vfprintf_r+0x56e>
80003e70:	10 36       	cp.w	r6,r8
80003e72:	c0 64       	brge	80003e7e <_vfprintf_r+0x542>
80003e74:	fa cb f9 44 	sub	r11,sp,-1724
80003e78:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e7c:	c2 08       	rjmp	80003ebc <_vfprintf_r+0x580>
80003e7e:	fa c8 f9 50 	sub	r8,sp,-1712
80003e82:	1a d8       	st.w	--sp,r8
80003e84:	fa c8 fa b8 	sub	r8,sp,-1352
80003e88:	0c 9b       	mov	r11,r6
80003e8a:	1a d8       	st.w	--sp,r8
80003e8c:	fa c8 fb b4 	sub	r8,sp,-1100
80003e90:	1a d8       	st.w	--sp,r8
80003e92:	fa c9 ff b4 	sub	r9,sp,-76
80003e96:	fa c8 f9 40 	sub	r8,sp,-1728
80003e9a:	04 9a       	mov	r10,r2
80003e9c:	08 9c       	mov	r12,r4
80003e9e:	fe b0 fb b7 	rcall	8000360c <get_arg>
80003ea2:	2f dd       	sub	sp,-12
80003ea4:	78 1b       	ld.w	r11,r12[0x4]
80003ea6:	78 09       	ld.w	r9,r12[0x0]
80003ea8:	c2 b8       	rjmp	80003efe <_vfprintf_r+0x5c2>
80003eaa:	ee ca ff ff 	sub	r10,r7,-1
80003eae:	10 37       	cp.w	r7,r8
80003eb0:	c0 b4       	brge	80003ec6 <_vfprintf_r+0x58a>
80003eb2:	fa c9 f9 44 	sub	r9,sp,-1724
80003eb6:	14 97       	mov	r7,r10
80003eb8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003ebc:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003ec0:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003ec4:	c1 d8       	rjmp	80003efe <_vfprintf_r+0x5c2>
80003ec6:	41 09       	lddsp	r9,sp[0x40]
80003ec8:	59 f8       	cp.w	r8,31
80003eca:	e0 89 00 14 	brgt	80003ef2 <_vfprintf_r+0x5b6>
80003ece:	f2 cb ff f8 	sub	r11,r9,-8
80003ed2:	51 0b       	stdsp	sp[0x40],r11
80003ed4:	fa c6 f9 44 	sub	r6,sp,-1724
80003ed8:	72 1b       	ld.w	r11,r9[0x4]
80003eda:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003ede:	72 09       	ld.w	r9,r9[0x0]
80003ee0:	f9 4b fd 8c 	st.w	r12[-628],r11
80003ee4:	f9 49 fd 88 	st.w	r12[-632],r9
80003ee8:	2f f8       	sub	r8,-1
80003eea:	14 97       	mov	r7,r10
80003eec:	fb 48 06 b4 	st.w	sp[1716],r8
80003ef0:	c0 78       	rjmp	80003efe <_vfprintf_r+0x5c2>
80003ef2:	f2 c8 ff f8 	sub	r8,r9,-8
80003ef6:	72 1b       	ld.w	r11,r9[0x4]
80003ef8:	14 97       	mov	r7,r10
80003efa:	51 08       	stdsp	sp[0x40],r8
80003efc:	72 09       	ld.w	r9,r9[0x0]
80003efe:	16 98       	mov	r8,r11
80003f00:	fa e9 00 00 	st.d	sp[0],r8
80003f04:	ca e8       	rjmp	80004060 <_vfprintf_r+0x724>
80003f06:	ed b5 00 04 	bld	r5,0x4
80003f0a:	c1 71       	brne	80003f38 <_vfprintf_r+0x5fc>
80003f0c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f10:	40 3e       	lddsp	lr,sp[0xc]
80003f12:	58 0e       	cp.w	lr,0
80003f14:	c0 80       	breq	80003f24 <_vfprintf_r+0x5e8>
80003f16:	10 36       	cp.w	r6,r8
80003f18:	c6 94       	brge	80003fea <_vfprintf_r+0x6ae>
80003f1a:	fa cc f9 44 	sub	r12,sp,-1724
80003f1e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003f22:	c8 28       	rjmp	80004026 <_vfprintf_r+0x6ea>
80003f24:	ee ca ff ff 	sub	r10,r7,-1
80003f28:	10 37       	cp.w	r7,r8
80003f2a:	e0 84 00 81 	brge	8000402c <_vfprintf_r+0x6f0>
80003f2e:	fa cb f9 44 	sub	r11,sp,-1724
80003f32:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f36:	c7 78       	rjmp	80004024 <_vfprintf_r+0x6e8>
80003f38:	ed b5 00 06 	bld	r5,0x6
80003f3c:	c4 b1       	brne	80003fd2 <_vfprintf_r+0x696>
80003f3e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f42:	40 3c       	lddsp	r12,sp[0xc]
80003f44:	58 0c       	cp.w	r12,0
80003f46:	c1 d0       	breq	80003f80 <_vfprintf_r+0x644>
80003f48:	10 36       	cp.w	r6,r8
80003f4a:	c0 64       	brge	80003f56 <_vfprintf_r+0x61a>
80003f4c:	fa cb f9 44 	sub	r11,sp,-1724
80003f50:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f54:	c1 f8       	rjmp	80003f92 <_vfprintf_r+0x656>
80003f56:	fa c8 f9 50 	sub	r8,sp,-1712
80003f5a:	1a d8       	st.w	--sp,r8
80003f5c:	fa c8 fa b8 	sub	r8,sp,-1352
80003f60:	1a d8       	st.w	--sp,r8
80003f62:	fa c8 fb b4 	sub	r8,sp,-1100
80003f66:	1a d8       	st.w	--sp,r8
80003f68:	fa c8 f9 40 	sub	r8,sp,-1728
80003f6c:	fa c9 ff b4 	sub	r9,sp,-76
80003f70:	04 9a       	mov	r10,r2
80003f72:	0c 9b       	mov	r11,r6
80003f74:	08 9c       	mov	r12,r4
80003f76:	fe b0 fb 4b 	rcall	8000360c <get_arg>
80003f7a:	2f dd       	sub	sp,-12
80003f7c:	98 18       	ld.sh	r8,r12[0x2]
80003f7e:	c2 68       	rjmp	80003fca <_vfprintf_r+0x68e>
80003f80:	ee ca ff ff 	sub	r10,r7,-1
80003f84:	10 37       	cp.w	r7,r8
80003f86:	c0 94       	brge	80003f98 <_vfprintf_r+0x65c>
80003f88:	fa c9 f9 44 	sub	r9,sp,-1724
80003f8c:	14 97       	mov	r7,r10
80003f8e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f92:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003f96:	c1 a8       	rjmp	80003fca <_vfprintf_r+0x68e>
80003f98:	41 09       	lddsp	r9,sp[0x40]
80003f9a:	59 f8       	cp.w	r8,31
80003f9c:	e0 89 00 13 	brgt	80003fc2 <_vfprintf_r+0x686>
80003fa0:	f2 cb ff fc 	sub	r11,r9,-4
80003fa4:	51 0b       	stdsp	sp[0x40],r11
80003fa6:	72 09       	ld.w	r9,r9[0x0]
80003fa8:	fa c6 f9 44 	sub	r6,sp,-1724
80003fac:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003fb0:	2f f8       	sub	r8,-1
80003fb2:	f7 49 fd 88 	st.w	r11[-632],r9
80003fb6:	fb 48 06 b4 	st.w	sp[1716],r8
80003fba:	14 97       	mov	r7,r10
80003fbc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003fc0:	c0 58       	rjmp	80003fca <_vfprintf_r+0x68e>
80003fc2:	92 18       	ld.sh	r8,r9[0x2]
80003fc4:	14 97       	mov	r7,r10
80003fc6:	2f c9       	sub	r9,-4
80003fc8:	51 09       	stdsp	sp[0x40],r9
80003fca:	50 18       	stdsp	sp[0x4],r8
80003fcc:	bf 58       	asr	r8,0x1f
80003fce:	50 08       	stdsp	sp[0x0],r8
80003fd0:	c4 88       	rjmp	80004060 <_vfprintf_r+0x724>
80003fd2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003fd6:	40 3c       	lddsp	r12,sp[0xc]
80003fd8:	58 0c       	cp.w	r12,0
80003fda:	c1 d0       	breq	80004014 <_vfprintf_r+0x6d8>
80003fdc:	10 36       	cp.w	r6,r8
80003fde:	c0 64       	brge	80003fea <_vfprintf_r+0x6ae>
80003fe0:	fa cb f9 44 	sub	r11,sp,-1724
80003fe4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003fe8:	c1 f8       	rjmp	80004026 <_vfprintf_r+0x6ea>
80003fea:	fa c8 f9 50 	sub	r8,sp,-1712
80003fee:	1a d8       	st.w	--sp,r8
80003ff0:	fa c8 fa b8 	sub	r8,sp,-1352
80003ff4:	0c 9b       	mov	r11,r6
80003ff6:	1a d8       	st.w	--sp,r8
80003ff8:	fa c8 fb b4 	sub	r8,sp,-1100
80003ffc:	04 9a       	mov	r10,r2
80003ffe:	1a d8       	st.w	--sp,r8
80004000:	08 9c       	mov	r12,r4
80004002:	fa c8 f9 40 	sub	r8,sp,-1728
80004006:	fa c9 ff b4 	sub	r9,sp,-76
8000400a:	fe b0 fb 01 	rcall	8000360c <get_arg>
8000400e:	2f dd       	sub	sp,-12
80004010:	78 0b       	ld.w	r11,r12[0x0]
80004012:	c2 48       	rjmp	8000405a <_vfprintf_r+0x71e>
80004014:	ee ca ff ff 	sub	r10,r7,-1
80004018:	10 37       	cp.w	r7,r8
8000401a:	c0 94       	brge	8000402c <_vfprintf_r+0x6f0>
8000401c:	fa c9 f9 44 	sub	r9,sp,-1724
80004020:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004024:	14 97       	mov	r7,r10
80004026:	ec fb fd 88 	ld.w	r11,r6[-632]
8000402a:	c1 88       	rjmp	8000405a <_vfprintf_r+0x71e>
8000402c:	41 09       	lddsp	r9,sp[0x40]
8000402e:	59 f8       	cp.w	r8,31
80004030:	e0 89 00 11 	brgt	80004052 <_vfprintf_r+0x716>
80004034:	f2 cb ff fc 	sub	r11,r9,-4
80004038:	51 0b       	stdsp	sp[0x40],r11
8000403a:	fa c6 f9 44 	sub	r6,sp,-1724
8000403e:	72 0b       	ld.w	r11,r9[0x0]
80004040:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004044:	f3 4b fd 88 	st.w	r9[-632],r11
80004048:	2f f8       	sub	r8,-1
8000404a:	14 97       	mov	r7,r10
8000404c:	fb 48 06 b4 	st.w	sp[1716],r8
80004050:	c0 58       	rjmp	8000405a <_vfprintf_r+0x71e>
80004052:	72 0b       	ld.w	r11,r9[0x0]
80004054:	14 97       	mov	r7,r10
80004056:	2f c9       	sub	r9,-4
80004058:	51 09       	stdsp	sp[0x40],r9
8000405a:	50 1b       	stdsp	sp[0x4],r11
8000405c:	bf 5b       	asr	r11,0x1f
8000405e:	50 0b       	stdsp	sp[0x0],r11
80004060:	fa ea 00 00 	ld.d	r10,sp[0]
80004064:	58 0a       	cp.w	r10,0
80004066:	5c 2b       	cpc	r11
80004068:	c0 e4       	brge	80004084 <_vfprintf_r+0x748>
8000406a:	30 08       	mov	r8,0
8000406c:	fa ea 00 00 	ld.d	r10,sp[0]
80004070:	30 09       	mov	r9,0
80004072:	f0 0a 01 0a 	sub	r10,r8,r10
80004076:	f2 0b 01 4b 	sbc	r11,r9,r11
8000407a:	32 d8       	mov	r8,45
8000407c:	fa eb 00 00 	st.d	sp[0],r10
80004080:	fb 68 06 bb 	st.b	sp[1723],r8
80004084:	30 18       	mov	r8,1
80004086:	e0 8f 06 fa 	bral	80004e7a <_vfprintf_r+0x153e>
8000408a:	50 a7       	stdsp	sp[0x28],r7
8000408c:	50 80       	stdsp	sp[0x20],r0
8000408e:	0c 97       	mov	r7,r6
80004090:	04 94       	mov	r4,r2
80004092:	06 96       	mov	r6,r3
80004094:	02 92       	mov	r2,r1
80004096:	40 93       	lddsp	r3,sp[0x24]
80004098:	10 90       	mov	r0,r8
8000409a:	40 41       	lddsp	r1,sp[0x10]
8000409c:	0e 99       	mov	r9,r7
8000409e:	ed b5 00 03 	bld	r5,0x3
800040a2:	c4 11       	brne	80004124 <_vfprintf_r+0x7e8>
800040a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040a8:	40 3a       	lddsp	r10,sp[0xc]
800040aa:	58 0a       	cp.w	r10,0
800040ac:	c1 90       	breq	800040de <_vfprintf_r+0x7a2>
800040ae:	10 36       	cp.w	r6,r8
800040b0:	c6 45       	brlt	80004178 <_vfprintf_r+0x83c>
800040b2:	fa c8 f9 50 	sub	r8,sp,-1712
800040b6:	1a d8       	st.w	--sp,r8
800040b8:	fa c8 fa b8 	sub	r8,sp,-1352
800040bc:	1a d8       	st.w	--sp,r8
800040be:	fa c8 fb b4 	sub	r8,sp,-1100
800040c2:	0c 9b       	mov	r11,r6
800040c4:	1a d8       	st.w	--sp,r8
800040c6:	04 9a       	mov	r10,r2
800040c8:	fa c8 f9 40 	sub	r8,sp,-1728
800040cc:	fa c9 ff b4 	sub	r9,sp,-76
800040d0:	08 9c       	mov	r12,r4
800040d2:	fe b0 fa 9d 	rcall	8000360c <get_arg>
800040d6:	2f dd       	sub	sp,-12
800040d8:	78 16       	ld.w	r6,r12[0x4]
800040da:	50 76       	stdsp	sp[0x1c],r6
800040dc:	c4 88       	rjmp	8000416c <_vfprintf_r+0x830>
800040de:	2f f7       	sub	r7,-1
800040e0:	10 39       	cp.w	r9,r8
800040e2:	c0 c4       	brge	800040fa <_vfprintf_r+0x7be>
800040e4:	fa ce f9 44 	sub	lr,sp,-1724
800040e8:	fc 06 00 36 	add	r6,lr,r6<<0x3
800040ec:	ec fc fd 8c 	ld.w	r12,r6[-628]
800040f0:	50 7c       	stdsp	sp[0x1c],r12
800040f2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800040f6:	50 56       	stdsp	sp[0x14],r6
800040f8:	c6 68       	rjmp	800041c4 <_vfprintf_r+0x888>
800040fa:	41 09       	lddsp	r9,sp[0x40]
800040fc:	59 f8       	cp.w	r8,31
800040fe:	e0 89 00 10 	brgt	8000411e <_vfprintf_r+0x7e2>
80004102:	f2 ca ff f8 	sub	r10,r9,-8
80004106:	72 1b       	ld.w	r11,r9[0x4]
80004108:	51 0a       	stdsp	sp[0x40],r10
8000410a:	72 09       	ld.w	r9,r9[0x0]
8000410c:	fa ca f9 44 	sub	r10,sp,-1724
80004110:	50 7b       	stdsp	sp[0x1c],r11
80004112:	50 59       	stdsp	sp[0x14],r9
80004114:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004118:	40 5b       	lddsp	r11,sp[0x14]
8000411a:	40 7a       	lddsp	r10,sp[0x1c]
8000411c:	c4 78       	rjmp	800041aa <_vfprintf_r+0x86e>
8000411e:	72 18       	ld.w	r8,r9[0x4]
80004120:	50 78       	stdsp	sp[0x1c],r8
80004122:	c4 c8       	rjmp	800041ba <_vfprintf_r+0x87e>
80004124:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004128:	40 3e       	lddsp	lr,sp[0xc]
8000412a:	58 0e       	cp.w	lr,0
8000412c:	c2 30       	breq	80004172 <_vfprintf_r+0x836>
8000412e:	10 36       	cp.w	r6,r8
80004130:	c0 94       	brge	80004142 <_vfprintf_r+0x806>
80004132:	fa cc f9 44 	sub	r12,sp,-1724
80004136:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000413a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000413e:	50 7b       	stdsp	sp[0x1c],r11
80004140:	cd 9b       	rjmp	800040f2 <_vfprintf_r+0x7b6>
80004142:	fa c8 f9 50 	sub	r8,sp,-1712
80004146:	1a d8       	st.w	--sp,r8
80004148:	fa c8 fa b8 	sub	r8,sp,-1352
8000414c:	04 9a       	mov	r10,r2
8000414e:	1a d8       	st.w	--sp,r8
80004150:	fa c8 fb b4 	sub	r8,sp,-1100
80004154:	0c 9b       	mov	r11,r6
80004156:	1a d8       	st.w	--sp,r8
80004158:	08 9c       	mov	r12,r4
8000415a:	fa c8 f9 40 	sub	r8,sp,-1728
8000415e:	fa c9 ff b4 	sub	r9,sp,-76
80004162:	fe b0 fa 55 	rcall	8000360c <get_arg>
80004166:	2f dd       	sub	sp,-12
80004168:	78 1a       	ld.w	r10,r12[0x4]
8000416a:	50 7a       	stdsp	sp[0x1c],r10
8000416c:	78 0c       	ld.w	r12,r12[0x0]
8000416e:	50 5c       	stdsp	sp[0x14],r12
80004170:	c2 a8       	rjmp	800041c4 <_vfprintf_r+0x888>
80004172:	2f f7       	sub	r7,-1
80004174:	10 39       	cp.w	r9,r8
80004176:	c0 94       	brge	80004188 <_vfprintf_r+0x84c>
80004178:	fa c9 f9 44 	sub	r9,sp,-1724
8000417c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004180:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004184:	50 78       	stdsp	sp[0x1c],r8
80004186:	cb 6b       	rjmp	800040f2 <_vfprintf_r+0x7b6>
80004188:	41 09       	lddsp	r9,sp[0x40]
8000418a:	59 f8       	cp.w	r8,31
8000418c:	e0 89 00 15 	brgt	800041b6 <_vfprintf_r+0x87a>
80004190:	f2 ca ff f8 	sub	r10,r9,-8
80004194:	72 16       	ld.w	r6,r9[0x4]
80004196:	72 09       	ld.w	r9,r9[0x0]
80004198:	51 0a       	stdsp	sp[0x40],r10
8000419a:	50 59       	stdsp	sp[0x14],r9
8000419c:	fa ce f9 44 	sub	lr,sp,-1724
800041a0:	50 76       	stdsp	sp[0x1c],r6
800041a2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800041a6:	40 5b       	lddsp	r11,sp[0x14]
800041a8:	0c 9a       	mov	r10,r6
800041aa:	f2 eb fd 88 	st.d	r9[-632],r10
800041ae:	2f f8       	sub	r8,-1
800041b0:	fb 48 06 b4 	st.w	sp[1716],r8
800041b4:	c0 88       	rjmp	800041c4 <_vfprintf_r+0x888>
800041b6:	72 1c       	ld.w	r12,r9[0x4]
800041b8:	50 7c       	stdsp	sp[0x1c],r12
800041ba:	f2 c8 ff f8 	sub	r8,r9,-8
800041be:	51 08       	stdsp	sp[0x40],r8
800041c0:	72 09       	ld.w	r9,r9[0x0]
800041c2:	50 59       	stdsp	sp[0x14],r9
800041c4:	40 5b       	lddsp	r11,sp[0x14]
800041c6:	40 7a       	lddsp	r10,sp[0x1c]
800041c8:	e0 a0 1c de 	rcall	80007b84 <__isinfd>
800041cc:	18 96       	mov	r6,r12
800041ce:	c1 70       	breq	800041fc <_vfprintf_r+0x8c0>
800041d0:	30 08       	mov	r8,0
800041d2:	30 09       	mov	r9,0
800041d4:	40 5b       	lddsp	r11,sp[0x14]
800041d6:	40 7a       	lddsp	r10,sp[0x1c]
800041d8:	e0 a0 21 cc 	rcall	80008570 <__avr32_f64_cmp_lt>
800041dc:	c0 40       	breq	800041e4 <_vfprintf_r+0x8a8>
800041de:	32 d8       	mov	r8,45
800041e0:	fb 68 06 bb 	st.b	sp[1723],r8
800041e4:	fe c8 94 04 	sub	r8,pc,-27644
800041e8:	fe c6 94 04 	sub	r6,pc,-27644
800041ec:	a7 d5       	cbr	r5,0x7
800041ee:	e0 40 00 47 	cp.w	r0,71
800041f2:	f0 06 17 a0 	movle	r6,r8
800041f6:	30 32       	mov	r2,3
800041f8:	e0 8f 06 ce 	bral	80004f94 <_vfprintf_r+0x1658>
800041fc:	40 5b       	lddsp	r11,sp[0x14]
800041fe:	40 7a       	lddsp	r10,sp[0x1c]
80004200:	e0 a0 1c d7 	rcall	80007bae <__isnand>
80004204:	c0 e0       	breq	80004220 <_vfprintf_r+0x8e4>
80004206:	50 26       	stdsp	sp[0x8],r6
80004208:	fe c8 94 20 	sub	r8,pc,-27616
8000420c:	fe c6 94 20 	sub	r6,pc,-27616
80004210:	a7 d5       	cbr	r5,0x7
80004212:	e0 40 00 47 	cp.w	r0,71
80004216:	f0 06 17 a0 	movle	r6,r8
8000421a:	30 32       	mov	r2,3
8000421c:	e0 8f 06 c2 	bral	80004fa0 <_vfprintf_r+0x1664>
80004220:	40 2a       	lddsp	r10,sp[0x8]
80004222:	5b fa       	cp.w	r10,-1
80004224:	c0 41       	brne	8000422c <_vfprintf_r+0x8f0>
80004226:	30 69       	mov	r9,6
80004228:	50 29       	stdsp	sp[0x8],r9
8000422a:	c1 18       	rjmp	8000424c <_vfprintf_r+0x910>
8000422c:	e0 40 00 47 	cp.w	r0,71
80004230:	5f 09       	sreq	r9
80004232:	e0 40 00 67 	cp.w	r0,103
80004236:	5f 08       	sreq	r8
80004238:	f3 e8 10 08 	or	r8,r9,r8
8000423c:	f8 08 18 00 	cp.b	r8,r12
80004240:	c0 60       	breq	8000424c <_vfprintf_r+0x910>
80004242:	40 28       	lddsp	r8,sp[0x8]
80004244:	58 08       	cp.w	r8,0
80004246:	f9 b8 00 01 	moveq	r8,1
8000424a:	50 28       	stdsp	sp[0x8],r8
8000424c:	40 78       	lddsp	r8,sp[0x1c]
8000424e:	40 59       	lddsp	r9,sp[0x14]
80004250:	fa e9 06 94 	st.d	sp[1684],r8
80004254:	a9 a5       	sbr	r5,0x8
80004256:	fa f8 06 94 	ld.w	r8,sp[1684]
8000425a:	58 08       	cp.w	r8,0
8000425c:	c0 65       	brlt	80004268 <_vfprintf_r+0x92c>
8000425e:	40 5e       	lddsp	lr,sp[0x14]
80004260:	30 0c       	mov	r12,0
80004262:	50 6e       	stdsp	sp[0x18],lr
80004264:	50 9c       	stdsp	sp[0x24],r12
80004266:	c0 78       	rjmp	80004274 <_vfprintf_r+0x938>
80004268:	40 5b       	lddsp	r11,sp[0x14]
8000426a:	32 da       	mov	r10,45
8000426c:	ee 1b 80 00 	eorh	r11,0x8000
80004270:	50 9a       	stdsp	sp[0x24],r10
80004272:	50 6b       	stdsp	sp[0x18],r11
80004274:	e0 40 00 46 	cp.w	r0,70
80004278:	5f 09       	sreq	r9
8000427a:	e0 40 00 66 	cp.w	r0,102
8000427e:	5f 08       	sreq	r8
80004280:	f3 e8 10 08 	or	r8,r9,r8
80004284:	50 48       	stdsp	sp[0x10],r8
80004286:	c0 40       	breq	8000428e <_vfprintf_r+0x952>
80004288:	40 22       	lddsp	r2,sp[0x8]
8000428a:	30 39       	mov	r9,3
8000428c:	c1 08       	rjmp	800042ac <_vfprintf_r+0x970>
8000428e:	e0 40 00 45 	cp.w	r0,69
80004292:	5f 09       	sreq	r9
80004294:	e0 40 00 65 	cp.w	r0,101
80004298:	5f 08       	sreq	r8
8000429a:	40 22       	lddsp	r2,sp[0x8]
8000429c:	10 49       	or	r9,r8
8000429e:	2f f2       	sub	r2,-1
800042a0:	40 46       	lddsp	r6,sp[0x10]
800042a2:	ec 09 18 00 	cp.b	r9,r6
800042a6:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800042aa:	30 29       	mov	r9,2
800042ac:	fa c8 f9 5c 	sub	r8,sp,-1700
800042b0:	1a d8       	st.w	--sp,r8
800042b2:	fa c8 f9 54 	sub	r8,sp,-1708
800042b6:	1a d8       	st.w	--sp,r8
800042b8:	fa c8 f9 4c 	sub	r8,sp,-1716
800042bc:	08 9c       	mov	r12,r4
800042be:	1a d8       	st.w	--sp,r8
800042c0:	04 98       	mov	r8,r2
800042c2:	40 9b       	lddsp	r11,sp[0x24]
800042c4:	40 aa       	lddsp	r10,sp[0x28]
800042c6:	e0 a0 0b c3 	rcall	80005a4c <_dtoa_r>
800042ca:	e0 40 00 47 	cp.w	r0,71
800042ce:	5f 19       	srne	r9
800042d0:	e0 40 00 67 	cp.w	r0,103
800042d4:	5f 18       	srne	r8
800042d6:	18 96       	mov	r6,r12
800042d8:	2f dd       	sub	sp,-12
800042da:	f3 e8 00 08 	and	r8,r9,r8
800042de:	c0 41       	brne	800042e6 <_vfprintf_r+0x9aa>
800042e0:	ed b5 00 00 	bld	r5,0x0
800042e4:	c3 01       	brne	80004344 <_vfprintf_r+0xa08>
800042e6:	ec 02 00 0e 	add	lr,r6,r2
800042ea:	50 3e       	stdsp	sp[0xc],lr
800042ec:	40 4c       	lddsp	r12,sp[0x10]
800042ee:	58 0c       	cp.w	r12,0
800042f0:	c1 50       	breq	8000431a <_vfprintf_r+0x9de>
800042f2:	0d 89       	ld.ub	r9,r6[0x0]
800042f4:	33 08       	mov	r8,48
800042f6:	f0 09 18 00 	cp.b	r9,r8
800042fa:	c0 b1       	brne	80004310 <_vfprintf_r+0x9d4>
800042fc:	30 08       	mov	r8,0
800042fe:	30 09       	mov	r9,0
80004300:	40 6b       	lddsp	r11,sp[0x18]
80004302:	40 7a       	lddsp	r10,sp[0x1c]
80004304:	e0 a0 20 ef 	rcall	800084e2 <__avr32_f64_cmp_eq>
80004308:	fb b2 00 01 	rsubeq	r2,1
8000430c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004310:	40 3b       	lddsp	r11,sp[0xc]
80004312:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004316:	10 0b       	add	r11,r8
80004318:	50 3b       	stdsp	sp[0xc],r11
8000431a:	40 6b       	lddsp	r11,sp[0x18]
8000431c:	30 08       	mov	r8,0
8000431e:	30 09       	mov	r9,0
80004320:	40 7a       	lddsp	r10,sp[0x1c]
80004322:	e0 a0 20 e0 	rcall	800084e2 <__avr32_f64_cmp_eq>
80004326:	c0 90       	breq	80004338 <_vfprintf_r+0x9fc>
80004328:	40 3a       	lddsp	r10,sp[0xc]
8000432a:	fb 4a 06 a4 	st.w	sp[1700],r10
8000432e:	c0 58       	rjmp	80004338 <_vfprintf_r+0x9fc>
80004330:	10 c9       	st.b	r8++,r9
80004332:	fb 48 06 a4 	st.w	sp[1700],r8
80004336:	c0 28       	rjmp	8000433a <_vfprintf_r+0x9fe>
80004338:	33 09       	mov	r9,48
8000433a:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000433e:	40 3e       	lddsp	lr,sp[0xc]
80004340:	1c 38       	cp.w	r8,lr
80004342:	cf 73       	brcs	80004330 <_vfprintf_r+0x9f4>
80004344:	e0 40 00 47 	cp.w	r0,71
80004348:	5f 09       	sreq	r9
8000434a:	e0 40 00 67 	cp.w	r0,103
8000434e:	5f 08       	sreq	r8
80004350:	f3 e8 10 08 	or	r8,r9,r8
80004354:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004358:	0c 19       	sub	r9,r6
8000435a:	50 69       	stdsp	sp[0x18],r9
8000435c:	58 08       	cp.w	r8,0
8000435e:	c0 b0       	breq	80004374 <_vfprintf_r+0xa38>
80004360:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004364:	5b d8       	cp.w	r8,-3
80004366:	c0 55       	brlt	80004370 <_vfprintf_r+0xa34>
80004368:	40 2c       	lddsp	r12,sp[0x8]
8000436a:	18 38       	cp.w	r8,r12
8000436c:	e0 8a 00 6a 	brle	80004440 <_vfprintf_r+0xb04>
80004370:	20 20       	sub	r0,2
80004372:	c0 58       	rjmp	8000437c <_vfprintf_r+0xa40>
80004374:	e0 40 00 65 	cp.w	r0,101
80004378:	e0 89 00 46 	brgt	80004404 <_vfprintf_r+0xac8>
8000437c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004380:	fb 60 06 9c 	st.b	sp[1692],r0
80004384:	20 1b       	sub	r11,1
80004386:	fb 4b 06 ac 	st.w	sp[1708],r11
8000438a:	c0 47       	brpl	80004392 <_vfprintf_r+0xa56>
8000438c:	5c 3b       	neg	r11
8000438e:	32 d8       	mov	r8,45
80004390:	c0 28       	rjmp	80004394 <_vfprintf_r+0xa58>
80004392:	32 b8       	mov	r8,43
80004394:	fb 68 06 9d 	st.b	sp[1693],r8
80004398:	58 9b       	cp.w	r11,9
8000439a:	e0 8a 00 1d 	brle	800043d4 <_vfprintf_r+0xa98>
8000439e:	fa c9 fa 35 	sub	r9,sp,-1483
800043a2:	30 aa       	mov	r10,10
800043a4:	12 98       	mov	r8,r9
800043a6:	0e 9c       	mov	r12,r7
800043a8:	0c 92       	mov	r2,r6
800043aa:	f6 0a 0c 06 	divs	r6,r11,r10
800043ae:	0e 9b       	mov	r11,r7
800043b0:	2d 0b       	sub	r11,-48
800043b2:	10 fb       	st.b	--r8,r11
800043b4:	0c 9b       	mov	r11,r6
800043b6:	58 96       	cp.w	r6,9
800043b8:	fe 99 ff f9 	brgt	800043aa <_vfprintf_r+0xa6e>
800043bc:	2d 0b       	sub	r11,-48
800043be:	18 97       	mov	r7,r12
800043c0:	04 96       	mov	r6,r2
800043c2:	10 fb       	st.b	--r8,r11
800043c4:	fa ca f9 62 	sub	r10,sp,-1694
800043c8:	c0 38       	rjmp	800043ce <_vfprintf_r+0xa92>
800043ca:	11 3b       	ld.ub	r11,r8++
800043cc:	14 cb       	st.b	r10++,r11
800043ce:	12 38       	cp.w	r8,r9
800043d0:	cf d3       	brcs	800043ca <_vfprintf_r+0xa8e>
800043d2:	c0 98       	rjmp	800043e4 <_vfprintf_r+0xaa8>
800043d4:	2d 0b       	sub	r11,-48
800043d6:	33 08       	mov	r8,48
800043d8:	fb 6b 06 9f 	st.b	sp[1695],r11
800043dc:	fb 68 06 9e 	st.b	sp[1694],r8
800043e0:	fa ca f9 60 	sub	r10,sp,-1696
800043e4:	fa c8 f9 64 	sub	r8,sp,-1692
800043e8:	f4 08 01 08 	sub	r8,r10,r8
800043ec:	50 e8       	stdsp	sp[0x38],r8
800043ee:	10 92       	mov	r2,r8
800043f0:	40 6b       	lddsp	r11,sp[0x18]
800043f2:	16 02       	add	r2,r11
800043f4:	58 1b       	cp.w	r11,1
800043f6:	e0 89 00 05 	brgt	80004400 <_vfprintf_r+0xac4>
800043fa:	ed b5 00 00 	bld	r5,0x0
800043fe:	c3 51       	brne	80004468 <_vfprintf_r+0xb2c>
80004400:	2f f2       	sub	r2,-1
80004402:	c3 38       	rjmp	80004468 <_vfprintf_r+0xb2c>
80004404:	e0 40 00 66 	cp.w	r0,102
80004408:	c1 c1       	brne	80004440 <_vfprintf_r+0xb04>
8000440a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000440e:	58 02       	cp.w	r2,0
80004410:	e0 8a 00 0c 	brle	80004428 <_vfprintf_r+0xaec>
80004414:	40 2a       	lddsp	r10,sp[0x8]
80004416:	58 0a       	cp.w	r10,0
80004418:	c0 41       	brne	80004420 <_vfprintf_r+0xae4>
8000441a:	ed b5 00 00 	bld	r5,0x0
8000441e:	c2 51       	brne	80004468 <_vfprintf_r+0xb2c>
80004420:	2f f2       	sub	r2,-1
80004422:	40 29       	lddsp	r9,sp[0x8]
80004424:	12 02       	add	r2,r9
80004426:	c0 b8       	rjmp	8000443c <_vfprintf_r+0xb00>
80004428:	40 28       	lddsp	r8,sp[0x8]
8000442a:	58 08       	cp.w	r8,0
8000442c:	c0 61       	brne	80004438 <_vfprintf_r+0xafc>
8000442e:	ed b5 00 00 	bld	r5,0x0
80004432:	c0 30       	breq	80004438 <_vfprintf_r+0xafc>
80004434:	30 12       	mov	r2,1
80004436:	c1 98       	rjmp	80004468 <_vfprintf_r+0xb2c>
80004438:	40 22       	lddsp	r2,sp[0x8]
8000443a:	2f e2       	sub	r2,-2
8000443c:	36 60       	mov	r0,102
8000443e:	c1 58       	rjmp	80004468 <_vfprintf_r+0xb2c>
80004440:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004444:	40 6e       	lddsp	lr,sp[0x18]
80004446:	1c 32       	cp.w	r2,lr
80004448:	c0 65       	brlt	80004454 <_vfprintf_r+0xb18>
8000444a:	ed b5 00 00 	bld	r5,0x0
8000444e:	f7 b2 00 ff 	subeq	r2,-1
80004452:	c0 a8       	rjmp	80004466 <_vfprintf_r+0xb2a>
80004454:	e4 08 11 02 	rsub	r8,r2,2
80004458:	40 6c       	lddsp	r12,sp[0x18]
8000445a:	58 02       	cp.w	r2,0
8000445c:	f0 02 17 a0 	movle	r2,r8
80004460:	f9 b2 09 01 	movgt	r2,1
80004464:	18 02       	add	r2,r12
80004466:	36 70       	mov	r0,103
80004468:	40 9b       	lddsp	r11,sp[0x24]
8000446a:	58 0b       	cp.w	r11,0
8000446c:	e0 80 05 94 	breq	80004f94 <_vfprintf_r+0x1658>
80004470:	32 d8       	mov	r8,45
80004472:	fb 68 06 bb 	st.b	sp[1723],r8
80004476:	e0 8f 05 93 	bral	80004f9c <_vfprintf_r+0x1660>
8000447a:	50 a7       	stdsp	sp[0x28],r7
8000447c:	04 94       	mov	r4,r2
8000447e:	0c 97       	mov	r7,r6
80004480:	02 92       	mov	r2,r1
80004482:	06 96       	mov	r6,r3
80004484:	40 41       	lddsp	r1,sp[0x10]
80004486:	40 93       	lddsp	r3,sp[0x24]
80004488:	0e 99       	mov	r9,r7
8000448a:	ed b5 00 05 	bld	r5,0x5
8000448e:	c4 81       	brne	8000451e <_vfprintf_r+0xbe2>
80004490:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004494:	40 3e       	lddsp	lr,sp[0xc]
80004496:	58 0e       	cp.w	lr,0
80004498:	c1 d0       	breq	800044d2 <_vfprintf_r+0xb96>
8000449a:	10 36       	cp.w	r6,r8
8000449c:	c0 64       	brge	800044a8 <_vfprintf_r+0xb6c>
8000449e:	fa cc f9 44 	sub	r12,sp,-1724
800044a2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800044a6:	c1 d8       	rjmp	800044e0 <_vfprintf_r+0xba4>
800044a8:	fa c8 f9 50 	sub	r8,sp,-1712
800044ac:	1a d8       	st.w	--sp,r8
800044ae:	fa c8 fa b8 	sub	r8,sp,-1352
800044b2:	04 9a       	mov	r10,r2
800044b4:	1a d8       	st.w	--sp,r8
800044b6:	fa c8 fb b4 	sub	r8,sp,-1100
800044ba:	0c 9b       	mov	r11,r6
800044bc:	1a d8       	st.w	--sp,r8
800044be:	08 9c       	mov	r12,r4
800044c0:	fa c8 f9 40 	sub	r8,sp,-1728
800044c4:	fa c9 ff b4 	sub	r9,sp,-76
800044c8:	fe b0 f8 a2 	rcall	8000360c <get_arg>
800044cc:	2f dd       	sub	sp,-12
800044ce:	78 0a       	ld.w	r10,r12[0x0]
800044d0:	c2 08       	rjmp	80004510 <_vfprintf_r+0xbd4>
800044d2:	2f f7       	sub	r7,-1
800044d4:	10 39       	cp.w	r9,r8
800044d6:	c0 84       	brge	800044e6 <_vfprintf_r+0xbaa>
800044d8:	fa cb f9 44 	sub	r11,sp,-1724
800044dc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044e0:	ec fa fd 88 	ld.w	r10,r6[-632]
800044e4:	c1 68       	rjmp	80004510 <_vfprintf_r+0xbd4>
800044e6:	41 09       	lddsp	r9,sp[0x40]
800044e8:	59 f8       	cp.w	r8,31
800044ea:	e0 89 00 10 	brgt	8000450a <_vfprintf_r+0xbce>
800044ee:	f2 ca ff fc 	sub	r10,r9,-4
800044f2:	51 0a       	stdsp	sp[0x40],r10
800044f4:	fa c6 f9 44 	sub	r6,sp,-1724
800044f8:	72 0a       	ld.w	r10,r9[0x0]
800044fa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800044fe:	f3 4a fd 88 	st.w	r9[-632],r10
80004502:	2f f8       	sub	r8,-1
80004504:	fb 48 06 b4 	st.w	sp[1716],r8
80004508:	c0 48       	rjmp	80004510 <_vfprintf_r+0xbd4>
8000450a:	72 0a       	ld.w	r10,r9[0x0]
8000450c:	2f c9       	sub	r9,-4
8000450e:	51 09       	stdsp	sp[0x40],r9
80004510:	40 be       	lddsp	lr,sp[0x2c]
80004512:	1c 98       	mov	r8,lr
80004514:	95 1e       	st.w	r10[0x4],lr
80004516:	bf 58       	asr	r8,0x1f
80004518:	95 08       	st.w	r10[0x0],r8
8000451a:	fe 9f fa 9f 	bral	80003a58 <_vfprintf_r+0x11c>
8000451e:	ed b5 00 04 	bld	r5,0x4
80004522:	c4 80       	breq	800045b2 <_vfprintf_r+0xc76>
80004524:	e2 15 00 40 	andl	r5,0x40,COH
80004528:	c4 50       	breq	800045b2 <_vfprintf_r+0xc76>
8000452a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000452e:	40 3c       	lddsp	r12,sp[0xc]
80004530:	58 0c       	cp.w	r12,0
80004532:	c1 d0       	breq	8000456c <_vfprintf_r+0xc30>
80004534:	10 36       	cp.w	r6,r8
80004536:	c0 64       	brge	80004542 <_vfprintf_r+0xc06>
80004538:	fa cb f9 44 	sub	r11,sp,-1724
8000453c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004540:	c1 d8       	rjmp	8000457a <_vfprintf_r+0xc3e>
80004542:	fa c8 f9 50 	sub	r8,sp,-1712
80004546:	1a d8       	st.w	--sp,r8
80004548:	fa c8 fa b8 	sub	r8,sp,-1352
8000454c:	04 9a       	mov	r10,r2
8000454e:	1a d8       	st.w	--sp,r8
80004550:	fa c8 fb b4 	sub	r8,sp,-1100
80004554:	0c 9b       	mov	r11,r6
80004556:	1a d8       	st.w	--sp,r8
80004558:	08 9c       	mov	r12,r4
8000455a:	fa c8 f9 40 	sub	r8,sp,-1728
8000455e:	fa c9 ff b4 	sub	r9,sp,-76
80004562:	fe b0 f8 55 	rcall	8000360c <get_arg>
80004566:	2f dd       	sub	sp,-12
80004568:	78 0a       	ld.w	r10,r12[0x0]
8000456a:	c2 08       	rjmp	800045aa <_vfprintf_r+0xc6e>
8000456c:	2f f7       	sub	r7,-1
8000456e:	10 39       	cp.w	r9,r8
80004570:	c0 84       	brge	80004580 <_vfprintf_r+0xc44>
80004572:	fa ca f9 44 	sub	r10,sp,-1724
80004576:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000457a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000457e:	c1 68       	rjmp	800045aa <_vfprintf_r+0xc6e>
80004580:	41 09       	lddsp	r9,sp[0x40]
80004582:	59 f8       	cp.w	r8,31
80004584:	e0 89 00 10 	brgt	800045a4 <_vfprintf_r+0xc68>
80004588:	f2 ca ff fc 	sub	r10,r9,-4
8000458c:	51 0a       	stdsp	sp[0x40],r10
8000458e:	fa c6 f9 44 	sub	r6,sp,-1724
80004592:	72 0a       	ld.w	r10,r9[0x0]
80004594:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004598:	f3 4a fd 88 	st.w	r9[-632],r10
8000459c:	2f f8       	sub	r8,-1
8000459e:	fb 48 06 b4 	st.w	sp[1716],r8
800045a2:	c0 48       	rjmp	800045aa <_vfprintf_r+0xc6e>
800045a4:	72 0a       	ld.w	r10,r9[0x0]
800045a6:	2f c9       	sub	r9,-4
800045a8:	51 09       	stdsp	sp[0x40],r9
800045aa:	40 be       	lddsp	lr,sp[0x2c]
800045ac:	b4 0e       	st.h	r10[0x0],lr
800045ae:	fe 9f fa 55 	bral	80003a58 <_vfprintf_r+0x11c>
800045b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045b6:	40 3c       	lddsp	r12,sp[0xc]
800045b8:	58 0c       	cp.w	r12,0
800045ba:	c1 d0       	breq	800045f4 <_vfprintf_r+0xcb8>
800045bc:	10 36       	cp.w	r6,r8
800045be:	c0 64       	brge	800045ca <_vfprintf_r+0xc8e>
800045c0:	fa cb f9 44 	sub	r11,sp,-1724
800045c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045c8:	c1 d8       	rjmp	80004602 <_vfprintf_r+0xcc6>
800045ca:	fa c8 f9 50 	sub	r8,sp,-1712
800045ce:	1a d8       	st.w	--sp,r8
800045d0:	fa c8 fa b8 	sub	r8,sp,-1352
800045d4:	04 9a       	mov	r10,r2
800045d6:	1a d8       	st.w	--sp,r8
800045d8:	fa c8 fb b4 	sub	r8,sp,-1100
800045dc:	0c 9b       	mov	r11,r6
800045de:	1a d8       	st.w	--sp,r8
800045e0:	08 9c       	mov	r12,r4
800045e2:	fa c8 f9 40 	sub	r8,sp,-1728
800045e6:	fa c9 ff b4 	sub	r9,sp,-76
800045ea:	fe b0 f8 11 	rcall	8000360c <get_arg>
800045ee:	2f dd       	sub	sp,-12
800045f0:	78 0a       	ld.w	r10,r12[0x0]
800045f2:	c2 08       	rjmp	80004632 <_vfprintf_r+0xcf6>
800045f4:	2f f7       	sub	r7,-1
800045f6:	10 39       	cp.w	r9,r8
800045f8:	c0 84       	brge	80004608 <_vfprintf_r+0xccc>
800045fa:	fa ca f9 44 	sub	r10,sp,-1724
800045fe:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004602:	ec fa fd 88 	ld.w	r10,r6[-632]
80004606:	c1 68       	rjmp	80004632 <_vfprintf_r+0xcf6>
80004608:	41 09       	lddsp	r9,sp[0x40]
8000460a:	59 f8       	cp.w	r8,31
8000460c:	e0 89 00 10 	brgt	8000462c <_vfprintf_r+0xcf0>
80004610:	f2 ca ff fc 	sub	r10,r9,-4
80004614:	51 0a       	stdsp	sp[0x40],r10
80004616:	fa c6 f9 44 	sub	r6,sp,-1724
8000461a:	72 0a       	ld.w	r10,r9[0x0]
8000461c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004620:	f3 4a fd 88 	st.w	r9[-632],r10
80004624:	2f f8       	sub	r8,-1
80004626:	fb 48 06 b4 	st.w	sp[1716],r8
8000462a:	c0 48       	rjmp	80004632 <_vfprintf_r+0xcf6>
8000462c:	72 0a       	ld.w	r10,r9[0x0]
8000462e:	2f c9       	sub	r9,-4
80004630:	51 09       	stdsp	sp[0x40],r9
80004632:	40 be       	lddsp	lr,sp[0x2c]
80004634:	95 0e       	st.w	r10[0x0],lr
80004636:	fe 9f fa 11 	bral	80003a58 <_vfprintf_r+0x11c>
8000463a:	50 a7       	stdsp	sp[0x28],r7
8000463c:	50 80       	stdsp	sp[0x20],r0
8000463e:	0c 97       	mov	r7,r6
80004640:	04 94       	mov	r4,r2
80004642:	06 96       	mov	r6,r3
80004644:	02 92       	mov	r2,r1
80004646:	40 93       	lddsp	r3,sp[0x24]
80004648:	10 90       	mov	r0,r8
8000464a:	40 41       	lddsp	r1,sp[0x10]
8000464c:	a5 a5       	sbr	r5,0x4
8000464e:	c0 a8       	rjmp	80004662 <_vfprintf_r+0xd26>
80004650:	50 a7       	stdsp	sp[0x28],r7
80004652:	50 80       	stdsp	sp[0x20],r0
80004654:	0c 97       	mov	r7,r6
80004656:	04 94       	mov	r4,r2
80004658:	06 96       	mov	r6,r3
8000465a:	02 92       	mov	r2,r1
8000465c:	40 93       	lddsp	r3,sp[0x24]
8000465e:	10 90       	mov	r0,r8
80004660:	40 41       	lddsp	r1,sp[0x10]
80004662:	ed b5 00 05 	bld	r5,0x5
80004666:	c5 d1       	brne	80004720 <_vfprintf_r+0xde4>
80004668:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000466c:	40 3c       	lddsp	r12,sp[0xc]
8000466e:	58 0c       	cp.w	r12,0
80004670:	c2 60       	breq	800046bc <_vfprintf_r+0xd80>
80004672:	10 36       	cp.w	r6,r8
80004674:	c0 a4       	brge	80004688 <_vfprintf_r+0xd4c>
80004676:	fa cb f9 44 	sub	r11,sp,-1724
8000467a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000467e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004682:	fa e9 00 00 	st.d	sp[0],r8
80004686:	c1 88       	rjmp	800046b6 <_vfprintf_r+0xd7a>
80004688:	fa c8 f9 50 	sub	r8,sp,-1712
8000468c:	1a d8       	st.w	--sp,r8
8000468e:	fa c8 fa b8 	sub	r8,sp,-1352
80004692:	04 9a       	mov	r10,r2
80004694:	1a d8       	st.w	--sp,r8
80004696:	0c 9b       	mov	r11,r6
80004698:	fa c8 fb b4 	sub	r8,sp,-1100
8000469c:	08 9c       	mov	r12,r4
8000469e:	1a d8       	st.w	--sp,r8
800046a0:	fa c8 f9 40 	sub	r8,sp,-1728
800046a4:	fa c9 ff b4 	sub	r9,sp,-76
800046a8:	fe b0 f7 b2 	rcall	8000360c <get_arg>
800046ac:	2f dd       	sub	sp,-12
800046ae:	f8 ea 00 00 	ld.d	r10,r12[0]
800046b2:	fa eb 00 00 	st.d	sp[0],r10
800046b6:	30 08       	mov	r8,0
800046b8:	e0 8f 03 de 	bral	80004e74 <_vfprintf_r+0x1538>
800046bc:	ee ca ff ff 	sub	r10,r7,-1
800046c0:	10 37       	cp.w	r7,r8
800046c2:	c0 b4       	brge	800046d8 <_vfprintf_r+0xd9c>
800046c4:	fa c9 f9 44 	sub	r9,sp,-1724
800046c8:	14 97       	mov	r7,r10
800046ca:	f2 06 00 36 	add	r6,r9,r6<<0x3
800046ce:	ec ea fd 88 	ld.d	r10,r6[-632]
800046d2:	fa eb 00 00 	st.d	sp[0],r10
800046d6:	c1 88       	rjmp	80004706 <_vfprintf_r+0xdca>
800046d8:	41 09       	lddsp	r9,sp[0x40]
800046da:	59 f8       	cp.w	r8,31
800046dc:	e0 89 00 18 	brgt	8000470c <_vfprintf_r+0xdd0>
800046e0:	f2 e6 00 00 	ld.d	r6,r9[0]
800046e4:	f2 cb ff f8 	sub	r11,r9,-8
800046e8:	fa e7 00 00 	st.d	sp[0],r6
800046ec:	51 0b       	stdsp	sp[0x40],r11
800046ee:	fa c6 f9 44 	sub	r6,sp,-1724
800046f2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800046f6:	fa e6 00 00 	ld.d	r6,sp[0]
800046fa:	f2 e7 fd 88 	st.d	r9[-632],r6
800046fe:	2f f8       	sub	r8,-1
80004700:	14 97       	mov	r7,r10
80004702:	fb 48 06 b4 	st.w	sp[1716],r8
80004706:	40 38       	lddsp	r8,sp[0xc]
80004708:	e0 8f 03 b6 	bral	80004e74 <_vfprintf_r+0x1538>
8000470c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004710:	40 38       	lddsp	r8,sp[0xc]
80004712:	fa e7 00 00 	st.d	sp[0],r6
80004716:	2f 89       	sub	r9,-8
80004718:	14 97       	mov	r7,r10
8000471a:	51 09       	stdsp	sp[0x40],r9
8000471c:	e0 8f 03 ac 	bral	80004e74 <_vfprintf_r+0x1538>
80004720:	ed b5 00 04 	bld	r5,0x4
80004724:	c1 61       	brne	80004750 <_vfprintf_r+0xe14>
80004726:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000472a:	40 3e       	lddsp	lr,sp[0xc]
8000472c:	58 0e       	cp.w	lr,0
8000472e:	c0 80       	breq	8000473e <_vfprintf_r+0xe02>
80004730:	10 36       	cp.w	r6,r8
80004732:	c6 74       	brge	80004800 <_vfprintf_r+0xec4>
80004734:	fa cc f9 44 	sub	r12,sp,-1724
80004738:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000473c:	c8 08       	rjmp	8000483c <_vfprintf_r+0xf00>
8000473e:	ee ca ff ff 	sub	r10,r7,-1
80004742:	10 37       	cp.w	r7,r8
80004744:	c7 f4       	brge	80004842 <_vfprintf_r+0xf06>
80004746:	fa cb f9 44 	sub	r11,sp,-1724
8000474a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000474e:	c7 68       	rjmp	8000483a <_vfprintf_r+0xefe>
80004750:	ed b5 00 06 	bld	r5,0x6
80004754:	c4 a1       	brne	800047e8 <_vfprintf_r+0xeac>
80004756:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000475a:	40 3c       	lddsp	r12,sp[0xc]
8000475c:	58 0c       	cp.w	r12,0
8000475e:	c1 d0       	breq	80004798 <_vfprintf_r+0xe5c>
80004760:	10 36       	cp.w	r6,r8
80004762:	c0 64       	brge	8000476e <_vfprintf_r+0xe32>
80004764:	fa cb f9 44 	sub	r11,sp,-1724
80004768:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000476c:	c1 f8       	rjmp	800047aa <_vfprintf_r+0xe6e>
8000476e:	fa c8 f9 50 	sub	r8,sp,-1712
80004772:	1a d8       	st.w	--sp,r8
80004774:	fa c8 fa b8 	sub	r8,sp,-1352
80004778:	1a d8       	st.w	--sp,r8
8000477a:	fa c8 fb b4 	sub	r8,sp,-1100
8000477e:	1a d8       	st.w	--sp,r8
80004780:	fa c8 f9 40 	sub	r8,sp,-1728
80004784:	fa c9 ff b4 	sub	r9,sp,-76
80004788:	04 9a       	mov	r10,r2
8000478a:	0c 9b       	mov	r11,r6
8000478c:	08 9c       	mov	r12,r4
8000478e:	fe b0 f7 3f 	rcall	8000360c <get_arg>
80004792:	2f dd       	sub	sp,-12
80004794:	98 18       	ld.sh	r8,r12[0x2]
80004796:	c2 68       	rjmp	800047e2 <_vfprintf_r+0xea6>
80004798:	ee ca ff ff 	sub	r10,r7,-1
8000479c:	10 37       	cp.w	r7,r8
8000479e:	c0 94       	brge	800047b0 <_vfprintf_r+0xe74>
800047a0:	fa c9 f9 44 	sub	r9,sp,-1724
800047a4:	14 97       	mov	r7,r10
800047a6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047aa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800047ae:	c1 a8       	rjmp	800047e2 <_vfprintf_r+0xea6>
800047b0:	41 09       	lddsp	r9,sp[0x40]
800047b2:	59 f8       	cp.w	r8,31
800047b4:	e0 89 00 13 	brgt	800047da <_vfprintf_r+0xe9e>
800047b8:	f2 cb ff fc 	sub	r11,r9,-4
800047bc:	51 0b       	stdsp	sp[0x40],r11
800047be:	72 09       	ld.w	r9,r9[0x0]
800047c0:	fa c6 f9 44 	sub	r6,sp,-1724
800047c4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800047c8:	2f f8       	sub	r8,-1
800047ca:	f7 49 fd 88 	st.w	r11[-632],r9
800047ce:	fb 48 06 b4 	st.w	sp[1716],r8
800047d2:	14 97       	mov	r7,r10
800047d4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800047d8:	c0 58       	rjmp	800047e2 <_vfprintf_r+0xea6>
800047da:	92 18       	ld.sh	r8,r9[0x2]
800047dc:	14 97       	mov	r7,r10
800047de:	2f c9       	sub	r9,-4
800047e0:	51 09       	stdsp	sp[0x40],r9
800047e2:	5c 78       	castu.h	r8
800047e4:	50 18       	stdsp	sp[0x4],r8
800047e6:	c4 68       	rjmp	80004872 <_vfprintf_r+0xf36>
800047e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047ec:	40 3c       	lddsp	r12,sp[0xc]
800047ee:	58 0c       	cp.w	r12,0
800047f0:	c1 d0       	breq	8000482a <_vfprintf_r+0xeee>
800047f2:	10 36       	cp.w	r6,r8
800047f4:	c0 64       	brge	80004800 <_vfprintf_r+0xec4>
800047f6:	fa cb f9 44 	sub	r11,sp,-1724
800047fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047fe:	c1 f8       	rjmp	8000483c <_vfprintf_r+0xf00>
80004800:	fa c8 f9 50 	sub	r8,sp,-1712
80004804:	1a d8       	st.w	--sp,r8
80004806:	fa c8 fa b8 	sub	r8,sp,-1352
8000480a:	0c 9b       	mov	r11,r6
8000480c:	1a d8       	st.w	--sp,r8
8000480e:	fa c8 fb b4 	sub	r8,sp,-1100
80004812:	04 9a       	mov	r10,r2
80004814:	1a d8       	st.w	--sp,r8
80004816:	08 9c       	mov	r12,r4
80004818:	fa c8 f9 40 	sub	r8,sp,-1728
8000481c:	fa c9 ff b4 	sub	r9,sp,-76
80004820:	fe b0 f6 f6 	rcall	8000360c <get_arg>
80004824:	2f dd       	sub	sp,-12
80004826:	78 0b       	ld.w	r11,r12[0x0]
80004828:	c2 48       	rjmp	80004870 <_vfprintf_r+0xf34>
8000482a:	ee ca ff ff 	sub	r10,r7,-1
8000482e:	10 37       	cp.w	r7,r8
80004830:	c0 94       	brge	80004842 <_vfprintf_r+0xf06>
80004832:	fa c9 f9 44 	sub	r9,sp,-1724
80004836:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000483a:	14 97       	mov	r7,r10
8000483c:	ec fb fd 88 	ld.w	r11,r6[-632]
80004840:	c1 88       	rjmp	80004870 <_vfprintf_r+0xf34>
80004842:	41 09       	lddsp	r9,sp[0x40]
80004844:	59 f8       	cp.w	r8,31
80004846:	e0 89 00 11 	brgt	80004868 <_vfprintf_r+0xf2c>
8000484a:	f2 cb ff fc 	sub	r11,r9,-4
8000484e:	51 0b       	stdsp	sp[0x40],r11
80004850:	fa c6 f9 44 	sub	r6,sp,-1724
80004854:	72 0b       	ld.w	r11,r9[0x0]
80004856:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000485a:	f3 4b fd 88 	st.w	r9[-632],r11
8000485e:	2f f8       	sub	r8,-1
80004860:	14 97       	mov	r7,r10
80004862:	fb 48 06 b4 	st.w	sp[1716],r8
80004866:	c0 58       	rjmp	80004870 <_vfprintf_r+0xf34>
80004868:	72 0b       	ld.w	r11,r9[0x0]
8000486a:	14 97       	mov	r7,r10
8000486c:	2f c9       	sub	r9,-4
8000486e:	51 09       	stdsp	sp[0x40],r9
80004870:	50 1b       	stdsp	sp[0x4],r11
80004872:	30 0e       	mov	lr,0
80004874:	50 0e       	stdsp	sp[0x0],lr
80004876:	1c 98       	mov	r8,lr
80004878:	e0 8f 02 fe 	bral	80004e74 <_vfprintf_r+0x1538>
8000487c:	50 a7       	stdsp	sp[0x28],r7
8000487e:	50 80       	stdsp	sp[0x20],r0
80004880:	0c 97       	mov	r7,r6
80004882:	04 94       	mov	r4,r2
80004884:	06 96       	mov	r6,r3
80004886:	02 92       	mov	r2,r1
80004888:	40 93       	lddsp	r3,sp[0x24]
8000488a:	40 41       	lddsp	r1,sp[0x10]
8000488c:	0e 99       	mov	r9,r7
8000488e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004892:	40 3c       	lddsp	r12,sp[0xc]
80004894:	58 0c       	cp.w	r12,0
80004896:	c1 d0       	breq	800048d0 <_vfprintf_r+0xf94>
80004898:	10 36       	cp.w	r6,r8
8000489a:	c0 64       	brge	800048a6 <_vfprintf_r+0xf6a>
8000489c:	fa cb f9 44 	sub	r11,sp,-1724
800048a0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048a4:	c1 d8       	rjmp	800048de <_vfprintf_r+0xfa2>
800048a6:	fa c8 f9 50 	sub	r8,sp,-1712
800048aa:	1a d8       	st.w	--sp,r8
800048ac:	fa c8 fa b8 	sub	r8,sp,-1352
800048b0:	1a d8       	st.w	--sp,r8
800048b2:	fa c8 fb b4 	sub	r8,sp,-1100
800048b6:	1a d8       	st.w	--sp,r8
800048b8:	fa c9 ff b4 	sub	r9,sp,-76
800048bc:	fa c8 f9 40 	sub	r8,sp,-1728
800048c0:	04 9a       	mov	r10,r2
800048c2:	0c 9b       	mov	r11,r6
800048c4:	08 9c       	mov	r12,r4
800048c6:	fe b0 f6 a3 	rcall	8000360c <get_arg>
800048ca:	2f dd       	sub	sp,-12
800048cc:	78 09       	ld.w	r9,r12[0x0]
800048ce:	c2 18       	rjmp	80004910 <_vfprintf_r+0xfd4>
800048d0:	2f f7       	sub	r7,-1
800048d2:	10 39       	cp.w	r9,r8
800048d4:	c0 84       	brge	800048e4 <_vfprintf_r+0xfa8>
800048d6:	fa ca f9 44 	sub	r10,sp,-1724
800048da:	f4 06 00 36 	add	r6,r10,r6<<0x3
800048de:	ec f9 fd 88 	ld.w	r9,r6[-632]
800048e2:	c1 78       	rjmp	80004910 <_vfprintf_r+0xfd4>
800048e4:	41 09       	lddsp	r9,sp[0x40]
800048e6:	59 f8       	cp.w	r8,31
800048e8:	e0 89 00 10 	brgt	80004908 <_vfprintf_r+0xfcc>
800048ec:	f2 ca ff fc 	sub	r10,r9,-4
800048f0:	51 0a       	stdsp	sp[0x40],r10
800048f2:	fa c6 f9 44 	sub	r6,sp,-1724
800048f6:	72 09       	ld.w	r9,r9[0x0]
800048f8:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800048fc:	f5 49 fd 88 	st.w	r10[-632],r9
80004900:	2f f8       	sub	r8,-1
80004902:	fb 48 06 b4 	st.w	sp[1716],r8
80004906:	c0 58       	rjmp	80004910 <_vfprintf_r+0xfd4>
80004908:	f2 c8 ff fc 	sub	r8,r9,-4
8000490c:	51 08       	stdsp	sp[0x40],r8
8000490e:	72 09       	ld.w	r9,r9[0x0]
80004910:	33 08       	mov	r8,48
80004912:	fb 68 06 b8 	st.b	sp[1720],r8
80004916:	37 88       	mov	r8,120
80004918:	30 0e       	mov	lr,0
8000491a:	fb 68 06 b9 	st.b	sp[1721],r8
8000491e:	fe cc 9b 2e 	sub	r12,pc,-25810
80004922:	50 19       	stdsp	sp[0x4],r9
80004924:	a1 b5       	sbr	r5,0x1
80004926:	50 0e       	stdsp	sp[0x0],lr
80004928:	50 dc       	stdsp	sp[0x34],r12
8000492a:	30 28       	mov	r8,2
8000492c:	37 80       	mov	r0,120
8000492e:	e0 8f 02 a3 	bral	80004e74 <_vfprintf_r+0x1538>
80004932:	50 a7       	stdsp	sp[0x28],r7
80004934:	50 80       	stdsp	sp[0x20],r0
80004936:	10 90       	mov	r0,r8
80004938:	30 08       	mov	r8,0
8000493a:	fb 68 06 bb 	st.b	sp[1723],r8
8000493e:	0c 97       	mov	r7,r6
80004940:	04 94       	mov	r4,r2
80004942:	06 96       	mov	r6,r3
80004944:	02 92       	mov	r2,r1
80004946:	40 93       	lddsp	r3,sp[0x24]
80004948:	40 41       	lddsp	r1,sp[0x10]
8000494a:	0e 99       	mov	r9,r7
8000494c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004950:	40 3b       	lddsp	r11,sp[0xc]
80004952:	58 0b       	cp.w	r11,0
80004954:	c1 d0       	breq	8000498e <_vfprintf_r+0x1052>
80004956:	10 36       	cp.w	r6,r8
80004958:	c0 64       	brge	80004964 <_vfprintf_r+0x1028>
8000495a:	fa ca f9 44 	sub	r10,sp,-1724
8000495e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004962:	c1 d8       	rjmp	8000499c <_vfprintf_r+0x1060>
80004964:	fa c8 f9 50 	sub	r8,sp,-1712
80004968:	1a d8       	st.w	--sp,r8
8000496a:	fa c8 fa b8 	sub	r8,sp,-1352
8000496e:	1a d8       	st.w	--sp,r8
80004970:	fa c8 fb b4 	sub	r8,sp,-1100
80004974:	0c 9b       	mov	r11,r6
80004976:	1a d8       	st.w	--sp,r8
80004978:	04 9a       	mov	r10,r2
8000497a:	fa c8 f9 40 	sub	r8,sp,-1728
8000497e:	fa c9 ff b4 	sub	r9,sp,-76
80004982:	08 9c       	mov	r12,r4
80004984:	fe b0 f6 44 	rcall	8000360c <get_arg>
80004988:	2f dd       	sub	sp,-12
8000498a:	78 06       	ld.w	r6,r12[0x0]
8000498c:	c2 08       	rjmp	800049cc <_vfprintf_r+0x1090>
8000498e:	2f f7       	sub	r7,-1
80004990:	10 39       	cp.w	r9,r8
80004992:	c0 84       	brge	800049a2 <_vfprintf_r+0x1066>
80004994:	fa c9 f9 44 	sub	r9,sp,-1724
80004998:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000499c:	ec f6 fd 88 	ld.w	r6,r6[-632]
800049a0:	c1 68       	rjmp	800049cc <_vfprintf_r+0x1090>
800049a2:	41 09       	lddsp	r9,sp[0x40]
800049a4:	59 f8       	cp.w	r8,31
800049a6:	e0 89 00 10 	brgt	800049c6 <_vfprintf_r+0x108a>
800049aa:	f2 ca ff fc 	sub	r10,r9,-4
800049ae:	51 0a       	stdsp	sp[0x40],r10
800049b0:	72 06       	ld.w	r6,r9[0x0]
800049b2:	fa ce f9 44 	sub	lr,sp,-1724
800049b6:	fc 08 00 39 	add	r9,lr,r8<<0x3
800049ba:	f3 46 fd 88 	st.w	r9[-632],r6
800049be:	2f f8       	sub	r8,-1
800049c0:	fb 48 06 b4 	st.w	sp[1716],r8
800049c4:	c0 48       	rjmp	800049cc <_vfprintf_r+0x1090>
800049c6:	72 06       	ld.w	r6,r9[0x0]
800049c8:	2f c9       	sub	r9,-4
800049ca:	51 09       	stdsp	sp[0x40],r9
800049cc:	40 2c       	lddsp	r12,sp[0x8]
800049ce:	58 0c       	cp.w	r12,0
800049d0:	c1 05       	brlt	800049f0 <_vfprintf_r+0x10b4>
800049d2:	18 9a       	mov	r10,r12
800049d4:	30 0b       	mov	r11,0
800049d6:	0c 9c       	mov	r12,r6
800049d8:	e0 a0 14 58 	rcall	80007288 <memchr>
800049dc:	e0 80 02 df 	breq	80004f9a <_vfprintf_r+0x165e>
800049e0:	f8 06 01 02 	sub	r2,r12,r6
800049e4:	40 2b       	lddsp	r11,sp[0x8]
800049e6:	16 32       	cp.w	r2,r11
800049e8:	e0 89 02 d9 	brgt	80004f9a <_vfprintf_r+0x165e>
800049ec:	e0 8f 02 d4 	bral	80004f94 <_vfprintf_r+0x1658>
800049f0:	30 0a       	mov	r10,0
800049f2:	0c 9c       	mov	r12,r6
800049f4:	50 2a       	stdsp	sp[0x8],r10
800049f6:	e0 a0 19 33 	rcall	80007c5c <strlen>
800049fa:	18 92       	mov	r2,r12
800049fc:	e0 8f 02 d2 	bral	80004fa0 <_vfprintf_r+0x1664>
80004a00:	50 a7       	stdsp	sp[0x28],r7
80004a02:	50 80       	stdsp	sp[0x20],r0
80004a04:	0c 97       	mov	r7,r6
80004a06:	04 94       	mov	r4,r2
80004a08:	06 96       	mov	r6,r3
80004a0a:	02 92       	mov	r2,r1
80004a0c:	40 93       	lddsp	r3,sp[0x24]
80004a0e:	10 90       	mov	r0,r8
80004a10:	40 41       	lddsp	r1,sp[0x10]
80004a12:	a5 a5       	sbr	r5,0x4
80004a14:	c0 a8       	rjmp	80004a28 <_vfprintf_r+0x10ec>
80004a16:	50 a7       	stdsp	sp[0x28],r7
80004a18:	50 80       	stdsp	sp[0x20],r0
80004a1a:	0c 97       	mov	r7,r6
80004a1c:	04 94       	mov	r4,r2
80004a1e:	06 96       	mov	r6,r3
80004a20:	02 92       	mov	r2,r1
80004a22:	40 93       	lddsp	r3,sp[0x24]
80004a24:	10 90       	mov	r0,r8
80004a26:	40 41       	lddsp	r1,sp[0x10]
80004a28:	ed b5 00 05 	bld	r5,0x5
80004a2c:	c5 61       	brne	80004ad8 <_vfprintf_r+0x119c>
80004a2e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a32:	40 39       	lddsp	r9,sp[0xc]
80004a34:	58 09       	cp.w	r9,0
80004a36:	c2 10       	breq	80004a78 <_vfprintf_r+0x113c>
80004a38:	10 36       	cp.w	r6,r8
80004a3a:	c0 74       	brge	80004a48 <_vfprintf_r+0x110c>
80004a3c:	fa c8 f9 44 	sub	r8,sp,-1724
80004a40:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a44:	c2 38       	rjmp	80004a8a <_vfprintf_r+0x114e>
80004a46:	d7 03       	nop
80004a48:	fa c8 f9 50 	sub	r8,sp,-1712
80004a4c:	1a d8       	st.w	--sp,r8
80004a4e:	fa c8 fa b8 	sub	r8,sp,-1352
80004a52:	1a d8       	st.w	--sp,r8
80004a54:	fa c8 fb b4 	sub	r8,sp,-1100
80004a58:	1a d8       	st.w	--sp,r8
80004a5a:	fa c8 f9 40 	sub	r8,sp,-1728
80004a5e:	fa c9 ff b4 	sub	r9,sp,-76
80004a62:	04 9a       	mov	r10,r2
80004a64:	0c 9b       	mov	r11,r6
80004a66:	08 9c       	mov	r12,r4
80004a68:	fe b0 f5 d2 	rcall	8000360c <get_arg>
80004a6c:	2f dd       	sub	sp,-12
80004a6e:	f8 e8 00 00 	ld.d	r8,r12[0]
80004a72:	fa e9 00 00 	st.d	sp[0],r8
80004a76:	c2 e8       	rjmp	80004ad2 <_vfprintf_r+0x1196>
80004a78:	ee ca ff ff 	sub	r10,r7,-1
80004a7c:	10 37       	cp.w	r7,r8
80004a7e:	c0 b4       	brge	80004a94 <_vfprintf_r+0x1158>
80004a80:	fa c8 f9 44 	sub	r8,sp,-1724
80004a84:	14 97       	mov	r7,r10
80004a86:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a8a:	ec ea fd 88 	ld.d	r10,r6[-632]
80004a8e:	fa eb 00 00 	st.d	sp[0],r10
80004a92:	c2 08       	rjmp	80004ad2 <_vfprintf_r+0x1196>
80004a94:	41 09       	lddsp	r9,sp[0x40]
80004a96:	59 f8       	cp.w	r8,31
80004a98:	e0 89 00 16 	brgt	80004ac4 <_vfprintf_r+0x1188>
80004a9c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004aa0:	f2 cb ff f8 	sub	r11,r9,-8
80004aa4:	fa e7 00 00 	st.d	sp[0],r6
80004aa8:	51 0b       	stdsp	sp[0x40],r11
80004aaa:	fa c6 f9 44 	sub	r6,sp,-1724
80004aae:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ab2:	fa e6 00 00 	ld.d	r6,sp[0]
80004ab6:	f2 e7 fd 88 	st.d	r9[-632],r6
80004aba:	2f f8       	sub	r8,-1
80004abc:	14 97       	mov	r7,r10
80004abe:	fb 48 06 b4 	st.w	sp[1716],r8
80004ac2:	c0 88       	rjmp	80004ad2 <_vfprintf_r+0x1196>
80004ac4:	f2 e6 00 00 	ld.d	r6,r9[0]
80004ac8:	2f 89       	sub	r9,-8
80004aca:	fa e7 00 00 	st.d	sp[0],r6
80004ace:	51 09       	stdsp	sp[0x40],r9
80004ad0:	14 97       	mov	r7,r10
80004ad2:	30 18       	mov	r8,1
80004ad4:	e0 8f 01 d0 	bral	80004e74 <_vfprintf_r+0x1538>
80004ad8:	ed b5 00 04 	bld	r5,0x4
80004adc:	c1 61       	brne	80004b08 <_vfprintf_r+0x11cc>
80004ade:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ae2:	40 3e       	lddsp	lr,sp[0xc]
80004ae4:	58 0e       	cp.w	lr,0
80004ae6:	c0 80       	breq	80004af6 <_vfprintf_r+0x11ba>
80004ae8:	10 36       	cp.w	r6,r8
80004aea:	c6 74       	brge	80004bb8 <_vfprintf_r+0x127c>
80004aec:	fa cc f9 44 	sub	r12,sp,-1724
80004af0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004af4:	c8 08       	rjmp	80004bf4 <_vfprintf_r+0x12b8>
80004af6:	ee ca ff ff 	sub	r10,r7,-1
80004afa:	10 37       	cp.w	r7,r8
80004afc:	c7 f4       	brge	80004bfa <_vfprintf_r+0x12be>
80004afe:	fa cb f9 44 	sub	r11,sp,-1724
80004b02:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b06:	c7 68       	rjmp	80004bf2 <_vfprintf_r+0x12b6>
80004b08:	ed b5 00 06 	bld	r5,0x6
80004b0c:	c4 a1       	brne	80004ba0 <_vfprintf_r+0x1264>
80004b0e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b12:	40 3c       	lddsp	r12,sp[0xc]
80004b14:	58 0c       	cp.w	r12,0
80004b16:	c1 d0       	breq	80004b50 <_vfprintf_r+0x1214>
80004b18:	10 36       	cp.w	r6,r8
80004b1a:	c0 64       	brge	80004b26 <_vfprintf_r+0x11ea>
80004b1c:	fa cb f9 44 	sub	r11,sp,-1724
80004b20:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b24:	c1 f8       	rjmp	80004b62 <_vfprintf_r+0x1226>
80004b26:	fa c8 f9 50 	sub	r8,sp,-1712
80004b2a:	1a d8       	st.w	--sp,r8
80004b2c:	fa c8 fa b8 	sub	r8,sp,-1352
80004b30:	1a d8       	st.w	--sp,r8
80004b32:	fa c8 fb b4 	sub	r8,sp,-1100
80004b36:	1a d8       	st.w	--sp,r8
80004b38:	fa c8 f9 40 	sub	r8,sp,-1728
80004b3c:	fa c9 ff b4 	sub	r9,sp,-76
80004b40:	04 9a       	mov	r10,r2
80004b42:	0c 9b       	mov	r11,r6
80004b44:	08 9c       	mov	r12,r4
80004b46:	fe b0 f5 63 	rcall	8000360c <get_arg>
80004b4a:	2f dd       	sub	sp,-12
80004b4c:	98 18       	ld.sh	r8,r12[0x2]
80004b4e:	c2 68       	rjmp	80004b9a <_vfprintf_r+0x125e>
80004b50:	ee ca ff ff 	sub	r10,r7,-1
80004b54:	10 37       	cp.w	r7,r8
80004b56:	c0 94       	brge	80004b68 <_vfprintf_r+0x122c>
80004b58:	fa c9 f9 44 	sub	r9,sp,-1724
80004b5c:	14 97       	mov	r7,r10
80004b5e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b62:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004b66:	c1 a8       	rjmp	80004b9a <_vfprintf_r+0x125e>
80004b68:	41 09       	lddsp	r9,sp[0x40]
80004b6a:	59 f8       	cp.w	r8,31
80004b6c:	e0 89 00 13 	brgt	80004b92 <_vfprintf_r+0x1256>
80004b70:	f2 cb ff fc 	sub	r11,r9,-4
80004b74:	51 0b       	stdsp	sp[0x40],r11
80004b76:	72 09       	ld.w	r9,r9[0x0]
80004b78:	fa c6 f9 44 	sub	r6,sp,-1724
80004b7c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004b80:	2f f8       	sub	r8,-1
80004b82:	f7 49 fd 88 	st.w	r11[-632],r9
80004b86:	fb 48 06 b4 	st.w	sp[1716],r8
80004b8a:	14 97       	mov	r7,r10
80004b8c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004b90:	c0 58       	rjmp	80004b9a <_vfprintf_r+0x125e>
80004b92:	92 18       	ld.sh	r8,r9[0x2]
80004b94:	14 97       	mov	r7,r10
80004b96:	2f c9       	sub	r9,-4
80004b98:	51 09       	stdsp	sp[0x40],r9
80004b9a:	5c 78       	castu.h	r8
80004b9c:	50 18       	stdsp	sp[0x4],r8
80004b9e:	c4 68       	rjmp	80004c2a <_vfprintf_r+0x12ee>
80004ba0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ba4:	40 3c       	lddsp	r12,sp[0xc]
80004ba6:	58 0c       	cp.w	r12,0
80004ba8:	c1 d0       	breq	80004be2 <_vfprintf_r+0x12a6>
80004baa:	10 36       	cp.w	r6,r8
80004bac:	c0 64       	brge	80004bb8 <_vfprintf_r+0x127c>
80004bae:	fa cb f9 44 	sub	r11,sp,-1724
80004bb2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bb6:	c1 f8       	rjmp	80004bf4 <_vfprintf_r+0x12b8>
80004bb8:	fa c8 f9 50 	sub	r8,sp,-1712
80004bbc:	1a d8       	st.w	--sp,r8
80004bbe:	fa c8 fa b8 	sub	r8,sp,-1352
80004bc2:	0c 9b       	mov	r11,r6
80004bc4:	1a d8       	st.w	--sp,r8
80004bc6:	fa c8 fb b4 	sub	r8,sp,-1100
80004bca:	04 9a       	mov	r10,r2
80004bcc:	1a d8       	st.w	--sp,r8
80004bce:	08 9c       	mov	r12,r4
80004bd0:	fa c8 f9 40 	sub	r8,sp,-1728
80004bd4:	fa c9 ff b4 	sub	r9,sp,-76
80004bd8:	fe b0 f5 1a 	rcall	8000360c <get_arg>
80004bdc:	2f dd       	sub	sp,-12
80004bde:	78 0b       	ld.w	r11,r12[0x0]
80004be0:	c2 48       	rjmp	80004c28 <_vfprintf_r+0x12ec>
80004be2:	ee ca ff ff 	sub	r10,r7,-1
80004be6:	10 37       	cp.w	r7,r8
80004be8:	c0 94       	brge	80004bfa <_vfprintf_r+0x12be>
80004bea:	fa c9 f9 44 	sub	r9,sp,-1724
80004bee:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bf2:	14 97       	mov	r7,r10
80004bf4:	ec fb fd 88 	ld.w	r11,r6[-632]
80004bf8:	c1 88       	rjmp	80004c28 <_vfprintf_r+0x12ec>
80004bfa:	41 09       	lddsp	r9,sp[0x40]
80004bfc:	59 f8       	cp.w	r8,31
80004bfe:	e0 89 00 11 	brgt	80004c20 <_vfprintf_r+0x12e4>
80004c02:	f2 cb ff fc 	sub	r11,r9,-4
80004c06:	51 0b       	stdsp	sp[0x40],r11
80004c08:	fa c6 f9 44 	sub	r6,sp,-1724
80004c0c:	72 0b       	ld.w	r11,r9[0x0]
80004c0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c12:	f3 4b fd 88 	st.w	r9[-632],r11
80004c16:	2f f8       	sub	r8,-1
80004c18:	14 97       	mov	r7,r10
80004c1a:	fb 48 06 b4 	st.w	sp[1716],r8
80004c1e:	c0 58       	rjmp	80004c28 <_vfprintf_r+0x12ec>
80004c20:	72 0b       	ld.w	r11,r9[0x0]
80004c22:	14 97       	mov	r7,r10
80004c24:	2f c9       	sub	r9,-4
80004c26:	51 09       	stdsp	sp[0x40],r9
80004c28:	50 1b       	stdsp	sp[0x4],r11
80004c2a:	30 0e       	mov	lr,0
80004c2c:	30 18       	mov	r8,1
80004c2e:	50 0e       	stdsp	sp[0x0],lr
80004c30:	c2 29       	rjmp	80004e74 <_vfprintf_r+0x1538>
80004c32:	50 a7       	stdsp	sp[0x28],r7
80004c34:	50 80       	stdsp	sp[0x20],r0
80004c36:	0c 97       	mov	r7,r6
80004c38:	04 94       	mov	r4,r2
80004c3a:	06 96       	mov	r6,r3
80004c3c:	02 92       	mov	r2,r1
80004c3e:	fe cc 9e 4e 	sub	r12,pc,-25010
80004c42:	40 93       	lddsp	r3,sp[0x24]
80004c44:	10 90       	mov	r0,r8
80004c46:	40 41       	lddsp	r1,sp[0x10]
80004c48:	50 dc       	stdsp	sp[0x34],r12
80004c4a:	ed b5 00 05 	bld	r5,0x5
80004c4e:	c5 51       	brne	80004cf8 <_vfprintf_r+0x13bc>
80004c50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c54:	40 3b       	lddsp	r11,sp[0xc]
80004c56:	58 0b       	cp.w	r11,0
80004c58:	c2 20       	breq	80004c9c <_vfprintf_r+0x1360>
80004c5a:	10 36       	cp.w	r6,r8
80004c5c:	c0 a4       	brge	80004c70 <_vfprintf_r+0x1334>
80004c5e:	fa ca f9 44 	sub	r10,sp,-1724
80004c62:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004c66:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004c6a:	fa e9 00 00 	st.d	sp[0],r8
80004c6e:	cf 28       	rjmp	80004e52 <_vfprintf_r+0x1516>
80004c70:	fa c8 f9 50 	sub	r8,sp,-1712
80004c74:	1a d8       	st.w	--sp,r8
80004c76:	fa c8 fa b8 	sub	r8,sp,-1352
80004c7a:	04 9a       	mov	r10,r2
80004c7c:	1a d8       	st.w	--sp,r8
80004c7e:	0c 9b       	mov	r11,r6
80004c80:	fa c8 fb b4 	sub	r8,sp,-1100
80004c84:	08 9c       	mov	r12,r4
80004c86:	1a d8       	st.w	--sp,r8
80004c88:	fa c8 f9 40 	sub	r8,sp,-1728
80004c8c:	fa c9 ff b4 	sub	r9,sp,-76
80004c90:	fe b0 f4 be 	rcall	8000360c <get_arg>
80004c94:	2f dd       	sub	sp,-12
80004c96:	f8 ea 00 00 	ld.d	r10,r12[0]
80004c9a:	c0 c8       	rjmp	80004cb2 <_vfprintf_r+0x1376>
80004c9c:	ee ca ff ff 	sub	r10,r7,-1
80004ca0:	10 37       	cp.w	r7,r8
80004ca2:	c0 b4       	brge	80004cb8 <_vfprintf_r+0x137c>
80004ca4:	fa c9 f9 44 	sub	r9,sp,-1724
80004ca8:	14 97       	mov	r7,r10
80004caa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cae:	ec ea fd 88 	ld.d	r10,r6[-632]
80004cb2:	fa eb 00 00 	st.d	sp[0],r10
80004cb6:	cc e8       	rjmp	80004e52 <_vfprintf_r+0x1516>
80004cb8:	41 09       	lddsp	r9,sp[0x40]
80004cba:	59 f8       	cp.w	r8,31
80004cbc:	e0 89 00 16 	brgt	80004ce8 <_vfprintf_r+0x13ac>
80004cc0:	f2 e6 00 00 	ld.d	r6,r9[0]
80004cc4:	f2 cb ff f8 	sub	r11,r9,-8
80004cc8:	fa e7 00 00 	st.d	sp[0],r6
80004ccc:	51 0b       	stdsp	sp[0x40],r11
80004cce:	fa c6 f9 44 	sub	r6,sp,-1724
80004cd2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004cd6:	fa e6 00 00 	ld.d	r6,sp[0]
80004cda:	f2 e7 fd 88 	st.d	r9[-632],r6
80004cde:	2f f8       	sub	r8,-1
80004ce0:	14 97       	mov	r7,r10
80004ce2:	fb 48 06 b4 	st.w	sp[1716],r8
80004ce6:	cb 68       	rjmp	80004e52 <_vfprintf_r+0x1516>
80004ce8:	f2 e6 00 00 	ld.d	r6,r9[0]
80004cec:	2f 89       	sub	r9,-8
80004cee:	fa e7 00 00 	st.d	sp[0],r6
80004cf2:	51 09       	stdsp	sp[0x40],r9
80004cf4:	14 97       	mov	r7,r10
80004cf6:	ca e8       	rjmp	80004e52 <_vfprintf_r+0x1516>
80004cf8:	ed b5 00 04 	bld	r5,0x4
80004cfc:	c1 71       	brne	80004d2a <_vfprintf_r+0x13ee>
80004cfe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d02:	40 3e       	lddsp	lr,sp[0xc]
80004d04:	58 0e       	cp.w	lr,0
80004d06:	c0 80       	breq	80004d16 <_vfprintf_r+0x13da>
80004d08:	10 36       	cp.w	r6,r8
80004d0a:	c6 94       	brge	80004ddc <_vfprintf_r+0x14a0>
80004d0c:	fa cc f9 44 	sub	r12,sp,-1724
80004d10:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d14:	c8 28       	rjmp	80004e18 <_vfprintf_r+0x14dc>
80004d16:	ee ca ff ff 	sub	r10,r7,-1
80004d1a:	10 37       	cp.w	r7,r8
80004d1c:	e0 84 00 81 	brge	80004e1e <_vfprintf_r+0x14e2>
80004d20:	fa cb f9 44 	sub	r11,sp,-1724
80004d24:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d28:	c7 78       	rjmp	80004e16 <_vfprintf_r+0x14da>
80004d2a:	ed b5 00 06 	bld	r5,0x6
80004d2e:	c4 b1       	brne	80004dc4 <_vfprintf_r+0x1488>
80004d30:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d34:	40 3c       	lddsp	r12,sp[0xc]
80004d36:	58 0c       	cp.w	r12,0
80004d38:	c1 d0       	breq	80004d72 <_vfprintf_r+0x1436>
80004d3a:	10 36       	cp.w	r6,r8
80004d3c:	c0 64       	brge	80004d48 <_vfprintf_r+0x140c>
80004d3e:	fa cb f9 44 	sub	r11,sp,-1724
80004d42:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d46:	c1 f8       	rjmp	80004d84 <_vfprintf_r+0x1448>
80004d48:	fa c8 f9 50 	sub	r8,sp,-1712
80004d4c:	1a d8       	st.w	--sp,r8
80004d4e:	fa c8 fa b8 	sub	r8,sp,-1352
80004d52:	1a d8       	st.w	--sp,r8
80004d54:	fa c8 fb b4 	sub	r8,sp,-1100
80004d58:	1a d8       	st.w	--sp,r8
80004d5a:	fa c8 f9 40 	sub	r8,sp,-1728
80004d5e:	fa c9 ff b4 	sub	r9,sp,-76
80004d62:	04 9a       	mov	r10,r2
80004d64:	0c 9b       	mov	r11,r6
80004d66:	08 9c       	mov	r12,r4
80004d68:	fe b0 f4 52 	rcall	8000360c <get_arg>
80004d6c:	2f dd       	sub	sp,-12
80004d6e:	98 18       	ld.sh	r8,r12[0x2]
80004d70:	c2 78       	rjmp	80004dbe <_vfprintf_r+0x1482>
80004d72:	ee ca ff ff 	sub	r10,r7,-1
80004d76:	10 37       	cp.w	r7,r8
80004d78:	c0 a4       	brge	80004d8c <_vfprintf_r+0x1450>
80004d7a:	fa c9 f9 44 	sub	r9,sp,-1724
80004d7e:	14 97       	mov	r7,r10
80004d80:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d84:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004d88:	c1 b8       	rjmp	80004dbe <_vfprintf_r+0x1482>
80004d8a:	d7 03       	nop
80004d8c:	41 09       	lddsp	r9,sp[0x40]
80004d8e:	59 f8       	cp.w	r8,31
80004d90:	e0 89 00 13 	brgt	80004db6 <_vfprintf_r+0x147a>
80004d94:	f2 cb ff fc 	sub	r11,r9,-4
80004d98:	51 0b       	stdsp	sp[0x40],r11
80004d9a:	72 09       	ld.w	r9,r9[0x0]
80004d9c:	fa c6 f9 44 	sub	r6,sp,-1724
80004da0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004da4:	2f f8       	sub	r8,-1
80004da6:	f7 49 fd 88 	st.w	r11[-632],r9
80004daa:	fb 48 06 b4 	st.w	sp[1716],r8
80004dae:	14 97       	mov	r7,r10
80004db0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004db4:	c0 58       	rjmp	80004dbe <_vfprintf_r+0x1482>
80004db6:	92 18       	ld.sh	r8,r9[0x2]
80004db8:	14 97       	mov	r7,r10
80004dba:	2f c9       	sub	r9,-4
80004dbc:	51 09       	stdsp	sp[0x40],r9
80004dbe:	5c 78       	castu.h	r8
80004dc0:	50 18       	stdsp	sp[0x4],r8
80004dc2:	c4 68       	rjmp	80004e4e <_vfprintf_r+0x1512>
80004dc4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dc8:	40 3c       	lddsp	r12,sp[0xc]
80004dca:	58 0c       	cp.w	r12,0
80004dcc:	c1 d0       	breq	80004e06 <_vfprintf_r+0x14ca>
80004dce:	10 36       	cp.w	r6,r8
80004dd0:	c0 64       	brge	80004ddc <_vfprintf_r+0x14a0>
80004dd2:	fa cb f9 44 	sub	r11,sp,-1724
80004dd6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004dda:	c1 f8       	rjmp	80004e18 <_vfprintf_r+0x14dc>
80004ddc:	fa c8 f9 50 	sub	r8,sp,-1712
80004de0:	1a d8       	st.w	--sp,r8
80004de2:	fa c8 fa b8 	sub	r8,sp,-1352
80004de6:	0c 9b       	mov	r11,r6
80004de8:	1a d8       	st.w	--sp,r8
80004dea:	fa c8 fb b4 	sub	r8,sp,-1100
80004dee:	04 9a       	mov	r10,r2
80004df0:	1a d8       	st.w	--sp,r8
80004df2:	08 9c       	mov	r12,r4
80004df4:	fa c8 f9 40 	sub	r8,sp,-1728
80004df8:	fa c9 ff b4 	sub	r9,sp,-76
80004dfc:	fe b0 f4 08 	rcall	8000360c <get_arg>
80004e00:	2f dd       	sub	sp,-12
80004e02:	78 0b       	ld.w	r11,r12[0x0]
80004e04:	c2 48       	rjmp	80004e4c <_vfprintf_r+0x1510>
80004e06:	ee ca ff ff 	sub	r10,r7,-1
80004e0a:	10 37       	cp.w	r7,r8
80004e0c:	c0 94       	brge	80004e1e <_vfprintf_r+0x14e2>
80004e0e:	fa c9 f9 44 	sub	r9,sp,-1724
80004e12:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e16:	14 97       	mov	r7,r10
80004e18:	ec fb fd 88 	ld.w	r11,r6[-632]
80004e1c:	c1 88       	rjmp	80004e4c <_vfprintf_r+0x1510>
80004e1e:	41 09       	lddsp	r9,sp[0x40]
80004e20:	59 f8       	cp.w	r8,31
80004e22:	e0 89 00 11 	brgt	80004e44 <_vfprintf_r+0x1508>
80004e26:	f2 cb ff fc 	sub	r11,r9,-4
80004e2a:	51 0b       	stdsp	sp[0x40],r11
80004e2c:	fa c6 f9 44 	sub	r6,sp,-1724
80004e30:	72 0b       	ld.w	r11,r9[0x0]
80004e32:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e36:	f3 4b fd 88 	st.w	r9[-632],r11
80004e3a:	2f f8       	sub	r8,-1
80004e3c:	14 97       	mov	r7,r10
80004e3e:	fb 48 06 b4 	st.w	sp[1716],r8
80004e42:	c0 58       	rjmp	80004e4c <_vfprintf_r+0x1510>
80004e44:	72 0b       	ld.w	r11,r9[0x0]
80004e46:	14 97       	mov	r7,r10
80004e48:	2f c9       	sub	r9,-4
80004e4a:	51 09       	stdsp	sp[0x40],r9
80004e4c:	50 1b       	stdsp	sp[0x4],r11
80004e4e:	30 0e       	mov	lr,0
80004e50:	50 0e       	stdsp	sp[0x0],lr
80004e52:	40 08       	lddsp	r8,sp[0x0]
80004e54:	40 1c       	lddsp	r12,sp[0x4]
80004e56:	18 48       	or	r8,r12
80004e58:	5f 19       	srne	r9
80004e5a:	0a 98       	mov	r8,r5
80004e5c:	eb e9 00 09 	and	r9,r5,r9
80004e60:	a1 b8       	sbr	r8,0x1
80004e62:	58 09       	cp.w	r9,0
80004e64:	c0 70       	breq	80004e72 <_vfprintf_r+0x1536>
80004e66:	10 95       	mov	r5,r8
80004e68:	fb 60 06 b9 	st.b	sp[1721],r0
80004e6c:	33 08       	mov	r8,48
80004e6e:	fb 68 06 b8 	st.b	sp[1720],r8
80004e72:	30 28       	mov	r8,2
80004e74:	30 09       	mov	r9,0
80004e76:	fb 69 06 bb 	st.b	sp[1723],r9
80004e7a:	0a 99       	mov	r9,r5
80004e7c:	a7 d9       	cbr	r9,0x7
80004e7e:	40 2b       	lddsp	r11,sp[0x8]
80004e80:	40 16       	lddsp	r6,sp[0x4]
80004e82:	58 0b       	cp.w	r11,0
80004e84:	5f 1a       	srne	r10
80004e86:	f2 05 17 40 	movge	r5,r9
80004e8a:	fa c2 f9 78 	sub	r2,sp,-1672
80004e8e:	40 09       	lddsp	r9,sp[0x0]
80004e90:	0c 49       	or	r9,r6
80004e92:	5f 19       	srne	r9
80004e94:	f5 e9 10 09 	or	r9,r10,r9
80004e98:	c5 c0       	breq	80004f50 <_vfprintf_r+0x1614>
80004e9a:	30 19       	mov	r9,1
80004e9c:	f2 08 18 00 	cp.b	r8,r9
80004ea0:	c0 60       	breq	80004eac <_vfprintf_r+0x1570>
80004ea2:	30 29       	mov	r9,2
80004ea4:	f2 08 18 00 	cp.b	r8,r9
80004ea8:	c0 41       	brne	80004eb0 <_vfprintf_r+0x1574>
80004eaa:	c3 c8       	rjmp	80004f22 <_vfprintf_r+0x15e6>
80004eac:	04 96       	mov	r6,r2
80004eae:	c3 08       	rjmp	80004f0e <_vfprintf_r+0x15d2>
80004eb0:	04 96       	mov	r6,r2
80004eb2:	fa e8 00 00 	ld.d	r8,sp[0]
80004eb6:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004eba:	2d 0a       	sub	r10,-48
80004ebc:	0c fa       	st.b	--r6,r10
80004ebe:	f0 0b 16 03 	lsr	r11,r8,0x3
80004ec2:	f2 0c 16 03 	lsr	r12,r9,0x3
80004ec6:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004eca:	18 99       	mov	r9,r12
80004ecc:	16 98       	mov	r8,r11
80004ece:	58 08       	cp.w	r8,0
80004ed0:	5c 29       	cpc	r9
80004ed2:	cf 21       	brne	80004eb6 <_vfprintf_r+0x157a>
80004ed4:	fa e9 00 00 	st.d	sp[0],r8
80004ed8:	ed b5 00 00 	bld	r5,0x0
80004edc:	c4 51       	brne	80004f66 <_vfprintf_r+0x162a>
80004ede:	33 09       	mov	r9,48
80004ee0:	f2 0a 18 00 	cp.b	r10,r9
80004ee4:	c4 10       	breq	80004f66 <_vfprintf_r+0x162a>
80004ee6:	0c f9       	st.b	--r6,r9
80004ee8:	c3 f8       	rjmp	80004f66 <_vfprintf_r+0x162a>
80004eea:	fa ea 00 00 	ld.d	r10,sp[0]
80004eee:	30 a8       	mov	r8,10
80004ef0:	30 09       	mov	r9,0
80004ef2:	e0 a0 1e 31 	rcall	80008b54 <__avr32_umod64>
80004ef6:	30 a8       	mov	r8,10
80004ef8:	2d 0a       	sub	r10,-48
80004efa:	30 09       	mov	r9,0
80004efc:	ac 8a       	st.b	r6[0x0],r10
80004efe:	fa ea 00 00 	ld.d	r10,sp[0]
80004f02:	e0 a0 1c f7 	rcall	800088f0 <__avr32_udiv64>
80004f06:	16 99       	mov	r9,r11
80004f08:	14 98       	mov	r8,r10
80004f0a:	fa e9 00 00 	st.d	sp[0],r8
80004f0e:	20 16       	sub	r6,1
80004f10:	fa ea 00 00 	ld.d	r10,sp[0]
80004f14:	58 9a       	cp.w	r10,9
80004f16:	5c 2b       	cpc	r11
80004f18:	fe 9b ff e9 	brhi	80004eea <_vfprintf_r+0x15ae>
80004f1c:	1b f8       	ld.ub	r8,sp[0x7]
80004f1e:	2d 08       	sub	r8,-48
80004f20:	c2 08       	rjmp	80004f60 <_vfprintf_r+0x1624>
80004f22:	04 96       	mov	r6,r2
80004f24:	fa e8 00 00 	ld.d	r8,sp[0]
80004f28:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004f2c:	40 de       	lddsp	lr,sp[0x34]
80004f2e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004f32:	0c fa       	st.b	--r6,r10
80004f34:	f2 0b 16 04 	lsr	r11,r9,0x4
80004f38:	f0 0a 16 04 	lsr	r10,r8,0x4
80004f3c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004f40:	16 99       	mov	r9,r11
80004f42:	14 98       	mov	r8,r10
80004f44:	58 08       	cp.w	r8,0
80004f46:	5c 29       	cpc	r9
80004f48:	cf 01       	brne	80004f28 <_vfprintf_r+0x15ec>
80004f4a:	fa e9 00 00 	st.d	sp[0],r8
80004f4e:	c0 c8       	rjmp	80004f66 <_vfprintf_r+0x162a>
80004f50:	58 08       	cp.w	r8,0
80004f52:	c0 91       	brne	80004f64 <_vfprintf_r+0x1628>
80004f54:	ed b5 00 00 	bld	r5,0x0
80004f58:	c0 61       	brne	80004f64 <_vfprintf_r+0x1628>
80004f5a:	fa c6 f9 79 	sub	r6,sp,-1671
80004f5e:	33 08       	mov	r8,48
80004f60:	ac 88       	st.b	r6[0x0],r8
80004f62:	c0 28       	rjmp	80004f66 <_vfprintf_r+0x162a>
80004f64:	04 96       	mov	r6,r2
80004f66:	0c 12       	sub	r2,r6
80004f68:	c1 c8       	rjmp	80004fa0 <_vfprintf_r+0x1664>
80004f6a:	50 a7       	stdsp	sp[0x28],r7
80004f6c:	50 80       	stdsp	sp[0x20],r0
80004f6e:	40 93       	lddsp	r3,sp[0x24]
80004f70:	0c 97       	mov	r7,r6
80004f72:	10 90       	mov	r0,r8
80004f74:	04 94       	mov	r4,r2
80004f76:	40 41       	lddsp	r1,sp[0x10]
80004f78:	58 08       	cp.w	r8,0
80004f7a:	e0 80 04 4f 	breq	80005818 <_vfprintf_r+0x1edc>
80004f7e:	fb 68 06 60 	st.b	sp[1632],r8
80004f82:	30 0c       	mov	r12,0
80004f84:	30 08       	mov	r8,0
80004f86:	30 12       	mov	r2,1
80004f88:	fb 68 06 bb 	st.b	sp[1723],r8
80004f8c:	50 2c       	stdsp	sp[0x8],r12
80004f8e:	fa c6 f9 a0 	sub	r6,sp,-1632
80004f92:	c0 78       	rjmp	80004fa0 <_vfprintf_r+0x1664>
80004f94:	30 0b       	mov	r11,0
80004f96:	50 2b       	stdsp	sp[0x8],r11
80004f98:	c0 48       	rjmp	80004fa0 <_vfprintf_r+0x1664>
80004f9a:	40 22       	lddsp	r2,sp[0x8]
80004f9c:	30 0a       	mov	r10,0
80004f9e:	50 2a       	stdsp	sp[0x8],r10
80004fa0:	40 29       	lddsp	r9,sp[0x8]
80004fa2:	e4 09 0c 49 	max	r9,r2,r9
80004fa6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004faa:	50 39       	stdsp	sp[0xc],r9
80004fac:	0a 9e       	mov	lr,r5
80004fae:	30 09       	mov	r9,0
80004fb0:	e2 1e 00 02 	andl	lr,0x2,COH
80004fb4:	f2 08 18 00 	cp.b	r8,r9
80004fb8:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004fbc:	f7 b8 01 ff 	subne	r8,-1
80004fc0:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004fc4:	0a 9b       	mov	r11,r5
80004fc6:	58 0e       	cp.w	lr,0
80004fc8:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004fcc:	f7 bc 01 fe 	subne	r12,-2
80004fd0:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004fd4:	e2 1b 00 84 	andl	r11,0x84,COH
80004fd8:	50 fe       	stdsp	sp[0x3c],lr
80004fda:	50 9b       	stdsp	sp[0x24],r11
80004fdc:	c4 71       	brne	8000506a <_vfprintf_r+0x172e>
80004fde:	40 8a       	lddsp	r10,sp[0x20]
80004fe0:	40 39       	lddsp	r9,sp[0xc]
80004fe2:	12 1a       	sub	r10,r9
80004fe4:	50 4a       	stdsp	sp[0x10],r10
80004fe6:	58 0a       	cp.w	r10,0
80004fe8:	e0 89 00 20 	brgt	80005028 <_vfprintf_r+0x16ec>
80004fec:	c3 f8       	rjmp	8000506a <_vfprintf_r+0x172e>
80004fee:	2f 09       	sub	r9,-16
80004ff0:	2f f8       	sub	r8,-1
80004ff2:	fe ce a1 ea 	sub	lr,pc,-24086
80004ff6:	31 0c       	mov	r12,16
80004ff8:	fb 49 06 90 	st.w	sp[1680],r9
80004ffc:	87 0e       	st.w	r3[0x0],lr
80004ffe:	87 1c       	st.w	r3[0x4],r12
80005000:	fb 48 06 8c 	st.w	sp[1676],r8
80005004:	58 78       	cp.w	r8,7
80005006:	e0 89 00 04 	brgt	8000500e <_vfprintf_r+0x16d2>
8000500a:	2f 83       	sub	r3,-8
8000500c:	c0 b8       	rjmp	80005022 <_vfprintf_r+0x16e6>
8000500e:	fa ca f9 78 	sub	r10,sp,-1672
80005012:	02 9b       	mov	r11,r1
80005014:	08 9c       	mov	r12,r4
80005016:	fe b0 f4 85 	rcall	80003920 <__sprint_r>
8000501a:	e0 81 04 10 	brne	8000583a <_vfprintf_r+0x1efe>
8000501e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005022:	40 4b       	lddsp	r11,sp[0x10]
80005024:	21 0b       	sub	r11,16
80005026:	50 4b       	stdsp	sp[0x10],r11
80005028:	fa f9 06 90 	ld.w	r9,sp[1680]
8000502c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005030:	fe ca a2 28 	sub	r10,pc,-24024
80005034:	40 4e       	lddsp	lr,sp[0x10]
80005036:	59 0e       	cp.w	lr,16
80005038:	fe 99 ff db 	brgt	80004fee <_vfprintf_r+0x16b2>
8000503c:	1c 09       	add	r9,lr
8000503e:	2f f8       	sub	r8,-1
80005040:	87 0a       	st.w	r3[0x0],r10
80005042:	fb 49 06 90 	st.w	sp[1680],r9
80005046:	87 1e       	st.w	r3[0x4],lr
80005048:	fb 48 06 8c 	st.w	sp[1676],r8
8000504c:	58 78       	cp.w	r8,7
8000504e:	e0 89 00 04 	brgt	80005056 <_vfprintf_r+0x171a>
80005052:	2f 83       	sub	r3,-8
80005054:	c0 b8       	rjmp	8000506a <_vfprintf_r+0x172e>
80005056:	fa ca f9 78 	sub	r10,sp,-1672
8000505a:	02 9b       	mov	r11,r1
8000505c:	08 9c       	mov	r12,r4
8000505e:	fe b0 f4 61 	rcall	80003920 <__sprint_r>
80005062:	e0 81 03 ec 	brne	8000583a <_vfprintf_r+0x1efe>
80005066:	fa c3 f9 e0 	sub	r3,sp,-1568
8000506a:	30 09       	mov	r9,0
8000506c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005070:	f2 08 18 00 	cp.b	r8,r9
80005074:	c1 f0       	breq	800050b2 <_vfprintf_r+0x1776>
80005076:	fa f8 06 90 	ld.w	r8,sp[1680]
8000507a:	fa c9 f9 45 	sub	r9,sp,-1723
8000507e:	2f f8       	sub	r8,-1
80005080:	87 09       	st.w	r3[0x0],r9
80005082:	fb 48 06 90 	st.w	sp[1680],r8
80005086:	30 19       	mov	r9,1
80005088:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000508c:	87 19       	st.w	r3[0x4],r9
8000508e:	2f f8       	sub	r8,-1
80005090:	fb 48 06 8c 	st.w	sp[1676],r8
80005094:	58 78       	cp.w	r8,7
80005096:	e0 89 00 04 	brgt	8000509e <_vfprintf_r+0x1762>
8000509a:	2f 83       	sub	r3,-8
8000509c:	c0 b8       	rjmp	800050b2 <_vfprintf_r+0x1776>
8000509e:	fa ca f9 78 	sub	r10,sp,-1672
800050a2:	02 9b       	mov	r11,r1
800050a4:	08 9c       	mov	r12,r4
800050a6:	fe b0 f4 3d 	rcall	80003920 <__sprint_r>
800050aa:	e0 81 03 c8 	brne	8000583a <_vfprintf_r+0x1efe>
800050ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800050b2:	40 fc       	lddsp	r12,sp[0x3c]
800050b4:	58 0c       	cp.w	r12,0
800050b6:	c1 f0       	breq	800050f4 <_vfprintf_r+0x17b8>
800050b8:	fa f8 06 90 	ld.w	r8,sp[1680]
800050bc:	fa c9 f9 48 	sub	r9,sp,-1720
800050c0:	2f e8       	sub	r8,-2
800050c2:	87 09       	st.w	r3[0x0],r9
800050c4:	fb 48 06 90 	st.w	sp[1680],r8
800050c8:	30 29       	mov	r9,2
800050ca:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050ce:	87 19       	st.w	r3[0x4],r9
800050d0:	2f f8       	sub	r8,-1
800050d2:	fb 48 06 8c 	st.w	sp[1676],r8
800050d6:	58 78       	cp.w	r8,7
800050d8:	e0 89 00 04 	brgt	800050e0 <_vfprintf_r+0x17a4>
800050dc:	2f 83       	sub	r3,-8
800050de:	c0 b8       	rjmp	800050f4 <_vfprintf_r+0x17b8>
800050e0:	fa ca f9 78 	sub	r10,sp,-1672
800050e4:	02 9b       	mov	r11,r1
800050e6:	08 9c       	mov	r12,r4
800050e8:	fe b0 f4 1c 	rcall	80003920 <__sprint_r>
800050ec:	e0 81 03 a7 	brne	8000583a <_vfprintf_r+0x1efe>
800050f0:	fa c3 f9 e0 	sub	r3,sp,-1568
800050f4:	40 9b       	lddsp	r11,sp[0x24]
800050f6:	e0 4b 00 80 	cp.w	r11,128
800050fa:	c4 71       	brne	80005188 <_vfprintf_r+0x184c>
800050fc:	40 8a       	lddsp	r10,sp[0x20]
800050fe:	40 39       	lddsp	r9,sp[0xc]
80005100:	12 1a       	sub	r10,r9
80005102:	50 4a       	stdsp	sp[0x10],r10
80005104:	58 0a       	cp.w	r10,0
80005106:	e0 89 00 20 	brgt	80005146 <_vfprintf_r+0x180a>
8000510a:	c3 f8       	rjmp	80005188 <_vfprintf_r+0x184c>
8000510c:	2f 09       	sub	r9,-16
8000510e:	2f f8       	sub	r8,-1
80005110:	fe ce a2 f8 	sub	lr,pc,-23816
80005114:	31 0c       	mov	r12,16
80005116:	fb 49 06 90 	st.w	sp[1680],r9
8000511a:	87 0e       	st.w	r3[0x0],lr
8000511c:	87 1c       	st.w	r3[0x4],r12
8000511e:	fb 48 06 8c 	st.w	sp[1676],r8
80005122:	58 78       	cp.w	r8,7
80005124:	e0 89 00 04 	brgt	8000512c <_vfprintf_r+0x17f0>
80005128:	2f 83       	sub	r3,-8
8000512a:	c0 b8       	rjmp	80005140 <_vfprintf_r+0x1804>
8000512c:	fa ca f9 78 	sub	r10,sp,-1672
80005130:	02 9b       	mov	r11,r1
80005132:	08 9c       	mov	r12,r4
80005134:	fe b0 f3 f6 	rcall	80003920 <__sprint_r>
80005138:	e0 81 03 81 	brne	8000583a <_vfprintf_r+0x1efe>
8000513c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005140:	40 4b       	lddsp	r11,sp[0x10]
80005142:	21 0b       	sub	r11,16
80005144:	50 4b       	stdsp	sp[0x10],r11
80005146:	fa f9 06 90 	ld.w	r9,sp[1680]
8000514a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000514e:	fe ca a3 36 	sub	r10,pc,-23754
80005152:	40 4e       	lddsp	lr,sp[0x10]
80005154:	59 0e       	cp.w	lr,16
80005156:	fe 99 ff db 	brgt	8000510c <_vfprintf_r+0x17d0>
8000515a:	1c 09       	add	r9,lr
8000515c:	2f f8       	sub	r8,-1
8000515e:	87 0a       	st.w	r3[0x0],r10
80005160:	fb 49 06 90 	st.w	sp[1680],r9
80005164:	87 1e       	st.w	r3[0x4],lr
80005166:	fb 48 06 8c 	st.w	sp[1676],r8
8000516a:	58 78       	cp.w	r8,7
8000516c:	e0 89 00 04 	brgt	80005174 <_vfprintf_r+0x1838>
80005170:	2f 83       	sub	r3,-8
80005172:	c0 b8       	rjmp	80005188 <_vfprintf_r+0x184c>
80005174:	fa ca f9 78 	sub	r10,sp,-1672
80005178:	02 9b       	mov	r11,r1
8000517a:	08 9c       	mov	r12,r4
8000517c:	fe b0 f3 d2 	rcall	80003920 <__sprint_r>
80005180:	e0 81 03 5d 	brne	8000583a <_vfprintf_r+0x1efe>
80005184:	fa c3 f9 e0 	sub	r3,sp,-1568
80005188:	40 2c       	lddsp	r12,sp[0x8]
8000518a:	04 1c       	sub	r12,r2
8000518c:	50 2c       	stdsp	sp[0x8],r12
8000518e:	58 0c       	cp.w	r12,0
80005190:	e0 89 00 20 	brgt	800051d0 <_vfprintf_r+0x1894>
80005194:	c3 f8       	rjmp	80005212 <_vfprintf_r+0x18d6>
80005196:	2f 09       	sub	r9,-16
80005198:	2f f8       	sub	r8,-1
8000519a:	fe cb a3 82 	sub	r11,pc,-23678
8000519e:	31 0a       	mov	r10,16
800051a0:	fb 49 06 90 	st.w	sp[1680],r9
800051a4:	87 0b       	st.w	r3[0x0],r11
800051a6:	87 1a       	st.w	r3[0x4],r10
800051a8:	fb 48 06 8c 	st.w	sp[1676],r8
800051ac:	58 78       	cp.w	r8,7
800051ae:	e0 89 00 04 	brgt	800051b6 <_vfprintf_r+0x187a>
800051b2:	2f 83       	sub	r3,-8
800051b4:	c0 b8       	rjmp	800051ca <_vfprintf_r+0x188e>
800051b6:	fa ca f9 78 	sub	r10,sp,-1672
800051ba:	02 9b       	mov	r11,r1
800051bc:	08 9c       	mov	r12,r4
800051be:	fe b0 f3 b1 	rcall	80003920 <__sprint_r>
800051c2:	e0 81 03 3c 	brne	8000583a <_vfprintf_r+0x1efe>
800051c6:	fa c3 f9 e0 	sub	r3,sp,-1568
800051ca:	40 29       	lddsp	r9,sp[0x8]
800051cc:	21 09       	sub	r9,16
800051ce:	50 29       	stdsp	sp[0x8],r9
800051d0:	fa f9 06 90 	ld.w	r9,sp[1680]
800051d4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051d8:	fe ca a3 c0 	sub	r10,pc,-23616
800051dc:	40 2e       	lddsp	lr,sp[0x8]
800051de:	59 0e       	cp.w	lr,16
800051e0:	fe 99 ff db 	brgt	80005196 <_vfprintf_r+0x185a>
800051e4:	1c 09       	add	r9,lr
800051e6:	2f f8       	sub	r8,-1
800051e8:	87 0a       	st.w	r3[0x0],r10
800051ea:	fb 49 06 90 	st.w	sp[1680],r9
800051ee:	87 1e       	st.w	r3[0x4],lr
800051f0:	fb 48 06 8c 	st.w	sp[1676],r8
800051f4:	58 78       	cp.w	r8,7
800051f6:	e0 89 00 04 	brgt	800051fe <_vfprintf_r+0x18c2>
800051fa:	2f 83       	sub	r3,-8
800051fc:	c0 b8       	rjmp	80005212 <_vfprintf_r+0x18d6>
800051fe:	fa ca f9 78 	sub	r10,sp,-1672
80005202:	02 9b       	mov	r11,r1
80005204:	08 9c       	mov	r12,r4
80005206:	fe b0 f3 8d 	rcall	80003920 <__sprint_r>
8000520a:	e0 81 03 18 	brne	8000583a <_vfprintf_r+0x1efe>
8000520e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005212:	ed b5 00 08 	bld	r5,0x8
80005216:	c0 b0       	breq	8000522c <_vfprintf_r+0x18f0>
80005218:	fa f8 06 90 	ld.w	r8,sp[1680]
8000521c:	87 12       	st.w	r3[0x4],r2
8000521e:	87 06       	st.w	r3[0x0],r6
80005220:	f0 02 00 02 	add	r2,r8,r2
80005224:	fb 42 06 90 	st.w	sp[1680],r2
80005228:	e0 8f 01 d4 	bral	800055d0 <_vfprintf_r+0x1c94>
8000522c:	e0 40 00 65 	cp.w	r0,101
80005230:	e0 8a 01 d6 	brle	800055dc <_vfprintf_r+0x1ca0>
80005234:	30 08       	mov	r8,0
80005236:	30 09       	mov	r9,0
80005238:	40 5b       	lddsp	r11,sp[0x14]
8000523a:	40 7a       	lddsp	r10,sp[0x1c]
8000523c:	e0 a0 19 53 	rcall	800084e2 <__avr32_f64_cmp_eq>
80005240:	c7 90       	breq	80005332 <_vfprintf_r+0x19f6>
80005242:	fa f8 06 90 	ld.w	r8,sp[1680]
80005246:	fe c9 a4 42 	sub	r9,pc,-23486
8000524a:	2f f8       	sub	r8,-1
8000524c:	87 09       	st.w	r3[0x0],r9
8000524e:	fb 48 06 90 	st.w	sp[1680],r8
80005252:	30 19       	mov	r9,1
80005254:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005258:	87 19       	st.w	r3[0x4],r9
8000525a:	2f f8       	sub	r8,-1
8000525c:	fb 48 06 8c 	st.w	sp[1676],r8
80005260:	58 78       	cp.w	r8,7
80005262:	e0 89 00 05 	brgt	8000526c <_vfprintf_r+0x1930>
80005266:	2f 83       	sub	r3,-8
80005268:	c0 c8       	rjmp	80005280 <_vfprintf_r+0x1944>
8000526a:	d7 03       	nop
8000526c:	fa ca f9 78 	sub	r10,sp,-1672
80005270:	02 9b       	mov	r11,r1
80005272:	08 9c       	mov	r12,r4
80005274:	fe b0 f3 56 	rcall	80003920 <__sprint_r>
80005278:	e0 81 02 e1 	brne	8000583a <_vfprintf_r+0x1efe>
8000527c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005280:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005284:	40 6c       	lddsp	r12,sp[0x18]
80005286:	18 38       	cp.w	r8,r12
80005288:	c0 55       	brlt	80005292 <_vfprintf_r+0x1956>
8000528a:	ed b5 00 00 	bld	r5,0x0
8000528e:	e0 81 02 6b 	brne	80005764 <_vfprintf_r+0x1e28>
80005292:	fa f8 06 90 	ld.w	r8,sp[1680]
80005296:	2f f8       	sub	r8,-1
80005298:	40 cb       	lddsp	r11,sp[0x30]
8000529a:	fb 48 06 90 	st.w	sp[1680],r8
8000529e:	30 19       	mov	r9,1
800052a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052a4:	87 0b       	st.w	r3[0x0],r11
800052a6:	2f f8       	sub	r8,-1
800052a8:	87 19       	st.w	r3[0x4],r9
800052aa:	fb 48 06 8c 	st.w	sp[1676],r8
800052ae:	58 78       	cp.w	r8,7
800052b0:	e0 89 00 04 	brgt	800052b8 <_vfprintf_r+0x197c>
800052b4:	2f 83       	sub	r3,-8
800052b6:	c0 b8       	rjmp	800052cc <_vfprintf_r+0x1990>
800052b8:	fa ca f9 78 	sub	r10,sp,-1672
800052bc:	02 9b       	mov	r11,r1
800052be:	08 9c       	mov	r12,r4
800052c0:	fe b0 f3 30 	rcall	80003920 <__sprint_r>
800052c4:	e0 81 02 bb 	brne	8000583a <_vfprintf_r+0x1efe>
800052c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800052cc:	40 66       	lddsp	r6,sp[0x18]
800052ce:	20 16       	sub	r6,1
800052d0:	58 06       	cp.w	r6,0
800052d2:	e0 89 00 1d 	brgt	8000530c <_vfprintf_r+0x19d0>
800052d6:	e0 8f 02 47 	bral	80005764 <_vfprintf_r+0x1e28>
800052da:	2f 09       	sub	r9,-16
800052dc:	2f f8       	sub	r8,-1
800052de:	fb 49 06 90 	st.w	sp[1680],r9
800052e2:	87 02       	st.w	r3[0x0],r2
800052e4:	87 10       	st.w	r3[0x4],r0
800052e6:	fb 48 06 8c 	st.w	sp[1676],r8
800052ea:	58 78       	cp.w	r8,7
800052ec:	e0 89 00 04 	brgt	800052f4 <_vfprintf_r+0x19b8>
800052f0:	2f 83       	sub	r3,-8
800052f2:	c0 b8       	rjmp	80005308 <_vfprintf_r+0x19cc>
800052f4:	fa ca f9 78 	sub	r10,sp,-1672
800052f8:	02 9b       	mov	r11,r1
800052fa:	08 9c       	mov	r12,r4
800052fc:	fe b0 f3 12 	rcall	80003920 <__sprint_r>
80005300:	e0 81 02 9d 	brne	8000583a <_vfprintf_r+0x1efe>
80005304:	fa c3 f9 e0 	sub	r3,sp,-1568
80005308:	21 06       	sub	r6,16
8000530a:	c0 48       	rjmp	80005312 <_vfprintf_r+0x19d6>
8000530c:	fe c2 a4 f4 	sub	r2,pc,-23308
80005310:	31 00       	mov	r0,16
80005312:	fa f9 06 90 	ld.w	r9,sp[1680]
80005316:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000531a:	fe ca a5 02 	sub	r10,pc,-23294
8000531e:	59 06       	cp.w	r6,16
80005320:	fe 99 ff dd 	brgt	800052da <_vfprintf_r+0x199e>
80005324:	0c 09       	add	r9,r6
80005326:	87 0a       	st.w	r3[0x0],r10
80005328:	fb 49 06 90 	st.w	sp[1680],r9
8000532c:	2f f8       	sub	r8,-1
8000532e:	87 16       	st.w	r3[0x4],r6
80005330:	c5 39       	rjmp	800055d6 <_vfprintf_r+0x1c9a>
80005332:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005336:	58 0a       	cp.w	r10,0
80005338:	e0 89 00 92 	brgt	8000545c <_vfprintf_r+0x1b20>
8000533c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005340:	fe c9 a5 3c 	sub	r9,pc,-23236
80005344:	2f f8       	sub	r8,-1
80005346:	87 09       	st.w	r3[0x0],r9
80005348:	fb 48 06 90 	st.w	sp[1680],r8
8000534c:	30 19       	mov	r9,1
8000534e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005352:	87 19       	st.w	r3[0x4],r9
80005354:	2f f8       	sub	r8,-1
80005356:	fb 48 06 8c 	st.w	sp[1676],r8
8000535a:	58 78       	cp.w	r8,7
8000535c:	e0 89 00 04 	brgt	80005364 <_vfprintf_r+0x1a28>
80005360:	2f 83       	sub	r3,-8
80005362:	c0 b8       	rjmp	80005378 <_vfprintf_r+0x1a3c>
80005364:	fa ca f9 78 	sub	r10,sp,-1672
80005368:	02 9b       	mov	r11,r1
8000536a:	08 9c       	mov	r12,r4
8000536c:	fe b0 f2 da 	rcall	80003920 <__sprint_r>
80005370:	e0 81 02 65 	brne	8000583a <_vfprintf_r+0x1efe>
80005374:	fa c3 f9 e0 	sub	r3,sp,-1568
80005378:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000537c:	58 08       	cp.w	r8,0
8000537e:	c0 81       	brne	8000538e <_vfprintf_r+0x1a52>
80005380:	40 6a       	lddsp	r10,sp[0x18]
80005382:	58 0a       	cp.w	r10,0
80005384:	c0 51       	brne	8000538e <_vfprintf_r+0x1a52>
80005386:	ed b5 00 00 	bld	r5,0x0
8000538a:	e0 81 01 ed 	brne	80005764 <_vfprintf_r+0x1e28>
8000538e:	40 c9       	lddsp	r9,sp[0x30]
80005390:	fa f8 06 90 	ld.w	r8,sp[1680]
80005394:	2f f8       	sub	r8,-1
80005396:	87 09       	st.w	r3[0x0],r9
80005398:	fb 48 06 90 	st.w	sp[1680],r8
8000539c:	30 19       	mov	r9,1
8000539e:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053a2:	87 19       	st.w	r3[0x4],r9
800053a4:	2f f8       	sub	r8,-1
800053a6:	fb 48 06 8c 	st.w	sp[1676],r8
800053aa:	58 78       	cp.w	r8,7
800053ac:	e0 89 00 04 	brgt	800053b4 <_vfprintf_r+0x1a78>
800053b0:	2f 83       	sub	r3,-8
800053b2:	c0 b8       	rjmp	800053c8 <_vfprintf_r+0x1a8c>
800053b4:	fa ca f9 78 	sub	r10,sp,-1672
800053b8:	02 9b       	mov	r11,r1
800053ba:	08 9c       	mov	r12,r4
800053bc:	fe b0 f2 b2 	rcall	80003920 <__sprint_r>
800053c0:	e0 81 02 3d 	brne	8000583a <_vfprintf_r+0x1efe>
800053c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800053c8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800053cc:	5c 32       	neg	r2
800053ce:	58 02       	cp.w	r2,0
800053d0:	e0 89 00 1d 	brgt	8000540a <_vfprintf_r+0x1ace>
800053d4:	c3 d8       	rjmp	8000544e <_vfprintf_r+0x1b12>
800053d6:	2f 09       	sub	r9,-16
800053d8:	2f f8       	sub	r8,-1
800053da:	31 0e       	mov	lr,16
800053dc:	fb 49 06 90 	st.w	sp[1680],r9
800053e0:	87 00       	st.w	r3[0x0],r0
800053e2:	87 1e       	st.w	r3[0x4],lr
800053e4:	fb 48 06 8c 	st.w	sp[1676],r8
800053e8:	58 78       	cp.w	r8,7
800053ea:	e0 89 00 04 	brgt	800053f2 <_vfprintf_r+0x1ab6>
800053ee:	2f 83       	sub	r3,-8
800053f0:	c0 b8       	rjmp	80005406 <_vfprintf_r+0x1aca>
800053f2:	fa ca f9 78 	sub	r10,sp,-1672
800053f6:	02 9b       	mov	r11,r1
800053f8:	08 9c       	mov	r12,r4
800053fa:	fe b0 f2 93 	rcall	80003920 <__sprint_r>
800053fe:	e0 81 02 1e 	brne	8000583a <_vfprintf_r+0x1efe>
80005402:	fa c3 f9 e0 	sub	r3,sp,-1568
80005406:	21 02       	sub	r2,16
80005408:	c0 38       	rjmp	8000540e <_vfprintf_r+0x1ad2>
8000540a:	fe c0 a5 f2 	sub	r0,pc,-23054
8000540e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005412:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005416:	fe ca a5 fe 	sub	r10,pc,-23042
8000541a:	59 02       	cp.w	r2,16
8000541c:	fe 99 ff dd 	brgt	800053d6 <_vfprintf_r+0x1a9a>
80005420:	04 09       	add	r9,r2
80005422:	2f f8       	sub	r8,-1
80005424:	87 0a       	st.w	r3[0x0],r10
80005426:	fb 49 06 90 	st.w	sp[1680],r9
8000542a:	87 12       	st.w	r3[0x4],r2
8000542c:	fb 48 06 8c 	st.w	sp[1676],r8
80005430:	58 78       	cp.w	r8,7
80005432:	e0 89 00 04 	brgt	8000543a <_vfprintf_r+0x1afe>
80005436:	2f 83       	sub	r3,-8
80005438:	c0 b8       	rjmp	8000544e <_vfprintf_r+0x1b12>
8000543a:	fa ca f9 78 	sub	r10,sp,-1672
8000543e:	02 9b       	mov	r11,r1
80005440:	08 9c       	mov	r12,r4
80005442:	fe b0 f2 6f 	rcall	80003920 <__sprint_r>
80005446:	e0 81 01 fa 	brne	8000583a <_vfprintf_r+0x1efe>
8000544a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000544e:	40 6c       	lddsp	r12,sp[0x18]
80005450:	fa f8 06 90 	ld.w	r8,sp[1680]
80005454:	87 06       	st.w	r3[0x0],r6
80005456:	87 1c       	st.w	r3[0x4],r12
80005458:	18 08       	add	r8,r12
8000545a:	cb 98       	rjmp	800055cc <_vfprintf_r+0x1c90>
8000545c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005460:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005464:	40 6b       	lddsp	r11,sp[0x18]
80005466:	16 3a       	cp.w	r10,r11
80005468:	c6 f5       	brlt	80005546 <_vfprintf_r+0x1c0a>
8000546a:	16 09       	add	r9,r11
8000546c:	2f f8       	sub	r8,-1
8000546e:	87 06       	st.w	r3[0x0],r6
80005470:	fb 49 06 90 	st.w	sp[1680],r9
80005474:	87 1b       	st.w	r3[0x4],r11
80005476:	fb 48 06 8c 	st.w	sp[1676],r8
8000547a:	58 78       	cp.w	r8,7
8000547c:	e0 89 00 04 	brgt	80005484 <_vfprintf_r+0x1b48>
80005480:	2f 83       	sub	r3,-8
80005482:	c0 b8       	rjmp	80005498 <_vfprintf_r+0x1b5c>
80005484:	fa ca f9 78 	sub	r10,sp,-1672
80005488:	02 9b       	mov	r11,r1
8000548a:	08 9c       	mov	r12,r4
8000548c:	fe b0 f2 4a 	rcall	80003920 <__sprint_r>
80005490:	e0 81 01 d5 	brne	8000583a <_vfprintf_r+0x1efe>
80005494:	fa c3 f9 e0 	sub	r3,sp,-1568
80005498:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000549c:	40 6a       	lddsp	r10,sp[0x18]
8000549e:	14 16       	sub	r6,r10
800054a0:	58 06       	cp.w	r6,0
800054a2:	e0 89 00 1c 	brgt	800054da <_vfprintf_r+0x1b9e>
800054a6:	c3 d8       	rjmp	80005520 <_vfprintf_r+0x1be4>
800054a8:	2f 09       	sub	r9,-16
800054aa:	2f f8       	sub	r8,-1
800054ac:	fb 49 06 90 	st.w	sp[1680],r9
800054b0:	87 02       	st.w	r3[0x0],r2
800054b2:	87 10       	st.w	r3[0x4],r0
800054b4:	fb 48 06 8c 	st.w	sp[1676],r8
800054b8:	58 78       	cp.w	r8,7
800054ba:	e0 89 00 04 	brgt	800054c2 <_vfprintf_r+0x1b86>
800054be:	2f 83       	sub	r3,-8
800054c0:	c0 b8       	rjmp	800054d6 <_vfprintf_r+0x1b9a>
800054c2:	fa ca f9 78 	sub	r10,sp,-1672
800054c6:	02 9b       	mov	r11,r1
800054c8:	08 9c       	mov	r12,r4
800054ca:	fe b0 f2 2b 	rcall	80003920 <__sprint_r>
800054ce:	e0 81 01 b6 	brne	8000583a <_vfprintf_r+0x1efe>
800054d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800054d6:	21 06       	sub	r6,16
800054d8:	c0 48       	rjmp	800054e0 <_vfprintf_r+0x1ba4>
800054da:	fe c2 a6 c2 	sub	r2,pc,-22846
800054de:	31 00       	mov	r0,16
800054e0:	fa f9 06 90 	ld.w	r9,sp[1680]
800054e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054e8:	fe ca a6 d0 	sub	r10,pc,-22832
800054ec:	59 06       	cp.w	r6,16
800054ee:	fe 99 ff dd 	brgt	800054a8 <_vfprintf_r+0x1b6c>
800054f2:	0c 09       	add	r9,r6
800054f4:	2f f8       	sub	r8,-1
800054f6:	87 0a       	st.w	r3[0x0],r10
800054f8:	fb 49 06 90 	st.w	sp[1680],r9
800054fc:	87 16       	st.w	r3[0x4],r6
800054fe:	fb 48 06 8c 	st.w	sp[1676],r8
80005502:	58 78       	cp.w	r8,7
80005504:	e0 89 00 04 	brgt	8000550c <_vfprintf_r+0x1bd0>
80005508:	2f 83       	sub	r3,-8
8000550a:	c0 b8       	rjmp	80005520 <_vfprintf_r+0x1be4>
8000550c:	fa ca f9 78 	sub	r10,sp,-1672
80005510:	02 9b       	mov	r11,r1
80005512:	08 9c       	mov	r12,r4
80005514:	fe b0 f2 06 	rcall	80003920 <__sprint_r>
80005518:	e0 81 01 91 	brne	8000583a <_vfprintf_r+0x1efe>
8000551c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005520:	ed b5 00 00 	bld	r5,0x0
80005524:	e0 81 01 20 	brne	80005764 <_vfprintf_r+0x1e28>
80005528:	40 c9       	lddsp	r9,sp[0x30]
8000552a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000552e:	2f f8       	sub	r8,-1
80005530:	87 09       	st.w	r3[0x0],r9
80005532:	fb 48 06 90 	st.w	sp[1680],r8
80005536:	30 19       	mov	r9,1
80005538:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000553c:	87 19       	st.w	r3[0x4],r9
8000553e:	2f f8       	sub	r8,-1
80005540:	fb 48 06 8c 	st.w	sp[1676],r8
80005544:	c0 29       	rjmp	80005748 <_vfprintf_r+0x1e0c>
80005546:	14 09       	add	r9,r10
80005548:	2f f8       	sub	r8,-1
8000554a:	fb 49 06 90 	st.w	sp[1680],r9
8000554e:	87 06       	st.w	r3[0x0],r6
80005550:	87 1a       	st.w	r3[0x4],r10
80005552:	fb 48 06 8c 	st.w	sp[1676],r8
80005556:	58 78       	cp.w	r8,7
80005558:	e0 89 00 04 	brgt	80005560 <_vfprintf_r+0x1c24>
8000555c:	2f 83       	sub	r3,-8
8000555e:	c0 b8       	rjmp	80005574 <_vfprintf_r+0x1c38>
80005560:	fa ca f9 78 	sub	r10,sp,-1672
80005564:	02 9b       	mov	r11,r1
80005566:	08 9c       	mov	r12,r4
80005568:	fe b0 f1 dc 	rcall	80003920 <__sprint_r>
8000556c:	e0 81 01 67 	brne	8000583a <_vfprintf_r+0x1efe>
80005570:	fa c3 f9 e0 	sub	r3,sp,-1568
80005574:	40 c8       	lddsp	r8,sp[0x30]
80005576:	87 08       	st.w	r3[0x0],r8
80005578:	fa f8 06 90 	ld.w	r8,sp[1680]
8000557c:	2f f8       	sub	r8,-1
8000557e:	30 19       	mov	r9,1
80005580:	fb 48 06 90 	st.w	sp[1680],r8
80005584:	87 19       	st.w	r3[0x4],r9
80005586:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000558a:	2f f8       	sub	r8,-1
8000558c:	fb 48 06 8c 	st.w	sp[1676],r8
80005590:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005594:	58 78       	cp.w	r8,7
80005596:	e0 89 00 04 	brgt	8000559e <_vfprintf_r+0x1c62>
8000559a:	2f 83       	sub	r3,-8
8000559c:	c0 b8       	rjmp	800055b2 <_vfprintf_r+0x1c76>
8000559e:	fa ca f9 78 	sub	r10,sp,-1672
800055a2:	02 9b       	mov	r11,r1
800055a4:	08 9c       	mov	r12,r4
800055a6:	fe b0 f1 bd 	rcall	80003920 <__sprint_r>
800055aa:	e0 81 01 48 	brne	8000583a <_vfprintf_r+0x1efe>
800055ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800055b2:	04 06       	add	r6,r2
800055b4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800055b8:	87 06       	st.w	r3[0x0],r6
800055ba:	fa f9 06 90 	ld.w	r9,sp[1680]
800055be:	40 66       	lddsp	r6,sp[0x18]
800055c0:	40 6e       	lddsp	lr,sp[0x18]
800055c2:	10 16       	sub	r6,r8
800055c4:	f2 08 01 08 	sub	r8,r9,r8
800055c8:	87 16       	st.w	r3[0x4],r6
800055ca:	1c 08       	add	r8,lr
800055cc:	fb 48 06 90 	st.w	sp[1680],r8
800055d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055d4:	2f f8       	sub	r8,-1
800055d6:	fb 48 06 8c 	st.w	sp[1676],r8
800055da:	cb 78       	rjmp	80005748 <_vfprintf_r+0x1e0c>
800055dc:	40 6c       	lddsp	r12,sp[0x18]
800055de:	58 1c       	cp.w	r12,1
800055e0:	e0 89 00 06 	brgt	800055ec <_vfprintf_r+0x1cb0>
800055e4:	ed b5 00 00 	bld	r5,0x0
800055e8:	e0 81 00 85 	brne	800056f2 <_vfprintf_r+0x1db6>
800055ec:	fa f8 06 90 	ld.w	r8,sp[1680]
800055f0:	2f f8       	sub	r8,-1
800055f2:	30 19       	mov	r9,1
800055f4:	fb 48 06 90 	st.w	sp[1680],r8
800055f8:	87 06       	st.w	r3[0x0],r6
800055fa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055fe:	87 19       	st.w	r3[0x4],r9
80005600:	2f f8       	sub	r8,-1
80005602:	fb 48 06 8c 	st.w	sp[1676],r8
80005606:	58 78       	cp.w	r8,7
80005608:	e0 89 00 04 	brgt	80005610 <_vfprintf_r+0x1cd4>
8000560c:	2f 83       	sub	r3,-8
8000560e:	c0 b8       	rjmp	80005624 <_vfprintf_r+0x1ce8>
80005610:	fa ca f9 78 	sub	r10,sp,-1672
80005614:	02 9b       	mov	r11,r1
80005616:	08 9c       	mov	r12,r4
80005618:	fe b0 f1 84 	rcall	80003920 <__sprint_r>
8000561c:	e0 81 01 0f 	brne	8000583a <_vfprintf_r+0x1efe>
80005620:	fa c3 f9 e0 	sub	r3,sp,-1568
80005624:	fa f8 06 90 	ld.w	r8,sp[1680]
80005628:	2f f8       	sub	r8,-1
8000562a:	40 cb       	lddsp	r11,sp[0x30]
8000562c:	fb 48 06 90 	st.w	sp[1680],r8
80005630:	30 19       	mov	r9,1
80005632:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005636:	87 0b       	st.w	r3[0x0],r11
80005638:	2f f8       	sub	r8,-1
8000563a:	87 19       	st.w	r3[0x4],r9
8000563c:	fb 48 06 8c 	st.w	sp[1676],r8
80005640:	58 78       	cp.w	r8,7
80005642:	e0 89 00 05 	brgt	8000564c <_vfprintf_r+0x1d10>
80005646:	2f 83       	sub	r3,-8
80005648:	c0 c8       	rjmp	80005660 <_vfprintf_r+0x1d24>
8000564a:	d7 03       	nop
8000564c:	fa ca f9 78 	sub	r10,sp,-1672
80005650:	02 9b       	mov	r11,r1
80005652:	08 9c       	mov	r12,r4
80005654:	fe b0 f1 66 	rcall	80003920 <__sprint_r>
80005658:	e0 81 00 f1 	brne	8000583a <_vfprintf_r+0x1efe>
8000565c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005660:	30 08       	mov	r8,0
80005662:	30 09       	mov	r9,0
80005664:	40 5b       	lddsp	r11,sp[0x14]
80005666:	40 7a       	lddsp	r10,sp[0x1c]
80005668:	e0 a0 17 3d 	rcall	800084e2 <__avr32_f64_cmp_eq>
8000566c:	40 68       	lddsp	r8,sp[0x18]
8000566e:	20 18       	sub	r8,1
80005670:	58 0c       	cp.w	r12,0
80005672:	c0 d1       	brne	8000568c <_vfprintf_r+0x1d50>
80005674:	2f f6       	sub	r6,-1
80005676:	87 18       	st.w	r3[0x4],r8
80005678:	87 06       	st.w	r3[0x0],r6
8000567a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000567e:	10 06       	add	r6,r8
80005680:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005684:	fb 46 06 90 	st.w	sp[1680],r6
80005688:	2f f8       	sub	r8,-1
8000568a:	c3 18       	rjmp	800056ec <_vfprintf_r+0x1db0>
8000568c:	10 96       	mov	r6,r8
8000568e:	58 08       	cp.w	r8,0
80005690:	e0 89 00 1c 	brgt	800056c8 <_vfprintf_r+0x1d8c>
80005694:	c4 b8       	rjmp	8000572a <_vfprintf_r+0x1dee>
80005696:	2f 09       	sub	r9,-16
80005698:	2f f8       	sub	r8,-1
8000569a:	fb 49 06 90 	st.w	sp[1680],r9
8000569e:	87 02       	st.w	r3[0x0],r2
800056a0:	87 10       	st.w	r3[0x4],r0
800056a2:	fb 48 06 8c 	st.w	sp[1676],r8
800056a6:	58 78       	cp.w	r8,7
800056a8:	e0 89 00 04 	brgt	800056b0 <_vfprintf_r+0x1d74>
800056ac:	2f 83       	sub	r3,-8
800056ae:	c0 b8       	rjmp	800056c4 <_vfprintf_r+0x1d88>
800056b0:	fa ca f9 78 	sub	r10,sp,-1672
800056b4:	02 9b       	mov	r11,r1
800056b6:	08 9c       	mov	r12,r4
800056b8:	fe b0 f1 34 	rcall	80003920 <__sprint_r>
800056bc:	e0 81 00 bf 	brne	8000583a <_vfprintf_r+0x1efe>
800056c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800056c4:	21 06       	sub	r6,16
800056c6:	c0 48       	rjmp	800056ce <_vfprintf_r+0x1d92>
800056c8:	fe c2 a8 b0 	sub	r2,pc,-22352
800056cc:	31 00       	mov	r0,16
800056ce:	fa f9 06 90 	ld.w	r9,sp[1680]
800056d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056d6:	fe ca a8 be 	sub	r10,pc,-22338
800056da:	59 06       	cp.w	r6,16
800056dc:	fe 99 ff dd 	brgt	80005696 <_vfprintf_r+0x1d5a>
800056e0:	0c 09       	add	r9,r6
800056e2:	87 0a       	st.w	r3[0x0],r10
800056e4:	fb 49 06 90 	st.w	sp[1680],r9
800056e8:	2f f8       	sub	r8,-1
800056ea:	87 16       	st.w	r3[0x4],r6
800056ec:	fb 48 06 8c 	st.w	sp[1676],r8
800056f0:	c0 e8       	rjmp	8000570c <_vfprintf_r+0x1dd0>
800056f2:	fa f8 06 90 	ld.w	r8,sp[1680]
800056f6:	2f f8       	sub	r8,-1
800056f8:	30 19       	mov	r9,1
800056fa:	fb 48 06 90 	st.w	sp[1680],r8
800056fe:	87 06       	st.w	r3[0x0],r6
80005700:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005704:	87 19       	st.w	r3[0x4],r9
80005706:	2f f8       	sub	r8,-1
80005708:	fb 48 06 8c 	st.w	sp[1676],r8
8000570c:	58 78       	cp.w	r8,7
8000570e:	e0 89 00 04 	brgt	80005716 <_vfprintf_r+0x1dda>
80005712:	2f 83       	sub	r3,-8
80005714:	c0 b8       	rjmp	8000572a <_vfprintf_r+0x1dee>
80005716:	fa ca f9 78 	sub	r10,sp,-1672
8000571a:	02 9b       	mov	r11,r1
8000571c:	08 9c       	mov	r12,r4
8000571e:	fe b0 f1 01 	rcall	80003920 <__sprint_r>
80005722:	e0 81 00 8c 	brne	8000583a <_vfprintf_r+0x1efe>
80005726:	fa c3 f9 e0 	sub	r3,sp,-1568
8000572a:	40 ea       	lddsp	r10,sp[0x38]
8000572c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005730:	14 08       	add	r8,r10
80005732:	fa c9 f9 64 	sub	r9,sp,-1692
80005736:	fb 48 06 90 	st.w	sp[1680],r8
8000573a:	87 1a       	st.w	r3[0x4],r10
8000573c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005740:	87 09       	st.w	r3[0x0],r9
80005742:	2f f8       	sub	r8,-1
80005744:	fb 48 06 8c 	st.w	sp[1676],r8
80005748:	58 78       	cp.w	r8,7
8000574a:	e0 89 00 04 	brgt	80005752 <_vfprintf_r+0x1e16>
8000574e:	2f 83       	sub	r3,-8
80005750:	c0 a8       	rjmp	80005764 <_vfprintf_r+0x1e28>
80005752:	fa ca f9 78 	sub	r10,sp,-1672
80005756:	02 9b       	mov	r11,r1
80005758:	08 9c       	mov	r12,r4
8000575a:	fe b0 f0 e3 	rcall	80003920 <__sprint_r>
8000575e:	c6 e1       	brne	8000583a <_vfprintf_r+0x1efe>
80005760:	fa c3 f9 e0 	sub	r3,sp,-1568
80005764:	e2 15 00 04 	andl	r5,0x4,COH
80005768:	c3 f0       	breq	800057e6 <_vfprintf_r+0x1eaa>
8000576a:	40 86       	lddsp	r6,sp[0x20]
8000576c:	40 39       	lddsp	r9,sp[0xc]
8000576e:	12 16       	sub	r6,r9
80005770:	58 06       	cp.w	r6,0
80005772:	e0 89 00 1a 	brgt	800057a6 <_vfprintf_r+0x1e6a>
80005776:	c3 88       	rjmp	800057e6 <_vfprintf_r+0x1eaa>
80005778:	2f 09       	sub	r9,-16
8000577a:	2f f8       	sub	r8,-1
8000577c:	fb 49 06 90 	st.w	sp[1680],r9
80005780:	87 05       	st.w	r3[0x0],r5
80005782:	87 12       	st.w	r3[0x4],r2
80005784:	fb 48 06 8c 	st.w	sp[1676],r8
80005788:	58 78       	cp.w	r8,7
8000578a:	e0 89 00 04 	brgt	80005792 <_vfprintf_r+0x1e56>
8000578e:	2f 83       	sub	r3,-8
80005790:	c0 98       	rjmp	800057a2 <_vfprintf_r+0x1e66>
80005792:	00 9a       	mov	r10,r0
80005794:	02 9b       	mov	r11,r1
80005796:	08 9c       	mov	r12,r4
80005798:	fe b0 f0 c4 	rcall	80003920 <__sprint_r>
8000579c:	c4 f1       	brne	8000583a <_vfprintf_r+0x1efe>
8000579e:	fa c3 f9 e0 	sub	r3,sp,-1568
800057a2:	21 06       	sub	r6,16
800057a4:	c0 68       	rjmp	800057b0 <_vfprintf_r+0x1e74>
800057a6:	fe c5 a9 9e 	sub	r5,pc,-22114
800057aa:	31 02       	mov	r2,16
800057ac:	fa c0 f9 78 	sub	r0,sp,-1672
800057b0:	fa f9 06 90 	ld.w	r9,sp[1680]
800057b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057b8:	fe ca a9 b0 	sub	r10,pc,-22096
800057bc:	59 06       	cp.w	r6,16
800057be:	fe 99 ff dd 	brgt	80005778 <_vfprintf_r+0x1e3c>
800057c2:	0c 09       	add	r9,r6
800057c4:	2f f8       	sub	r8,-1
800057c6:	87 0a       	st.w	r3[0x0],r10
800057c8:	87 16       	st.w	r3[0x4],r6
800057ca:	fb 49 06 90 	st.w	sp[1680],r9
800057ce:	fb 48 06 8c 	st.w	sp[1676],r8
800057d2:	58 78       	cp.w	r8,7
800057d4:	e0 8a 00 09 	brle	800057e6 <_vfprintf_r+0x1eaa>
800057d8:	fa ca f9 78 	sub	r10,sp,-1672
800057dc:	02 9b       	mov	r11,r1
800057de:	08 9c       	mov	r12,r4
800057e0:	fe b0 f0 a0 	rcall	80003920 <__sprint_r>
800057e4:	c2 b1       	brne	8000583a <_vfprintf_r+0x1efe>
800057e6:	40 bc       	lddsp	r12,sp[0x2c]
800057e8:	40 36       	lddsp	r6,sp[0xc]
800057ea:	40 8e       	lddsp	lr,sp[0x20]
800057ec:	ec 0e 0c 48 	max	r8,r6,lr
800057f0:	10 0c       	add	r12,r8
800057f2:	50 bc       	stdsp	sp[0x2c],r12
800057f4:	fa f8 06 90 	ld.w	r8,sp[1680]
800057f8:	58 08       	cp.w	r8,0
800057fa:	c0 80       	breq	8000580a <_vfprintf_r+0x1ece>
800057fc:	fa ca f9 78 	sub	r10,sp,-1672
80005800:	02 9b       	mov	r11,r1
80005802:	08 9c       	mov	r12,r4
80005804:	fe b0 f0 8e 	rcall	80003920 <__sprint_r>
80005808:	c1 91       	brne	8000583a <_vfprintf_r+0x1efe>
8000580a:	30 0b       	mov	r11,0
8000580c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005810:	fb 4b 06 8c 	st.w	sp[1676],r11
80005814:	fe 9f f1 22 	bral	80003a58 <_vfprintf_r+0x11c>
80005818:	08 95       	mov	r5,r4
8000581a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000581e:	58 08       	cp.w	r8,0
80005820:	c0 80       	breq	80005830 <_vfprintf_r+0x1ef4>
80005822:	08 9c       	mov	r12,r4
80005824:	fa ca f9 78 	sub	r10,sp,-1672
80005828:	02 9b       	mov	r11,r1
8000582a:	fe b0 f0 7b 	rcall	80003920 <__sprint_r>
8000582e:	c0 61       	brne	8000583a <_vfprintf_r+0x1efe>
80005830:	30 08       	mov	r8,0
80005832:	fb 48 06 8c 	st.w	sp[1676],r8
80005836:	c0 28       	rjmp	8000583a <_vfprintf_r+0x1efe>
80005838:	40 41       	lddsp	r1,sp[0x10]
8000583a:	82 68       	ld.sh	r8,r1[0xc]
8000583c:	ed b8 00 06 	bld	r8,0x6
80005840:	c0 31       	brne	80005846 <_vfprintf_r+0x1f0a>
80005842:	3f fa       	mov	r10,-1
80005844:	50 ba       	stdsp	sp[0x2c],r10
80005846:	40 bc       	lddsp	r12,sp[0x2c]
80005848:	fe 3d f9 44 	sub	sp,-1724
8000584c:	d8 32       	popm	r0-r7,pc
8000584e:	d7 03       	nop

80005850 <__swsetup_r>:
80005850:	d4 21       	pushm	r4-r7,lr
80005852:	e0 68 00 f8 	mov	r8,248
80005856:	18 96       	mov	r6,r12
80005858:	16 97       	mov	r7,r11
8000585a:	70 0c       	ld.w	r12,r8[0x0]
8000585c:	58 0c       	cp.w	r12,0
8000585e:	c0 60       	breq	8000586a <__swsetup_r+0x1a>
80005860:	78 68       	ld.w	r8,r12[0x18]
80005862:	58 08       	cp.w	r8,0
80005864:	c0 31       	brne	8000586a <__swsetup_r+0x1a>
80005866:	e0 a0 07 b9 	rcall	800067d8 <__sinit>
8000586a:	fe c8 a9 32 	sub	r8,pc,-22222
8000586e:	10 37       	cp.w	r7,r8
80005870:	c0 61       	brne	8000587c <__swsetup_r+0x2c>
80005872:	e0 68 00 f8 	mov	r8,248
80005876:	70 08       	ld.w	r8,r8[0x0]
80005878:	70 07       	ld.w	r7,r8[0x0]
8000587a:	c1 28       	rjmp	8000589e <__swsetup_r+0x4e>
8000587c:	fe c8 a9 24 	sub	r8,pc,-22236
80005880:	10 37       	cp.w	r7,r8
80005882:	c0 61       	brne	8000588e <__swsetup_r+0x3e>
80005884:	e0 68 00 f8 	mov	r8,248
80005888:	70 08       	ld.w	r8,r8[0x0]
8000588a:	70 17       	ld.w	r7,r8[0x4]
8000588c:	c0 98       	rjmp	8000589e <__swsetup_r+0x4e>
8000588e:	fe c8 a9 16 	sub	r8,pc,-22250
80005892:	10 37       	cp.w	r7,r8
80005894:	c0 51       	brne	8000589e <__swsetup_r+0x4e>
80005896:	e0 68 00 f8 	mov	r8,248
8000589a:	70 08       	ld.w	r8,r8[0x0]
8000589c:	70 27       	ld.w	r7,r8[0x8]
8000589e:	8e 68       	ld.sh	r8,r7[0xc]
800058a0:	ed b8 00 03 	bld	r8,0x3
800058a4:	c1 e0       	breq	800058e0 <__swsetup_r+0x90>
800058a6:	ed b8 00 04 	bld	r8,0x4
800058aa:	c3 e1       	brne	80005926 <__swsetup_r+0xd6>
800058ac:	ed b8 00 02 	bld	r8,0x2
800058b0:	c1 51       	brne	800058da <__swsetup_r+0x8a>
800058b2:	6e db       	ld.w	r11,r7[0x34]
800058b4:	58 0b       	cp.w	r11,0
800058b6:	c0 a0       	breq	800058ca <__swsetup_r+0x7a>
800058b8:	ee c8 ff bc 	sub	r8,r7,-68
800058bc:	10 3b       	cp.w	r11,r8
800058be:	c0 40       	breq	800058c6 <__swsetup_r+0x76>
800058c0:	0c 9c       	mov	r12,r6
800058c2:	e0 a0 08 25 	rcall	8000690c <_free_r>
800058c6:	30 08       	mov	r8,0
800058c8:	8f d8       	st.w	r7[0x34],r8
800058ca:	8e 68       	ld.sh	r8,r7[0xc]
800058cc:	e0 18 ff db 	andl	r8,0xffdb
800058d0:	ae 68       	st.h	r7[0xc],r8
800058d2:	30 08       	mov	r8,0
800058d4:	8f 18       	st.w	r7[0x4],r8
800058d6:	6e 48       	ld.w	r8,r7[0x10]
800058d8:	8f 08       	st.w	r7[0x0],r8
800058da:	8e 68       	ld.sh	r8,r7[0xc]
800058dc:	a3 b8       	sbr	r8,0x3
800058de:	ae 68       	st.h	r7[0xc],r8
800058e0:	6e 48       	ld.w	r8,r7[0x10]
800058e2:	58 08       	cp.w	r8,0
800058e4:	c0 b1       	brne	800058fa <__swsetup_r+0xaa>
800058e6:	8e 68       	ld.sh	r8,r7[0xc]
800058e8:	e2 18 02 80 	andl	r8,0x280,COH
800058ec:	e0 48 02 00 	cp.w	r8,512
800058f0:	c0 50       	breq	800058fa <__swsetup_r+0xaa>
800058f2:	0c 9c       	mov	r12,r6
800058f4:	0e 9b       	mov	r11,r7
800058f6:	e0 a0 0a 4b 	rcall	80006d8c <__smakebuf_r>
800058fa:	8e 69       	ld.sh	r9,r7[0xc]
800058fc:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005900:	c0 70       	breq	8000590e <__swsetup_r+0xbe>
80005902:	30 08       	mov	r8,0
80005904:	8f 28       	st.w	r7[0x8],r8
80005906:	6e 58       	ld.w	r8,r7[0x14]
80005908:	5c 38       	neg	r8
8000590a:	8f 68       	st.w	r7[0x18],r8
8000590c:	c0 68       	rjmp	80005918 <__swsetup_r+0xc8>
8000590e:	ed b9 00 01 	bld	r9,0x1
80005912:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005916:	8f 28       	st.w	r7[0x8],r8
80005918:	6e 48       	ld.w	r8,r7[0x10]
8000591a:	58 08       	cp.w	r8,0
8000591c:	c0 61       	brne	80005928 <__swsetup_r+0xd8>
8000591e:	8e 68       	ld.sh	r8,r7[0xc]
80005920:	ed b8 00 07 	bld	r8,0x7
80005924:	c0 21       	brne	80005928 <__swsetup_r+0xd8>
80005926:	dc 2a       	popm	r4-r7,pc,r12=-1
80005928:	d8 2a       	popm	r4-r7,pc,r12=0
8000592a:	d7 03       	nop

8000592c <quorem>:
8000592c:	d4 31       	pushm	r0-r7,lr
8000592e:	20 2d       	sub	sp,8
80005930:	18 97       	mov	r7,r12
80005932:	78 48       	ld.w	r8,r12[0x10]
80005934:	76 46       	ld.w	r6,r11[0x10]
80005936:	0c 38       	cp.w	r8,r6
80005938:	c0 34       	brge	8000593e <quorem+0x12>
8000593a:	30 0c       	mov	r12,0
8000593c:	c8 58       	rjmp	80005a46 <quorem+0x11a>
8000593e:	ec c2 ff fc 	sub	r2,r6,-4
80005942:	f6 c3 ff ec 	sub	r3,r11,-20
80005946:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000594a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000594e:	2f f9       	sub	r9,-1
80005950:	20 16       	sub	r6,1
80005952:	f8 09 0d 08 	divu	r8,r12,r9
80005956:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000595a:	ee c4 ff ec 	sub	r4,r7,-20
8000595e:	10 95       	mov	r5,r8
80005960:	58 08       	cp.w	r8,0
80005962:	c4 10       	breq	800059e4 <quorem+0xb8>
80005964:	30 09       	mov	r9,0
80005966:	06 9a       	mov	r10,r3
80005968:	08 98       	mov	r8,r4
8000596a:	12 91       	mov	r1,r9
8000596c:	50 0b       	stdsp	sp[0x0],r11
8000596e:	70 0e       	ld.w	lr,r8[0x0]
80005970:	b1 8e       	lsr	lr,0x10
80005972:	50 1e       	stdsp	sp[0x4],lr
80005974:	15 0e       	ld.w	lr,r10++
80005976:	fc 00 16 10 	lsr	r0,lr,0x10
8000597a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000597e:	ea 0e 03 41 	mac	r1,r5,lr
80005982:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005986:	b1 81       	lsr	r1,0x10
80005988:	40 1b       	lddsp	r11,sp[0x4]
8000598a:	ea 00 02 40 	mul	r0,r5,r0
8000598e:	e2 00 00 00 	add	r0,r1,r0
80005992:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005996:	02 1b       	sub	r11,r1
80005998:	50 1b       	stdsp	sp[0x4],r11
8000599a:	70 0b       	ld.w	r11,r8[0x0]
8000599c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800059a0:	02 09       	add	r9,r1
800059a2:	f2 0e 01 0e 	sub	lr,r9,lr
800059a6:	b0 1e       	st.h	r8[0x2],lr
800059a8:	fc 09 14 10 	asr	r9,lr,0x10
800059ac:	40 1e       	lddsp	lr,sp[0x4]
800059ae:	fc 09 00 09 	add	r9,lr,r9
800059b2:	b0 09       	st.h	r8[0x0],r9
800059b4:	e0 01 16 10 	lsr	r1,r0,0x10
800059b8:	2f c8       	sub	r8,-4
800059ba:	b1 49       	asr	r9,0x10
800059bc:	04 3a       	cp.w	r10,r2
800059be:	fe 98 ff d8 	brls	8000596e <quorem+0x42>
800059c2:	40 0b       	lddsp	r11,sp[0x0]
800059c4:	58 0c       	cp.w	r12,0
800059c6:	c0 f1       	brne	800059e4 <quorem+0xb8>
800059c8:	ec c8 ff fb 	sub	r8,r6,-5
800059cc:	ee 08 00 28 	add	r8,r7,r8<<0x2
800059d0:	c0 28       	rjmp	800059d4 <quorem+0xa8>
800059d2:	20 16       	sub	r6,1
800059d4:	20 48       	sub	r8,4
800059d6:	08 38       	cp.w	r8,r4
800059d8:	e0 88 00 05 	brls	800059e2 <quorem+0xb6>
800059dc:	70 09       	ld.w	r9,r8[0x0]
800059de:	58 09       	cp.w	r9,0
800059e0:	cf 90       	breq	800059d2 <quorem+0xa6>
800059e2:	8f 46       	st.w	r7[0x10],r6
800059e4:	0e 9c       	mov	r12,r7
800059e6:	e0 a0 0c fb 	rcall	800073dc <__mcmp>
800059ea:	c2 d5       	brlt	80005a44 <quorem+0x118>
800059ec:	2f f5       	sub	r5,-1
800059ee:	08 98       	mov	r8,r4
800059f0:	30 09       	mov	r9,0
800059f2:	07 0b       	ld.w	r11,r3++
800059f4:	f6 0a 16 10 	lsr	r10,r11,0x10
800059f8:	70 0c       	ld.w	r12,r8[0x0]
800059fa:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800059fe:	f8 0e 16 10 	lsr	lr,r12,0x10
80005a02:	14 1e       	sub	lr,r10
80005a04:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005a08:	16 1a       	sub	r10,r11
80005a0a:	12 0a       	add	r10,r9
80005a0c:	b0 1a       	st.h	r8[0x2],r10
80005a0e:	b1 4a       	asr	r10,0x10
80005a10:	fc 0a 00 09 	add	r9,lr,r10
80005a14:	b0 09       	st.h	r8[0x0],r9
80005a16:	2f c8       	sub	r8,-4
80005a18:	b1 49       	asr	r9,0x10
80005a1a:	04 33       	cp.w	r3,r2
80005a1c:	fe 98 ff eb 	brls	800059f2 <quorem+0xc6>
80005a20:	ec c8 ff fb 	sub	r8,r6,-5
80005a24:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005a28:	58 09       	cp.w	r9,0
80005a2a:	c0 d1       	brne	80005a44 <quorem+0x118>
80005a2c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005a30:	c0 28       	rjmp	80005a34 <quorem+0x108>
80005a32:	20 16       	sub	r6,1
80005a34:	20 48       	sub	r8,4
80005a36:	08 38       	cp.w	r8,r4
80005a38:	e0 88 00 05 	brls	80005a42 <quorem+0x116>
80005a3c:	70 09       	ld.w	r9,r8[0x0]
80005a3e:	58 09       	cp.w	r9,0
80005a40:	cf 90       	breq	80005a32 <quorem+0x106>
80005a42:	8f 46       	st.w	r7[0x10],r6
80005a44:	0a 9c       	mov	r12,r5
80005a46:	2f ed       	sub	sp,-8
80005a48:	d8 32       	popm	r0-r7,pc
80005a4a:	d7 03       	nop

80005a4c <_dtoa_r>:
80005a4c:	d4 31       	pushm	r0-r7,lr
80005a4e:	21 ad       	sub	sp,104
80005a50:	fa c4 ff 74 	sub	r4,sp,-140
80005a54:	18 97       	mov	r7,r12
80005a56:	16 95       	mov	r5,r11
80005a58:	68 2c       	ld.w	r12,r4[0x8]
80005a5a:	50 c9       	stdsp	sp[0x30],r9
80005a5c:	68 16       	ld.w	r6,r4[0x4]
80005a5e:	68 09       	ld.w	r9,r4[0x0]
80005a60:	50 e8       	stdsp	sp[0x38],r8
80005a62:	14 94       	mov	r4,r10
80005a64:	51 2c       	stdsp	sp[0x48],r12
80005a66:	fa e5 00 08 	st.d	sp[8],r4
80005a6a:	51 59       	stdsp	sp[0x54],r9
80005a6c:	6e 95       	ld.w	r5,r7[0x24]
80005a6e:	58 05       	cp.w	r5,0
80005a70:	c0 91       	brne	80005a82 <_dtoa_r+0x36>
80005a72:	31 0c       	mov	r12,16
80005a74:	e0 a0 09 ea 	rcall	80006e48 <malloc>
80005a78:	99 35       	st.w	r12[0xc],r5
80005a7a:	8f 9c       	st.w	r7[0x24],r12
80005a7c:	99 15       	st.w	r12[0x4],r5
80005a7e:	99 25       	st.w	r12[0x8],r5
80005a80:	99 05       	st.w	r12[0x0],r5
80005a82:	6e 99       	ld.w	r9,r7[0x24]
80005a84:	72 08       	ld.w	r8,r9[0x0]
80005a86:	58 08       	cp.w	r8,0
80005a88:	c0 f0       	breq	80005aa6 <_dtoa_r+0x5a>
80005a8a:	72 1a       	ld.w	r10,r9[0x4]
80005a8c:	91 1a       	st.w	r8[0x4],r10
80005a8e:	30 1a       	mov	r10,1
80005a90:	72 19       	ld.w	r9,r9[0x4]
80005a92:	f4 09 09 49 	lsl	r9,r10,r9
80005a96:	10 9b       	mov	r11,r8
80005a98:	91 29       	st.w	r8[0x8],r9
80005a9a:	0e 9c       	mov	r12,r7
80005a9c:	e0 a0 0c ba 	rcall	80007410 <_Bfree>
80005aa0:	6e 98       	ld.w	r8,r7[0x24]
80005aa2:	30 09       	mov	r9,0
80005aa4:	91 09       	st.w	r8[0x0],r9
80005aa6:	40 28       	lddsp	r8,sp[0x8]
80005aa8:	10 94       	mov	r4,r8
80005aaa:	58 08       	cp.w	r8,0
80005aac:	c0 64       	brge	80005ab8 <_dtoa_r+0x6c>
80005aae:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005ab2:	50 28       	stdsp	sp[0x8],r8
80005ab4:	30 18       	mov	r8,1
80005ab6:	c0 28       	rjmp	80005aba <_dtoa_r+0x6e>
80005ab8:	30 08       	mov	r8,0
80005aba:	8d 08       	st.w	r6[0x0],r8
80005abc:	fc 1c 7f f0 	movh	r12,0x7ff0
80005ac0:	40 26       	lddsp	r6,sp[0x8]
80005ac2:	0c 98       	mov	r8,r6
80005ac4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005ac8:	18 38       	cp.w	r8,r12
80005aca:	c2 01       	brne	80005b0a <_dtoa_r+0xbe>
80005acc:	e0 68 27 0f 	mov	r8,9999
80005ad0:	41 5b       	lddsp	r11,sp[0x54]
80005ad2:	97 08       	st.w	r11[0x0],r8
80005ad4:	40 3a       	lddsp	r10,sp[0xc]
80005ad6:	58 0a       	cp.w	r10,0
80005ad8:	c0 71       	brne	80005ae6 <_dtoa_r+0x9a>
80005ada:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005ade:	c0 41       	brne	80005ae6 <_dtoa_r+0x9a>
80005ae0:	fe cc ab b8 	sub	r12,pc,-21576
80005ae4:	c0 38       	rjmp	80005aea <_dtoa_r+0x9e>
80005ae6:	fe cc ab b2 	sub	r12,pc,-21582
80005aea:	41 29       	lddsp	r9,sp[0x48]
80005aec:	58 09       	cp.w	r9,0
80005aee:	e0 80 05 9a 	breq	80006622 <_dtoa_r+0xbd6>
80005af2:	f8 c8 ff fd 	sub	r8,r12,-3
80005af6:	f8 c9 ff f8 	sub	r9,r12,-8
80005afa:	11 8b       	ld.ub	r11,r8[0x0]
80005afc:	30 0a       	mov	r10,0
80005afe:	41 25       	lddsp	r5,sp[0x48]
80005b00:	f4 0b 18 00 	cp.b	r11,r10
80005b04:	f2 08 17 10 	movne	r8,r9
80005b08:	c1 68       	rjmp	80005b34 <_dtoa_r+0xe8>
80005b0a:	fa ea 00 08 	ld.d	r10,sp[8]
80005b0e:	30 08       	mov	r8,0
80005b10:	fa eb 00 3c 	st.d	sp[60],r10
80005b14:	30 09       	mov	r9,0
80005b16:	e0 a0 14 e6 	rcall	800084e2 <__avr32_f64_cmp_eq>
80005b1a:	c1 00       	breq	80005b3a <_dtoa_r+0xee>
80005b1c:	30 18       	mov	r8,1
80005b1e:	41 5a       	lddsp	r10,sp[0x54]
80005b20:	95 08       	st.w	r10[0x0],r8
80005b22:	fe cc ad 1e 	sub	r12,pc,-21218
80005b26:	41 29       	lddsp	r9,sp[0x48]
80005b28:	f8 08 00 08 	add	r8,r12,r8
80005b2c:	58 09       	cp.w	r9,0
80005b2e:	e0 80 05 7a 	breq	80006622 <_dtoa_r+0xbd6>
80005b32:	12 95       	mov	r5,r9
80005b34:	8b 08       	st.w	r5[0x0],r8
80005b36:	e0 8f 05 76 	bral	80006622 <_dtoa_r+0xbd6>
80005b3a:	fa c8 ff 9c 	sub	r8,sp,-100
80005b3e:	fa c9 ff a0 	sub	r9,sp,-96
80005b42:	fa ea 00 3c 	ld.d	r10,sp[60]
80005b46:	0e 9c       	mov	r12,r7
80005b48:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005b4c:	e0 a0 0c b4 	rcall	800074b4 <__d2b>
80005b50:	18 93       	mov	r3,r12
80005b52:	58 05       	cp.w	r5,0
80005b54:	c0 d0       	breq	80005b6e <_dtoa_r+0x122>
80005b56:	fa ea 00 3c 	ld.d	r10,sp[60]
80005b5a:	30 04       	mov	r4,0
80005b5c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005b60:	ea c5 03 ff 	sub	r5,r5,1023
80005b64:	10 9b       	mov	r11,r8
80005b66:	51 74       	stdsp	sp[0x5c],r4
80005b68:	ea 1b 3f f0 	orh	r11,0x3ff0
80005b6c:	c2 58       	rjmp	80005bb6 <_dtoa_r+0x16a>
80005b6e:	41 88       	lddsp	r8,sp[0x60]
80005b70:	41 9c       	lddsp	r12,sp[0x64]
80005b72:	10 0c       	add	r12,r8
80005b74:	f8 c5 fb ce 	sub	r5,r12,-1074
80005b78:	e0 45 00 20 	cp.w	r5,32
80005b7c:	e0 8a 00 0e 	brle	80005b98 <_dtoa_r+0x14c>
80005b80:	f8 cc fb ee 	sub	r12,r12,-1042
80005b84:	40 3b       	lddsp	r11,sp[0xc]
80005b86:	ea 08 11 40 	rsub	r8,r5,64
80005b8a:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005b8e:	ec 08 09 46 	lsl	r6,r6,r8
80005b92:	0c 4c       	or	r12,r6
80005b94:	c0 78       	rjmp	80005ba2 <_dtoa_r+0x156>
80005b96:	d7 03       	nop
80005b98:	ea 0c 11 20 	rsub	r12,r5,32
80005b9c:	40 3a       	lddsp	r10,sp[0xc]
80005b9e:	f4 0c 09 4c 	lsl	r12,r10,r12
80005ba2:	e0 a0 14 2c 	rcall	800083fa <__avr32_u32_to_f64>
80005ba6:	fc 18 fe 10 	movh	r8,0xfe10
80005baa:	30 19       	mov	r9,1
80005bac:	ea c5 04 33 	sub	r5,r5,1075
80005bb0:	f0 0b 00 0b 	add	r11,r8,r11
80005bb4:	51 79       	stdsp	sp[0x5c],r9
80005bb6:	30 08       	mov	r8,0
80005bb8:	fc 19 3f f8 	movh	r9,0x3ff8
80005bbc:	e0 a0 12 b4 	rcall	80008124 <__avr32_f64_sub>
80005bc0:	e0 68 43 61 	mov	r8,17249
80005bc4:	ea 18 63 6f 	orh	r8,0x636f
80005bc8:	e0 69 87 a7 	mov	r9,34727
80005bcc:	ea 19 3f d2 	orh	r9,0x3fd2
80005bd0:	e0 a0 11 be 	rcall	80007f4c <__avr32_f64_mul>
80005bd4:	e0 68 c8 b3 	mov	r8,51379
80005bd8:	ea 18 8b 60 	orh	r8,0x8b60
80005bdc:	e0 69 8a 28 	mov	r9,35368
80005be0:	ea 19 3f c6 	orh	r9,0x3fc6
80005be4:	e0 a0 13 6e 	rcall	800082c0 <__avr32_f64_add>
80005be8:	0a 9c       	mov	r12,r5
80005bea:	14 90       	mov	r0,r10
80005bec:	16 91       	mov	r1,r11
80005bee:	e0 a0 14 0a 	rcall	80008402 <__avr32_s32_to_f64>
80005bf2:	e0 68 79 fb 	mov	r8,31227
80005bf6:	ea 18 50 9f 	orh	r8,0x509f
80005bfa:	e0 69 44 13 	mov	r9,17427
80005bfe:	ea 19 3f d3 	orh	r9,0x3fd3
80005c02:	e0 a0 11 a5 	rcall	80007f4c <__avr32_f64_mul>
80005c06:	14 98       	mov	r8,r10
80005c08:	16 99       	mov	r9,r11
80005c0a:	00 9a       	mov	r10,r0
80005c0c:	02 9b       	mov	r11,r1
80005c0e:	e0 a0 13 59 	rcall	800082c0 <__avr32_f64_add>
80005c12:	14 90       	mov	r0,r10
80005c14:	16 91       	mov	r1,r11
80005c16:	e0 a0 13 df 	rcall	800083d4 <__avr32_f64_to_s32>
80005c1a:	30 08       	mov	r8,0
80005c1c:	18 96       	mov	r6,r12
80005c1e:	30 09       	mov	r9,0
80005c20:	00 9a       	mov	r10,r0
80005c22:	02 9b       	mov	r11,r1
80005c24:	e0 a0 14 a6 	rcall	80008570 <__avr32_f64_cmp_lt>
80005c28:	c0 c0       	breq	80005c40 <_dtoa_r+0x1f4>
80005c2a:	0c 9c       	mov	r12,r6
80005c2c:	e0 a0 13 eb 	rcall	80008402 <__avr32_s32_to_f64>
80005c30:	14 98       	mov	r8,r10
80005c32:	16 99       	mov	r9,r11
80005c34:	00 9a       	mov	r10,r0
80005c36:	02 9b       	mov	r11,r1
80005c38:	e0 a0 14 55 	rcall	800084e2 <__avr32_f64_cmp_eq>
80005c3c:	f7 b6 00 01 	subeq	r6,1
80005c40:	59 66       	cp.w	r6,22
80005c42:	e0 88 00 05 	brls	80005c4c <_dtoa_r+0x200>
80005c46:	30 18       	mov	r8,1
80005c48:	51 48       	stdsp	sp[0x50],r8
80005c4a:	c1 38       	rjmp	80005c70 <_dtoa_r+0x224>
80005c4c:	fe c8 ac 64 	sub	r8,pc,-21404
80005c50:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c54:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005c58:	e0 a0 14 8c 	rcall	80008570 <__avr32_f64_cmp_lt>
80005c5c:	f9 b4 00 00 	moveq	r4,0
80005c60:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005c64:	f7 b6 01 01 	subne	r6,1
80005c68:	f9 bc 01 00 	movne	r12,0
80005c6c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005c70:	41 90       	lddsp	r0,sp[0x64]
80005c72:	20 10       	sub	r0,1
80005c74:	0a 10       	sub	r0,r5
80005c76:	c0 46       	brmi	80005c7e <_dtoa_r+0x232>
80005c78:	50 40       	stdsp	sp[0x10],r0
80005c7a:	30 00       	mov	r0,0
80005c7c:	c0 48       	rjmp	80005c84 <_dtoa_r+0x238>
80005c7e:	30 0b       	mov	r11,0
80005c80:	5c 30       	neg	r0
80005c82:	50 4b       	stdsp	sp[0x10],r11
80005c84:	ec 02 11 00 	rsub	r2,r6,0
80005c88:	58 06       	cp.w	r6,0
80005c8a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005c8e:	f5 d6 e4 0a 	addge	r10,r10,r6
80005c92:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005c96:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005c9a:	f9 b2 04 00 	movge	r2,0
80005c9e:	e1 d6 e5 10 	sublt	r0,r0,r6
80005ca2:	f9 b9 05 00 	movlt	r9,0
80005ca6:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005caa:	40 c8       	lddsp	r8,sp[0x30]
80005cac:	58 98       	cp.w	r8,9
80005cae:	e0 8b 00 20 	brhi	80005cee <_dtoa_r+0x2a2>
80005cb2:	58 58       	cp.w	r8,5
80005cb4:	f9 b4 0a 01 	movle	r4,1
80005cb8:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005cbc:	f7 b5 09 04 	subgt	r5,4
80005cc0:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005cc4:	f9 b4 09 00 	movgt	r4,0
80005cc8:	40 cc       	lddsp	r12,sp[0x30]
80005cca:	58 3c       	cp.w	r12,3
80005ccc:	c2 d0       	breq	80005d26 <_dtoa_r+0x2da>
80005cce:	e0 89 00 05 	brgt	80005cd8 <_dtoa_r+0x28c>
80005cd2:	58 2c       	cp.w	r12,2
80005cd4:	c1 01       	brne	80005cf4 <_dtoa_r+0x2a8>
80005cd6:	c1 88       	rjmp	80005d06 <_dtoa_r+0x2ba>
80005cd8:	40 cb       	lddsp	r11,sp[0x30]
80005cda:	58 4b       	cp.w	r11,4
80005cdc:	c0 60       	breq	80005ce8 <_dtoa_r+0x29c>
80005cde:	58 5b       	cp.w	r11,5
80005ce0:	c0 a1       	brne	80005cf4 <_dtoa_r+0x2a8>
80005ce2:	30 1a       	mov	r10,1
80005ce4:	50 da       	stdsp	sp[0x34],r10
80005ce6:	c2 28       	rjmp	80005d2a <_dtoa_r+0x2de>
80005ce8:	30 19       	mov	r9,1
80005cea:	50 d9       	stdsp	sp[0x34],r9
80005cec:	c0 f8       	rjmp	80005d0a <_dtoa_r+0x2be>
80005cee:	30 08       	mov	r8,0
80005cf0:	30 14       	mov	r4,1
80005cf2:	50 c8       	stdsp	sp[0x30],r8
80005cf4:	3f f5       	mov	r5,-1
80005cf6:	30 1c       	mov	r12,1
80005cf8:	30 0b       	mov	r11,0
80005cfa:	50 95       	stdsp	sp[0x24],r5
80005cfc:	50 dc       	stdsp	sp[0x34],r12
80005cfe:	0a 91       	mov	r1,r5
80005d00:	31 28       	mov	r8,18
80005d02:	50 eb       	stdsp	sp[0x38],r11
80005d04:	c2 08       	rjmp	80005d44 <_dtoa_r+0x2f8>
80005d06:	30 0a       	mov	r10,0
80005d08:	50 da       	stdsp	sp[0x34],r10
80005d0a:	40 e9       	lddsp	r9,sp[0x38]
80005d0c:	58 09       	cp.w	r9,0
80005d0e:	e0 89 00 07 	brgt	80005d1c <_dtoa_r+0x2d0>
80005d12:	30 18       	mov	r8,1
80005d14:	50 98       	stdsp	sp[0x24],r8
80005d16:	10 91       	mov	r1,r8
80005d18:	50 e8       	stdsp	sp[0x38],r8
80005d1a:	c1 58       	rjmp	80005d44 <_dtoa_r+0x2f8>
80005d1c:	40 e5       	lddsp	r5,sp[0x38]
80005d1e:	50 95       	stdsp	sp[0x24],r5
80005d20:	0a 91       	mov	r1,r5
80005d22:	0a 98       	mov	r8,r5
80005d24:	c1 08       	rjmp	80005d44 <_dtoa_r+0x2f8>
80005d26:	30 0c       	mov	r12,0
80005d28:	50 dc       	stdsp	sp[0x34],r12
80005d2a:	40 eb       	lddsp	r11,sp[0x38]
80005d2c:	ec 0b 00 0b 	add	r11,r6,r11
80005d30:	50 9b       	stdsp	sp[0x24],r11
80005d32:	16 98       	mov	r8,r11
80005d34:	2f f8       	sub	r8,-1
80005d36:	58 08       	cp.w	r8,0
80005d38:	e0 89 00 05 	brgt	80005d42 <_dtoa_r+0x2f6>
80005d3c:	10 91       	mov	r1,r8
80005d3e:	30 18       	mov	r8,1
80005d40:	c0 28       	rjmp	80005d44 <_dtoa_r+0x2f8>
80005d42:	10 91       	mov	r1,r8
80005d44:	30 09       	mov	r9,0
80005d46:	6e 9a       	ld.w	r10,r7[0x24]
80005d48:	95 19       	st.w	r10[0x4],r9
80005d4a:	30 49       	mov	r9,4
80005d4c:	c0 68       	rjmp	80005d58 <_dtoa_r+0x30c>
80005d4e:	d7 03       	nop
80005d50:	6a 1a       	ld.w	r10,r5[0x4]
80005d52:	a1 79       	lsl	r9,0x1
80005d54:	2f fa       	sub	r10,-1
80005d56:	8b 1a       	st.w	r5[0x4],r10
80005d58:	6e 95       	ld.w	r5,r7[0x24]
80005d5a:	f2 ca ff ec 	sub	r10,r9,-20
80005d5e:	10 3a       	cp.w	r10,r8
80005d60:	fe 98 ff f8 	brls	80005d50 <_dtoa_r+0x304>
80005d64:	6a 1b       	ld.w	r11,r5[0x4]
80005d66:	0e 9c       	mov	r12,r7
80005d68:	e0 a0 0b 6e 	rcall	80007444 <_Balloc>
80005d6c:	58 e1       	cp.w	r1,14
80005d6e:	5f 88       	srls	r8
80005d70:	8b 0c       	st.w	r5[0x0],r12
80005d72:	f1 e4 00 04 	and	r4,r8,r4
80005d76:	6e 98       	ld.w	r8,r7[0x24]
80005d78:	70 08       	ld.w	r8,r8[0x0]
80005d7a:	50 88       	stdsp	sp[0x20],r8
80005d7c:	e0 80 01 82 	breq	80006080 <_dtoa_r+0x634>
80005d80:	58 06       	cp.w	r6,0
80005d82:	e0 8a 00 43 	brle	80005e08 <_dtoa_r+0x3bc>
80005d86:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005d8a:	fe c8 ad a2 	sub	r8,pc,-21086
80005d8e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005d92:	fa e5 00 18 	st.d	sp[24],r4
80005d96:	ec 04 14 04 	asr	r4,r6,0x4
80005d9a:	ed b4 00 04 	bld	r4,0x4
80005d9e:	c0 30       	breq	80005da4 <_dtoa_r+0x358>
80005da0:	30 25       	mov	r5,2
80005da2:	c1 08       	rjmp	80005dc2 <_dtoa_r+0x376>
80005da4:	fe c8 ac f4 	sub	r8,pc,-21260
80005da8:	f0 e8 00 20 	ld.d	r8,r8[32]
80005dac:	fa ea 00 3c 	ld.d	r10,sp[60]
80005db0:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005db4:	e0 a0 14 12 	rcall	800085d8 <__avr32_f64_div>
80005db8:	30 35       	mov	r5,3
80005dba:	14 98       	mov	r8,r10
80005dbc:	16 99       	mov	r9,r11
80005dbe:	fa e9 00 08 	st.d	sp[8],r8
80005dc2:	fe cc ad 12 	sub	r12,pc,-21230
80005dc6:	50 a3       	stdsp	sp[0x28],r3
80005dc8:	0c 93       	mov	r3,r6
80005dca:	18 96       	mov	r6,r12
80005dcc:	c0 f8       	rjmp	80005dea <_dtoa_r+0x39e>
80005dce:	fa ea 00 18 	ld.d	r10,sp[24]
80005dd2:	ed b4 00 00 	bld	r4,0x0
80005dd6:	c0 81       	brne	80005de6 <_dtoa_r+0x39a>
80005dd8:	ec e8 00 00 	ld.d	r8,r6[0]
80005ddc:	2f f5       	sub	r5,-1
80005dde:	e0 a0 10 b7 	rcall	80007f4c <__avr32_f64_mul>
80005de2:	fa eb 00 18 	st.d	sp[24],r10
80005de6:	a1 54       	asr	r4,0x1
80005de8:	2f 86       	sub	r6,-8
80005dea:	58 04       	cp.w	r4,0
80005dec:	cf 11       	brne	80005dce <_dtoa_r+0x382>
80005dee:	fa e8 00 18 	ld.d	r8,sp[24]
80005df2:	fa ea 00 08 	ld.d	r10,sp[8]
80005df6:	06 96       	mov	r6,r3
80005df8:	e0 a0 13 f0 	rcall	800085d8 <__avr32_f64_div>
80005dfc:	40 a3       	lddsp	r3,sp[0x28]
80005dfe:	14 98       	mov	r8,r10
80005e00:	16 99       	mov	r9,r11
80005e02:	fa e9 00 08 	st.d	sp[8],r8
80005e06:	c2 f8       	rjmp	80005e64 <_dtoa_r+0x418>
80005e08:	ec 08 11 00 	rsub	r8,r6,0
80005e0c:	c0 31       	brne	80005e12 <_dtoa_r+0x3c6>
80005e0e:	30 25       	mov	r5,2
80005e10:	c2 a8       	rjmp	80005e64 <_dtoa_r+0x418>
80005e12:	fe cc ad 62 	sub	r12,pc,-21150
80005e16:	f0 04 14 04 	asr	r4,r8,0x4
80005e1a:	50 1c       	stdsp	sp[0x4],r12
80005e1c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005e20:	fe c9 ae 38 	sub	r9,pc,-20936
80005e24:	fa ea 00 3c 	ld.d	r10,sp[60]
80005e28:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005e2c:	e0 a0 10 90 	rcall	80007f4c <__avr32_f64_mul>
80005e30:	40 1c       	lddsp	r12,sp[0x4]
80005e32:	50 63       	stdsp	sp[0x18],r3
80005e34:	30 25       	mov	r5,2
80005e36:	0c 93       	mov	r3,r6
80005e38:	fa eb 00 08 	st.d	sp[8],r10
80005e3c:	18 96       	mov	r6,r12
80005e3e:	c0 f8       	rjmp	80005e5c <_dtoa_r+0x410>
80005e40:	fa ea 00 08 	ld.d	r10,sp[8]
80005e44:	ed b4 00 00 	bld	r4,0x0
80005e48:	c0 81       	brne	80005e58 <_dtoa_r+0x40c>
80005e4a:	ec e8 00 00 	ld.d	r8,r6[0]
80005e4e:	2f f5       	sub	r5,-1
80005e50:	e0 a0 10 7e 	rcall	80007f4c <__avr32_f64_mul>
80005e54:	fa eb 00 08 	st.d	sp[8],r10
80005e58:	a1 54       	asr	r4,0x1
80005e5a:	2f 86       	sub	r6,-8
80005e5c:	58 04       	cp.w	r4,0
80005e5e:	cf 11       	brne	80005e40 <_dtoa_r+0x3f4>
80005e60:	06 96       	mov	r6,r3
80005e62:	40 63       	lddsp	r3,sp[0x18]
80005e64:	41 4a       	lddsp	r10,sp[0x50]
80005e66:	58 0a       	cp.w	r10,0
80005e68:	c2 a0       	breq	80005ebc <_dtoa_r+0x470>
80005e6a:	fa e8 00 08 	ld.d	r8,sp[8]
80005e6e:	58 01       	cp.w	r1,0
80005e70:	5f 94       	srgt	r4
80005e72:	fa e9 00 18 	st.d	sp[24],r8
80005e76:	30 08       	mov	r8,0
80005e78:	fc 19 3f f0 	movh	r9,0x3ff0
80005e7c:	fa ea 00 18 	ld.d	r10,sp[24]
80005e80:	e0 a0 13 78 	rcall	80008570 <__avr32_f64_cmp_lt>
80005e84:	f9 bc 00 00 	moveq	r12,0
80005e88:	f9 bc 01 01 	movne	r12,1
80005e8c:	e9 ec 00 0c 	and	r12,r4,r12
80005e90:	c1 60       	breq	80005ebc <_dtoa_r+0x470>
80005e92:	40 98       	lddsp	r8,sp[0x24]
80005e94:	58 08       	cp.w	r8,0
80005e96:	e0 8a 00 f1 	brle	80006078 <_dtoa_r+0x62c>
80005e9a:	30 08       	mov	r8,0
80005e9c:	fc 19 40 24 	movh	r9,0x4024
80005ea0:	ec c4 00 01 	sub	r4,r6,1
80005ea4:	fa ea 00 18 	ld.d	r10,sp[24]
80005ea8:	2f f5       	sub	r5,-1
80005eaa:	50 64       	stdsp	sp[0x18],r4
80005eac:	e0 a0 10 50 	rcall	80007f4c <__avr32_f64_mul>
80005eb0:	40 94       	lddsp	r4,sp[0x24]
80005eb2:	14 98       	mov	r8,r10
80005eb4:	16 99       	mov	r9,r11
80005eb6:	fa e9 00 08 	st.d	sp[8],r8
80005eba:	c0 38       	rjmp	80005ec0 <_dtoa_r+0x474>
80005ebc:	50 66       	stdsp	sp[0x18],r6
80005ebe:	02 94       	mov	r4,r1
80005ec0:	0a 9c       	mov	r12,r5
80005ec2:	e0 a0 12 a0 	rcall	80008402 <__avr32_s32_to_f64>
80005ec6:	fa e8 00 08 	ld.d	r8,sp[8]
80005eca:	e0 a0 10 41 	rcall	80007f4c <__avr32_f64_mul>
80005ece:	30 08       	mov	r8,0
80005ed0:	fc 19 40 1c 	movh	r9,0x401c
80005ed4:	e0 a0 11 f6 	rcall	800082c0 <__avr32_f64_add>
80005ed8:	14 98       	mov	r8,r10
80005eda:	16 99       	mov	r9,r11
80005edc:	fa e9 00 28 	st.d	sp[40],r8
80005ee0:	fc 18 fc c0 	movh	r8,0xfcc0
80005ee4:	40 a5       	lddsp	r5,sp[0x28]
80005ee6:	10 05       	add	r5,r8
80005ee8:	50 a5       	stdsp	sp[0x28],r5
80005eea:	58 04       	cp.w	r4,0
80005eec:	c2 11       	brne	80005f2e <_dtoa_r+0x4e2>
80005eee:	fa ea 00 08 	ld.d	r10,sp[8]
80005ef2:	30 08       	mov	r8,0
80005ef4:	fc 19 40 14 	movh	r9,0x4014
80005ef8:	e0 a0 11 16 	rcall	80008124 <__avr32_f64_sub>
80005efc:	40 bc       	lddsp	r12,sp[0x2c]
80005efe:	fa eb 00 08 	st.d	sp[8],r10
80005f02:	14 98       	mov	r8,r10
80005f04:	16 99       	mov	r9,r11
80005f06:	18 9a       	mov	r10,r12
80005f08:	0a 9b       	mov	r11,r5
80005f0a:	e0 a0 13 33 	rcall	80008570 <__avr32_f64_cmp_lt>
80005f0e:	e0 81 02 54 	brne	800063b6 <_dtoa_r+0x96a>
80005f12:	0a 98       	mov	r8,r5
80005f14:	40 b9       	lddsp	r9,sp[0x2c]
80005f16:	ee 18 80 00 	eorh	r8,0x8000
80005f1a:	fa ea 00 08 	ld.d	r10,sp[8]
80005f1e:	10 95       	mov	r5,r8
80005f20:	12 98       	mov	r8,r9
80005f22:	0a 99       	mov	r9,r5
80005f24:	e0 a0 13 26 	rcall	80008570 <__avr32_f64_cmp_lt>
80005f28:	e0 81 02 3e 	brne	800063a4 <_dtoa_r+0x958>
80005f2c:	ca 68       	rjmp	80006078 <_dtoa_r+0x62c>
80005f2e:	fe c9 af 46 	sub	r9,pc,-20666
80005f32:	e8 c8 00 01 	sub	r8,r4,1
80005f36:	40 d5       	lddsp	r5,sp[0x34]
80005f38:	58 05       	cp.w	r5,0
80005f3a:	c4 f0       	breq	80005fd8 <_dtoa_r+0x58c>
80005f3c:	30 0c       	mov	r12,0
80005f3e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005f42:	51 3c       	stdsp	sp[0x4c],r12
80005f44:	30 0a       	mov	r10,0
80005f46:	fc 1b 3f e0 	movh	r11,0x3fe0
80005f4a:	e0 a0 13 47 	rcall	800085d8 <__avr32_f64_div>
80005f4e:	fa e8 00 28 	ld.d	r8,sp[40]
80005f52:	40 85       	lddsp	r5,sp[0x20]
80005f54:	e0 a0 10 e8 	rcall	80008124 <__avr32_f64_sub>
80005f58:	fa eb 00 28 	st.d	sp[40],r10
80005f5c:	fa ea 00 08 	ld.d	r10,sp[8]
80005f60:	e0 a0 12 3a 	rcall	800083d4 <__avr32_f64_to_s32>
80005f64:	51 6c       	stdsp	sp[0x58],r12
80005f66:	e0 a0 12 4e 	rcall	80008402 <__avr32_s32_to_f64>
80005f6a:	14 98       	mov	r8,r10
80005f6c:	16 99       	mov	r9,r11
80005f6e:	fa ea 00 08 	ld.d	r10,sp[8]
80005f72:	e0 a0 10 d9 	rcall	80008124 <__avr32_f64_sub>
80005f76:	fa eb 00 08 	st.d	sp[8],r10
80005f7a:	41 68       	lddsp	r8,sp[0x58]
80005f7c:	2d 08       	sub	r8,-48
80005f7e:	0a c8       	st.b	r5++,r8
80005f80:	41 39       	lddsp	r9,sp[0x4c]
80005f82:	2f f9       	sub	r9,-1
80005f84:	51 39       	stdsp	sp[0x4c],r9
80005f86:	fa e8 00 28 	ld.d	r8,sp[40]
80005f8a:	e0 a0 12 f3 	rcall	80008570 <__avr32_f64_cmp_lt>
80005f8e:	e0 81 03 39 	brne	80006600 <_dtoa_r+0xbb4>
80005f92:	fa e8 00 08 	ld.d	r8,sp[8]
80005f96:	30 0a       	mov	r10,0
80005f98:	fc 1b 3f f0 	movh	r11,0x3ff0
80005f9c:	e0 a0 10 c4 	rcall	80008124 <__avr32_f64_sub>
80005fa0:	fa e8 00 28 	ld.d	r8,sp[40]
80005fa4:	e0 a0 12 e6 	rcall	80008570 <__avr32_f64_cmp_lt>
80005fa8:	fa ea 00 28 	ld.d	r10,sp[40]
80005fac:	30 08       	mov	r8,0
80005fae:	fc 19 40 24 	movh	r9,0x4024
80005fb2:	e0 81 00 da 	brne	80006166 <_dtoa_r+0x71a>
80005fb6:	41 3c       	lddsp	r12,sp[0x4c]
80005fb8:	08 3c       	cp.w	r12,r4
80005fba:	c5 f4       	brge	80006078 <_dtoa_r+0x62c>
80005fbc:	e0 a0 0f c8 	rcall	80007f4c <__avr32_f64_mul>
80005fc0:	30 08       	mov	r8,0
80005fc2:	fa eb 00 28 	st.d	sp[40],r10
80005fc6:	fc 19 40 24 	movh	r9,0x4024
80005fca:	fa ea 00 08 	ld.d	r10,sp[8]
80005fce:	e0 a0 0f bf 	rcall	80007f4c <__avr32_f64_mul>
80005fd2:	fa eb 00 08 	st.d	sp[8],r10
80005fd6:	cc 3b       	rjmp	80005f5c <_dtoa_r+0x510>
80005fd8:	40 85       	lddsp	r5,sp[0x20]
80005fda:	08 05       	add	r5,r4
80005fdc:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005fe0:	51 35       	stdsp	sp[0x4c],r5
80005fe2:	fa e8 00 28 	ld.d	r8,sp[40]
80005fe6:	40 85       	lddsp	r5,sp[0x20]
80005fe8:	e0 a0 0f b2 	rcall	80007f4c <__avr32_f64_mul>
80005fec:	fa eb 00 28 	st.d	sp[40],r10
80005ff0:	fa ea 00 08 	ld.d	r10,sp[8]
80005ff4:	e0 a0 11 f0 	rcall	800083d4 <__avr32_f64_to_s32>
80005ff8:	51 6c       	stdsp	sp[0x58],r12
80005ffa:	e0 a0 12 04 	rcall	80008402 <__avr32_s32_to_f64>
80005ffe:	14 98       	mov	r8,r10
80006000:	16 99       	mov	r9,r11
80006002:	fa ea 00 08 	ld.d	r10,sp[8]
80006006:	e0 a0 10 8f 	rcall	80008124 <__avr32_f64_sub>
8000600a:	fa eb 00 08 	st.d	sp[8],r10
8000600e:	41 68       	lddsp	r8,sp[0x58]
80006010:	2d 08       	sub	r8,-48
80006012:	0a c8       	st.b	r5++,r8
80006014:	41 3c       	lddsp	r12,sp[0x4c]
80006016:	18 35       	cp.w	r5,r12
80006018:	c2 81       	brne	80006068 <_dtoa_r+0x61c>
8000601a:	30 08       	mov	r8,0
8000601c:	fc 19 3f e0 	movh	r9,0x3fe0
80006020:	fa ea 00 28 	ld.d	r10,sp[40]
80006024:	e0 a0 11 4e 	rcall	800082c0 <__avr32_f64_add>
80006028:	40 85       	lddsp	r5,sp[0x20]
8000602a:	fa e8 00 08 	ld.d	r8,sp[8]
8000602e:	08 05       	add	r5,r4
80006030:	e0 a0 12 a0 	rcall	80008570 <__avr32_f64_cmp_lt>
80006034:	e0 81 00 99 	brne	80006166 <_dtoa_r+0x71a>
80006038:	fa e8 00 28 	ld.d	r8,sp[40]
8000603c:	30 0a       	mov	r10,0
8000603e:	fc 1b 3f e0 	movh	r11,0x3fe0
80006042:	e0 a0 10 71 	rcall	80008124 <__avr32_f64_sub>
80006046:	14 98       	mov	r8,r10
80006048:	16 99       	mov	r9,r11
8000604a:	fa ea 00 08 	ld.d	r10,sp[8]
8000604e:	e0 a0 12 91 	rcall	80008570 <__avr32_f64_cmp_lt>
80006052:	c1 30       	breq	80006078 <_dtoa_r+0x62c>
80006054:	33 09       	mov	r9,48
80006056:	0a 98       	mov	r8,r5
80006058:	11 7a       	ld.ub	r10,--r8
8000605a:	f2 0a 18 00 	cp.b	r10,r9
8000605e:	e0 81 02 d1 	brne	80006600 <_dtoa_r+0xbb4>
80006062:	10 95       	mov	r5,r8
80006064:	cf 9b       	rjmp	80006056 <_dtoa_r+0x60a>
80006066:	d7 03       	nop
80006068:	30 08       	mov	r8,0
8000606a:	fc 19 40 24 	movh	r9,0x4024
8000606e:	e0 a0 0f 6f 	rcall	80007f4c <__avr32_f64_mul>
80006072:	fa eb 00 08 	st.d	sp[8],r10
80006076:	cb db       	rjmp	80005ff0 <_dtoa_r+0x5a4>
80006078:	fa ea 00 3c 	ld.d	r10,sp[60]
8000607c:	fa eb 00 08 	st.d	sp[8],r10
80006080:	58 e6       	cp.w	r6,14
80006082:	5f ab       	srle	r11
80006084:	41 8a       	lddsp	r10,sp[0x60]
80006086:	30 08       	mov	r8,0
80006088:	f4 09 11 ff 	rsub	r9,r10,-1
8000608c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006090:	f0 09 18 00 	cp.b	r9,r8
80006094:	e0 80 00 82 	breq	80006198 <_dtoa_r+0x74c>
80006098:	40 ea       	lddsp	r10,sp[0x38]
8000609a:	58 01       	cp.w	r1,0
8000609c:	5f a9       	srle	r9
8000609e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800060a2:	fe ca b0 ba 	sub	r10,pc,-20294
800060a6:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800060aa:	fa e5 00 10 	st.d	sp[16],r4
800060ae:	f0 09 18 00 	cp.b	r9,r8
800060b2:	c1 40       	breq	800060da <_dtoa_r+0x68e>
800060b4:	58 01       	cp.w	r1,0
800060b6:	e0 81 01 77 	brne	800063a4 <_dtoa_r+0x958>
800060ba:	30 08       	mov	r8,0
800060bc:	fc 19 40 14 	movh	r9,0x4014
800060c0:	08 9a       	mov	r10,r4
800060c2:	0a 9b       	mov	r11,r5
800060c4:	e0 a0 0f 44 	rcall	80007f4c <__avr32_f64_mul>
800060c8:	fa e8 00 08 	ld.d	r8,sp[8]
800060cc:	e0 a0 12 1e 	rcall	80008508 <__avr32_f64_cmp_ge>
800060d0:	e0 81 01 6a 	brne	800063a4 <_dtoa_r+0x958>
800060d4:	02 92       	mov	r2,r1
800060d6:	e0 8f 01 72 	bral	800063ba <_dtoa_r+0x96e>
800060da:	40 85       	lddsp	r5,sp[0x20]
800060dc:	30 14       	mov	r4,1
800060de:	fa e8 00 10 	ld.d	r8,sp[16]
800060e2:	fa ea 00 08 	ld.d	r10,sp[8]
800060e6:	e0 a0 12 79 	rcall	800085d8 <__avr32_f64_div>
800060ea:	e0 a0 11 75 	rcall	800083d4 <__avr32_f64_to_s32>
800060ee:	18 92       	mov	r2,r12
800060f0:	e0 a0 11 89 	rcall	80008402 <__avr32_s32_to_f64>
800060f4:	fa e8 00 10 	ld.d	r8,sp[16]
800060f8:	e0 a0 0f 2a 	rcall	80007f4c <__avr32_f64_mul>
800060fc:	14 98       	mov	r8,r10
800060fe:	16 99       	mov	r9,r11
80006100:	fa ea 00 08 	ld.d	r10,sp[8]
80006104:	e0 a0 10 10 	rcall	80008124 <__avr32_f64_sub>
80006108:	fa eb 00 08 	st.d	sp[8],r10
8000610c:	e4 c8 ff d0 	sub	r8,r2,-48
80006110:	0a c8       	st.b	r5++,r8
80006112:	fc 19 40 24 	movh	r9,0x4024
80006116:	30 08       	mov	r8,0
80006118:	02 34       	cp.w	r4,r1
8000611a:	c3 31       	brne	80006180 <_dtoa_r+0x734>
8000611c:	fa e8 00 08 	ld.d	r8,sp[8]
80006120:	e0 a0 10 d0 	rcall	800082c0 <__avr32_f64_add>
80006124:	16 91       	mov	r1,r11
80006126:	14 90       	mov	r0,r10
80006128:	14 98       	mov	r8,r10
8000612a:	02 99       	mov	r9,r1
8000612c:	fa ea 00 10 	ld.d	r10,sp[16]
80006130:	e0 a0 12 20 	rcall	80008570 <__avr32_f64_cmp_lt>
80006134:	c1 a1       	brne	80006168 <_dtoa_r+0x71c>
80006136:	fa e8 00 10 	ld.d	r8,sp[16]
8000613a:	00 9a       	mov	r10,r0
8000613c:	02 9b       	mov	r11,r1
8000613e:	e0 a0 11 d2 	rcall	800084e2 <__avr32_f64_cmp_eq>
80006142:	e0 80 02 5e 	breq	800065fe <_dtoa_r+0xbb2>
80006146:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000614a:	c0 f1       	brne	80006168 <_dtoa_r+0x71c>
8000614c:	e0 8f 02 59 	bral	800065fe <_dtoa_r+0xbb2>
80006150:	40 8a       	lddsp	r10,sp[0x20]
80006152:	14 38       	cp.w	r8,r10
80006154:	c0 30       	breq	8000615a <_dtoa_r+0x70e>
80006156:	10 95       	mov	r5,r8
80006158:	c0 98       	rjmp	8000616a <_dtoa_r+0x71e>
8000615a:	33 08       	mov	r8,48
8000615c:	40 89       	lddsp	r9,sp[0x20]
8000615e:	2f f6       	sub	r6,-1
80006160:	b2 88       	st.b	r9[0x0],r8
80006162:	40 88       	lddsp	r8,sp[0x20]
80006164:	c0 88       	rjmp	80006174 <_dtoa_r+0x728>
80006166:	40 66       	lddsp	r6,sp[0x18]
80006168:	33 99       	mov	r9,57
8000616a:	0a 98       	mov	r8,r5
8000616c:	11 7a       	ld.ub	r10,--r8
8000616e:	f2 0a 18 00 	cp.b	r10,r9
80006172:	ce f0       	breq	80006150 <_dtoa_r+0x704>
80006174:	50 66       	stdsp	sp[0x18],r6
80006176:	11 89       	ld.ub	r9,r8[0x0]
80006178:	2f f9       	sub	r9,-1
8000617a:	b0 89       	st.b	r8[0x0],r9
8000617c:	e0 8f 02 42 	bral	80006600 <_dtoa_r+0xbb4>
80006180:	e0 a0 0e e6 	rcall	80007f4c <__avr32_f64_mul>
80006184:	2f f4       	sub	r4,-1
80006186:	fa eb 00 08 	st.d	sp[8],r10
8000618a:	30 08       	mov	r8,0
8000618c:	30 09       	mov	r9,0
8000618e:	e0 a0 11 aa 	rcall	800084e2 <__avr32_f64_cmp_eq>
80006192:	ca 60       	breq	800060de <_dtoa_r+0x692>
80006194:	e0 8f 02 35 	bral	800065fe <_dtoa_r+0xbb2>
80006198:	40 d8       	lddsp	r8,sp[0x34]
8000619a:	58 08       	cp.w	r8,0
8000619c:	c0 51       	brne	800061a6 <_dtoa_r+0x75a>
8000619e:	04 98       	mov	r8,r2
800061a0:	00 95       	mov	r5,r0
800061a2:	40 d4       	lddsp	r4,sp[0x34]
800061a4:	c3 78       	rjmp	80006212 <_dtoa_r+0x7c6>
800061a6:	40 c5       	lddsp	r5,sp[0x30]
800061a8:	58 15       	cp.w	r5,1
800061aa:	e0 89 00 0f 	brgt	800061c8 <_dtoa_r+0x77c>
800061ae:	41 74       	lddsp	r4,sp[0x5c]
800061b0:	58 04       	cp.w	r4,0
800061b2:	c0 40       	breq	800061ba <_dtoa_r+0x76e>
800061b4:	f4 c9 fb cd 	sub	r9,r10,-1075
800061b8:	c0 48       	rjmp	800061c0 <_dtoa_r+0x774>
800061ba:	41 99       	lddsp	r9,sp[0x64]
800061bc:	f2 09 11 36 	rsub	r9,r9,54
800061c0:	04 98       	mov	r8,r2
800061c2:	00 95       	mov	r5,r0
800061c4:	c1 c8       	rjmp	800061fc <_dtoa_r+0x7b0>
800061c6:	d7 03       	nop
800061c8:	e2 c8 00 01 	sub	r8,r1,1
800061cc:	58 01       	cp.w	r1,0
800061ce:	e0 05 17 40 	movge	r5,r0
800061d2:	e2 09 17 40 	movge	r9,r1
800061d6:	e1 d1 e5 15 	sublt	r5,r0,r1
800061da:	f9 b9 05 00 	movlt	r9,0
800061de:	10 32       	cp.w	r2,r8
800061e0:	e5 d8 e4 18 	subge	r8,r2,r8
800061e4:	f1 d2 e5 18 	sublt	r8,r8,r2
800061e8:	e5 d8 e5 02 	addlt	r2,r2,r8
800061ec:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800061f0:	f9 d8 e5 0c 	addlt	r12,r12,r8
800061f4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800061f8:	f9 b8 05 00 	movlt	r8,0
800061fc:	40 4b       	lddsp	r11,sp[0x10]
800061fe:	12 0b       	add	r11,r9
80006200:	50 08       	stdsp	sp[0x0],r8
80006202:	50 4b       	stdsp	sp[0x10],r11
80006204:	12 00       	add	r0,r9
80006206:	30 1b       	mov	r11,1
80006208:	0e 9c       	mov	r12,r7
8000620a:	e0 a0 0a d1 	rcall	800077ac <__i2b>
8000620e:	40 08       	lddsp	r8,sp[0x0]
80006210:	18 94       	mov	r4,r12
80006212:	40 4a       	lddsp	r10,sp[0x10]
80006214:	58 05       	cp.w	r5,0
80006216:	5f 99       	srgt	r9
80006218:	58 0a       	cp.w	r10,0
8000621a:	5f 9a       	srgt	r10
8000621c:	f5 e9 00 09 	and	r9,r10,r9
80006220:	c0 80       	breq	80006230 <_dtoa_r+0x7e4>
80006222:	40 4c       	lddsp	r12,sp[0x10]
80006224:	f8 05 0d 49 	min	r9,r12,r5
80006228:	12 1c       	sub	r12,r9
8000622a:	12 10       	sub	r0,r9
8000622c:	50 4c       	stdsp	sp[0x10],r12
8000622e:	12 15       	sub	r5,r9
80006230:	58 02       	cp.w	r2,0
80006232:	e0 8a 00 27 	brle	80006280 <_dtoa_r+0x834>
80006236:	40 db       	lddsp	r11,sp[0x34]
80006238:	58 0b       	cp.w	r11,0
8000623a:	c1 d0       	breq	80006274 <_dtoa_r+0x828>
8000623c:	58 08       	cp.w	r8,0
8000623e:	e0 8a 00 17 	brle	8000626c <_dtoa_r+0x820>
80006242:	10 9a       	mov	r10,r8
80006244:	50 08       	stdsp	sp[0x0],r8
80006246:	08 9b       	mov	r11,r4
80006248:	0e 9c       	mov	r12,r7
8000624a:	e0 a0 0a f7 	rcall	80007838 <__pow5mult>
8000624e:	06 9a       	mov	r10,r3
80006250:	18 9b       	mov	r11,r12
80006252:	18 94       	mov	r4,r12
80006254:	0e 9c       	mov	r12,r7
80006256:	e0 a0 0a 2b 	rcall	800076ac <__multiply>
8000625a:	18 99       	mov	r9,r12
8000625c:	06 9b       	mov	r11,r3
8000625e:	50 19       	stdsp	sp[0x4],r9
80006260:	0e 9c       	mov	r12,r7
80006262:	e0 a0 08 d7 	rcall	80007410 <_Bfree>
80006266:	40 19       	lddsp	r9,sp[0x4]
80006268:	40 08       	lddsp	r8,sp[0x0]
8000626a:	12 93       	mov	r3,r9
8000626c:	e4 08 01 0a 	sub	r10,r2,r8
80006270:	c0 80       	breq	80006280 <_dtoa_r+0x834>
80006272:	c0 28       	rjmp	80006276 <_dtoa_r+0x82a>
80006274:	04 9a       	mov	r10,r2
80006276:	06 9b       	mov	r11,r3
80006278:	0e 9c       	mov	r12,r7
8000627a:	e0 a0 0a df 	rcall	80007838 <__pow5mult>
8000627e:	18 93       	mov	r3,r12
80006280:	30 1b       	mov	r11,1
80006282:	0e 9c       	mov	r12,r7
80006284:	e0 a0 0a 94 	rcall	800077ac <__i2b>
80006288:	41 1a       	lddsp	r10,sp[0x44]
8000628a:	18 92       	mov	r2,r12
8000628c:	58 0a       	cp.w	r10,0
8000628e:	e0 8a 00 07 	brle	8000629c <_dtoa_r+0x850>
80006292:	18 9b       	mov	r11,r12
80006294:	0e 9c       	mov	r12,r7
80006296:	e0 a0 0a d1 	rcall	80007838 <__pow5mult>
8000629a:	18 92       	mov	r2,r12
8000629c:	40 c9       	lddsp	r9,sp[0x30]
8000629e:	58 19       	cp.w	r9,1
800062a0:	e0 89 00 14 	brgt	800062c8 <_dtoa_r+0x87c>
800062a4:	40 38       	lddsp	r8,sp[0xc]
800062a6:	58 08       	cp.w	r8,0
800062a8:	c1 01       	brne	800062c8 <_dtoa_r+0x87c>
800062aa:	40 29       	lddsp	r9,sp[0x8]
800062ac:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800062b0:	c0 c1       	brne	800062c8 <_dtoa_r+0x87c>
800062b2:	12 98       	mov	r8,r9
800062b4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800062b8:	c0 80       	breq	800062c8 <_dtoa_r+0x87c>
800062ba:	40 4c       	lddsp	r12,sp[0x10]
800062bc:	30 1b       	mov	r11,1
800062be:	2f fc       	sub	r12,-1
800062c0:	2f f0       	sub	r0,-1
800062c2:	50 4c       	stdsp	sp[0x10],r12
800062c4:	50 6b       	stdsp	sp[0x18],r11
800062c6:	c0 38       	rjmp	800062cc <_dtoa_r+0x880>
800062c8:	30 0a       	mov	r10,0
800062ca:	50 6a       	stdsp	sp[0x18],r10
800062cc:	41 19       	lddsp	r9,sp[0x44]
800062ce:	58 09       	cp.w	r9,0
800062d0:	c0 31       	brne	800062d6 <_dtoa_r+0x88a>
800062d2:	30 1c       	mov	r12,1
800062d4:	c0 98       	rjmp	800062e6 <_dtoa_r+0x89a>
800062d6:	64 48       	ld.w	r8,r2[0x10]
800062d8:	2f c8       	sub	r8,-4
800062da:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800062de:	e0 a0 08 08 	rcall	800072ee <__hi0bits>
800062e2:	f8 0c 11 20 	rsub	r12,r12,32
800062e6:	40 4b       	lddsp	r11,sp[0x10]
800062e8:	f8 0b 00 08 	add	r8,r12,r11
800062ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800062f0:	c0 c0       	breq	80006308 <_dtoa_r+0x8bc>
800062f2:	f0 08 11 20 	rsub	r8,r8,32
800062f6:	58 48       	cp.w	r8,4
800062f8:	e0 8a 00 06 	brle	80006304 <_dtoa_r+0x8b8>
800062fc:	20 48       	sub	r8,4
800062fe:	10 0b       	add	r11,r8
80006300:	50 4b       	stdsp	sp[0x10],r11
80006302:	c0 78       	rjmp	80006310 <_dtoa_r+0x8c4>
80006304:	58 48       	cp.w	r8,4
80006306:	c0 70       	breq	80006314 <_dtoa_r+0x8c8>
80006308:	40 4a       	lddsp	r10,sp[0x10]
8000630a:	2e 48       	sub	r8,-28
8000630c:	10 0a       	add	r10,r8
8000630e:	50 4a       	stdsp	sp[0x10],r10
80006310:	10 00       	add	r0,r8
80006312:	10 05       	add	r5,r8
80006314:	58 00       	cp.w	r0,0
80006316:	e0 8a 00 08 	brle	80006326 <_dtoa_r+0x8da>
8000631a:	06 9b       	mov	r11,r3
8000631c:	00 9a       	mov	r10,r0
8000631e:	0e 9c       	mov	r12,r7
80006320:	e0 a0 09 82 	rcall	80007624 <__lshift>
80006324:	18 93       	mov	r3,r12
80006326:	40 49       	lddsp	r9,sp[0x10]
80006328:	58 09       	cp.w	r9,0
8000632a:	e0 8a 00 08 	brle	8000633a <_dtoa_r+0x8ee>
8000632e:	04 9b       	mov	r11,r2
80006330:	12 9a       	mov	r10,r9
80006332:	0e 9c       	mov	r12,r7
80006334:	e0 a0 09 78 	rcall	80007624 <__lshift>
80006338:	18 92       	mov	r2,r12
8000633a:	41 48       	lddsp	r8,sp[0x50]
8000633c:	58 08       	cp.w	r8,0
8000633e:	c1 b0       	breq	80006374 <_dtoa_r+0x928>
80006340:	04 9b       	mov	r11,r2
80006342:	06 9c       	mov	r12,r3
80006344:	e0 a0 08 4c 	rcall	800073dc <__mcmp>
80006348:	c1 64       	brge	80006374 <_dtoa_r+0x928>
8000634a:	06 9b       	mov	r11,r3
8000634c:	30 09       	mov	r9,0
8000634e:	30 aa       	mov	r10,10
80006350:	0e 9c       	mov	r12,r7
80006352:	e0 a0 0a 35 	rcall	800077bc <__multadd>
80006356:	20 16       	sub	r6,1
80006358:	18 93       	mov	r3,r12
8000635a:	40 dc       	lddsp	r12,sp[0x34]
8000635c:	58 0c       	cp.w	r12,0
8000635e:	c0 31       	brne	80006364 <_dtoa_r+0x918>
80006360:	40 91       	lddsp	r1,sp[0x24]
80006362:	c0 98       	rjmp	80006374 <_dtoa_r+0x928>
80006364:	08 9b       	mov	r11,r4
80006366:	40 91       	lddsp	r1,sp[0x24]
80006368:	30 09       	mov	r9,0
8000636a:	30 aa       	mov	r10,10
8000636c:	0e 9c       	mov	r12,r7
8000636e:	e0 a0 0a 27 	rcall	800077bc <__multadd>
80006372:	18 94       	mov	r4,r12
80006374:	58 01       	cp.w	r1,0
80006376:	5f a9       	srle	r9
80006378:	40 cb       	lddsp	r11,sp[0x30]
8000637a:	58 2b       	cp.w	r11,2
8000637c:	5f 98       	srgt	r8
8000637e:	f3 e8 00 08 	and	r8,r9,r8
80006382:	c2 50       	breq	800063cc <_dtoa_r+0x980>
80006384:	58 01       	cp.w	r1,0
80006386:	c1 11       	brne	800063a8 <_dtoa_r+0x95c>
80006388:	04 9b       	mov	r11,r2
8000638a:	02 99       	mov	r9,r1
8000638c:	30 5a       	mov	r10,5
8000638e:	0e 9c       	mov	r12,r7
80006390:	e0 a0 0a 16 	rcall	800077bc <__multadd>
80006394:	18 92       	mov	r2,r12
80006396:	18 9b       	mov	r11,r12
80006398:	06 9c       	mov	r12,r3
8000639a:	e0 a0 08 21 	rcall	800073dc <__mcmp>
8000639e:	e0 89 00 0f 	brgt	800063bc <_dtoa_r+0x970>
800063a2:	c0 38       	rjmp	800063a8 <_dtoa_r+0x95c>
800063a4:	30 02       	mov	r2,0
800063a6:	04 94       	mov	r4,r2
800063a8:	40 ea       	lddsp	r10,sp[0x38]
800063aa:	30 09       	mov	r9,0
800063ac:	5c da       	com	r10
800063ae:	40 85       	lddsp	r5,sp[0x20]
800063b0:	50 6a       	stdsp	sp[0x18],r10
800063b2:	50 49       	stdsp	sp[0x10],r9
800063b4:	c0 f9       	rjmp	800065d2 <_dtoa_r+0xb86>
800063b6:	08 92       	mov	r2,r4
800063b8:	40 66       	lddsp	r6,sp[0x18]
800063ba:	04 94       	mov	r4,r2
800063bc:	2f f6       	sub	r6,-1
800063be:	50 66       	stdsp	sp[0x18],r6
800063c0:	33 18       	mov	r8,49
800063c2:	40 85       	lddsp	r5,sp[0x20]
800063c4:	0a c8       	st.b	r5++,r8
800063c6:	30 08       	mov	r8,0
800063c8:	50 48       	stdsp	sp[0x10],r8
800063ca:	c0 49       	rjmp	800065d2 <_dtoa_r+0xb86>
800063cc:	40 dc       	lddsp	r12,sp[0x34]
800063ce:	58 0c       	cp.w	r12,0
800063d0:	e0 80 00 b5 	breq	8000653a <_dtoa_r+0xaee>
800063d4:	58 05       	cp.w	r5,0
800063d6:	e0 8a 00 08 	brle	800063e6 <_dtoa_r+0x99a>
800063da:	08 9b       	mov	r11,r4
800063dc:	0a 9a       	mov	r10,r5
800063de:	0e 9c       	mov	r12,r7
800063e0:	e0 a0 09 22 	rcall	80007624 <__lshift>
800063e4:	18 94       	mov	r4,r12
800063e6:	40 6b       	lddsp	r11,sp[0x18]
800063e8:	58 0b       	cp.w	r11,0
800063ea:	c0 31       	brne	800063f0 <_dtoa_r+0x9a4>
800063ec:	08 9c       	mov	r12,r4
800063ee:	c1 38       	rjmp	80006414 <_dtoa_r+0x9c8>
800063f0:	68 1b       	ld.w	r11,r4[0x4]
800063f2:	0e 9c       	mov	r12,r7
800063f4:	e0 a0 08 28 	rcall	80007444 <_Balloc>
800063f8:	68 4a       	ld.w	r10,r4[0x10]
800063fa:	18 95       	mov	r5,r12
800063fc:	e8 cb ff f4 	sub	r11,r4,-12
80006400:	2f ea       	sub	r10,-2
80006402:	2f 4c       	sub	r12,-12
80006404:	a3 6a       	lsl	r10,0x2
80006406:	fe b0 e7 ef 	rcall	800033e4 <memcpy>
8000640a:	0a 9b       	mov	r11,r5
8000640c:	30 1a       	mov	r10,1
8000640e:	0e 9c       	mov	r12,r7
80006410:	e0 a0 09 0a 	rcall	80007624 <__lshift>
80006414:	50 44       	stdsp	sp[0x10],r4
80006416:	40 3a       	lddsp	r10,sp[0xc]
80006418:	30 19       	mov	r9,1
8000641a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000641e:	18 94       	mov	r4,r12
80006420:	50 da       	stdsp	sp[0x34],r10
80006422:	40 85       	lddsp	r5,sp[0x20]
80006424:	50 99       	stdsp	sp[0x24],r9
80006426:	50 26       	stdsp	sp[0x8],r6
80006428:	50 e1       	stdsp	sp[0x38],r1
8000642a:	04 9b       	mov	r11,r2
8000642c:	06 9c       	mov	r12,r3
8000642e:	fe b0 fa 7f 	rcall	8000592c <quorem>
80006432:	40 4b       	lddsp	r11,sp[0x10]
80006434:	f8 c0 ff d0 	sub	r0,r12,-48
80006438:	06 9c       	mov	r12,r3
8000643a:	e0 a0 07 d1 	rcall	800073dc <__mcmp>
8000643e:	08 9a       	mov	r10,r4
80006440:	50 6c       	stdsp	sp[0x18],r12
80006442:	04 9b       	mov	r11,r2
80006444:	0e 9c       	mov	r12,r7
80006446:	e0 a0 08 87 	rcall	80007554 <__mdiff>
8000644a:	18 91       	mov	r1,r12
8000644c:	78 38       	ld.w	r8,r12[0xc]
8000644e:	58 08       	cp.w	r8,0
80006450:	c0 30       	breq	80006456 <_dtoa_r+0xa0a>
80006452:	30 16       	mov	r6,1
80006454:	c0 68       	rjmp	80006460 <_dtoa_r+0xa14>
80006456:	18 9b       	mov	r11,r12
80006458:	06 9c       	mov	r12,r3
8000645a:	e0 a0 07 c1 	rcall	800073dc <__mcmp>
8000645e:	18 96       	mov	r6,r12
80006460:	0e 9c       	mov	r12,r7
80006462:	02 9b       	mov	r11,r1
80006464:	e0 a0 07 d6 	rcall	80007410 <_Bfree>
80006468:	40 cc       	lddsp	r12,sp[0x30]
8000646a:	ed ec 10 08 	or	r8,r6,r12
8000646e:	c0 d1       	brne	80006488 <_dtoa_r+0xa3c>
80006470:	40 db       	lddsp	r11,sp[0x34]
80006472:	58 0b       	cp.w	r11,0
80006474:	c0 a1       	brne	80006488 <_dtoa_r+0xa3c>
80006476:	40 26       	lddsp	r6,sp[0x8]
80006478:	e0 40 00 39 	cp.w	r0,57
8000647c:	c3 00       	breq	800064dc <_dtoa_r+0xa90>
8000647e:	40 6a       	lddsp	r10,sp[0x18]
80006480:	58 0a       	cp.w	r10,0
80006482:	e0 89 00 24 	brgt	800064ca <_dtoa_r+0xa7e>
80006486:	c2 f8       	rjmp	800064e4 <_dtoa_r+0xa98>
80006488:	40 69       	lddsp	r9,sp[0x18]
8000648a:	58 09       	cp.w	r9,0
8000648c:	c0 85       	brlt	8000649c <_dtoa_r+0xa50>
8000648e:	12 98       	mov	r8,r9
80006490:	40 cc       	lddsp	r12,sp[0x30]
80006492:	18 48       	or	r8,r12
80006494:	c1 d1       	brne	800064ce <_dtoa_r+0xa82>
80006496:	40 db       	lddsp	r11,sp[0x34]
80006498:	58 0b       	cp.w	r11,0
8000649a:	c1 a1       	brne	800064ce <_dtoa_r+0xa82>
8000649c:	0c 99       	mov	r9,r6
8000649e:	40 26       	lddsp	r6,sp[0x8]
800064a0:	58 09       	cp.w	r9,0
800064a2:	e0 8a 00 21 	brle	800064e4 <_dtoa_r+0xa98>
800064a6:	06 9b       	mov	r11,r3
800064a8:	30 1a       	mov	r10,1
800064aa:	0e 9c       	mov	r12,r7
800064ac:	e0 a0 08 bc 	rcall	80007624 <__lshift>
800064b0:	04 9b       	mov	r11,r2
800064b2:	18 93       	mov	r3,r12
800064b4:	e0 a0 07 94 	rcall	800073dc <__mcmp>
800064b8:	e0 89 00 06 	brgt	800064c4 <_dtoa_r+0xa78>
800064bc:	c1 41       	brne	800064e4 <_dtoa_r+0xa98>
800064be:	ed b0 00 00 	bld	r0,0x0
800064c2:	c1 11       	brne	800064e4 <_dtoa_r+0xa98>
800064c4:	e0 40 00 39 	cp.w	r0,57
800064c8:	c0 a0       	breq	800064dc <_dtoa_r+0xa90>
800064ca:	2f f0       	sub	r0,-1
800064cc:	c0 c8       	rjmp	800064e4 <_dtoa_r+0xa98>
800064ce:	58 06       	cp.w	r6,0
800064d0:	e0 8a 00 0c 	brle	800064e8 <_dtoa_r+0xa9c>
800064d4:	40 26       	lddsp	r6,sp[0x8]
800064d6:	e0 40 00 39 	cp.w	r0,57
800064da:	c0 41       	brne	800064e2 <_dtoa_r+0xa96>
800064dc:	33 98       	mov	r8,57
800064de:	0a c8       	st.b	r5++,r8
800064e0:	c6 78       	rjmp	800065ae <_dtoa_r+0xb62>
800064e2:	2f f0       	sub	r0,-1
800064e4:	0a c0       	st.b	r5++,r0
800064e6:	c7 58       	rjmp	800065d0 <_dtoa_r+0xb84>
800064e8:	0a c0       	st.b	r5++,r0
800064ea:	40 9a       	lddsp	r10,sp[0x24]
800064ec:	40 e9       	lddsp	r9,sp[0x38]
800064ee:	12 3a       	cp.w	r10,r9
800064f0:	c4 30       	breq	80006576 <_dtoa_r+0xb2a>
800064f2:	06 9b       	mov	r11,r3
800064f4:	30 09       	mov	r9,0
800064f6:	30 aa       	mov	r10,10
800064f8:	0e 9c       	mov	r12,r7
800064fa:	e0 a0 09 61 	rcall	800077bc <__multadd>
800064fe:	40 48       	lddsp	r8,sp[0x10]
80006500:	18 93       	mov	r3,r12
80006502:	08 38       	cp.w	r8,r4
80006504:	c0 91       	brne	80006516 <_dtoa_r+0xaca>
80006506:	10 9b       	mov	r11,r8
80006508:	30 09       	mov	r9,0
8000650a:	30 aa       	mov	r10,10
8000650c:	0e 9c       	mov	r12,r7
8000650e:	e0 a0 09 57 	rcall	800077bc <__multadd>
80006512:	50 4c       	stdsp	sp[0x10],r12
80006514:	c0 e8       	rjmp	80006530 <_dtoa_r+0xae4>
80006516:	40 4b       	lddsp	r11,sp[0x10]
80006518:	30 09       	mov	r9,0
8000651a:	30 aa       	mov	r10,10
8000651c:	0e 9c       	mov	r12,r7
8000651e:	e0 a0 09 4f 	rcall	800077bc <__multadd>
80006522:	08 9b       	mov	r11,r4
80006524:	50 4c       	stdsp	sp[0x10],r12
80006526:	30 09       	mov	r9,0
80006528:	30 aa       	mov	r10,10
8000652a:	0e 9c       	mov	r12,r7
8000652c:	e0 a0 09 48 	rcall	800077bc <__multadd>
80006530:	18 94       	mov	r4,r12
80006532:	40 9c       	lddsp	r12,sp[0x24]
80006534:	2f fc       	sub	r12,-1
80006536:	50 9c       	stdsp	sp[0x24],r12
80006538:	c7 9b       	rjmp	8000642a <_dtoa_r+0x9de>
8000653a:	30 18       	mov	r8,1
8000653c:	06 90       	mov	r0,r3
8000653e:	40 85       	lddsp	r5,sp[0x20]
80006540:	08 93       	mov	r3,r4
80006542:	0c 94       	mov	r4,r6
80006544:	10 96       	mov	r6,r8
80006546:	04 9b       	mov	r11,r2
80006548:	00 9c       	mov	r12,r0
8000654a:	fe b0 f9 f1 	rcall	8000592c <quorem>
8000654e:	2d 0c       	sub	r12,-48
80006550:	0a cc       	st.b	r5++,r12
80006552:	02 36       	cp.w	r6,r1
80006554:	c0 a4       	brge	80006568 <_dtoa_r+0xb1c>
80006556:	00 9b       	mov	r11,r0
80006558:	30 09       	mov	r9,0
8000655a:	30 aa       	mov	r10,10
8000655c:	0e 9c       	mov	r12,r7
8000655e:	2f f6       	sub	r6,-1
80006560:	e0 a0 09 2e 	rcall	800077bc <__multadd>
80006564:	18 90       	mov	r0,r12
80006566:	cf 0b       	rjmp	80006546 <_dtoa_r+0xafa>
80006568:	08 96       	mov	r6,r4
8000656a:	30 0b       	mov	r11,0
8000656c:	06 94       	mov	r4,r3
8000656e:	50 4b       	stdsp	sp[0x10],r11
80006570:	00 93       	mov	r3,r0
80006572:	18 90       	mov	r0,r12
80006574:	c0 28       	rjmp	80006578 <_dtoa_r+0xb2c>
80006576:	40 26       	lddsp	r6,sp[0x8]
80006578:	06 9b       	mov	r11,r3
8000657a:	30 1a       	mov	r10,1
8000657c:	0e 9c       	mov	r12,r7
8000657e:	e0 a0 08 53 	rcall	80007624 <__lshift>
80006582:	04 9b       	mov	r11,r2
80006584:	18 93       	mov	r3,r12
80006586:	e0 a0 07 2b 	rcall	800073dc <__mcmp>
8000658a:	e0 89 00 12 	brgt	800065ae <_dtoa_r+0xb62>
8000658e:	c1 b1       	brne	800065c4 <_dtoa_r+0xb78>
80006590:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006594:	c0 d1       	brne	800065ae <_dtoa_r+0xb62>
80006596:	c1 78       	rjmp	800065c4 <_dtoa_r+0xb78>
80006598:	40 89       	lddsp	r9,sp[0x20]
8000659a:	12 38       	cp.w	r8,r9
8000659c:	c0 30       	breq	800065a2 <_dtoa_r+0xb56>
8000659e:	10 95       	mov	r5,r8
800065a0:	c0 88       	rjmp	800065b0 <_dtoa_r+0xb64>
800065a2:	2f f6       	sub	r6,-1
800065a4:	50 66       	stdsp	sp[0x18],r6
800065a6:	33 18       	mov	r8,49
800065a8:	40 8c       	lddsp	r12,sp[0x20]
800065aa:	b8 88       	st.b	r12[0x0],r8
800065ac:	c1 38       	rjmp	800065d2 <_dtoa_r+0xb86>
800065ae:	33 9a       	mov	r10,57
800065b0:	0a 98       	mov	r8,r5
800065b2:	11 79       	ld.ub	r9,--r8
800065b4:	f4 09 18 00 	cp.b	r9,r10
800065b8:	cf 00       	breq	80006598 <_dtoa_r+0xb4c>
800065ba:	2f f9       	sub	r9,-1
800065bc:	b0 89       	st.b	r8[0x0],r9
800065be:	c0 98       	rjmp	800065d0 <_dtoa_r+0xb84>
800065c0:	10 95       	mov	r5,r8
800065c2:	c0 28       	rjmp	800065c6 <_dtoa_r+0xb7a>
800065c4:	33 09       	mov	r9,48
800065c6:	0a 98       	mov	r8,r5
800065c8:	11 7a       	ld.ub	r10,--r8
800065ca:	f2 0a 18 00 	cp.b	r10,r9
800065ce:	cf 90       	breq	800065c0 <_dtoa_r+0xb74>
800065d0:	50 66       	stdsp	sp[0x18],r6
800065d2:	04 9b       	mov	r11,r2
800065d4:	0e 9c       	mov	r12,r7
800065d6:	e0 a0 07 1d 	rcall	80007410 <_Bfree>
800065da:	58 04       	cp.w	r4,0
800065dc:	c1 20       	breq	80006600 <_dtoa_r+0xbb4>
800065de:	40 4b       	lddsp	r11,sp[0x10]
800065e0:	08 3b       	cp.w	r11,r4
800065e2:	5f 19       	srne	r9
800065e4:	58 0b       	cp.w	r11,0
800065e6:	5f 18       	srne	r8
800065e8:	f3 e8 00 08 	and	r8,r9,r8
800065ec:	c0 40       	breq	800065f4 <_dtoa_r+0xba8>
800065ee:	0e 9c       	mov	r12,r7
800065f0:	e0 a0 07 10 	rcall	80007410 <_Bfree>
800065f4:	08 9b       	mov	r11,r4
800065f6:	0e 9c       	mov	r12,r7
800065f8:	e0 a0 07 0c 	rcall	80007410 <_Bfree>
800065fc:	c0 28       	rjmp	80006600 <_dtoa_r+0xbb4>
800065fe:	50 66       	stdsp	sp[0x18],r6
80006600:	0e 9c       	mov	r12,r7
80006602:	06 9b       	mov	r11,r3
80006604:	e0 a0 07 06 	rcall	80007410 <_Bfree>
80006608:	30 08       	mov	r8,0
8000660a:	aa 88       	st.b	r5[0x0],r8
8000660c:	40 68       	lddsp	r8,sp[0x18]
8000660e:	41 5a       	lddsp	r10,sp[0x54]
80006610:	2f f8       	sub	r8,-1
80006612:	41 29       	lddsp	r9,sp[0x48]
80006614:	95 08       	st.w	r10[0x0],r8
80006616:	40 8c       	lddsp	r12,sp[0x20]
80006618:	58 09       	cp.w	r9,0
8000661a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000661e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006622:	2e 6d       	sub	sp,-104
80006624:	d8 32       	popm	r0-r7,pc
80006626:	d7 03       	nop

80006628 <_fflush_r>:
80006628:	d4 21       	pushm	r4-r7,lr
8000662a:	16 97       	mov	r7,r11
8000662c:	18 96       	mov	r6,r12
8000662e:	76 48       	ld.w	r8,r11[0x10]
80006630:	58 08       	cp.w	r8,0
80006632:	c7 f0       	breq	80006730 <_fflush_r+0x108>
80006634:	58 0c       	cp.w	r12,0
80006636:	c0 50       	breq	80006640 <_fflush_r+0x18>
80006638:	78 68       	ld.w	r8,r12[0x18]
8000663a:	58 08       	cp.w	r8,0
8000663c:	c0 21       	brne	80006640 <_fflush_r+0x18>
8000663e:	cc dc       	rcall	800067d8 <__sinit>
80006640:	fe c8 b7 08 	sub	r8,pc,-18680
80006644:	10 37       	cp.w	r7,r8
80006646:	c0 31       	brne	8000664c <_fflush_r+0x24>
80006648:	6c 07       	ld.w	r7,r6[0x0]
8000664a:	c0 c8       	rjmp	80006662 <_fflush_r+0x3a>
8000664c:	fe c8 b6 f4 	sub	r8,pc,-18700
80006650:	10 37       	cp.w	r7,r8
80006652:	c0 31       	brne	80006658 <_fflush_r+0x30>
80006654:	6c 17       	ld.w	r7,r6[0x4]
80006656:	c0 68       	rjmp	80006662 <_fflush_r+0x3a>
80006658:	fe c8 b6 e0 	sub	r8,pc,-18720
8000665c:	10 37       	cp.w	r7,r8
8000665e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006662:	8e 6a       	ld.sh	r10,r7[0xc]
80006664:	14 98       	mov	r8,r10
80006666:	ed ba 00 03 	bld	r10,0x3
8000666a:	c4 20       	breq	800066ee <_fflush_r+0xc6>
8000666c:	ab ba       	sbr	r10,0xb
8000666e:	ae 6a       	st.h	r7[0xc],r10
80006670:	6e 18       	ld.w	r8,r7[0x4]
80006672:	58 08       	cp.w	r8,0
80006674:	e0 89 00 06 	brgt	80006680 <_fflush_r+0x58>
80006678:	6f 08       	ld.w	r8,r7[0x40]
8000667a:	58 08       	cp.w	r8,0
8000667c:	e0 8a 00 5a 	brle	80006730 <_fflush_r+0x108>
80006680:	6e b8       	ld.w	r8,r7[0x2c]
80006682:	58 08       	cp.w	r8,0
80006684:	c5 60       	breq	80006730 <_fflush_r+0x108>
80006686:	e2 1a 10 00 	andl	r10,0x1000,COH
8000668a:	c0 30       	breq	80006690 <_fflush_r+0x68>
8000668c:	6f 55       	ld.w	r5,r7[0x54]
8000668e:	c0 f8       	rjmp	800066ac <_fflush_r+0x84>
80006690:	30 19       	mov	r9,1
80006692:	6e 8b       	ld.w	r11,r7[0x20]
80006694:	0c 9c       	mov	r12,r6
80006696:	5d 18       	icall	r8
80006698:	18 95       	mov	r5,r12
8000669a:	5b fc       	cp.w	r12,-1
8000669c:	c0 81       	brne	800066ac <_fflush_r+0x84>
8000669e:	6c 38       	ld.w	r8,r6[0xc]
800066a0:	59 d8       	cp.w	r8,29
800066a2:	c4 70       	breq	80006730 <_fflush_r+0x108>
800066a4:	8e 68       	ld.sh	r8,r7[0xc]
800066a6:	a7 a8       	sbr	r8,0x6
800066a8:	ae 68       	st.h	r7[0xc],r8
800066aa:	d8 22       	popm	r4-r7,pc
800066ac:	8e 68       	ld.sh	r8,r7[0xc]
800066ae:	ed b8 00 02 	bld	r8,0x2
800066b2:	c0 91       	brne	800066c4 <_fflush_r+0x9c>
800066b4:	6e 18       	ld.w	r8,r7[0x4]
800066b6:	10 15       	sub	r5,r8
800066b8:	6e d8       	ld.w	r8,r7[0x34]
800066ba:	58 08       	cp.w	r8,0
800066bc:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800066c0:	eb d8 e1 15 	subne	r5,r5,r8
800066c4:	6e b8       	ld.w	r8,r7[0x2c]
800066c6:	0c 9c       	mov	r12,r6
800066c8:	30 09       	mov	r9,0
800066ca:	0a 9a       	mov	r10,r5
800066cc:	6e 8b       	ld.w	r11,r7[0x20]
800066ce:	5d 18       	icall	r8
800066d0:	8e 68       	ld.sh	r8,r7[0xc]
800066d2:	0a 3c       	cp.w	r12,r5
800066d4:	c2 61       	brne	80006720 <_fflush_r+0xf8>
800066d6:	ab d8       	cbr	r8,0xb
800066d8:	30 0c       	mov	r12,0
800066da:	6e 49       	ld.w	r9,r7[0x10]
800066dc:	ae 68       	st.h	r7[0xc],r8
800066de:	8f 1c       	st.w	r7[0x4],r12
800066e0:	8f 09       	st.w	r7[0x0],r9
800066e2:	ed b8 00 0c 	bld	r8,0xc
800066e6:	c2 51       	brne	80006730 <_fflush_r+0x108>
800066e8:	ef 45 00 54 	st.w	r7[84],r5
800066ec:	d8 22       	popm	r4-r7,pc
800066ee:	6e 45       	ld.w	r5,r7[0x10]
800066f0:	58 05       	cp.w	r5,0
800066f2:	c1 f0       	breq	80006730 <_fflush_r+0x108>
800066f4:	6e 04       	ld.w	r4,r7[0x0]
800066f6:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800066fa:	8f 05       	st.w	r7[0x0],r5
800066fc:	f9 b8 01 00 	movne	r8,0
80006700:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006704:	0a 14       	sub	r4,r5
80006706:	8f 28       	st.w	r7[0x8],r8
80006708:	c1 18       	rjmp	8000672a <_fflush_r+0x102>
8000670a:	08 99       	mov	r9,r4
8000670c:	0a 9a       	mov	r10,r5
8000670e:	6e a8       	ld.w	r8,r7[0x28]
80006710:	6e 8b       	ld.w	r11,r7[0x20]
80006712:	0c 9c       	mov	r12,r6
80006714:	5d 18       	icall	r8
80006716:	18 14       	sub	r4,r12
80006718:	58 0c       	cp.w	r12,0
8000671a:	e0 89 00 07 	brgt	80006728 <_fflush_r+0x100>
8000671e:	8e 68       	ld.sh	r8,r7[0xc]
80006720:	a7 a8       	sbr	r8,0x6
80006722:	3f fc       	mov	r12,-1
80006724:	ae 68       	st.h	r7[0xc],r8
80006726:	d8 22       	popm	r4-r7,pc
80006728:	18 05       	add	r5,r12
8000672a:	58 04       	cp.w	r4,0
8000672c:	fe 99 ff ef 	brgt	8000670a <_fflush_r+0xe2>
80006730:	d8 2a       	popm	r4-r7,pc,r12=0
80006732:	d7 03       	nop

80006734 <__sfp_lock_acquire>:
80006734:	5e fc       	retal	r12

80006736 <__sfp_lock_release>:
80006736:	5e fc       	retal	r12

80006738 <_cleanup_r>:
80006738:	d4 01       	pushm	lr
8000673a:	fe cb e8 6a 	sub	r11,pc,-6038
8000673e:	e0 a0 02 fd 	rcall	80006d38 <_fwalk>
80006742:	d8 02       	popm	pc

80006744 <__sfmoreglue>:
80006744:	d4 21       	pushm	r4-r7,lr
80006746:	16 95       	mov	r5,r11
80006748:	f6 06 10 5c 	mul	r6,r11,92
8000674c:	ec cb ff f4 	sub	r11,r6,-12
80006750:	e0 a0 03 84 	rcall	80006e58 <_malloc_r>
80006754:	18 97       	mov	r7,r12
80006756:	c0 90       	breq	80006768 <__sfmoreglue+0x24>
80006758:	99 15       	st.w	r12[0x4],r5
8000675a:	30 0b       	mov	r11,0
8000675c:	2f 4c       	sub	r12,-12
8000675e:	0c 9a       	mov	r10,r6
80006760:	8f 2c       	st.w	r7[0x8],r12
80006762:	8f 0b       	st.w	r7[0x0],r11
80006764:	e0 a0 05 bc 	rcall	800072dc <memset>
80006768:	0e 9c       	mov	r12,r7
8000676a:	d8 22       	popm	r4-r7,pc

8000676c <__sfp>:
8000676c:	d4 21       	pushm	r4-r7,lr
8000676e:	fe c8 b7 d2 	sub	r8,pc,-18478
80006772:	18 96       	mov	r6,r12
80006774:	70 07       	ld.w	r7,r8[0x0]
80006776:	6e 68       	ld.w	r8,r7[0x18]
80006778:	58 08       	cp.w	r8,0
8000677a:	c0 31       	brne	80006780 <__sfp+0x14>
8000677c:	0e 9c       	mov	r12,r7
8000677e:	c2 dc       	rcall	800067d8 <__sinit>
80006780:	ee c7 ff 28 	sub	r7,r7,-216
80006784:	30 05       	mov	r5,0
80006786:	6e 2c       	ld.w	r12,r7[0x8]
80006788:	6e 18       	ld.w	r8,r7[0x4]
8000678a:	c0 68       	rjmp	80006796 <__sfp+0x2a>
8000678c:	98 69       	ld.sh	r9,r12[0xc]
8000678e:	ea 09 19 00 	cp.h	r9,r5
80006792:	c1 10       	breq	800067b4 <__sfp+0x48>
80006794:	2a 4c       	sub	r12,-92
80006796:	20 18       	sub	r8,1
80006798:	cf a7       	brpl	8000678c <__sfp+0x20>
8000679a:	6e 08       	ld.w	r8,r7[0x0]
8000679c:	58 08       	cp.w	r8,0
8000679e:	c0 61       	brne	800067aa <__sfp+0x3e>
800067a0:	30 4b       	mov	r11,4
800067a2:	0c 9c       	mov	r12,r6
800067a4:	cd 0f       	rcall	80006744 <__sfmoreglue>
800067a6:	8f 0c       	st.w	r7[0x0],r12
800067a8:	c0 30       	breq	800067ae <__sfp+0x42>
800067aa:	6e 07       	ld.w	r7,r7[0x0]
800067ac:	ce db       	rjmp	80006786 <__sfp+0x1a>
800067ae:	30 c8       	mov	r8,12
800067b0:	8d 38       	st.w	r6[0xc],r8
800067b2:	d8 22       	popm	r4-r7,pc
800067b4:	30 08       	mov	r8,0
800067b6:	f9 48 00 4c 	st.w	r12[76],r8
800067ba:	99 08       	st.w	r12[0x0],r8
800067bc:	99 28       	st.w	r12[0x8],r8
800067be:	99 18       	st.w	r12[0x4],r8
800067c0:	99 48       	st.w	r12[0x10],r8
800067c2:	99 58       	st.w	r12[0x14],r8
800067c4:	99 68       	st.w	r12[0x18],r8
800067c6:	99 d8       	st.w	r12[0x34],r8
800067c8:	99 e8       	st.w	r12[0x38],r8
800067ca:	f9 48 00 48 	st.w	r12[72],r8
800067ce:	3f f8       	mov	r8,-1
800067d0:	b8 78       	st.h	r12[0xe],r8
800067d2:	30 18       	mov	r8,1
800067d4:	b8 68       	st.h	r12[0xc],r8
800067d6:	d8 22       	popm	r4-r7,pc

800067d8 <__sinit>:
800067d8:	d4 21       	pushm	r4-r7,lr
800067da:	18 96       	mov	r6,r12
800067dc:	78 67       	ld.w	r7,r12[0x18]
800067de:	58 07       	cp.w	r7,0
800067e0:	c4 91       	brne	80006872 <__sinit+0x9a>
800067e2:	fe c8 00 aa 	sub	r8,pc,170
800067e6:	30 15       	mov	r5,1
800067e8:	99 a8       	st.w	r12[0x28],r8
800067ea:	f9 47 00 d8 	st.w	r12[216],r7
800067ee:	f9 47 00 dc 	st.w	r12[220],r7
800067f2:	f9 47 00 e0 	st.w	r12[224],r7
800067f6:	99 65       	st.w	r12[0x18],r5
800067f8:	cb af       	rcall	8000676c <__sfp>
800067fa:	8d 0c       	st.w	r6[0x0],r12
800067fc:	0c 9c       	mov	r12,r6
800067fe:	cb 7f       	rcall	8000676c <__sfp>
80006800:	8d 1c       	st.w	r6[0x4],r12
80006802:	0c 9c       	mov	r12,r6
80006804:	cb 4f       	rcall	8000676c <__sfp>
80006806:	6c 09       	ld.w	r9,r6[0x0]
80006808:	30 48       	mov	r8,4
8000680a:	93 07       	st.w	r9[0x0],r7
8000680c:	b2 68       	st.h	r9[0xc],r8
8000680e:	93 17       	st.w	r9[0x4],r7
80006810:	93 27       	st.w	r9[0x8],r7
80006812:	6c 18       	ld.w	r8,r6[0x4]
80006814:	b2 77       	st.h	r9[0xe],r7
80006816:	93 47       	st.w	r9[0x10],r7
80006818:	93 57       	st.w	r9[0x14],r7
8000681a:	93 67       	st.w	r9[0x18],r7
8000681c:	93 89       	st.w	r9[0x20],r9
8000681e:	91 07       	st.w	r8[0x0],r7
80006820:	91 17       	st.w	r8[0x4],r7
80006822:	91 27       	st.w	r8[0x8],r7
80006824:	fe ce eb e4 	sub	lr,pc,-5148
80006828:	fe cb ec 14 	sub	r11,pc,-5100
8000682c:	93 9e       	st.w	r9[0x24],lr
8000682e:	93 ab       	st.w	r9[0x28],r11
80006830:	fe ca ec 3c 	sub	r10,pc,-5060
80006834:	fe c4 ec 48 	sub	r4,pc,-5048
80006838:	93 ba       	st.w	r9[0x2c],r10
8000683a:	93 c4       	st.w	r9[0x30],r4
8000683c:	30 99       	mov	r9,9
8000683e:	b0 69       	st.h	r8[0xc],r9
80006840:	b0 75       	st.h	r8[0xe],r5
80006842:	91 c4       	st.w	r8[0x30],r4
80006844:	91 47       	st.w	r8[0x10],r7
80006846:	91 57       	st.w	r8[0x14],r7
80006848:	91 67       	st.w	r8[0x18],r7
8000684a:	91 88       	st.w	r8[0x20],r8
8000684c:	91 9e       	st.w	r8[0x24],lr
8000684e:	91 ab       	st.w	r8[0x28],r11
80006850:	91 ba       	st.w	r8[0x2c],r10
80006852:	8d 2c       	st.w	r6[0x8],r12
80006854:	31 28       	mov	r8,18
80006856:	99 07       	st.w	r12[0x0],r7
80006858:	b8 68       	st.h	r12[0xc],r8
8000685a:	99 17       	st.w	r12[0x4],r7
8000685c:	99 27       	st.w	r12[0x8],r7
8000685e:	30 28       	mov	r8,2
80006860:	b8 78       	st.h	r12[0xe],r8
80006862:	99 c4       	st.w	r12[0x30],r4
80006864:	99 67       	st.w	r12[0x18],r7
80006866:	99 9e       	st.w	r12[0x24],lr
80006868:	99 ab       	st.w	r12[0x28],r11
8000686a:	99 ba       	st.w	r12[0x2c],r10
8000686c:	99 47       	st.w	r12[0x10],r7
8000686e:	99 57       	st.w	r12[0x14],r7
80006870:	99 8c       	st.w	r12[0x20],r12
80006872:	d8 22       	popm	r4-r7,pc

80006874 <_malloc_trim_r>:
80006874:	d4 21       	pushm	r4-r7,lr
80006876:	16 95       	mov	r5,r11
80006878:	18 97       	mov	r7,r12
8000687a:	e0 a0 05 38 	rcall	800072ea <__malloc_lock>
8000687e:	e0 64 00 fc 	mov	r4,252
80006882:	68 28       	ld.w	r8,r4[0x8]
80006884:	70 16       	ld.w	r6,r8[0x4]
80006886:	e0 16 ff fc 	andl	r6,0xfffc
8000688a:	ec c8 ff 91 	sub	r8,r6,-111
8000688e:	f0 05 01 05 	sub	r5,r8,r5
80006892:	e0 15 ff 80 	andl	r5,0xff80
80006896:	ea c5 00 80 	sub	r5,r5,128
8000689a:	e0 45 00 7f 	cp.w	r5,127
8000689e:	e0 8a 00 25 	brle	800068e8 <_malloc_trim_r+0x74>
800068a2:	30 0b       	mov	r11,0
800068a4:	0e 9c       	mov	r12,r7
800068a6:	e0 a0 09 93 	rcall	80007bcc <_sbrk_r>
800068aa:	68 28       	ld.w	r8,r4[0x8]
800068ac:	0c 08       	add	r8,r6
800068ae:	10 3c       	cp.w	r12,r8
800068b0:	c1 c1       	brne	800068e8 <_malloc_trim_r+0x74>
800068b2:	ea 0b 11 00 	rsub	r11,r5,0
800068b6:	0e 9c       	mov	r12,r7
800068b8:	e0 a0 09 8a 	rcall	80007bcc <_sbrk_r>
800068bc:	5b fc       	cp.w	r12,-1
800068be:	c1 91       	brne	800068f0 <_malloc_trim_r+0x7c>
800068c0:	30 0b       	mov	r11,0
800068c2:	0e 9c       	mov	r12,r7
800068c4:	e0 a0 09 84 	rcall	80007bcc <_sbrk_r>
800068c8:	68 28       	ld.w	r8,r4[0x8]
800068ca:	f8 08 01 09 	sub	r9,r12,r8
800068ce:	58 f9       	cp.w	r9,15
800068d0:	e0 8a 00 0c 	brle	800068e8 <_malloc_trim_r+0x74>
800068d4:	a1 a9       	sbr	r9,0x0
800068d6:	91 19       	st.w	r8[0x4],r9
800068d8:	e0 68 05 08 	mov	r8,1288
800068dc:	70 09       	ld.w	r9,r8[0x0]
800068de:	e0 68 07 34 	mov	r8,1844
800068e2:	f8 09 01 09 	sub	r9,r12,r9
800068e6:	91 09       	st.w	r8[0x0],r9
800068e8:	0e 9c       	mov	r12,r7
800068ea:	e0 a0 05 01 	rcall	800072ec <__malloc_unlock>
800068ee:	d8 2a       	popm	r4-r7,pc,r12=0
800068f0:	68 28       	ld.w	r8,r4[0x8]
800068f2:	0a 16       	sub	r6,r5
800068f4:	a1 a6       	sbr	r6,0x0
800068f6:	91 16       	st.w	r8[0x4],r6
800068f8:	e0 68 07 34 	mov	r8,1844
800068fc:	70 09       	ld.w	r9,r8[0x0]
800068fe:	0a 19       	sub	r9,r5
80006900:	0e 9c       	mov	r12,r7
80006902:	91 09       	st.w	r8[0x0],r9
80006904:	e0 a0 04 f4 	rcall	800072ec <__malloc_unlock>
80006908:	da 2a       	popm	r4-r7,pc,r12=1
8000690a:	d7 03       	nop

8000690c <_free_r>:
8000690c:	d4 21       	pushm	r4-r7,lr
8000690e:	16 96       	mov	r6,r11
80006910:	18 97       	mov	r7,r12
80006912:	58 0b       	cp.w	r11,0
80006914:	e0 80 00 c0 	breq	80006a94 <_free_r+0x188>
80006918:	e0 a0 04 e9 	rcall	800072ea <__malloc_lock>
8000691c:	20 86       	sub	r6,8
8000691e:	e0 6a 00 fc 	mov	r10,252
80006922:	6c 18       	ld.w	r8,r6[0x4]
80006924:	74 2e       	ld.w	lr,r10[0x8]
80006926:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000692a:	a1 c8       	cbr	r8,0x0
8000692c:	ec 08 00 09 	add	r9,r6,r8
80006930:	72 1b       	ld.w	r11,r9[0x4]
80006932:	e0 1b ff fc 	andl	r11,0xfffc
80006936:	1c 39       	cp.w	r9,lr
80006938:	c1 e1       	brne	80006974 <_free_r+0x68>
8000693a:	f6 08 00 08 	add	r8,r11,r8
8000693e:	58 0c       	cp.w	r12,0
80006940:	c0 81       	brne	80006950 <_free_r+0x44>
80006942:	6c 09       	ld.w	r9,r6[0x0]
80006944:	12 16       	sub	r6,r9
80006946:	12 08       	add	r8,r9
80006948:	6c 3b       	ld.w	r11,r6[0xc]
8000694a:	6c 29       	ld.w	r9,r6[0x8]
8000694c:	97 29       	st.w	r11[0x8],r9
8000694e:	93 3b       	st.w	r9[0xc],r11
80006950:	10 99       	mov	r9,r8
80006952:	95 26       	st.w	r10[0x8],r6
80006954:	a1 a9       	sbr	r9,0x0
80006956:	8d 19       	st.w	r6[0x4],r9
80006958:	e0 69 05 04 	mov	r9,1284
8000695c:	72 09       	ld.w	r9,r9[0x0]
8000695e:	12 38       	cp.w	r8,r9
80006960:	c0 63       	brcs	8000696c <_free_r+0x60>
80006962:	e0 68 07 30 	mov	r8,1840
80006966:	0e 9c       	mov	r12,r7
80006968:	70 0b       	ld.w	r11,r8[0x0]
8000696a:	c8 5f       	rcall	80006874 <_malloc_trim_r>
8000696c:	0e 9c       	mov	r12,r7
8000696e:	e0 a0 04 bf 	rcall	800072ec <__malloc_unlock>
80006972:	d8 22       	popm	r4-r7,pc
80006974:	93 1b       	st.w	r9[0x4],r11
80006976:	58 0c       	cp.w	r12,0
80006978:	c0 30       	breq	8000697e <_free_r+0x72>
8000697a:	30 0c       	mov	r12,0
8000697c:	c1 08       	rjmp	8000699c <_free_r+0x90>
8000697e:	6c 0e       	ld.w	lr,r6[0x0]
80006980:	f4 c5 ff f8 	sub	r5,r10,-8
80006984:	1c 16       	sub	r6,lr
80006986:	1c 08       	add	r8,lr
80006988:	6c 2e       	ld.w	lr,r6[0x8]
8000698a:	0a 3e       	cp.w	lr,r5
8000698c:	f9 bc 00 01 	moveq	r12,1
80006990:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006994:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006998:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000699c:	f2 0b 00 0e 	add	lr,r9,r11
800069a0:	7c 1e       	ld.w	lr,lr[0x4]
800069a2:	ed be 00 00 	bld	lr,0x0
800069a6:	c1 40       	breq	800069ce <_free_r+0xc2>
800069a8:	16 08       	add	r8,r11
800069aa:	58 0c       	cp.w	r12,0
800069ac:	c0 d1       	brne	800069c6 <_free_r+0xba>
800069ae:	e0 6e 00 fc 	mov	lr,252
800069b2:	72 2b       	ld.w	r11,r9[0x8]
800069b4:	2f 8e       	sub	lr,-8
800069b6:	1c 3b       	cp.w	r11,lr
800069b8:	c0 71       	brne	800069c6 <_free_r+0xba>
800069ba:	97 36       	st.w	r11[0xc],r6
800069bc:	97 26       	st.w	r11[0x8],r6
800069be:	8d 2b       	st.w	r6[0x8],r11
800069c0:	8d 3b       	st.w	r6[0xc],r11
800069c2:	30 1c       	mov	r12,1
800069c4:	c0 58       	rjmp	800069ce <_free_r+0xc2>
800069c6:	72 2b       	ld.w	r11,r9[0x8]
800069c8:	72 39       	ld.w	r9,r9[0xc]
800069ca:	93 2b       	st.w	r9[0x8],r11
800069cc:	97 39       	st.w	r11[0xc],r9
800069ce:	10 99       	mov	r9,r8
800069d0:	ec 08 09 08 	st.w	r6[r8],r8
800069d4:	a1 a9       	sbr	r9,0x0
800069d6:	8d 19       	st.w	r6[0x4],r9
800069d8:	58 0c       	cp.w	r12,0
800069da:	c5 a1       	brne	80006a8e <_free_r+0x182>
800069dc:	e0 48 01 ff 	cp.w	r8,511
800069e0:	e0 8b 00 13 	brhi	80006a06 <_free_r+0xfa>
800069e4:	a3 98       	lsr	r8,0x3
800069e6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800069ea:	72 2b       	ld.w	r11,r9[0x8]
800069ec:	8d 39       	st.w	r6[0xc],r9
800069ee:	8d 2b       	st.w	r6[0x8],r11
800069f0:	97 36       	st.w	r11[0xc],r6
800069f2:	93 26       	st.w	r9[0x8],r6
800069f4:	a3 48       	asr	r8,0x2
800069f6:	74 19       	ld.w	r9,r10[0x4]
800069f8:	30 1b       	mov	r11,1
800069fa:	f6 08 09 48 	lsl	r8,r11,r8
800069fe:	f3 e8 10 08 	or	r8,r9,r8
80006a02:	95 18       	st.w	r10[0x4],r8
80006a04:	c4 58       	rjmp	80006a8e <_free_r+0x182>
80006a06:	f0 0b 16 09 	lsr	r11,r8,0x9
80006a0a:	58 4b       	cp.w	r11,4
80006a0c:	e0 8b 00 06 	brhi	80006a18 <_free_r+0x10c>
80006a10:	f0 0b 16 06 	lsr	r11,r8,0x6
80006a14:	2c 8b       	sub	r11,-56
80006a16:	c2 08       	rjmp	80006a56 <_free_r+0x14a>
80006a18:	59 4b       	cp.w	r11,20
80006a1a:	e0 8b 00 04 	brhi	80006a22 <_free_r+0x116>
80006a1e:	2a 5b       	sub	r11,-91
80006a20:	c1 b8       	rjmp	80006a56 <_free_r+0x14a>
80006a22:	e0 4b 00 54 	cp.w	r11,84
80006a26:	e0 8b 00 06 	brhi	80006a32 <_free_r+0x126>
80006a2a:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006a2e:	29 2b       	sub	r11,-110
80006a30:	c1 38       	rjmp	80006a56 <_free_r+0x14a>
80006a32:	e0 4b 01 54 	cp.w	r11,340
80006a36:	e0 8b 00 06 	brhi	80006a42 <_free_r+0x136>
80006a3a:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006a3e:	28 9b       	sub	r11,-119
80006a40:	c0 b8       	rjmp	80006a56 <_free_r+0x14a>
80006a42:	e0 4b 05 54 	cp.w	r11,1364
80006a46:	e0 88 00 05 	brls	80006a50 <_free_r+0x144>
80006a4a:	37 eb       	mov	r11,126
80006a4c:	c0 58       	rjmp	80006a56 <_free_r+0x14a>
80006a4e:	d7 03       	nop
80006a50:	f0 0b 16 12 	lsr	r11,r8,0x12
80006a54:	28 4b       	sub	r11,-124
80006a56:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006a5a:	78 29       	ld.w	r9,r12[0x8]
80006a5c:	18 39       	cp.w	r9,r12
80006a5e:	c0 e1       	brne	80006a7a <_free_r+0x16e>
80006a60:	74 18       	ld.w	r8,r10[0x4]
80006a62:	a3 4b       	asr	r11,0x2
80006a64:	30 1c       	mov	r12,1
80006a66:	f8 0b 09 4b 	lsl	r11,r12,r11
80006a6a:	f1 eb 10 0b 	or	r11,r8,r11
80006a6e:	12 98       	mov	r8,r9
80006a70:	95 1b       	st.w	r10[0x4],r11
80006a72:	c0 a8       	rjmp	80006a86 <_free_r+0x17a>
80006a74:	72 29       	ld.w	r9,r9[0x8]
80006a76:	18 39       	cp.w	r9,r12
80006a78:	c0 60       	breq	80006a84 <_free_r+0x178>
80006a7a:	72 1a       	ld.w	r10,r9[0x4]
80006a7c:	e0 1a ff fc 	andl	r10,0xfffc
80006a80:	14 38       	cp.w	r8,r10
80006a82:	cf 93       	brcs	80006a74 <_free_r+0x168>
80006a84:	72 38       	ld.w	r8,r9[0xc]
80006a86:	8d 38       	st.w	r6[0xc],r8
80006a88:	8d 29       	st.w	r6[0x8],r9
80006a8a:	93 36       	st.w	r9[0xc],r6
80006a8c:	91 26       	st.w	r8[0x8],r6
80006a8e:	0e 9c       	mov	r12,r7
80006a90:	e0 a0 04 2e 	rcall	800072ec <__malloc_unlock>
80006a94:	d8 22       	popm	r4-r7,pc
80006a96:	d7 03       	nop

80006a98 <__sfvwrite_r>:
80006a98:	d4 31       	pushm	r0-r7,lr
80006a9a:	20 3d       	sub	sp,12
80006a9c:	14 94       	mov	r4,r10
80006a9e:	18 95       	mov	r5,r12
80006aa0:	16 97       	mov	r7,r11
80006aa2:	74 28       	ld.w	r8,r10[0x8]
80006aa4:	58 08       	cp.w	r8,0
80006aa6:	e0 80 01 45 	breq	80006d30 <__sfvwrite_r+0x298>
80006aaa:	96 68       	ld.sh	r8,r11[0xc]
80006aac:	ed b8 00 03 	bld	r8,0x3
80006ab0:	c0 41       	brne	80006ab8 <__sfvwrite_r+0x20>
80006ab2:	76 48       	ld.w	r8,r11[0x10]
80006ab4:	58 08       	cp.w	r8,0
80006ab6:	c0 c1       	brne	80006ace <__sfvwrite_r+0x36>
80006ab8:	0e 9b       	mov	r11,r7
80006aba:	0a 9c       	mov	r12,r5
80006abc:	fe b0 f6 ca 	rcall	80005850 <__swsetup_r>
80006ac0:	c0 70       	breq	80006ace <__sfvwrite_r+0x36>
80006ac2:	8e 68       	ld.sh	r8,r7[0xc]
80006ac4:	a7 a8       	sbr	r8,0x6
80006ac6:	ae 68       	st.h	r7[0xc],r8
80006ac8:	30 98       	mov	r8,9
80006aca:	8b 38       	st.w	r5[0xc],r8
80006acc:	c3 09       	rjmp	80006d2c <__sfvwrite_r+0x294>
80006ace:	8e 63       	ld.sh	r3,r7[0xc]
80006ad0:	68 00       	ld.w	r0,r4[0x0]
80006ad2:	06 96       	mov	r6,r3
80006ad4:	e2 16 00 02 	andl	r6,0x2,COH
80006ad8:	c2 10       	breq	80006b1a <__sfvwrite_r+0x82>
80006ada:	30 03       	mov	r3,0
80006adc:	e0 62 04 00 	mov	r2,1024
80006ae0:	06 96       	mov	r6,r3
80006ae2:	c0 48       	rjmp	80006aea <__sfvwrite_r+0x52>
80006ae4:	60 03       	ld.w	r3,r0[0x0]
80006ae6:	60 16       	ld.w	r6,r0[0x4]
80006ae8:	2f 80       	sub	r0,-8
80006aea:	58 06       	cp.w	r6,0
80006aec:	cf c0       	breq	80006ae4 <__sfvwrite_r+0x4c>
80006aee:	e0 46 04 00 	cp.w	r6,1024
80006af2:	ec 09 17 80 	movls	r9,r6
80006af6:	e4 09 17 b0 	movhi	r9,r2
80006afa:	06 9a       	mov	r10,r3
80006afc:	6e a8       	ld.w	r8,r7[0x28]
80006afe:	6e 8b       	ld.w	r11,r7[0x20]
80006b00:	0a 9c       	mov	r12,r5
80006b02:	5d 18       	icall	r8
80006b04:	18 16       	sub	r6,r12
80006b06:	58 0c       	cp.w	r12,0
80006b08:	e0 8a 01 0f 	brle	80006d26 <__sfvwrite_r+0x28e>
80006b0c:	68 28       	ld.w	r8,r4[0x8]
80006b0e:	18 18       	sub	r8,r12
80006b10:	89 28       	st.w	r4[0x8],r8
80006b12:	e0 80 01 0f 	breq	80006d30 <__sfvwrite_r+0x298>
80006b16:	18 03       	add	r3,r12
80006b18:	ce 9b       	rjmp	80006aea <__sfvwrite_r+0x52>
80006b1a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006b1e:	c0 70       	breq	80006b2c <__sfvwrite_r+0x94>
80006b20:	50 06       	stdsp	sp[0x0],r6
80006b22:	0c 93       	mov	r3,r6
80006b24:	0c 91       	mov	r1,r6
80006b26:	50 15       	stdsp	sp[0x4],r5
80006b28:	08 92       	mov	r2,r4
80006b2a:	c9 e8       	rjmp	80006c66 <__sfvwrite_r+0x1ce>
80006b2c:	06 96       	mov	r6,r3
80006b2e:	08 91       	mov	r1,r4
80006b30:	c0 48       	rjmp	80006b38 <__sfvwrite_r+0xa0>
80006b32:	60 03       	ld.w	r3,r0[0x0]
80006b34:	60 16       	ld.w	r6,r0[0x4]
80006b36:	2f 80       	sub	r0,-8
80006b38:	58 06       	cp.w	r6,0
80006b3a:	cf c0       	breq	80006b32 <__sfvwrite_r+0x9a>
80006b3c:	8e 68       	ld.sh	r8,r7[0xc]
80006b3e:	6e 24       	ld.w	r4,r7[0x8]
80006b40:	10 99       	mov	r9,r8
80006b42:	e2 19 02 00 	andl	r9,0x200,COH
80006b46:	c5 50       	breq	80006bf0 <__sfvwrite_r+0x158>
80006b48:	08 36       	cp.w	r6,r4
80006b4a:	c4 33       	brcs	80006bd0 <__sfvwrite_r+0x138>
80006b4c:	10 99       	mov	r9,r8
80006b4e:	e2 19 04 80 	andl	r9,0x480,COH
80006b52:	c3 f0       	breq	80006bd0 <__sfvwrite_r+0x138>
80006b54:	6e 4b       	ld.w	r11,r7[0x10]
80006b56:	6e 09       	ld.w	r9,r7[0x0]
80006b58:	16 19       	sub	r9,r11
80006b5a:	50 09       	stdsp	sp[0x0],r9
80006b5c:	6e 59       	ld.w	r9,r7[0x14]
80006b5e:	10 9c       	mov	r12,r8
80006b60:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006b64:	30 28       	mov	r8,2
80006b66:	f4 08 0c 08 	divs	r8,r10,r8
80006b6a:	fa e9 00 04 	st.d	sp[4],r8
80006b6e:	10 94       	mov	r4,r8
80006b70:	40 09       	lddsp	r9,sp[0x0]
80006b72:	e2 1c 04 00 	andl	r12,0x400,COH
80006b76:	2f f9       	sub	r9,-1
80006b78:	0c 09       	add	r9,r6
80006b7a:	12 38       	cp.w	r8,r9
80006b7c:	f2 04 17 30 	movlo	r4,r9
80006b80:	58 0c       	cp.w	r12,0
80006b82:	c1 00       	breq	80006ba2 <__sfvwrite_r+0x10a>
80006b84:	08 9b       	mov	r11,r4
80006b86:	0a 9c       	mov	r12,r5
80006b88:	c6 8d       	rcall	80006e58 <_malloc_r>
80006b8a:	18 92       	mov	r2,r12
80006b8c:	c1 40       	breq	80006bb4 <__sfvwrite_r+0x11c>
80006b8e:	40 0a       	lddsp	r10,sp[0x0]
80006b90:	6e 4b       	ld.w	r11,r7[0x10]
80006b92:	fe b0 e4 29 	rcall	800033e4 <memcpy>
80006b96:	8e 68       	ld.sh	r8,r7[0xc]
80006b98:	e0 18 fb 7f 	andl	r8,0xfb7f
80006b9c:	a7 b8       	sbr	r8,0x7
80006b9e:	ae 68       	st.h	r7[0xc],r8
80006ba0:	c0 d8       	rjmp	80006bba <__sfvwrite_r+0x122>
80006ba2:	08 9a       	mov	r10,r4
80006ba4:	0a 9c       	mov	r12,r5
80006ba6:	e0 a0 06 8f 	rcall	800078c4 <_realloc_r>
80006baa:	18 92       	mov	r2,r12
80006bac:	c0 71       	brne	80006bba <__sfvwrite_r+0x122>
80006bae:	6e 4b       	ld.w	r11,r7[0x10]
80006bb0:	0a 9c       	mov	r12,r5
80006bb2:	ca de       	rcall	8000690c <_free_r>
80006bb4:	30 c8       	mov	r8,12
80006bb6:	8b 38       	st.w	r5[0xc],r8
80006bb8:	cb 78       	rjmp	80006d26 <__sfvwrite_r+0x28e>
80006bba:	40 0a       	lddsp	r10,sp[0x0]
80006bbc:	40 09       	lddsp	r9,sp[0x0]
80006bbe:	e8 0a 01 0a 	sub	r10,r4,r10
80006bc2:	e4 09 00 08 	add	r8,r2,r9
80006bc6:	8f 54       	st.w	r7[0x14],r4
80006bc8:	8f 2a       	st.w	r7[0x8],r10
80006bca:	8f 08       	st.w	r7[0x0],r8
80006bcc:	8f 42       	st.w	r7[0x10],r2
80006bce:	0c 94       	mov	r4,r6
80006bd0:	08 36       	cp.w	r6,r4
80006bd2:	ec 04 17 30 	movlo	r4,r6
80006bd6:	06 9b       	mov	r11,r3
80006bd8:	08 9a       	mov	r10,r4
80006bda:	6e 0c       	ld.w	r12,r7[0x0]
80006bdc:	e0 a0 03 61 	rcall	8000729e <memmove>
80006be0:	6e 08       	ld.w	r8,r7[0x0]
80006be2:	08 08       	add	r8,r4
80006be4:	8f 08       	st.w	r7[0x0],r8
80006be6:	6e 28       	ld.w	r8,r7[0x8]
80006be8:	08 18       	sub	r8,r4
80006bea:	0c 94       	mov	r4,r6
80006bec:	8f 28       	st.w	r7[0x8],r8
80006bee:	c3 08       	rjmp	80006c4e <__sfvwrite_r+0x1b6>
80006bf0:	08 36       	cp.w	r6,r4
80006bf2:	5f ba       	srhi	r10
80006bf4:	6e 0c       	ld.w	r12,r7[0x0]
80006bf6:	6e 48       	ld.w	r8,r7[0x10]
80006bf8:	10 3c       	cp.w	r12,r8
80006bfa:	5f b8       	srhi	r8
80006bfc:	f5 e8 00 08 	and	r8,r10,r8
80006c00:	f2 08 18 00 	cp.b	r8,r9
80006c04:	c0 e0       	breq	80006c20 <__sfvwrite_r+0x188>
80006c06:	06 9b       	mov	r11,r3
80006c08:	08 9a       	mov	r10,r4
80006c0a:	e0 a0 03 4a 	rcall	8000729e <memmove>
80006c0e:	6e 08       	ld.w	r8,r7[0x0]
80006c10:	08 08       	add	r8,r4
80006c12:	0e 9b       	mov	r11,r7
80006c14:	8f 08       	st.w	r7[0x0],r8
80006c16:	0a 9c       	mov	r12,r5
80006c18:	fe b0 fd 08 	rcall	80006628 <_fflush_r>
80006c1c:	c1 90       	breq	80006c4e <__sfvwrite_r+0x1b6>
80006c1e:	c8 48       	rjmp	80006d26 <__sfvwrite_r+0x28e>
80006c20:	6e 59       	ld.w	r9,r7[0x14]
80006c22:	12 36       	cp.w	r6,r9
80006c24:	c0 a3       	brcs	80006c38 <__sfvwrite_r+0x1a0>
80006c26:	6e a8       	ld.w	r8,r7[0x28]
80006c28:	06 9a       	mov	r10,r3
80006c2a:	6e 8b       	ld.w	r11,r7[0x20]
80006c2c:	0a 9c       	mov	r12,r5
80006c2e:	5d 18       	icall	r8
80006c30:	18 94       	mov	r4,r12
80006c32:	e0 89 00 0e 	brgt	80006c4e <__sfvwrite_r+0x1b6>
80006c36:	c7 88       	rjmp	80006d26 <__sfvwrite_r+0x28e>
80006c38:	0c 9a       	mov	r10,r6
80006c3a:	06 9b       	mov	r11,r3
80006c3c:	e0 a0 03 31 	rcall	8000729e <memmove>
80006c40:	6e 08       	ld.w	r8,r7[0x0]
80006c42:	0c 08       	add	r8,r6
80006c44:	0c 94       	mov	r4,r6
80006c46:	8f 08       	st.w	r7[0x0],r8
80006c48:	6e 28       	ld.w	r8,r7[0x8]
80006c4a:	0c 18       	sub	r8,r6
80006c4c:	8f 28       	st.w	r7[0x8],r8
80006c4e:	62 28       	ld.w	r8,r1[0x8]
80006c50:	08 18       	sub	r8,r4
80006c52:	83 28       	st.w	r1[0x8],r8
80006c54:	c6 e0       	breq	80006d30 <__sfvwrite_r+0x298>
80006c56:	08 16       	sub	r6,r4
80006c58:	08 03       	add	r3,r4
80006c5a:	c6 fb       	rjmp	80006b38 <__sfvwrite_r+0xa0>
80006c5c:	60 03       	ld.w	r3,r0[0x0]
80006c5e:	60 11       	ld.w	r1,r0[0x4]
80006c60:	30 08       	mov	r8,0
80006c62:	2f 80       	sub	r0,-8
80006c64:	50 08       	stdsp	sp[0x0],r8
80006c66:	58 01       	cp.w	r1,0
80006c68:	cf a0       	breq	80006c5c <__sfvwrite_r+0x1c4>
80006c6a:	40 0a       	lddsp	r10,sp[0x0]
80006c6c:	58 0a       	cp.w	r10,0
80006c6e:	c1 51       	brne	80006c98 <__sfvwrite_r+0x200>
80006c70:	e2 c6 ff ff 	sub	r6,r1,-1
80006c74:	02 9a       	mov	r10,r1
80006c76:	30 ab       	mov	r11,10
80006c78:	06 9c       	mov	r12,r3
80006c7a:	e0 a0 03 07 	rcall	80007288 <memchr>
80006c7e:	f8 c8 ff ff 	sub	r8,r12,-1
80006c82:	58 0c       	cp.w	r12,0
80006c84:	f1 d3 e1 16 	subne	r6,r8,r3
80006c88:	f9 b9 01 01 	movne	r9,1
80006c8c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006c90:	f9 b8 00 01 	moveq	r8,1
80006c94:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006c98:	02 36       	cp.w	r6,r1
80006c9a:	ec 04 17 80 	movls	r4,r6
80006c9e:	e2 04 17 b0 	movhi	r4,r1
80006ca2:	6e 59       	ld.w	r9,r7[0x14]
80006ca4:	6e 25       	ld.w	r5,r7[0x8]
80006ca6:	f2 05 00 05 	add	r5,r9,r5
80006caa:	0a 34       	cp.w	r4,r5
80006cac:	5f 9a       	srgt	r10
80006cae:	6e 0c       	ld.w	r12,r7[0x0]
80006cb0:	6e 48       	ld.w	r8,r7[0x10]
80006cb2:	10 3c       	cp.w	r12,r8
80006cb4:	5f b8       	srhi	r8
80006cb6:	f5 e8 00 08 	and	r8,r10,r8
80006cba:	30 0a       	mov	r10,0
80006cbc:	f4 08 18 00 	cp.b	r8,r10
80006cc0:	c0 e0       	breq	80006cdc <__sfvwrite_r+0x244>
80006cc2:	06 9b       	mov	r11,r3
80006cc4:	0a 9a       	mov	r10,r5
80006cc6:	e0 a0 02 ec 	rcall	8000729e <memmove>
80006cca:	6e 08       	ld.w	r8,r7[0x0]
80006ccc:	0a 08       	add	r8,r5
80006cce:	0e 9b       	mov	r11,r7
80006cd0:	8f 08       	st.w	r7[0x0],r8
80006cd2:	40 1c       	lddsp	r12,sp[0x4]
80006cd4:	fe b0 fc aa 	rcall	80006628 <_fflush_r>
80006cd8:	c1 80       	breq	80006d08 <__sfvwrite_r+0x270>
80006cda:	c2 68       	rjmp	80006d26 <__sfvwrite_r+0x28e>
80006cdc:	12 34       	cp.w	r4,r9
80006cde:	c0 a5       	brlt	80006cf2 <__sfvwrite_r+0x25a>
80006ce0:	6e a8       	ld.w	r8,r7[0x28]
80006ce2:	06 9a       	mov	r10,r3
80006ce4:	6e 8b       	ld.w	r11,r7[0x20]
80006ce6:	40 1c       	lddsp	r12,sp[0x4]
80006ce8:	5d 18       	icall	r8
80006cea:	18 95       	mov	r5,r12
80006cec:	e0 89 00 0e 	brgt	80006d08 <__sfvwrite_r+0x270>
80006cf0:	c1 b8       	rjmp	80006d26 <__sfvwrite_r+0x28e>
80006cf2:	08 9a       	mov	r10,r4
80006cf4:	06 9b       	mov	r11,r3
80006cf6:	e0 a0 02 d4 	rcall	8000729e <memmove>
80006cfa:	6e 08       	ld.w	r8,r7[0x0]
80006cfc:	08 08       	add	r8,r4
80006cfe:	08 95       	mov	r5,r4
80006d00:	8f 08       	st.w	r7[0x0],r8
80006d02:	6e 28       	ld.w	r8,r7[0x8]
80006d04:	08 18       	sub	r8,r4
80006d06:	8f 28       	st.w	r7[0x8],r8
80006d08:	0a 16       	sub	r6,r5
80006d0a:	c0 71       	brne	80006d18 <__sfvwrite_r+0x280>
80006d0c:	0e 9b       	mov	r11,r7
80006d0e:	40 1c       	lddsp	r12,sp[0x4]
80006d10:	fe b0 fc 8c 	rcall	80006628 <_fflush_r>
80006d14:	c0 91       	brne	80006d26 <__sfvwrite_r+0x28e>
80006d16:	50 06       	stdsp	sp[0x0],r6
80006d18:	64 28       	ld.w	r8,r2[0x8]
80006d1a:	0a 18       	sub	r8,r5
80006d1c:	85 28       	st.w	r2[0x8],r8
80006d1e:	c0 90       	breq	80006d30 <__sfvwrite_r+0x298>
80006d20:	0a 11       	sub	r1,r5
80006d22:	0a 03       	add	r3,r5
80006d24:	ca 1b       	rjmp	80006c66 <__sfvwrite_r+0x1ce>
80006d26:	8e 68       	ld.sh	r8,r7[0xc]
80006d28:	a7 a8       	sbr	r8,0x6
80006d2a:	ae 68       	st.h	r7[0xc],r8
80006d2c:	3f fc       	mov	r12,-1
80006d2e:	c0 28       	rjmp	80006d32 <__sfvwrite_r+0x29a>
80006d30:	30 0c       	mov	r12,0
80006d32:	2f dd       	sub	sp,-12
80006d34:	d8 32       	popm	r0-r7,pc
80006d36:	d7 03       	nop

80006d38 <_fwalk>:
80006d38:	d4 31       	pushm	r0-r7,lr
80006d3a:	30 05       	mov	r5,0
80006d3c:	16 91       	mov	r1,r11
80006d3e:	f8 c7 ff 28 	sub	r7,r12,-216
80006d42:	0a 92       	mov	r2,r5
80006d44:	fe b0 fc f8 	rcall	80006734 <__sfp_lock_acquire>
80006d48:	3f f3       	mov	r3,-1
80006d4a:	c1 68       	rjmp	80006d76 <_fwalk+0x3e>
80006d4c:	6e 26       	ld.w	r6,r7[0x8]
80006d4e:	6e 14       	ld.w	r4,r7[0x4]
80006d50:	2f 46       	sub	r6,-12
80006d52:	c0 c8       	rjmp	80006d6a <_fwalk+0x32>
80006d54:	8c 08       	ld.sh	r8,r6[0x0]
80006d56:	e4 08 19 00 	cp.h	r8,r2
80006d5a:	c0 70       	breq	80006d68 <_fwalk+0x30>
80006d5c:	8c 18       	ld.sh	r8,r6[0x2]
80006d5e:	e6 08 19 00 	cp.h	r8,r3
80006d62:	c0 30       	breq	80006d68 <_fwalk+0x30>
80006d64:	5d 11       	icall	r1
80006d66:	18 45       	or	r5,r12
80006d68:	2a 46       	sub	r6,-92
80006d6a:	20 14       	sub	r4,1
80006d6c:	ec cc 00 0c 	sub	r12,r6,12
80006d70:	58 04       	cp.w	r4,0
80006d72:	cf 14       	brge	80006d54 <_fwalk+0x1c>
80006d74:	6e 07       	ld.w	r7,r7[0x0]
80006d76:	58 07       	cp.w	r7,0
80006d78:	ce a1       	brne	80006d4c <_fwalk+0x14>
80006d7a:	fe b0 fc de 	rcall	80006736 <__sfp_lock_release>
80006d7e:	0a 9c       	mov	r12,r5
80006d80:	d8 32       	popm	r0-r7,pc
80006d82:	d7 03       	nop

80006d84 <_localeconv_r>:
80006d84:	fe cc bd e4 	sub	r12,pc,-16924
80006d88:	5e fc       	retal	r12
80006d8a:	d7 03       	nop

80006d8c <__smakebuf_r>:
80006d8c:	d4 21       	pushm	r4-r7,lr
80006d8e:	20 fd       	sub	sp,60
80006d90:	96 68       	ld.sh	r8,r11[0xc]
80006d92:	16 97       	mov	r7,r11
80006d94:	18 96       	mov	r6,r12
80006d96:	e2 18 00 02 	andl	r8,0x2,COH
80006d9a:	c3 c1       	brne	80006e12 <__smakebuf_r+0x86>
80006d9c:	96 7b       	ld.sh	r11,r11[0xe]
80006d9e:	f0 0b 19 00 	cp.h	r11,r8
80006da2:	c0 55       	brlt	80006dac <__smakebuf_r+0x20>
80006da4:	1a 9a       	mov	r10,sp
80006da6:	e0 a0 08 9d 	rcall	80007ee0 <_fstat_r>
80006daa:	c0 f4       	brge	80006dc8 <__smakebuf_r+0x3c>
80006dac:	8e 65       	ld.sh	r5,r7[0xc]
80006dae:	0a 98       	mov	r8,r5
80006db0:	ab b8       	sbr	r8,0xb
80006db2:	e2 15 00 80 	andl	r5,0x80,COH
80006db6:	ae 68       	st.h	r7[0xc],r8
80006db8:	30 04       	mov	r4,0
80006dba:	e0 68 04 00 	mov	r8,1024
80006dbe:	f9 b5 01 40 	movne	r5,64
80006dc2:	f0 05 17 00 	moveq	r5,r8
80006dc6:	c1 c8       	rjmp	80006dfe <__smakebuf_r+0x72>
80006dc8:	40 18       	lddsp	r8,sp[0x4]
80006dca:	e2 18 f0 00 	andl	r8,0xf000,COH
80006dce:	e0 48 20 00 	cp.w	r8,8192
80006dd2:	5f 04       	sreq	r4
80006dd4:	e0 48 80 00 	cp.w	r8,32768
80006dd8:	c0 e1       	brne	80006df4 <__smakebuf_r+0x68>
80006dda:	6e b9       	ld.w	r9,r7[0x2c]
80006ddc:	fe c8 f1 e8 	sub	r8,pc,-3608
80006de0:	10 39       	cp.w	r9,r8
80006de2:	c0 91       	brne	80006df4 <__smakebuf_r+0x68>
80006de4:	8e 68       	ld.sh	r8,r7[0xc]
80006de6:	e0 65 04 00 	mov	r5,1024
80006dea:	ab a8       	sbr	r8,0xa
80006dec:	ef 45 00 50 	st.w	r7[80],r5
80006df0:	ae 68       	st.h	r7[0xc],r8
80006df2:	c0 68       	rjmp	80006dfe <__smakebuf_r+0x72>
80006df4:	8e 68       	ld.sh	r8,r7[0xc]
80006df6:	e0 65 04 00 	mov	r5,1024
80006dfa:	ab b8       	sbr	r8,0xb
80006dfc:	ae 68       	st.h	r7[0xc],r8
80006dfe:	0a 9b       	mov	r11,r5
80006e00:	0c 9c       	mov	r12,r6
80006e02:	c2 bc       	rcall	80006e58 <_malloc_r>
80006e04:	8e 68       	ld.sh	r8,r7[0xc]
80006e06:	c0 d1       	brne	80006e20 <__smakebuf_r+0x94>
80006e08:	ed b8 00 09 	bld	r8,0x9
80006e0c:	c1 b0       	breq	80006e42 <__smakebuf_r+0xb6>
80006e0e:	a1 b8       	sbr	r8,0x1
80006e10:	ae 68       	st.h	r7[0xc],r8
80006e12:	ee c8 ff b9 	sub	r8,r7,-71
80006e16:	8f 48       	st.w	r7[0x10],r8
80006e18:	8f 08       	st.w	r7[0x0],r8
80006e1a:	30 18       	mov	r8,1
80006e1c:	8f 58       	st.w	r7[0x14],r8
80006e1e:	c1 28       	rjmp	80006e42 <__smakebuf_r+0xb6>
80006e20:	a7 b8       	sbr	r8,0x7
80006e22:	8f 4c       	st.w	r7[0x10],r12
80006e24:	ae 68       	st.h	r7[0xc],r8
80006e26:	8f 55       	st.w	r7[0x14],r5
80006e28:	fe c8 06 f0 	sub	r8,pc,1776
80006e2c:	8f 0c       	st.w	r7[0x0],r12
80006e2e:	8d a8       	st.w	r6[0x28],r8
80006e30:	58 04       	cp.w	r4,0
80006e32:	c0 80       	breq	80006e42 <__smakebuf_r+0xb6>
80006e34:	8e 7c       	ld.sh	r12,r7[0xe]
80006e36:	e0 a0 07 47 	rcall	80007cc4 <isatty>
80006e3a:	c0 40       	breq	80006e42 <__smakebuf_r+0xb6>
80006e3c:	8e 68       	ld.sh	r8,r7[0xc]
80006e3e:	a1 a8       	sbr	r8,0x0
80006e40:	ae 68       	st.h	r7[0xc],r8
80006e42:	2f 1d       	sub	sp,-60
80006e44:	d8 22       	popm	r4-r7,pc
80006e46:	d7 03       	nop

80006e48 <malloc>:
80006e48:	d4 01       	pushm	lr
80006e4a:	e0 68 00 f8 	mov	r8,248
80006e4e:	18 9b       	mov	r11,r12
80006e50:	70 0c       	ld.w	r12,r8[0x0]
80006e52:	c0 3c       	rcall	80006e58 <_malloc_r>
80006e54:	d8 02       	popm	pc
80006e56:	d7 03       	nop

80006e58 <_malloc_r>:
80006e58:	d4 31       	pushm	r0-r7,lr
80006e5a:	f6 c8 ff f5 	sub	r8,r11,-11
80006e5e:	18 95       	mov	r5,r12
80006e60:	10 97       	mov	r7,r8
80006e62:	e0 17 ff f8 	andl	r7,0xfff8
80006e66:	59 68       	cp.w	r8,22
80006e68:	f9 b7 08 10 	movls	r7,16
80006e6c:	16 37       	cp.w	r7,r11
80006e6e:	5f 38       	srlo	r8
80006e70:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006e74:	c0 50       	breq	80006e7e <_malloc_r+0x26>
80006e76:	30 c8       	mov	r8,12
80006e78:	99 38       	st.w	r12[0xc],r8
80006e7a:	e0 8f 01 f7 	bral	80007268 <_malloc_r+0x410>
80006e7e:	e0 a0 02 36 	rcall	800072ea <__malloc_lock>
80006e82:	e0 47 01 f7 	cp.w	r7,503
80006e86:	e0 8b 00 1d 	brhi	80006ec0 <_malloc_r+0x68>
80006e8a:	ee 03 16 03 	lsr	r3,r7,0x3
80006e8e:	e0 68 00 fc 	mov	r8,252
80006e92:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006e96:	70 36       	ld.w	r6,r8[0xc]
80006e98:	10 36       	cp.w	r6,r8
80006e9a:	c0 61       	brne	80006ea6 <_malloc_r+0x4e>
80006e9c:	ec c8 ff f8 	sub	r8,r6,-8
80006ea0:	70 36       	ld.w	r6,r8[0xc]
80006ea2:	10 36       	cp.w	r6,r8
80006ea4:	c0 c0       	breq	80006ebc <_malloc_r+0x64>
80006ea6:	6c 18       	ld.w	r8,r6[0x4]
80006ea8:	e0 18 ff fc 	andl	r8,0xfffc
80006eac:	6c 3a       	ld.w	r10,r6[0xc]
80006eae:	ec 08 00 09 	add	r9,r6,r8
80006eb2:	0a 9c       	mov	r12,r5
80006eb4:	6c 28       	ld.w	r8,r6[0x8]
80006eb6:	95 28       	st.w	r10[0x8],r8
80006eb8:	91 3a       	st.w	r8[0xc],r10
80006eba:	c4 78       	rjmp	80006f48 <_malloc_r+0xf0>
80006ebc:	2f e3       	sub	r3,-2
80006ebe:	c4 d8       	rjmp	80006f58 <_malloc_r+0x100>
80006ec0:	ee 03 16 09 	lsr	r3,r7,0x9
80006ec4:	c0 41       	brne	80006ecc <_malloc_r+0x74>
80006ec6:	ee 03 16 03 	lsr	r3,r7,0x3
80006eca:	c2 68       	rjmp	80006f16 <_malloc_r+0xbe>
80006ecc:	58 43       	cp.w	r3,4
80006ece:	e0 8b 00 06 	brhi	80006eda <_malloc_r+0x82>
80006ed2:	ee 03 16 06 	lsr	r3,r7,0x6
80006ed6:	2c 83       	sub	r3,-56
80006ed8:	c1 f8       	rjmp	80006f16 <_malloc_r+0xbe>
80006eda:	59 43       	cp.w	r3,20
80006edc:	e0 8b 00 04 	brhi	80006ee4 <_malloc_r+0x8c>
80006ee0:	2a 53       	sub	r3,-91
80006ee2:	c1 a8       	rjmp	80006f16 <_malloc_r+0xbe>
80006ee4:	e0 43 00 54 	cp.w	r3,84
80006ee8:	e0 8b 00 06 	brhi	80006ef4 <_malloc_r+0x9c>
80006eec:	ee 03 16 0c 	lsr	r3,r7,0xc
80006ef0:	29 23       	sub	r3,-110
80006ef2:	c1 28       	rjmp	80006f16 <_malloc_r+0xbe>
80006ef4:	e0 43 01 54 	cp.w	r3,340
80006ef8:	e0 8b 00 06 	brhi	80006f04 <_malloc_r+0xac>
80006efc:	ee 03 16 0f 	lsr	r3,r7,0xf
80006f00:	28 93       	sub	r3,-119
80006f02:	c0 a8       	rjmp	80006f16 <_malloc_r+0xbe>
80006f04:	e0 43 05 54 	cp.w	r3,1364
80006f08:	e0 88 00 04 	brls	80006f10 <_malloc_r+0xb8>
80006f0c:	37 e3       	mov	r3,126
80006f0e:	c0 48       	rjmp	80006f16 <_malloc_r+0xbe>
80006f10:	ee 03 16 12 	lsr	r3,r7,0x12
80006f14:	28 43       	sub	r3,-124
80006f16:	e0 6a 00 fc 	mov	r10,252
80006f1a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006f1e:	74 36       	ld.w	r6,r10[0xc]
80006f20:	c1 98       	rjmp	80006f52 <_malloc_r+0xfa>
80006f22:	6c 19       	ld.w	r9,r6[0x4]
80006f24:	e0 19 ff fc 	andl	r9,0xfffc
80006f28:	f2 07 01 0b 	sub	r11,r9,r7
80006f2c:	58 fb       	cp.w	r11,15
80006f2e:	e0 8a 00 04 	brle	80006f36 <_malloc_r+0xde>
80006f32:	20 13       	sub	r3,1
80006f34:	c1 18       	rjmp	80006f56 <_malloc_r+0xfe>
80006f36:	6c 38       	ld.w	r8,r6[0xc]
80006f38:	58 0b       	cp.w	r11,0
80006f3a:	c0 b5       	brlt	80006f50 <_malloc_r+0xf8>
80006f3c:	6c 2a       	ld.w	r10,r6[0x8]
80006f3e:	ec 09 00 09 	add	r9,r6,r9
80006f42:	0a 9c       	mov	r12,r5
80006f44:	91 2a       	st.w	r8[0x8],r10
80006f46:	95 38       	st.w	r10[0xc],r8
80006f48:	72 18       	ld.w	r8,r9[0x4]
80006f4a:	a1 a8       	sbr	r8,0x0
80006f4c:	93 18       	st.w	r9[0x4],r8
80006f4e:	cb c8       	rjmp	800070c6 <_malloc_r+0x26e>
80006f50:	10 96       	mov	r6,r8
80006f52:	14 36       	cp.w	r6,r10
80006f54:	ce 71       	brne	80006f22 <_malloc_r+0xca>
80006f56:	2f f3       	sub	r3,-1
80006f58:	e0 6a 00 fc 	mov	r10,252
80006f5c:	f4 cc ff f8 	sub	r12,r10,-8
80006f60:	78 26       	ld.w	r6,r12[0x8]
80006f62:	18 36       	cp.w	r6,r12
80006f64:	c6 c0       	breq	8000703c <_malloc_r+0x1e4>
80006f66:	6c 19       	ld.w	r9,r6[0x4]
80006f68:	e0 19 ff fc 	andl	r9,0xfffc
80006f6c:	f2 07 01 08 	sub	r8,r9,r7
80006f70:	58 f8       	cp.w	r8,15
80006f72:	e0 89 00 8f 	brgt	80007090 <_malloc_r+0x238>
80006f76:	99 3c       	st.w	r12[0xc],r12
80006f78:	99 2c       	st.w	r12[0x8],r12
80006f7a:	58 08       	cp.w	r8,0
80006f7c:	c0 55       	brlt	80006f86 <_malloc_r+0x12e>
80006f7e:	ec 09 00 09 	add	r9,r6,r9
80006f82:	0a 9c       	mov	r12,r5
80006f84:	ce 2b       	rjmp	80006f48 <_malloc_r+0xf0>
80006f86:	e0 49 01 ff 	cp.w	r9,511
80006f8a:	e0 8b 00 13 	brhi	80006fb0 <_malloc_r+0x158>
80006f8e:	a3 99       	lsr	r9,0x3
80006f90:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006f94:	70 2b       	ld.w	r11,r8[0x8]
80006f96:	8d 38       	st.w	r6[0xc],r8
80006f98:	8d 2b       	st.w	r6[0x8],r11
80006f9a:	97 36       	st.w	r11[0xc],r6
80006f9c:	91 26       	st.w	r8[0x8],r6
80006f9e:	a3 49       	asr	r9,0x2
80006fa0:	74 18       	ld.w	r8,r10[0x4]
80006fa2:	30 1b       	mov	r11,1
80006fa4:	f6 09 09 49 	lsl	r9,r11,r9
80006fa8:	f1 e9 10 09 	or	r9,r8,r9
80006fac:	95 19       	st.w	r10[0x4],r9
80006fae:	c4 78       	rjmp	8000703c <_malloc_r+0x1e4>
80006fb0:	f2 0a 16 09 	lsr	r10,r9,0x9
80006fb4:	58 4a       	cp.w	r10,4
80006fb6:	e0 8b 00 07 	brhi	80006fc4 <_malloc_r+0x16c>
80006fba:	f2 0a 16 06 	lsr	r10,r9,0x6
80006fbe:	2c 8a       	sub	r10,-56
80006fc0:	c2 08       	rjmp	80007000 <_malloc_r+0x1a8>
80006fc2:	d7 03       	nop
80006fc4:	59 4a       	cp.w	r10,20
80006fc6:	e0 8b 00 04 	brhi	80006fce <_malloc_r+0x176>
80006fca:	2a 5a       	sub	r10,-91
80006fcc:	c1 a8       	rjmp	80007000 <_malloc_r+0x1a8>
80006fce:	e0 4a 00 54 	cp.w	r10,84
80006fd2:	e0 8b 00 06 	brhi	80006fde <_malloc_r+0x186>
80006fd6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006fda:	29 2a       	sub	r10,-110
80006fdc:	c1 28       	rjmp	80007000 <_malloc_r+0x1a8>
80006fde:	e0 4a 01 54 	cp.w	r10,340
80006fe2:	e0 8b 00 06 	brhi	80006fee <_malloc_r+0x196>
80006fe6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006fea:	28 9a       	sub	r10,-119
80006fec:	c0 a8       	rjmp	80007000 <_malloc_r+0x1a8>
80006fee:	e0 4a 05 54 	cp.w	r10,1364
80006ff2:	e0 88 00 04 	brls	80006ffa <_malloc_r+0x1a2>
80006ff6:	37 ea       	mov	r10,126
80006ff8:	c0 48       	rjmp	80007000 <_malloc_r+0x1a8>
80006ffa:	f2 0a 16 12 	lsr	r10,r9,0x12
80006ffe:	28 4a       	sub	r10,-124
80007000:	e0 6b 00 fc 	mov	r11,252
80007004:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007008:	68 28       	ld.w	r8,r4[0x8]
8000700a:	08 38       	cp.w	r8,r4
8000700c:	c0 e1       	brne	80007028 <_malloc_r+0x1d0>
8000700e:	76 19       	ld.w	r9,r11[0x4]
80007010:	a3 4a       	asr	r10,0x2
80007012:	30 1e       	mov	lr,1
80007014:	fc 0a 09 4a 	lsl	r10,lr,r10
80007018:	f3 ea 10 0a 	or	r10,r9,r10
8000701c:	10 99       	mov	r9,r8
8000701e:	97 1a       	st.w	r11[0x4],r10
80007020:	c0 a8       	rjmp	80007034 <_malloc_r+0x1dc>
80007022:	70 28       	ld.w	r8,r8[0x8]
80007024:	08 38       	cp.w	r8,r4
80007026:	c0 60       	breq	80007032 <_malloc_r+0x1da>
80007028:	70 1a       	ld.w	r10,r8[0x4]
8000702a:	e0 1a ff fc 	andl	r10,0xfffc
8000702e:	14 39       	cp.w	r9,r10
80007030:	cf 93       	brcs	80007022 <_malloc_r+0x1ca>
80007032:	70 39       	ld.w	r9,r8[0xc]
80007034:	8d 39       	st.w	r6[0xc],r9
80007036:	8d 28       	st.w	r6[0x8],r8
80007038:	91 36       	st.w	r8[0xc],r6
8000703a:	93 26       	st.w	r9[0x8],r6
8000703c:	e6 08 14 02 	asr	r8,r3,0x2
80007040:	30 1b       	mov	r11,1
80007042:	e0 64 00 fc 	mov	r4,252
80007046:	f6 08 09 4b 	lsl	r11,r11,r8
8000704a:	68 18       	ld.w	r8,r4[0x4]
8000704c:	10 3b       	cp.w	r11,r8
8000704e:	e0 8b 00 69 	brhi	80007120 <_malloc_r+0x2c8>
80007052:	f7 e8 00 09 	and	r9,r11,r8
80007056:	c0 b1       	brne	8000706c <_malloc_r+0x214>
80007058:	e0 13 ff fc 	andl	r3,0xfffc
8000705c:	a1 7b       	lsl	r11,0x1
8000705e:	2f c3       	sub	r3,-4
80007060:	c0 38       	rjmp	80007066 <_malloc_r+0x20e>
80007062:	2f c3       	sub	r3,-4
80007064:	a1 7b       	lsl	r11,0x1
80007066:	f7 e8 00 09 	and	r9,r11,r8
8000706a:	cf c0       	breq	80007062 <_malloc_r+0x20a>
8000706c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007070:	06 92       	mov	r2,r3
80007072:	1c 91       	mov	r1,lr
80007074:	62 36       	ld.w	r6,r1[0xc]
80007076:	c2 d8       	rjmp	800070d0 <_malloc_r+0x278>
80007078:	6c 1a       	ld.w	r10,r6[0x4]
8000707a:	e0 1a ff fc 	andl	r10,0xfffc
8000707e:	f4 07 01 08 	sub	r8,r10,r7
80007082:	58 f8       	cp.w	r8,15
80007084:	e0 8a 00 15 	brle	800070ae <_malloc_r+0x256>
80007088:	6c 3a       	ld.w	r10,r6[0xc]
8000708a:	6c 29       	ld.w	r9,r6[0x8]
8000708c:	95 29       	st.w	r10[0x8],r9
8000708e:	93 3a       	st.w	r9[0xc],r10
80007090:	0e 99       	mov	r9,r7
80007092:	ec 07 00 07 	add	r7,r6,r7
80007096:	a1 a9       	sbr	r9,0x0
80007098:	99 37       	st.w	r12[0xc],r7
8000709a:	99 27       	st.w	r12[0x8],r7
8000709c:	8d 19       	st.w	r6[0x4],r9
8000709e:	ee 08 09 08 	st.w	r7[r8],r8
800070a2:	8f 2c       	st.w	r7[0x8],r12
800070a4:	8f 3c       	st.w	r7[0xc],r12
800070a6:	a1 a8       	sbr	r8,0x0
800070a8:	0a 9c       	mov	r12,r5
800070aa:	8f 18       	st.w	r7[0x4],r8
800070ac:	c0 d8       	rjmp	800070c6 <_malloc_r+0x26e>
800070ae:	6c 39       	ld.w	r9,r6[0xc]
800070b0:	58 08       	cp.w	r8,0
800070b2:	c0 e5       	brlt	800070ce <_malloc_r+0x276>
800070b4:	ec 0a 00 0a 	add	r10,r6,r10
800070b8:	74 18       	ld.w	r8,r10[0x4]
800070ba:	a1 a8       	sbr	r8,0x0
800070bc:	0a 9c       	mov	r12,r5
800070be:	95 18       	st.w	r10[0x4],r8
800070c0:	6c 28       	ld.w	r8,r6[0x8]
800070c2:	93 28       	st.w	r9[0x8],r8
800070c4:	91 39       	st.w	r8[0xc],r9
800070c6:	c1 3d       	rcall	800072ec <__malloc_unlock>
800070c8:	ec cc ff f8 	sub	r12,r6,-8
800070cc:	d8 32       	popm	r0-r7,pc
800070ce:	12 96       	mov	r6,r9
800070d0:	02 36       	cp.w	r6,r1
800070d2:	cd 31       	brne	80007078 <_malloc_r+0x220>
800070d4:	2f f2       	sub	r2,-1
800070d6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800070da:	c0 30       	breq	800070e0 <_malloc_r+0x288>
800070dc:	2f 81       	sub	r1,-8
800070de:	cc bb       	rjmp	80007074 <_malloc_r+0x21c>
800070e0:	1c 98       	mov	r8,lr
800070e2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800070e6:	c0 81       	brne	800070f6 <_malloc_r+0x29e>
800070e8:	68 19       	ld.w	r9,r4[0x4]
800070ea:	f6 08 11 ff 	rsub	r8,r11,-1
800070ee:	f3 e8 00 08 	and	r8,r9,r8
800070f2:	89 18       	st.w	r4[0x4],r8
800070f4:	c0 78       	rjmp	80007102 <_malloc_r+0x2aa>
800070f6:	f0 c9 00 08 	sub	r9,r8,8
800070fa:	20 13       	sub	r3,1
800070fc:	70 08       	ld.w	r8,r8[0x0]
800070fe:	12 38       	cp.w	r8,r9
80007100:	cf 10       	breq	800070e2 <_malloc_r+0x28a>
80007102:	a1 7b       	lsl	r11,0x1
80007104:	68 18       	ld.w	r8,r4[0x4]
80007106:	10 3b       	cp.w	r11,r8
80007108:	e0 8b 00 0c 	brhi	80007120 <_malloc_r+0x2c8>
8000710c:	58 0b       	cp.w	r11,0
8000710e:	c0 90       	breq	80007120 <_malloc_r+0x2c8>
80007110:	04 93       	mov	r3,r2
80007112:	c0 38       	rjmp	80007118 <_malloc_r+0x2c0>
80007114:	2f c3       	sub	r3,-4
80007116:	a1 7b       	lsl	r11,0x1
80007118:	f7 e8 00 09 	and	r9,r11,r8
8000711c:	ca 81       	brne	8000706c <_malloc_r+0x214>
8000711e:	cf bb       	rjmp	80007114 <_malloc_r+0x2bc>
80007120:	68 23       	ld.w	r3,r4[0x8]
80007122:	66 12       	ld.w	r2,r3[0x4]
80007124:	e0 12 ff fc 	andl	r2,0xfffc
80007128:	0e 32       	cp.w	r2,r7
8000712a:	5f 39       	srlo	r9
8000712c:	e4 07 01 08 	sub	r8,r2,r7
80007130:	58 f8       	cp.w	r8,15
80007132:	5f aa       	srle	r10
80007134:	f5 e9 10 09 	or	r9,r10,r9
80007138:	e0 80 00 9a 	breq	8000726c <_malloc_r+0x414>
8000713c:	e0 68 07 30 	mov	r8,1840
80007140:	70 01       	ld.w	r1,r8[0x0]
80007142:	e0 68 05 08 	mov	r8,1288
80007146:	2f 01       	sub	r1,-16
80007148:	70 08       	ld.w	r8,r8[0x0]
8000714a:	0e 01       	add	r1,r7
8000714c:	5b f8       	cp.w	r8,-1
8000714e:	c0 40       	breq	80007156 <_malloc_r+0x2fe>
80007150:	28 11       	sub	r1,-127
80007152:	e0 11 ff 80 	andl	r1,0xff80
80007156:	02 9b       	mov	r11,r1
80007158:	0a 9c       	mov	r12,r5
8000715a:	e0 a0 05 39 	rcall	80007bcc <_sbrk_r>
8000715e:	18 96       	mov	r6,r12
80007160:	5b fc       	cp.w	r12,-1
80007162:	c7 50       	breq	8000724c <_malloc_r+0x3f4>
80007164:	e6 02 00 08 	add	r8,r3,r2
80007168:	10 3c       	cp.w	r12,r8
8000716a:	c0 32       	brcc	80007170 <_malloc_r+0x318>
8000716c:	08 33       	cp.w	r3,r4
8000716e:	c6 f1       	brne	8000724c <_malloc_r+0x3f4>
80007170:	e0 6a 07 34 	mov	r10,1844
80007174:	74 09       	ld.w	r9,r10[0x0]
80007176:	e2 09 00 09 	add	r9,r1,r9
8000717a:	95 09       	st.w	r10[0x0],r9
8000717c:	10 36       	cp.w	r6,r8
8000717e:	c0 a1       	brne	80007192 <_malloc_r+0x33a>
80007180:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007184:	c0 71       	brne	80007192 <_malloc_r+0x33a>
80007186:	e2 02 00 02 	add	r2,r1,r2
8000718a:	68 28       	ld.w	r8,r4[0x8]
8000718c:	a1 a2       	sbr	r2,0x0
8000718e:	91 12       	st.w	r8[0x4],r2
80007190:	c4 f8       	rjmp	8000722e <_malloc_r+0x3d6>
80007192:	e0 6a 05 08 	mov	r10,1288
80007196:	74 0b       	ld.w	r11,r10[0x0]
80007198:	5b fb       	cp.w	r11,-1
8000719a:	c0 31       	brne	800071a0 <_malloc_r+0x348>
8000719c:	95 06       	st.w	r10[0x0],r6
8000719e:	c0 78       	rjmp	800071ac <_malloc_r+0x354>
800071a0:	ec 09 00 09 	add	r9,r6,r9
800071a4:	e0 6a 07 34 	mov	r10,1844
800071a8:	10 19       	sub	r9,r8
800071aa:	95 09       	st.w	r10[0x0],r9
800071ac:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800071b0:	f0 09 11 08 	rsub	r9,r8,8
800071b4:	58 08       	cp.w	r8,0
800071b6:	f2 08 17 10 	movne	r8,r9
800071ba:	ed d8 e1 06 	addne	r6,r6,r8
800071be:	28 08       	sub	r8,-128
800071c0:	ec 01 00 01 	add	r1,r6,r1
800071c4:	0a 9c       	mov	r12,r5
800071c6:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800071ca:	f0 01 01 01 	sub	r1,r8,r1
800071ce:	02 9b       	mov	r11,r1
800071d0:	e0 a0 04 fe 	rcall	80007bcc <_sbrk_r>
800071d4:	e0 68 07 34 	mov	r8,1844
800071d8:	5b fc       	cp.w	r12,-1
800071da:	ec 0c 17 00 	moveq	r12,r6
800071de:	f9 b1 00 00 	moveq	r1,0
800071e2:	70 09       	ld.w	r9,r8[0x0]
800071e4:	0c 1c       	sub	r12,r6
800071e6:	89 26       	st.w	r4[0x8],r6
800071e8:	02 0c       	add	r12,r1
800071ea:	12 01       	add	r1,r9
800071ec:	a1 ac       	sbr	r12,0x0
800071ee:	91 01       	st.w	r8[0x0],r1
800071f0:	8d 1c       	st.w	r6[0x4],r12
800071f2:	08 33       	cp.w	r3,r4
800071f4:	c1 d0       	breq	8000722e <_malloc_r+0x3d6>
800071f6:	58 f2       	cp.w	r2,15
800071f8:	e0 8b 00 05 	brhi	80007202 <_malloc_r+0x3aa>
800071fc:	30 18       	mov	r8,1
800071fe:	8d 18       	st.w	r6[0x4],r8
80007200:	c2 68       	rjmp	8000724c <_malloc_r+0x3f4>
80007202:	30 59       	mov	r9,5
80007204:	20 c2       	sub	r2,12
80007206:	e0 12 ff f8 	andl	r2,0xfff8
8000720a:	e6 02 00 08 	add	r8,r3,r2
8000720e:	91 29       	st.w	r8[0x8],r9
80007210:	91 19       	st.w	r8[0x4],r9
80007212:	66 18       	ld.w	r8,r3[0x4]
80007214:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007218:	e5 e8 10 08 	or	r8,r2,r8
8000721c:	87 18       	st.w	r3[0x4],r8
8000721e:	58 f2       	cp.w	r2,15
80007220:	e0 88 00 07 	brls	8000722e <_malloc_r+0x3d6>
80007224:	e6 cb ff f8 	sub	r11,r3,-8
80007228:	0a 9c       	mov	r12,r5
8000722a:	fe b0 fb 71 	rcall	8000690c <_free_r>
8000722e:	e0 69 07 2c 	mov	r9,1836
80007232:	72 0a       	ld.w	r10,r9[0x0]
80007234:	e0 68 07 34 	mov	r8,1844
80007238:	70 08       	ld.w	r8,r8[0x0]
8000723a:	14 38       	cp.w	r8,r10
8000723c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007240:	e0 69 07 28 	mov	r9,1832
80007244:	72 0a       	ld.w	r10,r9[0x0]
80007246:	14 38       	cp.w	r8,r10
80007248:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000724c:	68 28       	ld.w	r8,r4[0x8]
8000724e:	70 18       	ld.w	r8,r8[0x4]
80007250:	e0 18 ff fc 	andl	r8,0xfffc
80007254:	0e 38       	cp.w	r8,r7
80007256:	5f 39       	srlo	r9
80007258:	0e 18       	sub	r8,r7
8000725a:	58 f8       	cp.w	r8,15
8000725c:	5f aa       	srle	r10
8000725e:	f5 e9 10 09 	or	r9,r10,r9
80007262:	c0 50       	breq	8000726c <_malloc_r+0x414>
80007264:	0a 9c       	mov	r12,r5
80007266:	c4 3c       	rcall	800072ec <__malloc_unlock>
80007268:	d8 3a       	popm	r0-r7,pc,r12=0
8000726a:	d7 03       	nop
8000726c:	68 26       	ld.w	r6,r4[0x8]
8000726e:	a1 a8       	sbr	r8,0x0
80007270:	0e 99       	mov	r9,r7
80007272:	a1 a9       	sbr	r9,0x0
80007274:	8d 19       	st.w	r6[0x4],r9
80007276:	ec 07 00 07 	add	r7,r6,r7
8000727a:	0a 9c       	mov	r12,r5
8000727c:	89 27       	st.w	r4[0x8],r7
8000727e:	8f 18       	st.w	r7[0x4],r8
80007280:	c3 6c       	rcall	800072ec <__malloc_unlock>
80007282:	ec cc ff f8 	sub	r12,r6,-8
80007286:	d8 32       	popm	r0-r7,pc

80007288 <memchr>:
80007288:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000728c:	c0 68       	rjmp	80007298 <memchr+0x10>
8000728e:	20 1a       	sub	r10,1
80007290:	19 88       	ld.ub	r8,r12[0x0]
80007292:	16 38       	cp.w	r8,r11
80007294:	5e 0c       	reteq	r12
80007296:	2f fc       	sub	r12,-1
80007298:	58 0a       	cp.w	r10,0
8000729a:	cf a1       	brne	8000728e <memchr+0x6>
8000729c:	5e fa       	retal	r10

8000729e <memmove>:
8000729e:	d4 01       	pushm	lr
800072a0:	18 3b       	cp.w	r11,r12
800072a2:	c1 92       	brcc	800072d4 <memmove+0x36>
800072a4:	f6 0a 00 09 	add	r9,r11,r10
800072a8:	12 3c       	cp.w	r12,r9
800072aa:	c1 52       	brcc	800072d4 <memmove+0x36>
800072ac:	f8 0a 00 0b 	add	r11,r12,r10
800072b0:	30 08       	mov	r8,0
800072b2:	c0 68       	rjmp	800072be <memmove+0x20>
800072b4:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800072b8:	20 1a       	sub	r10,1
800072ba:	f6 08 0b 0e 	st.b	r11[r8],lr
800072be:	20 18       	sub	r8,1
800072c0:	58 0a       	cp.w	r10,0
800072c2:	cf 91       	brne	800072b4 <memmove+0x16>
800072c4:	d8 02       	popm	pc
800072c6:	f6 08 07 09 	ld.ub	r9,r11[r8]
800072ca:	20 1a       	sub	r10,1
800072cc:	f8 08 0b 09 	st.b	r12[r8],r9
800072d0:	2f f8       	sub	r8,-1
800072d2:	c0 28       	rjmp	800072d6 <memmove+0x38>
800072d4:	30 08       	mov	r8,0
800072d6:	58 0a       	cp.w	r10,0
800072d8:	cf 71       	brne	800072c6 <memmove+0x28>
800072da:	d8 02       	popm	pc

800072dc <memset>:
800072dc:	18 98       	mov	r8,r12
800072de:	c0 38       	rjmp	800072e4 <memset+0x8>
800072e0:	10 cb       	st.b	r8++,r11
800072e2:	20 1a       	sub	r10,1
800072e4:	58 0a       	cp.w	r10,0
800072e6:	cf d1       	brne	800072e0 <memset+0x4>
800072e8:	5e fc       	retal	r12

800072ea <__malloc_lock>:
800072ea:	5e fc       	retal	r12

800072ec <__malloc_unlock>:
800072ec:	5e fc       	retal	r12

800072ee <__hi0bits>:
800072ee:	18 98       	mov	r8,r12
800072f0:	e0 1c 00 00 	andl	r12,0x0
800072f4:	f0 09 15 10 	lsl	r9,r8,0x10
800072f8:	58 0c       	cp.w	r12,0
800072fa:	f2 08 17 00 	moveq	r8,r9
800072fe:	f9 bc 00 10 	moveq	r12,16
80007302:	f9 bc 01 00 	movne	r12,0
80007306:	10 9a       	mov	r10,r8
80007308:	f0 09 15 08 	lsl	r9,r8,0x8
8000730c:	e6 1a ff 00 	andh	r10,0xff00,COH
80007310:	f7 bc 00 f8 	subeq	r12,-8
80007314:	f2 08 17 00 	moveq	r8,r9
80007318:	10 9a       	mov	r10,r8
8000731a:	f0 09 15 04 	lsl	r9,r8,0x4
8000731e:	e6 1a f0 00 	andh	r10,0xf000,COH
80007322:	f7 bc 00 fc 	subeq	r12,-4
80007326:	f2 08 17 00 	moveq	r8,r9
8000732a:	10 9a       	mov	r10,r8
8000732c:	f0 09 15 02 	lsl	r9,r8,0x2
80007330:	e6 1a c0 00 	andh	r10,0xc000,COH
80007334:	f7 bc 00 fe 	subeq	r12,-2
80007338:	f2 08 17 00 	moveq	r8,r9
8000733c:	58 08       	cp.w	r8,0
8000733e:	5e 5c       	retlt	r12
80007340:	ed b8 00 1e 	bld	r8,0x1e
80007344:	f9 bc 01 20 	movne	r12,32
80007348:	f7 bc 00 ff 	subeq	r12,-1
8000734c:	5e fc       	retal	r12

8000734e <__lo0bits>:
8000734e:	18 99       	mov	r9,r12
80007350:	78 08       	ld.w	r8,r12[0x0]
80007352:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007356:	c1 50       	breq	80007380 <__lo0bits+0x32>
80007358:	ed b8 00 00 	bld	r8,0x0
8000735c:	c0 21       	brne	80007360 <__lo0bits+0x12>
8000735e:	5e fd       	retal	0
80007360:	10 9b       	mov	r11,r8
80007362:	f0 0a 16 01 	lsr	r10,r8,0x1
80007366:	e2 1b 00 02 	andl	r11,0x2,COH
8000736a:	a3 88       	lsr	r8,0x2
8000736c:	58 0b       	cp.w	r11,0
8000736e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007372:	f9 bc 01 01 	movne	r12,1
80007376:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000737a:	f9 bc 00 02 	moveq	r12,2
8000737e:	5e fc       	retal	r12
80007380:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007384:	f0 0b 16 10 	lsr	r11,r8,0x10
80007388:	58 0a       	cp.w	r10,0
8000738a:	f6 08 17 00 	moveq	r8,r11
8000738e:	f9 bc 00 10 	moveq	r12,16
80007392:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007396:	f0 0a 16 08 	lsr	r10,r8,0x8
8000739a:	58 0b       	cp.w	r11,0
8000739c:	f7 bc 00 f8 	subeq	r12,-8
800073a0:	f4 08 17 00 	moveq	r8,r10
800073a4:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800073a8:	f0 0a 16 04 	lsr	r10,r8,0x4
800073ac:	58 0b       	cp.w	r11,0
800073ae:	f7 bc 00 fc 	subeq	r12,-4
800073b2:	f4 08 17 00 	moveq	r8,r10
800073b6:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800073ba:	f0 0a 16 02 	lsr	r10,r8,0x2
800073be:	58 0b       	cp.w	r11,0
800073c0:	f7 bc 00 fe 	subeq	r12,-2
800073c4:	f4 08 17 00 	moveq	r8,r10
800073c8:	ed b8 00 00 	bld	r8,0x0
800073cc:	c0 60       	breq	800073d8 <__lo0bits+0x8a>
800073ce:	a1 98       	lsr	r8,0x1
800073d0:	c0 31       	brne	800073d6 <__lo0bits+0x88>
800073d2:	32 0c       	mov	r12,32
800073d4:	5e fc       	retal	r12
800073d6:	2f fc       	sub	r12,-1
800073d8:	93 08       	st.w	r9[0x0],r8
800073da:	5e fc       	retal	r12

800073dc <__mcmp>:
800073dc:	d4 01       	pushm	lr
800073de:	18 98       	mov	r8,r12
800073e0:	76 49       	ld.w	r9,r11[0x10]
800073e2:	78 4c       	ld.w	r12,r12[0x10]
800073e4:	12 1c       	sub	r12,r9
800073e6:	c1 31       	brne	8000740c <__mcmp+0x30>
800073e8:	2f b9       	sub	r9,-5
800073ea:	a3 69       	lsl	r9,0x2
800073ec:	12 0b       	add	r11,r9
800073ee:	f0 09 00 09 	add	r9,r8,r9
800073f2:	2e c8       	sub	r8,-20
800073f4:	13 4e       	ld.w	lr,--r9
800073f6:	17 4a       	ld.w	r10,--r11
800073f8:	14 3e       	cp.w	lr,r10
800073fa:	c0 60       	breq	80007406 <__mcmp+0x2a>
800073fc:	f9 bc 03 ff 	movlo	r12,-1
80007400:	f9 bc 02 01 	movhs	r12,1
80007404:	d8 02       	popm	pc
80007406:	10 39       	cp.w	r9,r8
80007408:	fe 9b ff f6 	brhi	800073f4 <__mcmp+0x18>
8000740c:	d8 02       	popm	pc
8000740e:	d7 03       	nop

80007410 <_Bfree>:
80007410:	d4 21       	pushm	r4-r7,lr
80007412:	18 97       	mov	r7,r12
80007414:	16 95       	mov	r5,r11
80007416:	78 96       	ld.w	r6,r12[0x24]
80007418:	58 06       	cp.w	r6,0
8000741a:	c0 91       	brne	8000742c <_Bfree+0x1c>
8000741c:	31 0c       	mov	r12,16
8000741e:	fe b0 fd 15 	rcall	80006e48 <malloc>
80007422:	99 36       	st.w	r12[0xc],r6
80007424:	8f 9c       	st.w	r7[0x24],r12
80007426:	99 16       	st.w	r12[0x4],r6
80007428:	99 26       	st.w	r12[0x8],r6
8000742a:	99 06       	st.w	r12[0x0],r6
8000742c:	58 05       	cp.w	r5,0
8000742e:	c0 90       	breq	80007440 <_Bfree+0x30>
80007430:	6a 19       	ld.w	r9,r5[0x4]
80007432:	6e 98       	ld.w	r8,r7[0x24]
80007434:	70 38       	ld.w	r8,r8[0xc]
80007436:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000743a:	8b 0a       	st.w	r5[0x0],r10
8000743c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007440:	d8 22       	popm	r4-r7,pc
80007442:	d7 03       	nop

80007444 <_Balloc>:
80007444:	d4 21       	pushm	r4-r7,lr
80007446:	18 97       	mov	r7,r12
80007448:	16 96       	mov	r6,r11
8000744a:	78 95       	ld.w	r5,r12[0x24]
8000744c:	58 05       	cp.w	r5,0
8000744e:	c0 91       	brne	80007460 <_Balloc+0x1c>
80007450:	31 0c       	mov	r12,16
80007452:	fe b0 fc fb 	rcall	80006e48 <malloc>
80007456:	99 35       	st.w	r12[0xc],r5
80007458:	8f 9c       	st.w	r7[0x24],r12
8000745a:	99 15       	st.w	r12[0x4],r5
8000745c:	99 25       	st.w	r12[0x8],r5
8000745e:	99 05       	st.w	r12[0x0],r5
80007460:	6e 95       	ld.w	r5,r7[0x24]
80007462:	6a 38       	ld.w	r8,r5[0xc]
80007464:	58 08       	cp.w	r8,0
80007466:	c0 b1       	brne	8000747c <_Balloc+0x38>
80007468:	31 0a       	mov	r10,16
8000746a:	30 4b       	mov	r11,4
8000746c:	0e 9c       	mov	r12,r7
8000746e:	e0 a0 04 93 	rcall	80007d94 <_calloc_r>
80007472:	8b 3c       	st.w	r5[0xc],r12
80007474:	6e 98       	ld.w	r8,r7[0x24]
80007476:	70 3c       	ld.w	r12,r8[0xc]
80007478:	58 0c       	cp.w	r12,0
8000747a:	c1 b0       	breq	800074b0 <_Balloc+0x6c>
8000747c:	6e 98       	ld.w	r8,r7[0x24]
8000747e:	70 38       	ld.w	r8,r8[0xc]
80007480:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007484:	70 0c       	ld.w	r12,r8[0x0]
80007486:	58 0c       	cp.w	r12,0
80007488:	c0 40       	breq	80007490 <_Balloc+0x4c>
8000748a:	78 09       	ld.w	r9,r12[0x0]
8000748c:	91 09       	st.w	r8[0x0],r9
8000748e:	c0 e8       	rjmp	800074aa <_Balloc+0x66>
80007490:	0e 9c       	mov	r12,r7
80007492:	30 17       	mov	r7,1
80007494:	0e 9b       	mov	r11,r7
80007496:	ee 06 09 47 	lsl	r7,r7,r6
8000749a:	ee ca ff fb 	sub	r10,r7,-5
8000749e:	a3 6a       	lsl	r10,0x2
800074a0:	e0 a0 04 7a 	rcall	80007d94 <_calloc_r>
800074a4:	c0 60       	breq	800074b0 <_Balloc+0x6c>
800074a6:	99 16       	st.w	r12[0x4],r6
800074a8:	99 27       	st.w	r12[0x8],r7
800074aa:	30 08       	mov	r8,0
800074ac:	99 38       	st.w	r12[0xc],r8
800074ae:	99 48       	st.w	r12[0x10],r8
800074b0:	d8 22       	popm	r4-r7,pc
800074b2:	d7 03       	nop

800074b4 <__d2b>:
800074b4:	d4 31       	pushm	r0-r7,lr
800074b6:	20 2d       	sub	sp,8
800074b8:	16 93       	mov	r3,r11
800074ba:	12 96       	mov	r6,r9
800074bc:	10 95       	mov	r5,r8
800074be:	14 92       	mov	r2,r10
800074c0:	30 1b       	mov	r11,1
800074c2:	cc 1f       	rcall	80007444 <_Balloc>
800074c4:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800074c8:	50 09       	stdsp	sp[0x0],r9
800074ca:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800074ce:	b5 a9       	sbr	r9,0x14
800074d0:	f0 01 16 14 	lsr	r1,r8,0x14
800074d4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800074d8:	18 94       	mov	r4,r12
800074da:	58 02       	cp.w	r2,0
800074dc:	c1 d0       	breq	80007516 <__d2b+0x62>
800074de:	fa cc ff f8 	sub	r12,sp,-8
800074e2:	18 d2       	st.w	--r12,r2
800074e4:	c3 5f       	rcall	8000734e <__lo0bits>
800074e6:	40 18       	lddsp	r8,sp[0x4]
800074e8:	c0 d0       	breq	80007502 <__d2b+0x4e>
800074ea:	40 09       	lddsp	r9,sp[0x0]
800074ec:	f8 0a 11 20 	rsub	r10,r12,32
800074f0:	f2 0a 09 4a 	lsl	r10,r9,r10
800074f4:	f5 e8 10 08 	or	r8,r10,r8
800074f8:	89 58       	st.w	r4[0x14],r8
800074fa:	f2 0c 0a 49 	lsr	r9,r9,r12
800074fe:	50 09       	stdsp	sp[0x0],r9
80007500:	c0 28       	rjmp	80007504 <__d2b+0x50>
80007502:	89 58       	st.w	r4[0x14],r8
80007504:	40 08       	lddsp	r8,sp[0x0]
80007506:	58 08       	cp.w	r8,0
80007508:	f9 b3 01 02 	movne	r3,2
8000750c:	f9 b3 00 01 	moveq	r3,1
80007510:	89 68       	st.w	r4[0x18],r8
80007512:	89 43       	st.w	r4[0x10],r3
80007514:	c0 88       	rjmp	80007524 <__d2b+0x70>
80007516:	1a 9c       	mov	r12,sp
80007518:	c1 bf       	rcall	8000734e <__lo0bits>
8000751a:	30 13       	mov	r3,1
8000751c:	40 08       	lddsp	r8,sp[0x0]
8000751e:	2e 0c       	sub	r12,-32
80007520:	89 43       	st.w	r4[0x10],r3
80007522:	89 58       	st.w	r4[0x14],r8
80007524:	58 01       	cp.w	r1,0
80007526:	c0 90       	breq	80007538 <__d2b+0x84>
80007528:	e2 c1 04 33 	sub	r1,r1,1075
8000752c:	18 01       	add	r1,r12
8000752e:	8d 01       	st.w	r6[0x0],r1
80007530:	f8 0c 11 35 	rsub	r12,r12,53
80007534:	8b 0c       	st.w	r5[0x0],r12
80007536:	c0 c8       	rjmp	8000754e <__d2b+0x9a>
80007538:	e6 c8 ff fc 	sub	r8,r3,-4
8000753c:	f8 cc 04 32 	sub	r12,r12,1074
80007540:	a5 73       	lsl	r3,0x5
80007542:	8d 0c       	st.w	r6[0x0],r12
80007544:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007548:	cd 3e       	rcall	800072ee <__hi0bits>
8000754a:	18 13       	sub	r3,r12
8000754c:	8b 03       	st.w	r5[0x0],r3
8000754e:	08 9c       	mov	r12,r4
80007550:	2f ed       	sub	sp,-8
80007552:	d8 32       	popm	r0-r7,pc

80007554 <__mdiff>:
80007554:	d4 31       	pushm	r0-r7,lr
80007556:	74 48       	ld.w	r8,r10[0x10]
80007558:	76 45       	ld.w	r5,r11[0x10]
8000755a:	16 97       	mov	r7,r11
8000755c:	14 96       	mov	r6,r10
8000755e:	10 15       	sub	r5,r8
80007560:	c1 31       	brne	80007586 <__mdiff+0x32>
80007562:	2f b8       	sub	r8,-5
80007564:	ee ce ff ec 	sub	lr,r7,-20
80007568:	a3 68       	lsl	r8,0x2
8000756a:	f4 08 00 0b 	add	r11,r10,r8
8000756e:	ee 08 00 08 	add	r8,r7,r8
80007572:	11 4a       	ld.w	r10,--r8
80007574:	17 49       	ld.w	r9,--r11
80007576:	12 3a       	cp.w	r10,r9
80007578:	c0 30       	breq	8000757e <__mdiff+0x2a>
8000757a:	c0 e2       	brcc	80007596 <__mdiff+0x42>
8000757c:	c0 78       	rjmp	8000758a <__mdiff+0x36>
8000757e:	1c 38       	cp.w	r8,lr
80007580:	fe 9b ff f9 	brhi	80007572 <__mdiff+0x1e>
80007584:	c4 98       	rjmp	80007616 <__mdiff+0xc2>
80007586:	58 05       	cp.w	r5,0
80007588:	c0 64       	brge	80007594 <__mdiff+0x40>
8000758a:	0e 98       	mov	r8,r7
8000758c:	30 15       	mov	r5,1
8000758e:	0c 97       	mov	r7,r6
80007590:	10 96       	mov	r6,r8
80007592:	c0 28       	rjmp	80007596 <__mdiff+0x42>
80007594:	30 05       	mov	r5,0
80007596:	6e 1b       	ld.w	r11,r7[0x4]
80007598:	c5 6f       	rcall	80007444 <_Balloc>
8000759a:	6e 49       	ld.w	r9,r7[0x10]
8000759c:	6c 44       	ld.w	r4,r6[0x10]
8000759e:	99 35       	st.w	r12[0xc],r5
800075a0:	2f b4       	sub	r4,-5
800075a2:	f2 c5 ff fb 	sub	r5,r9,-5
800075a6:	ec 04 00 24 	add	r4,r6,r4<<0x2
800075aa:	ee 05 00 25 	add	r5,r7,r5<<0x2
800075ae:	2e c6       	sub	r6,-20
800075b0:	2e c7       	sub	r7,-20
800075b2:	f8 c8 ff ec 	sub	r8,r12,-20
800075b6:	30 0a       	mov	r10,0
800075b8:	0f 0e       	ld.w	lr,r7++
800075ba:	0d 0b       	ld.w	r11,r6++
800075bc:	fc 02 16 10 	lsr	r2,lr,0x10
800075c0:	f6 03 16 10 	lsr	r3,r11,0x10
800075c4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800075c8:	e4 03 01 03 	sub	r3,r2,r3
800075cc:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800075d0:	fc 0b 01 0b 	sub	r11,lr,r11
800075d4:	f6 0a 00 0a 	add	r10,r11,r10
800075d8:	b0 1a       	st.h	r8[0x2],r10
800075da:	b1 4a       	asr	r10,0x10
800075dc:	e6 0a 00 0a 	add	r10,r3,r10
800075e0:	b0 0a       	st.h	r8[0x0],r10
800075e2:	2f c8       	sub	r8,-4
800075e4:	b1 4a       	asr	r10,0x10
800075e6:	08 36       	cp.w	r6,r4
800075e8:	ce 83       	brcs	800075b8 <__mdiff+0x64>
800075ea:	c0 d8       	rjmp	80007604 <__mdiff+0xb0>
800075ec:	0f 0b       	ld.w	r11,r7++
800075ee:	f6 0e 16 10 	lsr	lr,r11,0x10
800075f2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800075f6:	16 0a       	add	r10,r11
800075f8:	b0 1a       	st.h	r8[0x2],r10
800075fa:	b1 4a       	asr	r10,0x10
800075fc:	1c 0a       	add	r10,lr
800075fe:	b0 0a       	st.h	r8[0x0],r10
80007600:	2f c8       	sub	r8,-4
80007602:	b1 4a       	asr	r10,0x10
80007604:	0a 37       	cp.w	r7,r5
80007606:	cf 33       	brcs	800075ec <__mdiff+0x98>
80007608:	c0 28       	rjmp	8000760c <__mdiff+0xb8>
8000760a:	20 19       	sub	r9,1
8000760c:	11 4a       	ld.w	r10,--r8
8000760e:	58 0a       	cp.w	r10,0
80007610:	cf d0       	breq	8000760a <__mdiff+0xb6>
80007612:	99 49       	st.w	r12[0x10],r9
80007614:	d8 32       	popm	r0-r7,pc
80007616:	30 0b       	mov	r11,0
80007618:	c1 6f       	rcall	80007444 <_Balloc>
8000761a:	30 18       	mov	r8,1
8000761c:	99 48       	st.w	r12[0x10],r8
8000761e:	30 08       	mov	r8,0
80007620:	99 58       	st.w	r12[0x14],r8
80007622:	d8 32       	popm	r0-r7,pc

80007624 <__lshift>:
80007624:	d4 31       	pushm	r0-r7,lr
80007626:	16 97       	mov	r7,r11
80007628:	76 46       	ld.w	r6,r11[0x10]
8000762a:	f4 02 14 05 	asr	r2,r10,0x5
8000762e:	2f f6       	sub	r6,-1
80007630:	14 93       	mov	r3,r10
80007632:	18 94       	mov	r4,r12
80007634:	04 06       	add	r6,r2
80007636:	76 1b       	ld.w	r11,r11[0x4]
80007638:	6e 28       	ld.w	r8,r7[0x8]
8000763a:	c0 38       	rjmp	80007640 <__lshift+0x1c>
8000763c:	2f fb       	sub	r11,-1
8000763e:	a1 78       	lsl	r8,0x1
80007640:	10 36       	cp.w	r6,r8
80007642:	fe 99 ff fd 	brgt	8000763c <__lshift+0x18>
80007646:	08 9c       	mov	r12,r4
80007648:	cf ee       	rcall	80007444 <_Balloc>
8000764a:	30 09       	mov	r9,0
8000764c:	18 95       	mov	r5,r12
8000764e:	f8 c8 ff ec 	sub	r8,r12,-20
80007652:	12 9a       	mov	r10,r9
80007654:	c0 38       	rjmp	8000765a <__lshift+0x36>
80007656:	10 aa       	st.w	r8++,r10
80007658:	2f f9       	sub	r9,-1
8000765a:	04 39       	cp.w	r9,r2
8000765c:	cf d5       	brlt	80007656 <__lshift+0x32>
8000765e:	6e 4b       	ld.w	r11,r7[0x10]
80007660:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007664:	2f bb       	sub	r11,-5
80007666:	ee c9 ff ec 	sub	r9,r7,-20
8000766a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000766e:	58 03       	cp.w	r3,0
80007670:	c1 30       	breq	80007696 <__lshift+0x72>
80007672:	e6 0c 11 20 	rsub	r12,r3,32
80007676:	30 0a       	mov	r10,0
80007678:	72 02       	ld.w	r2,r9[0x0]
8000767a:	e4 03 09 42 	lsl	r2,r2,r3
8000767e:	04 4a       	or	r10,r2
80007680:	10 aa       	st.w	r8++,r10
80007682:	13 0a       	ld.w	r10,r9++
80007684:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007688:	16 39       	cp.w	r9,r11
8000768a:	cf 73       	brcs	80007678 <__lshift+0x54>
8000768c:	91 0a       	st.w	r8[0x0],r10
8000768e:	58 0a       	cp.w	r10,0
80007690:	c0 70       	breq	8000769e <__lshift+0x7a>
80007692:	2f f6       	sub	r6,-1
80007694:	c0 58       	rjmp	8000769e <__lshift+0x7a>
80007696:	13 0a       	ld.w	r10,r9++
80007698:	10 aa       	st.w	r8++,r10
8000769a:	16 39       	cp.w	r9,r11
8000769c:	cf d3       	brcs	80007696 <__lshift+0x72>
8000769e:	08 9c       	mov	r12,r4
800076a0:	20 16       	sub	r6,1
800076a2:	0e 9b       	mov	r11,r7
800076a4:	8b 46       	st.w	r5[0x10],r6
800076a6:	cb 5e       	rcall	80007410 <_Bfree>
800076a8:	0a 9c       	mov	r12,r5
800076aa:	d8 32       	popm	r0-r7,pc

800076ac <__multiply>:
800076ac:	d4 31       	pushm	r0-r7,lr
800076ae:	20 2d       	sub	sp,8
800076b0:	76 49       	ld.w	r9,r11[0x10]
800076b2:	74 48       	ld.w	r8,r10[0x10]
800076b4:	16 96       	mov	r6,r11
800076b6:	14 95       	mov	r5,r10
800076b8:	10 39       	cp.w	r9,r8
800076ba:	ec 08 17 50 	movlt	r8,r6
800076be:	ea 06 17 50 	movlt	r6,r5
800076c2:	f0 05 17 50 	movlt	r5,r8
800076c6:	6c 28       	ld.w	r8,r6[0x8]
800076c8:	76 43       	ld.w	r3,r11[0x10]
800076ca:	74 42       	ld.w	r2,r10[0x10]
800076cc:	76 1b       	ld.w	r11,r11[0x4]
800076ce:	e4 03 00 07 	add	r7,r2,r3
800076d2:	10 37       	cp.w	r7,r8
800076d4:	f7 bb 09 ff 	subgt	r11,-1
800076d8:	cb 6e       	rcall	80007444 <_Balloc>
800076da:	ee c4 ff fb 	sub	r4,r7,-5
800076de:	f8 c9 ff ec 	sub	r9,r12,-20
800076e2:	f8 04 00 24 	add	r4,r12,r4<<0x2
800076e6:	30 0a       	mov	r10,0
800076e8:	12 98       	mov	r8,r9
800076ea:	c0 28       	rjmp	800076ee <__multiply+0x42>
800076ec:	10 aa       	st.w	r8++,r10
800076ee:	08 38       	cp.w	r8,r4
800076f0:	cf e3       	brcs	800076ec <__multiply+0x40>
800076f2:	2f b3       	sub	r3,-5
800076f4:	2f b2       	sub	r2,-5
800076f6:	ec 03 00 23 	add	r3,r6,r3<<0x2
800076fa:	ea 02 00 22 	add	r2,r5,r2<<0x2
800076fe:	ec cb ff ec 	sub	r11,r6,-20
80007702:	50 12       	stdsp	sp[0x4],r2
80007704:	ea ca ff ec 	sub	r10,r5,-20
80007708:	c4 48       	rjmp	80007790 <__multiply+0xe4>
8000770a:	94 95       	ld.uh	r5,r10[0x2]
8000770c:	58 05       	cp.w	r5,0
8000770e:	c2 00       	breq	8000774e <__multiply+0xa2>
80007710:	12 98       	mov	r8,r9
80007712:	16 96       	mov	r6,r11
80007714:	30 0e       	mov	lr,0
80007716:	50 09       	stdsp	sp[0x0],r9
80007718:	0d 02       	ld.w	r2,r6++
8000771a:	e4 00 16 10 	lsr	r0,r2,0x10
8000771e:	70 01       	ld.w	r1,r8[0x0]
80007720:	70 09       	ld.w	r9,r8[0x0]
80007722:	b1 81       	lsr	r1,0x10
80007724:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007728:	e0 05 03 41 	mac	r1,r0,r5
8000772c:	ab 32       	mul	r2,r5
8000772e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007732:	00 02       	add	r2,r0
80007734:	e4 0e 00 0e 	add	lr,r2,lr
80007738:	b0 1e       	st.h	r8[0x2],lr
8000773a:	b1 8e       	lsr	lr,0x10
8000773c:	1c 01       	add	r1,lr
8000773e:	b0 01       	st.h	r8[0x0],r1
80007740:	e2 0e 16 10 	lsr	lr,r1,0x10
80007744:	2f c8       	sub	r8,-4
80007746:	06 36       	cp.w	r6,r3
80007748:	ce 83       	brcs	80007718 <__multiply+0x6c>
8000774a:	40 09       	lddsp	r9,sp[0x0]
8000774c:	91 0e       	st.w	r8[0x0],lr
8000774e:	94 86       	ld.uh	r6,r10[0x0]
80007750:	58 06       	cp.w	r6,0
80007752:	c1 d0       	breq	8000778c <__multiply+0xe0>
80007754:	72 02       	ld.w	r2,r9[0x0]
80007756:	12 98       	mov	r8,r9
80007758:	16 9e       	mov	lr,r11
8000775a:	30 05       	mov	r5,0
8000775c:	b0 12       	st.h	r8[0x2],r2
8000775e:	1d 01       	ld.w	r1,lr++
80007760:	90 82       	ld.uh	r2,r8[0x0]
80007762:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007766:	ad 30       	mul	r0,r6
80007768:	e0 02 00 02 	add	r2,r0,r2
8000776c:	e4 05 00 05 	add	r5,r2,r5
80007770:	b0 05       	st.h	r8[0x0],r5
80007772:	b1 85       	lsr	r5,0x10
80007774:	b1 81       	lsr	r1,0x10
80007776:	2f c8       	sub	r8,-4
80007778:	ad 31       	mul	r1,r6
8000777a:	90 92       	ld.uh	r2,r8[0x2]
8000777c:	e2 02 00 02 	add	r2,r1,r2
80007780:	0a 02       	add	r2,r5
80007782:	e4 05 16 10 	lsr	r5,r2,0x10
80007786:	06 3e       	cp.w	lr,r3
80007788:	ce a3       	brcs	8000775c <__multiply+0xb0>
8000778a:	91 02       	st.w	r8[0x0],r2
8000778c:	2f ca       	sub	r10,-4
8000778e:	2f c9       	sub	r9,-4
80007790:	40 18       	lddsp	r8,sp[0x4]
80007792:	10 3a       	cp.w	r10,r8
80007794:	cb b3       	brcs	8000770a <__multiply+0x5e>
80007796:	c0 28       	rjmp	8000779a <__multiply+0xee>
80007798:	20 17       	sub	r7,1
8000779a:	58 07       	cp.w	r7,0
8000779c:	e0 8a 00 05 	brle	800077a6 <__multiply+0xfa>
800077a0:	09 48       	ld.w	r8,--r4
800077a2:	58 08       	cp.w	r8,0
800077a4:	cf a0       	breq	80007798 <__multiply+0xec>
800077a6:	99 47       	st.w	r12[0x10],r7
800077a8:	2f ed       	sub	sp,-8
800077aa:	d8 32       	popm	r0-r7,pc

800077ac <__i2b>:
800077ac:	d4 21       	pushm	r4-r7,lr
800077ae:	16 97       	mov	r7,r11
800077b0:	30 1b       	mov	r11,1
800077b2:	c4 9e       	rcall	80007444 <_Balloc>
800077b4:	30 19       	mov	r9,1
800077b6:	99 57       	st.w	r12[0x14],r7
800077b8:	99 49       	st.w	r12[0x10],r9
800077ba:	d8 22       	popm	r4-r7,pc

800077bc <__multadd>:
800077bc:	d4 31       	pushm	r0-r7,lr
800077be:	30 08       	mov	r8,0
800077c0:	12 95       	mov	r5,r9
800077c2:	16 97       	mov	r7,r11
800077c4:	18 96       	mov	r6,r12
800077c6:	76 44       	ld.w	r4,r11[0x10]
800077c8:	f6 c9 ff ec 	sub	r9,r11,-20
800077cc:	72 0b       	ld.w	r11,r9[0x0]
800077ce:	f6 0c 16 10 	lsr	r12,r11,0x10
800077d2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800077d6:	f4 0c 02 4c 	mul	r12,r10,r12
800077da:	f4 0b 03 45 	mac	r5,r10,r11
800077de:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800077e2:	b1 85       	lsr	r5,0x10
800077e4:	18 05       	add	r5,r12
800077e6:	ea 0c 15 10 	lsl	r12,r5,0x10
800077ea:	f8 0b 00 0b 	add	r11,r12,r11
800077ee:	12 ab       	st.w	r9++,r11
800077f0:	2f f8       	sub	r8,-1
800077f2:	b1 85       	lsr	r5,0x10
800077f4:	08 38       	cp.w	r8,r4
800077f6:	ce b5       	brlt	800077cc <__multadd+0x10>
800077f8:	58 05       	cp.w	r5,0
800077fa:	c1 c0       	breq	80007832 <__multadd+0x76>
800077fc:	6e 28       	ld.w	r8,r7[0x8]
800077fe:	10 34       	cp.w	r4,r8
80007800:	c1 35       	brlt	80007826 <__multadd+0x6a>
80007802:	6e 1b       	ld.w	r11,r7[0x4]
80007804:	0c 9c       	mov	r12,r6
80007806:	2f fb       	sub	r11,-1
80007808:	c1 ee       	rcall	80007444 <_Balloc>
8000780a:	6e 4a       	ld.w	r10,r7[0x10]
8000780c:	ee cb ff f4 	sub	r11,r7,-12
80007810:	18 93       	mov	r3,r12
80007812:	2f ea       	sub	r10,-2
80007814:	2f 4c       	sub	r12,-12
80007816:	a3 6a       	lsl	r10,0x2
80007818:	fe b0 dd e6 	rcall	800033e4 <memcpy>
8000781c:	0e 9b       	mov	r11,r7
8000781e:	0c 9c       	mov	r12,r6
80007820:	fe b0 fd f8 	rcall	80007410 <_Bfree>
80007824:	06 97       	mov	r7,r3
80007826:	e8 c8 ff ff 	sub	r8,r4,-1
8000782a:	2f b4       	sub	r4,-5
8000782c:	8f 48       	st.w	r7[0x10],r8
8000782e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007832:	0e 9c       	mov	r12,r7
80007834:	d8 32       	popm	r0-r7,pc
80007836:	d7 03       	nop

80007838 <__pow5mult>:
80007838:	d4 31       	pushm	r0-r7,lr
8000783a:	14 96       	mov	r6,r10
8000783c:	18 97       	mov	r7,r12
8000783e:	16 94       	mov	r4,r11
80007840:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007844:	c0 90       	breq	80007856 <__pow5mult+0x1e>
80007846:	20 18       	sub	r8,1
80007848:	fe c9 c8 6c 	sub	r9,pc,-14228
8000784c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007850:	30 09       	mov	r9,0
80007852:	cb 5f       	rcall	800077bc <__multadd>
80007854:	18 94       	mov	r4,r12
80007856:	a3 46       	asr	r6,0x2
80007858:	c3 40       	breq	800078c0 <__pow5mult+0x88>
8000785a:	6e 95       	ld.w	r5,r7[0x24]
8000785c:	58 05       	cp.w	r5,0
8000785e:	c0 91       	brne	80007870 <__pow5mult+0x38>
80007860:	31 0c       	mov	r12,16
80007862:	fe b0 fa f3 	rcall	80006e48 <malloc>
80007866:	99 35       	st.w	r12[0xc],r5
80007868:	8f 9c       	st.w	r7[0x24],r12
8000786a:	99 15       	st.w	r12[0x4],r5
8000786c:	99 25       	st.w	r12[0x8],r5
8000786e:	99 05       	st.w	r12[0x0],r5
80007870:	6e 93       	ld.w	r3,r7[0x24]
80007872:	66 25       	ld.w	r5,r3[0x8]
80007874:	58 05       	cp.w	r5,0
80007876:	c0 c1       	brne	8000788e <__pow5mult+0x56>
80007878:	e0 6b 02 71 	mov	r11,625
8000787c:	0e 9c       	mov	r12,r7
8000787e:	c9 7f       	rcall	800077ac <__i2b>
80007880:	87 2c       	st.w	r3[0x8],r12
80007882:	30 08       	mov	r8,0
80007884:	18 95       	mov	r5,r12
80007886:	99 08       	st.w	r12[0x0],r8
80007888:	c0 38       	rjmp	8000788e <__pow5mult+0x56>
8000788a:	06 9c       	mov	r12,r3
8000788c:	18 95       	mov	r5,r12
8000788e:	ed b6 00 00 	bld	r6,0x0
80007892:	c0 b1       	brne	800078a8 <__pow5mult+0x70>
80007894:	08 9b       	mov	r11,r4
80007896:	0a 9a       	mov	r10,r5
80007898:	0e 9c       	mov	r12,r7
8000789a:	c0 9f       	rcall	800076ac <__multiply>
8000789c:	08 9b       	mov	r11,r4
8000789e:	18 93       	mov	r3,r12
800078a0:	0e 9c       	mov	r12,r7
800078a2:	06 94       	mov	r4,r3
800078a4:	fe b0 fd b6 	rcall	80007410 <_Bfree>
800078a8:	a1 56       	asr	r6,0x1
800078aa:	c0 b0       	breq	800078c0 <__pow5mult+0x88>
800078ac:	6a 03       	ld.w	r3,r5[0x0]
800078ae:	58 03       	cp.w	r3,0
800078b0:	ce d1       	brne	8000788a <__pow5mult+0x52>
800078b2:	0a 9a       	mov	r10,r5
800078b4:	0a 9b       	mov	r11,r5
800078b6:	0e 9c       	mov	r12,r7
800078b8:	cf ae       	rcall	800076ac <__multiply>
800078ba:	8b 0c       	st.w	r5[0x0],r12
800078bc:	99 03       	st.w	r12[0x0],r3
800078be:	ce 7b       	rjmp	8000788c <__pow5mult+0x54>
800078c0:	08 9c       	mov	r12,r4
800078c2:	d8 32       	popm	r0-r7,pc

800078c4 <_realloc_r>:
800078c4:	d4 31       	pushm	r0-r7,lr
800078c6:	20 1d       	sub	sp,4
800078c8:	16 94       	mov	r4,r11
800078ca:	18 92       	mov	r2,r12
800078cc:	14 9b       	mov	r11,r10
800078ce:	58 04       	cp.w	r4,0
800078d0:	c0 51       	brne	800078da <_realloc_r+0x16>
800078d2:	fe b0 fa c3 	rcall	80006e58 <_malloc_r>
800078d6:	18 95       	mov	r5,r12
800078d8:	c5 39       	rjmp	80007b7e <_realloc_r+0x2ba>
800078da:	50 0a       	stdsp	sp[0x0],r10
800078dc:	fe b0 fd 07 	rcall	800072ea <__malloc_lock>
800078e0:	40 0b       	lddsp	r11,sp[0x0]
800078e2:	f6 c8 ff f5 	sub	r8,r11,-11
800078e6:	e8 c1 00 08 	sub	r1,r4,8
800078ea:	10 96       	mov	r6,r8
800078ec:	62 1c       	ld.w	r12,r1[0x4]
800078ee:	e0 16 ff f8 	andl	r6,0xfff8
800078f2:	59 68       	cp.w	r8,22
800078f4:	f9 b6 08 10 	movls	r6,16
800078f8:	16 36       	cp.w	r6,r11
800078fa:	5f 38       	srlo	r8
800078fc:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007900:	c0 50       	breq	8000790a <_realloc_r+0x46>
80007902:	30 c8       	mov	r8,12
80007904:	30 05       	mov	r5,0
80007906:	85 38       	st.w	r2[0xc],r8
80007908:	c3 b9       	rjmp	80007b7e <_realloc_r+0x2ba>
8000790a:	18 90       	mov	r0,r12
8000790c:	e0 10 ff fc 	andl	r0,0xfffc
80007910:	0c 30       	cp.w	r0,r6
80007912:	e0 84 01 0b 	brge	80007b28 <_realloc_r+0x264>
80007916:	e0 68 00 fc 	mov	r8,252
8000791a:	e2 00 00 09 	add	r9,r1,r0
8000791e:	70 25       	ld.w	r5,r8[0x8]
80007920:	0a 39       	cp.w	r9,r5
80007922:	c0 90       	breq	80007934 <_realloc_r+0x70>
80007924:	72 1a       	ld.w	r10,r9[0x4]
80007926:	a1 ca       	cbr	r10,0x0
80007928:	f2 0a 00 0a 	add	r10,r9,r10
8000792c:	74 1a       	ld.w	r10,r10[0x4]
8000792e:	ed ba 00 00 	bld	r10,0x0
80007932:	c2 20       	breq	80007976 <_realloc_r+0xb2>
80007934:	72 1a       	ld.w	r10,r9[0x4]
80007936:	e0 1a ff fc 	andl	r10,0xfffc
8000793a:	f4 00 00 03 	add	r3,r10,r0
8000793e:	0a 39       	cp.w	r9,r5
80007940:	c1 31       	brne	80007966 <_realloc_r+0xa2>
80007942:	ec c7 ff f0 	sub	r7,r6,-16
80007946:	0e 33       	cp.w	r3,r7
80007948:	c1 95       	brlt	8000797a <_realloc_r+0xb6>
8000794a:	e2 06 00 09 	add	r9,r1,r6
8000794e:	0c 13       	sub	r3,r6
80007950:	a1 a3       	sbr	r3,0x0
80007952:	93 13       	st.w	r9[0x4],r3
80007954:	91 29       	st.w	r8[0x8],r9
80007956:	04 9c       	mov	r12,r2
80007958:	62 18       	ld.w	r8,r1[0x4]
8000795a:	08 95       	mov	r5,r4
8000795c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007960:	10 46       	or	r6,r8
80007962:	83 16       	st.w	r1[0x4],r6
80007964:	c0 b9       	rjmp	80007b7a <_realloc_r+0x2b6>
80007966:	0c 33       	cp.w	r3,r6
80007968:	c0 95       	brlt	8000797a <_realloc_r+0xb6>
8000796a:	72 28       	ld.w	r8,r9[0x8]
8000796c:	02 97       	mov	r7,r1
8000796e:	72 39       	ld.w	r9,r9[0xc]
80007970:	93 28       	st.w	r9[0x8],r8
80007972:	91 39       	st.w	r8[0xc],r9
80007974:	cd c8       	rjmp	80007b2c <_realloc_r+0x268>
80007976:	30 0a       	mov	r10,0
80007978:	14 99       	mov	r9,r10
8000797a:	ed bc 00 00 	bld	r12,0x0
8000797e:	e0 80 00 95 	breq	80007aa8 <_realloc_r+0x1e4>
80007982:	62 07       	ld.w	r7,r1[0x0]
80007984:	e2 07 01 07 	sub	r7,r1,r7
80007988:	6e 1c       	ld.w	r12,r7[0x4]
8000798a:	e0 1c ff fc 	andl	r12,0xfffc
8000798e:	58 09       	cp.w	r9,0
80007990:	c5 60       	breq	80007a3c <_realloc_r+0x178>
80007992:	f8 00 00 03 	add	r3,r12,r0
80007996:	0a 39       	cp.w	r9,r5
80007998:	c4 81       	brne	80007a28 <_realloc_r+0x164>
8000799a:	14 03       	add	r3,r10
8000799c:	ec c9 ff f0 	sub	r9,r6,-16
800079a0:	12 33       	cp.w	r3,r9
800079a2:	c4 d5       	brlt	80007a3c <_realloc_r+0x178>
800079a4:	6e 3a       	ld.w	r10,r7[0xc]
800079a6:	6e 29       	ld.w	r9,r7[0x8]
800079a8:	95 29       	st.w	r10[0x8],r9
800079aa:	93 3a       	st.w	r9[0xc],r10
800079ac:	ee c5 ff f8 	sub	r5,r7,-8
800079b0:	e0 ca 00 04 	sub	r10,r0,4
800079b4:	e0 4a 00 24 	cp.w	r10,36
800079b8:	e0 8b 00 25 	brhi	80007a02 <_realloc_r+0x13e>
800079bc:	0a 99       	mov	r9,r5
800079be:	59 3a       	cp.w	r10,19
800079c0:	e0 88 00 1a 	brls	800079f4 <_realloc_r+0x130>
800079c4:	09 09       	ld.w	r9,r4++
800079c6:	8b 09       	st.w	r5[0x0],r9
800079c8:	09 09       	ld.w	r9,r4++
800079ca:	8f 39       	st.w	r7[0xc],r9
800079cc:	ee c9 ff f0 	sub	r9,r7,-16
800079d0:	59 ba       	cp.w	r10,27
800079d2:	e0 88 00 11 	brls	800079f4 <_realloc_r+0x130>
800079d6:	09 0b       	ld.w	r11,r4++
800079d8:	93 0b       	st.w	r9[0x0],r11
800079da:	09 09       	ld.w	r9,r4++
800079dc:	8f 59       	st.w	r7[0x14],r9
800079de:	ee c9 ff e8 	sub	r9,r7,-24
800079e2:	e0 4a 00 24 	cp.w	r10,36
800079e6:	c0 71       	brne	800079f4 <_realloc_r+0x130>
800079e8:	09 0a       	ld.w	r10,r4++
800079ea:	93 0a       	st.w	r9[0x0],r10
800079ec:	ee c9 ff e0 	sub	r9,r7,-32
800079f0:	09 0a       	ld.w	r10,r4++
800079f2:	8f 7a       	st.w	r7[0x1c],r10
800079f4:	09 0a       	ld.w	r10,r4++
800079f6:	12 aa       	st.w	r9++,r10
800079f8:	68 0a       	ld.w	r10,r4[0x0]
800079fa:	93 0a       	st.w	r9[0x0],r10
800079fc:	68 1a       	ld.w	r10,r4[0x4]
800079fe:	93 1a       	st.w	r9[0x4],r10
80007a00:	c0 78       	rjmp	80007a0e <_realloc_r+0x14a>
80007a02:	50 08       	stdsp	sp[0x0],r8
80007a04:	08 9b       	mov	r11,r4
80007a06:	0a 9c       	mov	r12,r5
80007a08:	fe b0 fc 4b 	rcall	8000729e <memmove>
80007a0c:	40 08       	lddsp	r8,sp[0x0]
80007a0e:	ee 06 00 09 	add	r9,r7,r6
80007a12:	0c 13       	sub	r3,r6
80007a14:	a1 a3       	sbr	r3,0x0
80007a16:	93 13       	st.w	r9[0x4],r3
80007a18:	91 29       	st.w	r8[0x8],r9
80007a1a:	04 9c       	mov	r12,r2
80007a1c:	6e 18       	ld.w	r8,r7[0x4]
80007a1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a22:	10 46       	or	r6,r8
80007a24:	8f 16       	st.w	r7[0x4],r6
80007a26:	ca a8       	rjmp	80007b7a <_realloc_r+0x2b6>
80007a28:	14 03       	add	r3,r10
80007a2a:	0c 33       	cp.w	r3,r6
80007a2c:	c0 85       	brlt	80007a3c <_realloc_r+0x178>
80007a2e:	72 28       	ld.w	r8,r9[0x8]
80007a30:	72 39       	ld.w	r9,r9[0xc]
80007a32:	93 28       	st.w	r9[0x8],r8
80007a34:	91 39       	st.w	r8[0xc],r9
80007a36:	6e 28       	ld.w	r8,r7[0x8]
80007a38:	6e 39       	ld.w	r9,r7[0xc]
80007a3a:	c0 78       	rjmp	80007a48 <_realloc_r+0x184>
80007a3c:	f8 00 00 03 	add	r3,r12,r0
80007a40:	0c 33       	cp.w	r3,r6
80007a42:	c3 35       	brlt	80007aa8 <_realloc_r+0x1e4>
80007a44:	6e 39       	ld.w	r9,r7[0xc]
80007a46:	6e 28       	ld.w	r8,r7[0x8]
80007a48:	93 28       	st.w	r9[0x8],r8
80007a4a:	91 39       	st.w	r8[0xc],r9
80007a4c:	e0 ca 00 04 	sub	r10,r0,4
80007a50:	ee cc ff f8 	sub	r12,r7,-8
80007a54:	e0 4a 00 24 	cp.w	r10,36
80007a58:	e0 8b 00 24 	brhi	80007aa0 <_realloc_r+0x1dc>
80007a5c:	59 3a       	cp.w	r10,19
80007a5e:	e0 88 00 1a 	brls	80007a92 <_realloc_r+0x1ce>
80007a62:	09 08       	ld.w	r8,r4++
80007a64:	99 08       	st.w	r12[0x0],r8
80007a66:	09 08       	ld.w	r8,r4++
80007a68:	8f 38       	st.w	r7[0xc],r8
80007a6a:	ee cc ff f0 	sub	r12,r7,-16
80007a6e:	59 ba       	cp.w	r10,27
80007a70:	e0 88 00 11 	brls	80007a92 <_realloc_r+0x1ce>
80007a74:	09 08       	ld.w	r8,r4++
80007a76:	99 08       	st.w	r12[0x0],r8
80007a78:	09 08       	ld.w	r8,r4++
80007a7a:	8f 58       	st.w	r7[0x14],r8
80007a7c:	ee cc ff e8 	sub	r12,r7,-24
80007a80:	e0 4a 00 24 	cp.w	r10,36
80007a84:	c0 71       	brne	80007a92 <_realloc_r+0x1ce>
80007a86:	09 08       	ld.w	r8,r4++
80007a88:	99 08       	st.w	r12[0x0],r8
80007a8a:	ee cc ff e0 	sub	r12,r7,-32
80007a8e:	09 08       	ld.w	r8,r4++
80007a90:	8f 78       	st.w	r7[0x1c],r8
80007a92:	09 08       	ld.w	r8,r4++
80007a94:	18 a8       	st.w	r12++,r8
80007a96:	68 08       	ld.w	r8,r4[0x0]
80007a98:	99 08       	st.w	r12[0x0],r8
80007a9a:	68 18       	ld.w	r8,r4[0x4]
80007a9c:	99 18       	st.w	r12[0x4],r8
80007a9e:	c4 78       	rjmp	80007b2c <_realloc_r+0x268>
80007aa0:	08 9b       	mov	r11,r4
80007aa2:	fe b0 fb fe 	rcall	8000729e <memmove>
80007aa6:	c4 38       	rjmp	80007b2c <_realloc_r+0x268>
80007aa8:	04 9c       	mov	r12,r2
80007aaa:	fe b0 f9 d7 	rcall	80006e58 <_malloc_r>
80007aae:	18 95       	mov	r5,r12
80007ab0:	c3 a0       	breq	80007b24 <_realloc_r+0x260>
80007ab2:	62 18       	ld.w	r8,r1[0x4]
80007ab4:	f8 c9 00 08 	sub	r9,r12,8
80007ab8:	a1 c8       	cbr	r8,0x0
80007aba:	e2 08 00 08 	add	r8,r1,r8
80007abe:	10 39       	cp.w	r9,r8
80007ac0:	c0 71       	brne	80007ace <_realloc_r+0x20a>
80007ac2:	72 13       	ld.w	r3,r9[0x4]
80007ac4:	02 97       	mov	r7,r1
80007ac6:	e0 13 ff fc 	andl	r3,0xfffc
80007aca:	00 03       	add	r3,r0
80007acc:	c3 08       	rjmp	80007b2c <_realloc_r+0x268>
80007ace:	e0 ca 00 04 	sub	r10,r0,4
80007ad2:	e0 4a 00 24 	cp.w	r10,36
80007ad6:	e0 8b 00 20 	brhi	80007b16 <_realloc_r+0x252>
80007ada:	08 99       	mov	r9,r4
80007adc:	18 98       	mov	r8,r12
80007ade:	59 3a       	cp.w	r10,19
80007ae0:	e0 88 00 14 	brls	80007b08 <_realloc_r+0x244>
80007ae4:	13 0b       	ld.w	r11,r9++
80007ae6:	10 ab       	st.w	r8++,r11
80007ae8:	13 0b       	ld.w	r11,r9++
80007aea:	10 ab       	st.w	r8++,r11
80007aec:	59 ba       	cp.w	r10,27
80007aee:	e0 88 00 0d 	brls	80007b08 <_realloc_r+0x244>
80007af2:	13 0b       	ld.w	r11,r9++
80007af4:	10 ab       	st.w	r8++,r11
80007af6:	13 0b       	ld.w	r11,r9++
80007af8:	10 ab       	st.w	r8++,r11
80007afa:	e0 4a 00 24 	cp.w	r10,36
80007afe:	c0 51       	brne	80007b08 <_realloc_r+0x244>
80007b00:	13 0a       	ld.w	r10,r9++
80007b02:	10 aa       	st.w	r8++,r10
80007b04:	13 0a       	ld.w	r10,r9++
80007b06:	10 aa       	st.w	r8++,r10
80007b08:	13 0a       	ld.w	r10,r9++
80007b0a:	10 aa       	st.w	r8++,r10
80007b0c:	72 0a       	ld.w	r10,r9[0x0]
80007b0e:	91 0a       	st.w	r8[0x0],r10
80007b10:	72 19       	ld.w	r9,r9[0x4]
80007b12:	91 19       	st.w	r8[0x4],r9
80007b14:	c0 48       	rjmp	80007b1c <_realloc_r+0x258>
80007b16:	08 9b       	mov	r11,r4
80007b18:	fe b0 fb c3 	rcall	8000729e <memmove>
80007b1c:	08 9b       	mov	r11,r4
80007b1e:	04 9c       	mov	r12,r2
80007b20:	fe b0 f6 f6 	rcall	8000690c <_free_r>
80007b24:	04 9c       	mov	r12,r2
80007b26:	c2 a8       	rjmp	80007b7a <_realloc_r+0x2b6>
80007b28:	00 93       	mov	r3,r0
80007b2a:	02 97       	mov	r7,r1
80007b2c:	e6 06 01 09 	sub	r9,r3,r6
80007b30:	6e 18       	ld.w	r8,r7[0x4]
80007b32:	58 f9       	cp.w	r9,15
80007b34:	e0 88 00 16 	brls	80007b60 <_realloc_r+0x29c>
80007b38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b3c:	ed e8 10 08 	or	r8,r6,r8
80007b40:	8f 18       	st.w	r7[0x4],r8
80007b42:	12 98       	mov	r8,r9
80007b44:	a1 a8       	sbr	r8,0x0
80007b46:	ee 06 00 0b 	add	r11,r7,r6
80007b4a:	f6 09 00 09 	add	r9,r11,r9
80007b4e:	97 18       	st.w	r11[0x4],r8
80007b50:	72 18       	ld.w	r8,r9[0x4]
80007b52:	a1 a8       	sbr	r8,0x0
80007b54:	2f 8b       	sub	r11,-8
80007b56:	93 18       	st.w	r9[0x4],r8
80007b58:	04 9c       	mov	r12,r2
80007b5a:	fe b0 f6 d9 	rcall	8000690c <_free_r>
80007b5e:	c0 b8       	rjmp	80007b74 <_realloc_r+0x2b0>
80007b60:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b64:	e7 e8 10 08 	or	r8,r3,r8
80007b68:	8f 18       	st.w	r7[0x4],r8
80007b6a:	ee 03 00 03 	add	r3,r7,r3
80007b6e:	66 18       	ld.w	r8,r3[0x4]
80007b70:	a1 a8       	sbr	r8,0x0
80007b72:	87 18       	st.w	r3[0x4],r8
80007b74:	04 9c       	mov	r12,r2
80007b76:	ee c5 ff f8 	sub	r5,r7,-8
80007b7a:	fe b0 fb b9 	rcall	800072ec <__malloc_unlock>
80007b7e:	0a 9c       	mov	r12,r5
80007b80:	2f fd       	sub	sp,-4
80007b82:	d8 32       	popm	r0-r7,pc

80007b84 <__isinfd>:
80007b84:	14 98       	mov	r8,r10
80007b86:	fc 19 7f f0 	movh	r9,0x7ff0
80007b8a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b8e:	f0 0b 11 00 	rsub	r11,r8,0
80007b92:	f7 e8 10 08 	or	r8,r11,r8
80007b96:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007b9a:	f2 08 01 08 	sub	r8,r9,r8
80007b9e:	f0 0c 11 00 	rsub	r12,r8,0
80007ba2:	f9 e8 10 08 	or	r8,r12,r8
80007ba6:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007baa:	2f fc       	sub	r12,-1
80007bac:	5e fc       	retal	r12

80007bae <__isnand>:
80007bae:	14 98       	mov	r8,r10
80007bb0:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007bb4:	f0 0c 11 00 	rsub	r12,r8,0
80007bb8:	10 4c       	or	r12,r8
80007bba:	fc 18 7f f0 	movh	r8,0x7ff0
80007bbe:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007bc2:	f0 0c 01 0c 	sub	r12,r8,r12
80007bc6:	bf 9c       	lsr	r12,0x1f
80007bc8:	5e fc       	retal	r12
80007bca:	d7 03       	nop

80007bcc <_sbrk_r>:
80007bcc:	d4 21       	pushm	r4-r7,lr
80007bce:	30 08       	mov	r8,0
80007bd0:	18 97       	mov	r7,r12
80007bd2:	e0 66 08 60 	mov	r6,2144
80007bd6:	16 9c       	mov	r12,r11
80007bd8:	8d 08       	st.w	r6[0x0],r8
80007bda:	ca fc       	rcall	80007d38 <_sbrk>
80007bdc:	5b fc       	cp.w	r12,-1
80007bde:	c0 51       	brne	80007be8 <_sbrk_r+0x1c>
80007be0:	6c 08       	ld.w	r8,r6[0x0]
80007be2:	58 08       	cp.w	r8,0
80007be4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007be8:	d8 22       	popm	r4-r7,pc
80007bea:	d7 03       	nop

80007bec <__sclose>:
80007bec:	d4 01       	pushm	lr
80007bee:	96 7b       	ld.sh	r11,r11[0xe]
80007bf0:	cf ec       	rcall	80007dec <_close_r>
80007bf2:	d8 02       	popm	pc

80007bf4 <__sseek>:
80007bf4:	d4 21       	pushm	r4-r7,lr
80007bf6:	16 97       	mov	r7,r11
80007bf8:	96 7b       	ld.sh	r11,r11[0xe]
80007bfa:	c8 5d       	rcall	80007f04 <_lseek_r>
80007bfc:	8e 68       	ld.sh	r8,r7[0xc]
80007bfe:	10 99       	mov	r9,r8
80007c00:	ad c8       	cbr	r8,0xc
80007c02:	ad a9       	sbr	r9,0xc
80007c04:	5b fc       	cp.w	r12,-1
80007c06:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007c0a:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007c0e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007c12:	d8 22       	popm	r4-r7,pc

80007c14 <__swrite>:
80007c14:	d4 21       	pushm	r4-r7,lr
80007c16:	96 68       	ld.sh	r8,r11[0xc]
80007c18:	16 97       	mov	r7,r11
80007c1a:	14 95       	mov	r5,r10
80007c1c:	12 94       	mov	r4,r9
80007c1e:	e2 18 01 00 	andl	r8,0x100,COH
80007c22:	18 96       	mov	r6,r12
80007c24:	c0 50       	breq	80007c2e <__swrite+0x1a>
80007c26:	30 29       	mov	r9,2
80007c28:	30 0a       	mov	r10,0
80007c2a:	96 7b       	ld.sh	r11,r11[0xe]
80007c2c:	c6 cd       	rcall	80007f04 <_lseek_r>
80007c2e:	8e 68       	ld.sh	r8,r7[0xc]
80007c30:	ad c8       	cbr	r8,0xc
80007c32:	08 99       	mov	r9,r4
80007c34:	0a 9a       	mov	r10,r5
80007c36:	8e 7b       	ld.sh	r11,r7[0xe]
80007c38:	0c 9c       	mov	r12,r6
80007c3a:	ae 68       	st.h	r7[0xc],r8
80007c3c:	c9 ac       	rcall	80007d70 <_write_r>
80007c3e:	d8 22       	popm	r4-r7,pc

80007c40 <__sread>:
80007c40:	d4 21       	pushm	r4-r7,lr
80007c42:	16 97       	mov	r7,r11
80007c44:	96 7b       	ld.sh	r11,r11[0xe]
80007c46:	c7 1d       	rcall	80007f28 <_read_r>
80007c48:	c0 65       	brlt	80007c54 <__sread+0x14>
80007c4a:	6f 58       	ld.w	r8,r7[0x54]
80007c4c:	18 08       	add	r8,r12
80007c4e:	ef 48 00 54 	st.w	r7[84],r8
80007c52:	d8 22       	popm	r4-r7,pc
80007c54:	8e 68       	ld.sh	r8,r7[0xc]
80007c56:	ad c8       	cbr	r8,0xc
80007c58:	ae 68       	st.h	r7[0xc],r8
80007c5a:	d8 22       	popm	r4-r7,pc

80007c5c <strlen>:
80007c5c:	30 09       	mov	r9,0
80007c5e:	18 98       	mov	r8,r12
80007c60:	c0 28       	rjmp	80007c64 <strlen+0x8>
80007c62:	2f f8       	sub	r8,-1
80007c64:	11 8a       	ld.ub	r10,r8[0x0]
80007c66:	f2 0a 18 00 	cp.b	r10,r9
80007c6a:	cf c1       	brne	80007c62 <strlen+0x6>
80007c6c:	f0 0c 01 0c 	sub	r12,r8,r12
80007c70:	5e fc       	retal	r12
80007c72:	d7 03       	nop

80007c74 <_close>:
80007c74:	30 28       	mov	r8,2
80007c76:	d6 73       	breakpoint
80007c78:	3f fc       	mov	r12,-1
80007c7a:	35 8b       	mov	r11,88
80007c7c:	58 0c       	cp.w	r12,0
80007c7e:	5e 4c       	retge	r12
80007c80:	e0 6a 08 60 	mov	r10,2144
80007c84:	95 0b       	st.w	r10[0x0],r11
80007c86:	5e fc       	retal	r12

80007c88 <_lseek>:
80007c88:	30 58       	mov	r8,5
80007c8a:	d6 73       	breakpoint
80007c8c:	3f fc       	mov	r12,-1
80007c8e:	35 8b       	mov	r11,88
80007c90:	58 0c       	cp.w	r12,0
80007c92:	5e 4c       	retge	r12
80007c94:	e0 6a 08 60 	mov	r10,2144
80007c98:	95 0b       	st.w	r10[0x0],r11
80007c9a:	5e fc       	retal	r12

80007c9c <_read>:
80007c9c:	30 38       	mov	r8,3
80007c9e:	d6 73       	breakpoint
80007ca0:	3f fc       	mov	r12,-1
80007ca2:	35 8b       	mov	r11,88
80007ca4:	58 0c       	cp.w	r12,0
80007ca6:	5e 4c       	retge	r12
80007ca8:	e0 6a 08 60 	mov	r10,2144
80007cac:	95 0b       	st.w	r10[0x0],r11
80007cae:	5e fc       	retal	r12

80007cb0 <_write>:
80007cb0:	30 48       	mov	r8,4
80007cb2:	d6 73       	breakpoint
80007cb4:	3f fc       	mov	r12,-1
80007cb6:	35 8b       	mov	r11,88
80007cb8:	58 0c       	cp.w	r12,0
80007cba:	5e 4c       	retge	r12
80007cbc:	e0 6a 08 60 	mov	r10,2144
80007cc0:	95 0b       	st.w	r10[0x0],r11
80007cc2:	5e fc       	retal	r12

80007cc4 <isatty>:
80007cc4:	30 b8       	mov	r8,11
80007cc6:	d6 73       	breakpoint
80007cc8:	3f fc       	mov	r12,-1
80007cca:	35 8b       	mov	r11,88
80007ccc:	58 0c       	cp.w	r12,0
80007cce:	5e 4c       	retge	r12
80007cd0:	e0 6a 08 60 	mov	r10,2144
80007cd4:	95 0b       	st.w	r10[0x0],r11
80007cd6:	5e fc       	retal	r12

80007cd8 <_fstat_host>:
80007cd8:	30 98       	mov	r8,9
80007cda:	d6 73       	breakpoint
80007cdc:	3f fc       	mov	r12,-1
80007cde:	35 8b       	mov	r11,88
80007ce0:	58 0c       	cp.w	r12,0
80007ce2:	5e 4c       	retge	r12
80007ce4:	e0 6a 08 60 	mov	r10,2144
80007ce8:	95 0b       	st.w	r10[0x0],r11
80007cea:	5e fc       	retal	r12

80007cec <_fstat>:
80007cec:	d4 21       	pushm	r4-r7,lr
80007cee:	21 0d       	sub	sp,64
80007cf0:	16 97       	mov	r7,r11
80007cf2:	1a 9b       	mov	r11,sp
80007cf4:	cf 2f       	rcall	80007cd8 <_fstat_host>
80007cf6:	c0 34       	brge	80007cfc <_fstat+0x10>
80007cf8:	3f fc       	mov	r12,-1
80007cfa:	c1 c8       	rjmp	80007d32 <_fstat+0x46>
80007cfc:	40 08       	lddsp	r8,sp[0x0]
80007cfe:	ae 08       	st.h	r7[0x0],r8
80007d00:	40 18       	lddsp	r8,sp[0x4]
80007d02:	ae 18       	st.h	r7[0x2],r8
80007d04:	40 28       	lddsp	r8,sp[0x8]
80007d06:	8f 18       	st.w	r7[0x4],r8
80007d08:	40 38       	lddsp	r8,sp[0xc]
80007d0a:	ae 48       	st.h	r7[0x8],r8
80007d0c:	40 48       	lddsp	r8,sp[0x10]
80007d0e:	ae 58       	st.h	r7[0xa],r8
80007d10:	40 58       	lddsp	r8,sp[0x14]
80007d12:	ae 68       	st.h	r7[0xc],r8
80007d14:	40 68       	lddsp	r8,sp[0x18]
80007d16:	ae 78       	st.h	r7[0xe],r8
80007d18:	40 88       	lddsp	r8,sp[0x20]
80007d1a:	8f 48       	st.w	r7[0x10],r8
80007d1c:	40 a8       	lddsp	r8,sp[0x28]
80007d1e:	8f b8       	st.w	r7[0x2c],r8
80007d20:	40 c8       	lddsp	r8,sp[0x30]
80007d22:	8f c8       	st.w	r7[0x30],r8
80007d24:	40 d8       	lddsp	r8,sp[0x34]
80007d26:	8f 58       	st.w	r7[0x14],r8
80007d28:	40 e8       	lddsp	r8,sp[0x38]
80007d2a:	30 0c       	mov	r12,0
80007d2c:	8f 78       	st.w	r7[0x1c],r8
80007d2e:	40 f8       	lddsp	r8,sp[0x3c]
80007d30:	8f 98       	st.w	r7[0x24],r8
80007d32:	2f 0d       	sub	sp,-64
80007d34:	d8 22       	popm	r4-r7,pc
80007d36:	d7 03       	nop

80007d38 <_sbrk>:
80007d38:	d4 01       	pushm	lr
80007d3a:	e0 68 07 5c 	mov	r8,1884
80007d3e:	70 09       	ld.w	r9,r8[0x0]
80007d40:	58 09       	cp.w	r9,0
80007d42:	c0 41       	brne	80007d4a <_sbrk+0x12>
80007d44:	e0 69 08 68 	mov	r9,2152
80007d48:	91 09       	st.w	r8[0x0],r9
80007d4a:	e0 69 07 5c 	mov	r9,1884
80007d4e:	e0 6a f0 00 	mov	r10,61440
80007d52:	72 08       	ld.w	r8,r9[0x0]
80007d54:	f0 0c 00 0c 	add	r12,r8,r12
80007d58:	14 3c       	cp.w	r12,r10
80007d5a:	e0 8b 00 04 	brhi	80007d62 <_sbrk+0x2a>
80007d5e:	93 0c       	st.w	r9[0x0],r12
80007d60:	c0 58       	rjmp	80007d6a <_sbrk+0x32>
80007d62:	c5 5c       	rcall	80007e0c <__errno>
80007d64:	30 c8       	mov	r8,12
80007d66:	99 08       	st.w	r12[0x0],r8
80007d68:	3f f8       	mov	r8,-1
80007d6a:	10 9c       	mov	r12,r8
80007d6c:	d8 02       	popm	pc
80007d6e:	d7 03       	nop

80007d70 <_write_r>:
80007d70:	d4 21       	pushm	r4-r7,lr
80007d72:	16 98       	mov	r8,r11
80007d74:	18 97       	mov	r7,r12
80007d76:	10 9c       	mov	r12,r8
80007d78:	30 08       	mov	r8,0
80007d7a:	14 9b       	mov	r11,r10
80007d7c:	e0 66 08 60 	mov	r6,2144
80007d80:	12 9a       	mov	r10,r9
80007d82:	8d 08       	st.w	r6[0x0],r8
80007d84:	c9 6f       	rcall	80007cb0 <_write>
80007d86:	5b fc       	cp.w	r12,-1
80007d88:	c0 51       	brne	80007d92 <_write_r+0x22>
80007d8a:	6c 08       	ld.w	r8,r6[0x0]
80007d8c:	58 08       	cp.w	r8,0
80007d8e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d92:	d8 22       	popm	r4-r7,pc

80007d94 <_calloc_r>:
80007d94:	d4 21       	pushm	r4-r7,lr
80007d96:	f4 0b 02 4b 	mul	r11,r10,r11
80007d9a:	fe b0 f8 5f 	rcall	80006e58 <_malloc_r>
80007d9e:	18 97       	mov	r7,r12
80007da0:	c2 30       	breq	80007de6 <_calloc_r+0x52>
80007da2:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007da6:	e0 1a ff fc 	andl	r10,0xfffc
80007daa:	20 4a       	sub	r10,4
80007dac:	e0 4a 00 24 	cp.w	r10,36
80007db0:	e0 8b 00 18 	brhi	80007de0 <_calloc_r+0x4c>
80007db4:	18 98       	mov	r8,r12
80007db6:	59 3a       	cp.w	r10,19
80007db8:	e0 88 00 0f 	brls	80007dd6 <_calloc_r+0x42>
80007dbc:	30 09       	mov	r9,0
80007dbe:	10 a9       	st.w	r8++,r9
80007dc0:	10 a9       	st.w	r8++,r9
80007dc2:	59 ba       	cp.w	r10,27
80007dc4:	e0 88 00 09 	brls	80007dd6 <_calloc_r+0x42>
80007dc8:	10 a9       	st.w	r8++,r9
80007dca:	10 a9       	st.w	r8++,r9
80007dcc:	e0 4a 00 24 	cp.w	r10,36
80007dd0:	c0 31       	brne	80007dd6 <_calloc_r+0x42>
80007dd2:	10 a9       	st.w	r8++,r9
80007dd4:	10 a9       	st.w	r8++,r9
80007dd6:	30 09       	mov	r9,0
80007dd8:	10 a9       	st.w	r8++,r9
80007dda:	91 19       	st.w	r8[0x4],r9
80007ddc:	91 09       	st.w	r8[0x0],r9
80007dde:	c0 48       	rjmp	80007de6 <_calloc_r+0x52>
80007de0:	30 0b       	mov	r11,0
80007de2:	fe b0 fa 7d 	rcall	800072dc <memset>
80007de6:	0e 9c       	mov	r12,r7
80007de8:	d8 22       	popm	r4-r7,pc
80007dea:	d7 03       	nop

80007dec <_close_r>:
80007dec:	d4 21       	pushm	r4-r7,lr
80007dee:	30 08       	mov	r8,0
80007df0:	18 97       	mov	r7,r12
80007df2:	e0 66 08 60 	mov	r6,2144
80007df6:	16 9c       	mov	r12,r11
80007df8:	8d 08       	st.w	r6[0x0],r8
80007dfa:	c3 df       	rcall	80007c74 <_close>
80007dfc:	5b fc       	cp.w	r12,-1
80007dfe:	c0 51       	brne	80007e08 <_close_r+0x1c>
80007e00:	6c 08       	ld.w	r8,r6[0x0]
80007e02:	58 08       	cp.w	r8,0
80007e04:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e08:	d8 22       	popm	r4-r7,pc
80007e0a:	d7 03       	nop

80007e0c <__errno>:
80007e0c:	e0 68 00 f8 	mov	r8,248
80007e10:	70 0c       	ld.w	r12,r8[0x0]
80007e12:	2f 4c       	sub	r12,-12
80007e14:	5e fc       	retal	r12
80007e16:	d7 03       	nop

80007e18 <_fclose_r>:
80007e18:	d4 21       	pushm	r4-r7,lr
80007e1a:	18 96       	mov	r6,r12
80007e1c:	16 97       	mov	r7,r11
80007e1e:	58 0b       	cp.w	r11,0
80007e20:	c0 31       	brne	80007e26 <_fclose_r+0xe>
80007e22:	16 95       	mov	r5,r11
80007e24:	c5 38       	rjmp	80007eca <_fclose_r+0xb2>
80007e26:	fe b0 f4 87 	rcall	80006734 <__sfp_lock_acquire>
80007e2a:	58 06       	cp.w	r6,0
80007e2c:	c0 70       	breq	80007e3a <_fclose_r+0x22>
80007e2e:	6c 68       	ld.w	r8,r6[0x18]
80007e30:	58 08       	cp.w	r8,0
80007e32:	c0 41       	brne	80007e3a <_fclose_r+0x22>
80007e34:	0c 9c       	mov	r12,r6
80007e36:	fe b0 f4 d1 	rcall	800067d8 <__sinit>
80007e3a:	fe c8 cf 02 	sub	r8,pc,-12542
80007e3e:	10 37       	cp.w	r7,r8
80007e40:	c0 31       	brne	80007e46 <_fclose_r+0x2e>
80007e42:	6c 07       	ld.w	r7,r6[0x0]
80007e44:	c0 c8       	rjmp	80007e5c <_fclose_r+0x44>
80007e46:	fe c8 ce ee 	sub	r8,pc,-12562
80007e4a:	10 37       	cp.w	r7,r8
80007e4c:	c0 31       	brne	80007e52 <_fclose_r+0x3a>
80007e4e:	6c 17       	ld.w	r7,r6[0x4]
80007e50:	c0 68       	rjmp	80007e5c <_fclose_r+0x44>
80007e52:	fe c8 ce da 	sub	r8,pc,-12582
80007e56:	10 37       	cp.w	r7,r8
80007e58:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007e5c:	8e 69       	ld.sh	r9,r7[0xc]
80007e5e:	30 08       	mov	r8,0
80007e60:	f0 09 19 00 	cp.h	r9,r8
80007e64:	c0 51       	brne	80007e6e <_fclose_r+0x56>
80007e66:	fe b0 f4 68 	rcall	80006736 <__sfp_lock_release>
80007e6a:	30 05       	mov	r5,0
80007e6c:	c2 f8       	rjmp	80007eca <_fclose_r+0xb2>
80007e6e:	0e 9b       	mov	r11,r7
80007e70:	0c 9c       	mov	r12,r6
80007e72:	fe b0 f3 db 	rcall	80006628 <_fflush_r>
80007e76:	6e c8       	ld.w	r8,r7[0x30]
80007e78:	18 95       	mov	r5,r12
80007e7a:	58 08       	cp.w	r8,0
80007e7c:	c0 60       	breq	80007e88 <_fclose_r+0x70>
80007e7e:	6e 8b       	ld.w	r11,r7[0x20]
80007e80:	0c 9c       	mov	r12,r6
80007e82:	5d 18       	icall	r8
80007e84:	f9 b5 05 ff 	movlt	r5,-1
80007e88:	8e 68       	ld.sh	r8,r7[0xc]
80007e8a:	ed b8 00 07 	bld	r8,0x7
80007e8e:	c0 51       	brne	80007e98 <_fclose_r+0x80>
80007e90:	6e 4b       	ld.w	r11,r7[0x10]
80007e92:	0c 9c       	mov	r12,r6
80007e94:	fe b0 f5 3c 	rcall	8000690c <_free_r>
80007e98:	6e db       	ld.w	r11,r7[0x34]
80007e9a:	58 0b       	cp.w	r11,0
80007e9c:	c0 a0       	breq	80007eb0 <_fclose_r+0x98>
80007e9e:	ee c8 ff bc 	sub	r8,r7,-68
80007ea2:	10 3b       	cp.w	r11,r8
80007ea4:	c0 40       	breq	80007eac <_fclose_r+0x94>
80007ea6:	0c 9c       	mov	r12,r6
80007ea8:	fe b0 f5 32 	rcall	8000690c <_free_r>
80007eac:	30 08       	mov	r8,0
80007eae:	8f d8       	st.w	r7[0x34],r8
80007eb0:	6f 2b       	ld.w	r11,r7[0x48]
80007eb2:	58 0b       	cp.w	r11,0
80007eb4:	c0 70       	breq	80007ec2 <_fclose_r+0xaa>
80007eb6:	0c 9c       	mov	r12,r6
80007eb8:	fe b0 f5 2a 	rcall	8000690c <_free_r>
80007ebc:	30 08       	mov	r8,0
80007ebe:	ef 48 00 48 	st.w	r7[72],r8
80007ec2:	30 08       	mov	r8,0
80007ec4:	ae 68       	st.h	r7[0xc],r8
80007ec6:	fe b0 f4 38 	rcall	80006736 <__sfp_lock_release>
80007eca:	0a 9c       	mov	r12,r5
80007ecc:	d8 22       	popm	r4-r7,pc
80007ece:	d7 03       	nop

80007ed0 <fclose>:
80007ed0:	d4 01       	pushm	lr
80007ed2:	e0 68 00 f8 	mov	r8,248
80007ed6:	18 9b       	mov	r11,r12
80007ed8:	70 0c       	ld.w	r12,r8[0x0]
80007eda:	c9 ff       	rcall	80007e18 <_fclose_r>
80007edc:	d8 02       	popm	pc
80007ede:	d7 03       	nop

80007ee0 <_fstat_r>:
80007ee0:	d4 21       	pushm	r4-r7,lr
80007ee2:	16 98       	mov	r8,r11
80007ee4:	18 97       	mov	r7,r12
80007ee6:	10 9c       	mov	r12,r8
80007ee8:	30 08       	mov	r8,0
80007eea:	e0 66 08 60 	mov	r6,2144
80007eee:	14 9b       	mov	r11,r10
80007ef0:	8d 08       	st.w	r6[0x0],r8
80007ef2:	cf de       	rcall	80007cec <_fstat>
80007ef4:	5b fc       	cp.w	r12,-1
80007ef6:	c0 51       	brne	80007f00 <_fstat_r+0x20>
80007ef8:	6c 08       	ld.w	r8,r6[0x0]
80007efa:	58 08       	cp.w	r8,0
80007efc:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f00:	d8 22       	popm	r4-r7,pc
80007f02:	d7 03       	nop

80007f04 <_lseek_r>:
80007f04:	d4 21       	pushm	r4-r7,lr
80007f06:	16 98       	mov	r8,r11
80007f08:	18 97       	mov	r7,r12
80007f0a:	10 9c       	mov	r12,r8
80007f0c:	30 08       	mov	r8,0
80007f0e:	14 9b       	mov	r11,r10
80007f10:	e0 66 08 60 	mov	r6,2144
80007f14:	12 9a       	mov	r10,r9
80007f16:	8d 08       	st.w	r6[0x0],r8
80007f18:	cb 8e       	rcall	80007c88 <_lseek>
80007f1a:	5b fc       	cp.w	r12,-1
80007f1c:	c0 51       	brne	80007f26 <_lseek_r+0x22>
80007f1e:	6c 08       	ld.w	r8,r6[0x0]
80007f20:	58 08       	cp.w	r8,0
80007f22:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f26:	d8 22       	popm	r4-r7,pc

80007f28 <_read_r>:
80007f28:	d4 21       	pushm	r4-r7,lr
80007f2a:	16 98       	mov	r8,r11
80007f2c:	18 97       	mov	r7,r12
80007f2e:	10 9c       	mov	r12,r8
80007f30:	30 08       	mov	r8,0
80007f32:	14 9b       	mov	r11,r10
80007f34:	e0 66 08 60 	mov	r6,2144
80007f38:	12 9a       	mov	r10,r9
80007f3a:	8d 08       	st.w	r6[0x0],r8
80007f3c:	cb 0e       	rcall	80007c9c <_read>
80007f3e:	5b fc       	cp.w	r12,-1
80007f40:	c0 51       	brne	80007f4a <_read_r+0x22>
80007f42:	6c 08       	ld.w	r8,r6[0x0]
80007f44:	58 08       	cp.w	r8,0
80007f46:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f4a:	d8 22       	popm	r4-r7,pc

80007f4c <__avr32_f64_mul>:
80007f4c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007f50:	e0 80 00 dc 	breq	80008108 <__avr32_f64_mul_op1_zero>
80007f54:	d4 21       	pushm	r4-r7,lr
80007f56:	f7 e9 20 0e 	eor	lr,r11,r9
80007f5a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007f5e:	30 15       	mov	r5,1
80007f60:	c4 30       	breq	80007fe6 <__avr32_f64_mul_op1_subnormal>
80007f62:	ab 6b       	lsl	r11,0xa
80007f64:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007f68:	ab 6a       	lsl	r10,0xa
80007f6a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007f6e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007f72:	c5 c0       	breq	8000802a <__avr32_f64_mul_op2_subnormal>
80007f74:	a1 78       	lsl	r8,0x1
80007f76:	5c f9       	rol	r9
80007f78:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007f7c:	e0 47 07 ff 	cp.w	r7,2047
80007f80:	c7 70       	breq	8000806e <__avr32_f64_mul_op_nan_or_inf>
80007f82:	e0 46 07 ff 	cp.w	r6,2047
80007f86:	c7 40       	breq	8000806e <__avr32_f64_mul_op_nan_or_inf>
80007f88:	ee 06 00 0c 	add	r12,r7,r6
80007f8c:	e0 2c 03 fe 	sub	r12,1022
80007f90:	f6 08 06 44 	mulu.d	r4,r11,r8
80007f94:	f4 09 07 44 	macu.d	r4,r10,r9
80007f98:	f4 08 06 46 	mulu.d	r6,r10,r8
80007f9c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007fa0:	08 07       	add	r7,r4
80007fa2:	f4 05 00 4a 	adc	r10,r10,r5
80007fa6:	5c 0b       	acr	r11
80007fa8:	ed bb 00 14 	bld	r11,0x14
80007fac:	c0 50       	breq	80007fb6 <__avr32_f64_mul+0x6a>
80007fae:	a1 77       	lsl	r7,0x1
80007fb0:	5c fa       	rol	r10
80007fb2:	5c fb       	rol	r11
80007fb4:	20 1c       	sub	r12,1
80007fb6:	58 0c       	cp.w	r12,0
80007fb8:	e0 8a 00 6f 	brle	80008096 <__avr32_f64_mul_res_subnormal>
80007fbc:	e0 4c 07 ff 	cp.w	r12,2047
80007fc0:	e0 84 00 9c 	brge	800080f8 <__avr32_f64_mul_res_inf>
80007fc4:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007fc8:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007fcc:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007fd0:	ee 17 80 00 	eorh	r7,0x8000
80007fd4:	f1 b7 04 20 	satu	r7,0x1
80007fd8:	0e 0a       	add	r10,r7
80007fda:	5c 0b       	acr	r11
80007fdc:	ed be 00 1f 	bld	lr,0x1f
80007fe0:	ef bb 00 1f 	bst	r11,0x1f
80007fe4:	d8 22       	popm	r4-r7,pc

80007fe6 <__avr32_f64_mul_op1_subnormal>:
80007fe6:	e4 1b 00 0f 	andh	r11,0xf
80007fea:	f4 0c 12 00 	clz	r12,r10
80007fee:	f6 06 12 00 	clz	r6,r11
80007ff2:	f7 bc 03 e1 	sublo	r12,-31
80007ff6:	f8 06 17 30 	movlo	r6,r12
80007ffa:	f7 b6 02 01 	subhs	r6,1
80007ffe:	e0 46 00 20 	cp.w	r6,32
80008002:	c0 d4       	brge	8000801c <__avr32_f64_mul_op1_subnormal+0x36>
80008004:	ec 0c 11 20 	rsub	r12,r6,32
80008008:	f6 06 09 4b 	lsl	r11,r11,r6
8000800c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008010:	18 4b       	or	r11,r12
80008012:	f4 06 09 4a 	lsl	r10,r10,r6
80008016:	20 b6       	sub	r6,11
80008018:	0c 17       	sub	r7,r6
8000801a:	ca ab       	rjmp	80007f6e <__avr32_f64_mul+0x22>
8000801c:	f4 06 09 4b 	lsl	r11,r10,r6
80008020:	c6 40       	breq	800080e8 <__avr32_f64_mul_res_zero>
80008022:	30 0a       	mov	r10,0
80008024:	20 b6       	sub	r6,11
80008026:	0c 17       	sub	r7,r6
80008028:	ca 3b       	rjmp	80007f6e <__avr32_f64_mul+0x22>

8000802a <__avr32_f64_mul_op2_subnormal>:
8000802a:	e4 19 00 0f 	andh	r9,0xf
8000802e:	f0 0c 12 00 	clz	r12,r8
80008032:	f2 05 12 00 	clz	r5,r9
80008036:	f7 bc 03 ea 	sublo	r12,-22
8000803a:	f8 05 17 30 	movlo	r5,r12
8000803e:	f7 b5 02 0a 	subhs	r5,10
80008042:	e0 45 00 20 	cp.w	r5,32
80008046:	c0 d4       	brge	80008060 <__avr32_f64_mul_op2_subnormal+0x36>
80008048:	ea 0c 11 20 	rsub	r12,r5,32
8000804c:	f2 05 09 49 	lsl	r9,r9,r5
80008050:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008054:	18 49       	or	r9,r12
80008056:	f0 05 09 48 	lsl	r8,r8,r5
8000805a:	20 25       	sub	r5,2
8000805c:	0a 16       	sub	r6,r5
8000805e:	c8 fb       	rjmp	80007f7c <__avr32_f64_mul+0x30>
80008060:	f0 05 09 49 	lsl	r9,r8,r5
80008064:	c4 20       	breq	800080e8 <__avr32_f64_mul_res_zero>
80008066:	30 08       	mov	r8,0
80008068:	20 25       	sub	r5,2
8000806a:	0a 16       	sub	r6,r5
8000806c:	c8 8b       	rjmp	80007f7c <__avr32_f64_mul+0x30>

8000806e <__avr32_f64_mul_op_nan_or_inf>:
8000806e:	e4 19 00 0f 	andh	r9,0xf
80008072:	e4 1b 00 0f 	andh	r11,0xf
80008076:	14 4b       	or	r11,r10
80008078:	10 49       	or	r9,r8
8000807a:	e0 47 07 ff 	cp.w	r7,2047
8000807e:	c0 91       	brne	80008090 <__avr32_f64_mul_op1_not_naninf>
80008080:	58 0b       	cp.w	r11,0
80008082:	c3 81       	brne	800080f2 <__avr32_f64_mul_res_nan>
80008084:	e0 46 07 ff 	cp.w	r6,2047
80008088:	c3 81       	brne	800080f8 <__avr32_f64_mul_res_inf>
8000808a:	58 09       	cp.w	r9,0
8000808c:	c3 60       	breq	800080f8 <__avr32_f64_mul_res_inf>
8000808e:	c3 28       	rjmp	800080f2 <__avr32_f64_mul_res_nan>

80008090 <__avr32_f64_mul_op1_not_naninf>:
80008090:	58 09       	cp.w	r9,0
80008092:	c3 30       	breq	800080f8 <__avr32_f64_mul_res_inf>
80008094:	c2 f8       	rjmp	800080f2 <__avr32_f64_mul_res_nan>

80008096 <__avr32_f64_mul_res_subnormal>:
80008096:	5c 3c       	neg	r12
80008098:	2f fc       	sub	r12,-1
8000809a:	f1 bc 04 c0 	satu	r12,0x6
8000809e:	e0 4c 00 20 	cp.w	r12,32
800080a2:	c1 14       	brge	800080c4 <__avr32_f64_mul_res_subnormal+0x2e>
800080a4:	f8 08 11 20 	rsub	r8,r12,32
800080a8:	0e 46       	or	r6,r7
800080aa:	ee 0c 0a 47 	lsr	r7,r7,r12
800080ae:	f4 08 09 49 	lsl	r9,r10,r8
800080b2:	12 47       	or	r7,r9
800080b4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800080b8:	f6 08 09 49 	lsl	r9,r11,r8
800080bc:	12 4a       	or	r10,r9
800080be:	f6 0c 0a 4b 	lsr	r11,r11,r12
800080c2:	c8 3b       	rjmp	80007fc8 <__avr32_f64_mul+0x7c>
800080c4:	f8 08 11 20 	rsub	r8,r12,32
800080c8:	f9 b9 00 00 	moveq	r9,0
800080cc:	c0 30       	breq	800080d2 <__avr32_f64_mul_res_subnormal+0x3c>
800080ce:	f6 08 09 49 	lsl	r9,r11,r8
800080d2:	0e 46       	or	r6,r7
800080d4:	ed ea 10 16 	or	r6,r6,r10<<0x1
800080d8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800080dc:	f3 ea 10 07 	or	r7,r9,r10
800080e0:	f6 0c 0a 4a 	lsr	r10,r11,r12
800080e4:	30 0b       	mov	r11,0
800080e6:	c7 1b       	rjmp	80007fc8 <__avr32_f64_mul+0x7c>

800080e8 <__avr32_f64_mul_res_zero>:
800080e8:	1c 9b       	mov	r11,lr
800080ea:	e6 1b 80 00 	andh	r11,0x8000,COH
800080ee:	30 0a       	mov	r10,0
800080f0:	d8 22       	popm	r4-r7,pc

800080f2 <__avr32_f64_mul_res_nan>:
800080f2:	3f fb       	mov	r11,-1
800080f4:	3f fa       	mov	r10,-1
800080f6:	d8 22       	popm	r4-r7,pc

800080f8 <__avr32_f64_mul_res_inf>:
800080f8:	f0 6b 00 00 	mov	r11,-1048576
800080fc:	ed be 00 1f 	bld	lr,0x1f
80008100:	ef bb 00 1f 	bst	r11,0x1f
80008104:	30 0a       	mov	r10,0
80008106:	d8 22       	popm	r4-r7,pc

80008108 <__avr32_f64_mul_op1_zero>:
80008108:	f7 e9 20 0b 	eor	r11,r11,r9
8000810c:	e6 1b 80 00 	andh	r11,0x8000,COH
80008110:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008114:	e0 4c 07 ff 	cp.w	r12,2047
80008118:	5e 1c       	retne	r12
8000811a:	3f fa       	mov	r10,-1
8000811c:	3f fb       	mov	r11,-1
8000811e:	5e fc       	retal	r12

80008120 <__avr32_f64_sub_from_add>:
80008120:	ee 19 80 00 	eorh	r9,0x8000

80008124 <__avr32_f64_sub>:
80008124:	f7 e9 20 0c 	eor	r12,r11,r9
80008128:	e0 86 00 ca 	brmi	800082bc <__avr32_f64_add_from_sub>
8000812c:	eb cd 40 e0 	pushm	r5-r7,lr
80008130:	16 9c       	mov	r12,r11
80008132:	e6 1c 80 00 	andh	r12,0x8000,COH
80008136:	bf db       	cbr	r11,0x1f
80008138:	bf d9       	cbr	r9,0x1f
8000813a:	10 3a       	cp.w	r10,r8
8000813c:	f2 0b 13 00 	cpc	r11,r9
80008140:	c0 92       	brcc	80008152 <__avr32_f64_sub+0x2e>
80008142:	16 97       	mov	r7,r11
80008144:	12 9b       	mov	r11,r9
80008146:	0e 99       	mov	r9,r7
80008148:	14 97       	mov	r7,r10
8000814a:	10 9a       	mov	r10,r8
8000814c:	0e 98       	mov	r8,r7
8000814e:	ee 1c 80 00 	eorh	r12,0x8000
80008152:	f6 07 16 14 	lsr	r7,r11,0x14
80008156:	ab 7b       	lsl	r11,0xb
80008158:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000815c:	ab 7a       	lsl	r10,0xb
8000815e:	bf bb       	sbr	r11,0x1f
80008160:	f2 06 16 14 	lsr	r6,r9,0x14
80008164:	c4 40       	breq	800081ec <__avr32_f64_sub_opL_subnormal>
80008166:	ab 79       	lsl	r9,0xb
80008168:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000816c:	ab 78       	lsl	r8,0xb
8000816e:	bf b9       	sbr	r9,0x1f

80008170 <__avr32_f64_sub_opL_subnormal_done>:
80008170:	e0 47 07 ff 	cp.w	r7,2047
80008174:	c4 f0       	breq	80008212 <__avr32_f64_sub_opH_nan_or_inf>
80008176:	0e 26       	rsub	r6,r7
80008178:	c1 20       	breq	8000819c <__avr32_f64_sub_shift_done>
8000817a:	ec 05 11 20 	rsub	r5,r6,32
8000817e:	e0 46 00 20 	cp.w	r6,32
80008182:	c7 c2       	brcc	8000827a <__avr32_f64_sub_longshift>
80008184:	f0 05 09 4e 	lsl	lr,r8,r5
80008188:	f2 05 09 45 	lsl	r5,r9,r5
8000818c:	f0 06 0a 48 	lsr	r8,r8,r6
80008190:	f2 06 0a 49 	lsr	r9,r9,r6
80008194:	0a 48       	or	r8,r5
80008196:	58 0e       	cp.w	lr,0
80008198:	5f 1e       	srne	lr
8000819a:	1c 48       	or	r8,lr

8000819c <__avr32_f64_sub_shift_done>:
8000819c:	10 1a       	sub	r10,r8
8000819e:	f6 09 01 4b 	sbc	r11,r11,r9
800081a2:	f6 06 12 00 	clz	r6,r11
800081a6:	c0 e0       	breq	800081c2 <__avr32_f64_sub_longnormalize_done>
800081a8:	c7 83       	brcs	80008298 <__avr32_f64_sub_longnormalize>
800081aa:	ec 0e 11 20 	rsub	lr,r6,32
800081ae:	f6 06 09 4b 	lsl	r11,r11,r6
800081b2:	f4 0e 0a 4e 	lsr	lr,r10,lr
800081b6:	1c 4b       	or	r11,lr
800081b8:	f4 06 09 4a 	lsl	r10,r10,r6
800081bc:	0c 17       	sub	r7,r6
800081be:	e0 8a 00 39 	brle	80008230 <__avr32_f64_sub_subnormal_result>

800081c2 <__avr32_f64_sub_longnormalize_done>:
800081c2:	f4 09 15 15 	lsl	r9,r10,0x15
800081c6:	ab 9a       	lsr	r10,0xb
800081c8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800081cc:	ab 9b       	lsr	r11,0xb
800081ce:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800081d2:	18 4b       	or	r11,r12

800081d4 <__avr32_f64_sub_round>:
800081d4:	fc 17 80 00 	movh	r7,0x8000
800081d8:	ed ba 00 00 	bld	r10,0x0
800081dc:	f7 b7 01 ff 	subne	r7,-1
800081e0:	0e 39       	cp.w	r9,r7
800081e2:	5f 29       	srhs	r9
800081e4:	12 0a       	add	r10,r9
800081e6:	5c 0b       	acr	r11
800081e8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081ec <__avr32_f64_sub_opL_subnormal>:
800081ec:	ab 79       	lsl	r9,0xb
800081ee:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800081f2:	ab 78       	lsl	r8,0xb
800081f4:	f3 e8 10 0e 	or	lr,r9,r8
800081f8:	f9 b6 01 01 	movne	r6,1
800081fc:	ee 0e 11 00 	rsub	lr,r7,0
80008200:	f9 b7 00 01 	moveq	r7,1
80008204:	ef bb 00 1f 	bst	r11,0x1f
80008208:	f7 ea 10 0e 	or	lr,r11,r10
8000820c:	f9 b7 00 00 	moveq	r7,0
80008210:	cb 0b       	rjmp	80008170 <__avr32_f64_sub_opL_subnormal_done>

80008212 <__avr32_f64_sub_opH_nan_or_inf>:
80008212:	bf db       	cbr	r11,0x1f
80008214:	f7 ea 10 0e 	or	lr,r11,r10
80008218:	c0 81       	brne	80008228 <__avr32_f64_sub_return_nan>
8000821a:	e0 46 07 ff 	cp.w	r6,2047
8000821e:	c0 50       	breq	80008228 <__avr32_f64_sub_return_nan>
80008220:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008224:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008228 <__avr32_f64_sub_return_nan>:
80008228:	3f fa       	mov	r10,-1
8000822a:	3f fb       	mov	r11,-1
8000822c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008230 <__avr32_f64_sub_subnormal_result>:
80008230:	5c 37       	neg	r7
80008232:	2f f7       	sub	r7,-1
80008234:	f1 b7 04 c0 	satu	r7,0x6
80008238:	e0 47 00 20 	cp.w	r7,32
8000823c:	c1 14       	brge	8000825e <__avr32_f64_sub_subnormal_result+0x2e>
8000823e:	ee 08 11 20 	rsub	r8,r7,32
80008242:	f4 08 09 49 	lsl	r9,r10,r8
80008246:	5f 16       	srne	r6
80008248:	f4 07 0a 4a 	lsr	r10,r10,r7
8000824c:	0c 4a       	or	r10,r6
8000824e:	f6 08 09 49 	lsl	r9,r11,r8
80008252:	f5 e9 10 0a 	or	r10,r10,r9
80008256:	f4 07 0a 4b 	lsr	r11,r10,r7
8000825a:	30 07       	mov	r7,0
8000825c:	cb 3b       	rjmp	800081c2 <__avr32_f64_sub_longnormalize_done>
8000825e:	ee 08 11 40 	rsub	r8,r7,64
80008262:	f6 08 09 49 	lsl	r9,r11,r8
80008266:	14 49       	or	r9,r10
80008268:	5f 16       	srne	r6
8000826a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000826e:	0c 4a       	or	r10,r6
80008270:	30 0b       	mov	r11,0
80008272:	30 07       	mov	r7,0
80008274:	ca 7b       	rjmp	800081c2 <__avr32_f64_sub_longnormalize_done>
80008276:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000827a <__avr32_f64_sub_longshift>:
8000827a:	f1 b6 04 c0 	satu	r6,0x6
8000827e:	f0 0e 17 00 	moveq	lr,r8
80008282:	c0 40       	breq	8000828a <__avr32_f64_sub_longshift+0x10>
80008284:	f2 05 09 4e 	lsl	lr,r9,r5
80008288:	10 4e       	or	lr,r8
8000828a:	f2 06 0a 48 	lsr	r8,r9,r6
8000828e:	30 09       	mov	r9,0
80008290:	58 0e       	cp.w	lr,0
80008292:	5f 1e       	srne	lr
80008294:	1c 48       	or	r8,lr
80008296:	c8 3b       	rjmp	8000819c <__avr32_f64_sub_shift_done>

80008298 <__avr32_f64_sub_longnormalize>:
80008298:	f4 06 12 00 	clz	r6,r10
8000829c:	f9 b7 03 00 	movlo	r7,0
800082a0:	f9 b6 03 00 	movlo	r6,0
800082a4:	f9 bc 03 00 	movlo	r12,0
800082a8:	f7 b6 02 e0 	subhs	r6,-32
800082ac:	f4 06 09 4b 	lsl	r11,r10,r6
800082b0:	30 0a       	mov	r10,0
800082b2:	0c 17       	sub	r7,r6
800082b4:	fe 9a ff be 	brle	80008230 <__avr32_f64_sub_subnormal_result>
800082b8:	c8 5b       	rjmp	800081c2 <__avr32_f64_sub_longnormalize_done>
800082ba:	d7 03       	nop

800082bc <__avr32_f64_add_from_sub>:
800082bc:	ee 19 80 00 	eorh	r9,0x8000

800082c0 <__avr32_f64_add>:
800082c0:	f7 e9 20 0c 	eor	r12,r11,r9
800082c4:	fe 96 ff 2e 	brmi	80008120 <__avr32_f64_sub_from_add>
800082c8:	eb cd 40 e0 	pushm	r5-r7,lr
800082cc:	16 9c       	mov	r12,r11
800082ce:	e6 1c 80 00 	andh	r12,0x8000,COH
800082d2:	bf db       	cbr	r11,0x1f
800082d4:	bf d9       	cbr	r9,0x1f
800082d6:	12 3b       	cp.w	r11,r9
800082d8:	c0 72       	brcc	800082e6 <__avr32_f64_add+0x26>
800082da:	16 97       	mov	r7,r11
800082dc:	12 9b       	mov	r11,r9
800082de:	0e 99       	mov	r9,r7
800082e0:	14 97       	mov	r7,r10
800082e2:	10 9a       	mov	r10,r8
800082e4:	0e 98       	mov	r8,r7
800082e6:	30 0e       	mov	lr,0
800082e8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800082ec:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800082f0:	b5 ab       	sbr	r11,0x14
800082f2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800082f6:	c6 20       	breq	800083ba <__avr32_f64_add_op2_subnormal>
800082f8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800082fc:	b5 a9       	sbr	r9,0x14
800082fe:	e0 47 07 ff 	cp.w	r7,2047
80008302:	c2 80       	breq	80008352 <__avr32_f64_add_opH_nan_or_inf>
80008304:	0e 26       	rsub	r6,r7
80008306:	c1 20       	breq	8000832a <__avr32_f64_add_shift_done>
80008308:	e0 46 00 36 	cp.w	r6,54
8000830c:	c1 52       	brcc	80008336 <__avr32_f64_add_res_of_done>
8000830e:	ec 05 11 20 	rsub	r5,r6,32
80008312:	e0 46 00 20 	cp.w	r6,32
80008316:	c3 52       	brcc	80008380 <__avr32_f64_add_longshift>
80008318:	f0 05 09 4e 	lsl	lr,r8,r5
8000831c:	f2 05 09 45 	lsl	r5,r9,r5
80008320:	f0 06 0a 48 	lsr	r8,r8,r6
80008324:	f2 06 0a 49 	lsr	r9,r9,r6
80008328:	0a 48       	or	r8,r5

8000832a <__avr32_f64_add_shift_done>:
8000832a:	10 0a       	add	r10,r8
8000832c:	f6 09 00 4b 	adc	r11,r11,r9
80008330:	ed bb 00 15 	bld	r11,0x15
80008334:	c3 40       	breq	8000839c <__avr32_f64_add_res_of>

80008336 <__avr32_f64_add_res_of_done>:
80008336:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000833a:	18 4b       	or	r11,r12

8000833c <__avr32_f64_add_round>:
8000833c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008340:	18 4e       	or	lr,r12
80008342:	ee 1e 80 00 	eorh	lr,0x8000
80008346:	f1 be 04 20 	satu	lr,0x1
8000834a:	1c 0a       	add	r10,lr
8000834c:	5c 0b       	acr	r11
8000834e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008352 <__avr32_f64_add_opH_nan_or_inf>:
80008352:	b5 cb       	cbr	r11,0x14
80008354:	f7 ea 10 0e 	or	lr,r11,r10
80008358:	c1 01       	brne	80008378 <__avr32_f64_add_return_nan>
8000835a:	e0 46 07 ff 	cp.w	r6,2047
8000835e:	c0 30       	breq	80008364 <__avr32_f64_add_opL_nan_or_inf>
80008360:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008364 <__avr32_f64_add_opL_nan_or_inf>:
80008364:	b5 c9       	cbr	r9,0x14
80008366:	f3 e8 10 0e 	or	lr,r9,r8
8000836a:	c0 71       	brne	80008378 <__avr32_f64_add_return_nan>
8000836c:	30 0a       	mov	r10,0
8000836e:	fc 1b 7f f0 	movh	r11,0x7ff0
80008372:	18 4b       	or	r11,r12
80008374:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008378 <__avr32_f64_add_return_nan>:
80008378:	3f fa       	mov	r10,-1
8000837a:	3f fb       	mov	r11,-1
8000837c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008380 <__avr32_f64_add_longshift>:
80008380:	f1 b6 04 c0 	satu	r6,0x6
80008384:	f0 0e 17 00 	moveq	lr,r8
80008388:	c0 60       	breq	80008394 <__avr32_f64_add_longshift+0x14>
8000838a:	f2 05 09 4e 	lsl	lr,r9,r5
8000838e:	58 08       	cp.w	r8,0
80008390:	5f 18       	srne	r8
80008392:	10 4e       	or	lr,r8
80008394:	f2 06 0a 48 	lsr	r8,r9,r6
80008398:	30 09       	mov	r9,0
8000839a:	cc 8b       	rjmp	8000832a <__avr32_f64_add_shift_done>

8000839c <__avr32_f64_add_res_of>:
8000839c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800083a0:	a1 9b       	lsr	r11,0x1
800083a2:	5d 0a       	ror	r10
800083a4:	5d 0e       	ror	lr
800083a6:	2f f7       	sub	r7,-1
800083a8:	e0 47 07 ff 	cp.w	r7,2047
800083ac:	f9 ba 00 00 	moveq	r10,0
800083b0:	f9 bb 00 00 	moveq	r11,0
800083b4:	f9 be 00 00 	moveq	lr,0
800083b8:	cb fb       	rjmp	80008336 <__avr32_f64_add_res_of_done>

800083ba <__avr32_f64_add_op2_subnormal>:
800083ba:	30 16       	mov	r6,1
800083bc:	58 07       	cp.w	r7,0
800083be:	ca 01       	brne	800082fe <__avr32_f64_add+0x3e>
800083c0:	b5 cb       	cbr	r11,0x14
800083c2:	10 0a       	add	r10,r8
800083c4:	f6 09 00 4b 	adc	r11,r11,r9
800083c8:	18 4b       	or	r11,r12
800083ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800083ce:	d7 03       	nop

800083d0 <__avr32_f64_to_u32>:
800083d0:	58 0b       	cp.w	r11,0
800083d2:	5e 6d       	retmi	0

800083d4 <__avr32_f64_to_s32>:
800083d4:	f6 0c 15 01 	lsl	r12,r11,0x1
800083d8:	b5 9c       	lsr	r12,0x15
800083da:	e0 2c 03 ff 	sub	r12,1023
800083de:	5e 3d       	retlo	0
800083e0:	f8 0c 11 1f 	rsub	r12,r12,31
800083e4:	16 99       	mov	r9,r11
800083e6:	ab 7b       	lsl	r11,0xb
800083e8:	bf bb       	sbr	r11,0x1f
800083ea:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800083ee:	f6 0c 0a 4b 	lsr	r11,r11,r12
800083f2:	a1 79       	lsl	r9,0x1
800083f4:	5e 2b       	reths	r11
800083f6:	5c 3b       	neg	r11
800083f8:	5e fb       	retal	r11

800083fa <__avr32_u32_to_f64>:
800083fa:	f8 cb 00 00 	sub	r11,r12,0
800083fe:	30 0c       	mov	r12,0
80008400:	c0 38       	rjmp	80008406 <__avr32_s32_to_f64+0x4>

80008402 <__avr32_s32_to_f64>:
80008402:	18 9b       	mov	r11,r12
80008404:	5c 4b       	abs	r11
80008406:	30 0a       	mov	r10,0
80008408:	5e 0b       	reteq	r11
8000840a:	d4 01       	pushm	lr
8000840c:	e0 69 04 1e 	mov	r9,1054
80008410:	f6 08 12 00 	clz	r8,r11
80008414:	c1 70       	breq	80008442 <__avr32_s32_to_f64+0x40>
80008416:	c0 c3       	brcs	8000842e <__avr32_s32_to_f64+0x2c>
80008418:	f0 0e 11 20 	rsub	lr,r8,32
8000841c:	f6 08 09 4b 	lsl	r11,r11,r8
80008420:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008424:	1c 4b       	or	r11,lr
80008426:	f4 08 09 4a 	lsl	r10,r10,r8
8000842a:	10 19       	sub	r9,r8
8000842c:	c0 b8       	rjmp	80008442 <__avr32_s32_to_f64+0x40>
8000842e:	f4 08 12 00 	clz	r8,r10
80008432:	f9 b8 03 00 	movlo	r8,0
80008436:	f7 b8 02 e0 	subhs	r8,-32
8000843a:	f4 08 09 4b 	lsl	r11,r10,r8
8000843e:	30 0a       	mov	r10,0
80008440:	10 19       	sub	r9,r8
80008442:	58 09       	cp.w	r9,0
80008444:	e0 89 00 30 	brgt	800084a4 <__avr32_s32_to_f64+0xa2>
80008448:	5c 39       	neg	r9
8000844a:	2f f9       	sub	r9,-1
8000844c:	e0 49 00 36 	cp.w	r9,54
80008450:	c0 43       	brcs	80008458 <__avr32_s32_to_f64+0x56>
80008452:	30 0b       	mov	r11,0
80008454:	30 0a       	mov	r10,0
80008456:	c2 68       	rjmp	800084a2 <__avr32_s32_to_f64+0xa0>
80008458:	2f 69       	sub	r9,-10
8000845a:	f2 08 11 20 	rsub	r8,r9,32
8000845e:	e0 49 00 20 	cp.w	r9,32
80008462:	c0 b2       	brcc	80008478 <__avr32_s32_to_f64+0x76>
80008464:	f4 08 09 4e 	lsl	lr,r10,r8
80008468:	f6 08 09 48 	lsl	r8,r11,r8
8000846c:	f4 09 0a 4a 	lsr	r10,r10,r9
80008470:	f6 09 0a 4b 	lsr	r11,r11,r9
80008474:	10 4b       	or	r11,r8
80008476:	c0 88       	rjmp	80008486 <__avr32_s32_to_f64+0x84>
80008478:	f6 08 09 4e 	lsl	lr,r11,r8
8000847c:	14 4e       	or	lr,r10
8000847e:	16 9a       	mov	r10,r11
80008480:	30 0b       	mov	r11,0
80008482:	f4 09 0a 4a 	lsr	r10,r10,r9
80008486:	ed ba 00 00 	bld	r10,0x0
8000848a:	c0 92       	brcc	8000849c <__avr32_s32_to_f64+0x9a>
8000848c:	1c 7e       	tst	lr,lr
8000848e:	c0 41       	brne	80008496 <__avr32_s32_to_f64+0x94>
80008490:	ed ba 00 01 	bld	r10,0x1
80008494:	c0 42       	brcc	8000849c <__avr32_s32_to_f64+0x9a>
80008496:	2f fa       	sub	r10,-1
80008498:	f7 bb 02 ff 	subhs	r11,-1
8000849c:	5c fc       	rol	r12
8000849e:	5d 0b       	ror	r11
800084a0:	5d 0a       	ror	r10
800084a2:	d8 02       	popm	pc
800084a4:	e0 68 03 ff 	mov	r8,1023
800084a8:	ed ba 00 0b 	bld	r10,0xb
800084ac:	f7 b8 00 ff 	subeq	r8,-1
800084b0:	10 0a       	add	r10,r8
800084b2:	5c 0b       	acr	r11
800084b4:	f7 b9 03 fe 	sublo	r9,-2
800084b8:	e0 49 07 ff 	cp.w	r9,2047
800084bc:	c0 55       	brlt	800084c6 <__avr32_s32_to_f64+0xc4>
800084be:	30 0a       	mov	r10,0
800084c0:	fc 1b ff e0 	movh	r11,0xffe0
800084c4:	c0 c8       	rjmp	800084dc <__floatsidf_return_op1>
800084c6:	ed bb 00 1f 	bld	r11,0x1f
800084ca:	f7 b9 01 01 	subne	r9,1
800084ce:	ab 9a       	lsr	r10,0xb
800084d0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800084d4:	a1 7b       	lsl	r11,0x1
800084d6:	ab 9b       	lsr	r11,0xb
800084d8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800084dc <__floatsidf_return_op1>:
800084dc:	a1 7c       	lsl	r12,0x1
800084de:	5d 0b       	ror	r11
800084e0:	d8 02       	popm	pc

800084e2 <__avr32_f64_cmp_eq>:
800084e2:	10 3a       	cp.w	r10,r8
800084e4:	f2 0b 13 00 	cpc	r11,r9
800084e8:	c0 80       	breq	800084f8 <__avr32_f64_cmp_eq+0x16>
800084ea:	a1 7b       	lsl	r11,0x1
800084ec:	a1 79       	lsl	r9,0x1
800084ee:	14 4b       	or	r11,r10
800084f0:	12 4b       	or	r11,r9
800084f2:	10 4b       	or	r11,r8
800084f4:	5e 0f       	reteq	1
800084f6:	5e fd       	retal	0
800084f8:	a1 7b       	lsl	r11,0x1
800084fa:	fc 1c ff e0 	movh	r12,0xffe0
800084fe:	58 0a       	cp.w	r10,0
80008500:	f8 0b 13 00 	cpc	r11,r12
80008504:	5e 8f       	retls	1
80008506:	5e fd       	retal	0

80008508 <__avr32_f64_cmp_ge>:
80008508:	1a de       	st.w	--sp,lr
8000850a:	1a d7       	st.w	--sp,r7
8000850c:	a1 7b       	lsl	r11,0x1
8000850e:	5f 3c       	srlo	r12
80008510:	a1 79       	lsl	r9,0x1
80008512:	5f 37       	srlo	r7
80008514:	5c fc       	rol	r12
80008516:	fc 1e ff e0 	movh	lr,0xffe0
8000851a:	58 0a       	cp.w	r10,0
8000851c:	fc 0b 13 00 	cpc	r11,lr
80008520:	e0 8b 00 1d 	brhi	8000855a <__avr32_f64_cmp_ge+0x52>
80008524:	58 08       	cp.w	r8,0
80008526:	fc 09 13 00 	cpc	r9,lr
8000852a:	e0 8b 00 18 	brhi	8000855a <__avr32_f64_cmp_ge+0x52>
8000852e:	58 0b       	cp.w	r11,0
80008530:	f5 ba 00 00 	subfeq	r10,0
80008534:	c1 50       	breq	8000855e <__avr32_f64_cmp_ge+0x56>
80008536:	1b 07       	ld.w	r7,sp++
80008538:	1b 0e       	ld.w	lr,sp++
8000853a:	58 3c       	cp.w	r12,3
8000853c:	c0 a0       	breq	80008550 <__avr32_f64_cmp_ge+0x48>
8000853e:	58 1c       	cp.w	r12,1
80008540:	c0 33       	brcs	80008546 <__avr32_f64_cmp_ge+0x3e>
80008542:	5e 0f       	reteq	1
80008544:	5e 1d       	retne	0
80008546:	10 3a       	cp.w	r10,r8
80008548:	f2 0b 13 00 	cpc	r11,r9
8000854c:	5e 2f       	reths	1
8000854e:	5e 3d       	retlo	0
80008550:	14 38       	cp.w	r8,r10
80008552:	f6 09 13 00 	cpc	r9,r11
80008556:	5e 2f       	reths	1
80008558:	5e 3d       	retlo	0
8000855a:	1b 07       	ld.w	r7,sp++
8000855c:	d8 0a       	popm	pc,r12=0
8000855e:	58 17       	cp.w	r7,1
80008560:	5f 0c       	sreq	r12
80008562:	58 09       	cp.w	r9,0
80008564:	f5 b8 00 00 	subfeq	r8,0
80008568:	1b 07       	ld.w	r7,sp++
8000856a:	1b 0e       	ld.w	lr,sp++
8000856c:	5e 0f       	reteq	1
8000856e:	5e fc       	retal	r12

80008570 <__avr32_f64_cmp_lt>:
80008570:	1a de       	st.w	--sp,lr
80008572:	1a d7       	st.w	--sp,r7
80008574:	a1 7b       	lsl	r11,0x1
80008576:	5f 3c       	srlo	r12
80008578:	a1 79       	lsl	r9,0x1
8000857a:	5f 37       	srlo	r7
8000857c:	5c fc       	rol	r12
8000857e:	fc 1e ff e0 	movh	lr,0xffe0
80008582:	58 0a       	cp.w	r10,0
80008584:	fc 0b 13 00 	cpc	r11,lr
80008588:	e0 8b 00 1d 	brhi	800085c2 <__avr32_f64_cmp_lt+0x52>
8000858c:	58 08       	cp.w	r8,0
8000858e:	fc 09 13 00 	cpc	r9,lr
80008592:	e0 8b 00 18 	brhi	800085c2 <__avr32_f64_cmp_lt+0x52>
80008596:	58 0b       	cp.w	r11,0
80008598:	f5 ba 00 00 	subfeq	r10,0
8000859c:	c1 50       	breq	800085c6 <__avr32_f64_cmp_lt+0x56>
8000859e:	1b 07       	ld.w	r7,sp++
800085a0:	1b 0e       	ld.w	lr,sp++
800085a2:	58 3c       	cp.w	r12,3
800085a4:	c0 a0       	breq	800085b8 <__avr32_f64_cmp_lt+0x48>
800085a6:	58 1c       	cp.w	r12,1
800085a8:	c0 33       	brcs	800085ae <__avr32_f64_cmp_lt+0x3e>
800085aa:	5e 0d       	reteq	0
800085ac:	5e 1f       	retne	1
800085ae:	10 3a       	cp.w	r10,r8
800085b0:	f2 0b 13 00 	cpc	r11,r9
800085b4:	5e 2d       	reths	0
800085b6:	5e 3f       	retlo	1
800085b8:	14 38       	cp.w	r8,r10
800085ba:	f6 09 13 00 	cpc	r9,r11
800085be:	5e 2d       	reths	0
800085c0:	5e 3f       	retlo	1
800085c2:	1b 07       	ld.w	r7,sp++
800085c4:	d8 0a       	popm	pc,r12=0
800085c6:	58 17       	cp.w	r7,1
800085c8:	5f 1c       	srne	r12
800085ca:	58 09       	cp.w	r9,0
800085cc:	f5 b8 00 00 	subfeq	r8,0
800085d0:	1b 07       	ld.w	r7,sp++
800085d2:	1b 0e       	ld.w	lr,sp++
800085d4:	5e 0d       	reteq	0
800085d6:	5e fc       	retal	r12

800085d8 <__avr32_f64_div>:
800085d8:	eb cd 40 ff 	pushm	r0-r7,lr
800085dc:	f7 e9 20 0e 	eor	lr,r11,r9
800085e0:	f6 07 16 14 	lsr	r7,r11,0x14
800085e4:	a9 7b       	lsl	r11,0x9
800085e6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800085ea:	a9 7a       	lsl	r10,0x9
800085ec:	bd bb       	sbr	r11,0x1d
800085ee:	e4 1b 3f ff 	andh	r11,0x3fff
800085f2:	ab d7       	cbr	r7,0xb
800085f4:	e0 80 00 cc 	breq	8000878c <__avr32_f64_div_round_subnormal+0x54>
800085f8:	e0 47 07 ff 	cp.w	r7,2047
800085fc:	e0 84 00 b5 	brge	80008766 <__avr32_f64_div_round_subnormal+0x2e>
80008600:	f2 06 16 14 	lsr	r6,r9,0x14
80008604:	a9 79       	lsl	r9,0x9
80008606:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000860a:	a9 78       	lsl	r8,0x9
8000860c:	bd b9       	sbr	r9,0x1d
8000860e:	e4 19 3f ff 	andh	r9,0x3fff
80008612:	ab d6       	cbr	r6,0xb
80008614:	e0 80 00 e2 	breq	800087d8 <__avr32_f64_div_round_subnormal+0xa0>
80008618:	e0 46 07 ff 	cp.w	r6,2047
8000861c:	e0 84 00 b2 	brge	80008780 <__avr32_f64_div_round_subnormal+0x48>
80008620:	0c 17       	sub	r7,r6
80008622:	fe 37 fc 01 	sub	r7,-1023
80008626:	fc 1c 80 00 	movh	r12,0x8000
8000862a:	f8 03 16 01 	lsr	r3,r12,0x1
8000862e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008632:	5c d4       	com	r4
80008634:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008638:	e6 09 06 44 	mulu.d	r4,r3,r9
8000863c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008640:	e6 05 06 44 	mulu.d	r4,r3,r5
80008644:	ea 03 15 02 	lsl	r3,r5,0x2
80008648:	e6 09 06 44 	mulu.d	r4,r3,r9
8000864c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008650:	e6 05 06 44 	mulu.d	r4,r3,r5
80008654:	ea 03 15 02 	lsl	r3,r5,0x2
80008658:	e6 09 06 44 	mulu.d	r4,r3,r9
8000865c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008660:	e6 05 06 44 	mulu.d	r4,r3,r5
80008664:	ea 03 15 02 	lsl	r3,r5,0x2
80008668:	e6 08 06 40 	mulu.d	r0,r3,r8
8000866c:	e4 09 07 40 	macu.d	r0,r2,r9
80008670:	e6 09 06 44 	mulu.d	r4,r3,r9
80008674:	02 04       	add	r4,r1
80008676:	5c 05       	acr	r5
80008678:	a3 65       	lsl	r5,0x2
8000867a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000867e:	a3 64       	lsl	r4,0x2
80008680:	5c 34       	neg	r4
80008682:	f8 05 01 45 	sbc	r5,r12,r5
80008686:	e6 04 06 40 	mulu.d	r0,r3,r4
8000868a:	e4 05 07 40 	macu.d	r0,r2,r5
8000868e:	e6 05 06 44 	mulu.d	r4,r3,r5
80008692:	02 04       	add	r4,r1
80008694:	5c 05       	acr	r5
80008696:	ea 03 15 02 	lsl	r3,r5,0x2
8000869a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000869e:	e8 02 15 02 	lsl	r2,r4,0x2
800086a2:	e6 08 06 40 	mulu.d	r0,r3,r8
800086a6:	e4 09 07 40 	macu.d	r0,r2,r9
800086aa:	e6 09 06 44 	mulu.d	r4,r3,r9
800086ae:	02 04       	add	r4,r1
800086b0:	5c 05       	acr	r5
800086b2:	a3 65       	lsl	r5,0x2
800086b4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800086b8:	a3 64       	lsl	r4,0x2
800086ba:	5c 34       	neg	r4
800086bc:	f8 05 01 45 	sbc	r5,r12,r5
800086c0:	e6 04 06 40 	mulu.d	r0,r3,r4
800086c4:	e4 05 07 40 	macu.d	r0,r2,r5
800086c8:	e6 05 06 44 	mulu.d	r4,r3,r5
800086cc:	02 04       	add	r4,r1
800086ce:	5c 05       	acr	r5
800086d0:	ea 03 15 02 	lsl	r3,r5,0x2
800086d4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800086d8:	e8 02 15 02 	lsl	r2,r4,0x2
800086dc:	e6 0a 06 40 	mulu.d	r0,r3,r10
800086e0:	e4 0b 07 40 	macu.d	r0,r2,r11
800086e4:	e6 0b 06 42 	mulu.d	r2,r3,r11
800086e8:	02 02       	add	r2,r1
800086ea:	5c 03       	acr	r3
800086ec:	ed b3 00 1c 	bld	r3,0x1c
800086f0:	c0 90       	breq	80008702 <__avr32_f64_div+0x12a>
800086f2:	a1 72       	lsl	r2,0x1
800086f4:	5c f3       	rol	r3
800086f6:	20 17       	sub	r7,1
800086f8:	a3 9a       	lsr	r10,0x3
800086fa:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800086fe:	a3 9b       	lsr	r11,0x3
80008700:	c0 58       	rjmp	8000870a <__avr32_f64_div+0x132>
80008702:	a5 8a       	lsr	r10,0x4
80008704:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008708:	a5 8b       	lsr	r11,0x4
8000870a:	58 07       	cp.w	r7,0
8000870c:	e0 8a 00 8b 	brle	80008822 <__avr32_f64_div_res_subnormal>
80008710:	e0 12 ff 00 	andl	r2,0xff00
80008714:	e8 12 00 80 	orl	r2,0x80
80008718:	e6 08 06 40 	mulu.d	r0,r3,r8
8000871c:	e4 09 07 40 	macu.d	r0,r2,r9
80008720:	e4 08 06 44 	mulu.d	r4,r2,r8
80008724:	e6 09 06 48 	mulu.d	r8,r3,r9
80008728:	00 05       	add	r5,r0
8000872a:	f0 01 00 48 	adc	r8,r8,r1
8000872e:	5c 09       	acr	r9
80008730:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008734:	58 04       	cp.w	r4,0
80008736:	5c 25       	cpc	r5

80008738 <__avr32_f64_div_round_subnormal>:
80008738:	f4 08 13 00 	cpc	r8,r10
8000873c:	f6 09 13 00 	cpc	r9,r11
80008740:	5f 36       	srlo	r6
80008742:	f8 06 17 00 	moveq	r6,r12
80008746:	e4 0a 16 08 	lsr	r10,r2,0x8
8000874a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000874e:	e6 0b 16 08 	lsr	r11,r3,0x8
80008752:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008756:	ed be 00 1f 	bld	lr,0x1f
8000875a:	ef bb 00 1f 	bst	r11,0x1f
8000875e:	0c 0a       	add	r10,r6
80008760:	5c 0b       	acr	r11
80008762:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008766:	e4 1b 00 0f 	andh	r11,0xf
8000876a:	14 4b       	or	r11,r10
8000876c:	e0 81 00 a7 	brne	800088ba <__avr32_f64_div_res_subnormal+0x98>
80008770:	f2 06 16 14 	lsr	r6,r9,0x14
80008774:	ab d6       	cbr	r6,0xb
80008776:	e0 46 07 ff 	cp.w	r6,2047
8000877a:	e0 81 00 a4 	brne	800088c2 <__avr32_f64_div_res_subnormal+0xa0>
8000877e:	c9 e8       	rjmp	800088ba <__avr32_f64_div_res_subnormal+0x98>
80008780:	e4 19 00 0f 	andh	r9,0xf
80008784:	10 49       	or	r9,r8
80008786:	e0 81 00 9a 	brne	800088ba <__avr32_f64_div_res_subnormal+0x98>
8000878a:	c9 28       	rjmp	800088ae <__avr32_f64_div_res_subnormal+0x8c>
8000878c:	a3 7b       	lsl	r11,0x3
8000878e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008792:	a3 7a       	lsl	r10,0x3
80008794:	f5 eb 10 04 	or	r4,r10,r11
80008798:	e0 80 00 a0 	breq	800088d8 <__avr32_f64_div_op1_zero>
8000879c:	f6 04 12 00 	clz	r4,r11
800087a0:	c1 70       	breq	800087ce <__avr32_f64_div_round_subnormal+0x96>
800087a2:	c0 c3       	brcs	800087ba <__avr32_f64_div_round_subnormal+0x82>
800087a4:	e8 05 11 20 	rsub	r5,r4,32
800087a8:	f6 04 09 4b 	lsl	r11,r11,r4
800087ac:	f4 05 0a 45 	lsr	r5,r10,r5
800087b0:	0a 4b       	or	r11,r5
800087b2:	f4 04 09 4a 	lsl	r10,r10,r4
800087b6:	08 17       	sub	r7,r4
800087b8:	c0 b8       	rjmp	800087ce <__avr32_f64_div_round_subnormal+0x96>
800087ba:	f4 04 12 00 	clz	r4,r10
800087be:	f9 b4 03 00 	movlo	r4,0
800087c2:	f7 b4 02 e0 	subhs	r4,-32
800087c6:	f4 04 09 4b 	lsl	r11,r10,r4
800087ca:	30 0a       	mov	r10,0
800087cc:	08 17       	sub	r7,r4
800087ce:	a3 8a       	lsr	r10,0x2
800087d0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800087d4:	a3 8b       	lsr	r11,0x2
800087d6:	c1 1b       	rjmp	800085f8 <__avr32_f64_div+0x20>
800087d8:	a3 79       	lsl	r9,0x3
800087da:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800087de:	a3 78       	lsl	r8,0x3
800087e0:	f3 e8 10 04 	or	r4,r9,r8
800087e4:	c6 f0       	breq	800088c2 <__avr32_f64_div_res_subnormal+0xa0>
800087e6:	f2 04 12 00 	clz	r4,r9
800087ea:	c1 70       	breq	80008818 <__avr32_f64_div_round_subnormal+0xe0>
800087ec:	c0 c3       	brcs	80008804 <__avr32_f64_div_round_subnormal+0xcc>
800087ee:	e8 05 11 20 	rsub	r5,r4,32
800087f2:	f2 04 09 49 	lsl	r9,r9,r4
800087f6:	f0 05 0a 45 	lsr	r5,r8,r5
800087fa:	0a 49       	or	r9,r5
800087fc:	f0 04 09 48 	lsl	r8,r8,r4
80008800:	08 16       	sub	r6,r4
80008802:	c0 b8       	rjmp	80008818 <__avr32_f64_div_round_subnormal+0xe0>
80008804:	f0 04 12 00 	clz	r4,r8
80008808:	f9 b4 03 00 	movlo	r4,0
8000880c:	f7 b4 02 e0 	subhs	r4,-32
80008810:	f0 04 09 49 	lsl	r9,r8,r4
80008814:	30 08       	mov	r8,0
80008816:	08 16       	sub	r6,r4
80008818:	a3 88       	lsr	r8,0x2
8000881a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000881e:	a3 89       	lsr	r9,0x2
80008820:	cf ca       	rjmp	80008618 <__avr32_f64_div+0x40>

80008822 <__avr32_f64_div_res_subnormal>:
80008822:	5c 37       	neg	r7
80008824:	2f f7       	sub	r7,-1
80008826:	f1 b7 04 c0 	satu	r7,0x6
8000882a:	e0 47 00 20 	cp.w	r7,32
8000882e:	c1 54       	brge	80008858 <__avr32_f64_div_res_subnormal+0x36>
80008830:	ee 06 11 20 	rsub	r6,r7,32
80008834:	e4 07 0a 42 	lsr	r2,r2,r7
80008838:	e6 06 09 4c 	lsl	r12,r3,r6
8000883c:	18 42       	or	r2,r12
8000883e:	e6 07 0a 43 	lsr	r3,r3,r7
80008842:	f4 06 09 41 	lsl	r1,r10,r6
80008846:	f4 07 0a 4a 	lsr	r10,r10,r7
8000884a:	f6 06 09 4c 	lsl	r12,r11,r6
8000884e:	18 4a       	or	r10,r12
80008850:	f6 07 0a 4b 	lsr	r11,r11,r7
80008854:	30 00       	mov	r0,0
80008856:	c1 58       	rjmp	80008880 <__avr32_f64_div_res_subnormal+0x5e>
80008858:	ee 06 11 20 	rsub	r6,r7,32
8000885c:	f9 b0 00 00 	moveq	r0,0
80008860:	f9 bc 00 00 	moveq	r12,0
80008864:	c0 50       	breq	8000886e <__avr32_f64_div_res_subnormal+0x4c>
80008866:	f4 06 09 40 	lsl	r0,r10,r6
8000886a:	f6 06 09 4c 	lsl	r12,r11,r6
8000886e:	e6 07 0a 42 	lsr	r2,r3,r7
80008872:	30 03       	mov	r3,0
80008874:	f4 07 0a 41 	lsr	r1,r10,r7
80008878:	18 41       	or	r1,r12
8000887a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000887e:	30 0b       	mov	r11,0
80008880:	e0 12 ff 00 	andl	r2,0xff00
80008884:	e8 12 00 80 	orl	r2,0x80
80008888:	e6 08 06 46 	mulu.d	r6,r3,r8
8000888c:	e4 09 07 46 	macu.d	r6,r2,r9
80008890:	e4 08 06 44 	mulu.d	r4,r2,r8
80008894:	e6 09 06 48 	mulu.d	r8,r3,r9
80008898:	0c 05       	add	r5,r6
8000889a:	f0 07 00 48 	adc	r8,r8,r7
8000889e:	5c 09       	acr	r9
800088a0:	30 07       	mov	r7,0
800088a2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800088a6:	00 34       	cp.w	r4,r0
800088a8:	e2 05 13 00 	cpc	r5,r1
800088ac:	c4 6b       	rjmp	80008738 <__avr32_f64_div_round_subnormal>
800088ae:	1c 9b       	mov	r11,lr
800088b0:	e6 1b 80 00 	andh	r11,0x8000,COH
800088b4:	30 0a       	mov	r10,0
800088b6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800088ba:	3f fb       	mov	r11,-1
800088bc:	30 0a       	mov	r10,0
800088be:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800088c2:	f5 eb 10 04 	or	r4,r10,r11
800088c6:	c0 90       	breq	800088d8 <__avr32_f64_div_op1_zero>
800088c8:	1c 9b       	mov	r11,lr
800088ca:	e6 1b 80 00 	andh	r11,0x8000,COH
800088ce:	ea 1b 7f f0 	orh	r11,0x7ff0
800088d2:	30 0a       	mov	r10,0
800088d4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800088d8 <__avr32_f64_div_op1_zero>:
800088d8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800088dc:	ce f0       	breq	800088ba <__avr32_f64_div_res_subnormal+0x98>
800088de:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800088e2:	e0 44 07 ff 	cp.w	r4,2047
800088e6:	ce 41       	brne	800088ae <__avr32_f64_div_res_subnormal+0x8c>
800088e8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800088ec:	ce 10       	breq	800088ae <__avr32_f64_div_res_subnormal+0x8c>
800088ee:	ce 6b       	rjmp	800088ba <__avr32_f64_div_res_subnormal+0x98>

800088f0 <__avr32_udiv64>:
800088f0:	d4 31       	pushm	r0-r7,lr
800088f2:	1a 97       	mov	r7,sp
800088f4:	20 3d       	sub	sp,12
800088f6:	10 9c       	mov	r12,r8
800088f8:	12 9e       	mov	lr,r9
800088fa:	14 93       	mov	r3,r10
800088fc:	58 09       	cp.w	r9,0
800088fe:	e0 81 00 bd 	brne	80008a78 <__avr32_udiv64+0x188>
80008902:	16 38       	cp.w	r8,r11
80008904:	e0 88 00 40 	brls	80008984 <__avr32_udiv64+0x94>
80008908:	f0 08 12 00 	clz	r8,r8
8000890c:	c0 d0       	breq	80008926 <__avr32_udiv64+0x36>
8000890e:	f6 08 09 4b 	lsl	r11,r11,r8
80008912:	f0 09 11 20 	rsub	r9,r8,32
80008916:	f8 08 09 4c 	lsl	r12,r12,r8
8000891a:	f4 09 0a 49 	lsr	r9,r10,r9
8000891e:	f4 08 09 43 	lsl	r3,r10,r8
80008922:	f3 eb 10 0b 	or	r11,r9,r11
80008926:	f8 0e 16 10 	lsr	lr,r12,0x10
8000892a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000892e:	f6 0e 0d 00 	divu	r0,r11,lr
80008932:	e6 0b 16 10 	lsr	r11,r3,0x10
80008936:	00 99       	mov	r9,r0
80008938:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000893c:	e0 0a 02 48 	mul	r8,r0,r10
80008940:	10 3b       	cp.w	r11,r8
80008942:	c0 a2       	brcc	80008956 <__avr32_udiv64+0x66>
80008944:	20 19       	sub	r9,1
80008946:	18 0b       	add	r11,r12
80008948:	18 3b       	cp.w	r11,r12
8000894a:	c0 63       	brcs	80008956 <__avr32_udiv64+0x66>
8000894c:	10 3b       	cp.w	r11,r8
8000894e:	f7 b9 03 01 	sublo	r9,1
80008952:	f7 dc e3 0b 	addcs	r11,r11,r12
80008956:	f6 08 01 01 	sub	r1,r11,r8
8000895a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000895e:	e2 0e 0d 00 	divu	r0,r1,lr
80008962:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008966:	00 98       	mov	r8,r0
80008968:	e0 0a 02 4a 	mul	r10,r0,r10
8000896c:	14 33       	cp.w	r3,r10
8000896e:	c0 82       	brcc	8000897e <__avr32_udiv64+0x8e>
80008970:	20 18       	sub	r8,1
80008972:	18 03       	add	r3,r12
80008974:	18 33       	cp.w	r3,r12
80008976:	c0 43       	brcs	8000897e <__avr32_udiv64+0x8e>
80008978:	14 33       	cp.w	r3,r10
8000897a:	f7 b8 03 01 	sublo	r8,1
8000897e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008982:	cd f8       	rjmp	80008b40 <__avr32_udiv64+0x250>
80008984:	58 08       	cp.w	r8,0
80008986:	c0 51       	brne	80008990 <__avr32_udiv64+0xa0>
80008988:	30 19       	mov	r9,1
8000898a:	f2 08 0d 08 	divu	r8,r9,r8
8000898e:	10 9c       	mov	r12,r8
80008990:	f8 06 12 00 	clz	r6,r12
80008994:	c0 41       	brne	8000899c <__avr32_udiv64+0xac>
80008996:	18 1b       	sub	r11,r12
80008998:	30 19       	mov	r9,1
8000899a:	c4 08       	rjmp	80008a1a <__avr32_udiv64+0x12a>
8000899c:	ec 01 11 20 	rsub	r1,r6,32
800089a0:	f4 01 0a 49 	lsr	r9,r10,r1
800089a4:	f8 06 09 4c 	lsl	r12,r12,r6
800089a8:	f6 06 09 48 	lsl	r8,r11,r6
800089ac:	f6 01 0a 41 	lsr	r1,r11,r1
800089b0:	f3 e8 10 08 	or	r8,r9,r8
800089b4:	f8 03 16 10 	lsr	r3,r12,0x10
800089b8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800089bc:	e2 03 0d 00 	divu	r0,r1,r3
800089c0:	f0 0b 16 10 	lsr	r11,r8,0x10
800089c4:	00 9e       	mov	lr,r0
800089c6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800089ca:	e0 05 02 49 	mul	r9,r0,r5
800089ce:	12 3b       	cp.w	r11,r9
800089d0:	c0 a2       	brcc	800089e4 <__avr32_udiv64+0xf4>
800089d2:	20 1e       	sub	lr,1
800089d4:	18 0b       	add	r11,r12
800089d6:	18 3b       	cp.w	r11,r12
800089d8:	c0 63       	brcs	800089e4 <__avr32_udiv64+0xf4>
800089da:	12 3b       	cp.w	r11,r9
800089dc:	f7 be 03 01 	sublo	lr,1
800089e0:	f7 dc e3 0b 	addcs	r11,r11,r12
800089e4:	12 1b       	sub	r11,r9
800089e6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800089ea:	f6 03 0d 02 	divu	r2,r11,r3
800089ee:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800089f2:	04 99       	mov	r9,r2
800089f4:	e4 05 02 4b 	mul	r11,r2,r5
800089f8:	16 38       	cp.w	r8,r11
800089fa:	c0 a2       	brcc	80008a0e <__avr32_udiv64+0x11e>
800089fc:	20 19       	sub	r9,1
800089fe:	18 08       	add	r8,r12
80008a00:	18 38       	cp.w	r8,r12
80008a02:	c0 63       	brcs	80008a0e <__avr32_udiv64+0x11e>
80008a04:	16 38       	cp.w	r8,r11
80008a06:	f7 b9 03 01 	sublo	r9,1
80008a0a:	f1 dc e3 08 	addcs	r8,r8,r12
80008a0e:	f4 06 09 43 	lsl	r3,r10,r6
80008a12:	f0 0b 01 0b 	sub	r11,r8,r11
80008a16:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008a1a:	f8 06 16 10 	lsr	r6,r12,0x10
80008a1e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008a22:	f6 06 0d 00 	divu	r0,r11,r6
80008a26:	e6 0b 16 10 	lsr	r11,r3,0x10
80008a2a:	00 9a       	mov	r10,r0
80008a2c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008a30:	e0 0e 02 48 	mul	r8,r0,lr
80008a34:	10 3b       	cp.w	r11,r8
80008a36:	c0 a2       	brcc	80008a4a <__avr32_udiv64+0x15a>
80008a38:	20 1a       	sub	r10,1
80008a3a:	18 0b       	add	r11,r12
80008a3c:	18 3b       	cp.w	r11,r12
80008a3e:	c0 63       	brcs	80008a4a <__avr32_udiv64+0x15a>
80008a40:	10 3b       	cp.w	r11,r8
80008a42:	f7 ba 03 01 	sublo	r10,1
80008a46:	f7 dc e3 0b 	addcs	r11,r11,r12
80008a4a:	f6 08 01 01 	sub	r1,r11,r8
80008a4e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008a52:	e2 06 0d 00 	divu	r0,r1,r6
80008a56:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008a5a:	00 98       	mov	r8,r0
80008a5c:	e0 0e 02 4b 	mul	r11,r0,lr
80008a60:	16 33       	cp.w	r3,r11
80008a62:	c0 82       	brcc	80008a72 <__avr32_udiv64+0x182>
80008a64:	20 18       	sub	r8,1
80008a66:	18 03       	add	r3,r12
80008a68:	18 33       	cp.w	r3,r12
80008a6a:	c0 43       	brcs	80008a72 <__avr32_udiv64+0x182>
80008a6c:	16 33       	cp.w	r3,r11
80008a6e:	f7 b8 03 01 	sublo	r8,1
80008a72:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008a76:	c6 98       	rjmp	80008b48 <__avr32_udiv64+0x258>
80008a78:	16 39       	cp.w	r9,r11
80008a7a:	e0 8b 00 65 	brhi	80008b44 <__avr32_udiv64+0x254>
80008a7e:	f2 09 12 00 	clz	r9,r9
80008a82:	c0 b1       	brne	80008a98 <__avr32_udiv64+0x1a8>
80008a84:	10 3a       	cp.w	r10,r8
80008a86:	5f 2a       	srhs	r10
80008a88:	1c 3b       	cp.w	r11,lr
80008a8a:	5f b8       	srhi	r8
80008a8c:	10 4a       	or	r10,r8
80008a8e:	f2 0a 18 00 	cp.b	r10,r9
80008a92:	c5 90       	breq	80008b44 <__avr32_udiv64+0x254>
80008a94:	30 18       	mov	r8,1
80008a96:	c5 98       	rjmp	80008b48 <__avr32_udiv64+0x258>
80008a98:	f0 09 09 46 	lsl	r6,r8,r9
80008a9c:	f2 03 11 20 	rsub	r3,r9,32
80008aa0:	fc 09 09 4e 	lsl	lr,lr,r9
80008aa4:	f0 03 0a 48 	lsr	r8,r8,r3
80008aa8:	f6 09 09 4c 	lsl	r12,r11,r9
80008aac:	f4 03 0a 42 	lsr	r2,r10,r3
80008ab0:	ef 46 ff f4 	st.w	r7[-12],r6
80008ab4:	f6 03 0a 43 	lsr	r3,r11,r3
80008ab8:	18 42       	or	r2,r12
80008aba:	f1 ee 10 0c 	or	r12,r8,lr
80008abe:	f8 01 16 10 	lsr	r1,r12,0x10
80008ac2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008ac6:	e6 01 0d 04 	divu	r4,r3,r1
80008aca:	e4 03 16 10 	lsr	r3,r2,0x10
80008ace:	08 9e       	mov	lr,r4
80008ad0:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008ad4:	e8 06 02 48 	mul	r8,r4,r6
80008ad8:	10 33       	cp.w	r3,r8
80008ada:	c0 a2       	brcc	80008aee <__avr32_udiv64+0x1fe>
80008adc:	20 1e       	sub	lr,1
80008ade:	18 03       	add	r3,r12
80008ae0:	18 33       	cp.w	r3,r12
80008ae2:	c0 63       	brcs	80008aee <__avr32_udiv64+0x1fe>
80008ae4:	10 33       	cp.w	r3,r8
80008ae6:	f7 be 03 01 	sublo	lr,1
80008aea:	e7 dc e3 03 	addcs	r3,r3,r12
80008aee:	10 13       	sub	r3,r8
80008af0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008af4:	e6 01 0d 00 	divu	r0,r3,r1
80008af8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008afc:	00 98       	mov	r8,r0
80008afe:	e0 06 02 46 	mul	r6,r0,r6
80008b02:	0c 3b       	cp.w	r11,r6
80008b04:	c0 a2       	brcc	80008b18 <__avr32_udiv64+0x228>
80008b06:	20 18       	sub	r8,1
80008b08:	18 0b       	add	r11,r12
80008b0a:	18 3b       	cp.w	r11,r12
80008b0c:	c0 63       	brcs	80008b18 <__avr32_udiv64+0x228>
80008b0e:	0c 3b       	cp.w	r11,r6
80008b10:	f7 dc e3 0b 	addcs	r11,r11,r12
80008b14:	f7 b8 03 01 	sublo	r8,1
80008b18:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008b1c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008b20:	0c 1b       	sub	r11,r6
80008b22:	f0 04 06 42 	mulu.d	r2,r8,r4
80008b26:	06 95       	mov	r5,r3
80008b28:	16 35       	cp.w	r5,r11
80008b2a:	e0 8b 00 0a 	brhi	80008b3e <__avr32_udiv64+0x24e>
80008b2e:	5f 0b       	sreq	r11
80008b30:	f4 09 09 49 	lsl	r9,r10,r9
80008b34:	12 32       	cp.w	r2,r9
80008b36:	5f b9       	srhi	r9
80008b38:	f7 e9 00 09 	and	r9,r11,r9
80008b3c:	c0 60       	breq	80008b48 <__avr32_udiv64+0x258>
80008b3e:	20 18       	sub	r8,1
80008b40:	30 09       	mov	r9,0
80008b42:	c0 38       	rjmp	80008b48 <__avr32_udiv64+0x258>
80008b44:	30 09       	mov	r9,0
80008b46:	12 98       	mov	r8,r9
80008b48:	10 9a       	mov	r10,r8
80008b4a:	12 93       	mov	r3,r9
80008b4c:	10 92       	mov	r2,r8
80008b4e:	12 9b       	mov	r11,r9
80008b50:	2f dd       	sub	sp,-12
80008b52:	d8 32       	popm	r0-r7,pc

80008b54 <__avr32_umod64>:
80008b54:	d4 31       	pushm	r0-r7,lr
80008b56:	1a 97       	mov	r7,sp
80008b58:	20 3d       	sub	sp,12
80008b5a:	10 9c       	mov	r12,r8
80008b5c:	12 95       	mov	r5,r9
80008b5e:	14 9e       	mov	lr,r10
80008b60:	16 91       	mov	r1,r11
80008b62:	16 96       	mov	r6,r11
80008b64:	58 09       	cp.w	r9,0
80008b66:	e0 81 00 81 	brne	80008c68 <__avr32_umod64+0x114>
80008b6a:	16 38       	cp.w	r8,r11
80008b6c:	e0 88 00 12 	brls	80008b90 <__avr32_umod64+0x3c>
80008b70:	f0 08 12 00 	clz	r8,r8
80008b74:	c4 e0       	breq	80008c10 <__avr32_umod64+0xbc>
80008b76:	f6 08 09 46 	lsl	r6,r11,r8
80008b7a:	f8 08 09 4c 	lsl	r12,r12,r8
80008b7e:	f0 0b 11 20 	rsub	r11,r8,32
80008b82:	f4 08 09 4e 	lsl	lr,r10,r8
80008b86:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008b8a:	f7 e6 10 06 	or	r6,r11,r6
80008b8e:	c4 18       	rjmp	80008c10 <__avr32_umod64+0xbc>
80008b90:	58 08       	cp.w	r8,0
80008b92:	c0 51       	brne	80008b9c <__avr32_umod64+0x48>
80008b94:	30 19       	mov	r9,1
80008b96:	f2 08 0d 08 	divu	r8,r9,r8
80008b9a:	10 9c       	mov	r12,r8
80008b9c:	f8 08 12 00 	clz	r8,r12
80008ba0:	c0 31       	brne	80008ba6 <__avr32_umod64+0x52>
80008ba2:	18 16       	sub	r6,r12
80008ba4:	c3 68       	rjmp	80008c10 <__avr32_umod64+0xbc>
80008ba6:	f0 03 11 20 	rsub	r3,r8,32
80008baa:	f4 03 0a 4b 	lsr	r11,r10,r3
80008bae:	f8 08 09 4c 	lsl	r12,r12,r8
80008bb2:	ec 08 09 49 	lsl	r9,r6,r8
80008bb6:	ec 03 0a 43 	lsr	r3,r6,r3
80008bba:	f7 e9 10 09 	or	r9,r11,r9
80008bbe:	f8 05 16 10 	lsr	r5,r12,0x10
80008bc2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008bc6:	e6 05 0d 02 	divu	r2,r3,r5
80008bca:	f2 0e 16 10 	lsr	lr,r9,0x10
80008bce:	ec 02 02 4b 	mul	r11,r6,r2
80008bd2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008bd6:	16 3e       	cp.w	lr,r11
80008bd8:	c0 72       	brcc	80008be6 <__avr32_umod64+0x92>
80008bda:	18 0e       	add	lr,r12
80008bdc:	18 3e       	cp.w	lr,r12
80008bde:	c0 43       	brcs	80008be6 <__avr32_umod64+0x92>
80008be0:	16 3e       	cp.w	lr,r11
80008be2:	fd dc e3 0e 	addcs	lr,lr,r12
80008be6:	fc 0b 01 03 	sub	r3,lr,r11
80008bea:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008bee:	e6 05 0d 02 	divu	r2,r3,r5
80008bf2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008bf6:	a5 36       	mul	r6,r2
80008bf8:	0c 39       	cp.w	r9,r6
80008bfa:	c0 72       	brcc	80008c08 <__avr32_umod64+0xb4>
80008bfc:	18 09       	add	r9,r12
80008bfe:	18 39       	cp.w	r9,r12
80008c00:	c0 43       	brcs	80008c08 <__avr32_umod64+0xb4>
80008c02:	0c 39       	cp.w	r9,r6
80008c04:	f3 dc e3 09 	addcs	r9,r9,r12
80008c08:	f2 06 01 06 	sub	r6,r9,r6
80008c0c:	f4 08 09 4e 	lsl	lr,r10,r8
80008c10:	f8 0a 16 10 	lsr	r10,r12,0x10
80008c14:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008c18:	ec 0a 0d 02 	divu	r2,r6,r10
80008c1c:	fc 09 16 10 	lsr	r9,lr,0x10
80008c20:	ea 02 02 4b 	mul	r11,r5,r2
80008c24:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008c28:	16 39       	cp.w	r9,r11
80008c2a:	c0 72       	brcc	80008c38 <__avr32_umod64+0xe4>
80008c2c:	18 09       	add	r9,r12
80008c2e:	18 39       	cp.w	r9,r12
80008c30:	c0 43       	brcs	80008c38 <__avr32_umod64+0xe4>
80008c32:	16 39       	cp.w	r9,r11
80008c34:	f3 dc e3 09 	addcs	r9,r9,r12
80008c38:	f2 0b 01 0b 	sub	r11,r9,r11
80008c3c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008c40:	f6 0a 0d 0a 	divu	r10,r11,r10
80008c44:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008c48:	ea 0a 02 4a 	mul	r10,r5,r10
80008c4c:	14 3e       	cp.w	lr,r10
80008c4e:	c0 72       	brcc	80008c5c <__avr32_umod64+0x108>
80008c50:	18 0e       	add	lr,r12
80008c52:	18 3e       	cp.w	lr,r12
80008c54:	c0 43       	brcs	80008c5c <__avr32_umod64+0x108>
80008c56:	14 3e       	cp.w	lr,r10
80008c58:	fd dc e3 0e 	addcs	lr,lr,r12
80008c5c:	fc 0a 01 0a 	sub	r10,lr,r10
80008c60:	30 0b       	mov	r11,0
80008c62:	f4 08 0a 4a 	lsr	r10,r10,r8
80008c66:	c7 b8       	rjmp	80008d5c <__avr32_umod64+0x208>
80008c68:	16 39       	cp.w	r9,r11
80008c6a:	e0 8b 00 79 	brhi	80008d5c <__avr32_umod64+0x208>
80008c6e:	f2 09 12 00 	clz	r9,r9
80008c72:	c1 21       	brne	80008c96 <__avr32_umod64+0x142>
80008c74:	10 3a       	cp.w	r10,r8
80008c76:	5f 2b       	srhs	r11
80008c78:	0a 31       	cp.w	r1,r5
80008c7a:	5f ba       	srhi	r10
80008c7c:	f7 ea 10 0a 	or	r10,r11,r10
80008c80:	f2 0a 18 00 	cp.b	r10,r9
80008c84:	c0 60       	breq	80008c90 <__avr32_umod64+0x13c>
80008c86:	fc 08 01 0c 	sub	r12,lr,r8
80008c8a:	e2 05 01 46 	sbc	r6,r1,r5
80008c8e:	18 9e       	mov	lr,r12
80008c90:	0c 9b       	mov	r11,r6
80008c92:	1c 9a       	mov	r10,lr
80008c94:	c6 48       	rjmp	80008d5c <__avr32_umod64+0x208>
80008c96:	ea 09 09 4c 	lsl	r12,r5,r9
80008c9a:	f2 06 11 20 	rsub	r6,r9,32
80008c9e:	f6 09 09 4b 	lsl	r11,r11,r9
80008ca2:	f0 09 09 42 	lsl	r2,r8,r9
80008ca6:	ef 46 ff f4 	st.w	r7[-12],r6
80008caa:	f0 06 0a 48 	lsr	r8,r8,r6
80008cae:	18 48       	or	r8,r12
80008cb0:	e2 06 0a 4c 	lsr	r12,r1,r6
80008cb4:	f4 09 09 43 	lsl	r3,r10,r9
80008cb8:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008cbc:	f4 06 0a 4a 	lsr	r10,r10,r6
80008cc0:	16 4a       	or	r10,r11
80008cc2:	f0 0b 16 10 	lsr	r11,r8,0x10
80008cc6:	f8 0b 0d 04 	divu	r4,r12,r11
80008cca:	f4 0c 16 10 	lsr	r12,r10,0x10
80008cce:	08 91       	mov	r1,r4
80008cd0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008cd4:	e8 0e 02 46 	mul	r6,r4,lr
80008cd8:	0c 3c       	cp.w	r12,r6
80008cda:	c0 a2       	brcc	80008cee <__avr32_umod64+0x19a>
80008cdc:	20 11       	sub	r1,1
80008cde:	10 0c       	add	r12,r8
80008ce0:	10 3c       	cp.w	r12,r8
80008ce2:	c0 63       	brcs	80008cee <__avr32_umod64+0x19a>
80008ce4:	0c 3c       	cp.w	r12,r6
80008ce6:	f7 b1 03 01 	sublo	r1,1
80008cea:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008cee:	0c 1c       	sub	r12,r6
80008cf0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008cf4:	f8 0b 0d 04 	divu	r4,r12,r11
80008cf8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008cfc:	08 96       	mov	r6,r4
80008cfe:	e8 0e 02 4e 	mul	lr,r4,lr
80008d02:	1c 3b       	cp.w	r11,lr
80008d04:	c0 a2       	brcc	80008d18 <__avr32_umod64+0x1c4>
80008d06:	20 16       	sub	r6,1
80008d08:	10 0b       	add	r11,r8
80008d0a:	10 3b       	cp.w	r11,r8
80008d0c:	c0 63       	brcs	80008d18 <__avr32_umod64+0x1c4>
80008d0e:	1c 3b       	cp.w	r11,lr
80008d10:	f7 b6 03 01 	sublo	r6,1
80008d14:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008d18:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008d1c:	1c 1b       	sub	r11,lr
80008d1e:	e2 02 06 40 	mulu.d	r0,r1,r2
80008d22:	00 9e       	mov	lr,r0
80008d24:	02 9c       	mov	r12,r1
80008d26:	16 3c       	cp.w	r12,r11
80008d28:	e0 8b 00 08 	brhi	80008d38 <__avr32_umod64+0x1e4>
80008d2c:	5f 06       	sreq	r6
80008d2e:	06 30       	cp.w	r0,r3
80008d30:	5f ba       	srhi	r10
80008d32:	ed ea 00 0a 	and	r10,r6,r10
80008d36:	c0 60       	breq	80008d42 <__avr32_umod64+0x1ee>
80008d38:	fc 02 01 04 	sub	r4,lr,r2
80008d3c:	f8 08 01 4c 	sbc	r12,r12,r8
80008d40:	08 9e       	mov	lr,r4
80008d42:	e6 0e 01 0a 	sub	r10,r3,lr
80008d46:	f6 0c 01 4c 	sbc	r12,r11,r12
80008d4a:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008d4e:	f8 09 0a 4b 	lsr	r11,r12,r9
80008d52:	f4 09 0a 4a 	lsr	r10,r10,r9
80008d56:	f8 01 09 4c 	lsl	r12,r12,r1
80008d5a:	18 4a       	or	r10,r12
80008d5c:	2f dd       	sub	sp,-12
80008d5e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008e00:	c0 08       	rjmp	80008e00 <_evba>
	...

80008e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008e04:	c0 08       	rjmp	80008e04 <_handle_TLB_Multiple_Hit>
	...

80008e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008e08:	c0 08       	rjmp	80008e08 <_handle_Bus_Error_Data_Fetch>
	...

80008e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008e0c:	c0 08       	rjmp	80008e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008e10:	c0 08       	rjmp	80008e10 <_handle_NMI>
	...

80008e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008e14:	c0 08       	rjmp	80008e14 <_handle_Instruction_Address>
	...

80008e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008e18:	c0 08       	rjmp	80008e18 <_handle_ITLB_Protection>
	...

80008e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008e1c:	c0 08       	rjmp	80008e1c <_handle_Breakpoint>
	...

80008e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008e20:	c0 08       	rjmp	80008e20 <_handle_Illegal_Opcode>
	...

80008e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008e24:	c0 08       	rjmp	80008e24 <_handle_Unimplemented_Instruction>
	...

80008e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008e28:	c0 08       	rjmp	80008e28 <_handle_Privilege_Violation>
	...

80008e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008e2c:	c0 08       	rjmp	80008e2c <_handle_Floating_Point>
	...

80008e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008e30:	c0 08       	rjmp	80008e30 <_handle_Coprocessor_Absent>
	...

80008e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008e34:	c0 08       	rjmp	80008e34 <_handle_Data_Address_Read>
	...

80008e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008e38:	c0 08       	rjmp	80008e38 <_handle_Data_Address_Write>
	...

80008e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008e3c:	c0 08       	rjmp	80008e3c <_handle_DTLB_Protection_Read>
	...

80008e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008e40:	c0 08       	rjmp	80008e40 <_handle_DTLB_Protection_Write>
	...

80008e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008e44:	c0 08       	rjmp	80008e44 <_handle_DTLB_Modified>
	...

80008e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008e50:	c0 08       	rjmp	80008e50 <_handle_ITLB_Miss>
	...

80008e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008e60:	c0 08       	rjmp	80008e60 <_handle_DTLB_Miss_Read>
	...

80008e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008e70:	c0 08       	rjmp	80008e70 <_handle_DTLB_Miss_Write>
	...

80008f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008f00:	c0 08       	rjmp	80008f00 <_handle_Supervisor_Call>
80008f02:	d7 03       	nop

80008f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f04:	30 0c       	mov	r12,0
80008f06:	fe b0 d0 ab 	rcall	8000305c <_get_interrupt_handler>
80008f0a:	58 0c       	cp.w	r12,0
80008f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f10:	d6 03       	rete

80008f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f12:	30 1c       	mov	r12,1
80008f14:	fe b0 d0 a4 	rcall	8000305c <_get_interrupt_handler>
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f1e:	d6 03       	rete

80008f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f20:	30 2c       	mov	r12,2
80008f22:	fe b0 d0 9d 	rcall	8000305c <_get_interrupt_handler>
80008f26:	58 0c       	cp.w	r12,0
80008f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f2c:	d6 03       	rete

80008f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f2e:	30 3c       	mov	r12,3
80008f30:	fe b0 d0 96 	rcall	8000305c <_get_interrupt_handler>
80008f34:	58 0c       	cp.w	r12,0
80008f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f3a:	d6 03       	rete
80008f3c:	d7 03       	nop
80008f3e:	d7 03       	nop
80008f40:	d7 03       	nop
80008f42:	d7 03       	nop
80008f44:	d7 03       	nop
80008f46:	d7 03       	nop
80008f48:	d7 03       	nop
80008f4a:	d7 03       	nop
80008f4c:	d7 03       	nop
80008f4e:	d7 03       	nop
80008f50:	d7 03       	nop
80008f52:	d7 03       	nop
80008f54:	d7 03       	nop
80008f56:	d7 03       	nop
80008f58:	d7 03       	nop
80008f5a:	d7 03       	nop
80008f5c:	d7 03       	nop
80008f5e:	d7 03       	nop
80008f60:	d7 03       	nop
80008f62:	d7 03       	nop
80008f64:	d7 03       	nop
80008f66:	d7 03       	nop
80008f68:	d7 03       	nop
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	d7 03       	nop
80008f70:	d7 03       	nop
80008f72:	d7 03       	nop
80008f74:	d7 03       	nop
80008f76:	d7 03       	nop
80008f78:	d7 03       	nop
80008f7a:	d7 03       	nop
80008f7c:	d7 03       	nop
80008f7e:	d7 03       	nop
80008f80:	d7 03       	nop
80008f82:	d7 03       	nop
80008f84:	d7 03       	nop
80008f86:	d7 03       	nop
80008f88:	d7 03       	nop
80008f8a:	d7 03       	nop
80008f8c:	d7 03       	nop
80008f8e:	d7 03       	nop
80008f90:	d7 03       	nop
80008f92:	d7 03       	nop
80008f94:	d7 03       	nop
80008f96:	d7 03       	nop
80008f98:	d7 03       	nop
80008f9a:	d7 03       	nop
80008f9c:	d7 03       	nop
80008f9e:	d7 03       	nop
80008fa0:	d7 03       	nop
80008fa2:	d7 03       	nop
80008fa4:	d7 03       	nop
80008fa6:	d7 03       	nop
80008fa8:	d7 03       	nop
80008faa:	d7 03       	nop
80008fac:	d7 03       	nop
80008fae:	d7 03       	nop
80008fb0:	d7 03       	nop
80008fb2:	d7 03       	nop
80008fb4:	d7 03       	nop
80008fb6:	d7 03       	nop
80008fb8:	d7 03       	nop
80008fba:	d7 03       	nop
80008fbc:	d7 03       	nop
80008fbe:	d7 03       	nop
80008fc0:	d7 03       	nop
80008fc2:	d7 03       	nop
80008fc4:	d7 03       	nop
80008fc6:	d7 03       	nop
80008fc8:	d7 03       	nop
80008fca:	d7 03       	nop
80008fcc:	d7 03       	nop
80008fce:	d7 03       	nop
80008fd0:	d7 03       	nop
80008fd2:	d7 03       	nop
80008fd4:	d7 03       	nop
80008fd6:	d7 03       	nop
80008fd8:	d7 03       	nop
80008fda:	d7 03       	nop
80008fdc:	d7 03       	nop
80008fde:	d7 03       	nop
80008fe0:	d7 03       	nop
80008fe2:	d7 03       	nop
80008fe4:	d7 03       	nop
80008fe6:	d7 03       	nop
80008fe8:	d7 03       	nop
80008fea:	d7 03       	nop
80008fec:	d7 03       	nop
80008fee:	d7 03       	nop
80008ff0:	d7 03       	nop
80008ff2:	d7 03       	nop
80008ff4:	d7 03       	nop
80008ff6:	d7 03       	nop
80008ff8:	d7 03       	nop
80008ffa:	d7 03       	nop
80008ffc:	d7 03       	nop
80008ffe:	d7 03       	nop
