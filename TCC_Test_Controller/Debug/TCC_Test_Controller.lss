
TCC_Test_Controller.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d64  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008e00  80008e00  00009200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000205c  80009000  80009000  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000b05c  8000b05c  0000b45c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000504  00000008  8000b060  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  0000050c  8000b564  0000bd0c  2**0
                  ALLOC
  9 .bss          00000358  00000510  00000510  00000000  2**2
                  ALLOC
 10 .heap         0000e798  00000868  00000868  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000bd0c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000e00  00000000  00000000  0000bd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00001d9c  00000000  00000000  0000cb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0002c52f  00000000  00000000  0000e8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000057c0  00000000  00000000  0003ae0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ff5f  00000000  00000000  000405cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000022ec  00000000  00000000  0005052c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005969  00000000  00000000  00052818  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000a9d6  00000000  00000000  00058181  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00fa27c5  00000000  00000000  00062b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000f00  00000000  00000000  01005320  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cd 58 	sub	pc,pc,-12968

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf ed 5c 	sub	pc,pc,-4772

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 10       	ld.sh	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 24       	ld.uh	r4,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 1c       	ld.sh	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 28       	ld.uh	r8,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 14       	ld.sh	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 18       	ld.sh	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 30       	ld.ub	r0,r2++
800020dc:	00 00       	add	r0,r0
800020de:	05 20       	ld.uh	r0,r2++
800020e0:	00 00       	add	r0,r0
800020e2:	05 2c       	ld.uh	r12,r2++

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c2 18       	rjmp	8000213c <twim_set_speed+0x58>
800020fc:	30 09       	mov	r9,0
800020fe:	30 16       	mov	r6,1
80002100:	30 7a       	mov	r10,7
80002102:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80002104:	2f f9       	sub	r9,-1
80002106:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002108:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000210a:	e0 48 00 ff 	cp.w	r8,255
8000210e:	f9 be 0b 01 	movhi	lr,1
80002112:	f9 be 08 00 	movls	lr,0
80002116:	f2 0a 18 00 	cp.b	r10,r9
8000211a:	ec 0b 17 20 	movhs	r11,r6
8000211e:	f9 bb 03 00 	movlo	r11,0
80002122:	fd eb 00 0b 	and	r11,lr,r11
80002126:	ee 0b 18 00 	cp.b	r11,r7
8000212a:	ce d1       	brne	80002104 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000212c:	30 7a       	mov	r10,7
8000212e:	f4 09 18 00 	cp.b	r9,r10
80002132:	e0 88 00 05 	brls	8000213c <twim_set_speed+0x58>
80002136:	3f 8c       	mov	r12,-8
80002138:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000213c:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002140:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002144:	14 18       	sub	r8,r10
80002146:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000214a:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000214e:	99 19       	st.w	r12[0x4],r9
80002150:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80002154 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002154:	48 38       	lddpc	r8,80002160 <twim_status+0xc>
80002156:	70 08       	ld.w	r8,r8[0x0]
80002158:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000215a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000215e:	5e fc       	retal	r12
80002160:	00 00       	add	r0,r0
80002162:	05 10       	ld.sh	r0,r2++

80002164 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002164:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002168:	e6 18 00 01 	andh	r8,0x1,COH
8000216c:	c0 21       	brne	80002170 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000216e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002170:	3f f8       	mov	r8,-1
80002172:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002174:	99 b8       	st.w	r12[0x2c],r8
}
80002176:	5e fc       	retal	r12

80002178 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002178:	eb cd 40 fe 	pushm	r1-r7,lr
8000217c:	18 97       	mov	r7,r12
8000217e:	16 93       	mov	r3,r11
80002180:	14 95       	mov	r5,r10
80002182:	12 92       	mov	r2,r9
80002184:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002186:	30 14       	mov	r4,1
80002188:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000218a:	e0 68 00 80 	mov	r8,128
8000218e:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002190:	30 28       	mov	r8,2
80002192:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002194:	49 e6       	lddpc	r6,8000220c <twim_write+0x94>
80002196:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002198:	f0 1f 00 1e 	mcall	80002210 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000219c:	49 e8       	lddpc	r8,80002214 <twim_write+0x9c>
8000219e:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800021a0:	49 e8       	lddpc	r8,80002218 <twim_write+0xa0>
800021a2:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800021a4:	30 09       	mov	r9,0
800021a6:	49 e8       	lddpc	r8,8000221c <twim_write+0xa4>
800021a8:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800021aa:	49 e9       	lddpc	r9,80002220 <twim_write+0xa8>
800021ac:	30 08       	mov	r8,0
800021ae:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021b0:	6c 08       	ld.w	r8,r6[0x0]
800021b2:	b1 65       	lsl	r5,0x10
800021b4:	e8 15 e0 00 	orl	r5,0xe000
800021b8:	eb e2 10 12 	or	r2,r5,r2<<0x1
800021bc:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
800021c0:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021c2:	49 9a       	lddpc	r10,80002224 <twim_write+0xac>
800021c4:	e0 6b 03 02 	mov	r11,770
800021c8:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021ca:	74 0a       	ld.w	r10,r10[0x0]
800021cc:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021ce:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
800021d0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d2:	72 08       	ld.w	r8,r9[0x0]
800021d4:	58 08       	cp.w	r8,0
800021d6:	c0 80       	breq	800021e6 <twim_write+0x6e>
800021d8:	c0 b8       	rjmp	800021ee <twim_write+0x76>
		cpu_relax();
800021da:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021de:	6c 08       	ld.w	r8,r6[0x0]
800021e0:	58 08       	cp.w	r8,0
800021e2:	c0 30       	breq	800021e8 <twim_write+0x70>
800021e4:	c0 58       	rjmp	800021ee <twim_write+0x76>
800021e6:	48 f6       	lddpc	r6,80002220 <twim_write+0xa8>
800021e8:	f0 1f 00 10 	mcall	80002228 <twim_write+0xb0>
800021ec:	cf 70       	breq	800021da <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800021ee:	30 28       	mov	r8,2
800021f0:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021f2:	48 c8       	lddpc	r8,80002220 <twim_write+0xa8>
800021f4:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021f6:	5b c8       	cp.w	r8,-4
800021f8:	c0 70       	breq	80002206 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021fa:	48 a8       	lddpc	r8,80002220 <twim_write+0xa8>
800021fc:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021fe:	5b e8       	cp.w	r8,-2
80002200:	c0 30       	breq	80002206 <twim_write+0x8e>
80002202:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002206:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000220a:	00 00       	add	r0,r0
8000220c:	00 00       	add	r0,r0
8000220e:	05 10       	ld.sh	r0,r2++
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 64       	sub	r4,22
80002214:	00 00       	add	r0,r0
80002216:	05 20       	ld.uh	r0,r2++
80002218:	00 00       	add	r0,r0
8000221a:	05 30       	ld.ub	r0,r2++
8000221c:	00 00       	add	r0,r0
8000221e:	05 28       	ld.uh	r8,r2++
80002220:	00 00       	add	r0,r0
80002222:	05 1c       	ld.sh	r12,r2++
80002224:	00 00       	add	r0,r0
80002226:	05 24       	ld.uh	r4,r2++
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	21 54       	sub	r4,21

8000222c <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8000222c:	d4 01       	pushm	lr
8000222e:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002230:	30 08       	mov	r8,0
80002232:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002234:	30 08       	mov	r8,0
80002236:	16 99       	mov	r9,r11
80002238:	10 9a       	mov	r10,r8
8000223a:	1a 9b       	mov	r11,sp
8000223c:	f0 1f 00 02 	mcall	80002244 <twim_probe+0x18>
}
80002240:	2f fd       	sub	sp,-4
80002242:	d8 02       	popm	pc
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	21 78       	sub	r8,23

80002248 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002248:	eb cd 40 e0 	pushm	r5-r7,lr
8000224c:	18 97       	mov	r7,r12
8000224e:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002250:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002254:	30 0a       	mov	r10,0
80002256:	4a 69       	lddpc	r9,800022ec <twim_master_init+0xa4>
80002258:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8000225a:	e6 18 00 01 	andh	r8,0x1,COH
8000225e:	c0 b1       	brne	80002274 <twim_master_init+0x2c>
		cpu_irq_disable ();
80002260:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002262:	3f f8       	mov	r8,-1
80002264:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002266:	30 18       	mov	r8,1
80002268:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226a:	e0 68 00 80 	mov	r8,128
8000226e:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002270:	d5 03       	csrf	0x10
80002272:	c0 88       	rjmp	80002282 <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002274:	3f f8       	mov	r8,-1
80002276:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002278:	30 18       	mov	r8,1
8000227a:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000227c:	e0 68 00 80 	mov	r8,128
80002280:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002282:	3f f8       	mov	r8,-1
80002284:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002286:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000228a:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
8000228c:	30 1a       	mov	r10,1
8000228e:	e0 6b 03 20 	mov	r11,800
80002292:	49 8c       	lddpc	r12,800022f0 <twim_master_init+0xa8>
80002294:	f0 1f 00 18 	mcall	800022f4 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002298:	e6 16 00 01 	andh	r6,0x1,COH
8000229c:	c0 21       	brne	800022a0 <twim_master_init+0x58>
      cpu_irq_enable();
8000229e:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800022a0:	eb 39 00 0c 	ld.ub	r9,r5[12]
800022a4:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800022a6:	f0 09 18 00 	cp.b	r9,r8
800022aa:	f9 b8 01 10 	movne	r8,16
800022ae:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800022b2:	f9 b8 01 ff 	movne	r8,-1
800022b6:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800022ba:	6a 0a       	ld.w	r10,r5[0x0]
800022bc:	6a 1b       	ld.w	r11,r5[0x4]
800022be:	0e 9c       	mov	r12,r7
800022c0:	f0 1f 00 0e 	mcall	800022f8 <twim_master_init+0xb0>
800022c4:	5b 8c       	cp.w	r12,-8
800022c6:	c1 00       	breq	800022e6 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800022c8:	6a 2b       	ld.w	r11,r5[0x8]
800022ca:	0e 9c       	mov	r12,r7
800022cc:	f0 1f 00 0c 	mcall	800022fc <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d0:	48 78       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022d4:	5b c8       	cp.w	r8,-4
800022d6:	c0 70       	breq	800022e4 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d8:	48 58       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022dc:	5b e8       	cp.w	r8,-2
800022de:	c0 30       	breq	800022e4 <twim_master_init+0x9c>
800022e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800022e4:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800022e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022ea:	00 00       	add	r0,r0
800022ec:	00 00       	add	r0,r0
800022ee:	05 1c       	ld.sh	r12,r2++
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	20 08       	sub	r8,0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	2f a8       	sub	r8,-6
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	20 e4       	sub	r4,14
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	22 2c       	sub	r12,34

80002300 <twis_slave_interrupt_handler>:
/**
 * \internal
 * \brief TWIS interrupt handler
 */
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
80002300:	eb cd 40 e0 	pushm	r5-r7,lr
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
80002304:	4c 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002306:	70 06       	ld.w	r6,r8[0x0]
80002308:	6c 65       	ld.w	r5,r6[0x18]
	unsigned long enabled = twis_inst_slave->imr;
8000230a:	6c 97       	ld.w	r7,r6[0x24]
	unsigned long pending = status & enabled;

	// An error has occurred, set only address match active and return
	if (status & AVR32_TWIS_SR_ERROR_MASK) {
8000230c:	0a 98       	mov	r8,r5
8000230e:	e2 18 70 c0 	andl	r8,0x70c0,COH
80002312:	c0 b0       	breq	80002328 <twis_slave_interrupt_handler+0x28>
		twis_inst_slave->idr = ~0UL;
80002314:	3f f8       	mov	r8,-1
80002316:	8d 88       	st.w	r6[0x20],r8
		twis_inst_slave->scr = ~0UL;
80002318:	8d a8       	st.w	r6[0x28],r8
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
8000231a:	e0 78 00 00 	mov	r8,65536
8000231e:	8d 78       	st.w	r6[0x1c],r8

		twis_slave_fct.stop();
80002320:	4b a8       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
80002322:	70 28       	ld.w	r8,r8[0x8]
80002324:	5d 18       	icall	r8

		return;
80002326:	c6 b8       	rjmp	800023fc <twis_slave_interrupt_handler+0xfc>
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
	unsigned long enabled = twis_inst_slave->imr;
	unsigned long pending = status & enabled;
80002328:	0a 67       	and	r7,r5

		return;
	}

	// Check if the slave address match flag is raised
	if (pending & AVR32_TWIS_IER_SAM_MASK) {
8000232a:	0e 98       	mov	r8,r7
8000232c:	e6 18 00 01 	andh	r8,0x1,COH
80002330:	c2 70       	breq	8000237e <twis_slave_interrupt_handler+0x7e>
		// Ignore repeated start and transmission complete flags
		if (pending & (AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK)) {
80002332:	0e 98       	mov	r8,r7
80002334:	e4 18 00 40 	andh	r8,0x40
80002338:	e0 18 00 08 	andl	r8,0x8
8000233c:	c0 60       	breq	80002348 <twis_slave_interrupt_handler+0x48>
			twis_inst_slave->scr = (AVR32_TWIS_SCR_REP_MASK |
8000233e:	30 88       	mov	r8,8
80002340:	ea 18 00 40 	orh	r8,0x40
80002344:	8d a8       	st.w	r6[0x28],r8
					AVR32_TWIS_SCR_TCOMP_MASK);
			twis_inst_slave->idr = (AVR32_TWIS_IDR_REP_MASK |
80002346:	8d 88       	st.w	r6[0x20],r8
					AVR32_TWIS_IDR_TCOMP_MASK);
		}
		pending &= ~(AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK);
80002348:	e4 17 ff bf 	andh	r7,0xffbf
8000234c:	e0 17 ff f7 	andl	r7,0xfff7

		// Enable error handling
		twis_inst_slave->ier = AVR32_TWIS_SR_ERROR_MASK;
80002350:	e0 68 70 c0 	mov	r8,28864
80002354:	8d 78       	st.w	r6[0x1c],r8

		// Check if the slave should be in receive or transmit mode
		if (status & AVR32_TWIS_SR_TRA_MASK) {
80002356:	0a 98       	mov	r8,r5
80002358:	e2 18 00 20 	andl	r8,0x20,COH
8000235c:	c0 d0       	breq	80002376 <twis_slave_interrupt_handler+0x76>
			// Transmit mode
			twis_inst_slave->scr = AVR32_TWIS_SR_BTF_MASK;
8000235e:	fc 18 00 80 	movh	r8,0x80
80002362:	8d a8       	st.w	r6[0x28],r8
			twis_inst_slave->ier = AVR32_TWIS_IER_BTF_MASK
80002364:	30 88       	mov	r8,8
80002366:	ea 18 00 80 	orh	r8,0x80
8000236a:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_TCOMP_MASK;
			twis_inst_slave->thr = twis_slave_fct.tx();
8000236c:	4a 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000236e:	70 1c       	ld.w	r12,r8[0x4]
80002370:	5d 1c       	icall	r12
80002372:	8d 4c       	st.w	r6[0x10],r12
80002374:	c0 58       	rjmp	8000237e <twis_slave_interrupt_handler+0x7e>
		} else {
			// Receive mode
			twis_inst_slave->ier = AVR32_TWIS_IER_RXRDY_MASK
80002376:	30 98       	mov	r8,9
80002378:	ea 18 00 40 	orh	r8,0x40
8000237c:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_REP_MASK;
		}
	}

	// Check if there is data ready to be read in the data receive register
	if (pending & AVR32_TWIS_IER_RXRDY_MASK) {
8000237e:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80002382:	c0 80       	breq	80002392 <twis_slave_interrupt_handler+0x92>
		// Call user specific receive function
		twis_slave_fct.rx(twis_inst_slave->rhr);
80002384:	4a 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002386:	70 08       	ld.w	r8,r8[0x0]
80002388:	70 3c       	ld.w	r12,r8[0xc]
8000238a:	4a 08       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000238c:	70 08       	ld.w	r8,r8[0x0]
8000238e:	5c 5c       	castu.b	r12
80002390:	5d 18       	icall	r8
	}

	// Check if the transmit ready flag is raised
	if (pending & AVR32_TWIS_SR_BTF_MASK) {
80002392:	0e 98       	mov	r8,r7
80002394:	e6 18 00 80 	andh	r8,0x80,COH
80002398:	c1 80       	breq	800023c8 <twis_slave_interrupt_handler+0xc8>
		if (status & AVR32_TWIS_SR_NAK_MASK) {
8000239a:	e2 15 01 00 	andl	r5,0x100,COH
8000239e:	c0 f0       	breq	800023bc <twis_slave_interrupt_handler+0xbc>
			twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK;
800023a0:	49 98       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023a2:	70 08       	ld.w	r8,r8[0x0]
800023a4:	fc 19 00 80 	movh	r9,0x80
800023a8:	91 89       	st.w	r8[0x20],r9
			twis_inst_slave->scr = AVR32_TWIS_SCR_BTF_MASK;
800023aa:	91 a9       	st.w	r8[0x28],r9
			twis_inst_slave->ier = AVR32_TWIS_IER_TCOMP_MASK
800023ac:	30 89       	mov	r9,8
800023ae:	ea 19 00 40 	orh	r9,0x40
800023b2:	91 79       	st.w	r8[0x1c],r9
				| AVR32_TWIS_IER_REP_MASK;
			// Clear the NAK
			twis_inst_slave->scr = AVR32_TWIS_SCR_NAK_MASK;
800023b4:	e0 69 01 00 	mov	r9,256
800023b8:	91 a9       	st.w	r8[0x28],r9
800023ba:	c0 78       	rjmp	800023c8 <twis_slave_interrupt_handler+0xc8>
		} else {
			twis_inst_slave->thr = twis_slave_fct.tx();
800023bc:	49 28       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023be:	70 06       	ld.w	r6,r8[0x0]
800023c0:	49 28       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023c2:	70 1c       	ld.w	r12,r8[0x4]
800023c4:	5d 1c       	icall	r12
800023c6:	8d 4c       	st.w	r6[0x10],r12
		}
	}

	// Check if the transmission complete or repeated start flags raised
	if (pending & (AVR32_TWIS_SR_TCOMP_MASK | AVR32_TWIS_SR_REP_MASK)) {
800023c8:	0e 98       	mov	r8,r7
800023ca:	e4 18 00 40 	andh	r8,0x40
800023ce:	e0 18 00 08 	andl	r8,0x8
800023d2:	c1 10       	breq	800023f4 <twis_slave_interrupt_handler+0xf4>
		// Clear transmit complete and repeated start flags
		twis_inst_slave->scr = AVR32_TWIS_SCR_TCOMP_MASK
800023d4:	48 c8       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023d6:	70 08       	ld.w	r8,r8[0x0]
800023d8:	30 89       	mov	r9,8
800023da:	ea 19 00 40 	orh	r9,0x40
800023de:	91 a9       	st.w	r8[0x28],r9
			| AVR32_TWIS_SCR_REP_MASK;
		// Disable transmission ready interrupt
		twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK
800023e0:	30 99       	mov	r9,9
800023e2:	ea 19 00 c0 	orh	r9,0xc0
800023e6:	91 89       	st.w	r8[0x20],r9
			| AVR32_TWIS_IDR_RXRDY_MASK
			| AVR32_TWIS_IDR_TCOMP_MASK
			| AVR32_TWIS_IDR_REP_MASK;
		// Enable slave address match interrupt
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
800023e8:	e0 79 00 00 	mov	r9,65536
800023ec:	91 79       	st.w	r8[0x1c],r9
		// Call user specific stop function
		twis_slave_fct.stop();
800023ee:	48 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023f0:	70 28       	ld.w	r8,r8[0x8]
800023f2:	5d 18       	icall	r8
	 *
	 * Fix/Workaround
	 * Clear SR.NAK only after the Byte Transfer Finished (BTF) bit of the same register has been
	 * set.
	 */
	twis_inst_slave->scr = pending & (~AVR32_TWIS_SCR_NAK_MASK);
800023f4:	48 48       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023f6:	70 08       	ld.w	r8,r8[0x0]
800023f8:	a9 c7       	cbr	r7,0x8
800023fa:	91 a7       	st.w	r8[0x28],r7
	return;
}
800023fc:	e3 cd 40 e0 	ldm	sp++,r5-r7,lr
80002400:	d6 03       	rete
80002402:	00 00       	add	r0,r0
80002404:	00 00       	add	r0,r0
80002406:	05 40       	ld.w	r0,--r2
80002408:	00 00       	add	r0,r0
8000240a:	05 34       	ld.ub	r4,r2++

8000240c <twis_slave_init>:
 *              (see \ref twis_options_t)
 * \param *slave_fct  Pointer on application functions
 */
status_code_t twis_slave_init(volatile avr32_twis_t *twis, const twis_options_t *opt,
		const twis_slave_fct_t *slave_fct)
{
8000240c:	d4 21       	pushm	r4-r7,lr
8000240e:	18 97       	mov	r7,r12
80002410:	16 95       	mov	r5,r11
80002412:	14 94       	mov	r4,r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002414:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002418:	d3 03       	ssrf	0x10
	irqflags_t irq_save;

	irq_save = cpu_irq_save();

	twis->idr = ~0UL;
8000241a:	3f f8       	mov	r8,-1
8000241c:	99 88       	st.w	r12[0x20],r8
	twis->scr = ~0UL;
8000241e:	99 a8       	st.w	r12[0x28],r8

	// Reset the TWIS module
	twis->cr = AVR32_TWIS_CR_SWRST_MASK;
80002420:	e0 68 00 80 	mov	r8,128
80002424:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002426:	12 98       	mov	r8,r9
80002428:	e6 18 00 01 	andh	r8,0x1,COH
8000242c:	c0 21       	brne	80002430 <twis_slave_init+0x24>
      cpu_irq_enable();
8000242e:	d5 03       	csrf	0x10

	cpu_irq_restore(irq_save);

	// Clear the TWIS status register
	twis->scr = ~0UL;;
80002430:	3f f8       	mov	r8,-1
80002432:	8f a8       	st.w	r7[0x28],r8

	// Disable all interrupts
	cpu_irq_disable();
80002434:	d3 03       	ssrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002436:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000243a:	d3 03       	ssrf	0x10

	// register Register twis_slave_interrupt_handler interrupt on level CONF_TWIS_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twis_slave_interrupt_handler,
8000243c:	30 1a       	mov	r10,1
8000243e:	e0 6b 03 60 	mov	r11,864
80002442:	4a 1c       	lddpc	r12,800024c4 <twis_slave_init+0xb8>
80002444:	f0 1f 00 21 	mcall	800024c8 <twis_slave_init+0xbc>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002448:	e6 16 00 01 	andh	r6,0x1,COH
8000244c:	c0 21       	brne	80002450 <twis_slave_init+0x44>
      cpu_irq_enable();
8000244e:	d5 03       	csrf	0x10
			CONF_TWIS_IRQ_LINE, CONF_TWIS_IRQ_LEVEL);
	cpu_irq_restore(flags);

	twis_inst_slave = twis;
80002450:	49 f8       	lddpc	r8,800024cc <twis_slave_init+0xc0>
80002452:	91 07       	st.w	r8[0x0],r7

	// Enable the TWI Slave Module and allow for clock stretching
	twis->cr = AVR32_TWIS_CR_SEN_MASK | AVR32_TWIS_CR_SMATCH_MASK
80002454:	31 58       	mov	r8,21
80002456:	8f 08       	st.w	r7[0x0],r8
	 */
#if AVR32_TWIS_H_VERSION > 120
	twis->cr |= AVR32_TWIS_CR_SOAM_MASK;
#endif

	if (opt->smbus) {
80002458:	eb 39 00 09 	ld.ub	r9,r5[9]
8000245c:	30 08       	mov	r8,0
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 40       	breq	8000246a <twis_slave_init+0x5e>
		twis->cr |= AVR32_TWIS_CR_SMEN_MASK;
80002464:	6e 08       	ld.w	r8,r7[0x0]
80002466:	a1 b8       	sbr	r8,0x1
80002468:	8f 08       	st.w	r7[0x0],r8
	}

	if (opt->tenbit) {
8000246a:	eb 39 00 0a 	ld.ub	r9,r5[10]
8000246e:	30 08       	mov	r8,0
80002470:	f0 09 18 00 	cp.b	r9,r8
80002474:	c0 40       	breq	8000247c <twis_slave_init+0x70>
		twis->cr |= AVR32_TWIS_CR_TENBIT_MASK;
80002476:	6e 08       	ld.w	r8,r7[0x0]
80002478:	bb a8       	sbr	r8,0x1a
8000247a:	8f 08       	st.w	r7[0x0],r8
	}

	// Set slave address
	twis->cr |= (opt->chip << AVR32_TWIS_CR_ADR_OFFSET);
8000247c:	6e 08       	ld.w	r8,r7[0x0]
8000247e:	eb 39 00 08 	ld.ub	r9,r5[8]
80002482:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002486:	8f 08       	st.w	r7[0x0],r8

	// Calculate the wait time from clk falling edge to
	//let the slave control the bus
	uint8_t setup_time = (opt->pba_hz / opt->speed)/7;
	twis->tr = (setup_time << AVR32_TWIS_TR_SUDAT_OFFSET);
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	6a 19       	ld.w	r9,r5[0x4]
8000248c:	f0 09 0d 08 	divu	r8,r8,r9
80002490:	10 9a       	mov	r10,r8
80002492:	e0 69 49 25 	mov	r9,18725
80002496:	ea 19 24 92 	orh	r9,0x2492
8000249a:	f0 09 06 48 	mulu.d	r8,r8,r9
8000249e:	12 1a       	sub	r10,r9
800024a0:	a1 9a       	lsr	r10,0x1
800024a2:	f4 09 00 09 	add	r9,r10,r9
800024a6:	f3 d9 c0 48 	bfextu	r9,r9,0x2,0x8
800024aa:	b1 69       	lsl	r9,0x10
800024ac:	8f 29       	st.w	r7[0x8],r9

	// Get a pointer to user specific functions
	twis_slave_fct = *slave_fct;
800024ae:	48 98       	lddpc	r8,800024d0 <twis_slave_init+0xc4>
800024b0:	e8 ea 00 00 	ld.d	r10,r4[0]
800024b4:	f0 eb 00 00 	st.d	r8[0],r10
800024b8:	68 29       	ld.w	r9,r4[0x8]
800024ba:	91 29       	st.w	r8[0x8],r9

	// Slave Address Match Interrupt Enable
	twis->ier = AVR32_TWIS_IER_SAM_MASK;
800024bc:	e0 78 00 00 	mov	r8,65536
800024c0:	8f 78       	st.w	r7[0x1c],r8

	return STATUS_OK;
}
800024c2:	d8 2a       	popm	r4-r7,pc,r12=0
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	23 00       	sub	r0,48
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	2f a8       	sub	r8,-6
800024cc:	00 00       	add	r0,r0
800024ce:	05 40       	ld.w	r0,--r2
800024d0:	00 00       	add	r0,r0
800024d2:	05 34       	ld.ub	r4,r2++

800024d4 <slaveTransmitterTest>:
		}
	}
}

void slaveTransmitterTest()
{
800024d4:	d4 01       	pushm	lr
	print_dbg("\n\n==============================\nExecutando i2c stx...\n==============================\n");
800024d6:	48 6b       	lddpc	r11,800024ec <slaveTransmitterTest+0x18>
800024d8:	fc 7c 14 00 	mov	r12,-191488
800024dc:	f0 1f 00 05 	mcall	800024f0 <slaveTransmitterTest+0x1c>
	print_dbg("\nFAIL - Nao implementado");
800024e0:	48 5b       	lddpc	r11,800024f4 <slaveTransmitterTest+0x20>
800024e2:	fc 7c 14 00 	mov	r12,-191488
800024e6:	f0 1f 00 03 	mcall	800024f0 <slaveTransmitterTest+0x1c>
}
800024ea:	d8 02       	popm	pc
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	a4 48       	st.h	r2[0x8],r8
800024f0:	80 00       	ld.sh	r0,r0[0x0]
800024f2:	31 8c       	mov	r12,24
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	a4 a0       	st.b	r2[0x2],r0

800024f8 <masterReceiverTest>:
		}
	}
}

void masterReceiverTest()
{
800024f8:	d4 31       	pushm	r0-r7,lr
800024fa:	fa cd 01 04 	sub	sp,sp,260
	print_dbg("\n\n==============================\nExecutando i2c mrx...\n==============================\n");
800024fe:	4a cb       	lddpc	r11,800025ac <masterReceiverTest+0xb4>
80002500:	fc 7c 14 00 	mov	r12,-191488
80002504:	f0 1f 00 2b 	mcall	800025b0 <masterReceiverTest+0xb8>
80002508:	4a b6       	lddpc	r6,800025b4 <masterReceiverTest+0xbc>
8000250a:	2f e6       	sub	r6,-2
8000250c:	30 18       	mov	r8,1
8000250e:	30 07       	mov	r7,0
	cmd_frame_t ansFrame;
	char* text;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_RX)
80002510:	30 24       	mov	r4,2
		{
			sentBytesCount = 0;
80002512:	4a a0       	lddpc	r0,800025b8 <masterReceiverTest+0xc0>
80002514:	30 01       	mov	r1,0
			runningMrxTest = i; /* Para que a funcao de interrupcao TxFunction saiba qual teste estah sendo executado. */

			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
80002516:	fc 72 14 00 	mov	r2,-191488
	cmd_frame_t ansFrame;
	char* text;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_RX)
8000251a:	0d 89       	ld.ub	r9,r6[0x0]
8000251c:	e8 09 18 00 	cp.b	r9,r4
80002520:	c0 30       	breq	80002526 <masterReceiverTest+0x2e>
80002522:	10 95       	mov	r5,r8
80002524:	c3 a8       	rjmp	80002598 <masterReceiverTest+0xa0>
		{
			sentBytesCount = 0;
80002526:	a0 81       	st.b	r0[0x0],r1
			runningMrxTest = i; /* Para que a funcao de interrupcao TxFunction saiba qual teste estah sendo executado. */
80002528:	4a 5a       	lddpc	r10,800025bc <masterReceiverTest+0xc4>
8000252a:	b4 87       	st.b	r10[0x0],r7

			sprintf(text, "\nTest %d...", countAux++);
8000252c:	f0 c5 ff ff 	sub	r5,r8,-1
80002530:	1a d8       	st.w	--sp,r8
80002532:	4a 4b       	lddpc	r11,800025c0 <masterReceiverTest+0xc8>
80002534:	30 03       	mov	r3,0
80002536:	06 9c       	mov	r12,r3
80002538:	f0 1f 00 23 	mcall	800025c4 <masterReceiverTest+0xcc>
			print_dbg(text);
8000253c:	06 9b       	mov	r11,r3
8000253e:	04 9c       	mov	r12,r2
80002540:	f0 1f 00 1c 	mcall	800025b0 <masterReceiverTest+0xb8>

			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002544:	ee 0b 15 07 	lsl	r11,r7,0x7
80002548:	0e 0b       	add	r11,r7
8000254a:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000254e:	fa cd 01 04 	sub	sp,sp,260
80002552:	e0 6a 01 03 	mov	r10,259
80002556:	49 88       	lddpc	r8,800025b4 <masterReceiverTest+0xbc>
80002558:	f0 0b 00 0b 	add	r11,r8,r11
8000255c:	1a 9c       	mov	r12,sp
8000255e:	f0 1f 00 1b 	mcall	800025c8 <masterReceiverTest+0xd0>
80002562:	f0 1f 00 1b 	mcall	800025cc <masterReceiverTest+0xd4>
			
			ansFrame = rcvTestCmdAnswer();
80002566:	fa cd fe f8 	sub	sp,sp,-264
8000256a:	fa cc ff ff 	sub	r12,sp,-1
8000256e:	f0 1f 00 19 	mcall	800025d0 <masterReceiverTest+0xd8>

			if(ansFrame.magicCode != 0)
80002572:	1b 99       	ld.ub	r9,sp[0x1]
80002574:	1b a8       	ld.ub	r8,sp[0x2]
80002576:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8000257a:	c0 f0       	breq	80002598 <masterReceiverTest+0xa0>
			{
				if( ansFrame.data[0] == RESULT_TEST_FAIL )
8000257c:	3f f8       	mov	r8,-1
8000257e:	1b d9       	ld.ub	r9,sp[0x5]
80002580:	f0 09 18 00 	cp.b	r9,r8
80002584:	c0 61       	brne	80002590 <masterReceiverTest+0x98>
				{
					print_dbg( " FAIL" );
80002586:	49 4b       	lddpc	r11,800025d4 <masterReceiverTest+0xdc>
80002588:	04 9c       	mov	r12,r2
8000258a:	f0 1f 00 0a 	mcall	800025b0 <masterReceiverTest+0xb8>
8000258e:	c0 58       	rjmp	80002598 <masterReceiverTest+0xa0>
				}
				else
				{
					print_dbg( " PASS" );
80002590:	49 2b       	lddpc	r11,800025d8 <masterReceiverTest+0xe0>
80002592:	04 9c       	mov	r12,r2
80002594:	f0 1f 00 07 	mcall	800025b0 <masterReceiverTest+0xb8>

	int i, timeout = 1000000, countAux = 1;
	cmd_frame_t ansFrame;
	char* text;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
80002598:	2f f7       	sub	r7,-1
8000259a:	ec c6 fe fd 	sub	r6,r6,-259
8000259e:	59 47       	cp.w	r7,20
800025a0:	c0 30       	breq	800025a6 <masterReceiverTest+0xae>
800025a2:	0a 98       	mov	r8,r5
800025a4:	cb bb       	rjmp	8000251a <masterReceiverTest+0x22>
					print_dbg( " PASS" );
				}
			}
		}
	}
}
800025a6:	2b fd       	sub	sp,-260
800025a8:	d8 32       	popm	r0-r7,pc
800025aa:	00 00       	add	r0,r0
800025ac:	80 00       	ld.sh	r0,r0[0x0]
800025ae:	a4 bc       	st.b	r2[0x3],r12
800025b0:	80 00       	ld.sh	r0,r0[0x0]
800025b2:	31 8c       	mov	r12,24
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	90 00       	ld.sh	r0,r8[0x0]
800025b8:	00 00       	add	r0,r0
800025ba:	05 44       	ld.w	r4,--r2
800025bc:	00 00       	add	r0,r0
800025be:	05 47       	ld.w	r7,--r2
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	a5 14       	ld.d	r4,--r2
800025c4:	80 00       	ld.sh	r0,r0[0x0]
800025c6:	35 38       	mov	r8,83
800025c8:	80 00       	ld.sh	r0,r0[0x0]
800025ca:	33 f0       	mov	r0,63
800025cc:	80 00       	ld.sh	r0,r0[0x0]
800025ce:	2c 84       	sub	r4,-56
800025d0:	80 00       	ld.sh	r0,r0[0x0]
800025d2:	2b 80       	sub	r0,-72
800025d4:	80 00       	ld.sh	r0,r0[0x0]
800025d6:	a5 20       	st.d	r2++,r0
800025d8:	80 00       	ld.sh	r0,r0[0x0]
800025da:	a5 28       	st.d	r2++,r8

800025dc <slaveReceiverTest>:
	print_dbg("\n\n==============================\nExecutando i2c stx...\n==============================\n");
	print_dbg("\nFAIL - Nao implementado");
}

void slaveReceiverTest()
{
800025dc:	d4 31       	pushm	r0-r7,lr
800025de:	fa cd 01 04 	sub	sp,sp,260
	print_dbg("\n\n==============================\nExecutando i2c srx...\n==============================\n");
800025e2:	4b fb       	lddpc	r11,800026dc <slaveReceiverTest+0x100>
800025e4:	fc 7c 14 00 	mov	r12,-191488
800025e8:	f0 1f 00 3e 	mcall	800026e0 <slaveReceiverTest+0x104>
800025ec:	4b e6       	lddpc	r6,800026e4 <slaveReceiverTest+0x108>
800025ee:	2f e6       	sub	r6,-2
800025f0:	30 18       	mov	r8,1
800025f2:	30 07       	mov	r7,0
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_S_RX)
800025f4:	30 44       	mov	r4,4
		{
			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
800025f6:	4b c3       	lddpc	r3,800026e4 <slaveReceiverTest+0x108>

			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
			twim_write( TWI_MASTER, &test_cases[i].data[0], test_cases[i].dataSize, CUBE_COMPUTER_ADDRESS, false );
800025f8:	0e 92       	mov	r2,r7
800025fa:	30 51       	mov	r1,5
800025fc:	fe 70 38 00 	mov	r0,-51200
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_S_RX)
80002600:	0d 89       	ld.ub	r9,r6[0x0]
80002602:	e8 09 18 00 	cp.b	r9,r4
80002606:	c0 30       	breq	8000260c <slaveReceiverTest+0x30>
80002608:	10 95       	mov	r5,r8
8000260a:	c4 88       	rjmp	8000269a <slaveReceiverTest+0xbe>
		{
			sprintf(text, "\nTest %d...", countAux++);
8000260c:	f0 c5 ff ff 	sub	r5,r8,-1
80002610:	1a d8       	st.w	--sp,r8
80002612:	4b 6b       	lddpc	r11,800026e8 <slaveReceiverTest+0x10c>
80002614:	30 0c       	mov	r12,0
80002616:	f0 1f 00 36 	mcall	800026ec <slaveReceiverTest+0x110>
			print_dbg(text);
8000261a:	30 0b       	mov	r11,0
8000261c:	fc 7c 14 00 	mov	r12,-191488
80002620:	f0 1f 00 30 	mcall	800026e0 <slaveReceiverTest+0x104>
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002624:	ee 0b 15 07 	lsl	r11,r7,0x7
80002628:	0e 0b       	add	r11,r7
8000262a:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000262e:	fa cd 01 04 	sub	sp,sp,260
80002632:	e0 6a 01 03 	mov	r10,259
80002636:	e6 0b 00 0b 	add	r11,r3,r11
8000263a:	1a 9c       	mov	r12,sp
8000263c:	f0 1f 00 2d 	mcall	800026f0 <slaveReceiverTest+0x114>
80002640:	f0 1f 00 2d 	mcall	800026f4 <slaveReceiverTest+0x118>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002644:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002648:	e0 69 24 00 	mov	r9,9216
8000264c:	ea 19 00 f4 	orh	r9,0xf4
80002650:	f0 09 00 0a 	add	r10,r8,r9
80002654:	fa cd fe f8 	sub	sp,sp,-264
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002658:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000265c:	14 38       	cp.w	r8,r10
8000265e:	e0 88 00 08 	brls	8000266e <slaveReceiverTest+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002662:	12 38       	cp.w	r8,r9
80002664:	fe 98 ff fa 	brls	80002658 <slaveReceiverTest+0x7c>
80002668:	12 3a       	cp.w	r10,r9
8000266a:	c1 f3       	brcs	800026a8 <slaveReceiverTest+0xcc>
8000266c:	cf 6b       	rjmp	80002658 <slaveReceiverTest+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000266e:	12 38       	cp.w	r8,r9
80002670:	e0 8b 00 1c 	brhi	800026a8 <slaveReceiverTest+0xcc>
80002674:	12 3a       	cp.w	r10,r9
80002676:	c1 93       	brcs	800026a8 <slaveReceiverTest+0xcc>
80002678:	cf 0b       	rjmp	80002658 <slaveReceiverTest+0x7c>
			
			ansFrame = rcvTestCmdAnswer();
			
			if(ansFrame.magicCode != 0)
			{
				if( ansFrame.data[0] == RESULT_TEST_FAIL )
8000267a:	3f f8       	mov	r8,-1
8000267c:	1b d9       	ld.ub	r9,sp[0x5]
8000267e:	f0 09 18 00 	cp.b	r9,r8
80002682:	c0 71       	brne	80002690 <slaveReceiverTest+0xb4>
				{
					print_dbg( " FAIL" );
80002684:	49 db       	lddpc	r11,800026f8 <slaveReceiverTest+0x11c>
80002686:	fc 7c 14 00 	mov	r12,-191488
8000268a:	f0 1f 00 16 	mcall	800026e0 <slaveReceiverTest+0x104>
8000268e:	c0 68       	rjmp	8000269a <slaveReceiverTest+0xbe>
				}
				else
				{
					print_dbg( " PASS" );
80002690:	49 bb       	lddpc	r11,800026fc <slaveReceiverTest+0x120>
80002692:	fc 7c 14 00 	mov	r12,-191488
80002696:	f0 1f 00 13 	mcall	800026e0 <slaveReceiverTest+0x104>
	
	int i, countAux = 1;
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
8000269a:	2f f7       	sub	r7,-1
8000269c:	ec c6 fe fd 	sub	r6,r6,-259
800026a0:	59 47       	cp.w	r7,20
800026a2:	c1 b0       	breq	800026d8 <slaveReceiverTest+0xfc>
800026a4:	0a 98       	mov	r8,r5
800026a6:	ca db       	rjmp	80002600 <slaveReceiverTest+0x24>
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);

			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
			twim_write( TWI_MASTER, &test_cases[i].data[0], test_cases[i].dataSize, CUBE_COMPUTER_ADDRESS, false );
800026a8:	ee 0b 15 07 	lsl	r11,r7,0x7
800026ac:	0e 0b       	add	r11,r7
800026ae:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
800026b2:	2f cb       	sub	r11,-4
800026b4:	04 98       	mov	r8,r2
800026b6:	02 99       	mov	r9,r1
800026b8:	0d 9a       	ld.ub	r10,r6[0x1]
800026ba:	e6 0b 00 0b 	add	r11,r3,r11
800026be:	00 9c       	mov	r12,r0
800026c0:	f0 1f 00 10 	mcall	80002700 <slaveReceiverTest+0x124>
			
			ansFrame = rcvTestCmdAnswer();
800026c4:	fa cc ff ff 	sub	r12,sp,-1
800026c8:	f0 1f 00 0f 	mcall	80002704 <slaveReceiverTest+0x128>
			
			if(ansFrame.magicCode != 0)
800026cc:	1b 99       	ld.ub	r9,sp[0x1]
800026ce:	1b a8       	ld.ub	r8,sp[0x2]
800026d0:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800026d4:	cd 31       	brne	8000267a <slaveReceiverTest+0x9e>
800026d6:	ce 2b       	rjmp	8000269a <slaveReceiverTest+0xbe>
					print_dbg( " PASS" );
				}
			}
		}
	}
800026d8:	2b fd       	sub	sp,-260
800026da:	d8 32       	popm	r0-r7,pc
800026dc:	80 00       	ld.sh	r0,r0[0x0]
800026de:	a5 30       	mul	r0,r2
800026e0:	80 00       	ld.sh	r0,r0[0x0]
800026e2:	31 8c       	mov	r12,24
800026e4:	80 00       	ld.sh	r0,r0[0x0]
800026e6:	90 00       	ld.sh	r0,r8[0x0]
800026e8:	80 00       	ld.sh	r0,r0[0x0]
800026ea:	a5 14       	ld.d	r4,--r2
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	35 38       	mov	r8,83
800026f0:	80 00       	ld.sh	r0,r0[0x0]
800026f2:	33 f0       	mov	r0,63
800026f4:	80 00       	ld.sh	r0,r0[0x0]
800026f6:	2c 84       	sub	r4,-56
800026f8:	80 00       	ld.sh	r0,r0[0x0]
800026fa:	a5 20       	st.d	r2++,r0
800026fc:	80 00       	ld.sh	r0,r0[0x0]
800026fe:	a5 28       	st.d	r2++,r8
80002700:	80 00       	ld.sh	r0,r0[0x0]
80002702:	21 78       	sub	r8,23
80002704:	80 00       	ld.sh	r0,r0[0x0]
80002706:	2b 80       	sub	r0,-72

80002708 <masterTransmitterTest>:
//	slaveTransmitterTest();
	slaveReceiverTest();
}

void masterTransmitterTest()
{
80002708:	d4 31       	pushm	r0-r7,lr
	print_dbg("\n\n==============================\nExecutando i2c mtx...\n==============================\n");
8000270a:	4c 7b       	lddpc	r11,80002824 <masterTransmitterTest+0x11c>
8000270c:	fc 7c 14 00 	mov	r12,-191488
80002710:	f0 1f 00 46 	mcall	80002828 <masterTransmitterTest+0x120>
80002714:	4c 66       	lddpc	r6,8000282c <masterTransmitterTest+0x124>
80002716:	2f e6       	sub	r6,-2
80002718:	30 17       	mov	r7,1
8000271a:	0e 98       	mov	r8,r7
8000271c:	30 05       	mov	r5,0
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_TX)
8000271e:	30 13       	mov	r3,1
		
			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
		
			/* Aguarda ateh o CC tenha enviado todos os bytes da transmissao de teste. */
			while( (transmissionEnded != true) && (++trys < timeout) ) {};
80002720:	4c 41       	lddpc	r1,80002830 <masterTransmitterTest+0x128>
80002722:	30 02       	mov	r2,0
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_TX)
80002724:	0d 89       	ld.ub	r9,r6[0x0]
80002726:	e6 09 18 00 	cp.b	r9,r3
8000272a:	c0 30       	breq	80002730 <masterTransmitterTest+0x28>
8000272c:	10 94       	mov	r4,r8
8000272e:	c7 28       	rjmp	80002812 <masterTransmitterTest+0x10a>
		{
			trys = 0;
		
			sprintf(text, "\nTest %d...", countAux++);
80002730:	f0 c4 ff ff 	sub	r4,r8,-1
80002734:	1a d8       	st.w	--sp,r8
80002736:	4c 0b       	lddpc	r11,80002834 <masterTransmitterTest+0x12c>
80002738:	30 00       	mov	r0,0
8000273a:	00 9c       	mov	r12,r0
8000273c:	f0 1f 00 3f 	mcall	80002838 <masterTransmitterTest+0x130>
			print_dbg(text);
80002740:	00 9b       	mov	r11,r0
80002742:	fc 7c 14 00 	mov	r12,-191488
80002746:	f0 1f 00 39 	mcall	80002828 <masterTransmitterTest+0x120>
		
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
8000274a:	ea 0b 15 07 	lsl	r11,r5,0x7
8000274e:	0a 0b       	add	r11,r5
80002750:	ea 0b 00 1b 	add	r11,r5,r11<<0x1
80002754:	fa cd 01 04 	sub	sp,sp,260
80002758:	e0 6a 01 03 	mov	r10,259
8000275c:	4b 49       	lddpc	r9,8000282c <masterTransmitterTest+0x124>
8000275e:	f2 0b 00 0b 	add	r11,r9,r11
80002762:	1a 9c       	mov	r12,sp
80002764:	f0 1f 00 36 	mcall	8000283c <masterTransmitterTest+0x134>
80002768:	f0 1f 00 36 	mcall	80002840 <masterTransmitterTest+0x138>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000276c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002770:	e0 69 24 00 	mov	r9,9216
80002774:	ea 19 00 f4 	orh	r9,0xf4
80002778:	f0 09 00 0a 	add	r10,r8,r9
8000277c:	fa cd fe f8 	sub	sp,sp,-264
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002780:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002784:	14 38       	cp.w	r8,r10
80002786:	e0 88 00 08 	brls	80002796 <masterTransmitterTest+0x8e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000278a:	12 38       	cp.w	r8,r9
8000278c:	fe 98 ff fa 	brls	80002780 <masterTransmitterTest+0x78>
80002790:	12 3a       	cp.w	r10,r9
80002792:	c0 53       	brcs	8000279c <masterTransmitterTest+0x94>
80002794:	cf 6b       	rjmp	80002780 <masterTransmitterTest+0x78>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002796:	12 38       	cp.w	r8,r9
80002798:	e0 88 00 07 	brls	800027a6 <masterTransmitterTest+0x9e>
		
			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
		
			/* Aguarda ateh o CC tenha enviado todos os bytes da transmissao de teste. */
			while( (transmissionEnded != true) && (++trys < timeout) ) {};
8000279c:	03 88       	ld.ub	r8,r1[0x0]
8000279e:	e4 08 18 00 	cp.b	r8,r2
800027a2:	c1 01       	brne	800027c2 <masterTransmitterTest+0xba>
800027a4:	c0 48       	rjmp	800027ac <masterTransmitterTest+0xa4>
800027a6:	12 3a       	cp.w	r10,r9
800027a8:	cf a3       	brcs	8000279c <masterTransmitterTest+0x94>
800027aa:	ce bb       	rjmp	80002780 <masterTransmitterTest+0x78>
800027ac:	30 08       	mov	r8,0
800027ae:	2f f8       	sub	r8,-1
800027b0:	ee 58 42 40 	cp.w	r8,1000000
800027b4:	cf d1       	brne	800027ae <masterTransmitterTest+0xa6>
		
			if( trys >= timeout )
			{
				print_dbg("\nErro - i2c_tests.c - masterTransmitterTest - timeout");
800027b6:	4a 4b       	lddpc	r11,80002844 <masterTransmitterTest+0x13c>
800027b8:	fc 7c 14 00 	mov	r12,-191488
800027bc:	f0 1f 00 1b 	mcall	80002828 <masterTransmitterTest+0x120>
800027c0:	30 07       	mov	r7,0
				testResult = false;
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
800027c2:	4a 28       	lddpc	r8,80002848 <masterTransmitterTest+0x140>
800027c4:	11 8c       	ld.ub	r12,r8[0x0]
800027c6:	58 0c       	cp.w	r12,0
800027c8:	e0 8a 00 15 	brle	800027f2 <masterTransmitterTest+0xea>
800027cc:	4a 08       	lddpc	r8,8000284c <masterTransmitterTest+0x144>
800027ce:	ea 0b 15 07 	lsl	r11,r5,0x7
800027d2:	0a 0b       	add	r11,r5
800027d4:	ea 0b 00 1b 	add	r11,r5,r11<<0x1
800027d8:	2f cb       	sub	r11,-4
800027da:	49 59       	lddpc	r9,8000282c <masterTransmitterTest+0x124>
800027dc:	f2 0b 00 0b 	add	r11,r9,r11
	masterReceiverTest();
//	slaveTransmitterTest();
	slaveReceiverTest();
}

void masterTransmitterTest()
800027e0:	10 0c       	add	r12,r8
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
			{
				if( i2cBytesBuffer[j] != test_cases[i].data[j] )
800027e2:	11 3a       	ld.ub	r10,r8++
800027e4:	17 39       	ld.ub	r9,r11++
800027e6:	f2 0a 18 00 	cp.b	r10,r9
800027ea:	f9 b7 01 00 	movne	r7,0
				print_dbg("\nErro - i2c_tests.c - masterTransmitterTest - timeout");
				testResult = false;
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
800027ee:	18 38       	cp.w	r8,r12
800027f0:	cf 91       	brne	800027e2 <masterTransmitterTest+0xda>
				if( i2cBytesBuffer[j] != test_cases[i].data[j] )
				testResult = false;
			}
		
			/* Reseta as flags globais */
			receivedBytesCount = 0;
800027f2:	49 68       	lddpc	r8,80002848 <masterTransmitterTest+0x140>
800027f4:	b0 82       	st.b	r8[0x0],r2
			transmissionEnded = false;
800027f6:	a2 82       	st.b	r1[0x0],r2
		
			/* Verifica e imprime o resultado do teste */
			if( testResult == false)
800027f8:	58 07       	cp.w	r7,0
800027fa:	c0 71       	brne	80002808 <masterTransmitterTest+0x100>
			{
				print_dbg( " FAIL" );
800027fc:	49 5b       	lddpc	r11,80002850 <masterTransmitterTest+0x148>
800027fe:	fc 7c 14 00 	mov	r12,-191488
80002802:	f0 1f 00 0a 	mcall	80002828 <masterTransmitterTest+0x120>
80002806:	c0 68       	rjmp	80002812 <masterTransmitterTest+0x10a>
			}
			else
			{
				print_dbg( " PASS" );
80002808:	49 3b       	lddpc	r11,80002854 <masterTransmitterTest+0x14c>
8000280a:	fc 7c 14 00 	mov	r12,-191488
8000280e:	f0 1f 00 07 	mcall	80002828 <masterTransmitterTest+0x120>
	
	int i, j, timeout = 1000000, trys, countAux = 1;
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
80002812:	2f f5       	sub	r5,-1
80002814:	ec c6 fe fd 	sub	r6,r6,-259
80002818:	59 45       	cp.w	r5,20
8000281a:	c0 30       	breq	80002820 <masterTransmitterTest+0x118>
8000281c:	08 98       	mov	r8,r4
8000281e:	c8 3b       	rjmp	80002724 <masterTransmitterTest+0x1c>
80002820:	d8 32       	popm	r0-r7,pc
80002822:	00 00       	add	r0,r0
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	a5 88       	lsr	r8,0x4
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	31 8c       	mov	r12,24
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	90 00       	ld.sh	r0,r8[0x0]
80002830:	00 00       	add	r0,r0
80002832:	05 46       	ld.w	r6,--r2
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	a5 14       	ld.d	r4,--r2
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	35 38       	mov	r8,83
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	33 f0       	mov	r0,63
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	2c 84       	sub	r4,-56
80002844:	80 00       	ld.sh	r0,r0[0x0]
80002846:	a5 e0       	*unknown*
80002848:	00 00       	add	r0,r0
8000284a:	05 45       	ld.w	r5,--r2
8000284c:	00 00       	add	r0,r0
8000284e:	07 60       	ld.uh	r0,--r3
80002850:	80 00       	ld.sh	r0,r0[0x0]
80002852:	a5 20       	st.d	r2++,r0
80002854:	80 00       	ld.sh	r0,r0[0x0]
80002856:	a5 28       	st.d	r2++,r8

80002858 <i2c_test_all>:
	transmissionEnded = true;	
	gpio_tgl_gpio_pin(ITASAT_LED5);
}

void i2c_test_all()
{
80002858:	d4 01       	pushm	lr
	masterTransmitterTest();
8000285a:	f0 1f 00 04 	mcall	80002868 <i2c_test_all+0x10>
	masterReceiverTest();
8000285e:	f0 1f 00 04 	mcall	8000286c <i2c_test_all+0x14>
//	slaveTransmitterTest();
	slaveReceiverTest();
80002862:	f0 1f 00 04 	mcall	80002870 <i2c_test_all+0x18>
}
80002866:	d8 02       	popm	pc
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	27 08       	sub	r8,112
8000286c:	80 00       	ld.sh	r0,r0[0x0]
8000286e:	24 f8       	sub	r8,79
80002870:	80 00       	ld.sh	r0,r0[0x0]
80002872:	25 dc       	sub	r12,93

80002874 <StopFunction>:
	return byteToSend; /* Envia o byte de numero sentBytesCount do teste em andamento */
}

/* TODO - Add Text */
void StopFunction()
{
80002874:	d4 01       	pushm	lr
	transmissionEnded = true;	
80002876:	30 19       	mov	r9,1
80002878:	48 38       	lddpc	r8,80002884 <StopFunction+0x10>
8000287a:	b0 89       	st.b	r8[0x0],r9
	gpio_tgl_gpio_pin(ITASAT_LED5);
8000287c:	30 dc       	mov	r12,13
8000287e:	f0 1f 00 03 	mcall	80002888 <StopFunction+0x14>
}
80002882:	d8 02       	popm	pc
80002884:	00 00       	add	r0,r0
80002886:	05 46       	ld.w	r6,--r2
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	2f 8a       	sub	r10,-8

8000288c <TxFunction>:
	gpio_tgl_gpio_pin(ITASAT_LED7);
}

/* TODO - Add Text */
uint8_t TxFunction()
{
8000288c:	eb cd 40 80 	pushm	r7,lr
	uint8_t byteToSend = test_cases[runningMrxTest].data[sentBytesCount];
80002890:	48 b9       	lddpc	r9,800028bc <TxFunction+0x30>
80002892:	13 8a       	ld.ub	r10,r9[0x0]
80002894:	48 b8       	lddpc	r8,800028c0 <TxFunction+0x34>
80002896:	11 88       	ld.ub	r8,r8[0x0]
80002898:	f0 0b 15 07 	lsl	r11,r8,0x7
8000289c:	10 0b       	add	r11,r8
8000289e:	f0 0b 00 18 	add	r8,r8,r11<<0x1
800028a2:	48 9b       	lddpc	r11,800028c4 <TxFunction+0x38>
800028a4:	f6 08 00 08 	add	r8,r11,r8
800028a8:	14 08       	add	r8,r10
800028aa:	11 c7       	ld.ub	r7,r8[0x4]
	
	sentBytesCount++;
800028ac:	2f fa       	sub	r10,-1
800028ae:	b2 8a       	st.b	r9[0x0],r10
	
	gpio_tgl_gpio_pin(ITASAT_LED6);
800028b0:	30 ec       	mov	r12,14
800028b2:	f0 1f 00 06 	mcall	800028c8 <TxFunction+0x3c>
	
	return byteToSend; /* Envia o byte de numero sentBytesCount do teste em andamento */
}
800028b6:	0e 9c       	mov	r12,r7
800028b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800028bc:	00 00       	add	r0,r0
800028be:	05 44       	ld.w	r4,--r2
800028c0:	00 00       	add	r0,r0
800028c2:	05 47       	ld.w	r7,--r2
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	90 00       	ld.sh	r0,r8[0x0]
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	2f 8a       	sub	r10,-8

800028cc <RxFunction>:
		gpio_set_pin_low( ITASAT_LED3 );
}

/* TODO - Add Text */
void RxFunction( uint8_t ReceivedData )
{
800028cc:	d4 01       	pushm	lr
	i2cBytesBuffer[receivedBytesCount++] = ReceivedData;
800028ce:	48 68       	lddpc	r8,800028e4 <RxFunction+0x18>
800028d0:	11 89       	ld.ub	r9,r8[0x0]
800028d2:	48 6a       	lddpc	r10,800028e8 <RxFunction+0x1c>
800028d4:	f4 09 0b 0c 	st.b	r10[r9],r12
800028d8:	2f f9       	sub	r9,-1
800028da:	b0 89       	st.b	r8[0x0],r9
	
	gpio_tgl_gpio_pin(ITASAT_LED7);
800028dc:	30 fc       	mov	r12,15
800028de:	f0 1f 00 04 	mcall	800028ec <RxFunction+0x20>
}
800028e2:	d8 02       	popm	pc
800028e4:	00 00       	add	r0,r0
800028e6:	05 45       	ld.w	r5,--r2
800028e8:	00 00       	add	r0,r0
800028ea:	07 60       	ld.uh	r0,--r3
800028ec:	80 00       	ld.sh	r0,r0[0x0]
800028ee:	2f 8a       	sub	r10,-8

800028f0 <initI2CTestsInterface>:
	.tx = &TxFunction,
	.stop = &StopFunction
};

void initI2CTestsInterface()
{
800028f0:	d4 01       	pushm	lr
	gpio_enable_module_pin( TWIS0_1_TWD_PIN, TWIS0_1_TWD_FUNCTION );
800028f2:	30 0b       	mov	r11,0
800028f4:	34 2c       	mov	r12,66
800028f6:	f0 1f 00 0e 	mcall	8000292c <initI2CTestsInterface+0x3c>
	gpio_enable_module_pin( TWIS0_1_TWCK_PIN, TWIS0_1_TWCK_FUNCTION );
800028fa:	30 0b       	mov	r11,0
800028fc:	34 3c       	mov	r12,67
800028fe:	f0 1f 00 0c 	mcall	8000292c <initI2CTestsInterface+0x3c>
	
	if( STATUS_OK == twis_slave_init( TWI_SLAVE, &TWIS_OPTIONS, &TWIS_FUNCTIONS ))
80002902:	48 ca       	lddpc	r10,80002930 <initI2CTestsInterface+0x40>
80002904:	48 cb       	lddpc	r11,80002934 <initI2CTestsInterface+0x44>
80002906:	fe 7c 40 00 	mov	r12,-49152
8000290a:	f0 1f 00 0c 	mcall	80002938 <initI2CTestsInterface+0x48>
8000290e:	c0 41       	brne	80002916 <initI2CTestsInterface+0x26>
		gpio_set_pin_low( ITASAT_LED2 );
80002910:	30 ac       	mov	r12,10
80002912:	f0 1f 00 0b 	mcall	8000293c <initI2CTestsInterface+0x4c>

	if( STATUS_OK == twim_master_init( TWI_MASTER, &TWIM_OPTIONS ))
80002916:	48 bb       	lddpc	r11,80002940 <initI2CTestsInterface+0x50>
80002918:	fe 7c 38 00 	mov	r12,-51200
8000291c:	f0 1f 00 0a 	mcall	80002944 <initI2CTestsInterface+0x54>
80002920:	c0 41       	brne	80002928 <initI2CTestsInterface+0x38>
		gpio_set_pin_low( ITASAT_LED3 );
80002922:	30 bc       	mov	r12,11
80002924:	f0 1f 00 06 	mcall	8000293c <initI2CTestsInterface+0x4c>
80002928:	d8 02       	popm	pc
8000292a:	00 00       	add	r0,r0
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	2d b0       	sub	r0,-37
80002930:	80 00       	ld.sh	r0,r0[0x0]
80002932:	a6 18       	st.h	r3[0x2],r8
80002934:	80 00       	ld.sh	r0,r0[0x0]
80002936:	a4 3c       	st.h	r2[0x6],r12
80002938:	80 00       	ld.sh	r0,r0[0x0]
8000293a:	24 0c       	sub	r12,64
8000293c:	80 00       	ld.sh	r0,r0[0x0]
8000293e:	2f 74       	sub	r4,-9
80002940:	80 00       	ld.sh	r0,r0[0x0]
80002942:	a6 24       	st.h	r3[0x4],r4
80002944:	80 00       	ld.sh	r0,r0[0x0]
80002946:	22 48       	sub	r8,36

80002948 <manage_command>:
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED0 );
}

void manage_command()
{
80002948:	eb cd 40 80 	pushm	r7,lr
	char* string_aux;
	bool cmd_recognized = false;
	command_buffer[free_index] = '\0';
8000294c:	4b 4c       	lddpc	r12,80002a1c <manage_command+0xd4>
8000294e:	4b 58       	lddpc	r8,80002a20 <manage_command+0xd8>
80002950:	70 08       	ld.w	r8,r8[0x0]
80002952:	30 09       	mov	r9,0
80002954:	f8 08 0b 09 	st.b	r12[r8],r9
	
	if( strcmp( command_buffer, "help" ) == 0 )
80002958:	4b 3b       	lddpc	r11,80002a24 <manage_command+0xdc>
8000295a:	f0 1f 00 34 	mcall	80002a28 <manage_command+0xe0>
8000295e:	c0 30       	breq	80002964 <manage_command+0x1c>
80002960:	30 07       	mov	r7,0
80002962:	c1 b8       	rjmp	80002998 <manage_command+0x50>
	{
		print_dbg("\n\nhelp: Apresenta todos os comandos existentes.");
80002964:	4b 2b       	lddpc	r11,80002a2c <manage_command+0xe4>
80002966:	fc 7c 14 00 	mov	r12,-191488
8000296a:	f0 1f 00 32 	mcall	80002a30 <manage_command+0xe8>
		print_dbg("\n\ni2c all: Executa todos os testes do I2C.");
8000296e:	4b 2b       	lddpc	r11,80002a34 <manage_command+0xec>
80002970:	fc 7c 14 00 	mov	r12,-191488
80002974:	f0 1f 00 2f 	mcall	80002a30 <manage_command+0xe8>
		print_dbg("\n\ni2c mtx: Executa o teste da I2C com o CubeComputer como Master Transmitter.");
80002978:	4b 0b       	lddpc	r11,80002a38 <manage_command+0xf0>
8000297a:	fc 7c 14 00 	mov	r12,-191488
8000297e:	f0 1f 00 2d 	mcall	80002a30 <manage_command+0xe8>
		print_dbg("\n\ni2c mrx: Executa o teste da I2C com o CubeComputer como Master Receiver.");
80002982:	4a fb       	lddpc	r11,80002a3c <manage_command+0xf4>
80002984:	fc 7c 14 00 	mov	r12,-191488
80002988:	f0 1f 00 2a 	mcall	80002a30 <manage_command+0xe8>
	//	print_dbg("\n\ni2c stx: Executa o teste da I2C com o CubeComputer como Slave Transmitter.");
		print_dbg("\n\ni2c srx: Executa o teste da I2C com o CubeComputer como Slave Receiver.");
8000298c:	4a db       	lddpc	r11,80002a40 <manage_command+0xf8>
8000298e:	fc 7c 14 00 	mov	r12,-191488
80002992:	f0 1f 00 28 	mcall	80002a30 <manage_command+0xe8>
80002996:	30 17       	mov	r7,1
		
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "reset" ) == 0 )
80002998:	4a bb       	lddpc	r11,80002a44 <manage_command+0xfc>
8000299a:	4a 1c       	lddpc	r12,80002a1c <manage_command+0xd4>
8000299c:	f0 1f 00 23 	mcall	80002a28 <manage_command+0xe0>
800029a0:	c0 91       	brne	800029b2 <manage_command+0x6a>
	{
		general_initialize();
800029a2:	f0 1f 00 2a 	mcall	80002a48 <manage_command+0x100>
		print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
800029a6:	4a ab       	lddpc	r11,80002a4c <manage_command+0x104>
800029a8:	fc 7c 14 00 	mov	r12,-191488
800029ac:	f0 1f 00 21 	mcall	80002a30 <manage_command+0xe8>
800029b0:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c all" ) == 0 )
800029b2:	4a 8b       	lddpc	r11,80002a50 <manage_command+0x108>
800029b4:	49 ac       	lddpc	r12,80002a1c <manage_command+0xd4>
800029b6:	f0 1f 00 1d 	mcall	80002a28 <manage_command+0xe0>
800029ba:	c0 41       	brne	800029c2 <manage_command+0x7a>
	{
		i2c_test_all();
800029bc:	f0 1f 00 26 	mcall	80002a54 <manage_command+0x10c>
800029c0:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c mtx" ) == 0 )
800029c2:	4a 6b       	lddpc	r11,80002a58 <manage_command+0x110>
800029c4:	49 6c       	lddpc	r12,80002a1c <manage_command+0xd4>
800029c6:	f0 1f 00 19 	mcall	80002a28 <manage_command+0xe0>
800029ca:	c0 41       	brne	800029d2 <manage_command+0x8a>
	{
		masterTransmitterTest();
800029cc:	f0 1f 00 24 	mcall	80002a5c <manage_command+0x114>
800029d0:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c mrx" ) == 0 )
800029d2:	4a 4b       	lddpc	r11,80002a60 <manage_command+0x118>
800029d4:	49 2c       	lddpc	r12,80002a1c <manage_command+0xd4>
800029d6:	f0 1f 00 15 	mcall	80002a28 <manage_command+0xe0>
800029da:	c0 41       	brne	800029e2 <manage_command+0x9a>
	{
		masterReceiverTest();
800029dc:	f0 1f 00 22 	mcall	80002a64 <manage_command+0x11c>
800029e0:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c stx" ) == 0 )
800029e2:	4a 2b       	lddpc	r11,80002a68 <manage_command+0x120>
800029e4:	48 ec       	lddpc	r12,80002a1c <manage_command+0xd4>
800029e6:	f0 1f 00 11 	mcall	80002a28 <manage_command+0xe0>
800029ea:	c0 41       	brne	800029f2 <manage_command+0xaa>
	{
		slaveTransmitterTest();
800029ec:	f0 1f 00 20 	mcall	80002a6c <manage_command+0x124>
800029f0:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c srx" ) == 0 )
800029f2:	4a 0b       	lddpc	r11,80002a70 <manage_command+0x128>
800029f4:	48 ac       	lddpc	r12,80002a1c <manage_command+0xd4>
800029f6:	f0 1f 00 0d 	mcall	80002a28 <manage_command+0xe0>
800029fa:	c0 41       	brne	80002a02 <manage_command+0xba>
	{
		slaveReceiverTest();
800029fc:	f0 1f 00 1e 	mcall	80002a74 <manage_command+0x12c>
80002a00:	c0 88       	rjmp	80002a10 <manage_command+0xc8>
		cmd_recognized = true;
	}
	
	if(!cmd_recognized)
80002a02:	58 07       	cp.w	r7,0
80002a04:	c0 61       	brne	80002a10 <manage_command+0xc8>
	{
		print_dbg("\n\nComando nao reconhecido!");
80002a06:	49 db       	lddpc	r11,80002a78 <manage_command+0x130>
80002a08:	fc 7c 14 00 	mov	r12,-191488
80002a0c:	f0 1f 00 09 	mcall	80002a30 <manage_command+0xe8>
	}
	
	free_index = 0; //Simulate the reset of command_buffer
80002a10:	30 09       	mov	r9,0
80002a12:	48 48       	lddpc	r8,80002a20 <manage_command+0xd8>
80002a14:	91 09       	st.w	r8[0x0],r9
}
80002a16:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a1a:	00 00       	add	r0,r0
80002a1c:	00 00       	add	r0,r0
80002a1e:	05 48       	ld.w	r8,--r2
80002a20:	00 00       	add	r0,r0
80002a22:	05 5c       	ld.sh	r12,--r2
80002a24:	80 00       	ld.sh	r0,r0[0x0]
80002a26:	a6 40       	st.h	r3[0x8],r0
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	35 70       	mov	r0,87
80002a2c:	80 00       	ld.sh	r0,r0[0x0]
80002a2e:	a6 48       	st.h	r3[0x8],r8
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	31 8c       	mov	r12,24
80002a34:	80 00       	ld.sh	r0,r0[0x0]
80002a36:	a6 78       	st.h	r3[0xe],r8
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	a6 a4       	st.b	r3[0x2],r4
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	a6 f4       	st.b	r3[0x7],r4
80002a40:	80 00       	ld.sh	r0,r0[0x0]
80002a42:	a7 40       	asr	r0,0x6
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	a7 8c       	lsr	r12,0x6
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	33 60       	mov	r0,54
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	a7 94       	lsr	r4,0x7
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	a7 e8       	*unknown*
80002a54:	80 00       	ld.sh	r0,r0[0x0]
80002a56:	28 58       	sub	r8,-123
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	a7 f0       	*unknown*
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	27 08       	sub	r8,112
80002a60:	80 00       	ld.sh	r0,r0[0x0]
80002a62:	a7 f8       	*unknown*
80002a64:	80 00       	ld.sh	r0,r0[0x0]
80002a66:	24 f8       	sub	r8,79
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	a8 00       	st.h	r4[0x0],r0
80002a6c:	80 00       	ld.sh	r0,r0[0x0]
80002a6e:	24 d4       	sub	r4,77
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	a8 08       	st.h	r4[0x0],r8
80002a74:	80 00       	ld.sh	r0,r0[0x0]
80002a76:	25 dc       	sub	r12,93
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	a8 10       	st.h	r4[0x2],r0

80002a7c <initTerminalInterface>:
	.paritytype = USART_NO_PARITY,
	.stopbits = USART_1_STOPBIT
};

void initTerminalInterface()
{
80002a7c:	d4 01       	pushm	lr
	gpio_enable_module_pin( USART1_1_TX_PIN, USART1_1_TX_FUNCTION );
80002a7e:	30 0b       	mov	r11,0
80002a80:	33 1c       	mov	r12,49
80002a82:	f0 1f 00 0b 	mcall	80002aac <initTerminalInterface+0x30>
	gpio_enable_module_pin( USART1_1_RX_PIN, USART1_1_RX_FUNCTION );
80002a86:	30 0b       	mov	r11,0
80002a88:	33 0c       	mov	r12,48
80002a8a:	f0 1f 00 09 	mcall	80002aac <initTerminalInterface+0x30>
	
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
80002a8e:	e0 6a 24 00 	mov	r10,9216
80002a92:	ea 1a 00 f4 	orh	r10,0xf4
80002a96:	48 7b       	lddpc	r11,80002ab0 <initTerminalInterface+0x34>
80002a98:	fc 7c 14 00 	mov	r12,-191488
80002a9c:	f0 1f 00 06 	mcall	80002ab4 <initTerminalInterface+0x38>
80002aa0:	c0 41       	brne	80002aa8 <initTerminalInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED0 );
80002aa2:	30 8c       	mov	r12,8
80002aa4:	f0 1f 00 05 	mcall	80002ab8 <initTerminalInterface+0x3c>
80002aa8:	d8 02       	popm	pc
80002aaa:	00 00       	add	r0,r0
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	2d b0       	sub	r0,-37
80002ab0:	80 00       	ld.sh	r0,r0[0x0]
80002ab2:	a6 34       	st.h	r3[0x6],r4
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	31 dc       	mov	r12,29
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	2f 74       	sub	r4,-9

80002abc <start_terminal>:
	
	free_index = 0; //Simulate the reset of command_buffer
}

void start_terminal()
{
80002abc:	eb cd 40 f8 	pushm	r3-r7,lr
	int received_char;
	
	while(true)
	{
		if(free_index == 0)
80002ac0:	49 56       	lddpc	r6,80002b14 <start_terminal+0x58>
			print_dbg("\n\n--> ");
80002ac2:	49 63       	lddpc	r3,80002b18 <start_terminal+0x5c>
80002ac4:	fc 77 14 00 	mov	r7,-191488
		received_char = usart_getchar( TERMINAL_UART );

		switch(received_char)
		{
			case USART_FAILURE:
				print_dbg("\nterminal_controller.c - start_terminal - USART_FAILURE");
80002ac8:	49 55       	lddpc	r5,80002b1c <start_terminal+0x60>
				break;
			case ENTER_CHAR:
				manage_command();
				break;
			default:
				command_buffer[free_index] = (char) received_char;
80002aca:	49 64       	lddpc	r4,80002b20 <start_terminal+0x64>
{
	int received_char;
	
	while(true)
	{
		if(free_index == 0)
80002acc:	6c 08       	ld.w	r8,r6[0x0]
80002ace:	58 08       	cp.w	r8,0
80002ad0:	c0 51       	brne	80002ada <start_terminal+0x1e>
			print_dbg("\n\n--> ");
80002ad2:	06 9b       	mov	r11,r3
80002ad4:	0e 9c       	mov	r12,r7
80002ad6:	f0 1f 00 14 	mcall	80002b24 <start_terminal+0x68>
		
		received_char = usart_getchar( TERMINAL_UART );
80002ada:	0e 9c       	mov	r12,r7
80002adc:	f0 1f 00 13 	mcall	80002b28 <start_terminal+0x6c>

		switch(received_char)
80002ae0:	5b fc       	cp.w	r12,-1
80002ae2:	c0 40       	breq	80002aea <start_terminal+0x2e>
80002ae4:	58 dc       	cp.w	r12,13
80002ae6:	c0 c1       	brne	80002afe <start_terminal+0x42>
80002ae8:	c0 88       	rjmp	80002af8 <start_terminal+0x3c>
		{
			case USART_FAILURE:
				print_dbg("\nterminal_controller.c - start_terminal - USART_FAILURE");
80002aea:	0a 9b       	mov	r11,r5
80002aec:	0e 9c       	mov	r12,r7
80002aee:	f0 1f 00 0e 	mcall	80002b24 <start_terminal+0x68>
				initTerminalInterface();
80002af2:	f0 1f 00 0f 	mcall	80002b2c <start_terminal+0x70>
				break;
80002af6:	ce bb       	rjmp	80002acc <start_terminal+0x10>
			case ENTER_CHAR:
				manage_command();
80002af8:	f0 1f 00 0e 	mcall	80002b30 <start_terminal+0x74>
				break;
80002afc:	ce 8b       	rjmp	80002acc <start_terminal+0x10>
			default:
				command_buffer[free_index] = (char) received_char;
80002afe:	6c 08       	ld.w	r8,r6[0x0]
80002b00:	e8 08 0b 0c 	st.b	r4[r8],r12
				free_index++;
80002b04:	2f f8       	sub	r8,-1
80002b06:	8d 08       	st.w	r6[0x0],r8
				usart_putchar( TERMINAL_UART, received_char ); //Echo in PC terminal.
80002b08:	18 9b       	mov	r11,r12
80002b0a:	0e 9c       	mov	r12,r7
80002b0c:	f0 1f 00 0a 	mcall	80002b34 <start_terminal+0x78>
80002b10:	cd eb       	rjmp	80002acc <start_terminal+0x10>
80002b12:	00 00       	add	r0,r0
80002b14:	00 00       	add	r0,r0
80002b16:	05 5c       	ld.sh	r12,--r2
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	a8 2c       	st.h	r4[0x4],r12
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	a8 34       	st.h	r4[0x6],r4
80002b20:	00 00       	add	r0,r0
80002b22:	05 48       	ld.w	r8,--r2
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	31 8c       	mov	r12,24
80002b28:	80 00       	ld.sh	r0,r0[0x0]
80002b2a:	31 20       	mov	r0,18
80002b2c:	80 00       	ld.sh	r0,r0[0x0]
80002b2e:	2a 7c       	sub	r12,-89
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	29 48       	sub	r8,-108
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	30 d0       	mov	r0,13

80002b38 <newEmptyTestCmdFrame>:
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint8_t testType, uint8_t dataSize)
{
80002b38:	eb cd 40 80 	pushm	r7,lr
80002b3c:	fa cd 01 04 	sub	sp,sp,260
80002b40:	18 97       	mov	r7,r12
	
	newFrame.magicCode = 0x3C7E;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	for(i = 0; i < dataSize; i++)
80002b42:	58 0a       	cp.w	r10,0
80002b44:	e0 8a 00 0a 	brle	80002b58 <newEmptyTestCmdFrame+0x20>
80002b48:	fa c8 ff fb 	sub	r8,sp,-5
	
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint8_t testType, uint8_t dataSize)
80002b4c:	f0 0a 00 0c 	add	r12,r8,r10
	newFrame.magicCode = 0x3C7E;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	for(i = 0; i < dataSize; i++)
		newFrame.data[i] = 0;
80002b50:	30 09       	mov	r9,0
80002b52:	10 c9       	st.b	r8++,r9
	
	newFrame.magicCode = 0x3C7E;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	for(i = 0; i < dataSize; i++)
80002b54:	18 38       	cp.w	r8,r12
80002b56:	cf e1       	brne	80002b52 <newEmptyTestCmdFrame+0x1a>
		newFrame.data[i] = 0;
	
	return newFrame;
80002b58:	33 c8       	mov	r8,60
80002b5a:	ba 98       	st.b	sp[0x1],r8
80002b5c:	37 e8       	mov	r8,126
80002b5e:	ba a8       	st.b	sp[0x2],r8
80002b60:	ba bb       	st.b	sp[0x3],r11
80002b62:	ba ca       	st.b	sp[0x4],r10
80002b64:	e0 6a 01 03 	mov	r10,259
80002b68:	fa cb ff ff 	sub	r11,sp,-1
80002b6c:	0e 9c       	mov	r12,r7
80002b6e:	f0 1f 00 04 	mcall	80002b7c <newEmptyTestCmdFrame+0x44>
}
80002b72:	0e 9c       	mov	r12,r7
80002b74:	2b fd       	sub	sp,-260
80002b76:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b7a:	00 00       	add	r0,r0
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	33 f0       	mov	r0,63

80002b80 <rcvTestCmdAnswer>:
		}
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
80002b80:	d4 31       	pushm	r0-r7,lr
80002b82:	fa cd 01 14 	sub	sp,sp,276
80002b86:	18 92       	mov	r2,r12
80002b88:	30 03       	mov	r3,0
80002b8a:	06 95       	mov	r5,r3
80002b8c:	30 17       	mov	r7,1
	uint16_t c = 0, dataSize = 0;
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{		
		rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
80002b8e:	fe 74 28 00 	mov	r4,-55296
			cmdAwsFrameRcv.dataSize = 0;
			cmdAwsFrameRcv.testType = 0;
			return cmdAwsFrameRcv;
		}

		switch( automataState )
80002b92:	30 26       	mov	r6,2
80002b94:	30 31       	mov	r1,3
					c++;
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == dataSize )
80002b96:	06 90       	mov	r0,r3
		}
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
80002b98:	50 03       	stdsp	sp[0x0],r3
80002b9a:	c0 48       	rjmp	80002ba2 <rcvTestCmdAnswer+0x22>
80002b9c:	00 93       	mov	r3,r0
80002b9e:	40 05       	lddsp	r5,sp[0x0]
80002ba0:	30 17       	mov	r7,1
	uint16_t c = 0, dataSize = 0;
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{		
		rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
80002ba2:	08 9c       	mov	r12,r4
80002ba4:	f0 1f 00 34 	mcall	80002c74 <rcvTestCmdAnswer+0xf4>
		//rcvByte = usart_getchar( TESTS_EXEC_CTRL_UART );
		
		if(rcvByte == USART_TIMEOUT || rcvByte == USART_FAILURE)
80002ba8:	5b fc       	cp.w	r12,-1
80002baa:	c0 c1       	brne	80002bc2 <rcvTestCmdAnswer+0x42>
		{
			print_dbg("\n\ntests_execution_control - rcvTestCmdAnswer - USART_TIMEOUT OR USART_FAILURE");
80002bac:	4b 3b       	lddpc	r11,80002c78 <rcvTestCmdAnswer+0xf8>
80002bae:	fc 7c 14 00 	mov	r12,-191488
80002bb2:	f0 1f 00 33 	mcall	80002c7c <rcvTestCmdAnswer+0xfc>
			cmdAwsFrameRcv.magicCode = 0;
			cmdAwsFrameRcv.dataSize = 0;
			cmdAwsFrameRcv.testType = 0;
			return cmdAwsFrameRcv;
80002bb6:	30 08       	mov	r8,0
80002bb8:	a4 88       	st.b	r2[0x0],r8
80002bba:	a4 98       	st.b	r2[0x1],r8
80002bbc:	a4 b8       	st.b	r2[0x3],r8
80002bbe:	a4 a8       	st.b	r2[0x2],r8
80002bc0:	c5 78       	rjmp	80002c6e <rcvTestCmdAnswer+0xee>
		}

		switch( automataState )
80002bc2:	ec 07 18 00 	cp.b	r7,r6
80002bc6:	c1 50       	breq	80002bf0 <rcvTestCmdAnswer+0x70>
80002bc8:	e0 8b 00 07 	brhi	80002bd6 <rcvTestCmdAnswer+0x56>
80002bcc:	30 18       	mov	r8,1
80002bce:	f0 07 18 00 	cp.b	r7,r8
80002bd2:	ce 51       	brne	80002b9c <rcvTestCmdAnswer+0x1c>
80002bd4:	c0 98       	rjmp	80002be6 <rcvTestCmdAnswer+0x66>
80002bd6:	e2 07 18 00 	cp.b	r7,r1
80002bda:	c1 20       	breq	80002bfe <rcvTestCmdAnswer+0x7e>
80002bdc:	30 48       	mov	r8,4
80002bde:	f0 07 18 00 	cp.b	r7,r8
80002be2:	cd d1       	brne	80002b9c <rcvTestCmdAnswer+0x1c>
80002be4:	c2 78       	rjmp	80002c32 <rcvTestCmdAnswer+0xb2>
		{
		case 1:
			if( rcvByte == 0xE7 )
80002be6:	e0 4c 00 e7 	cp.w	r12,231
80002bea:	f9 b7 00 02 	moveq	r7,2
80002bee:	cd ab       	rjmp	80002ba2 <rcvTestCmdAnswer+0x22>
				automataState = 2;
			break;

		case 2:
			if( rcvByte == 0xC3 )
80002bf0:	e0 4c 00 c3 	cp.w	r12,195
80002bf4:	f9 b7 00 03 	moveq	r7,3
80002bf8:	f9 b7 01 01 	movne	r7,1
80002bfc:	cd 3b       	rjmp	80002ba2 <rcvTestCmdAnswer+0x22>
			else
				automataState = 1;
			break;

		case 3:
			switch( c )
80002bfe:	30 08       	mov	r8,0
80002c00:	f0 05 19 00 	cp.h	r5,r8
80002c04:	c0 60       	breq	80002c10 <rcvTestCmdAnswer+0x90>
80002c06:	30 19       	mov	r9,1
80002c08:	f2 05 19 00 	cp.h	r5,r9
80002c0c:	cc b1       	brne	80002ba2 <rcvTestCmdAnswer+0x22>
80002c0e:	c0 58       	rjmp	80002c18 <rcvTestCmdAnswer+0x98>
			{
			case 0:
				/* Recebendo o MSByte do testCaseNumber */
				testType = rcvByte;
80002c10:	5c 5c       	castu.b	r12
80002c12:	50 3c       	stdsp	sp[0xc],r12
80002c14:	30 15       	mov	r5,1
				c++;
				break;
80002c16:	cc 6b       	rjmp	80002ba2 <rcvTestCmdAnswer+0x22>

			case 1:
				/* Recebendo o MSByte do N */
				dataSize = rcvByte;
80002c18:	e7 dc b0 10 	bfexts	r3,r12,0x0,0x10
				automataState = 4;
				c = 0;
				
				/* Comando identificado, agora basta receber os parametros */
				cmdAwsFrameRcv = newEmptyTestCmdFrame( testType, dataSize );
80002c1c:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
80002c20:	40 3b       	lddsp	r11,sp[0xc]
80002c22:	04 9c       	mov	r12,r2
80002c24:	f0 1f 00 17 	mcall	80002c80 <rcvTestCmdAnswer+0x100>
80002c28:	05 b9       	ld.ub	r9,r2[0x3]
80002c2a:	05 a8       	ld.ub	r8,r2[0x2]
				 * problemas, pois o automato identifica apenas frames com o parametro 0xE7C3.
				 */
				cmdAwsFrameRcv.magicCode = 0xE7C3;
				
				/* Caso nao irah ser recebido nenhum dado extra, o programa nao pode continuar aguardando*/
				if( dataSize == 0)
80002c2c:	58 03       	cp.w	r3,0
80002c2e:	c1 60       	breq	80002c5a <rcvTestCmdAnswer+0xda>
80002c30:	c1 08       	rjmp	80002c50 <rcvTestCmdAnswer+0xd0>
				break;
			}
			break;

			case 4:
				if( c < dataSize )
80002c32:	ea 03 19 00 	cp.h	r3,r5
80002c36:	e0 88 00 09 	brls	80002c48 <rcvTestCmdAnswer+0xc8>
				{
					cmdAwsFrameRcv.data[c] = rcvByte;
80002c3a:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
80002c3e:	e4 08 00 08 	add	r8,r2,r8
80002c42:	b0 cc       	st.b	r8[0x4],r12
					c++;
80002c44:	2f f5       	sub	r5,-1
80002c46:	5c 85       	casts.h	r5
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == dataSize )
80002c48:	e6 05 19 00 	cp.h	r5,r3
80002c4c:	ca b1       	brne	80002ba2 <rcvTestCmdAnswer+0x22>
80002c4e:	c0 88       	rjmp	80002c5e <rcvTestCmdAnswer+0xde>
80002c50:	50 19       	stdsp	sp[0x4],r9
80002c52:	50 28       	stdsp	sp[0x8],r8
80002c54:	00 95       	mov	r5,r0
80002c56:	30 47       	mov	r7,4
80002c58:	ca 5b       	rjmp	80002ba2 <rcvTestCmdAnswer+0x22>
80002c5a:	50 19       	stdsp	sp[0x4],r9
80002c5c:	50 28       	stdsp	sp[0x8],r8
				dataSize = 0;
				break;
		}
	}
	
	return cmdAwsFrameRcv;
80002c5e:	3e 78       	mov	r8,-25
80002c60:	a4 88       	st.b	r2[0x0],r8
80002c62:	3c 38       	mov	r8,-61
80002c64:	a4 98       	st.b	r2[0x1],r8
80002c66:	40 18       	lddsp	r8,sp[0x4]
80002c68:	a4 b8       	st.b	r2[0x3],r8
80002c6a:	40 29       	lddsp	r9,sp[0x8]
80002c6c:	a4 a9       	st.b	r2[0x2],r9
80002c6e:	04 9c       	mov	r12,r2
80002c70:	2b bd       	sub	sp,-276
80002c72:	d8 32       	popm	r0-r7,pc
80002c74:	80 00       	ld.sh	r0,r0[0x0]
80002c76:	31 4c       	mov	r12,20
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	a8 78       	st.h	r4[0xe],r8
80002c7c:	80 00       	ld.sh	r0,r0[0x0]
80002c7e:	31 8c       	mov	r12,24
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b 38       	sub	r8,-77

80002c84 <sendTestCmdFrame>:
	for(i = 0; i < frame.dataSize; i++)
		frame.data[i] = 0;
}

void sendTestCmdFrame(cmd_frame_t frame)
{
80002c84:	eb cd 40 fc 	pushm	r2-r7,lr
80002c88:	fa c4 ff e4 	sub	r4,sp,-28
80002c8c:	88 07       	ld.sh	r7,r4[0x0]
80002c8e:	09 a6       	ld.ub	r6,r4[0x2]
80002c90:	09 b5       	ld.ub	r5,r4[0x3]
	int aux, i;
	cmd_frame_t anwser;
	
	/* Send cmdCode */
	aux = (frame.magicCode>>8);	
	if( USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c92:	f7 d7 c1 08 	bfextu	r11,r7,0x8,0x8
80002c96:	fe 7c 28 00 	mov	r12,-55296
80002c9a:	f0 1f 00 26 	mcall	80002d30 <sendTestCmdFrame+0xac>
80002c9e:	5b fc       	cp.w	r12,-1
80002ca0:	c0 61       	brne	80002cac <sendTestCmdFrame+0x28>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002ca2:	4a 5b       	lddpc	r11,80002d34 <sendTestCmdFrame+0xb0>
80002ca4:	fc 7c 14 00 	mov	r12,-191488
80002ca8:	f0 1f 00 24 	mcall	80002d38 <sendTestCmdFrame+0xb4>
	}
	
	aux = (frame.magicCode&0x00FF);
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002cac:	0e 9b       	mov	r11,r7
80002cae:	5c 5b       	castu.b	r11
80002cb0:	fe 7c 28 00 	mov	r12,-55296
80002cb4:	f0 1f 00 1f 	mcall	80002d30 <sendTestCmdFrame+0xac>
80002cb8:	5b fc       	cp.w	r12,-1
80002cba:	c0 61       	brne	80002cc6 <sendTestCmdFrame+0x42>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002cbc:	49 eb       	lddpc	r11,80002d34 <sendTestCmdFrame+0xb0>
80002cbe:	fc 7c 14 00 	mov	r12,-191488
80002cc2:	f0 1f 00 1e 	mcall	80002d38 <sendTestCmdFrame+0xb4>
	}
	
	/* Send testType */
	aux = frame.testType;
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002cc6:	0c 9b       	mov	r11,r6
80002cc8:	fe 7c 28 00 	mov	r12,-55296
80002ccc:	f0 1f 00 19 	mcall	80002d30 <sendTestCmdFrame+0xac>
80002cd0:	5b fc       	cp.w	r12,-1
80002cd2:	c0 61       	brne	80002cde <sendTestCmdFrame+0x5a>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002cd4:	49 8b       	lddpc	r11,80002d34 <sendTestCmdFrame+0xb0>
80002cd6:	fc 7c 14 00 	mov	r12,-191488
80002cda:	f0 1f 00 18 	mcall	80002d38 <sendTestCmdFrame+0xb4>
	}
	
	/* Send dataSize */
	aux = frame.dataSize;
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002cde:	0a 9b       	mov	r11,r5
80002ce0:	fe 7c 28 00 	mov	r12,-55296
80002ce4:	f0 1f 00 13 	mcall	80002d30 <sendTestCmdFrame+0xac>
80002ce8:	5b fc       	cp.w	r12,-1
80002cea:	c0 61       	brne	80002cf6 <sendTestCmdFrame+0x72>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002cec:	49 2b       	lddpc	r11,80002d34 <sendTestCmdFrame+0xb0>
80002cee:	fc 7c 14 00 	mov	r12,-191488
80002cf2:	f0 1f 00 12 	mcall	80002d38 <sendTestCmdFrame+0xb4>
	}
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
80002cf6:	58 05       	cp.w	r5,0
80002cf8:	e0 8a 00 19 	brle	80002d2a <sendTestCmdFrame+0xa6>
80002cfc:	e8 c6 ff fc 	sub	r6,r4,-4
80002d00:	30 07       	mov	r7,0
	{
		aux = frame.data[i];		
		if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002d02:	fe 74 28 00 	mov	r4,-55296
		{
			print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002d06:	48 c3       	lddpc	r3,80002d34 <sendTestCmdFrame+0xb0>
80002d08:	fc 72 14 00 	mov	r2,-191488
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
	{
		aux = frame.data[i];		
		if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002d0c:	0d 8b       	ld.ub	r11,r6[0x0]
80002d0e:	08 9c       	mov	r12,r4
80002d10:	f0 1f 00 08 	mcall	80002d30 <sendTestCmdFrame+0xac>
80002d14:	5b fc       	cp.w	r12,-1
80002d16:	c0 51       	brne	80002d20 <sendTestCmdFrame+0x9c>
		{
			print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002d18:	06 9b       	mov	r11,r3
80002d1a:	04 9c       	mov	r12,r2
80002d1c:	f0 1f 00 07 	mcall	80002d38 <sendTestCmdFrame+0xb4>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
	}
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
80002d20:	2f f7       	sub	r7,-1
80002d22:	2f f6       	sub	r6,-1
80002d24:	0e 35       	cp.w	r5,r7
80002d26:	fe 99 ff f3 	brgt	80002d0c <sendTestCmdFrame+0x88>
80002d2a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002d2e:	00 00       	add	r0,r0
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	30 d0       	mov	r0,13
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	a8 c8       	st.b	r4[0x4],r8
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	31 8c       	mov	r12,24

80002d3c <initTestsExecContrInterface>:
		print_dbg(textAux);
	}
}

void initTestsExecContrInterface()
{
80002d3c:	d4 01       	pushm	lr
	gpio_enable_module_pin( USART0_1_TX_PIN, USART0_1_TX_FUNCTION );
80002d3e:	30 3b       	mov	r11,3
80002d40:	35 0c       	mov	r12,80
80002d42:	f0 1f 00 0b 	mcall	80002d6c <initTestsExecContrInterface+0x30>
	gpio_enable_module_pin( USART0_1_RX_PIN, USART0_1_RX_FUNCTION );
80002d46:	30 3b       	mov	r11,3
80002d48:	34 fc       	mov	r12,79
80002d4a:	f0 1f 00 09 	mcall	80002d6c <initTestsExecContrInterface+0x30>
	
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
80002d4e:	e0 6a 24 00 	mov	r10,9216
80002d52:	ea 1a 00 f4 	orh	r10,0xf4
80002d56:	48 7b       	lddpc	r11,80002d70 <initTestsExecContrInterface+0x34>
80002d58:	fe 7c 28 00 	mov	r12,-55296
80002d5c:	f0 1f 00 06 	mcall	80002d74 <initTestsExecContrInterface+0x38>
80002d60:	c0 41       	brne	80002d68 <initTestsExecContrInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED1 );
80002d62:	30 9c       	mov	r12,9
80002d64:	f0 1f 00 05 	mcall	80002d78 <initTestsExecContrInterface+0x3c>
80002d68:	d8 02       	popm	pc
80002d6a:	00 00       	add	r0,r0
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	2d b0       	sub	r0,-37
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	a8 6c       	st.h	r4[0xc],r12
80002d74:	80 00       	ld.sh	r0,r0[0x0]
80002d76:	31 dc       	mov	r12,29
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	2f 74       	sub	r4,-9

80002d7c <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002d7c:	fe 68 00 00 	mov	r8,-131072
80002d80:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002d82:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002d86:	91 09       	st.w	r8[0x0],r9
}
80002d88:	5e fc       	retal	r12
80002d8a:	d7 03       	nop

80002d8c <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002d8c:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002d8e:	e0 68 8a 3f 	mov	r8,35391
80002d92:	ea 18 01 f7 	orh	r8,0x1f7
80002d96:	10 3c       	cp.w	r12,r8
80002d98:	e0 88 00 06 	brls	80002da4 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80002d9c:	30 1c       	mov	r12,1
80002d9e:	f0 1f 00 04 	mcall	80002dac <flashc_set_bus_freq+0x20>
80002da2:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80002da4:	30 0c       	mov	r12,0
80002da6:	f0 1f 00 02 	mcall	80002dac <flashc_set_bus_freq+0x20>
80002daa:	d8 02       	popm	pc
80002dac:	80 00       	ld.sh	r0,r0[0x0]
80002dae:	2d 7c       	sub	r12,-41

80002db0 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002db0:	f8 08 16 05 	lsr	r8,r12,0x5
80002db4:	a9 78       	lsl	r8,0x9
80002db6:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80002dba:	58 7b       	cp.w	r11,7
80002dbc:	e0 8b 00 05 	brhi	80002dc6 <gpio_enable_module_pin+0x16>
80002dc0:	4a 09       	lddpc	r9,80002e40 <gpio_enable_module_pin+0x90>
80002dc2:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002dc6:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002dc8:	30 19       	mov	r9,1
80002dca:	f2 0c 09 49 	lsl	r9,r9,r12
80002dce:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002dd0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dd2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002dd4:	c3 18       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002dd6:	30 19       	mov	r9,1
80002dd8:	f2 0c 09 49 	lsl	r9,r9,r12
80002ddc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002dde:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002de0:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002de2:	c2 a8       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002de4:	30 19       	mov	r9,1
80002de6:	f2 0c 09 49 	lsl	r9,r9,r12
80002dea:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002dec:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dee:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002df0:	c2 38       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002df2:	30 19       	mov	r9,1
80002df4:	f2 0c 09 49 	lsl	r9,r9,r12
80002df8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002dfa:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dfc:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002dfe:	c1 c8       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e00:	30 19       	mov	r9,1
80002e02:	f2 0c 09 49 	lsl	r9,r9,r12
80002e06:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e08:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e0a:	91 d9       	st.w	r8[0x34],r9
		break;
80002e0c:	c1 58       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e0e:	30 19       	mov	r9,1
80002e10:	f2 0c 09 49 	lsl	r9,r9,r12
80002e14:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e16:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e18:	91 d9       	st.w	r8[0x34],r9
		break;
80002e1a:	c0 e8       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e1c:	30 19       	mov	r9,1
80002e1e:	f2 0c 09 49 	lsl	r9,r9,r12
80002e22:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e24:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e26:	91 d9       	st.w	r8[0x34],r9
		break;
80002e28:	c0 78       	rjmp	80002e36 <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e2a:	30 19       	mov	r9,1
80002e2c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e30:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e32:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002e34:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002e36:	30 19       	mov	r9,1
80002e38:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e3c:	91 2c       	st.w	r8[0x8],r12
80002e3e:	5e fd       	retal	0
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	a9 40       	asr	r0,0x8

80002e44 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002e44:	f8 08 16 05 	lsr	r8,r12,0x5
80002e48:	a9 78       	lsl	r8,0x9
80002e4a:	e0 28 e0 00 	sub	r8,57344

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80002e4e:	16 99       	mov	r9,r11
80002e50:	e2 19 00 08 	andl	r9,0x8,COH
80002e54:	c0 70       	breq	80002e62 <gpio_configure_pin+0x1e>
		gpio_port->pders = 1 << (pin & 0x1F);
80002e56:	30 19       	mov	r9,1
80002e58:	f2 0c 09 49 	lsl	r9,r9,r12
80002e5c:	f1 49 00 84 	st.w	r8[132],r9
80002e60:	c0 68       	rjmp	80002e6c <gpio_configure_pin+0x28>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80002e62:	30 19       	mov	r9,1
80002e64:	f2 0c 09 49 	lsl	r9,r9,r12
80002e68:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002e6c:	16 99       	mov	r9,r11
80002e6e:	e2 19 00 04 	andl	r9,0x4,COH
80002e72:	c0 70       	breq	80002e80 <gpio_configure_pin+0x3c>
		gpio_port->puers = 1 << (pin & 0x1F);
80002e74:	30 19       	mov	r9,1
80002e76:	f2 0c 09 49 	lsl	r9,r9,r12
80002e7a:	f1 49 00 74 	st.w	r8[116],r9
80002e7e:	c0 68       	rjmp	80002e8a <gpio_configure_pin+0x46>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002e80:	30 19       	mov	r9,1
80002e82:	f2 0c 09 49 	lsl	r9,r9,r12
80002e86:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80002e8a:	16 99       	mov	r9,r11
80002e8c:	e2 19 00 40 	andl	r9,0x40,COH
80002e90:	c0 70       	breq	80002e9e <gpio_configure_pin+0x5a>
		gpio_port->odmers = 1 << (pin & 0x1F);
80002e92:	30 19       	mov	r9,1
80002e94:	f2 0c 09 49 	lsl	r9,r9,r12
80002e98:	f1 49 00 e4 	st.w	r8[228],r9
80002e9c:	c0 68       	rjmp	80002ea8 <gpio_configure_pin+0x64>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80002e9e:	30 19       	mov	r9,1
80002ea0:	f2 0c 09 49 	lsl	r9,r9,r12
80002ea4:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
80002ea8:	16 99       	mov	r9,r11
80002eaa:	e2 19 00 10 	andl	r9,0x10,COH
80002eae:	c0 70       	breq	80002ebc <gpio_configure_pin+0x78>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80002eb0:	30 19       	mov	r9,1
80002eb2:	f2 0c 09 49 	lsl	r9,r9,r12
80002eb6:	f1 49 01 04 	st.w	r8[260],r9
80002eba:	c0 68       	rjmp	80002ec6 <gpio_configure_pin+0x82>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80002ebc:	30 19       	mov	r9,1
80002ebe:	f2 0c 09 49 	lsl	r9,r9,r12
80002ec2:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80002ec6:	16 99       	mov	r9,r11
80002ec8:	e2 19 00 20 	andl	r9,0x20,COH
80002ecc:	c0 70       	breq	80002eda <gpio_configure_pin+0x96>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80002ece:	30 19       	mov	r9,1
80002ed0:	f2 0c 09 49 	lsl	r9,r9,r12
80002ed4:	f1 49 01 14 	st.w	r8[276],r9
80002ed8:	c0 68       	rjmp	80002ee4 <gpio_configure_pin+0xa0>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
80002eda:	30 19       	mov	r9,1
80002edc:	f2 0c 09 49 	lsl	r9,r9,r12
80002ee0:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002ee4:	16 99       	mov	r9,r11
80002ee6:	e2 19 00 80 	andl	r9,0x80,COH
80002eea:	c2 40       	breq	80002f32 <gpio_configure_pin+0xee>
		if (flags & GPIO_BOTHEDGES) {
80002eec:	16 99       	mov	r9,r11
80002eee:	e2 19 01 80 	andl	r9,0x180,COH
80002ef2:	c0 90       	breq	80002f04 <gpio_configure_pin+0xc0>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002ef4:	30 19       	mov	r9,1
80002ef6:	f2 0c 09 49 	lsl	r9,r9,r12
80002efa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002efe:	f1 49 00 b8 	st.w	r8[184],r9
80002f02:	c1 88       	rjmp	80002f32 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_RISING) {
80002f04:	16 99       	mov	r9,r11
80002f06:	e2 19 02 80 	andl	r9,0x280,COH
80002f0a:	c0 90       	breq	80002f1c <gpio_configure_pin+0xd8>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002f0c:	30 19       	mov	r9,1
80002f0e:	f2 0c 09 49 	lsl	r9,r9,r12
80002f12:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002f16:	f1 49 00 b8 	st.w	r8[184],r9
80002f1a:	c0 c8       	rjmp	80002f32 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_FALLING) {
80002f1c:	16 99       	mov	r9,r11
80002f1e:	e2 19 03 80 	andl	r9,0x380,COH
80002f22:	c0 80       	breq	80002f32 <gpio_configure_pin+0xee>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002f24:	30 19       	mov	r9,1
80002f26:	f2 0c 09 49 	lsl	r9,r9,r12
80002f2a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002f2e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002f32:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002f36:	c1 50       	breq	80002f60 <gpio_configure_pin+0x11c>
		if (flags & GPIO_INIT_HIGH) {
80002f38:	e2 1b 00 02 	andl	r11,0x2,COH
80002f3c:	c0 70       	breq	80002f4a <gpio_configure_pin+0x106>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002f3e:	30 19       	mov	r9,1
80002f40:	f2 0c 09 49 	lsl	r9,r9,r12
80002f44:	f1 49 00 54 	st.w	r8[84],r9
80002f48:	c0 68       	rjmp	80002f54 <gpio_configure_pin+0x110>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002f4a:	30 19       	mov	r9,1
80002f4c:	f2 0c 09 49 	lsl	r9,r9,r12
80002f50:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002f54:	30 19       	mov	r9,1
80002f56:	f2 0c 09 49 	lsl	r9,r9,r12
80002f5a:	f1 49 00 44 	st.w	r8[68],r9
80002f5e:	c0 68       	rjmp	80002f6a <gpio_configure_pin+0x126>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002f60:	30 19       	mov	r9,1
80002f62:	f2 0c 09 49 	lsl	r9,r9,r12
80002f66:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002f6a:	30 19       	mov	r9,1
80002f6c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f70:	91 1c       	st.w	r8[0x4],r12
}
80002f72:	5e fc       	retal	r12

80002f74 <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f74:	f8 08 16 05 	lsr	r8,r12,0x5
80002f78:	a9 78       	lsl	r8,0x9
80002f7a:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002f7e:	30 19       	mov	r9,1
80002f80:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f84:	f1 4c 00 58 	st.w	r8[88],r12
}
80002f88:	5e fc       	retal	r12

80002f8a <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f8a:	f8 08 16 05 	lsr	r8,r12,0x5
80002f8e:	a9 78       	lsl	r8,0x9
80002f90:	e0 28 e0 00 	sub	r8,57344
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002f94:	30 19       	mov	r9,1
80002f96:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f9a:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002f9e:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002fa2:	91 1c       	st.w	r8[0x4],r12
}
80002fa4:	5e fc       	retal	r12
80002fa6:	d7 03       	nop

80002fa8 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002fa8:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002fac:	49 99       	lddpc	r9,80003010 <INTC_register_interrupt+0x68>
80002fae:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002fb2:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002fb6:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002fb8:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002fbc:	58 0a       	cp.w	r10,0
80002fbe:	c0 91       	brne	80002fd0 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002fc0:	49 59       	lddpc	r9,80003014 <INTC_register_interrupt+0x6c>
80002fc2:	49 6a       	lddpc	r10,80003018 <INTC_register_interrupt+0x70>
80002fc4:	12 1a       	sub	r10,r9
80002fc6:	fe 79 00 00 	mov	r9,-65536
80002fca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fce:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002fd0:	58 1a       	cp.w	r10,1
80002fd2:	c0 a1       	brne	80002fe6 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002fd4:	49 09       	lddpc	r9,80003014 <INTC_register_interrupt+0x6c>
80002fd6:	49 2a       	lddpc	r10,8000301c <INTC_register_interrupt+0x74>
80002fd8:	12 1a       	sub	r10,r9
80002fda:	bf aa       	sbr	r10,0x1e
80002fdc:	fe 79 00 00 	mov	r9,-65536
80002fe0:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fe4:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002fe6:	58 2a       	cp.w	r10,2
80002fe8:	c0 a1       	brne	80002ffc <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002fea:	48 b9       	lddpc	r9,80003014 <INTC_register_interrupt+0x6c>
80002fec:	48 da       	lddpc	r10,80003020 <INTC_register_interrupt+0x78>
80002fee:	12 1a       	sub	r10,r9
80002ff0:	bf ba       	sbr	r10,0x1f
80002ff2:	fe 79 00 00 	mov	r9,-65536
80002ff6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002ffa:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002ffc:	48 69       	lddpc	r9,80003014 <INTC_register_interrupt+0x6c>
80002ffe:	48 aa       	lddpc	r10,80003024 <INTC_register_interrupt+0x7c>
80003000:	12 1a       	sub	r10,r9
80003002:	ea 1a c0 00 	orh	r10,0xc000
80003006:	fe 79 00 00 	mov	r9,-65536
8000300a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000300e:	5e fc       	retal	r12
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	a9 60       	lsl	r0,0x8
80003014:	80 00       	ld.sh	r0,r0[0x0]
80003016:	8e 00       	ld.sh	r0,r7[0x0]
80003018:	80 00       	ld.sh	r0,r0[0x0]
8000301a:	8f 04       	st.w	r7[0x0],r4
8000301c:	80 00       	ld.sh	r0,r0[0x0]
8000301e:	8f 12       	st.w	r7[0x4],r2
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	8f 20       	st.w	r7[0x8],r0
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	8f 2e       	st.w	r7[0x8],lr

80003028 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003028:	fe 78 00 00 	mov	r8,-65536
8000302c:	e0 69 00 83 	mov	r9,131
80003030:	f2 0c 01 0c 	sub	r12,r9,r12
80003034:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003038:	f2 ca ff c0 	sub	r10,r9,-64
8000303c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003040:	58 08       	cp.w	r8,0
80003042:	c0 21       	brne	80003046 <_get_interrupt_handler+0x1e>
80003044:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003046:	f0 08 12 00 	clz	r8,r8
8000304a:	48 5a       	lddpc	r10,8000305c <_get_interrupt_handler+0x34>
8000304c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003050:	f0 08 11 1f 	rsub	r8,r8,31
80003054:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003056:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000305a:	5e fc       	retal	r12
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	a9 60       	lsl	r0,0x8

80003060 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003060:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003062:	f6 08 15 04 	lsl	r8,r11,0x4
80003066:	14 38       	cp.w	r8,r10
80003068:	f9 b8 08 10 	movls	r8,16
8000306c:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003070:	f0 0b 02 4b 	mul	r11,r8,r11
80003074:	f6 09 16 01 	lsr	r9,r11,0x1
80003078:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
8000307c:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003080:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003084:	f2 cb 00 01 	sub	r11,r9,1
80003088:	e0 4b ff fe 	cp.w	r11,65534
8000308c:	e0 88 00 03 	brls	80003092 <usart_set_async_baudrate+0x32>
80003090:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003092:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003094:	e8 6e 00 00 	mov	lr,524288
80003098:	59 08       	cp.w	r8,16
8000309a:	fc 08 17 10 	movne	r8,lr
8000309e:	f9 b8 00 00 	moveq	r8,0
800030a2:	e4 1b ff f7 	andh	r11,0xfff7
800030a6:	e0 1b fe cf 	andl	r11,0xfecf
800030aa:	16 48       	or	r8,r11
800030ac:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800030ae:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800030b2:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800030b6:	99 89       	st.w	r12[0x20],r9
800030b8:	d8 0a       	popm	pc,r12=0

800030ba <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800030ba:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800030bc:	e2 18 00 02 	andl	r8,0x2,COH
800030c0:	c0 31       	brne	800030c6 <usart_write_char+0xc>
800030c2:	30 2c       	mov	r12,2
800030c4:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800030c6:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800030ca:	99 7b       	st.w	r12[0x1c],r11
800030cc:	5e fd       	retal	0
800030ce:	d7 03       	nop

800030d0 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800030d0:	eb cd 40 e0 	pushm	r5-r7,lr
800030d4:	18 96       	mov	r6,r12
800030d6:	16 95       	mov	r5,r11
800030d8:	e0 77 86 9f 	mov	r7,99999
800030dc:	c0 68       	rjmp	800030e8 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800030de:	58 07       	cp.w	r7,0
800030e0:	c0 31       	brne	800030e6 <usart_putchar+0x16>
800030e2:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
800030e6:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800030e8:	0a 9b       	mov	r11,r5
800030ea:	0c 9c       	mov	r12,r6
800030ec:	f0 1f 00 03 	mcall	800030f8 <usart_putchar+0x28>
800030f0:	cf 71       	brne	800030de <usart_putchar+0xe>

  return USART_SUCCESS;
}
800030f2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800030f6:	00 00       	add	r0,r0
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	30 ba       	mov	r10,11

800030fc <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
800030fc:	78 58       	ld.w	r8,r12[0x14]
800030fe:	e2 18 00 e0 	andl	r8,0xe0,COH
80003102:	c0 30       	breq	80003108 <usart_read_char+0xc>
80003104:	30 4c       	mov	r12,4
80003106:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80003108:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8000310a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000310e:	c0 31       	brne	80003114 <usart_read_char+0x18>
80003110:	30 3c       	mov	r12,3
80003112:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80003114:	78 68       	ld.w	r8,r12[0x18]
80003116:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8000311a:	97 08       	st.w	r11[0x0],r8
8000311c:	5e fd       	retal	0
8000311e:	d7 03       	nop

80003120 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
80003120:	eb cd 40 c0 	pushm	r6-r7,lr
80003124:	20 1d       	sub	sp,4
80003126:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80003128:	1a 97       	mov	r7,sp
8000312a:	1a 9b       	mov	r11,sp
8000312c:	0c 9c       	mov	r12,r6
8000312e:	f0 1f 00 07 	mcall	80003148 <usart_getchar+0x28>
80003132:	58 3c       	cp.w	r12,3
80003134:	cf b0       	breq	8000312a <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
80003136:	58 4c       	cp.w	r12,4
80003138:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
8000313c:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80003140:	2f fd       	sub	sp,-4
80003142:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003146:	00 00       	add	r0,r0
80003148:	80 00       	ld.sh	r0,r0[0x0]
8000314a:	30 fc       	mov	r12,15

8000314c <usart_getchar_timeout>:

int usart_getchar_timeout(volatile avr32_usart_t *usart)
{
8000314c:	eb cd 40 e0 	pushm	r5-r7,lr
80003150:	20 1d       	sub	sp,4
80003152:	18 96       	mov	r6,r12
80003154:	e0 67 96 80 	mov	r7,38528
80003158:	ea 17 00 98 	orh	r7,0x98
	int c, ret, timeout = 10000000;

	while ( ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY) && timeout > 0)
8000315c:	1a 95       	mov	r5,sp
8000315e:	c0 28       	rjmp	80003162 <usart_getchar_timeout+0x16>
		timeout--;
80003160:	20 17       	sub	r7,1

int usart_getchar_timeout(volatile avr32_usart_t *usart)
{
	int c, ret, timeout = 10000000;

	while ( ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY) && timeout > 0)
80003162:	1a 9b       	mov	r11,sp
80003164:	0c 9c       	mov	r12,r6
80003166:	f0 1f 00 09 	mcall	80003188 <usart_getchar_timeout+0x3c>
8000316a:	58 3c       	cp.w	r12,3
8000316c:	c0 41       	brne	80003174 <usart_getchar_timeout+0x28>
8000316e:	58 07       	cp.w	r7,0
80003170:	cf 81       	brne	80003160 <usart_getchar_timeout+0x14>
80003172:	c0 38       	rjmp	80003178 <usart_getchar_timeout+0x2c>
		timeout--;

	if (ret == USART_RX_ERROR)
80003174:	58 4c       	cp.w	r12,4
80003176:	c0 50       	breq	80003180 <usart_getchar_timeout+0x34>
		return USART_FAILURE;

	if(timeout == 0)
80003178:	58 07       	cp.w	r7,0
8000317a:	c0 30       	breq	80003180 <usart_getchar_timeout+0x34>
		return USART_TIMEOUT;

	return c;
8000317c:	40 0c       	lddsp	r12,sp[0x0]
8000317e:	c0 28       	rjmp	80003182 <usart_getchar_timeout+0x36>
80003180:	3f fc       	mov	r12,-1
}
80003182:	2f fd       	sub	sp,-4
80003184:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	30 fc       	mov	r12,15

8000318c <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8000318c:	eb cd 40 c0 	pushm	r6-r7,lr
80003190:	18 96       	mov	r6,r12
80003192:	16 97       	mov	r7,r11
  while (*string != '\0')
80003194:	17 8b       	ld.ub	r11,r11[0x0]
80003196:	58 0b       	cp.w	r11,0
80003198:	c0 80       	breq	800031a8 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
8000319a:	2f f7       	sub	r7,-1
8000319c:	0c 9c       	mov	r12,r6
8000319e:	f0 1f 00 04 	mcall	800031ac <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800031a2:	0f 8b       	ld.ub	r11,r7[0x0]
800031a4:	58 0b       	cp.w	r11,0
800031a6:	cf a1       	brne	8000319a <usart_write_line+0xe>
800031a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031ac:	80 00       	ld.sh	r0,r0[0x0]
800031ae:	30 d0       	mov	r0,13

800031b0 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800031b0:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800031b4:	e6 18 00 01 	andh	r8,0x1,COH
800031b8:	c0 71       	brne	800031c6 <usart_reset+0x16>
800031ba:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800031bc:	3f f8       	mov	r8,-1
800031be:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800031c0:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800031c2:	d5 03       	csrf	0x10
800031c4:	c0 48       	rjmp	800031cc <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800031c6:	3f f8       	mov	r8,-1
800031c8:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800031ca:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800031cc:	30 08       	mov	r8,0
800031ce:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
800031d0:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
800031d2:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800031d4:	ea 68 61 0c 	mov	r8,680204
800031d8:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800031da:	5e fc       	retal	r12

800031dc <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800031dc:	eb cd 40 e0 	pushm	r5-r7,lr
800031e0:	18 96       	mov	r6,r12
800031e2:	16 97       	mov	r7,r11
800031e4:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800031e6:	f0 1f 00 2f 	mcall	800032a0 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
800031ea:	58 07       	cp.w	r7,0
800031ec:	c5 80       	breq	8000329c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
800031ee:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800031f0:	30 49       	mov	r9,4
800031f2:	f2 08 18 00 	cp.b	r8,r9
800031f6:	e0 88 00 53 	brls	8000329c <usart_init_rs232+0xc0>
800031fa:	30 99       	mov	r9,9
800031fc:	f2 08 18 00 	cp.b	r8,r9
80003200:	e0 8b 00 4e 	brhi	8000329c <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003204:	0f d9       	ld.ub	r9,r7[0x5]
80003206:	30 78       	mov	r8,7
80003208:	f0 09 18 00 	cp.b	r9,r8
8000320c:	e0 8b 00 48 	brhi	8000329c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003210:	8e 39       	ld.sh	r9,r7[0x6]
80003212:	e0 68 01 01 	mov	r8,257
80003216:	f0 09 19 00 	cp.h	r9,r8
8000321a:	e0 8b 00 41 	brhi	8000329c <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
8000321e:	ef 39 00 08 	ld.ub	r9,r7[8]
80003222:	30 38       	mov	r8,3
80003224:	f0 09 18 00 	cp.b	r9,r8
80003228:	e0 8b 00 3a 	brhi	8000329c <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000322c:	0a 9a       	mov	r10,r5
8000322e:	6e 0b       	ld.w	r11,r7[0x0]
80003230:	0c 9c       	mov	r12,r6
80003232:	f0 1f 00 1d 	mcall	800032a4 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003236:	58 1c       	cp.w	r12,1
80003238:	c3 20       	breq	8000329c <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
8000323a:	0f c8       	ld.ub	r8,r7[0x4]
8000323c:	30 99       	mov	r9,9
8000323e:	f2 08 18 00 	cp.b	r8,r9
80003242:	c0 51       	brne	8000324c <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003244:	6c 18       	ld.w	r8,r6[0x4]
80003246:	b1 b8       	sbr	r8,0x11
80003248:	8d 18       	st.w	r6[0x4],r8
8000324a:	c0 68       	rjmp	80003256 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000324c:	6c 19       	ld.w	r9,r6[0x4]
8000324e:	20 58       	sub	r8,5
80003250:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003254:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003256:	6c 19       	ld.w	r9,r6[0x4]
80003258:	ef 3a 00 08 	ld.ub	r10,r7[8]
8000325c:	0f d8       	ld.ub	r8,r7[0x5]
8000325e:	a9 78       	lsl	r8,0x9
80003260:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003264:	12 48       	or	r8,r9
80003266:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003268:	8e 38       	ld.sh	r8,r7[0x6]
8000326a:	30 29       	mov	r9,2
8000326c:	f2 08 19 00 	cp.h	r8,r9
80003270:	e0 88 00 09 	brls	80003282 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003274:	6c 18       	ld.w	r8,r6[0x4]
80003276:	ad b8       	sbr	r8,0xd
80003278:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000327a:	8e b8       	ld.uh	r8,r7[0x6]
8000327c:	20 28       	sub	r8,2
8000327e:	8d a8       	st.w	r6[0x28],r8
80003280:	c0 68       	rjmp	8000328c <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003282:	6c 19       	ld.w	r9,r6[0x4]
80003284:	5c 78       	castu.h	r8
80003286:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
8000328a:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000328c:	6c 18       	ld.w	r8,r6[0x4]
8000328e:	e0 18 ff f0 	andl	r8,0xfff0
80003292:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003294:	35 08       	mov	r8,80
80003296:	8d 08       	st.w	r6[0x0],r8
80003298:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000329c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800032a0:	80 00       	ld.sh	r0,r0[0x0]
800032a2:	31 b0       	mov	r0,27
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	30 60       	mov	r0,6

800032a8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800032a8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800032ac:	fe c0 a4 ac 	sub	r0,pc,-23380

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800032b0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800032b4:	d5 53       	csrf	0x15
  cp      r0, r1
800032b6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800032b8:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800032bc:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800032be:	c0 72       	brcc	800032cc <idata_load_loop_end>
  cp      r0, r1
800032c0:	fe c2 82 60 	sub	r2,pc,-32160

800032c4 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800032c4:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800032c6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800032c8:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800032ca:	cf d3       	brcs	800032c4 <idata_load_loop>

800032cc <idata_load_loop_end>:
  mov     r2, 0
800032cc:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800032d0:	e0 61 08 68 	mov	r1,2152
  cp      r0, r1
  brlo    udata_clear_loop
800032d4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800032d6:	c0 62       	brcc	800032e2 <udata_clear_loop_end>
800032d8:	30 02       	mov	r2,0
800032da:	30 03       	mov	r3,0

800032dc <udata_clear_loop>:
800032dc:	a1 22       	st.d	r0++,r2
800032de:	02 30       	cp.w	r0,r1
800032e0:	cf e3       	brcs	800032dc <udata_clear_loop>

800032e2 <udata_clear_loop_end>:
800032e2:	fe cf ff 1a 	sub	pc,pc,-230
800032e6:	d7 03       	nop

800032e8 <osc_priv_enable_osc0>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032e8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032ec:	d3 03       	ssrf	0x10
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
800032ee:	fe 78 08 00 	mov	r8,-63488
800032f2:	32 4a       	mov	r10,36
800032f4:	ea 1a aa 00 	orh	r10,0xaa00
800032f8:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
800032fa:	e0 7a 0c 07 	mov	r10,68615
800032fe:	91 9a       	st.w	r8[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003300:	12 98       	mov	r8,r9
80003302:	e6 18 00 01 	andh	r8,0x1,COH
80003306:	c0 21       	brne	8000330a <osc_priv_enable_osc0+0x22>
      cpu_irq_enable();
80003308:	d5 03       	csrf	0x10
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
8000330a:	5e fc       	retal	r12

8000330c <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000330c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003310:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80003312:	fe 78 04 00 	mov	r8,-64512
80003316:	fc 1a aa 00 	movh	r10,0xaa00
8000331a:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
8000331e:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003320:	12 98       	mov	r8,r9
80003322:	e6 18 00 01 	andh	r8,0x1,COH
80003326:	c0 21       	brne	8000332a <sysclk_set_source+0x1e>
      cpu_irq_enable();
80003328:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
8000332a:	5e fc       	retal	r12

8000332c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000332c:	d4 01       	pushm	lr
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8000332e:	f0 1f 00 0a 	mcall	80003354 <sysclk_init+0x28>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80003332:	fe 78 08 00 	mov	r8,-63488
80003336:	70 59       	ld.w	r9,r8[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80003338:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000333c:	cf d0       	breq	80003336 <sysclk_init+0xa>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
8000333e:	e0 6c 24 00 	mov	r12,9216
80003342:	ea 1c 00 f4 	orh	r12,0xf4
80003346:	f0 1f 00 05 	mcall	80003358 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
8000334a:	30 1c       	mov	r12,1
8000334c:	f0 1f 00 04 	mcall	8000335c <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003350:	d8 02       	popm	pc
80003352:	00 00       	add	r0,r0
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	32 e8       	mov	r8,46
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	2d 8c       	sub	r12,-40
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	33 0c       	mov	r12,48

80003360 <general_initialize>:
	while(true)
		start_terminal();
}

void general_initialize()
{
80003360:	d4 01       	pushm	lr
	sysclk_init();
80003362:	f0 1f 00 15 	mcall	800033b4 <general_initialize+0x54>
	delay_init(CPU_HZ);
	
	gpio_configure_pin( ITASAT_LED0, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003366:	30 3b       	mov	r11,3
80003368:	30 8c       	mov	r12,8
8000336a:	f0 1f 00 14 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED1, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000336e:	30 3b       	mov	r11,3
80003370:	30 9c       	mov	r12,9
80003372:	f0 1f 00 12 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED2, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003376:	30 3b       	mov	r11,3
80003378:	30 ac       	mov	r12,10
8000337a:	f0 1f 00 10 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED3, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000337e:	30 3b       	mov	r11,3
80003380:	30 bc       	mov	r12,11
80003382:	f0 1f 00 0e 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED4, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003386:	30 3b       	mov	r11,3
80003388:	30 cc       	mov	r12,12
8000338a:	f0 1f 00 0c 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED5, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000338e:	30 3b       	mov	r11,3
80003390:	30 dc       	mov	r12,13
80003392:	f0 1f 00 0a 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED6, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003396:	30 3b       	mov	r11,3
80003398:	30 ec       	mov	r12,14
8000339a:	f0 1f 00 08 	mcall	800033b8 <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED7, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000339e:	30 3b       	mov	r11,3
800033a0:	30 fc       	mov	r12,15
800033a2:	f0 1f 00 06 	mcall	800033b8 <general_initialize+0x58>
	
	initTerminalInterface();
800033a6:	f0 1f 00 06 	mcall	800033bc <general_initialize+0x5c>
	initTestsExecContrInterface();
800033aa:	f0 1f 00 06 	mcall	800033c0 <general_initialize+0x60>
	/* 
	 * Importante: Caso o sistema esteja travando, verificar se 
	 * nao estah ocorrendo nenhum erro na inicializacao do I2C, pois 
	 * isso pode travar. 
	 */
	initI2CTestsInterface();
800033ae:	f0 1f 00 06 	mcall	800033c4 <general_initialize+0x64>
}
800033b2:	d8 02       	popm	pc
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	33 2c       	mov	r12,50
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	2e 44       	sub	r4,-28
800033bc:	80 00       	ld.sh	r0,r0[0x0]
800033be:	2a 7c       	sub	r12,-89
800033c0:	80 00       	ld.sh	r0,r0[0x0]
800033c2:	2d 3c       	sub	r12,-45
800033c4:	80 00       	ld.sh	r0,r0[0x0]
800033c6:	28 f0       	sub	r0,-113

800033c8 <main>:
#include <asf.h>
#include <itasat_pins_functions_stk600.h>
#include <tcc_test_controller.h>

int main (void)
{	
800033c8:	d4 01       	pushm	lr
	general_initialize();
800033ca:	f0 1f 00 06 	mcall	800033e0 <main+0x18>
	
	print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
800033ce:	48 6b       	lddpc	r11,800033e4 <main+0x1c>
800033d0:	fc 7c 14 00 	mov	r12,-191488
800033d4:	f0 1f 00 05 	mcall	800033e8 <main+0x20>
	
	while(true)
		start_terminal();
800033d8:	f0 1f 00 05 	mcall	800033ec <main+0x24>
800033dc:	cf eb       	rjmp	800033d8 <main+0x10>
800033de:	00 00       	add	r0,r0
800033e0:	80 00       	ld.sh	r0,r0[0x0]
800033e2:	33 60       	mov	r0,54
800033e4:	80 00       	ld.sh	r0,r0[0x0]
800033e6:	a7 94       	lsr	r4,0x7
800033e8:	80 00       	ld.sh	r0,r0[0x0]
800033ea:	31 8c       	mov	r12,24
800033ec:	80 00       	ld.sh	r0,r0[0x0]
800033ee:	2a bc       	sub	r12,-85

800033f0 <memcpy>:
800033f0:	58 8a       	cp.w	r10,8
800033f2:	c2 f5       	brlt	80003450 <memcpy+0x60>
800033f4:	f9 eb 10 09 	or	r9,r12,r11
800033f8:	e2 19 00 03 	andl	r9,0x3,COH
800033fc:	e0 81 00 97 	brne	8000352a <memcpy+0x13a>
80003400:	e0 4a 00 20 	cp.w	r10,32
80003404:	c3 b4       	brge	8000347a <memcpy+0x8a>
80003406:	f4 08 14 02 	asr	r8,r10,0x2
8000340a:	f0 09 11 08 	rsub	r9,r8,8
8000340e:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003412:	76 69       	ld.w	r9,r11[0x18]
80003414:	99 69       	st.w	r12[0x18],r9
80003416:	76 59       	ld.w	r9,r11[0x14]
80003418:	99 59       	st.w	r12[0x14],r9
8000341a:	76 49       	ld.w	r9,r11[0x10]
8000341c:	99 49       	st.w	r12[0x10],r9
8000341e:	76 39       	ld.w	r9,r11[0xc]
80003420:	99 39       	st.w	r12[0xc],r9
80003422:	76 29       	ld.w	r9,r11[0x8]
80003424:	99 29       	st.w	r12[0x8],r9
80003426:	76 19       	ld.w	r9,r11[0x4]
80003428:	99 19       	st.w	r12[0x4],r9
8000342a:	76 09       	ld.w	r9,r11[0x0]
8000342c:	99 09       	st.w	r12[0x0],r9
8000342e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003432:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003436:	e0 1a 00 03 	andl	r10,0x3
8000343a:	f4 0a 11 04 	rsub	r10,r10,4
8000343e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003442:	17 a9       	ld.ub	r9,r11[0x2]
80003444:	b0 a9       	st.b	r8[0x2],r9
80003446:	17 99       	ld.ub	r9,r11[0x1]
80003448:	b0 99       	st.b	r8[0x1],r9
8000344a:	17 89       	ld.ub	r9,r11[0x0]
8000344c:	b0 89       	st.b	r8[0x0],r9
8000344e:	5e fc       	retal	r12
80003450:	f4 0a 11 09 	rsub	r10,r10,9
80003454:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003458:	17 f9       	ld.ub	r9,r11[0x7]
8000345a:	b8 f9       	st.b	r12[0x7],r9
8000345c:	17 e9       	ld.ub	r9,r11[0x6]
8000345e:	b8 e9       	st.b	r12[0x6],r9
80003460:	17 d9       	ld.ub	r9,r11[0x5]
80003462:	b8 d9       	st.b	r12[0x5],r9
80003464:	17 c9       	ld.ub	r9,r11[0x4]
80003466:	b8 c9       	st.b	r12[0x4],r9
80003468:	17 b9       	ld.ub	r9,r11[0x3]
8000346a:	b8 b9       	st.b	r12[0x3],r9
8000346c:	17 a9       	ld.ub	r9,r11[0x2]
8000346e:	b8 a9       	st.b	r12[0x2],r9
80003470:	17 99       	ld.ub	r9,r11[0x1]
80003472:	b8 99       	st.b	r12[0x1],r9
80003474:	17 89       	ld.ub	r9,r11[0x0]
80003476:	b8 89       	st.b	r12[0x0],r9
80003478:	5e fc       	retal	r12
8000347a:	eb cd 40 c0 	pushm	r6-r7,lr
8000347e:	18 99       	mov	r9,r12
80003480:	22 0a       	sub	r10,32
80003482:	b7 07       	ld.d	r6,r11++
80003484:	b3 26       	st.d	r9++,r6
80003486:	b7 07       	ld.d	r6,r11++
80003488:	b3 26       	st.d	r9++,r6
8000348a:	b7 07       	ld.d	r6,r11++
8000348c:	b3 26       	st.d	r9++,r6
8000348e:	b7 07       	ld.d	r6,r11++
80003490:	b3 26       	st.d	r9++,r6
80003492:	22 0a       	sub	r10,32
80003494:	cf 74       	brge	80003482 <memcpy+0x92>
80003496:	2f 0a       	sub	r10,-16
80003498:	c0 65       	brlt	800034a4 <memcpy+0xb4>
8000349a:	b7 07       	ld.d	r6,r11++
8000349c:	b3 26       	st.d	r9++,r6
8000349e:	b7 07       	ld.d	r6,r11++
800034a0:	b3 26       	st.d	r9++,r6
800034a2:	21 0a       	sub	r10,16
800034a4:	5c 3a       	neg	r10
800034a6:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800034aa:	d7 03       	nop
800034ac:	d7 03       	nop
800034ae:	f7 36 00 0e 	ld.ub	r6,r11[14]
800034b2:	f3 66 00 0e 	st.b	r9[14],r6
800034b6:	f7 36 00 0d 	ld.ub	r6,r11[13]
800034ba:	f3 66 00 0d 	st.b	r9[13],r6
800034be:	f7 36 00 0c 	ld.ub	r6,r11[12]
800034c2:	f3 66 00 0c 	st.b	r9[12],r6
800034c6:	f7 36 00 0b 	ld.ub	r6,r11[11]
800034ca:	f3 66 00 0b 	st.b	r9[11],r6
800034ce:	f7 36 00 0a 	ld.ub	r6,r11[10]
800034d2:	f3 66 00 0a 	st.b	r9[10],r6
800034d6:	f7 36 00 09 	ld.ub	r6,r11[9]
800034da:	f3 66 00 09 	st.b	r9[9],r6
800034de:	f7 36 00 08 	ld.ub	r6,r11[8]
800034e2:	f3 66 00 08 	st.b	r9[8],r6
800034e6:	f7 36 00 07 	ld.ub	r6,r11[7]
800034ea:	f3 66 00 07 	st.b	r9[7],r6
800034ee:	f7 36 00 06 	ld.ub	r6,r11[6]
800034f2:	f3 66 00 06 	st.b	r9[6],r6
800034f6:	f7 36 00 05 	ld.ub	r6,r11[5]
800034fa:	f3 66 00 05 	st.b	r9[5],r6
800034fe:	f7 36 00 04 	ld.ub	r6,r11[4]
80003502:	f3 66 00 04 	st.b	r9[4],r6
80003506:	f7 36 00 03 	ld.ub	r6,r11[3]
8000350a:	f3 66 00 03 	st.b	r9[3],r6
8000350e:	f7 36 00 02 	ld.ub	r6,r11[2]
80003512:	f3 66 00 02 	st.b	r9[2],r6
80003516:	f7 36 00 01 	ld.ub	r6,r11[1]
8000351a:	f3 66 00 01 	st.b	r9[1],r6
8000351e:	f7 36 00 00 	ld.ub	r6,r11[0]
80003522:	f3 66 00 00 	st.b	r9[0],r6
80003526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000352a:	20 1a       	sub	r10,1
8000352c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003530:	f8 0a 0b 09 	st.b	r12[r10],r9
80003534:	cf b1       	brne	8000352a <memcpy+0x13a>
80003536:	5e fc       	retal	r12

80003538 <sprintf>:
80003538:	d4 01       	pushm	lr
8000353a:	21 7d       	sub	sp,92
8000353c:	e0 68 ff ff 	mov	r8,65535
80003540:	ea 18 7f ff 	orh	r8,0x7fff
80003544:	50 58       	stdsp	sp[0x14],r8
80003546:	50 28       	stdsp	sp[0x8],r8
80003548:	e0 68 02 08 	mov	r8,520
8000354c:	ba 68       	st.h	sp[0xc],r8
8000354e:	3f f8       	mov	r8,-1
80003550:	ba 78       	st.h	sp[0xe],r8
80003552:	e0 68 00 f8 	mov	r8,248
80003556:	50 4c       	stdsp	sp[0x10],r12
80003558:	16 9a       	mov	r10,r11
8000355a:	50 0c       	stdsp	sp[0x0],r12
8000355c:	fa c9 ff a0 	sub	r9,sp,-96
80003560:	70 0c       	ld.w	r12,r8[0x0]
80003562:	1a 9b       	mov	r11,sp
80003564:	cf 2d       	rcall	80003948 <_vfprintf_r>
80003566:	30 09       	mov	r9,0
80003568:	40 08       	lddsp	r8,sp[0x0]
8000356a:	b0 89       	st.b	r8[0x0],r9
8000356c:	2e 9d       	sub	sp,-92
8000356e:	d8 02       	popm	pc

80003570 <strcmp>:
80003570:	f9 eb 10 0a 	or	r10,r12,r11
80003574:	e2 1a 00 03 	andl	r10,0x3,COH
80003578:	c3 41       	brne	800035e0 <strcmp+0x70>
8000357a:	78 0a       	ld.w	r10,r12[0x0]
8000357c:	76 09       	ld.w	r9,r11[0x0]
8000357e:	5c ea       	tnbz	r10
80003580:	c1 70       	breq	800035ae <strcmp+0x3e>
80003582:	12 3a       	cp.w	r10,r9
80003584:	c1 51       	brne	800035ae <strcmp+0x3e>
80003586:	78 1a       	ld.w	r10,r12[0x4]
80003588:	76 19       	ld.w	r9,r11[0x4]
8000358a:	5c ea       	tnbz	r10
8000358c:	c1 10       	breq	800035ae <strcmp+0x3e>
8000358e:	12 3a       	cp.w	r10,r9
80003590:	c0 f1       	brne	800035ae <strcmp+0x3e>
80003592:	78 2a       	ld.w	r10,r12[0x8]
80003594:	76 29       	ld.w	r9,r11[0x8]
80003596:	5c ea       	tnbz	r10
80003598:	c0 b0       	breq	800035ae <strcmp+0x3e>
8000359a:	12 3a       	cp.w	r10,r9
8000359c:	c0 91       	brne	800035ae <strcmp+0x3e>
8000359e:	78 3a       	ld.w	r10,r12[0xc]
800035a0:	76 39       	ld.w	r9,r11[0xc]
800035a2:	5c ea       	tnbz	r10
800035a4:	c0 50       	breq	800035ae <strcmp+0x3e>
800035a6:	2f 0c       	sub	r12,-16
800035a8:	2f 0b       	sub	r11,-16
800035aa:	12 3a       	cp.w	r10,r9
800035ac:	ce 70       	breq	8000357a <strcmp+0xa>
800035ae:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
800035b2:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
800035b6:	5e 0c       	reteq	r12
800035b8:	16 1c       	sub	r12,r11
800035ba:	5e 1c       	retne	r12
800035bc:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
800035c0:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
800035c4:	5e 0c       	reteq	r12
800035c6:	16 1c       	sub	r12,r11
800035c8:	5e 1c       	retne	r12
800035ca:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
800035ce:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
800035d2:	5e 0c       	reteq	r12
800035d4:	16 1c       	sub	r12,r11
800035d6:	5e 1c       	retne	r12
800035d8:	5c 5a       	castu.b	r10
800035da:	5c 59       	castu.b	r9
800035dc:	12 1a       	sub	r10,r9
800035de:	5e fa       	retal	r10
800035e0:	17 8a       	ld.ub	r10,r11[0x0]
800035e2:	19 89       	ld.ub	r9,r12[0x0]
800035e4:	58 0a       	cp.w	r10,0
800035e6:	5e 09       	reteq	r9
800035e8:	14 19       	sub	r9,r10
800035ea:	5e 19       	retne	r9
800035ec:	17 9a       	ld.ub	r10,r11[0x1]
800035ee:	19 99       	ld.ub	r9,r12[0x1]
800035f0:	58 0a       	cp.w	r10,0
800035f2:	5e 09       	reteq	r9
800035f4:	14 19       	sub	r9,r10
800035f6:	5e 19       	retne	r9
800035f8:	17 aa       	ld.ub	r10,r11[0x2]
800035fa:	19 a9       	ld.ub	r9,r12[0x2]
800035fc:	58 0a       	cp.w	r10,0
800035fe:	5e 09       	reteq	r9
80003600:	14 19       	sub	r9,r10
80003602:	5e 19       	retne	r9
80003604:	17 ba       	ld.ub	r10,r11[0x3]
80003606:	19 b9       	ld.ub	r9,r12[0x3]
80003608:	58 0a       	cp.w	r10,0
8000360a:	5e 09       	reteq	r9
8000360c:	14 19       	sub	r9,r10
8000360e:	5e 19       	retne	r9
80003610:	2f cb       	sub	r11,-4
80003612:	2f cc       	sub	r12,-4
80003614:	ce 6b       	rjmp	800035e0 <strcmp+0x70>
80003616:	d7 03       	nop

80003618 <get_arg>:
80003618:	d4 31       	pushm	r0-r7,lr
8000361a:	20 8d       	sub	sp,32
8000361c:	fa c4 ff bc 	sub	r4,sp,-68
80003620:	50 4b       	stdsp	sp[0x10],r11
80003622:	68 2e       	ld.w	lr,r4[0x8]
80003624:	50 58       	stdsp	sp[0x14],r8
80003626:	12 96       	mov	r6,r9
80003628:	7c 0b       	ld.w	r11,lr[0x0]
8000362a:	70 05       	ld.w	r5,r8[0x0]
8000362c:	50 6e       	stdsp	sp[0x18],lr
8000362e:	58 0b       	cp.w	r11,0
80003630:	f4 0b 17 00 	moveq	r11,r10
80003634:	68 03       	ld.w	r3,r4[0x0]
80003636:	68 11       	ld.w	r1,r4[0x4]
80003638:	40 49       	lddsp	r9,sp[0x10]
8000363a:	30 08       	mov	r8,0
8000363c:	c2 89       	rjmp	8000388c <get_arg+0x274>
8000363e:	2f fb       	sub	r11,-1
80003640:	32 5c       	mov	r12,37
80003642:	17 8a       	ld.ub	r10,r11[0x0]
80003644:	f8 0a 18 00 	cp.b	r10,r12
80003648:	5f 1e       	srne	lr
8000364a:	f0 0a 18 00 	cp.b	r10,r8
8000364e:	5f 1c       	srne	r12
80003650:	fd ec 00 0c 	and	r12,lr,r12
80003654:	f0 0c 18 00 	cp.b	r12,r8
80003658:	cf 31       	brne	8000363e <get_arg+0x26>
8000365a:	58 0a       	cp.w	r10,0
8000365c:	e0 80 01 25 	breq	800038a6 <get_arg+0x28e>
80003660:	30 0c       	mov	r12,0
80003662:	3f fa       	mov	r10,-1
80003664:	18 90       	mov	r0,r12
80003666:	50 3a       	stdsp	sp[0xc],r10
80003668:	18 94       	mov	r4,r12
8000366a:	18 92       	mov	r2,r12
8000366c:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003670:	16 97       	mov	r7,r11
80003672:	50 7c       	stdsp	sp[0x1c],r12
80003674:	fe cc 88 c8 	sub	r12,pc,-30520
80003678:	0f 3a       	ld.ub	r10,r7++
8000367a:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000367e:	40 7c       	lddsp	r12,sp[0x1c]
80003680:	1c 0c       	add	r12,lr
80003682:	fe ce 89 9e 	sub	lr,pc,-30306
80003686:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000368a:	20 1e       	sub	lr,1
8000368c:	50 0e       	stdsp	sp[0x0],lr
8000368e:	fe ce 8a 16 	sub	lr,pc,-30186
80003692:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003696:	50 7c       	stdsp	sp[0x1c],r12
80003698:	40 0c       	lddsp	r12,sp[0x0]
8000369a:	58 7c       	cp.w	r12,7
8000369c:	e0 8b 00 f1 	brhi	8000387e <get_arg+0x266>
800036a0:	fe ce 8b c8 	sub	lr,pc,-29752
800036a4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800036a8:	36 8b       	mov	r11,104
800036aa:	f6 0a 18 00 	cp.b	r10,r11
800036ae:	e0 80 00 e8 	breq	8000387e <get_arg+0x266>
800036b2:	37 1b       	mov	r11,113
800036b4:	f6 0a 18 00 	cp.b	r10,r11
800036b8:	c0 70       	breq	800036c6 <get_arg+0xae>
800036ba:	34 cb       	mov	r11,76
800036bc:	f6 0a 18 00 	cp.b	r10,r11
800036c0:	c0 51       	brne	800036ca <get_arg+0xb2>
800036c2:	a3 b4       	sbr	r4,0x3
800036c4:	cd d8       	rjmp	8000387e <get_arg+0x266>
800036c6:	a5 b4       	sbr	r4,0x5
800036c8:	cd b8       	rjmp	8000387e <get_arg+0x266>
800036ca:	08 9a       	mov	r10,r4
800036cc:	0e 9b       	mov	r11,r7
800036ce:	a5 aa       	sbr	r10,0x4
800036d0:	17 3c       	ld.ub	r12,r11++
800036d2:	a5 b4       	sbr	r4,0x5
800036d4:	36 ce       	mov	lr,108
800036d6:	fc 0c 18 00 	cp.b	r12,lr
800036da:	e0 80 00 d3 	breq	80003880 <get_arg+0x268>
800036de:	14 94       	mov	r4,r10
800036e0:	cc f8       	rjmp	8000387e <get_arg+0x266>
800036e2:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800036e6:	36 7c       	mov	r12,103
800036e8:	f8 0a 18 00 	cp.b	r10,r12
800036ec:	e0 8b 00 27 	brhi	8000373a <get_arg+0x122>
800036f0:	36 5b       	mov	r11,101
800036f2:	f6 0a 18 00 	cp.b	r10,r11
800036f6:	c4 82       	brcc	80003786 <get_arg+0x16e>
800036f8:	34 fb       	mov	r11,79
800036fa:	f6 0a 18 00 	cp.b	r10,r11
800036fe:	c4 80       	breq	8000378e <get_arg+0x176>
80003700:	e0 8b 00 0c 	brhi	80003718 <get_arg+0x100>
80003704:	34 5b       	mov	r11,69
80003706:	f6 0a 18 00 	cp.b	r10,r11
8000370a:	c3 e0       	breq	80003786 <get_arg+0x16e>
8000370c:	34 7b       	mov	r11,71
8000370e:	f6 0a 18 00 	cp.b	r10,r11
80003712:	c3 a0       	breq	80003786 <get_arg+0x16e>
80003714:	34 4b       	mov	r11,68
80003716:	c0 88       	rjmp	80003726 <get_arg+0x10e>
80003718:	35 8b       	mov	r11,88
8000371a:	f6 0a 18 00 	cp.b	r10,r11
8000371e:	c2 c0       	breq	80003776 <get_arg+0x15e>
80003720:	e0 8b 00 07 	brhi	8000372e <get_arg+0x116>
80003724:	35 5b       	mov	r11,85
80003726:	f6 0a 18 00 	cp.b	r10,r11
8000372a:	c3 51       	brne	80003794 <get_arg+0x17c>
8000372c:	c3 18       	rjmp	8000378e <get_arg+0x176>
8000372e:	36 3b       	mov	r11,99
80003730:	f6 0a 18 00 	cp.b	r10,r11
80003734:	c2 f0       	breq	80003792 <get_arg+0x17a>
80003736:	36 4b       	mov	r11,100
80003738:	c0 e8       	rjmp	80003754 <get_arg+0x13c>
8000373a:	37 0b       	mov	r11,112
8000373c:	f6 0a 18 00 	cp.b	r10,r11
80003740:	c2 50       	breq	8000378a <get_arg+0x172>
80003742:	e0 8b 00 0d 	brhi	8000375c <get_arg+0x144>
80003746:	36 eb       	mov	r11,110
80003748:	f6 0a 18 00 	cp.b	r10,r11
8000374c:	c1 f0       	breq	8000378a <get_arg+0x172>
8000374e:	e0 8b 00 14 	brhi	80003776 <get_arg+0x15e>
80003752:	36 9b       	mov	r11,105
80003754:	f6 0a 18 00 	cp.b	r10,r11
80003758:	c1 e1       	brne	80003794 <get_arg+0x17c>
8000375a:	c0 e8       	rjmp	80003776 <get_arg+0x15e>
8000375c:	37 5b       	mov	r11,117
8000375e:	f6 0a 18 00 	cp.b	r10,r11
80003762:	c0 a0       	breq	80003776 <get_arg+0x15e>
80003764:	37 8b       	mov	r11,120
80003766:	f6 0a 18 00 	cp.b	r10,r11
8000376a:	c0 60       	breq	80003776 <get_arg+0x15e>
8000376c:	37 3b       	mov	r11,115
8000376e:	f6 0a 18 00 	cp.b	r10,r11
80003772:	c1 11       	brne	80003794 <get_arg+0x17c>
80003774:	c0 b8       	rjmp	8000378a <get_arg+0x172>
80003776:	ed b4 00 04 	bld	r4,0x4
8000377a:	c0 a0       	breq	8000378e <get_arg+0x176>
8000377c:	ed b4 00 05 	bld	r4,0x5
80003780:	c0 91       	brne	80003792 <get_arg+0x17a>
80003782:	30 20       	mov	r0,2
80003784:	c0 88       	rjmp	80003794 <get_arg+0x17c>
80003786:	30 40       	mov	r0,4
80003788:	c0 68       	rjmp	80003794 <get_arg+0x17c>
8000378a:	30 30       	mov	r0,3
8000378c:	c0 48       	rjmp	80003794 <get_arg+0x17c>
8000378e:	30 10       	mov	r0,1
80003790:	c0 28       	rjmp	80003794 <get_arg+0x17c>
80003792:	30 00       	mov	r0,0
80003794:	40 3b       	lddsp	r11,sp[0xc]
80003796:	5b fb       	cp.w	r11,-1
80003798:	c0 40       	breq	800037a0 <get_arg+0x188>
8000379a:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000379e:	c7 08       	rjmp	8000387e <get_arg+0x266>
800037a0:	58 60       	cp.w	r0,6
800037a2:	e0 8b 00 6e 	brhi	8000387e <get_arg+0x266>
800037a6:	6c 0a       	ld.w	r10,r6[0x0]
800037a8:	ea cc ff ff 	sub	r12,r5,-1
800037ac:	fe ce 8c b4 	sub	lr,pc,-29516
800037b0:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800037b4:	f4 cb ff f8 	sub	r11,r10,-8
800037b8:	8d 0b       	st.w	r6[0x0],r11
800037ba:	f4 ea 00 00 	ld.d	r10,r10[0]
800037be:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800037c2:	c0 f8       	rjmp	800037e0 <get_arg+0x1c8>
800037c4:	f4 cb ff fc 	sub	r11,r10,-4
800037c8:	8d 0b       	st.w	r6[0x0],r11
800037ca:	74 0a       	ld.w	r10,r10[0x0]
800037cc:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800037d0:	c0 88       	rjmp	800037e0 <get_arg+0x1c8>
800037d2:	f4 cb ff f8 	sub	r11,r10,-8
800037d6:	8d 0b       	st.w	r6[0x0],r11
800037d8:	f4 ea 00 00 	ld.d	r10,r10[0]
800037dc:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800037e0:	0e 9b       	mov	r11,r7
800037e2:	18 95       	mov	r5,r12
800037e4:	c4 e8       	rjmp	80003880 <get_arg+0x268>
800037e6:	62 0a       	ld.w	r10,r1[0x0]
800037e8:	5b fa       	cp.w	r10,-1
800037ea:	c0 b1       	brne	80003800 <get_arg+0x1e8>
800037ec:	50 19       	stdsp	sp[0x4],r9
800037ee:	50 28       	stdsp	sp[0x8],r8
800037f0:	e0 6a 00 80 	mov	r10,128
800037f4:	30 0b       	mov	r11,0
800037f6:	02 9c       	mov	r12,r1
800037f8:	e0 a0 1d 78 	rcall	800072e8 <memset>
800037fc:	40 28       	lddsp	r8,sp[0x8]
800037fe:	40 19       	lddsp	r9,sp[0x4]
80003800:	e4 cc 00 01 	sub	r12,r2,1
80003804:	0e 9b       	mov	r11,r7
80003806:	50 3c       	stdsp	sp[0xc],r12
80003808:	f2 0c 0c 49 	max	r9,r9,r12
8000380c:	c3 a8       	rjmp	80003880 <get_arg+0x268>
8000380e:	62 0a       	ld.w	r10,r1[0x0]
80003810:	5b fa       	cp.w	r10,-1
80003812:	c0 b1       	brne	80003828 <get_arg+0x210>
80003814:	50 19       	stdsp	sp[0x4],r9
80003816:	50 28       	stdsp	sp[0x8],r8
80003818:	e0 6a 00 80 	mov	r10,128
8000381c:	30 0b       	mov	r11,0
8000381e:	02 9c       	mov	r12,r1
80003820:	e0 a0 1d 64 	rcall	800072e8 <memset>
80003824:	40 28       	lddsp	r8,sp[0x8]
80003826:	40 19       	lddsp	r9,sp[0x4]
80003828:	20 12       	sub	r2,1
8000382a:	30 0a       	mov	r10,0
8000382c:	0e 9b       	mov	r11,r7
8000382e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003832:	f2 02 0c 49 	max	r9,r9,r2
80003836:	c2 58       	rjmp	80003880 <get_arg+0x268>
80003838:	16 97       	mov	r7,r11
8000383a:	6c 0a       	ld.w	r10,r6[0x0]
8000383c:	f4 cb ff fc 	sub	r11,r10,-4
80003840:	8d 0b       	st.w	r6[0x0],r11
80003842:	74 0a       	ld.w	r10,r10[0x0]
80003844:	0e 9b       	mov	r11,r7
80003846:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000384a:	2f f5       	sub	r5,-1
8000384c:	c1 a8       	rjmp	80003880 <get_arg+0x268>
8000384e:	f4 c2 00 30 	sub	r2,r10,48
80003852:	c0 68       	rjmp	8000385e <get_arg+0x246>
80003854:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003858:	2f f7       	sub	r7,-1
8000385a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000385e:	0f 8a       	ld.ub	r10,r7[0x0]
80003860:	58 0a       	cp.w	r10,0
80003862:	c0 e0       	breq	8000387e <get_arg+0x266>
80003864:	23 0a       	sub	r10,48
80003866:	58 9a       	cp.w	r10,9
80003868:	fe 98 ff f6 	brls	80003854 <get_arg+0x23c>
8000386c:	c0 98       	rjmp	8000387e <get_arg+0x266>
8000386e:	2f f7       	sub	r7,-1
80003870:	0f 8a       	ld.ub	r10,r7[0x0]
80003872:	58 0a       	cp.w	r10,0
80003874:	c0 50       	breq	8000387e <get_arg+0x266>
80003876:	23 0a       	sub	r10,48
80003878:	58 9a       	cp.w	r10,9
8000387a:	fe 98 ff fa 	brls	8000386e <get_arg+0x256>
8000387e:	0e 9b       	mov	r11,r7
80003880:	40 7c       	lddsp	r12,sp[0x1c]
80003882:	30 ba       	mov	r10,11
80003884:	f4 0c 18 00 	cp.b	r12,r10
80003888:	fe 91 fe f2 	brne	8000366c <get_arg+0x54>
8000388c:	40 42       	lddsp	r2,sp[0x10]
8000388e:	17 8c       	ld.ub	r12,r11[0x0]
80003890:	0a 32       	cp.w	r2,r5
80003892:	5f 4a       	srge	r10
80003894:	f0 0c 18 00 	cp.b	r12,r8
80003898:	5f 1c       	srne	r12
8000389a:	f9 ea 00 0a 	and	r10,r12,r10
8000389e:	f0 0a 18 00 	cp.b	r10,r8
800038a2:	fe 91 fe cf 	brne	80003640 <get_arg+0x28>
800038a6:	30 08       	mov	r8,0
800038a8:	40 4e       	lddsp	lr,sp[0x10]
800038aa:	17 8a       	ld.ub	r10,r11[0x0]
800038ac:	e2 05 00 21 	add	r1,r1,r5<<0x2
800038b0:	f0 0a 18 00 	cp.b	r10,r8
800038b4:	fc 09 17 10 	movne	r9,lr
800038b8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800038bc:	06 9e       	mov	lr,r3
800038be:	c2 a8       	rjmp	80003912 <get_arg+0x2fa>
800038c0:	62 0a       	ld.w	r10,r1[0x0]
800038c2:	58 3a       	cp.w	r10,3
800038c4:	c1 e0       	breq	80003900 <get_arg+0x2e8>
800038c6:	e0 89 00 07 	brgt	800038d4 <get_arg+0x2bc>
800038ca:	58 1a       	cp.w	r10,1
800038cc:	c1 a0       	breq	80003900 <get_arg+0x2e8>
800038ce:	58 2a       	cp.w	r10,2
800038d0:	c1 81       	brne	80003900 <get_arg+0x2e8>
800038d2:	c0 58       	rjmp	800038dc <get_arg+0x2c4>
800038d4:	58 5a       	cp.w	r10,5
800038d6:	c0 c0       	breq	800038ee <get_arg+0x2d6>
800038d8:	c0 b5       	brlt	800038ee <get_arg+0x2d6>
800038da:	c1 38       	rjmp	80003900 <get_arg+0x2e8>
800038dc:	6c 0a       	ld.w	r10,r6[0x0]
800038de:	f4 cc ff f8 	sub	r12,r10,-8
800038e2:	8d 0c       	st.w	r6[0x0],r12
800038e4:	f4 e2 00 00 	ld.d	r2,r10[0]
800038e8:	f0 e3 00 00 	st.d	r8[0],r2
800038ec:	c1 08       	rjmp	8000390c <get_arg+0x2f4>
800038ee:	6c 0a       	ld.w	r10,r6[0x0]
800038f0:	f4 cc ff f8 	sub	r12,r10,-8
800038f4:	8d 0c       	st.w	r6[0x0],r12
800038f6:	f4 e2 00 00 	ld.d	r2,r10[0]
800038fa:	f0 e3 00 00 	st.d	r8[0],r2
800038fe:	c0 78       	rjmp	8000390c <get_arg+0x2f4>
80003900:	6c 0a       	ld.w	r10,r6[0x0]
80003902:	f4 cc ff fc 	sub	r12,r10,-4
80003906:	8d 0c       	st.w	r6[0x0],r12
80003908:	74 0a       	ld.w	r10,r10[0x0]
8000390a:	91 0a       	st.w	r8[0x0],r10
8000390c:	2f f5       	sub	r5,-1
8000390e:	2f 88       	sub	r8,-8
80003910:	2f c1       	sub	r1,-4
80003912:	12 35       	cp.w	r5,r9
80003914:	fe 9a ff d6 	brle	800038c0 <get_arg+0x2a8>
80003918:	1c 93       	mov	r3,lr
8000391a:	40 52       	lddsp	r2,sp[0x14]
8000391c:	40 6e       	lddsp	lr,sp[0x18]
8000391e:	85 05       	st.w	r2[0x0],r5
80003920:	9d 0b       	st.w	lr[0x0],r11
80003922:	40 4b       	lddsp	r11,sp[0x10]
80003924:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003928:	2f 8d       	sub	sp,-32
8000392a:	d8 32       	popm	r0-r7,pc

8000392c <__sprint_r>:
8000392c:	d4 21       	pushm	r4-r7,lr
8000392e:	14 97       	mov	r7,r10
80003930:	74 28       	ld.w	r8,r10[0x8]
80003932:	58 08       	cp.w	r8,0
80003934:	c0 41       	brne	8000393c <__sprint_r+0x10>
80003936:	95 18       	st.w	r10[0x4],r8
80003938:	10 9c       	mov	r12,r8
8000393a:	d8 22       	popm	r4-r7,pc
8000393c:	e0 a0 18 b4 	rcall	80006aa4 <__sfvwrite_r>
80003940:	30 08       	mov	r8,0
80003942:	8f 18       	st.w	r7[0x4],r8
80003944:	8f 28       	st.w	r7[0x8],r8
80003946:	d8 22       	popm	r4-r7,pc

80003948 <_vfprintf_r>:
80003948:	d4 31       	pushm	r0-r7,lr
8000394a:	fa cd 06 bc 	sub	sp,sp,1724
8000394e:	51 09       	stdsp	sp[0x40],r9
80003950:	16 91       	mov	r1,r11
80003952:	14 97       	mov	r7,r10
80003954:	18 95       	mov	r5,r12
80003956:	e0 a0 1a 1d 	rcall	80006d90 <_localeconv_r>
8000395a:	78 0c       	ld.w	r12,r12[0x0]
8000395c:	50 cc       	stdsp	sp[0x30],r12
8000395e:	58 05       	cp.w	r5,0
80003960:	c0 70       	breq	8000396e <_vfprintf_r+0x26>
80003962:	6a 68       	ld.w	r8,r5[0x18]
80003964:	58 08       	cp.w	r8,0
80003966:	c0 41       	brne	8000396e <_vfprintf_r+0x26>
80003968:	0a 9c       	mov	r12,r5
8000396a:	e0 a0 17 3d 	rcall	800067e4 <__sinit>
8000396e:	fe c8 8a b2 	sub	r8,pc,-30030
80003972:	10 31       	cp.w	r1,r8
80003974:	c0 31       	brne	8000397a <_vfprintf_r+0x32>
80003976:	6a 01       	ld.w	r1,r5[0x0]
80003978:	c0 c8       	rjmp	80003990 <_vfprintf_r+0x48>
8000397a:	fe c8 8a 9e 	sub	r8,pc,-30050
8000397e:	10 31       	cp.w	r1,r8
80003980:	c0 31       	brne	80003986 <_vfprintf_r+0x3e>
80003982:	6a 11       	ld.w	r1,r5[0x4]
80003984:	c0 68       	rjmp	80003990 <_vfprintf_r+0x48>
80003986:	fe c8 8a 8a 	sub	r8,pc,-30070
8000398a:	10 31       	cp.w	r1,r8
8000398c:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003990:	82 68       	ld.sh	r8,r1[0xc]
80003992:	ed b8 00 03 	bld	r8,0x3
80003996:	c0 41       	brne	8000399e <_vfprintf_r+0x56>
80003998:	62 48       	ld.w	r8,r1[0x10]
8000399a:	58 08       	cp.w	r8,0
8000399c:	c0 71       	brne	800039aa <_vfprintf_r+0x62>
8000399e:	02 9b       	mov	r11,r1
800039a0:	0a 9c       	mov	r12,r5
800039a2:	e0 a0 0f 5d 	rcall	8000585c <__swsetup_r>
800039a6:	e0 81 0f 54 	brne	8000584e <_vfprintf_r+0x1f06>
800039aa:	82 68       	ld.sh	r8,r1[0xc]
800039ac:	10 99       	mov	r9,r8
800039ae:	e2 19 00 1a 	andl	r9,0x1a,COH
800039b2:	58 a9       	cp.w	r9,10
800039b4:	c3 c1       	brne	80003a2c <_vfprintf_r+0xe4>
800039b6:	82 79       	ld.sh	r9,r1[0xe]
800039b8:	30 0a       	mov	r10,0
800039ba:	f4 09 19 00 	cp.h	r9,r10
800039be:	c3 75       	brlt	80003a2c <_vfprintf_r+0xe4>
800039c0:	a1 d8       	cbr	r8,0x1
800039c2:	fb 58 05 d0 	st.h	sp[1488],r8
800039c6:	62 88       	ld.w	r8,r1[0x20]
800039c8:	fb 48 05 e4 	st.w	sp[1508],r8
800039cc:	62 a8       	ld.w	r8,r1[0x28]
800039ce:	fb 48 05 ec 	st.w	sp[1516],r8
800039d2:	fa c8 ff bc 	sub	r8,sp,-68
800039d6:	fb 48 05 d4 	st.w	sp[1492],r8
800039da:	fb 48 05 c4 	st.w	sp[1476],r8
800039de:	e0 68 04 00 	mov	r8,1024
800039e2:	fb 48 05 d8 	st.w	sp[1496],r8
800039e6:	fb 48 05 cc 	st.w	sp[1484],r8
800039ea:	30 08       	mov	r8,0
800039ec:	fb 59 05 d2 	st.h	sp[1490],r9
800039f0:	0e 9a       	mov	r10,r7
800039f2:	41 09       	lddsp	r9,sp[0x40]
800039f4:	fa c7 fa 3c 	sub	r7,sp,-1476
800039f8:	fb 48 05 dc 	st.w	sp[1500],r8
800039fc:	0a 9c       	mov	r12,r5
800039fe:	0e 9b       	mov	r11,r7
80003a00:	ca 4f       	rcall	80003948 <_vfprintf_r>
80003a02:	50 bc       	stdsp	sp[0x2c],r12
80003a04:	c0 95       	brlt	80003a16 <_vfprintf_r+0xce>
80003a06:	0e 9b       	mov	r11,r7
80003a08:	0a 9c       	mov	r12,r5
80003a0a:	e0 a0 16 15 	rcall	80006634 <_fflush_r>
80003a0e:	40 be       	lddsp	lr,sp[0x2c]
80003a10:	f9 be 01 ff 	movne	lr,-1
80003a14:	50 be       	stdsp	sp[0x2c],lr
80003a16:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003a1a:	ed b8 00 06 	bld	r8,0x6
80003a1e:	e0 81 0f 1a 	brne	80005852 <_vfprintf_r+0x1f0a>
80003a22:	82 68       	ld.sh	r8,r1[0xc]
80003a24:	a7 a8       	sbr	r8,0x6
80003a26:	a2 68       	st.h	r1[0xc],r8
80003a28:	e0 8f 0f 15 	bral	80005852 <_vfprintf_r+0x1f0a>
80003a2c:	30 08       	mov	r8,0
80003a2e:	fb 48 06 b4 	st.w	sp[1716],r8
80003a32:	fb 48 06 90 	st.w	sp[1680],r8
80003a36:	fb 48 06 8c 	st.w	sp[1676],r8
80003a3a:	fb 48 06 b0 	st.w	sp[1712],r8
80003a3e:	30 08       	mov	r8,0
80003a40:	30 09       	mov	r9,0
80003a42:	50 a7       	stdsp	sp[0x28],r7
80003a44:	50 78       	stdsp	sp[0x1c],r8
80003a46:	fa c3 f9 e0 	sub	r3,sp,-1568
80003a4a:	3f f8       	mov	r8,-1
80003a4c:	50 59       	stdsp	sp[0x14],r9
80003a4e:	fb 43 06 88 	st.w	sp[1672],r3
80003a52:	fb 48 05 44 	st.w	sp[1348],r8
80003a56:	12 9c       	mov	r12,r9
80003a58:	50 69       	stdsp	sp[0x18],r9
80003a5a:	50 d9       	stdsp	sp[0x34],r9
80003a5c:	50 e9       	stdsp	sp[0x38],r9
80003a5e:	50 b9       	stdsp	sp[0x2c],r9
80003a60:	12 97       	mov	r7,r9
80003a62:	0a 94       	mov	r4,r5
80003a64:	40 a2       	lddsp	r2,sp[0x28]
80003a66:	32 5a       	mov	r10,37
80003a68:	30 08       	mov	r8,0
80003a6a:	c0 28       	rjmp	80003a6e <_vfprintf_r+0x126>
80003a6c:	2f f2       	sub	r2,-1
80003a6e:	05 89       	ld.ub	r9,r2[0x0]
80003a70:	f0 09 18 00 	cp.b	r9,r8
80003a74:	5f 1b       	srne	r11
80003a76:	f4 09 18 00 	cp.b	r9,r10
80003a7a:	5f 19       	srne	r9
80003a7c:	f3 eb 00 0b 	and	r11,r9,r11
80003a80:	f0 0b 18 00 	cp.b	r11,r8
80003a84:	cf 41       	brne	80003a6c <_vfprintf_r+0x124>
80003a86:	40 ab       	lddsp	r11,sp[0x28]
80003a88:	e4 0b 01 06 	sub	r6,r2,r11
80003a8c:	c1 e0       	breq	80003ac8 <_vfprintf_r+0x180>
80003a8e:	fa f8 06 90 	ld.w	r8,sp[1680]
80003a92:	0c 08       	add	r8,r6
80003a94:	87 0b       	st.w	r3[0x0],r11
80003a96:	fb 48 06 90 	st.w	sp[1680],r8
80003a9a:	87 16       	st.w	r3[0x4],r6
80003a9c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003aa0:	2f f8       	sub	r8,-1
80003aa2:	fb 48 06 8c 	st.w	sp[1676],r8
80003aa6:	58 78       	cp.w	r8,7
80003aa8:	e0 89 00 04 	brgt	80003ab0 <_vfprintf_r+0x168>
80003aac:	2f 83       	sub	r3,-8
80003aae:	c0 a8       	rjmp	80003ac2 <_vfprintf_r+0x17a>
80003ab0:	fa ca f9 78 	sub	r10,sp,-1672
80003ab4:	02 9b       	mov	r11,r1
80003ab6:	08 9c       	mov	r12,r4
80003ab8:	c3 af       	rcall	8000392c <__sprint_r>
80003aba:	e0 81 0e c6 	brne	80005846 <_vfprintf_r+0x1efe>
80003abe:	fa c3 f9 e0 	sub	r3,sp,-1568
80003ac2:	40 ba       	lddsp	r10,sp[0x2c]
80003ac4:	0c 0a       	add	r10,r6
80003ac6:	50 ba       	stdsp	sp[0x2c],r10
80003ac8:	05 89       	ld.ub	r9,r2[0x0]
80003aca:	30 08       	mov	r8,0
80003acc:	f0 09 18 00 	cp.b	r9,r8
80003ad0:	e0 80 0e aa 	breq	80005824 <_vfprintf_r+0x1edc>
80003ad4:	30 09       	mov	r9,0
80003ad6:	fb 68 06 bb 	st.b	sp[1723],r8
80003ada:	0e 96       	mov	r6,r7
80003adc:	e4 c8 ff ff 	sub	r8,r2,-1
80003ae0:	3f fe       	mov	lr,-1
80003ae2:	50 93       	stdsp	sp[0x24],r3
80003ae4:	50 41       	stdsp	sp[0x10],r1
80003ae6:	0e 93       	mov	r3,r7
80003ae8:	04 91       	mov	r1,r2
80003aea:	50 89       	stdsp	sp[0x20],r9
80003aec:	50 a8       	stdsp	sp[0x28],r8
80003aee:	50 2e       	stdsp	sp[0x8],lr
80003af0:	50 39       	stdsp	sp[0xc],r9
80003af2:	12 95       	mov	r5,r9
80003af4:	12 90       	mov	r0,r9
80003af6:	10 97       	mov	r7,r8
80003af8:	08 92       	mov	r2,r4
80003afa:	c0 78       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003afc:	3f fc       	mov	r12,-1
80003afe:	08 97       	mov	r7,r4
80003b00:	50 2c       	stdsp	sp[0x8],r12
80003b02:	c0 38       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003b04:	30 0b       	mov	r11,0
80003b06:	50 3b       	stdsp	sp[0xc],r11
80003b08:	0f 38       	ld.ub	r8,r7++
80003b0a:	c0 28       	rjmp	80003b0e <_vfprintf_r+0x1c6>
80003b0c:	12 90       	mov	r0,r9
80003b0e:	f0 c9 00 20 	sub	r9,r8,32
80003b12:	e0 49 00 58 	cp.w	r9,88
80003b16:	e0 8b 0a 30 	brhi	80004f76 <_vfprintf_r+0x162e>
80003b1a:	fe ca 90 06 	sub	r10,pc,-28666
80003b1e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003b22:	50 a7       	stdsp	sp[0x28],r7
80003b24:	50 80       	stdsp	sp[0x20],r0
80003b26:	0c 97       	mov	r7,r6
80003b28:	04 94       	mov	r4,r2
80003b2a:	06 96       	mov	r6,r3
80003b2c:	02 92       	mov	r2,r1
80003b2e:	fe c9 8d de 	sub	r9,pc,-29218
80003b32:	40 93       	lddsp	r3,sp[0x24]
80003b34:	10 90       	mov	r0,r8
80003b36:	40 41       	lddsp	r1,sp[0x10]
80003b38:	50 d9       	stdsp	sp[0x34],r9
80003b3a:	e0 8f 08 8e 	bral	80004c56 <_vfprintf_r+0x130e>
80003b3e:	30 08       	mov	r8,0
80003b40:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003b44:	f0 09 18 00 	cp.b	r9,r8
80003b48:	ce 01       	brne	80003b08 <_vfprintf_r+0x1c0>
80003b4a:	32 08       	mov	r8,32
80003b4c:	c6 e8       	rjmp	80003c28 <_vfprintf_r+0x2e0>
80003b4e:	a1 a5       	sbr	r5,0x0
80003b50:	cd cb       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003b52:	0f 89       	ld.ub	r9,r7[0x0]
80003b54:	f2 c8 00 30 	sub	r8,r9,48
80003b58:	58 98       	cp.w	r8,9
80003b5a:	e0 8b 00 1d 	brhi	80003b94 <_vfprintf_r+0x24c>
80003b5e:	ee c8 ff ff 	sub	r8,r7,-1
80003b62:	30 0b       	mov	r11,0
80003b64:	23 09       	sub	r9,48
80003b66:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003b6a:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003b6e:	11 39       	ld.ub	r9,r8++
80003b70:	f2 ca 00 30 	sub	r10,r9,48
80003b74:	58 9a       	cp.w	r10,9
80003b76:	fe 98 ff f7 	brls	80003b64 <_vfprintf_r+0x21c>
80003b7a:	e0 49 00 24 	cp.w	r9,36
80003b7e:	cc 31       	brne	80003b04 <_vfprintf_r+0x1bc>
80003b80:	e0 4b 00 20 	cp.w	r11,32
80003b84:	e0 89 0e 60 	brgt	80005844 <_vfprintf_r+0x1efc>
80003b88:	20 1b       	sub	r11,1
80003b8a:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b8e:	12 3b       	cp.w	r11,r9
80003b90:	c0 95       	brlt	80003ba2 <_vfprintf_r+0x25a>
80003b92:	c1 08       	rjmp	80003bb2 <_vfprintf_r+0x26a>
80003b94:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b98:	ec ca ff ff 	sub	r10,r6,-1
80003b9c:	12 36       	cp.w	r6,r9
80003b9e:	c1 f5       	brlt	80003bdc <_vfprintf_r+0x294>
80003ba0:	c2 68       	rjmp	80003bec <_vfprintf_r+0x2a4>
80003ba2:	fa ce f9 44 	sub	lr,sp,-1724
80003ba6:	10 97       	mov	r7,r8
80003ba8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003bac:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003bb0:	c3 58       	rjmp	80003c1a <_vfprintf_r+0x2d2>
80003bb2:	10 97       	mov	r7,r8
80003bb4:	fa c8 f9 50 	sub	r8,sp,-1712
80003bb8:	1a d8       	st.w	--sp,r8
80003bba:	fa c8 fa b8 	sub	r8,sp,-1352
80003bbe:	1a d8       	st.w	--sp,r8
80003bc0:	fa c8 fb b4 	sub	r8,sp,-1100
80003bc4:	02 9a       	mov	r10,r1
80003bc6:	1a d8       	st.w	--sp,r8
80003bc8:	04 9c       	mov	r12,r2
80003bca:	fa c8 f9 40 	sub	r8,sp,-1728
80003bce:	fa c9 ff b4 	sub	r9,sp,-76
80003bd2:	fe b0 fd 23 	rcall	80003618 <get_arg>
80003bd6:	2f dd       	sub	sp,-12
80003bd8:	78 00       	ld.w	r0,r12[0x0]
80003bda:	c2 08       	rjmp	80003c1a <_vfprintf_r+0x2d2>
80003bdc:	fa cc f9 44 	sub	r12,sp,-1724
80003be0:	14 96       	mov	r6,r10
80003be2:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003be6:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003bea:	c1 88       	rjmp	80003c1a <_vfprintf_r+0x2d2>
80003bec:	41 08       	lddsp	r8,sp[0x40]
80003bee:	59 f9       	cp.w	r9,31
80003bf0:	e0 89 00 11 	brgt	80003c12 <_vfprintf_r+0x2ca>
80003bf4:	f0 cb ff fc 	sub	r11,r8,-4
80003bf8:	51 0b       	stdsp	sp[0x40],r11
80003bfa:	70 00       	ld.w	r0,r8[0x0]
80003bfc:	fa cb f9 44 	sub	r11,sp,-1724
80003c00:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003c04:	f1 40 fd 88 	st.w	r8[-632],r0
80003c08:	2f f9       	sub	r9,-1
80003c0a:	14 96       	mov	r6,r10
80003c0c:	fb 49 06 b4 	st.w	sp[1716],r9
80003c10:	c0 58       	rjmp	80003c1a <_vfprintf_r+0x2d2>
80003c12:	70 00       	ld.w	r0,r8[0x0]
80003c14:	14 96       	mov	r6,r10
80003c16:	2f c8       	sub	r8,-4
80003c18:	51 08       	stdsp	sp[0x40],r8
80003c1a:	58 00       	cp.w	r0,0
80003c1c:	fe 94 ff 76 	brge	80003b08 <_vfprintf_r+0x1c0>
80003c20:	5c 30       	neg	r0
80003c22:	a3 a5       	sbr	r5,0x2
80003c24:	c7 2b       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003c26:	32 b8       	mov	r8,43
80003c28:	fb 68 06 bb 	st.b	sp[1723],r8
80003c2c:	c6 eb       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003c2e:	0f 38       	ld.ub	r8,r7++
80003c30:	e0 48 00 2a 	cp.w	r8,42
80003c34:	c0 30       	breq	80003c3a <_vfprintf_r+0x2f2>
80003c36:	30 09       	mov	r9,0
80003c38:	c7 98       	rjmp	80003d2a <_vfprintf_r+0x3e2>
80003c3a:	0f 88       	ld.ub	r8,r7[0x0]
80003c3c:	f0 c9 00 30 	sub	r9,r8,48
80003c40:	58 99       	cp.w	r9,9
80003c42:	e0 8b 00 1f 	brhi	80003c80 <_vfprintf_r+0x338>
80003c46:	ee c4 ff ff 	sub	r4,r7,-1
80003c4a:	30 0b       	mov	r11,0
80003c4c:	23 08       	sub	r8,48
80003c4e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003c52:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003c56:	09 38       	ld.ub	r8,r4++
80003c58:	f0 c9 00 30 	sub	r9,r8,48
80003c5c:	58 99       	cp.w	r9,9
80003c5e:	fe 98 ff f7 	brls	80003c4c <_vfprintf_r+0x304>
80003c62:	e0 48 00 24 	cp.w	r8,36
80003c66:	fe 91 ff 4f 	brne	80003b04 <_vfprintf_r+0x1bc>
80003c6a:	e0 4b 00 20 	cp.w	r11,32
80003c6e:	e0 89 0d eb 	brgt	80005844 <_vfprintf_r+0x1efc>
80003c72:	20 1b       	sub	r11,1
80003c74:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003c78:	10 3b       	cp.w	r11,r8
80003c7a:	c0 a5       	brlt	80003c8e <_vfprintf_r+0x346>
80003c7c:	c1 18       	rjmp	80003c9e <_vfprintf_r+0x356>
80003c7e:	d7 03       	nop
80003c80:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003c84:	ec c9 ff ff 	sub	r9,r6,-1
80003c88:	14 36       	cp.w	r6,r10
80003c8a:	c1 f5       	brlt	80003cc8 <_vfprintf_r+0x380>
80003c8c:	c2 88       	rjmp	80003cdc <_vfprintf_r+0x394>
80003c8e:	fa ca f9 44 	sub	r10,sp,-1724
80003c92:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003c96:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003c9a:	50 2b       	stdsp	sp[0x8],r11
80003c9c:	c3 c8       	rjmp	80003d14 <_vfprintf_r+0x3cc>
80003c9e:	fa c8 f9 50 	sub	r8,sp,-1712
80003ca2:	1a d8       	st.w	--sp,r8
80003ca4:	fa c8 fa b8 	sub	r8,sp,-1352
80003ca8:	1a d8       	st.w	--sp,r8
80003caa:	fa c8 fb b4 	sub	r8,sp,-1100
80003cae:	02 9a       	mov	r10,r1
80003cb0:	1a d8       	st.w	--sp,r8
80003cb2:	04 9c       	mov	r12,r2
80003cb4:	fa c8 f9 40 	sub	r8,sp,-1728
80003cb8:	fa c9 ff b4 	sub	r9,sp,-76
80003cbc:	fe b0 fc ae 	rcall	80003618 <get_arg>
80003cc0:	2f dd       	sub	sp,-12
80003cc2:	78 0c       	ld.w	r12,r12[0x0]
80003cc4:	50 2c       	stdsp	sp[0x8],r12
80003cc6:	c2 78       	rjmp	80003d14 <_vfprintf_r+0x3cc>
80003cc8:	12 96       	mov	r6,r9
80003cca:	0e 94       	mov	r4,r7
80003ccc:	fa c9 f9 44 	sub	r9,sp,-1724
80003cd0:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003cd4:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003cd8:	50 28       	stdsp	sp[0x8],r8
80003cda:	c1 d8       	rjmp	80003d14 <_vfprintf_r+0x3cc>
80003cdc:	41 08       	lddsp	r8,sp[0x40]
80003cde:	59 fa       	cp.w	r10,31
80003ce0:	e0 89 00 14 	brgt	80003d08 <_vfprintf_r+0x3c0>
80003ce4:	f0 cb ff fc 	sub	r11,r8,-4
80003ce8:	70 08       	ld.w	r8,r8[0x0]
80003cea:	51 0b       	stdsp	sp[0x40],r11
80003cec:	50 28       	stdsp	sp[0x8],r8
80003cee:	fa c6 f9 44 	sub	r6,sp,-1724
80003cf2:	40 2e       	lddsp	lr,sp[0x8]
80003cf4:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003cf8:	f1 4e fd 88 	st.w	r8[-632],lr
80003cfc:	2f fa       	sub	r10,-1
80003cfe:	0e 94       	mov	r4,r7
80003d00:	fb 4a 06 b4 	st.w	sp[1716],r10
80003d04:	12 96       	mov	r6,r9
80003d06:	c0 78       	rjmp	80003d14 <_vfprintf_r+0x3cc>
80003d08:	70 0c       	ld.w	r12,r8[0x0]
80003d0a:	0e 94       	mov	r4,r7
80003d0c:	2f c8       	sub	r8,-4
80003d0e:	50 2c       	stdsp	sp[0x8],r12
80003d10:	12 96       	mov	r6,r9
80003d12:	51 08       	stdsp	sp[0x40],r8
80003d14:	40 2b       	lddsp	r11,sp[0x8]
80003d16:	58 0b       	cp.w	r11,0
80003d18:	fe 95 fe f2 	brlt	80003afc <_vfprintf_r+0x1b4>
80003d1c:	08 97       	mov	r7,r4
80003d1e:	cf 5a       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d20:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003d24:	0f 38       	ld.ub	r8,r7++
80003d26:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003d2a:	f0 ca 00 30 	sub	r10,r8,48
80003d2e:	58 9a       	cp.w	r10,9
80003d30:	fe 98 ff f8 	brls	80003d20 <_vfprintf_r+0x3d8>
80003d34:	3f fa       	mov	r10,-1
80003d36:	f2 0a 0c 49 	max	r9,r9,r10
80003d3a:	50 29       	stdsp	sp[0x8],r9
80003d3c:	ce 9a       	rjmp	80003b0e <_vfprintf_r+0x1c6>
80003d3e:	a7 b5       	sbr	r5,0x7
80003d40:	ce 4a       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d42:	30 09       	mov	r9,0
80003d44:	23 08       	sub	r8,48
80003d46:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003d4a:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003d4e:	0f 38       	ld.ub	r8,r7++
80003d50:	f0 ca 00 30 	sub	r10,r8,48
80003d54:	58 9a       	cp.w	r10,9
80003d56:	fe 98 ff f7 	brls	80003d44 <_vfprintf_r+0x3fc>
80003d5a:	e0 48 00 24 	cp.w	r8,36
80003d5e:	fe 91 fe d7 	brne	80003b0c <_vfprintf_r+0x1c4>
80003d62:	e0 49 00 20 	cp.w	r9,32
80003d66:	e0 89 0d 6f 	brgt	80005844 <_vfprintf_r+0x1efc>
80003d6a:	f2 c3 00 01 	sub	r3,r9,1
80003d6e:	30 19       	mov	r9,1
80003d70:	50 39       	stdsp	sp[0xc],r9
80003d72:	cc ba       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d74:	a3 b5       	sbr	r5,0x3
80003d76:	cc 9a       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d78:	a7 a5       	sbr	r5,0x6
80003d7a:	cc 7a       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d7c:	0a 98       	mov	r8,r5
80003d7e:	a5 b5       	sbr	r5,0x5
80003d80:	a5 a8       	sbr	r8,0x4
80003d82:	0f 89       	ld.ub	r9,r7[0x0]
80003d84:	36 ce       	mov	lr,108
80003d86:	fc 09 18 00 	cp.b	r9,lr
80003d8a:	f7 b7 00 ff 	subeq	r7,-1
80003d8e:	f0 05 17 10 	movne	r5,r8
80003d92:	cb ba       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d94:	a5 b5       	sbr	r5,0x5
80003d96:	cb 9a       	rjmp	80003b08 <_vfprintf_r+0x1c0>
80003d98:	50 a7       	stdsp	sp[0x28],r7
80003d9a:	50 80       	stdsp	sp[0x20],r0
80003d9c:	0c 97       	mov	r7,r6
80003d9e:	10 90       	mov	r0,r8
80003da0:	06 96       	mov	r6,r3
80003da2:	04 94       	mov	r4,r2
80003da4:	40 93       	lddsp	r3,sp[0x24]
80003da6:	02 92       	mov	r2,r1
80003da8:	0e 99       	mov	r9,r7
80003daa:	40 41       	lddsp	r1,sp[0x10]
80003dac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003db0:	40 3c       	lddsp	r12,sp[0xc]
80003db2:	58 0c       	cp.w	r12,0
80003db4:	c1 d0       	breq	80003dee <_vfprintf_r+0x4a6>
80003db6:	10 36       	cp.w	r6,r8
80003db8:	c0 64       	brge	80003dc4 <_vfprintf_r+0x47c>
80003dba:	fa cb f9 44 	sub	r11,sp,-1724
80003dbe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003dc2:	c1 d8       	rjmp	80003dfc <_vfprintf_r+0x4b4>
80003dc4:	fa c8 f9 50 	sub	r8,sp,-1712
80003dc8:	1a d8       	st.w	--sp,r8
80003dca:	fa c8 fa b8 	sub	r8,sp,-1352
80003dce:	1a d8       	st.w	--sp,r8
80003dd0:	fa c8 fb b4 	sub	r8,sp,-1100
80003dd4:	1a d8       	st.w	--sp,r8
80003dd6:	fa c8 f9 40 	sub	r8,sp,-1728
80003dda:	fa c9 ff b4 	sub	r9,sp,-76
80003dde:	04 9a       	mov	r10,r2
80003de0:	0c 9b       	mov	r11,r6
80003de2:	08 9c       	mov	r12,r4
80003de4:	fe b0 fc 1a 	rcall	80003618 <get_arg>
80003de8:	2f dd       	sub	sp,-12
80003dea:	19 b8       	ld.ub	r8,r12[0x3]
80003dec:	c2 28       	rjmp	80003e30 <_vfprintf_r+0x4e8>
80003dee:	2f f7       	sub	r7,-1
80003df0:	10 39       	cp.w	r9,r8
80003df2:	c0 84       	brge	80003e02 <_vfprintf_r+0x4ba>
80003df4:	fa ca f9 44 	sub	r10,sp,-1724
80003df8:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003dfc:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003e00:	c1 88       	rjmp	80003e30 <_vfprintf_r+0x4e8>
80003e02:	41 09       	lddsp	r9,sp[0x40]
80003e04:	59 f8       	cp.w	r8,31
80003e06:	e0 89 00 12 	brgt	80003e2a <_vfprintf_r+0x4e2>
80003e0a:	f2 ca ff fc 	sub	r10,r9,-4
80003e0e:	51 0a       	stdsp	sp[0x40],r10
80003e10:	72 09       	ld.w	r9,r9[0x0]
80003e12:	fa c6 f9 44 	sub	r6,sp,-1724
80003e16:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003e1a:	2f f8       	sub	r8,-1
80003e1c:	f5 49 fd 88 	st.w	r10[-632],r9
80003e20:	fb 48 06 b4 	st.w	sp[1716],r8
80003e24:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003e28:	c0 48       	rjmp	80003e30 <_vfprintf_r+0x4e8>
80003e2a:	13 b8       	ld.ub	r8,r9[0x3]
80003e2c:	2f c9       	sub	r9,-4
80003e2e:	51 09       	stdsp	sp[0x40],r9
80003e30:	fb 68 06 60 	st.b	sp[1632],r8
80003e34:	30 0e       	mov	lr,0
80003e36:	30 08       	mov	r8,0
80003e38:	30 12       	mov	r2,1
80003e3a:	fb 68 06 bb 	st.b	sp[1723],r8
80003e3e:	50 2e       	stdsp	sp[0x8],lr
80003e40:	e0 8f 08 ad 	bral	80004f9a <_vfprintf_r+0x1652>
80003e44:	50 a7       	stdsp	sp[0x28],r7
80003e46:	50 80       	stdsp	sp[0x20],r0
80003e48:	0c 97       	mov	r7,r6
80003e4a:	04 94       	mov	r4,r2
80003e4c:	06 96       	mov	r6,r3
80003e4e:	02 92       	mov	r2,r1
80003e50:	40 93       	lddsp	r3,sp[0x24]
80003e52:	10 90       	mov	r0,r8
80003e54:	40 41       	lddsp	r1,sp[0x10]
80003e56:	a5 a5       	sbr	r5,0x4
80003e58:	c0 a8       	rjmp	80003e6c <_vfprintf_r+0x524>
80003e5a:	50 a7       	stdsp	sp[0x28],r7
80003e5c:	50 80       	stdsp	sp[0x20],r0
80003e5e:	0c 97       	mov	r7,r6
80003e60:	04 94       	mov	r4,r2
80003e62:	06 96       	mov	r6,r3
80003e64:	02 92       	mov	r2,r1
80003e66:	40 93       	lddsp	r3,sp[0x24]
80003e68:	10 90       	mov	r0,r8
80003e6a:	40 41       	lddsp	r1,sp[0x10]
80003e6c:	ed b5 00 05 	bld	r5,0x5
80003e70:	c5 11       	brne	80003f12 <_vfprintf_r+0x5ca>
80003e72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e76:	40 3c       	lddsp	r12,sp[0xc]
80003e78:	58 0c       	cp.w	r12,0
80003e7a:	c1 e0       	breq	80003eb6 <_vfprintf_r+0x56e>
80003e7c:	10 36       	cp.w	r6,r8
80003e7e:	c0 64       	brge	80003e8a <_vfprintf_r+0x542>
80003e80:	fa cb f9 44 	sub	r11,sp,-1724
80003e84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e88:	c2 08       	rjmp	80003ec8 <_vfprintf_r+0x580>
80003e8a:	fa c8 f9 50 	sub	r8,sp,-1712
80003e8e:	1a d8       	st.w	--sp,r8
80003e90:	fa c8 fa b8 	sub	r8,sp,-1352
80003e94:	0c 9b       	mov	r11,r6
80003e96:	1a d8       	st.w	--sp,r8
80003e98:	fa c8 fb b4 	sub	r8,sp,-1100
80003e9c:	1a d8       	st.w	--sp,r8
80003e9e:	fa c9 ff b4 	sub	r9,sp,-76
80003ea2:	fa c8 f9 40 	sub	r8,sp,-1728
80003ea6:	04 9a       	mov	r10,r2
80003ea8:	08 9c       	mov	r12,r4
80003eaa:	fe b0 fb b7 	rcall	80003618 <get_arg>
80003eae:	2f dd       	sub	sp,-12
80003eb0:	78 1b       	ld.w	r11,r12[0x4]
80003eb2:	78 09       	ld.w	r9,r12[0x0]
80003eb4:	c2 b8       	rjmp	80003f0a <_vfprintf_r+0x5c2>
80003eb6:	ee ca ff ff 	sub	r10,r7,-1
80003eba:	10 37       	cp.w	r7,r8
80003ebc:	c0 b4       	brge	80003ed2 <_vfprintf_r+0x58a>
80003ebe:	fa c9 f9 44 	sub	r9,sp,-1724
80003ec2:	14 97       	mov	r7,r10
80003ec4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003ec8:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003ecc:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003ed0:	c1 d8       	rjmp	80003f0a <_vfprintf_r+0x5c2>
80003ed2:	41 09       	lddsp	r9,sp[0x40]
80003ed4:	59 f8       	cp.w	r8,31
80003ed6:	e0 89 00 14 	brgt	80003efe <_vfprintf_r+0x5b6>
80003eda:	f2 cb ff f8 	sub	r11,r9,-8
80003ede:	51 0b       	stdsp	sp[0x40],r11
80003ee0:	fa c6 f9 44 	sub	r6,sp,-1724
80003ee4:	72 1b       	ld.w	r11,r9[0x4]
80003ee6:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003eea:	72 09       	ld.w	r9,r9[0x0]
80003eec:	f9 4b fd 8c 	st.w	r12[-628],r11
80003ef0:	f9 49 fd 88 	st.w	r12[-632],r9
80003ef4:	2f f8       	sub	r8,-1
80003ef6:	14 97       	mov	r7,r10
80003ef8:	fb 48 06 b4 	st.w	sp[1716],r8
80003efc:	c0 78       	rjmp	80003f0a <_vfprintf_r+0x5c2>
80003efe:	f2 c8 ff f8 	sub	r8,r9,-8
80003f02:	72 1b       	ld.w	r11,r9[0x4]
80003f04:	14 97       	mov	r7,r10
80003f06:	51 08       	stdsp	sp[0x40],r8
80003f08:	72 09       	ld.w	r9,r9[0x0]
80003f0a:	16 98       	mov	r8,r11
80003f0c:	fa e9 00 00 	st.d	sp[0],r8
80003f10:	ca e8       	rjmp	8000406c <_vfprintf_r+0x724>
80003f12:	ed b5 00 04 	bld	r5,0x4
80003f16:	c1 71       	brne	80003f44 <_vfprintf_r+0x5fc>
80003f18:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f1c:	40 3e       	lddsp	lr,sp[0xc]
80003f1e:	58 0e       	cp.w	lr,0
80003f20:	c0 80       	breq	80003f30 <_vfprintf_r+0x5e8>
80003f22:	10 36       	cp.w	r6,r8
80003f24:	c6 94       	brge	80003ff6 <_vfprintf_r+0x6ae>
80003f26:	fa cc f9 44 	sub	r12,sp,-1724
80003f2a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003f2e:	c8 28       	rjmp	80004032 <_vfprintf_r+0x6ea>
80003f30:	ee ca ff ff 	sub	r10,r7,-1
80003f34:	10 37       	cp.w	r7,r8
80003f36:	e0 84 00 81 	brge	80004038 <_vfprintf_r+0x6f0>
80003f3a:	fa cb f9 44 	sub	r11,sp,-1724
80003f3e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f42:	c7 78       	rjmp	80004030 <_vfprintf_r+0x6e8>
80003f44:	ed b5 00 06 	bld	r5,0x6
80003f48:	c4 b1       	brne	80003fde <_vfprintf_r+0x696>
80003f4a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f4e:	40 3c       	lddsp	r12,sp[0xc]
80003f50:	58 0c       	cp.w	r12,0
80003f52:	c1 d0       	breq	80003f8c <_vfprintf_r+0x644>
80003f54:	10 36       	cp.w	r6,r8
80003f56:	c0 64       	brge	80003f62 <_vfprintf_r+0x61a>
80003f58:	fa cb f9 44 	sub	r11,sp,-1724
80003f5c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f60:	c1 f8       	rjmp	80003f9e <_vfprintf_r+0x656>
80003f62:	fa c8 f9 50 	sub	r8,sp,-1712
80003f66:	1a d8       	st.w	--sp,r8
80003f68:	fa c8 fa b8 	sub	r8,sp,-1352
80003f6c:	1a d8       	st.w	--sp,r8
80003f6e:	fa c8 fb b4 	sub	r8,sp,-1100
80003f72:	1a d8       	st.w	--sp,r8
80003f74:	fa c8 f9 40 	sub	r8,sp,-1728
80003f78:	fa c9 ff b4 	sub	r9,sp,-76
80003f7c:	04 9a       	mov	r10,r2
80003f7e:	0c 9b       	mov	r11,r6
80003f80:	08 9c       	mov	r12,r4
80003f82:	fe b0 fb 4b 	rcall	80003618 <get_arg>
80003f86:	2f dd       	sub	sp,-12
80003f88:	98 18       	ld.sh	r8,r12[0x2]
80003f8a:	c2 68       	rjmp	80003fd6 <_vfprintf_r+0x68e>
80003f8c:	ee ca ff ff 	sub	r10,r7,-1
80003f90:	10 37       	cp.w	r7,r8
80003f92:	c0 94       	brge	80003fa4 <_vfprintf_r+0x65c>
80003f94:	fa c9 f9 44 	sub	r9,sp,-1724
80003f98:	14 97       	mov	r7,r10
80003f9a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f9e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003fa2:	c1 a8       	rjmp	80003fd6 <_vfprintf_r+0x68e>
80003fa4:	41 09       	lddsp	r9,sp[0x40]
80003fa6:	59 f8       	cp.w	r8,31
80003fa8:	e0 89 00 13 	brgt	80003fce <_vfprintf_r+0x686>
80003fac:	f2 cb ff fc 	sub	r11,r9,-4
80003fb0:	51 0b       	stdsp	sp[0x40],r11
80003fb2:	72 09       	ld.w	r9,r9[0x0]
80003fb4:	fa c6 f9 44 	sub	r6,sp,-1724
80003fb8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003fbc:	2f f8       	sub	r8,-1
80003fbe:	f7 49 fd 88 	st.w	r11[-632],r9
80003fc2:	fb 48 06 b4 	st.w	sp[1716],r8
80003fc6:	14 97       	mov	r7,r10
80003fc8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003fcc:	c0 58       	rjmp	80003fd6 <_vfprintf_r+0x68e>
80003fce:	92 18       	ld.sh	r8,r9[0x2]
80003fd0:	14 97       	mov	r7,r10
80003fd2:	2f c9       	sub	r9,-4
80003fd4:	51 09       	stdsp	sp[0x40],r9
80003fd6:	50 18       	stdsp	sp[0x4],r8
80003fd8:	bf 58       	asr	r8,0x1f
80003fda:	50 08       	stdsp	sp[0x0],r8
80003fdc:	c4 88       	rjmp	8000406c <_vfprintf_r+0x724>
80003fde:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003fe2:	40 3c       	lddsp	r12,sp[0xc]
80003fe4:	58 0c       	cp.w	r12,0
80003fe6:	c1 d0       	breq	80004020 <_vfprintf_r+0x6d8>
80003fe8:	10 36       	cp.w	r6,r8
80003fea:	c0 64       	brge	80003ff6 <_vfprintf_r+0x6ae>
80003fec:	fa cb f9 44 	sub	r11,sp,-1724
80003ff0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003ff4:	c1 f8       	rjmp	80004032 <_vfprintf_r+0x6ea>
80003ff6:	fa c8 f9 50 	sub	r8,sp,-1712
80003ffa:	1a d8       	st.w	--sp,r8
80003ffc:	fa c8 fa b8 	sub	r8,sp,-1352
80004000:	0c 9b       	mov	r11,r6
80004002:	1a d8       	st.w	--sp,r8
80004004:	fa c8 fb b4 	sub	r8,sp,-1100
80004008:	04 9a       	mov	r10,r2
8000400a:	1a d8       	st.w	--sp,r8
8000400c:	08 9c       	mov	r12,r4
8000400e:	fa c8 f9 40 	sub	r8,sp,-1728
80004012:	fa c9 ff b4 	sub	r9,sp,-76
80004016:	fe b0 fb 01 	rcall	80003618 <get_arg>
8000401a:	2f dd       	sub	sp,-12
8000401c:	78 0b       	ld.w	r11,r12[0x0]
8000401e:	c2 48       	rjmp	80004066 <_vfprintf_r+0x71e>
80004020:	ee ca ff ff 	sub	r10,r7,-1
80004024:	10 37       	cp.w	r7,r8
80004026:	c0 94       	brge	80004038 <_vfprintf_r+0x6f0>
80004028:	fa c9 f9 44 	sub	r9,sp,-1724
8000402c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004030:	14 97       	mov	r7,r10
80004032:	ec fb fd 88 	ld.w	r11,r6[-632]
80004036:	c1 88       	rjmp	80004066 <_vfprintf_r+0x71e>
80004038:	41 09       	lddsp	r9,sp[0x40]
8000403a:	59 f8       	cp.w	r8,31
8000403c:	e0 89 00 11 	brgt	8000405e <_vfprintf_r+0x716>
80004040:	f2 cb ff fc 	sub	r11,r9,-4
80004044:	51 0b       	stdsp	sp[0x40],r11
80004046:	fa c6 f9 44 	sub	r6,sp,-1724
8000404a:	72 0b       	ld.w	r11,r9[0x0]
8000404c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004050:	f3 4b fd 88 	st.w	r9[-632],r11
80004054:	2f f8       	sub	r8,-1
80004056:	14 97       	mov	r7,r10
80004058:	fb 48 06 b4 	st.w	sp[1716],r8
8000405c:	c0 58       	rjmp	80004066 <_vfprintf_r+0x71e>
8000405e:	72 0b       	ld.w	r11,r9[0x0]
80004060:	14 97       	mov	r7,r10
80004062:	2f c9       	sub	r9,-4
80004064:	51 09       	stdsp	sp[0x40],r9
80004066:	50 1b       	stdsp	sp[0x4],r11
80004068:	bf 5b       	asr	r11,0x1f
8000406a:	50 0b       	stdsp	sp[0x0],r11
8000406c:	fa ea 00 00 	ld.d	r10,sp[0]
80004070:	58 0a       	cp.w	r10,0
80004072:	5c 2b       	cpc	r11
80004074:	c0 e4       	brge	80004090 <_vfprintf_r+0x748>
80004076:	30 08       	mov	r8,0
80004078:	fa ea 00 00 	ld.d	r10,sp[0]
8000407c:	30 09       	mov	r9,0
8000407e:	f0 0a 01 0a 	sub	r10,r8,r10
80004082:	f2 0b 01 4b 	sbc	r11,r9,r11
80004086:	32 d8       	mov	r8,45
80004088:	fa eb 00 00 	st.d	sp[0],r10
8000408c:	fb 68 06 bb 	st.b	sp[1723],r8
80004090:	30 18       	mov	r8,1
80004092:	e0 8f 06 fa 	bral	80004e86 <_vfprintf_r+0x153e>
80004096:	50 a7       	stdsp	sp[0x28],r7
80004098:	50 80       	stdsp	sp[0x20],r0
8000409a:	0c 97       	mov	r7,r6
8000409c:	04 94       	mov	r4,r2
8000409e:	06 96       	mov	r6,r3
800040a0:	02 92       	mov	r2,r1
800040a2:	40 93       	lddsp	r3,sp[0x24]
800040a4:	10 90       	mov	r0,r8
800040a6:	40 41       	lddsp	r1,sp[0x10]
800040a8:	0e 99       	mov	r9,r7
800040aa:	ed b5 00 03 	bld	r5,0x3
800040ae:	c4 11       	brne	80004130 <_vfprintf_r+0x7e8>
800040b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040b4:	40 3a       	lddsp	r10,sp[0xc]
800040b6:	58 0a       	cp.w	r10,0
800040b8:	c1 90       	breq	800040ea <_vfprintf_r+0x7a2>
800040ba:	10 36       	cp.w	r6,r8
800040bc:	c6 45       	brlt	80004184 <_vfprintf_r+0x83c>
800040be:	fa c8 f9 50 	sub	r8,sp,-1712
800040c2:	1a d8       	st.w	--sp,r8
800040c4:	fa c8 fa b8 	sub	r8,sp,-1352
800040c8:	1a d8       	st.w	--sp,r8
800040ca:	fa c8 fb b4 	sub	r8,sp,-1100
800040ce:	0c 9b       	mov	r11,r6
800040d0:	1a d8       	st.w	--sp,r8
800040d2:	04 9a       	mov	r10,r2
800040d4:	fa c8 f9 40 	sub	r8,sp,-1728
800040d8:	fa c9 ff b4 	sub	r9,sp,-76
800040dc:	08 9c       	mov	r12,r4
800040de:	fe b0 fa 9d 	rcall	80003618 <get_arg>
800040e2:	2f dd       	sub	sp,-12
800040e4:	78 16       	ld.w	r6,r12[0x4]
800040e6:	50 76       	stdsp	sp[0x1c],r6
800040e8:	c4 88       	rjmp	80004178 <_vfprintf_r+0x830>
800040ea:	2f f7       	sub	r7,-1
800040ec:	10 39       	cp.w	r9,r8
800040ee:	c0 c4       	brge	80004106 <_vfprintf_r+0x7be>
800040f0:	fa ce f9 44 	sub	lr,sp,-1724
800040f4:	fc 06 00 36 	add	r6,lr,r6<<0x3
800040f8:	ec fc fd 8c 	ld.w	r12,r6[-628]
800040fc:	50 7c       	stdsp	sp[0x1c],r12
800040fe:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004102:	50 56       	stdsp	sp[0x14],r6
80004104:	c6 68       	rjmp	800041d0 <_vfprintf_r+0x888>
80004106:	41 09       	lddsp	r9,sp[0x40]
80004108:	59 f8       	cp.w	r8,31
8000410a:	e0 89 00 10 	brgt	8000412a <_vfprintf_r+0x7e2>
8000410e:	f2 ca ff f8 	sub	r10,r9,-8
80004112:	72 1b       	ld.w	r11,r9[0x4]
80004114:	51 0a       	stdsp	sp[0x40],r10
80004116:	72 09       	ld.w	r9,r9[0x0]
80004118:	fa ca f9 44 	sub	r10,sp,-1724
8000411c:	50 7b       	stdsp	sp[0x1c],r11
8000411e:	50 59       	stdsp	sp[0x14],r9
80004120:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004124:	40 5b       	lddsp	r11,sp[0x14]
80004126:	40 7a       	lddsp	r10,sp[0x1c]
80004128:	c4 78       	rjmp	800041b6 <_vfprintf_r+0x86e>
8000412a:	72 18       	ld.w	r8,r9[0x4]
8000412c:	50 78       	stdsp	sp[0x1c],r8
8000412e:	c4 c8       	rjmp	800041c6 <_vfprintf_r+0x87e>
80004130:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004134:	40 3e       	lddsp	lr,sp[0xc]
80004136:	58 0e       	cp.w	lr,0
80004138:	c2 30       	breq	8000417e <_vfprintf_r+0x836>
8000413a:	10 36       	cp.w	r6,r8
8000413c:	c0 94       	brge	8000414e <_vfprintf_r+0x806>
8000413e:	fa cc f9 44 	sub	r12,sp,-1724
80004142:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004146:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000414a:	50 7b       	stdsp	sp[0x1c],r11
8000414c:	cd 9b       	rjmp	800040fe <_vfprintf_r+0x7b6>
8000414e:	fa c8 f9 50 	sub	r8,sp,-1712
80004152:	1a d8       	st.w	--sp,r8
80004154:	fa c8 fa b8 	sub	r8,sp,-1352
80004158:	04 9a       	mov	r10,r2
8000415a:	1a d8       	st.w	--sp,r8
8000415c:	fa c8 fb b4 	sub	r8,sp,-1100
80004160:	0c 9b       	mov	r11,r6
80004162:	1a d8       	st.w	--sp,r8
80004164:	08 9c       	mov	r12,r4
80004166:	fa c8 f9 40 	sub	r8,sp,-1728
8000416a:	fa c9 ff b4 	sub	r9,sp,-76
8000416e:	fe b0 fa 55 	rcall	80003618 <get_arg>
80004172:	2f dd       	sub	sp,-12
80004174:	78 1a       	ld.w	r10,r12[0x4]
80004176:	50 7a       	stdsp	sp[0x1c],r10
80004178:	78 0c       	ld.w	r12,r12[0x0]
8000417a:	50 5c       	stdsp	sp[0x14],r12
8000417c:	c2 a8       	rjmp	800041d0 <_vfprintf_r+0x888>
8000417e:	2f f7       	sub	r7,-1
80004180:	10 39       	cp.w	r9,r8
80004182:	c0 94       	brge	80004194 <_vfprintf_r+0x84c>
80004184:	fa c9 f9 44 	sub	r9,sp,-1724
80004188:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000418c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004190:	50 78       	stdsp	sp[0x1c],r8
80004192:	cb 6b       	rjmp	800040fe <_vfprintf_r+0x7b6>
80004194:	41 09       	lddsp	r9,sp[0x40]
80004196:	59 f8       	cp.w	r8,31
80004198:	e0 89 00 15 	brgt	800041c2 <_vfprintf_r+0x87a>
8000419c:	f2 ca ff f8 	sub	r10,r9,-8
800041a0:	72 16       	ld.w	r6,r9[0x4]
800041a2:	72 09       	ld.w	r9,r9[0x0]
800041a4:	51 0a       	stdsp	sp[0x40],r10
800041a6:	50 59       	stdsp	sp[0x14],r9
800041a8:	fa ce f9 44 	sub	lr,sp,-1724
800041ac:	50 76       	stdsp	sp[0x1c],r6
800041ae:	fc 08 00 39 	add	r9,lr,r8<<0x3
800041b2:	40 5b       	lddsp	r11,sp[0x14]
800041b4:	0c 9a       	mov	r10,r6
800041b6:	f2 eb fd 88 	st.d	r9[-632],r10
800041ba:	2f f8       	sub	r8,-1
800041bc:	fb 48 06 b4 	st.w	sp[1716],r8
800041c0:	c0 88       	rjmp	800041d0 <_vfprintf_r+0x888>
800041c2:	72 1c       	ld.w	r12,r9[0x4]
800041c4:	50 7c       	stdsp	sp[0x1c],r12
800041c6:	f2 c8 ff f8 	sub	r8,r9,-8
800041ca:	51 08       	stdsp	sp[0x40],r8
800041cc:	72 09       	ld.w	r9,r9[0x0]
800041ce:	50 59       	stdsp	sp[0x14],r9
800041d0:	40 5b       	lddsp	r11,sp[0x14]
800041d2:	40 7a       	lddsp	r10,sp[0x1c]
800041d4:	e0 a0 1c de 	rcall	80007b90 <__isinfd>
800041d8:	18 96       	mov	r6,r12
800041da:	c1 70       	breq	80004208 <_vfprintf_r+0x8c0>
800041dc:	30 08       	mov	r8,0
800041de:	30 09       	mov	r9,0
800041e0:	40 5b       	lddsp	r11,sp[0x14]
800041e2:	40 7a       	lddsp	r10,sp[0x1c]
800041e4:	e0 a0 21 cc 	rcall	8000857c <__avr32_f64_cmp_lt>
800041e8:	c0 40       	breq	800041f0 <_vfprintf_r+0x8a8>
800041ea:	32 d8       	mov	r8,45
800041ec:	fb 68 06 bb 	st.b	sp[1723],r8
800041f0:	fe c8 94 8c 	sub	r8,pc,-27508
800041f4:	fe c6 94 8c 	sub	r6,pc,-27508
800041f8:	a7 d5       	cbr	r5,0x7
800041fa:	e0 40 00 47 	cp.w	r0,71
800041fe:	f0 06 17 a0 	movle	r6,r8
80004202:	30 32       	mov	r2,3
80004204:	e0 8f 06 ce 	bral	80004fa0 <_vfprintf_r+0x1658>
80004208:	40 5b       	lddsp	r11,sp[0x14]
8000420a:	40 7a       	lddsp	r10,sp[0x1c]
8000420c:	e0 a0 1c d7 	rcall	80007bba <__isnand>
80004210:	c0 e0       	breq	8000422c <_vfprintf_r+0x8e4>
80004212:	50 26       	stdsp	sp[0x8],r6
80004214:	fe c8 94 a8 	sub	r8,pc,-27480
80004218:	fe c6 94 a8 	sub	r6,pc,-27480
8000421c:	a7 d5       	cbr	r5,0x7
8000421e:	e0 40 00 47 	cp.w	r0,71
80004222:	f0 06 17 a0 	movle	r6,r8
80004226:	30 32       	mov	r2,3
80004228:	e0 8f 06 c2 	bral	80004fac <_vfprintf_r+0x1664>
8000422c:	40 2a       	lddsp	r10,sp[0x8]
8000422e:	5b fa       	cp.w	r10,-1
80004230:	c0 41       	brne	80004238 <_vfprintf_r+0x8f0>
80004232:	30 69       	mov	r9,6
80004234:	50 29       	stdsp	sp[0x8],r9
80004236:	c1 18       	rjmp	80004258 <_vfprintf_r+0x910>
80004238:	e0 40 00 47 	cp.w	r0,71
8000423c:	5f 09       	sreq	r9
8000423e:	e0 40 00 67 	cp.w	r0,103
80004242:	5f 08       	sreq	r8
80004244:	f3 e8 10 08 	or	r8,r9,r8
80004248:	f8 08 18 00 	cp.b	r8,r12
8000424c:	c0 60       	breq	80004258 <_vfprintf_r+0x910>
8000424e:	40 28       	lddsp	r8,sp[0x8]
80004250:	58 08       	cp.w	r8,0
80004252:	f9 b8 00 01 	moveq	r8,1
80004256:	50 28       	stdsp	sp[0x8],r8
80004258:	40 78       	lddsp	r8,sp[0x1c]
8000425a:	40 59       	lddsp	r9,sp[0x14]
8000425c:	fa e9 06 94 	st.d	sp[1684],r8
80004260:	a9 a5       	sbr	r5,0x8
80004262:	fa f8 06 94 	ld.w	r8,sp[1684]
80004266:	58 08       	cp.w	r8,0
80004268:	c0 65       	brlt	80004274 <_vfprintf_r+0x92c>
8000426a:	40 5e       	lddsp	lr,sp[0x14]
8000426c:	30 0c       	mov	r12,0
8000426e:	50 6e       	stdsp	sp[0x18],lr
80004270:	50 9c       	stdsp	sp[0x24],r12
80004272:	c0 78       	rjmp	80004280 <_vfprintf_r+0x938>
80004274:	40 5b       	lddsp	r11,sp[0x14]
80004276:	32 da       	mov	r10,45
80004278:	ee 1b 80 00 	eorh	r11,0x8000
8000427c:	50 9a       	stdsp	sp[0x24],r10
8000427e:	50 6b       	stdsp	sp[0x18],r11
80004280:	e0 40 00 46 	cp.w	r0,70
80004284:	5f 09       	sreq	r9
80004286:	e0 40 00 66 	cp.w	r0,102
8000428a:	5f 08       	sreq	r8
8000428c:	f3 e8 10 08 	or	r8,r9,r8
80004290:	50 48       	stdsp	sp[0x10],r8
80004292:	c0 40       	breq	8000429a <_vfprintf_r+0x952>
80004294:	40 22       	lddsp	r2,sp[0x8]
80004296:	30 39       	mov	r9,3
80004298:	c1 08       	rjmp	800042b8 <_vfprintf_r+0x970>
8000429a:	e0 40 00 45 	cp.w	r0,69
8000429e:	5f 09       	sreq	r9
800042a0:	e0 40 00 65 	cp.w	r0,101
800042a4:	5f 08       	sreq	r8
800042a6:	40 22       	lddsp	r2,sp[0x8]
800042a8:	10 49       	or	r9,r8
800042aa:	2f f2       	sub	r2,-1
800042ac:	40 46       	lddsp	r6,sp[0x10]
800042ae:	ec 09 18 00 	cp.b	r9,r6
800042b2:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800042b6:	30 29       	mov	r9,2
800042b8:	fa c8 f9 5c 	sub	r8,sp,-1700
800042bc:	1a d8       	st.w	--sp,r8
800042be:	fa c8 f9 54 	sub	r8,sp,-1708
800042c2:	1a d8       	st.w	--sp,r8
800042c4:	fa c8 f9 4c 	sub	r8,sp,-1716
800042c8:	08 9c       	mov	r12,r4
800042ca:	1a d8       	st.w	--sp,r8
800042cc:	04 98       	mov	r8,r2
800042ce:	40 9b       	lddsp	r11,sp[0x24]
800042d0:	40 aa       	lddsp	r10,sp[0x28]
800042d2:	e0 a0 0b c3 	rcall	80005a58 <_dtoa_r>
800042d6:	e0 40 00 47 	cp.w	r0,71
800042da:	5f 19       	srne	r9
800042dc:	e0 40 00 67 	cp.w	r0,103
800042e0:	5f 18       	srne	r8
800042e2:	18 96       	mov	r6,r12
800042e4:	2f dd       	sub	sp,-12
800042e6:	f3 e8 00 08 	and	r8,r9,r8
800042ea:	c0 41       	brne	800042f2 <_vfprintf_r+0x9aa>
800042ec:	ed b5 00 00 	bld	r5,0x0
800042f0:	c3 01       	brne	80004350 <_vfprintf_r+0xa08>
800042f2:	ec 02 00 0e 	add	lr,r6,r2
800042f6:	50 3e       	stdsp	sp[0xc],lr
800042f8:	40 4c       	lddsp	r12,sp[0x10]
800042fa:	58 0c       	cp.w	r12,0
800042fc:	c1 50       	breq	80004326 <_vfprintf_r+0x9de>
800042fe:	0d 89       	ld.ub	r9,r6[0x0]
80004300:	33 08       	mov	r8,48
80004302:	f0 09 18 00 	cp.b	r9,r8
80004306:	c0 b1       	brne	8000431c <_vfprintf_r+0x9d4>
80004308:	30 08       	mov	r8,0
8000430a:	30 09       	mov	r9,0
8000430c:	40 6b       	lddsp	r11,sp[0x18]
8000430e:	40 7a       	lddsp	r10,sp[0x1c]
80004310:	e0 a0 20 ef 	rcall	800084ee <__avr32_f64_cmp_eq>
80004314:	fb b2 00 01 	rsubeq	r2,1
80004318:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000431c:	40 3b       	lddsp	r11,sp[0xc]
8000431e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004322:	10 0b       	add	r11,r8
80004324:	50 3b       	stdsp	sp[0xc],r11
80004326:	40 6b       	lddsp	r11,sp[0x18]
80004328:	30 08       	mov	r8,0
8000432a:	30 09       	mov	r9,0
8000432c:	40 7a       	lddsp	r10,sp[0x1c]
8000432e:	e0 a0 20 e0 	rcall	800084ee <__avr32_f64_cmp_eq>
80004332:	c0 90       	breq	80004344 <_vfprintf_r+0x9fc>
80004334:	40 3a       	lddsp	r10,sp[0xc]
80004336:	fb 4a 06 a4 	st.w	sp[1700],r10
8000433a:	c0 58       	rjmp	80004344 <_vfprintf_r+0x9fc>
8000433c:	10 c9       	st.b	r8++,r9
8000433e:	fb 48 06 a4 	st.w	sp[1700],r8
80004342:	c0 28       	rjmp	80004346 <_vfprintf_r+0x9fe>
80004344:	33 09       	mov	r9,48
80004346:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000434a:	40 3e       	lddsp	lr,sp[0xc]
8000434c:	1c 38       	cp.w	r8,lr
8000434e:	cf 73       	brcs	8000433c <_vfprintf_r+0x9f4>
80004350:	e0 40 00 47 	cp.w	r0,71
80004354:	5f 09       	sreq	r9
80004356:	e0 40 00 67 	cp.w	r0,103
8000435a:	5f 08       	sreq	r8
8000435c:	f3 e8 10 08 	or	r8,r9,r8
80004360:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004364:	0c 19       	sub	r9,r6
80004366:	50 69       	stdsp	sp[0x18],r9
80004368:	58 08       	cp.w	r8,0
8000436a:	c0 b0       	breq	80004380 <_vfprintf_r+0xa38>
8000436c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004370:	5b d8       	cp.w	r8,-3
80004372:	c0 55       	brlt	8000437c <_vfprintf_r+0xa34>
80004374:	40 2c       	lddsp	r12,sp[0x8]
80004376:	18 38       	cp.w	r8,r12
80004378:	e0 8a 00 6a 	brle	8000444c <_vfprintf_r+0xb04>
8000437c:	20 20       	sub	r0,2
8000437e:	c0 58       	rjmp	80004388 <_vfprintf_r+0xa40>
80004380:	e0 40 00 65 	cp.w	r0,101
80004384:	e0 89 00 46 	brgt	80004410 <_vfprintf_r+0xac8>
80004388:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000438c:	fb 60 06 9c 	st.b	sp[1692],r0
80004390:	20 1b       	sub	r11,1
80004392:	fb 4b 06 ac 	st.w	sp[1708],r11
80004396:	c0 47       	brpl	8000439e <_vfprintf_r+0xa56>
80004398:	5c 3b       	neg	r11
8000439a:	32 d8       	mov	r8,45
8000439c:	c0 28       	rjmp	800043a0 <_vfprintf_r+0xa58>
8000439e:	32 b8       	mov	r8,43
800043a0:	fb 68 06 9d 	st.b	sp[1693],r8
800043a4:	58 9b       	cp.w	r11,9
800043a6:	e0 8a 00 1d 	brle	800043e0 <_vfprintf_r+0xa98>
800043aa:	fa c9 fa 35 	sub	r9,sp,-1483
800043ae:	30 aa       	mov	r10,10
800043b0:	12 98       	mov	r8,r9
800043b2:	0e 9c       	mov	r12,r7
800043b4:	0c 92       	mov	r2,r6
800043b6:	f6 0a 0c 06 	divs	r6,r11,r10
800043ba:	0e 9b       	mov	r11,r7
800043bc:	2d 0b       	sub	r11,-48
800043be:	10 fb       	st.b	--r8,r11
800043c0:	0c 9b       	mov	r11,r6
800043c2:	58 96       	cp.w	r6,9
800043c4:	fe 99 ff f9 	brgt	800043b6 <_vfprintf_r+0xa6e>
800043c8:	2d 0b       	sub	r11,-48
800043ca:	18 97       	mov	r7,r12
800043cc:	04 96       	mov	r6,r2
800043ce:	10 fb       	st.b	--r8,r11
800043d0:	fa ca f9 62 	sub	r10,sp,-1694
800043d4:	c0 38       	rjmp	800043da <_vfprintf_r+0xa92>
800043d6:	11 3b       	ld.ub	r11,r8++
800043d8:	14 cb       	st.b	r10++,r11
800043da:	12 38       	cp.w	r8,r9
800043dc:	cf d3       	brcs	800043d6 <_vfprintf_r+0xa8e>
800043de:	c0 98       	rjmp	800043f0 <_vfprintf_r+0xaa8>
800043e0:	2d 0b       	sub	r11,-48
800043e2:	33 08       	mov	r8,48
800043e4:	fb 6b 06 9f 	st.b	sp[1695],r11
800043e8:	fb 68 06 9e 	st.b	sp[1694],r8
800043ec:	fa ca f9 60 	sub	r10,sp,-1696
800043f0:	fa c8 f9 64 	sub	r8,sp,-1692
800043f4:	f4 08 01 08 	sub	r8,r10,r8
800043f8:	50 e8       	stdsp	sp[0x38],r8
800043fa:	10 92       	mov	r2,r8
800043fc:	40 6b       	lddsp	r11,sp[0x18]
800043fe:	16 02       	add	r2,r11
80004400:	58 1b       	cp.w	r11,1
80004402:	e0 89 00 05 	brgt	8000440c <_vfprintf_r+0xac4>
80004406:	ed b5 00 00 	bld	r5,0x0
8000440a:	c3 51       	brne	80004474 <_vfprintf_r+0xb2c>
8000440c:	2f f2       	sub	r2,-1
8000440e:	c3 38       	rjmp	80004474 <_vfprintf_r+0xb2c>
80004410:	e0 40 00 66 	cp.w	r0,102
80004414:	c1 c1       	brne	8000444c <_vfprintf_r+0xb04>
80004416:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000441a:	58 02       	cp.w	r2,0
8000441c:	e0 8a 00 0c 	brle	80004434 <_vfprintf_r+0xaec>
80004420:	40 2a       	lddsp	r10,sp[0x8]
80004422:	58 0a       	cp.w	r10,0
80004424:	c0 41       	brne	8000442c <_vfprintf_r+0xae4>
80004426:	ed b5 00 00 	bld	r5,0x0
8000442a:	c2 51       	brne	80004474 <_vfprintf_r+0xb2c>
8000442c:	2f f2       	sub	r2,-1
8000442e:	40 29       	lddsp	r9,sp[0x8]
80004430:	12 02       	add	r2,r9
80004432:	c0 b8       	rjmp	80004448 <_vfprintf_r+0xb00>
80004434:	40 28       	lddsp	r8,sp[0x8]
80004436:	58 08       	cp.w	r8,0
80004438:	c0 61       	brne	80004444 <_vfprintf_r+0xafc>
8000443a:	ed b5 00 00 	bld	r5,0x0
8000443e:	c0 30       	breq	80004444 <_vfprintf_r+0xafc>
80004440:	30 12       	mov	r2,1
80004442:	c1 98       	rjmp	80004474 <_vfprintf_r+0xb2c>
80004444:	40 22       	lddsp	r2,sp[0x8]
80004446:	2f e2       	sub	r2,-2
80004448:	36 60       	mov	r0,102
8000444a:	c1 58       	rjmp	80004474 <_vfprintf_r+0xb2c>
8000444c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004450:	40 6e       	lddsp	lr,sp[0x18]
80004452:	1c 32       	cp.w	r2,lr
80004454:	c0 65       	brlt	80004460 <_vfprintf_r+0xb18>
80004456:	ed b5 00 00 	bld	r5,0x0
8000445a:	f7 b2 00 ff 	subeq	r2,-1
8000445e:	c0 a8       	rjmp	80004472 <_vfprintf_r+0xb2a>
80004460:	e4 08 11 02 	rsub	r8,r2,2
80004464:	40 6c       	lddsp	r12,sp[0x18]
80004466:	58 02       	cp.w	r2,0
80004468:	f0 02 17 a0 	movle	r2,r8
8000446c:	f9 b2 09 01 	movgt	r2,1
80004470:	18 02       	add	r2,r12
80004472:	36 70       	mov	r0,103
80004474:	40 9b       	lddsp	r11,sp[0x24]
80004476:	58 0b       	cp.w	r11,0
80004478:	e0 80 05 94 	breq	80004fa0 <_vfprintf_r+0x1658>
8000447c:	32 d8       	mov	r8,45
8000447e:	fb 68 06 bb 	st.b	sp[1723],r8
80004482:	e0 8f 05 93 	bral	80004fa8 <_vfprintf_r+0x1660>
80004486:	50 a7       	stdsp	sp[0x28],r7
80004488:	04 94       	mov	r4,r2
8000448a:	0c 97       	mov	r7,r6
8000448c:	02 92       	mov	r2,r1
8000448e:	06 96       	mov	r6,r3
80004490:	40 41       	lddsp	r1,sp[0x10]
80004492:	40 93       	lddsp	r3,sp[0x24]
80004494:	0e 99       	mov	r9,r7
80004496:	ed b5 00 05 	bld	r5,0x5
8000449a:	c4 81       	brne	8000452a <_vfprintf_r+0xbe2>
8000449c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044a0:	40 3e       	lddsp	lr,sp[0xc]
800044a2:	58 0e       	cp.w	lr,0
800044a4:	c1 d0       	breq	800044de <_vfprintf_r+0xb96>
800044a6:	10 36       	cp.w	r6,r8
800044a8:	c0 64       	brge	800044b4 <_vfprintf_r+0xb6c>
800044aa:	fa cc f9 44 	sub	r12,sp,-1724
800044ae:	f8 06 00 36 	add	r6,r12,r6<<0x3
800044b2:	c1 d8       	rjmp	800044ec <_vfprintf_r+0xba4>
800044b4:	fa c8 f9 50 	sub	r8,sp,-1712
800044b8:	1a d8       	st.w	--sp,r8
800044ba:	fa c8 fa b8 	sub	r8,sp,-1352
800044be:	04 9a       	mov	r10,r2
800044c0:	1a d8       	st.w	--sp,r8
800044c2:	fa c8 fb b4 	sub	r8,sp,-1100
800044c6:	0c 9b       	mov	r11,r6
800044c8:	1a d8       	st.w	--sp,r8
800044ca:	08 9c       	mov	r12,r4
800044cc:	fa c8 f9 40 	sub	r8,sp,-1728
800044d0:	fa c9 ff b4 	sub	r9,sp,-76
800044d4:	fe b0 f8 a2 	rcall	80003618 <get_arg>
800044d8:	2f dd       	sub	sp,-12
800044da:	78 0a       	ld.w	r10,r12[0x0]
800044dc:	c2 08       	rjmp	8000451c <_vfprintf_r+0xbd4>
800044de:	2f f7       	sub	r7,-1
800044e0:	10 39       	cp.w	r9,r8
800044e2:	c0 84       	brge	800044f2 <_vfprintf_r+0xbaa>
800044e4:	fa cb f9 44 	sub	r11,sp,-1724
800044e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044ec:	ec fa fd 88 	ld.w	r10,r6[-632]
800044f0:	c1 68       	rjmp	8000451c <_vfprintf_r+0xbd4>
800044f2:	41 09       	lddsp	r9,sp[0x40]
800044f4:	59 f8       	cp.w	r8,31
800044f6:	e0 89 00 10 	brgt	80004516 <_vfprintf_r+0xbce>
800044fa:	f2 ca ff fc 	sub	r10,r9,-4
800044fe:	51 0a       	stdsp	sp[0x40],r10
80004500:	fa c6 f9 44 	sub	r6,sp,-1724
80004504:	72 0a       	ld.w	r10,r9[0x0]
80004506:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000450a:	f3 4a fd 88 	st.w	r9[-632],r10
8000450e:	2f f8       	sub	r8,-1
80004510:	fb 48 06 b4 	st.w	sp[1716],r8
80004514:	c0 48       	rjmp	8000451c <_vfprintf_r+0xbd4>
80004516:	72 0a       	ld.w	r10,r9[0x0]
80004518:	2f c9       	sub	r9,-4
8000451a:	51 09       	stdsp	sp[0x40],r9
8000451c:	40 be       	lddsp	lr,sp[0x2c]
8000451e:	1c 98       	mov	r8,lr
80004520:	95 1e       	st.w	r10[0x4],lr
80004522:	bf 58       	asr	r8,0x1f
80004524:	95 08       	st.w	r10[0x0],r8
80004526:	fe 9f fa 9f 	bral	80003a64 <_vfprintf_r+0x11c>
8000452a:	ed b5 00 04 	bld	r5,0x4
8000452e:	c4 80       	breq	800045be <_vfprintf_r+0xc76>
80004530:	e2 15 00 40 	andl	r5,0x40,COH
80004534:	c4 50       	breq	800045be <_vfprintf_r+0xc76>
80004536:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000453a:	40 3c       	lddsp	r12,sp[0xc]
8000453c:	58 0c       	cp.w	r12,0
8000453e:	c1 d0       	breq	80004578 <_vfprintf_r+0xc30>
80004540:	10 36       	cp.w	r6,r8
80004542:	c0 64       	brge	8000454e <_vfprintf_r+0xc06>
80004544:	fa cb f9 44 	sub	r11,sp,-1724
80004548:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000454c:	c1 d8       	rjmp	80004586 <_vfprintf_r+0xc3e>
8000454e:	fa c8 f9 50 	sub	r8,sp,-1712
80004552:	1a d8       	st.w	--sp,r8
80004554:	fa c8 fa b8 	sub	r8,sp,-1352
80004558:	04 9a       	mov	r10,r2
8000455a:	1a d8       	st.w	--sp,r8
8000455c:	fa c8 fb b4 	sub	r8,sp,-1100
80004560:	0c 9b       	mov	r11,r6
80004562:	1a d8       	st.w	--sp,r8
80004564:	08 9c       	mov	r12,r4
80004566:	fa c8 f9 40 	sub	r8,sp,-1728
8000456a:	fa c9 ff b4 	sub	r9,sp,-76
8000456e:	fe b0 f8 55 	rcall	80003618 <get_arg>
80004572:	2f dd       	sub	sp,-12
80004574:	78 0a       	ld.w	r10,r12[0x0]
80004576:	c2 08       	rjmp	800045b6 <_vfprintf_r+0xc6e>
80004578:	2f f7       	sub	r7,-1
8000457a:	10 39       	cp.w	r9,r8
8000457c:	c0 84       	brge	8000458c <_vfprintf_r+0xc44>
8000457e:	fa ca f9 44 	sub	r10,sp,-1724
80004582:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004586:	ec fa fd 88 	ld.w	r10,r6[-632]
8000458a:	c1 68       	rjmp	800045b6 <_vfprintf_r+0xc6e>
8000458c:	41 09       	lddsp	r9,sp[0x40]
8000458e:	59 f8       	cp.w	r8,31
80004590:	e0 89 00 10 	brgt	800045b0 <_vfprintf_r+0xc68>
80004594:	f2 ca ff fc 	sub	r10,r9,-4
80004598:	51 0a       	stdsp	sp[0x40],r10
8000459a:	fa c6 f9 44 	sub	r6,sp,-1724
8000459e:	72 0a       	ld.w	r10,r9[0x0]
800045a0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800045a4:	f3 4a fd 88 	st.w	r9[-632],r10
800045a8:	2f f8       	sub	r8,-1
800045aa:	fb 48 06 b4 	st.w	sp[1716],r8
800045ae:	c0 48       	rjmp	800045b6 <_vfprintf_r+0xc6e>
800045b0:	72 0a       	ld.w	r10,r9[0x0]
800045b2:	2f c9       	sub	r9,-4
800045b4:	51 09       	stdsp	sp[0x40],r9
800045b6:	40 be       	lddsp	lr,sp[0x2c]
800045b8:	b4 0e       	st.h	r10[0x0],lr
800045ba:	fe 9f fa 55 	bral	80003a64 <_vfprintf_r+0x11c>
800045be:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045c2:	40 3c       	lddsp	r12,sp[0xc]
800045c4:	58 0c       	cp.w	r12,0
800045c6:	c1 d0       	breq	80004600 <_vfprintf_r+0xcb8>
800045c8:	10 36       	cp.w	r6,r8
800045ca:	c0 64       	brge	800045d6 <_vfprintf_r+0xc8e>
800045cc:	fa cb f9 44 	sub	r11,sp,-1724
800045d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045d4:	c1 d8       	rjmp	8000460e <_vfprintf_r+0xcc6>
800045d6:	fa c8 f9 50 	sub	r8,sp,-1712
800045da:	1a d8       	st.w	--sp,r8
800045dc:	fa c8 fa b8 	sub	r8,sp,-1352
800045e0:	04 9a       	mov	r10,r2
800045e2:	1a d8       	st.w	--sp,r8
800045e4:	fa c8 fb b4 	sub	r8,sp,-1100
800045e8:	0c 9b       	mov	r11,r6
800045ea:	1a d8       	st.w	--sp,r8
800045ec:	08 9c       	mov	r12,r4
800045ee:	fa c8 f9 40 	sub	r8,sp,-1728
800045f2:	fa c9 ff b4 	sub	r9,sp,-76
800045f6:	fe b0 f8 11 	rcall	80003618 <get_arg>
800045fa:	2f dd       	sub	sp,-12
800045fc:	78 0a       	ld.w	r10,r12[0x0]
800045fe:	c2 08       	rjmp	8000463e <_vfprintf_r+0xcf6>
80004600:	2f f7       	sub	r7,-1
80004602:	10 39       	cp.w	r9,r8
80004604:	c0 84       	brge	80004614 <_vfprintf_r+0xccc>
80004606:	fa ca f9 44 	sub	r10,sp,-1724
8000460a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000460e:	ec fa fd 88 	ld.w	r10,r6[-632]
80004612:	c1 68       	rjmp	8000463e <_vfprintf_r+0xcf6>
80004614:	41 09       	lddsp	r9,sp[0x40]
80004616:	59 f8       	cp.w	r8,31
80004618:	e0 89 00 10 	brgt	80004638 <_vfprintf_r+0xcf0>
8000461c:	f2 ca ff fc 	sub	r10,r9,-4
80004620:	51 0a       	stdsp	sp[0x40],r10
80004622:	fa c6 f9 44 	sub	r6,sp,-1724
80004626:	72 0a       	ld.w	r10,r9[0x0]
80004628:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000462c:	f3 4a fd 88 	st.w	r9[-632],r10
80004630:	2f f8       	sub	r8,-1
80004632:	fb 48 06 b4 	st.w	sp[1716],r8
80004636:	c0 48       	rjmp	8000463e <_vfprintf_r+0xcf6>
80004638:	72 0a       	ld.w	r10,r9[0x0]
8000463a:	2f c9       	sub	r9,-4
8000463c:	51 09       	stdsp	sp[0x40],r9
8000463e:	40 be       	lddsp	lr,sp[0x2c]
80004640:	95 0e       	st.w	r10[0x0],lr
80004642:	fe 9f fa 11 	bral	80003a64 <_vfprintf_r+0x11c>
80004646:	50 a7       	stdsp	sp[0x28],r7
80004648:	50 80       	stdsp	sp[0x20],r0
8000464a:	0c 97       	mov	r7,r6
8000464c:	04 94       	mov	r4,r2
8000464e:	06 96       	mov	r6,r3
80004650:	02 92       	mov	r2,r1
80004652:	40 93       	lddsp	r3,sp[0x24]
80004654:	10 90       	mov	r0,r8
80004656:	40 41       	lddsp	r1,sp[0x10]
80004658:	a5 a5       	sbr	r5,0x4
8000465a:	c0 a8       	rjmp	8000466e <_vfprintf_r+0xd26>
8000465c:	50 a7       	stdsp	sp[0x28],r7
8000465e:	50 80       	stdsp	sp[0x20],r0
80004660:	0c 97       	mov	r7,r6
80004662:	04 94       	mov	r4,r2
80004664:	06 96       	mov	r6,r3
80004666:	02 92       	mov	r2,r1
80004668:	40 93       	lddsp	r3,sp[0x24]
8000466a:	10 90       	mov	r0,r8
8000466c:	40 41       	lddsp	r1,sp[0x10]
8000466e:	ed b5 00 05 	bld	r5,0x5
80004672:	c5 d1       	brne	8000472c <_vfprintf_r+0xde4>
80004674:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004678:	40 3c       	lddsp	r12,sp[0xc]
8000467a:	58 0c       	cp.w	r12,0
8000467c:	c2 60       	breq	800046c8 <_vfprintf_r+0xd80>
8000467e:	10 36       	cp.w	r6,r8
80004680:	c0 a4       	brge	80004694 <_vfprintf_r+0xd4c>
80004682:	fa cb f9 44 	sub	r11,sp,-1724
80004686:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000468a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000468e:	fa e9 00 00 	st.d	sp[0],r8
80004692:	c1 88       	rjmp	800046c2 <_vfprintf_r+0xd7a>
80004694:	fa c8 f9 50 	sub	r8,sp,-1712
80004698:	1a d8       	st.w	--sp,r8
8000469a:	fa c8 fa b8 	sub	r8,sp,-1352
8000469e:	04 9a       	mov	r10,r2
800046a0:	1a d8       	st.w	--sp,r8
800046a2:	0c 9b       	mov	r11,r6
800046a4:	fa c8 fb b4 	sub	r8,sp,-1100
800046a8:	08 9c       	mov	r12,r4
800046aa:	1a d8       	st.w	--sp,r8
800046ac:	fa c8 f9 40 	sub	r8,sp,-1728
800046b0:	fa c9 ff b4 	sub	r9,sp,-76
800046b4:	fe b0 f7 b2 	rcall	80003618 <get_arg>
800046b8:	2f dd       	sub	sp,-12
800046ba:	f8 ea 00 00 	ld.d	r10,r12[0]
800046be:	fa eb 00 00 	st.d	sp[0],r10
800046c2:	30 08       	mov	r8,0
800046c4:	e0 8f 03 de 	bral	80004e80 <_vfprintf_r+0x1538>
800046c8:	ee ca ff ff 	sub	r10,r7,-1
800046cc:	10 37       	cp.w	r7,r8
800046ce:	c0 b4       	brge	800046e4 <_vfprintf_r+0xd9c>
800046d0:	fa c9 f9 44 	sub	r9,sp,-1724
800046d4:	14 97       	mov	r7,r10
800046d6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800046da:	ec ea fd 88 	ld.d	r10,r6[-632]
800046de:	fa eb 00 00 	st.d	sp[0],r10
800046e2:	c1 88       	rjmp	80004712 <_vfprintf_r+0xdca>
800046e4:	41 09       	lddsp	r9,sp[0x40]
800046e6:	59 f8       	cp.w	r8,31
800046e8:	e0 89 00 18 	brgt	80004718 <_vfprintf_r+0xdd0>
800046ec:	f2 e6 00 00 	ld.d	r6,r9[0]
800046f0:	f2 cb ff f8 	sub	r11,r9,-8
800046f4:	fa e7 00 00 	st.d	sp[0],r6
800046f8:	51 0b       	stdsp	sp[0x40],r11
800046fa:	fa c6 f9 44 	sub	r6,sp,-1724
800046fe:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004702:	fa e6 00 00 	ld.d	r6,sp[0]
80004706:	f2 e7 fd 88 	st.d	r9[-632],r6
8000470a:	2f f8       	sub	r8,-1
8000470c:	14 97       	mov	r7,r10
8000470e:	fb 48 06 b4 	st.w	sp[1716],r8
80004712:	40 38       	lddsp	r8,sp[0xc]
80004714:	e0 8f 03 b6 	bral	80004e80 <_vfprintf_r+0x1538>
80004718:	f2 e6 00 00 	ld.d	r6,r9[0]
8000471c:	40 38       	lddsp	r8,sp[0xc]
8000471e:	fa e7 00 00 	st.d	sp[0],r6
80004722:	2f 89       	sub	r9,-8
80004724:	14 97       	mov	r7,r10
80004726:	51 09       	stdsp	sp[0x40],r9
80004728:	e0 8f 03 ac 	bral	80004e80 <_vfprintf_r+0x1538>
8000472c:	ed b5 00 04 	bld	r5,0x4
80004730:	c1 61       	brne	8000475c <_vfprintf_r+0xe14>
80004732:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004736:	40 3e       	lddsp	lr,sp[0xc]
80004738:	58 0e       	cp.w	lr,0
8000473a:	c0 80       	breq	8000474a <_vfprintf_r+0xe02>
8000473c:	10 36       	cp.w	r6,r8
8000473e:	c6 74       	brge	8000480c <_vfprintf_r+0xec4>
80004740:	fa cc f9 44 	sub	r12,sp,-1724
80004744:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004748:	c8 08       	rjmp	80004848 <_vfprintf_r+0xf00>
8000474a:	ee ca ff ff 	sub	r10,r7,-1
8000474e:	10 37       	cp.w	r7,r8
80004750:	c7 f4       	brge	8000484e <_vfprintf_r+0xf06>
80004752:	fa cb f9 44 	sub	r11,sp,-1724
80004756:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000475a:	c7 68       	rjmp	80004846 <_vfprintf_r+0xefe>
8000475c:	ed b5 00 06 	bld	r5,0x6
80004760:	c4 a1       	brne	800047f4 <_vfprintf_r+0xeac>
80004762:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004766:	40 3c       	lddsp	r12,sp[0xc]
80004768:	58 0c       	cp.w	r12,0
8000476a:	c1 d0       	breq	800047a4 <_vfprintf_r+0xe5c>
8000476c:	10 36       	cp.w	r6,r8
8000476e:	c0 64       	brge	8000477a <_vfprintf_r+0xe32>
80004770:	fa cb f9 44 	sub	r11,sp,-1724
80004774:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004778:	c1 f8       	rjmp	800047b6 <_vfprintf_r+0xe6e>
8000477a:	fa c8 f9 50 	sub	r8,sp,-1712
8000477e:	1a d8       	st.w	--sp,r8
80004780:	fa c8 fa b8 	sub	r8,sp,-1352
80004784:	1a d8       	st.w	--sp,r8
80004786:	fa c8 fb b4 	sub	r8,sp,-1100
8000478a:	1a d8       	st.w	--sp,r8
8000478c:	fa c8 f9 40 	sub	r8,sp,-1728
80004790:	fa c9 ff b4 	sub	r9,sp,-76
80004794:	04 9a       	mov	r10,r2
80004796:	0c 9b       	mov	r11,r6
80004798:	08 9c       	mov	r12,r4
8000479a:	fe b0 f7 3f 	rcall	80003618 <get_arg>
8000479e:	2f dd       	sub	sp,-12
800047a0:	98 18       	ld.sh	r8,r12[0x2]
800047a2:	c2 68       	rjmp	800047ee <_vfprintf_r+0xea6>
800047a4:	ee ca ff ff 	sub	r10,r7,-1
800047a8:	10 37       	cp.w	r7,r8
800047aa:	c0 94       	brge	800047bc <_vfprintf_r+0xe74>
800047ac:	fa c9 f9 44 	sub	r9,sp,-1724
800047b0:	14 97       	mov	r7,r10
800047b2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047b6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800047ba:	c1 a8       	rjmp	800047ee <_vfprintf_r+0xea6>
800047bc:	41 09       	lddsp	r9,sp[0x40]
800047be:	59 f8       	cp.w	r8,31
800047c0:	e0 89 00 13 	brgt	800047e6 <_vfprintf_r+0xe9e>
800047c4:	f2 cb ff fc 	sub	r11,r9,-4
800047c8:	51 0b       	stdsp	sp[0x40],r11
800047ca:	72 09       	ld.w	r9,r9[0x0]
800047cc:	fa c6 f9 44 	sub	r6,sp,-1724
800047d0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800047d4:	2f f8       	sub	r8,-1
800047d6:	f7 49 fd 88 	st.w	r11[-632],r9
800047da:	fb 48 06 b4 	st.w	sp[1716],r8
800047de:	14 97       	mov	r7,r10
800047e0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800047e4:	c0 58       	rjmp	800047ee <_vfprintf_r+0xea6>
800047e6:	92 18       	ld.sh	r8,r9[0x2]
800047e8:	14 97       	mov	r7,r10
800047ea:	2f c9       	sub	r9,-4
800047ec:	51 09       	stdsp	sp[0x40],r9
800047ee:	5c 78       	castu.h	r8
800047f0:	50 18       	stdsp	sp[0x4],r8
800047f2:	c4 68       	rjmp	8000487e <_vfprintf_r+0xf36>
800047f4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047f8:	40 3c       	lddsp	r12,sp[0xc]
800047fa:	58 0c       	cp.w	r12,0
800047fc:	c1 d0       	breq	80004836 <_vfprintf_r+0xeee>
800047fe:	10 36       	cp.w	r6,r8
80004800:	c0 64       	brge	8000480c <_vfprintf_r+0xec4>
80004802:	fa cb f9 44 	sub	r11,sp,-1724
80004806:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000480a:	c1 f8       	rjmp	80004848 <_vfprintf_r+0xf00>
8000480c:	fa c8 f9 50 	sub	r8,sp,-1712
80004810:	1a d8       	st.w	--sp,r8
80004812:	fa c8 fa b8 	sub	r8,sp,-1352
80004816:	0c 9b       	mov	r11,r6
80004818:	1a d8       	st.w	--sp,r8
8000481a:	fa c8 fb b4 	sub	r8,sp,-1100
8000481e:	04 9a       	mov	r10,r2
80004820:	1a d8       	st.w	--sp,r8
80004822:	08 9c       	mov	r12,r4
80004824:	fa c8 f9 40 	sub	r8,sp,-1728
80004828:	fa c9 ff b4 	sub	r9,sp,-76
8000482c:	fe b0 f6 f6 	rcall	80003618 <get_arg>
80004830:	2f dd       	sub	sp,-12
80004832:	78 0b       	ld.w	r11,r12[0x0]
80004834:	c2 48       	rjmp	8000487c <_vfprintf_r+0xf34>
80004836:	ee ca ff ff 	sub	r10,r7,-1
8000483a:	10 37       	cp.w	r7,r8
8000483c:	c0 94       	brge	8000484e <_vfprintf_r+0xf06>
8000483e:	fa c9 f9 44 	sub	r9,sp,-1724
80004842:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004846:	14 97       	mov	r7,r10
80004848:	ec fb fd 88 	ld.w	r11,r6[-632]
8000484c:	c1 88       	rjmp	8000487c <_vfprintf_r+0xf34>
8000484e:	41 09       	lddsp	r9,sp[0x40]
80004850:	59 f8       	cp.w	r8,31
80004852:	e0 89 00 11 	brgt	80004874 <_vfprintf_r+0xf2c>
80004856:	f2 cb ff fc 	sub	r11,r9,-4
8000485a:	51 0b       	stdsp	sp[0x40],r11
8000485c:	fa c6 f9 44 	sub	r6,sp,-1724
80004860:	72 0b       	ld.w	r11,r9[0x0]
80004862:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004866:	f3 4b fd 88 	st.w	r9[-632],r11
8000486a:	2f f8       	sub	r8,-1
8000486c:	14 97       	mov	r7,r10
8000486e:	fb 48 06 b4 	st.w	sp[1716],r8
80004872:	c0 58       	rjmp	8000487c <_vfprintf_r+0xf34>
80004874:	72 0b       	ld.w	r11,r9[0x0]
80004876:	14 97       	mov	r7,r10
80004878:	2f c9       	sub	r9,-4
8000487a:	51 09       	stdsp	sp[0x40],r9
8000487c:	50 1b       	stdsp	sp[0x4],r11
8000487e:	30 0e       	mov	lr,0
80004880:	50 0e       	stdsp	sp[0x0],lr
80004882:	1c 98       	mov	r8,lr
80004884:	e0 8f 02 fe 	bral	80004e80 <_vfprintf_r+0x1538>
80004888:	50 a7       	stdsp	sp[0x28],r7
8000488a:	50 80       	stdsp	sp[0x20],r0
8000488c:	0c 97       	mov	r7,r6
8000488e:	04 94       	mov	r4,r2
80004890:	06 96       	mov	r6,r3
80004892:	02 92       	mov	r2,r1
80004894:	40 93       	lddsp	r3,sp[0x24]
80004896:	40 41       	lddsp	r1,sp[0x10]
80004898:	0e 99       	mov	r9,r7
8000489a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000489e:	40 3c       	lddsp	r12,sp[0xc]
800048a0:	58 0c       	cp.w	r12,0
800048a2:	c1 d0       	breq	800048dc <_vfprintf_r+0xf94>
800048a4:	10 36       	cp.w	r6,r8
800048a6:	c0 64       	brge	800048b2 <_vfprintf_r+0xf6a>
800048a8:	fa cb f9 44 	sub	r11,sp,-1724
800048ac:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048b0:	c1 d8       	rjmp	800048ea <_vfprintf_r+0xfa2>
800048b2:	fa c8 f9 50 	sub	r8,sp,-1712
800048b6:	1a d8       	st.w	--sp,r8
800048b8:	fa c8 fa b8 	sub	r8,sp,-1352
800048bc:	1a d8       	st.w	--sp,r8
800048be:	fa c8 fb b4 	sub	r8,sp,-1100
800048c2:	1a d8       	st.w	--sp,r8
800048c4:	fa c9 ff b4 	sub	r9,sp,-76
800048c8:	fa c8 f9 40 	sub	r8,sp,-1728
800048cc:	04 9a       	mov	r10,r2
800048ce:	0c 9b       	mov	r11,r6
800048d0:	08 9c       	mov	r12,r4
800048d2:	fe b0 f6 a3 	rcall	80003618 <get_arg>
800048d6:	2f dd       	sub	sp,-12
800048d8:	78 09       	ld.w	r9,r12[0x0]
800048da:	c2 18       	rjmp	8000491c <_vfprintf_r+0xfd4>
800048dc:	2f f7       	sub	r7,-1
800048de:	10 39       	cp.w	r9,r8
800048e0:	c0 84       	brge	800048f0 <_vfprintf_r+0xfa8>
800048e2:	fa ca f9 44 	sub	r10,sp,-1724
800048e6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800048ea:	ec f9 fd 88 	ld.w	r9,r6[-632]
800048ee:	c1 78       	rjmp	8000491c <_vfprintf_r+0xfd4>
800048f0:	41 09       	lddsp	r9,sp[0x40]
800048f2:	59 f8       	cp.w	r8,31
800048f4:	e0 89 00 10 	brgt	80004914 <_vfprintf_r+0xfcc>
800048f8:	f2 ca ff fc 	sub	r10,r9,-4
800048fc:	51 0a       	stdsp	sp[0x40],r10
800048fe:	fa c6 f9 44 	sub	r6,sp,-1724
80004902:	72 09       	ld.w	r9,r9[0x0]
80004904:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004908:	f5 49 fd 88 	st.w	r10[-632],r9
8000490c:	2f f8       	sub	r8,-1
8000490e:	fb 48 06 b4 	st.w	sp[1716],r8
80004912:	c0 58       	rjmp	8000491c <_vfprintf_r+0xfd4>
80004914:	f2 c8 ff fc 	sub	r8,r9,-4
80004918:	51 08       	stdsp	sp[0x40],r8
8000491a:	72 09       	ld.w	r9,r9[0x0]
8000491c:	33 08       	mov	r8,48
8000491e:	fb 68 06 b8 	st.b	sp[1720],r8
80004922:	37 88       	mov	r8,120
80004924:	30 0e       	mov	lr,0
80004926:	fb 68 06 b9 	st.b	sp[1721],r8
8000492a:	fe cc 9b b6 	sub	r12,pc,-25674
8000492e:	50 19       	stdsp	sp[0x4],r9
80004930:	a1 b5       	sbr	r5,0x1
80004932:	50 0e       	stdsp	sp[0x0],lr
80004934:	50 dc       	stdsp	sp[0x34],r12
80004936:	30 28       	mov	r8,2
80004938:	37 80       	mov	r0,120
8000493a:	e0 8f 02 a3 	bral	80004e80 <_vfprintf_r+0x1538>
8000493e:	50 a7       	stdsp	sp[0x28],r7
80004940:	50 80       	stdsp	sp[0x20],r0
80004942:	10 90       	mov	r0,r8
80004944:	30 08       	mov	r8,0
80004946:	fb 68 06 bb 	st.b	sp[1723],r8
8000494a:	0c 97       	mov	r7,r6
8000494c:	04 94       	mov	r4,r2
8000494e:	06 96       	mov	r6,r3
80004950:	02 92       	mov	r2,r1
80004952:	40 93       	lddsp	r3,sp[0x24]
80004954:	40 41       	lddsp	r1,sp[0x10]
80004956:	0e 99       	mov	r9,r7
80004958:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000495c:	40 3b       	lddsp	r11,sp[0xc]
8000495e:	58 0b       	cp.w	r11,0
80004960:	c1 d0       	breq	8000499a <_vfprintf_r+0x1052>
80004962:	10 36       	cp.w	r6,r8
80004964:	c0 64       	brge	80004970 <_vfprintf_r+0x1028>
80004966:	fa ca f9 44 	sub	r10,sp,-1724
8000496a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000496e:	c1 d8       	rjmp	800049a8 <_vfprintf_r+0x1060>
80004970:	fa c8 f9 50 	sub	r8,sp,-1712
80004974:	1a d8       	st.w	--sp,r8
80004976:	fa c8 fa b8 	sub	r8,sp,-1352
8000497a:	1a d8       	st.w	--sp,r8
8000497c:	fa c8 fb b4 	sub	r8,sp,-1100
80004980:	0c 9b       	mov	r11,r6
80004982:	1a d8       	st.w	--sp,r8
80004984:	04 9a       	mov	r10,r2
80004986:	fa c8 f9 40 	sub	r8,sp,-1728
8000498a:	fa c9 ff b4 	sub	r9,sp,-76
8000498e:	08 9c       	mov	r12,r4
80004990:	fe b0 f6 44 	rcall	80003618 <get_arg>
80004994:	2f dd       	sub	sp,-12
80004996:	78 06       	ld.w	r6,r12[0x0]
80004998:	c2 08       	rjmp	800049d8 <_vfprintf_r+0x1090>
8000499a:	2f f7       	sub	r7,-1
8000499c:	10 39       	cp.w	r9,r8
8000499e:	c0 84       	brge	800049ae <_vfprintf_r+0x1066>
800049a0:	fa c9 f9 44 	sub	r9,sp,-1724
800049a4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800049a8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800049ac:	c1 68       	rjmp	800049d8 <_vfprintf_r+0x1090>
800049ae:	41 09       	lddsp	r9,sp[0x40]
800049b0:	59 f8       	cp.w	r8,31
800049b2:	e0 89 00 10 	brgt	800049d2 <_vfprintf_r+0x108a>
800049b6:	f2 ca ff fc 	sub	r10,r9,-4
800049ba:	51 0a       	stdsp	sp[0x40],r10
800049bc:	72 06       	ld.w	r6,r9[0x0]
800049be:	fa ce f9 44 	sub	lr,sp,-1724
800049c2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800049c6:	f3 46 fd 88 	st.w	r9[-632],r6
800049ca:	2f f8       	sub	r8,-1
800049cc:	fb 48 06 b4 	st.w	sp[1716],r8
800049d0:	c0 48       	rjmp	800049d8 <_vfprintf_r+0x1090>
800049d2:	72 06       	ld.w	r6,r9[0x0]
800049d4:	2f c9       	sub	r9,-4
800049d6:	51 09       	stdsp	sp[0x40],r9
800049d8:	40 2c       	lddsp	r12,sp[0x8]
800049da:	58 0c       	cp.w	r12,0
800049dc:	c1 05       	brlt	800049fc <_vfprintf_r+0x10b4>
800049de:	18 9a       	mov	r10,r12
800049e0:	30 0b       	mov	r11,0
800049e2:	0c 9c       	mov	r12,r6
800049e4:	e0 a0 14 58 	rcall	80007294 <memchr>
800049e8:	e0 80 02 df 	breq	80004fa6 <_vfprintf_r+0x165e>
800049ec:	f8 06 01 02 	sub	r2,r12,r6
800049f0:	40 2b       	lddsp	r11,sp[0x8]
800049f2:	16 32       	cp.w	r2,r11
800049f4:	e0 89 02 d9 	brgt	80004fa6 <_vfprintf_r+0x165e>
800049f8:	e0 8f 02 d4 	bral	80004fa0 <_vfprintf_r+0x1658>
800049fc:	30 0a       	mov	r10,0
800049fe:	0c 9c       	mov	r12,r6
80004a00:	50 2a       	stdsp	sp[0x8],r10
80004a02:	e0 a0 19 33 	rcall	80007c68 <strlen>
80004a06:	18 92       	mov	r2,r12
80004a08:	e0 8f 02 d2 	bral	80004fac <_vfprintf_r+0x1664>
80004a0c:	50 a7       	stdsp	sp[0x28],r7
80004a0e:	50 80       	stdsp	sp[0x20],r0
80004a10:	0c 97       	mov	r7,r6
80004a12:	04 94       	mov	r4,r2
80004a14:	06 96       	mov	r6,r3
80004a16:	02 92       	mov	r2,r1
80004a18:	40 93       	lddsp	r3,sp[0x24]
80004a1a:	10 90       	mov	r0,r8
80004a1c:	40 41       	lddsp	r1,sp[0x10]
80004a1e:	a5 a5       	sbr	r5,0x4
80004a20:	c0 a8       	rjmp	80004a34 <_vfprintf_r+0x10ec>
80004a22:	50 a7       	stdsp	sp[0x28],r7
80004a24:	50 80       	stdsp	sp[0x20],r0
80004a26:	0c 97       	mov	r7,r6
80004a28:	04 94       	mov	r4,r2
80004a2a:	06 96       	mov	r6,r3
80004a2c:	02 92       	mov	r2,r1
80004a2e:	40 93       	lddsp	r3,sp[0x24]
80004a30:	10 90       	mov	r0,r8
80004a32:	40 41       	lddsp	r1,sp[0x10]
80004a34:	ed b5 00 05 	bld	r5,0x5
80004a38:	c5 61       	brne	80004ae4 <_vfprintf_r+0x119c>
80004a3a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a3e:	40 39       	lddsp	r9,sp[0xc]
80004a40:	58 09       	cp.w	r9,0
80004a42:	c2 10       	breq	80004a84 <_vfprintf_r+0x113c>
80004a44:	10 36       	cp.w	r6,r8
80004a46:	c0 74       	brge	80004a54 <_vfprintf_r+0x110c>
80004a48:	fa c8 f9 44 	sub	r8,sp,-1724
80004a4c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a50:	c2 38       	rjmp	80004a96 <_vfprintf_r+0x114e>
80004a52:	d7 03       	nop
80004a54:	fa c8 f9 50 	sub	r8,sp,-1712
80004a58:	1a d8       	st.w	--sp,r8
80004a5a:	fa c8 fa b8 	sub	r8,sp,-1352
80004a5e:	1a d8       	st.w	--sp,r8
80004a60:	fa c8 fb b4 	sub	r8,sp,-1100
80004a64:	1a d8       	st.w	--sp,r8
80004a66:	fa c8 f9 40 	sub	r8,sp,-1728
80004a6a:	fa c9 ff b4 	sub	r9,sp,-76
80004a6e:	04 9a       	mov	r10,r2
80004a70:	0c 9b       	mov	r11,r6
80004a72:	08 9c       	mov	r12,r4
80004a74:	fe b0 f5 d2 	rcall	80003618 <get_arg>
80004a78:	2f dd       	sub	sp,-12
80004a7a:	f8 e8 00 00 	ld.d	r8,r12[0]
80004a7e:	fa e9 00 00 	st.d	sp[0],r8
80004a82:	c2 e8       	rjmp	80004ade <_vfprintf_r+0x1196>
80004a84:	ee ca ff ff 	sub	r10,r7,-1
80004a88:	10 37       	cp.w	r7,r8
80004a8a:	c0 b4       	brge	80004aa0 <_vfprintf_r+0x1158>
80004a8c:	fa c8 f9 44 	sub	r8,sp,-1724
80004a90:	14 97       	mov	r7,r10
80004a92:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a96:	ec ea fd 88 	ld.d	r10,r6[-632]
80004a9a:	fa eb 00 00 	st.d	sp[0],r10
80004a9e:	c2 08       	rjmp	80004ade <_vfprintf_r+0x1196>
80004aa0:	41 09       	lddsp	r9,sp[0x40]
80004aa2:	59 f8       	cp.w	r8,31
80004aa4:	e0 89 00 16 	brgt	80004ad0 <_vfprintf_r+0x1188>
80004aa8:	f2 e6 00 00 	ld.d	r6,r9[0]
80004aac:	f2 cb ff f8 	sub	r11,r9,-8
80004ab0:	fa e7 00 00 	st.d	sp[0],r6
80004ab4:	51 0b       	stdsp	sp[0x40],r11
80004ab6:	fa c6 f9 44 	sub	r6,sp,-1724
80004aba:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004abe:	fa e6 00 00 	ld.d	r6,sp[0]
80004ac2:	f2 e7 fd 88 	st.d	r9[-632],r6
80004ac6:	2f f8       	sub	r8,-1
80004ac8:	14 97       	mov	r7,r10
80004aca:	fb 48 06 b4 	st.w	sp[1716],r8
80004ace:	c0 88       	rjmp	80004ade <_vfprintf_r+0x1196>
80004ad0:	f2 e6 00 00 	ld.d	r6,r9[0]
80004ad4:	2f 89       	sub	r9,-8
80004ad6:	fa e7 00 00 	st.d	sp[0],r6
80004ada:	51 09       	stdsp	sp[0x40],r9
80004adc:	14 97       	mov	r7,r10
80004ade:	30 18       	mov	r8,1
80004ae0:	e0 8f 01 d0 	bral	80004e80 <_vfprintf_r+0x1538>
80004ae4:	ed b5 00 04 	bld	r5,0x4
80004ae8:	c1 61       	brne	80004b14 <_vfprintf_r+0x11cc>
80004aea:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004aee:	40 3e       	lddsp	lr,sp[0xc]
80004af0:	58 0e       	cp.w	lr,0
80004af2:	c0 80       	breq	80004b02 <_vfprintf_r+0x11ba>
80004af4:	10 36       	cp.w	r6,r8
80004af6:	c6 74       	brge	80004bc4 <_vfprintf_r+0x127c>
80004af8:	fa cc f9 44 	sub	r12,sp,-1724
80004afc:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b00:	c8 08       	rjmp	80004c00 <_vfprintf_r+0x12b8>
80004b02:	ee ca ff ff 	sub	r10,r7,-1
80004b06:	10 37       	cp.w	r7,r8
80004b08:	c7 f4       	brge	80004c06 <_vfprintf_r+0x12be>
80004b0a:	fa cb f9 44 	sub	r11,sp,-1724
80004b0e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b12:	c7 68       	rjmp	80004bfe <_vfprintf_r+0x12b6>
80004b14:	ed b5 00 06 	bld	r5,0x6
80004b18:	c4 a1       	brne	80004bac <_vfprintf_r+0x1264>
80004b1a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b1e:	40 3c       	lddsp	r12,sp[0xc]
80004b20:	58 0c       	cp.w	r12,0
80004b22:	c1 d0       	breq	80004b5c <_vfprintf_r+0x1214>
80004b24:	10 36       	cp.w	r6,r8
80004b26:	c0 64       	brge	80004b32 <_vfprintf_r+0x11ea>
80004b28:	fa cb f9 44 	sub	r11,sp,-1724
80004b2c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b30:	c1 f8       	rjmp	80004b6e <_vfprintf_r+0x1226>
80004b32:	fa c8 f9 50 	sub	r8,sp,-1712
80004b36:	1a d8       	st.w	--sp,r8
80004b38:	fa c8 fa b8 	sub	r8,sp,-1352
80004b3c:	1a d8       	st.w	--sp,r8
80004b3e:	fa c8 fb b4 	sub	r8,sp,-1100
80004b42:	1a d8       	st.w	--sp,r8
80004b44:	fa c8 f9 40 	sub	r8,sp,-1728
80004b48:	fa c9 ff b4 	sub	r9,sp,-76
80004b4c:	04 9a       	mov	r10,r2
80004b4e:	0c 9b       	mov	r11,r6
80004b50:	08 9c       	mov	r12,r4
80004b52:	fe b0 f5 63 	rcall	80003618 <get_arg>
80004b56:	2f dd       	sub	sp,-12
80004b58:	98 18       	ld.sh	r8,r12[0x2]
80004b5a:	c2 68       	rjmp	80004ba6 <_vfprintf_r+0x125e>
80004b5c:	ee ca ff ff 	sub	r10,r7,-1
80004b60:	10 37       	cp.w	r7,r8
80004b62:	c0 94       	brge	80004b74 <_vfprintf_r+0x122c>
80004b64:	fa c9 f9 44 	sub	r9,sp,-1724
80004b68:	14 97       	mov	r7,r10
80004b6a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b6e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004b72:	c1 a8       	rjmp	80004ba6 <_vfprintf_r+0x125e>
80004b74:	41 09       	lddsp	r9,sp[0x40]
80004b76:	59 f8       	cp.w	r8,31
80004b78:	e0 89 00 13 	brgt	80004b9e <_vfprintf_r+0x1256>
80004b7c:	f2 cb ff fc 	sub	r11,r9,-4
80004b80:	51 0b       	stdsp	sp[0x40],r11
80004b82:	72 09       	ld.w	r9,r9[0x0]
80004b84:	fa c6 f9 44 	sub	r6,sp,-1724
80004b88:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004b8c:	2f f8       	sub	r8,-1
80004b8e:	f7 49 fd 88 	st.w	r11[-632],r9
80004b92:	fb 48 06 b4 	st.w	sp[1716],r8
80004b96:	14 97       	mov	r7,r10
80004b98:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004b9c:	c0 58       	rjmp	80004ba6 <_vfprintf_r+0x125e>
80004b9e:	92 18       	ld.sh	r8,r9[0x2]
80004ba0:	14 97       	mov	r7,r10
80004ba2:	2f c9       	sub	r9,-4
80004ba4:	51 09       	stdsp	sp[0x40],r9
80004ba6:	5c 78       	castu.h	r8
80004ba8:	50 18       	stdsp	sp[0x4],r8
80004baa:	c4 68       	rjmp	80004c36 <_vfprintf_r+0x12ee>
80004bac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bb0:	40 3c       	lddsp	r12,sp[0xc]
80004bb2:	58 0c       	cp.w	r12,0
80004bb4:	c1 d0       	breq	80004bee <_vfprintf_r+0x12a6>
80004bb6:	10 36       	cp.w	r6,r8
80004bb8:	c0 64       	brge	80004bc4 <_vfprintf_r+0x127c>
80004bba:	fa cb f9 44 	sub	r11,sp,-1724
80004bbe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bc2:	c1 f8       	rjmp	80004c00 <_vfprintf_r+0x12b8>
80004bc4:	fa c8 f9 50 	sub	r8,sp,-1712
80004bc8:	1a d8       	st.w	--sp,r8
80004bca:	fa c8 fa b8 	sub	r8,sp,-1352
80004bce:	0c 9b       	mov	r11,r6
80004bd0:	1a d8       	st.w	--sp,r8
80004bd2:	fa c8 fb b4 	sub	r8,sp,-1100
80004bd6:	04 9a       	mov	r10,r2
80004bd8:	1a d8       	st.w	--sp,r8
80004bda:	08 9c       	mov	r12,r4
80004bdc:	fa c8 f9 40 	sub	r8,sp,-1728
80004be0:	fa c9 ff b4 	sub	r9,sp,-76
80004be4:	fe b0 f5 1a 	rcall	80003618 <get_arg>
80004be8:	2f dd       	sub	sp,-12
80004bea:	78 0b       	ld.w	r11,r12[0x0]
80004bec:	c2 48       	rjmp	80004c34 <_vfprintf_r+0x12ec>
80004bee:	ee ca ff ff 	sub	r10,r7,-1
80004bf2:	10 37       	cp.w	r7,r8
80004bf4:	c0 94       	brge	80004c06 <_vfprintf_r+0x12be>
80004bf6:	fa c9 f9 44 	sub	r9,sp,-1724
80004bfa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bfe:	14 97       	mov	r7,r10
80004c00:	ec fb fd 88 	ld.w	r11,r6[-632]
80004c04:	c1 88       	rjmp	80004c34 <_vfprintf_r+0x12ec>
80004c06:	41 09       	lddsp	r9,sp[0x40]
80004c08:	59 f8       	cp.w	r8,31
80004c0a:	e0 89 00 11 	brgt	80004c2c <_vfprintf_r+0x12e4>
80004c0e:	f2 cb ff fc 	sub	r11,r9,-4
80004c12:	51 0b       	stdsp	sp[0x40],r11
80004c14:	fa c6 f9 44 	sub	r6,sp,-1724
80004c18:	72 0b       	ld.w	r11,r9[0x0]
80004c1a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c1e:	f3 4b fd 88 	st.w	r9[-632],r11
80004c22:	2f f8       	sub	r8,-1
80004c24:	14 97       	mov	r7,r10
80004c26:	fb 48 06 b4 	st.w	sp[1716],r8
80004c2a:	c0 58       	rjmp	80004c34 <_vfprintf_r+0x12ec>
80004c2c:	72 0b       	ld.w	r11,r9[0x0]
80004c2e:	14 97       	mov	r7,r10
80004c30:	2f c9       	sub	r9,-4
80004c32:	51 09       	stdsp	sp[0x40],r9
80004c34:	50 1b       	stdsp	sp[0x4],r11
80004c36:	30 0e       	mov	lr,0
80004c38:	30 18       	mov	r8,1
80004c3a:	50 0e       	stdsp	sp[0x0],lr
80004c3c:	c2 29       	rjmp	80004e80 <_vfprintf_r+0x1538>
80004c3e:	50 a7       	stdsp	sp[0x28],r7
80004c40:	50 80       	stdsp	sp[0x20],r0
80004c42:	0c 97       	mov	r7,r6
80004c44:	04 94       	mov	r4,r2
80004c46:	06 96       	mov	r6,r3
80004c48:	02 92       	mov	r2,r1
80004c4a:	fe cc 9e d6 	sub	r12,pc,-24874
80004c4e:	40 93       	lddsp	r3,sp[0x24]
80004c50:	10 90       	mov	r0,r8
80004c52:	40 41       	lddsp	r1,sp[0x10]
80004c54:	50 dc       	stdsp	sp[0x34],r12
80004c56:	ed b5 00 05 	bld	r5,0x5
80004c5a:	c5 51       	brne	80004d04 <_vfprintf_r+0x13bc>
80004c5c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c60:	40 3b       	lddsp	r11,sp[0xc]
80004c62:	58 0b       	cp.w	r11,0
80004c64:	c2 20       	breq	80004ca8 <_vfprintf_r+0x1360>
80004c66:	10 36       	cp.w	r6,r8
80004c68:	c0 a4       	brge	80004c7c <_vfprintf_r+0x1334>
80004c6a:	fa ca f9 44 	sub	r10,sp,-1724
80004c6e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004c72:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004c76:	fa e9 00 00 	st.d	sp[0],r8
80004c7a:	cf 28       	rjmp	80004e5e <_vfprintf_r+0x1516>
80004c7c:	fa c8 f9 50 	sub	r8,sp,-1712
80004c80:	1a d8       	st.w	--sp,r8
80004c82:	fa c8 fa b8 	sub	r8,sp,-1352
80004c86:	04 9a       	mov	r10,r2
80004c88:	1a d8       	st.w	--sp,r8
80004c8a:	0c 9b       	mov	r11,r6
80004c8c:	fa c8 fb b4 	sub	r8,sp,-1100
80004c90:	08 9c       	mov	r12,r4
80004c92:	1a d8       	st.w	--sp,r8
80004c94:	fa c8 f9 40 	sub	r8,sp,-1728
80004c98:	fa c9 ff b4 	sub	r9,sp,-76
80004c9c:	fe b0 f4 be 	rcall	80003618 <get_arg>
80004ca0:	2f dd       	sub	sp,-12
80004ca2:	f8 ea 00 00 	ld.d	r10,r12[0]
80004ca6:	c0 c8       	rjmp	80004cbe <_vfprintf_r+0x1376>
80004ca8:	ee ca ff ff 	sub	r10,r7,-1
80004cac:	10 37       	cp.w	r7,r8
80004cae:	c0 b4       	brge	80004cc4 <_vfprintf_r+0x137c>
80004cb0:	fa c9 f9 44 	sub	r9,sp,-1724
80004cb4:	14 97       	mov	r7,r10
80004cb6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cba:	ec ea fd 88 	ld.d	r10,r6[-632]
80004cbe:	fa eb 00 00 	st.d	sp[0],r10
80004cc2:	cc e8       	rjmp	80004e5e <_vfprintf_r+0x1516>
80004cc4:	41 09       	lddsp	r9,sp[0x40]
80004cc6:	59 f8       	cp.w	r8,31
80004cc8:	e0 89 00 16 	brgt	80004cf4 <_vfprintf_r+0x13ac>
80004ccc:	f2 e6 00 00 	ld.d	r6,r9[0]
80004cd0:	f2 cb ff f8 	sub	r11,r9,-8
80004cd4:	fa e7 00 00 	st.d	sp[0],r6
80004cd8:	51 0b       	stdsp	sp[0x40],r11
80004cda:	fa c6 f9 44 	sub	r6,sp,-1724
80004cde:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ce2:	fa e6 00 00 	ld.d	r6,sp[0]
80004ce6:	f2 e7 fd 88 	st.d	r9[-632],r6
80004cea:	2f f8       	sub	r8,-1
80004cec:	14 97       	mov	r7,r10
80004cee:	fb 48 06 b4 	st.w	sp[1716],r8
80004cf2:	cb 68       	rjmp	80004e5e <_vfprintf_r+0x1516>
80004cf4:	f2 e6 00 00 	ld.d	r6,r9[0]
80004cf8:	2f 89       	sub	r9,-8
80004cfa:	fa e7 00 00 	st.d	sp[0],r6
80004cfe:	51 09       	stdsp	sp[0x40],r9
80004d00:	14 97       	mov	r7,r10
80004d02:	ca e8       	rjmp	80004e5e <_vfprintf_r+0x1516>
80004d04:	ed b5 00 04 	bld	r5,0x4
80004d08:	c1 71       	brne	80004d36 <_vfprintf_r+0x13ee>
80004d0a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d0e:	40 3e       	lddsp	lr,sp[0xc]
80004d10:	58 0e       	cp.w	lr,0
80004d12:	c0 80       	breq	80004d22 <_vfprintf_r+0x13da>
80004d14:	10 36       	cp.w	r6,r8
80004d16:	c6 94       	brge	80004de8 <_vfprintf_r+0x14a0>
80004d18:	fa cc f9 44 	sub	r12,sp,-1724
80004d1c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d20:	c8 28       	rjmp	80004e24 <_vfprintf_r+0x14dc>
80004d22:	ee ca ff ff 	sub	r10,r7,-1
80004d26:	10 37       	cp.w	r7,r8
80004d28:	e0 84 00 81 	brge	80004e2a <_vfprintf_r+0x14e2>
80004d2c:	fa cb f9 44 	sub	r11,sp,-1724
80004d30:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d34:	c7 78       	rjmp	80004e22 <_vfprintf_r+0x14da>
80004d36:	ed b5 00 06 	bld	r5,0x6
80004d3a:	c4 b1       	brne	80004dd0 <_vfprintf_r+0x1488>
80004d3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d40:	40 3c       	lddsp	r12,sp[0xc]
80004d42:	58 0c       	cp.w	r12,0
80004d44:	c1 d0       	breq	80004d7e <_vfprintf_r+0x1436>
80004d46:	10 36       	cp.w	r6,r8
80004d48:	c0 64       	brge	80004d54 <_vfprintf_r+0x140c>
80004d4a:	fa cb f9 44 	sub	r11,sp,-1724
80004d4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d52:	c1 f8       	rjmp	80004d90 <_vfprintf_r+0x1448>
80004d54:	fa c8 f9 50 	sub	r8,sp,-1712
80004d58:	1a d8       	st.w	--sp,r8
80004d5a:	fa c8 fa b8 	sub	r8,sp,-1352
80004d5e:	1a d8       	st.w	--sp,r8
80004d60:	fa c8 fb b4 	sub	r8,sp,-1100
80004d64:	1a d8       	st.w	--sp,r8
80004d66:	fa c8 f9 40 	sub	r8,sp,-1728
80004d6a:	fa c9 ff b4 	sub	r9,sp,-76
80004d6e:	04 9a       	mov	r10,r2
80004d70:	0c 9b       	mov	r11,r6
80004d72:	08 9c       	mov	r12,r4
80004d74:	fe b0 f4 52 	rcall	80003618 <get_arg>
80004d78:	2f dd       	sub	sp,-12
80004d7a:	98 18       	ld.sh	r8,r12[0x2]
80004d7c:	c2 78       	rjmp	80004dca <_vfprintf_r+0x1482>
80004d7e:	ee ca ff ff 	sub	r10,r7,-1
80004d82:	10 37       	cp.w	r7,r8
80004d84:	c0 a4       	brge	80004d98 <_vfprintf_r+0x1450>
80004d86:	fa c9 f9 44 	sub	r9,sp,-1724
80004d8a:	14 97       	mov	r7,r10
80004d8c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d90:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004d94:	c1 b8       	rjmp	80004dca <_vfprintf_r+0x1482>
80004d96:	d7 03       	nop
80004d98:	41 09       	lddsp	r9,sp[0x40]
80004d9a:	59 f8       	cp.w	r8,31
80004d9c:	e0 89 00 13 	brgt	80004dc2 <_vfprintf_r+0x147a>
80004da0:	f2 cb ff fc 	sub	r11,r9,-4
80004da4:	51 0b       	stdsp	sp[0x40],r11
80004da6:	72 09       	ld.w	r9,r9[0x0]
80004da8:	fa c6 f9 44 	sub	r6,sp,-1724
80004dac:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004db0:	2f f8       	sub	r8,-1
80004db2:	f7 49 fd 88 	st.w	r11[-632],r9
80004db6:	fb 48 06 b4 	st.w	sp[1716],r8
80004dba:	14 97       	mov	r7,r10
80004dbc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004dc0:	c0 58       	rjmp	80004dca <_vfprintf_r+0x1482>
80004dc2:	92 18       	ld.sh	r8,r9[0x2]
80004dc4:	14 97       	mov	r7,r10
80004dc6:	2f c9       	sub	r9,-4
80004dc8:	51 09       	stdsp	sp[0x40],r9
80004dca:	5c 78       	castu.h	r8
80004dcc:	50 18       	stdsp	sp[0x4],r8
80004dce:	c4 68       	rjmp	80004e5a <_vfprintf_r+0x1512>
80004dd0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dd4:	40 3c       	lddsp	r12,sp[0xc]
80004dd6:	58 0c       	cp.w	r12,0
80004dd8:	c1 d0       	breq	80004e12 <_vfprintf_r+0x14ca>
80004dda:	10 36       	cp.w	r6,r8
80004ddc:	c0 64       	brge	80004de8 <_vfprintf_r+0x14a0>
80004dde:	fa cb f9 44 	sub	r11,sp,-1724
80004de2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004de6:	c1 f8       	rjmp	80004e24 <_vfprintf_r+0x14dc>
80004de8:	fa c8 f9 50 	sub	r8,sp,-1712
80004dec:	1a d8       	st.w	--sp,r8
80004dee:	fa c8 fa b8 	sub	r8,sp,-1352
80004df2:	0c 9b       	mov	r11,r6
80004df4:	1a d8       	st.w	--sp,r8
80004df6:	fa c8 fb b4 	sub	r8,sp,-1100
80004dfa:	04 9a       	mov	r10,r2
80004dfc:	1a d8       	st.w	--sp,r8
80004dfe:	08 9c       	mov	r12,r4
80004e00:	fa c8 f9 40 	sub	r8,sp,-1728
80004e04:	fa c9 ff b4 	sub	r9,sp,-76
80004e08:	fe b0 f4 08 	rcall	80003618 <get_arg>
80004e0c:	2f dd       	sub	sp,-12
80004e0e:	78 0b       	ld.w	r11,r12[0x0]
80004e10:	c2 48       	rjmp	80004e58 <_vfprintf_r+0x1510>
80004e12:	ee ca ff ff 	sub	r10,r7,-1
80004e16:	10 37       	cp.w	r7,r8
80004e18:	c0 94       	brge	80004e2a <_vfprintf_r+0x14e2>
80004e1a:	fa c9 f9 44 	sub	r9,sp,-1724
80004e1e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e22:	14 97       	mov	r7,r10
80004e24:	ec fb fd 88 	ld.w	r11,r6[-632]
80004e28:	c1 88       	rjmp	80004e58 <_vfprintf_r+0x1510>
80004e2a:	41 09       	lddsp	r9,sp[0x40]
80004e2c:	59 f8       	cp.w	r8,31
80004e2e:	e0 89 00 11 	brgt	80004e50 <_vfprintf_r+0x1508>
80004e32:	f2 cb ff fc 	sub	r11,r9,-4
80004e36:	51 0b       	stdsp	sp[0x40],r11
80004e38:	fa c6 f9 44 	sub	r6,sp,-1724
80004e3c:	72 0b       	ld.w	r11,r9[0x0]
80004e3e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e42:	f3 4b fd 88 	st.w	r9[-632],r11
80004e46:	2f f8       	sub	r8,-1
80004e48:	14 97       	mov	r7,r10
80004e4a:	fb 48 06 b4 	st.w	sp[1716],r8
80004e4e:	c0 58       	rjmp	80004e58 <_vfprintf_r+0x1510>
80004e50:	72 0b       	ld.w	r11,r9[0x0]
80004e52:	14 97       	mov	r7,r10
80004e54:	2f c9       	sub	r9,-4
80004e56:	51 09       	stdsp	sp[0x40],r9
80004e58:	50 1b       	stdsp	sp[0x4],r11
80004e5a:	30 0e       	mov	lr,0
80004e5c:	50 0e       	stdsp	sp[0x0],lr
80004e5e:	40 08       	lddsp	r8,sp[0x0]
80004e60:	40 1c       	lddsp	r12,sp[0x4]
80004e62:	18 48       	or	r8,r12
80004e64:	5f 19       	srne	r9
80004e66:	0a 98       	mov	r8,r5
80004e68:	eb e9 00 09 	and	r9,r5,r9
80004e6c:	a1 b8       	sbr	r8,0x1
80004e6e:	58 09       	cp.w	r9,0
80004e70:	c0 70       	breq	80004e7e <_vfprintf_r+0x1536>
80004e72:	10 95       	mov	r5,r8
80004e74:	fb 60 06 b9 	st.b	sp[1721],r0
80004e78:	33 08       	mov	r8,48
80004e7a:	fb 68 06 b8 	st.b	sp[1720],r8
80004e7e:	30 28       	mov	r8,2
80004e80:	30 09       	mov	r9,0
80004e82:	fb 69 06 bb 	st.b	sp[1723],r9
80004e86:	0a 99       	mov	r9,r5
80004e88:	a7 d9       	cbr	r9,0x7
80004e8a:	40 2b       	lddsp	r11,sp[0x8]
80004e8c:	40 16       	lddsp	r6,sp[0x4]
80004e8e:	58 0b       	cp.w	r11,0
80004e90:	5f 1a       	srne	r10
80004e92:	f2 05 17 40 	movge	r5,r9
80004e96:	fa c2 f9 78 	sub	r2,sp,-1672
80004e9a:	40 09       	lddsp	r9,sp[0x0]
80004e9c:	0c 49       	or	r9,r6
80004e9e:	5f 19       	srne	r9
80004ea0:	f5 e9 10 09 	or	r9,r10,r9
80004ea4:	c5 c0       	breq	80004f5c <_vfprintf_r+0x1614>
80004ea6:	30 19       	mov	r9,1
80004ea8:	f2 08 18 00 	cp.b	r8,r9
80004eac:	c0 60       	breq	80004eb8 <_vfprintf_r+0x1570>
80004eae:	30 29       	mov	r9,2
80004eb0:	f2 08 18 00 	cp.b	r8,r9
80004eb4:	c0 41       	brne	80004ebc <_vfprintf_r+0x1574>
80004eb6:	c3 c8       	rjmp	80004f2e <_vfprintf_r+0x15e6>
80004eb8:	04 96       	mov	r6,r2
80004eba:	c3 08       	rjmp	80004f1a <_vfprintf_r+0x15d2>
80004ebc:	04 96       	mov	r6,r2
80004ebe:	fa e8 00 00 	ld.d	r8,sp[0]
80004ec2:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004ec6:	2d 0a       	sub	r10,-48
80004ec8:	0c fa       	st.b	--r6,r10
80004eca:	f0 0b 16 03 	lsr	r11,r8,0x3
80004ece:	f2 0c 16 03 	lsr	r12,r9,0x3
80004ed2:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004ed6:	18 99       	mov	r9,r12
80004ed8:	16 98       	mov	r8,r11
80004eda:	58 08       	cp.w	r8,0
80004edc:	5c 29       	cpc	r9
80004ede:	cf 21       	brne	80004ec2 <_vfprintf_r+0x157a>
80004ee0:	fa e9 00 00 	st.d	sp[0],r8
80004ee4:	ed b5 00 00 	bld	r5,0x0
80004ee8:	c4 51       	brne	80004f72 <_vfprintf_r+0x162a>
80004eea:	33 09       	mov	r9,48
80004eec:	f2 0a 18 00 	cp.b	r10,r9
80004ef0:	c4 10       	breq	80004f72 <_vfprintf_r+0x162a>
80004ef2:	0c f9       	st.b	--r6,r9
80004ef4:	c3 f8       	rjmp	80004f72 <_vfprintf_r+0x162a>
80004ef6:	fa ea 00 00 	ld.d	r10,sp[0]
80004efa:	30 a8       	mov	r8,10
80004efc:	30 09       	mov	r9,0
80004efe:	e0 a0 1e 31 	rcall	80008b60 <__avr32_umod64>
80004f02:	30 a8       	mov	r8,10
80004f04:	2d 0a       	sub	r10,-48
80004f06:	30 09       	mov	r9,0
80004f08:	ac 8a       	st.b	r6[0x0],r10
80004f0a:	fa ea 00 00 	ld.d	r10,sp[0]
80004f0e:	e0 a0 1c f7 	rcall	800088fc <__avr32_udiv64>
80004f12:	16 99       	mov	r9,r11
80004f14:	14 98       	mov	r8,r10
80004f16:	fa e9 00 00 	st.d	sp[0],r8
80004f1a:	20 16       	sub	r6,1
80004f1c:	fa ea 00 00 	ld.d	r10,sp[0]
80004f20:	58 9a       	cp.w	r10,9
80004f22:	5c 2b       	cpc	r11
80004f24:	fe 9b ff e9 	brhi	80004ef6 <_vfprintf_r+0x15ae>
80004f28:	1b f8       	ld.ub	r8,sp[0x7]
80004f2a:	2d 08       	sub	r8,-48
80004f2c:	c2 08       	rjmp	80004f6c <_vfprintf_r+0x1624>
80004f2e:	04 96       	mov	r6,r2
80004f30:	fa e8 00 00 	ld.d	r8,sp[0]
80004f34:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004f38:	40 de       	lddsp	lr,sp[0x34]
80004f3a:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004f3e:	0c fa       	st.b	--r6,r10
80004f40:	f2 0b 16 04 	lsr	r11,r9,0x4
80004f44:	f0 0a 16 04 	lsr	r10,r8,0x4
80004f48:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004f4c:	16 99       	mov	r9,r11
80004f4e:	14 98       	mov	r8,r10
80004f50:	58 08       	cp.w	r8,0
80004f52:	5c 29       	cpc	r9
80004f54:	cf 01       	brne	80004f34 <_vfprintf_r+0x15ec>
80004f56:	fa e9 00 00 	st.d	sp[0],r8
80004f5a:	c0 c8       	rjmp	80004f72 <_vfprintf_r+0x162a>
80004f5c:	58 08       	cp.w	r8,0
80004f5e:	c0 91       	brne	80004f70 <_vfprintf_r+0x1628>
80004f60:	ed b5 00 00 	bld	r5,0x0
80004f64:	c0 61       	brne	80004f70 <_vfprintf_r+0x1628>
80004f66:	fa c6 f9 79 	sub	r6,sp,-1671
80004f6a:	33 08       	mov	r8,48
80004f6c:	ac 88       	st.b	r6[0x0],r8
80004f6e:	c0 28       	rjmp	80004f72 <_vfprintf_r+0x162a>
80004f70:	04 96       	mov	r6,r2
80004f72:	0c 12       	sub	r2,r6
80004f74:	c1 c8       	rjmp	80004fac <_vfprintf_r+0x1664>
80004f76:	50 a7       	stdsp	sp[0x28],r7
80004f78:	50 80       	stdsp	sp[0x20],r0
80004f7a:	40 93       	lddsp	r3,sp[0x24]
80004f7c:	0c 97       	mov	r7,r6
80004f7e:	10 90       	mov	r0,r8
80004f80:	04 94       	mov	r4,r2
80004f82:	40 41       	lddsp	r1,sp[0x10]
80004f84:	58 08       	cp.w	r8,0
80004f86:	e0 80 04 4f 	breq	80005824 <_vfprintf_r+0x1edc>
80004f8a:	fb 68 06 60 	st.b	sp[1632],r8
80004f8e:	30 0c       	mov	r12,0
80004f90:	30 08       	mov	r8,0
80004f92:	30 12       	mov	r2,1
80004f94:	fb 68 06 bb 	st.b	sp[1723],r8
80004f98:	50 2c       	stdsp	sp[0x8],r12
80004f9a:	fa c6 f9 a0 	sub	r6,sp,-1632
80004f9e:	c0 78       	rjmp	80004fac <_vfprintf_r+0x1664>
80004fa0:	30 0b       	mov	r11,0
80004fa2:	50 2b       	stdsp	sp[0x8],r11
80004fa4:	c0 48       	rjmp	80004fac <_vfprintf_r+0x1664>
80004fa6:	40 22       	lddsp	r2,sp[0x8]
80004fa8:	30 0a       	mov	r10,0
80004faa:	50 2a       	stdsp	sp[0x8],r10
80004fac:	40 29       	lddsp	r9,sp[0x8]
80004fae:	e4 09 0c 49 	max	r9,r2,r9
80004fb2:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004fb6:	50 39       	stdsp	sp[0xc],r9
80004fb8:	0a 9e       	mov	lr,r5
80004fba:	30 09       	mov	r9,0
80004fbc:	e2 1e 00 02 	andl	lr,0x2,COH
80004fc0:	f2 08 18 00 	cp.b	r8,r9
80004fc4:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004fc8:	f7 b8 01 ff 	subne	r8,-1
80004fcc:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004fd0:	0a 9b       	mov	r11,r5
80004fd2:	58 0e       	cp.w	lr,0
80004fd4:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004fd8:	f7 bc 01 fe 	subne	r12,-2
80004fdc:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004fe0:	e2 1b 00 84 	andl	r11,0x84,COH
80004fe4:	50 fe       	stdsp	sp[0x3c],lr
80004fe6:	50 9b       	stdsp	sp[0x24],r11
80004fe8:	c4 71       	brne	80005076 <_vfprintf_r+0x172e>
80004fea:	40 8a       	lddsp	r10,sp[0x20]
80004fec:	40 39       	lddsp	r9,sp[0xc]
80004fee:	12 1a       	sub	r10,r9
80004ff0:	50 4a       	stdsp	sp[0x10],r10
80004ff2:	58 0a       	cp.w	r10,0
80004ff4:	e0 89 00 20 	brgt	80005034 <_vfprintf_r+0x16ec>
80004ff8:	c3 f8       	rjmp	80005076 <_vfprintf_r+0x172e>
80004ffa:	2f 09       	sub	r9,-16
80004ffc:	2f f8       	sub	r8,-1
80004ffe:	fe ce a2 72 	sub	lr,pc,-23950
80005002:	31 0c       	mov	r12,16
80005004:	fb 49 06 90 	st.w	sp[1680],r9
80005008:	87 0e       	st.w	r3[0x0],lr
8000500a:	87 1c       	st.w	r3[0x4],r12
8000500c:	fb 48 06 8c 	st.w	sp[1676],r8
80005010:	58 78       	cp.w	r8,7
80005012:	e0 89 00 04 	brgt	8000501a <_vfprintf_r+0x16d2>
80005016:	2f 83       	sub	r3,-8
80005018:	c0 b8       	rjmp	8000502e <_vfprintf_r+0x16e6>
8000501a:	fa ca f9 78 	sub	r10,sp,-1672
8000501e:	02 9b       	mov	r11,r1
80005020:	08 9c       	mov	r12,r4
80005022:	fe b0 f4 85 	rcall	8000392c <__sprint_r>
80005026:	e0 81 04 10 	brne	80005846 <_vfprintf_r+0x1efe>
8000502a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000502e:	40 4b       	lddsp	r11,sp[0x10]
80005030:	21 0b       	sub	r11,16
80005032:	50 4b       	stdsp	sp[0x10],r11
80005034:	fa f9 06 90 	ld.w	r9,sp[1680]
80005038:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000503c:	fe ca a2 b0 	sub	r10,pc,-23888
80005040:	40 4e       	lddsp	lr,sp[0x10]
80005042:	59 0e       	cp.w	lr,16
80005044:	fe 99 ff db 	brgt	80004ffa <_vfprintf_r+0x16b2>
80005048:	1c 09       	add	r9,lr
8000504a:	2f f8       	sub	r8,-1
8000504c:	87 0a       	st.w	r3[0x0],r10
8000504e:	fb 49 06 90 	st.w	sp[1680],r9
80005052:	87 1e       	st.w	r3[0x4],lr
80005054:	fb 48 06 8c 	st.w	sp[1676],r8
80005058:	58 78       	cp.w	r8,7
8000505a:	e0 89 00 04 	brgt	80005062 <_vfprintf_r+0x171a>
8000505e:	2f 83       	sub	r3,-8
80005060:	c0 b8       	rjmp	80005076 <_vfprintf_r+0x172e>
80005062:	fa ca f9 78 	sub	r10,sp,-1672
80005066:	02 9b       	mov	r11,r1
80005068:	08 9c       	mov	r12,r4
8000506a:	fe b0 f4 61 	rcall	8000392c <__sprint_r>
8000506e:	e0 81 03 ec 	brne	80005846 <_vfprintf_r+0x1efe>
80005072:	fa c3 f9 e0 	sub	r3,sp,-1568
80005076:	30 09       	mov	r9,0
80005078:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000507c:	f2 08 18 00 	cp.b	r8,r9
80005080:	c1 f0       	breq	800050be <_vfprintf_r+0x1776>
80005082:	fa f8 06 90 	ld.w	r8,sp[1680]
80005086:	fa c9 f9 45 	sub	r9,sp,-1723
8000508a:	2f f8       	sub	r8,-1
8000508c:	87 09       	st.w	r3[0x0],r9
8000508e:	fb 48 06 90 	st.w	sp[1680],r8
80005092:	30 19       	mov	r9,1
80005094:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005098:	87 19       	st.w	r3[0x4],r9
8000509a:	2f f8       	sub	r8,-1
8000509c:	fb 48 06 8c 	st.w	sp[1676],r8
800050a0:	58 78       	cp.w	r8,7
800050a2:	e0 89 00 04 	brgt	800050aa <_vfprintf_r+0x1762>
800050a6:	2f 83       	sub	r3,-8
800050a8:	c0 b8       	rjmp	800050be <_vfprintf_r+0x1776>
800050aa:	fa ca f9 78 	sub	r10,sp,-1672
800050ae:	02 9b       	mov	r11,r1
800050b0:	08 9c       	mov	r12,r4
800050b2:	fe b0 f4 3d 	rcall	8000392c <__sprint_r>
800050b6:	e0 81 03 c8 	brne	80005846 <_vfprintf_r+0x1efe>
800050ba:	fa c3 f9 e0 	sub	r3,sp,-1568
800050be:	40 fc       	lddsp	r12,sp[0x3c]
800050c0:	58 0c       	cp.w	r12,0
800050c2:	c1 f0       	breq	80005100 <_vfprintf_r+0x17b8>
800050c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800050c8:	fa c9 f9 48 	sub	r9,sp,-1720
800050cc:	2f e8       	sub	r8,-2
800050ce:	87 09       	st.w	r3[0x0],r9
800050d0:	fb 48 06 90 	st.w	sp[1680],r8
800050d4:	30 29       	mov	r9,2
800050d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050da:	87 19       	st.w	r3[0x4],r9
800050dc:	2f f8       	sub	r8,-1
800050de:	fb 48 06 8c 	st.w	sp[1676],r8
800050e2:	58 78       	cp.w	r8,7
800050e4:	e0 89 00 04 	brgt	800050ec <_vfprintf_r+0x17a4>
800050e8:	2f 83       	sub	r3,-8
800050ea:	c0 b8       	rjmp	80005100 <_vfprintf_r+0x17b8>
800050ec:	fa ca f9 78 	sub	r10,sp,-1672
800050f0:	02 9b       	mov	r11,r1
800050f2:	08 9c       	mov	r12,r4
800050f4:	fe b0 f4 1c 	rcall	8000392c <__sprint_r>
800050f8:	e0 81 03 a7 	brne	80005846 <_vfprintf_r+0x1efe>
800050fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005100:	40 9b       	lddsp	r11,sp[0x24]
80005102:	e0 4b 00 80 	cp.w	r11,128
80005106:	c4 71       	brne	80005194 <_vfprintf_r+0x184c>
80005108:	40 8a       	lddsp	r10,sp[0x20]
8000510a:	40 39       	lddsp	r9,sp[0xc]
8000510c:	12 1a       	sub	r10,r9
8000510e:	50 4a       	stdsp	sp[0x10],r10
80005110:	58 0a       	cp.w	r10,0
80005112:	e0 89 00 20 	brgt	80005152 <_vfprintf_r+0x180a>
80005116:	c3 f8       	rjmp	80005194 <_vfprintf_r+0x184c>
80005118:	2f 09       	sub	r9,-16
8000511a:	2f f8       	sub	r8,-1
8000511c:	fe ce a3 80 	sub	lr,pc,-23680
80005120:	31 0c       	mov	r12,16
80005122:	fb 49 06 90 	st.w	sp[1680],r9
80005126:	87 0e       	st.w	r3[0x0],lr
80005128:	87 1c       	st.w	r3[0x4],r12
8000512a:	fb 48 06 8c 	st.w	sp[1676],r8
8000512e:	58 78       	cp.w	r8,7
80005130:	e0 89 00 04 	brgt	80005138 <_vfprintf_r+0x17f0>
80005134:	2f 83       	sub	r3,-8
80005136:	c0 b8       	rjmp	8000514c <_vfprintf_r+0x1804>
80005138:	fa ca f9 78 	sub	r10,sp,-1672
8000513c:	02 9b       	mov	r11,r1
8000513e:	08 9c       	mov	r12,r4
80005140:	fe b0 f3 f6 	rcall	8000392c <__sprint_r>
80005144:	e0 81 03 81 	brne	80005846 <_vfprintf_r+0x1efe>
80005148:	fa c3 f9 e0 	sub	r3,sp,-1568
8000514c:	40 4b       	lddsp	r11,sp[0x10]
8000514e:	21 0b       	sub	r11,16
80005150:	50 4b       	stdsp	sp[0x10],r11
80005152:	fa f9 06 90 	ld.w	r9,sp[1680]
80005156:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000515a:	fe ca a3 be 	sub	r10,pc,-23618
8000515e:	40 4e       	lddsp	lr,sp[0x10]
80005160:	59 0e       	cp.w	lr,16
80005162:	fe 99 ff db 	brgt	80005118 <_vfprintf_r+0x17d0>
80005166:	1c 09       	add	r9,lr
80005168:	2f f8       	sub	r8,-1
8000516a:	87 0a       	st.w	r3[0x0],r10
8000516c:	fb 49 06 90 	st.w	sp[1680],r9
80005170:	87 1e       	st.w	r3[0x4],lr
80005172:	fb 48 06 8c 	st.w	sp[1676],r8
80005176:	58 78       	cp.w	r8,7
80005178:	e0 89 00 04 	brgt	80005180 <_vfprintf_r+0x1838>
8000517c:	2f 83       	sub	r3,-8
8000517e:	c0 b8       	rjmp	80005194 <_vfprintf_r+0x184c>
80005180:	fa ca f9 78 	sub	r10,sp,-1672
80005184:	02 9b       	mov	r11,r1
80005186:	08 9c       	mov	r12,r4
80005188:	fe b0 f3 d2 	rcall	8000392c <__sprint_r>
8000518c:	e0 81 03 5d 	brne	80005846 <_vfprintf_r+0x1efe>
80005190:	fa c3 f9 e0 	sub	r3,sp,-1568
80005194:	40 2c       	lddsp	r12,sp[0x8]
80005196:	04 1c       	sub	r12,r2
80005198:	50 2c       	stdsp	sp[0x8],r12
8000519a:	58 0c       	cp.w	r12,0
8000519c:	e0 89 00 20 	brgt	800051dc <_vfprintf_r+0x1894>
800051a0:	c3 f8       	rjmp	8000521e <_vfprintf_r+0x18d6>
800051a2:	2f 09       	sub	r9,-16
800051a4:	2f f8       	sub	r8,-1
800051a6:	fe cb a4 0a 	sub	r11,pc,-23542
800051aa:	31 0a       	mov	r10,16
800051ac:	fb 49 06 90 	st.w	sp[1680],r9
800051b0:	87 0b       	st.w	r3[0x0],r11
800051b2:	87 1a       	st.w	r3[0x4],r10
800051b4:	fb 48 06 8c 	st.w	sp[1676],r8
800051b8:	58 78       	cp.w	r8,7
800051ba:	e0 89 00 04 	brgt	800051c2 <_vfprintf_r+0x187a>
800051be:	2f 83       	sub	r3,-8
800051c0:	c0 b8       	rjmp	800051d6 <_vfprintf_r+0x188e>
800051c2:	fa ca f9 78 	sub	r10,sp,-1672
800051c6:	02 9b       	mov	r11,r1
800051c8:	08 9c       	mov	r12,r4
800051ca:	fe b0 f3 b1 	rcall	8000392c <__sprint_r>
800051ce:	e0 81 03 3c 	brne	80005846 <_vfprintf_r+0x1efe>
800051d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800051d6:	40 29       	lddsp	r9,sp[0x8]
800051d8:	21 09       	sub	r9,16
800051da:	50 29       	stdsp	sp[0x8],r9
800051dc:	fa f9 06 90 	ld.w	r9,sp[1680]
800051e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051e4:	fe ca a4 48 	sub	r10,pc,-23480
800051e8:	40 2e       	lddsp	lr,sp[0x8]
800051ea:	59 0e       	cp.w	lr,16
800051ec:	fe 99 ff db 	brgt	800051a2 <_vfprintf_r+0x185a>
800051f0:	1c 09       	add	r9,lr
800051f2:	2f f8       	sub	r8,-1
800051f4:	87 0a       	st.w	r3[0x0],r10
800051f6:	fb 49 06 90 	st.w	sp[1680],r9
800051fa:	87 1e       	st.w	r3[0x4],lr
800051fc:	fb 48 06 8c 	st.w	sp[1676],r8
80005200:	58 78       	cp.w	r8,7
80005202:	e0 89 00 04 	brgt	8000520a <_vfprintf_r+0x18c2>
80005206:	2f 83       	sub	r3,-8
80005208:	c0 b8       	rjmp	8000521e <_vfprintf_r+0x18d6>
8000520a:	fa ca f9 78 	sub	r10,sp,-1672
8000520e:	02 9b       	mov	r11,r1
80005210:	08 9c       	mov	r12,r4
80005212:	fe b0 f3 8d 	rcall	8000392c <__sprint_r>
80005216:	e0 81 03 18 	brne	80005846 <_vfprintf_r+0x1efe>
8000521a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000521e:	ed b5 00 08 	bld	r5,0x8
80005222:	c0 b0       	breq	80005238 <_vfprintf_r+0x18f0>
80005224:	fa f8 06 90 	ld.w	r8,sp[1680]
80005228:	87 12       	st.w	r3[0x4],r2
8000522a:	87 06       	st.w	r3[0x0],r6
8000522c:	f0 02 00 02 	add	r2,r8,r2
80005230:	fb 42 06 90 	st.w	sp[1680],r2
80005234:	e0 8f 01 d4 	bral	800055dc <_vfprintf_r+0x1c94>
80005238:	e0 40 00 65 	cp.w	r0,101
8000523c:	e0 8a 01 d6 	brle	800055e8 <_vfprintf_r+0x1ca0>
80005240:	30 08       	mov	r8,0
80005242:	30 09       	mov	r9,0
80005244:	40 5b       	lddsp	r11,sp[0x14]
80005246:	40 7a       	lddsp	r10,sp[0x1c]
80005248:	e0 a0 19 53 	rcall	800084ee <__avr32_f64_cmp_eq>
8000524c:	c7 90       	breq	8000533e <_vfprintf_r+0x19f6>
8000524e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005252:	fe c9 a4 ca 	sub	r9,pc,-23350
80005256:	2f f8       	sub	r8,-1
80005258:	87 09       	st.w	r3[0x0],r9
8000525a:	fb 48 06 90 	st.w	sp[1680],r8
8000525e:	30 19       	mov	r9,1
80005260:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005264:	87 19       	st.w	r3[0x4],r9
80005266:	2f f8       	sub	r8,-1
80005268:	fb 48 06 8c 	st.w	sp[1676],r8
8000526c:	58 78       	cp.w	r8,7
8000526e:	e0 89 00 05 	brgt	80005278 <_vfprintf_r+0x1930>
80005272:	2f 83       	sub	r3,-8
80005274:	c0 c8       	rjmp	8000528c <_vfprintf_r+0x1944>
80005276:	d7 03       	nop
80005278:	fa ca f9 78 	sub	r10,sp,-1672
8000527c:	02 9b       	mov	r11,r1
8000527e:	08 9c       	mov	r12,r4
80005280:	fe b0 f3 56 	rcall	8000392c <__sprint_r>
80005284:	e0 81 02 e1 	brne	80005846 <_vfprintf_r+0x1efe>
80005288:	fa c3 f9 e0 	sub	r3,sp,-1568
8000528c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005290:	40 6c       	lddsp	r12,sp[0x18]
80005292:	18 38       	cp.w	r8,r12
80005294:	c0 55       	brlt	8000529e <_vfprintf_r+0x1956>
80005296:	ed b5 00 00 	bld	r5,0x0
8000529a:	e0 81 02 6b 	brne	80005770 <_vfprintf_r+0x1e28>
8000529e:	fa f8 06 90 	ld.w	r8,sp[1680]
800052a2:	2f f8       	sub	r8,-1
800052a4:	40 cb       	lddsp	r11,sp[0x30]
800052a6:	fb 48 06 90 	st.w	sp[1680],r8
800052aa:	30 19       	mov	r9,1
800052ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052b0:	87 0b       	st.w	r3[0x0],r11
800052b2:	2f f8       	sub	r8,-1
800052b4:	87 19       	st.w	r3[0x4],r9
800052b6:	fb 48 06 8c 	st.w	sp[1676],r8
800052ba:	58 78       	cp.w	r8,7
800052bc:	e0 89 00 04 	brgt	800052c4 <_vfprintf_r+0x197c>
800052c0:	2f 83       	sub	r3,-8
800052c2:	c0 b8       	rjmp	800052d8 <_vfprintf_r+0x1990>
800052c4:	fa ca f9 78 	sub	r10,sp,-1672
800052c8:	02 9b       	mov	r11,r1
800052ca:	08 9c       	mov	r12,r4
800052cc:	fe b0 f3 30 	rcall	8000392c <__sprint_r>
800052d0:	e0 81 02 bb 	brne	80005846 <_vfprintf_r+0x1efe>
800052d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800052d8:	40 66       	lddsp	r6,sp[0x18]
800052da:	20 16       	sub	r6,1
800052dc:	58 06       	cp.w	r6,0
800052de:	e0 89 00 1d 	brgt	80005318 <_vfprintf_r+0x19d0>
800052e2:	e0 8f 02 47 	bral	80005770 <_vfprintf_r+0x1e28>
800052e6:	2f 09       	sub	r9,-16
800052e8:	2f f8       	sub	r8,-1
800052ea:	fb 49 06 90 	st.w	sp[1680],r9
800052ee:	87 02       	st.w	r3[0x0],r2
800052f0:	87 10       	st.w	r3[0x4],r0
800052f2:	fb 48 06 8c 	st.w	sp[1676],r8
800052f6:	58 78       	cp.w	r8,7
800052f8:	e0 89 00 04 	brgt	80005300 <_vfprintf_r+0x19b8>
800052fc:	2f 83       	sub	r3,-8
800052fe:	c0 b8       	rjmp	80005314 <_vfprintf_r+0x19cc>
80005300:	fa ca f9 78 	sub	r10,sp,-1672
80005304:	02 9b       	mov	r11,r1
80005306:	08 9c       	mov	r12,r4
80005308:	fe b0 f3 12 	rcall	8000392c <__sprint_r>
8000530c:	e0 81 02 9d 	brne	80005846 <_vfprintf_r+0x1efe>
80005310:	fa c3 f9 e0 	sub	r3,sp,-1568
80005314:	21 06       	sub	r6,16
80005316:	c0 48       	rjmp	8000531e <_vfprintf_r+0x19d6>
80005318:	fe c2 a5 7c 	sub	r2,pc,-23172
8000531c:	31 00       	mov	r0,16
8000531e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005322:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005326:	fe ca a5 8a 	sub	r10,pc,-23158
8000532a:	59 06       	cp.w	r6,16
8000532c:	fe 99 ff dd 	brgt	800052e6 <_vfprintf_r+0x199e>
80005330:	0c 09       	add	r9,r6
80005332:	87 0a       	st.w	r3[0x0],r10
80005334:	fb 49 06 90 	st.w	sp[1680],r9
80005338:	2f f8       	sub	r8,-1
8000533a:	87 16       	st.w	r3[0x4],r6
8000533c:	c5 39       	rjmp	800055e2 <_vfprintf_r+0x1c9a>
8000533e:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005342:	58 0a       	cp.w	r10,0
80005344:	e0 89 00 92 	brgt	80005468 <_vfprintf_r+0x1b20>
80005348:	fa f8 06 90 	ld.w	r8,sp[1680]
8000534c:	fe c9 a5 c4 	sub	r9,pc,-23100
80005350:	2f f8       	sub	r8,-1
80005352:	87 09       	st.w	r3[0x0],r9
80005354:	fb 48 06 90 	st.w	sp[1680],r8
80005358:	30 19       	mov	r9,1
8000535a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000535e:	87 19       	st.w	r3[0x4],r9
80005360:	2f f8       	sub	r8,-1
80005362:	fb 48 06 8c 	st.w	sp[1676],r8
80005366:	58 78       	cp.w	r8,7
80005368:	e0 89 00 04 	brgt	80005370 <_vfprintf_r+0x1a28>
8000536c:	2f 83       	sub	r3,-8
8000536e:	c0 b8       	rjmp	80005384 <_vfprintf_r+0x1a3c>
80005370:	fa ca f9 78 	sub	r10,sp,-1672
80005374:	02 9b       	mov	r11,r1
80005376:	08 9c       	mov	r12,r4
80005378:	fe b0 f2 da 	rcall	8000392c <__sprint_r>
8000537c:	e0 81 02 65 	brne	80005846 <_vfprintf_r+0x1efe>
80005380:	fa c3 f9 e0 	sub	r3,sp,-1568
80005384:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005388:	58 08       	cp.w	r8,0
8000538a:	c0 81       	brne	8000539a <_vfprintf_r+0x1a52>
8000538c:	40 6a       	lddsp	r10,sp[0x18]
8000538e:	58 0a       	cp.w	r10,0
80005390:	c0 51       	brne	8000539a <_vfprintf_r+0x1a52>
80005392:	ed b5 00 00 	bld	r5,0x0
80005396:	e0 81 01 ed 	brne	80005770 <_vfprintf_r+0x1e28>
8000539a:	40 c9       	lddsp	r9,sp[0x30]
8000539c:	fa f8 06 90 	ld.w	r8,sp[1680]
800053a0:	2f f8       	sub	r8,-1
800053a2:	87 09       	st.w	r3[0x0],r9
800053a4:	fb 48 06 90 	st.w	sp[1680],r8
800053a8:	30 19       	mov	r9,1
800053aa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053ae:	87 19       	st.w	r3[0x4],r9
800053b0:	2f f8       	sub	r8,-1
800053b2:	fb 48 06 8c 	st.w	sp[1676],r8
800053b6:	58 78       	cp.w	r8,7
800053b8:	e0 89 00 04 	brgt	800053c0 <_vfprintf_r+0x1a78>
800053bc:	2f 83       	sub	r3,-8
800053be:	c0 b8       	rjmp	800053d4 <_vfprintf_r+0x1a8c>
800053c0:	fa ca f9 78 	sub	r10,sp,-1672
800053c4:	02 9b       	mov	r11,r1
800053c6:	08 9c       	mov	r12,r4
800053c8:	fe b0 f2 b2 	rcall	8000392c <__sprint_r>
800053cc:	e0 81 02 3d 	brne	80005846 <_vfprintf_r+0x1efe>
800053d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800053d4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800053d8:	5c 32       	neg	r2
800053da:	58 02       	cp.w	r2,0
800053dc:	e0 89 00 1d 	brgt	80005416 <_vfprintf_r+0x1ace>
800053e0:	c3 d8       	rjmp	8000545a <_vfprintf_r+0x1b12>
800053e2:	2f 09       	sub	r9,-16
800053e4:	2f f8       	sub	r8,-1
800053e6:	31 0e       	mov	lr,16
800053e8:	fb 49 06 90 	st.w	sp[1680],r9
800053ec:	87 00       	st.w	r3[0x0],r0
800053ee:	87 1e       	st.w	r3[0x4],lr
800053f0:	fb 48 06 8c 	st.w	sp[1676],r8
800053f4:	58 78       	cp.w	r8,7
800053f6:	e0 89 00 04 	brgt	800053fe <_vfprintf_r+0x1ab6>
800053fa:	2f 83       	sub	r3,-8
800053fc:	c0 b8       	rjmp	80005412 <_vfprintf_r+0x1aca>
800053fe:	fa ca f9 78 	sub	r10,sp,-1672
80005402:	02 9b       	mov	r11,r1
80005404:	08 9c       	mov	r12,r4
80005406:	fe b0 f2 93 	rcall	8000392c <__sprint_r>
8000540a:	e0 81 02 1e 	brne	80005846 <_vfprintf_r+0x1efe>
8000540e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005412:	21 02       	sub	r2,16
80005414:	c0 38       	rjmp	8000541a <_vfprintf_r+0x1ad2>
80005416:	fe c0 a6 7a 	sub	r0,pc,-22918
8000541a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000541e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005422:	fe ca a6 86 	sub	r10,pc,-22906
80005426:	59 02       	cp.w	r2,16
80005428:	fe 99 ff dd 	brgt	800053e2 <_vfprintf_r+0x1a9a>
8000542c:	04 09       	add	r9,r2
8000542e:	2f f8       	sub	r8,-1
80005430:	87 0a       	st.w	r3[0x0],r10
80005432:	fb 49 06 90 	st.w	sp[1680],r9
80005436:	87 12       	st.w	r3[0x4],r2
80005438:	fb 48 06 8c 	st.w	sp[1676],r8
8000543c:	58 78       	cp.w	r8,7
8000543e:	e0 89 00 04 	brgt	80005446 <_vfprintf_r+0x1afe>
80005442:	2f 83       	sub	r3,-8
80005444:	c0 b8       	rjmp	8000545a <_vfprintf_r+0x1b12>
80005446:	fa ca f9 78 	sub	r10,sp,-1672
8000544a:	02 9b       	mov	r11,r1
8000544c:	08 9c       	mov	r12,r4
8000544e:	fe b0 f2 6f 	rcall	8000392c <__sprint_r>
80005452:	e0 81 01 fa 	brne	80005846 <_vfprintf_r+0x1efe>
80005456:	fa c3 f9 e0 	sub	r3,sp,-1568
8000545a:	40 6c       	lddsp	r12,sp[0x18]
8000545c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005460:	87 06       	st.w	r3[0x0],r6
80005462:	87 1c       	st.w	r3[0x4],r12
80005464:	18 08       	add	r8,r12
80005466:	cb 98       	rjmp	800055d8 <_vfprintf_r+0x1c90>
80005468:	fa f9 06 90 	ld.w	r9,sp[1680]
8000546c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005470:	40 6b       	lddsp	r11,sp[0x18]
80005472:	16 3a       	cp.w	r10,r11
80005474:	c6 f5       	brlt	80005552 <_vfprintf_r+0x1c0a>
80005476:	16 09       	add	r9,r11
80005478:	2f f8       	sub	r8,-1
8000547a:	87 06       	st.w	r3[0x0],r6
8000547c:	fb 49 06 90 	st.w	sp[1680],r9
80005480:	87 1b       	st.w	r3[0x4],r11
80005482:	fb 48 06 8c 	st.w	sp[1676],r8
80005486:	58 78       	cp.w	r8,7
80005488:	e0 89 00 04 	brgt	80005490 <_vfprintf_r+0x1b48>
8000548c:	2f 83       	sub	r3,-8
8000548e:	c0 b8       	rjmp	800054a4 <_vfprintf_r+0x1b5c>
80005490:	fa ca f9 78 	sub	r10,sp,-1672
80005494:	02 9b       	mov	r11,r1
80005496:	08 9c       	mov	r12,r4
80005498:	fe b0 f2 4a 	rcall	8000392c <__sprint_r>
8000549c:	e0 81 01 d5 	brne	80005846 <_vfprintf_r+0x1efe>
800054a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800054a4:	fa f6 06 ac 	ld.w	r6,sp[1708]
800054a8:	40 6a       	lddsp	r10,sp[0x18]
800054aa:	14 16       	sub	r6,r10
800054ac:	58 06       	cp.w	r6,0
800054ae:	e0 89 00 1c 	brgt	800054e6 <_vfprintf_r+0x1b9e>
800054b2:	c3 d8       	rjmp	8000552c <_vfprintf_r+0x1be4>
800054b4:	2f 09       	sub	r9,-16
800054b6:	2f f8       	sub	r8,-1
800054b8:	fb 49 06 90 	st.w	sp[1680],r9
800054bc:	87 02       	st.w	r3[0x0],r2
800054be:	87 10       	st.w	r3[0x4],r0
800054c0:	fb 48 06 8c 	st.w	sp[1676],r8
800054c4:	58 78       	cp.w	r8,7
800054c6:	e0 89 00 04 	brgt	800054ce <_vfprintf_r+0x1b86>
800054ca:	2f 83       	sub	r3,-8
800054cc:	c0 b8       	rjmp	800054e2 <_vfprintf_r+0x1b9a>
800054ce:	fa ca f9 78 	sub	r10,sp,-1672
800054d2:	02 9b       	mov	r11,r1
800054d4:	08 9c       	mov	r12,r4
800054d6:	fe b0 f2 2b 	rcall	8000392c <__sprint_r>
800054da:	e0 81 01 b6 	brne	80005846 <_vfprintf_r+0x1efe>
800054de:	fa c3 f9 e0 	sub	r3,sp,-1568
800054e2:	21 06       	sub	r6,16
800054e4:	c0 48       	rjmp	800054ec <_vfprintf_r+0x1ba4>
800054e6:	fe c2 a7 4a 	sub	r2,pc,-22710
800054ea:	31 00       	mov	r0,16
800054ec:	fa f9 06 90 	ld.w	r9,sp[1680]
800054f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054f4:	fe ca a7 58 	sub	r10,pc,-22696
800054f8:	59 06       	cp.w	r6,16
800054fa:	fe 99 ff dd 	brgt	800054b4 <_vfprintf_r+0x1b6c>
800054fe:	0c 09       	add	r9,r6
80005500:	2f f8       	sub	r8,-1
80005502:	87 0a       	st.w	r3[0x0],r10
80005504:	fb 49 06 90 	st.w	sp[1680],r9
80005508:	87 16       	st.w	r3[0x4],r6
8000550a:	fb 48 06 8c 	st.w	sp[1676],r8
8000550e:	58 78       	cp.w	r8,7
80005510:	e0 89 00 04 	brgt	80005518 <_vfprintf_r+0x1bd0>
80005514:	2f 83       	sub	r3,-8
80005516:	c0 b8       	rjmp	8000552c <_vfprintf_r+0x1be4>
80005518:	fa ca f9 78 	sub	r10,sp,-1672
8000551c:	02 9b       	mov	r11,r1
8000551e:	08 9c       	mov	r12,r4
80005520:	fe b0 f2 06 	rcall	8000392c <__sprint_r>
80005524:	e0 81 01 91 	brne	80005846 <_vfprintf_r+0x1efe>
80005528:	fa c3 f9 e0 	sub	r3,sp,-1568
8000552c:	ed b5 00 00 	bld	r5,0x0
80005530:	e0 81 01 20 	brne	80005770 <_vfprintf_r+0x1e28>
80005534:	40 c9       	lddsp	r9,sp[0x30]
80005536:	fa f8 06 90 	ld.w	r8,sp[1680]
8000553a:	2f f8       	sub	r8,-1
8000553c:	87 09       	st.w	r3[0x0],r9
8000553e:	fb 48 06 90 	st.w	sp[1680],r8
80005542:	30 19       	mov	r9,1
80005544:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005548:	87 19       	st.w	r3[0x4],r9
8000554a:	2f f8       	sub	r8,-1
8000554c:	fb 48 06 8c 	st.w	sp[1676],r8
80005550:	c0 29       	rjmp	80005754 <_vfprintf_r+0x1e0c>
80005552:	14 09       	add	r9,r10
80005554:	2f f8       	sub	r8,-1
80005556:	fb 49 06 90 	st.w	sp[1680],r9
8000555a:	87 06       	st.w	r3[0x0],r6
8000555c:	87 1a       	st.w	r3[0x4],r10
8000555e:	fb 48 06 8c 	st.w	sp[1676],r8
80005562:	58 78       	cp.w	r8,7
80005564:	e0 89 00 04 	brgt	8000556c <_vfprintf_r+0x1c24>
80005568:	2f 83       	sub	r3,-8
8000556a:	c0 b8       	rjmp	80005580 <_vfprintf_r+0x1c38>
8000556c:	fa ca f9 78 	sub	r10,sp,-1672
80005570:	02 9b       	mov	r11,r1
80005572:	08 9c       	mov	r12,r4
80005574:	fe b0 f1 dc 	rcall	8000392c <__sprint_r>
80005578:	e0 81 01 67 	brne	80005846 <_vfprintf_r+0x1efe>
8000557c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005580:	40 c8       	lddsp	r8,sp[0x30]
80005582:	87 08       	st.w	r3[0x0],r8
80005584:	fa f8 06 90 	ld.w	r8,sp[1680]
80005588:	2f f8       	sub	r8,-1
8000558a:	30 19       	mov	r9,1
8000558c:	fb 48 06 90 	st.w	sp[1680],r8
80005590:	87 19       	st.w	r3[0x4],r9
80005592:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005596:	2f f8       	sub	r8,-1
80005598:	fb 48 06 8c 	st.w	sp[1676],r8
8000559c:	fa f2 06 ac 	ld.w	r2,sp[1708]
800055a0:	58 78       	cp.w	r8,7
800055a2:	e0 89 00 04 	brgt	800055aa <_vfprintf_r+0x1c62>
800055a6:	2f 83       	sub	r3,-8
800055a8:	c0 b8       	rjmp	800055be <_vfprintf_r+0x1c76>
800055aa:	fa ca f9 78 	sub	r10,sp,-1672
800055ae:	02 9b       	mov	r11,r1
800055b0:	08 9c       	mov	r12,r4
800055b2:	fe b0 f1 bd 	rcall	8000392c <__sprint_r>
800055b6:	e0 81 01 48 	brne	80005846 <_vfprintf_r+0x1efe>
800055ba:	fa c3 f9 e0 	sub	r3,sp,-1568
800055be:	04 06       	add	r6,r2
800055c0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800055c4:	87 06       	st.w	r3[0x0],r6
800055c6:	fa f9 06 90 	ld.w	r9,sp[1680]
800055ca:	40 66       	lddsp	r6,sp[0x18]
800055cc:	40 6e       	lddsp	lr,sp[0x18]
800055ce:	10 16       	sub	r6,r8
800055d0:	f2 08 01 08 	sub	r8,r9,r8
800055d4:	87 16       	st.w	r3[0x4],r6
800055d6:	1c 08       	add	r8,lr
800055d8:	fb 48 06 90 	st.w	sp[1680],r8
800055dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055e0:	2f f8       	sub	r8,-1
800055e2:	fb 48 06 8c 	st.w	sp[1676],r8
800055e6:	cb 78       	rjmp	80005754 <_vfprintf_r+0x1e0c>
800055e8:	40 6c       	lddsp	r12,sp[0x18]
800055ea:	58 1c       	cp.w	r12,1
800055ec:	e0 89 00 06 	brgt	800055f8 <_vfprintf_r+0x1cb0>
800055f0:	ed b5 00 00 	bld	r5,0x0
800055f4:	e0 81 00 85 	brne	800056fe <_vfprintf_r+0x1db6>
800055f8:	fa f8 06 90 	ld.w	r8,sp[1680]
800055fc:	2f f8       	sub	r8,-1
800055fe:	30 19       	mov	r9,1
80005600:	fb 48 06 90 	st.w	sp[1680],r8
80005604:	87 06       	st.w	r3[0x0],r6
80005606:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000560a:	87 19       	st.w	r3[0x4],r9
8000560c:	2f f8       	sub	r8,-1
8000560e:	fb 48 06 8c 	st.w	sp[1676],r8
80005612:	58 78       	cp.w	r8,7
80005614:	e0 89 00 04 	brgt	8000561c <_vfprintf_r+0x1cd4>
80005618:	2f 83       	sub	r3,-8
8000561a:	c0 b8       	rjmp	80005630 <_vfprintf_r+0x1ce8>
8000561c:	fa ca f9 78 	sub	r10,sp,-1672
80005620:	02 9b       	mov	r11,r1
80005622:	08 9c       	mov	r12,r4
80005624:	fe b0 f1 84 	rcall	8000392c <__sprint_r>
80005628:	e0 81 01 0f 	brne	80005846 <_vfprintf_r+0x1efe>
8000562c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005630:	fa f8 06 90 	ld.w	r8,sp[1680]
80005634:	2f f8       	sub	r8,-1
80005636:	40 cb       	lddsp	r11,sp[0x30]
80005638:	fb 48 06 90 	st.w	sp[1680],r8
8000563c:	30 19       	mov	r9,1
8000563e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005642:	87 0b       	st.w	r3[0x0],r11
80005644:	2f f8       	sub	r8,-1
80005646:	87 19       	st.w	r3[0x4],r9
80005648:	fb 48 06 8c 	st.w	sp[1676],r8
8000564c:	58 78       	cp.w	r8,7
8000564e:	e0 89 00 05 	brgt	80005658 <_vfprintf_r+0x1d10>
80005652:	2f 83       	sub	r3,-8
80005654:	c0 c8       	rjmp	8000566c <_vfprintf_r+0x1d24>
80005656:	d7 03       	nop
80005658:	fa ca f9 78 	sub	r10,sp,-1672
8000565c:	02 9b       	mov	r11,r1
8000565e:	08 9c       	mov	r12,r4
80005660:	fe b0 f1 66 	rcall	8000392c <__sprint_r>
80005664:	e0 81 00 f1 	brne	80005846 <_vfprintf_r+0x1efe>
80005668:	fa c3 f9 e0 	sub	r3,sp,-1568
8000566c:	30 08       	mov	r8,0
8000566e:	30 09       	mov	r9,0
80005670:	40 5b       	lddsp	r11,sp[0x14]
80005672:	40 7a       	lddsp	r10,sp[0x1c]
80005674:	e0 a0 17 3d 	rcall	800084ee <__avr32_f64_cmp_eq>
80005678:	40 68       	lddsp	r8,sp[0x18]
8000567a:	20 18       	sub	r8,1
8000567c:	58 0c       	cp.w	r12,0
8000567e:	c0 d1       	brne	80005698 <_vfprintf_r+0x1d50>
80005680:	2f f6       	sub	r6,-1
80005682:	87 18       	st.w	r3[0x4],r8
80005684:	87 06       	st.w	r3[0x0],r6
80005686:	fa f6 06 90 	ld.w	r6,sp[1680]
8000568a:	10 06       	add	r6,r8
8000568c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005690:	fb 46 06 90 	st.w	sp[1680],r6
80005694:	2f f8       	sub	r8,-1
80005696:	c3 18       	rjmp	800056f8 <_vfprintf_r+0x1db0>
80005698:	10 96       	mov	r6,r8
8000569a:	58 08       	cp.w	r8,0
8000569c:	e0 89 00 1c 	brgt	800056d4 <_vfprintf_r+0x1d8c>
800056a0:	c4 b8       	rjmp	80005736 <_vfprintf_r+0x1dee>
800056a2:	2f 09       	sub	r9,-16
800056a4:	2f f8       	sub	r8,-1
800056a6:	fb 49 06 90 	st.w	sp[1680],r9
800056aa:	87 02       	st.w	r3[0x0],r2
800056ac:	87 10       	st.w	r3[0x4],r0
800056ae:	fb 48 06 8c 	st.w	sp[1676],r8
800056b2:	58 78       	cp.w	r8,7
800056b4:	e0 89 00 04 	brgt	800056bc <_vfprintf_r+0x1d74>
800056b8:	2f 83       	sub	r3,-8
800056ba:	c0 b8       	rjmp	800056d0 <_vfprintf_r+0x1d88>
800056bc:	fa ca f9 78 	sub	r10,sp,-1672
800056c0:	02 9b       	mov	r11,r1
800056c2:	08 9c       	mov	r12,r4
800056c4:	fe b0 f1 34 	rcall	8000392c <__sprint_r>
800056c8:	e0 81 00 bf 	brne	80005846 <_vfprintf_r+0x1efe>
800056cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800056d0:	21 06       	sub	r6,16
800056d2:	c0 48       	rjmp	800056da <_vfprintf_r+0x1d92>
800056d4:	fe c2 a9 38 	sub	r2,pc,-22216
800056d8:	31 00       	mov	r0,16
800056da:	fa f9 06 90 	ld.w	r9,sp[1680]
800056de:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056e2:	fe ca a9 46 	sub	r10,pc,-22202
800056e6:	59 06       	cp.w	r6,16
800056e8:	fe 99 ff dd 	brgt	800056a2 <_vfprintf_r+0x1d5a>
800056ec:	0c 09       	add	r9,r6
800056ee:	87 0a       	st.w	r3[0x0],r10
800056f0:	fb 49 06 90 	st.w	sp[1680],r9
800056f4:	2f f8       	sub	r8,-1
800056f6:	87 16       	st.w	r3[0x4],r6
800056f8:	fb 48 06 8c 	st.w	sp[1676],r8
800056fc:	c0 e8       	rjmp	80005718 <_vfprintf_r+0x1dd0>
800056fe:	fa f8 06 90 	ld.w	r8,sp[1680]
80005702:	2f f8       	sub	r8,-1
80005704:	30 19       	mov	r9,1
80005706:	fb 48 06 90 	st.w	sp[1680],r8
8000570a:	87 06       	st.w	r3[0x0],r6
8000570c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005710:	87 19       	st.w	r3[0x4],r9
80005712:	2f f8       	sub	r8,-1
80005714:	fb 48 06 8c 	st.w	sp[1676],r8
80005718:	58 78       	cp.w	r8,7
8000571a:	e0 89 00 04 	brgt	80005722 <_vfprintf_r+0x1dda>
8000571e:	2f 83       	sub	r3,-8
80005720:	c0 b8       	rjmp	80005736 <_vfprintf_r+0x1dee>
80005722:	fa ca f9 78 	sub	r10,sp,-1672
80005726:	02 9b       	mov	r11,r1
80005728:	08 9c       	mov	r12,r4
8000572a:	fe b0 f1 01 	rcall	8000392c <__sprint_r>
8000572e:	e0 81 00 8c 	brne	80005846 <_vfprintf_r+0x1efe>
80005732:	fa c3 f9 e0 	sub	r3,sp,-1568
80005736:	40 ea       	lddsp	r10,sp[0x38]
80005738:	fa f8 06 90 	ld.w	r8,sp[1680]
8000573c:	14 08       	add	r8,r10
8000573e:	fa c9 f9 64 	sub	r9,sp,-1692
80005742:	fb 48 06 90 	st.w	sp[1680],r8
80005746:	87 1a       	st.w	r3[0x4],r10
80005748:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000574c:	87 09       	st.w	r3[0x0],r9
8000574e:	2f f8       	sub	r8,-1
80005750:	fb 48 06 8c 	st.w	sp[1676],r8
80005754:	58 78       	cp.w	r8,7
80005756:	e0 89 00 04 	brgt	8000575e <_vfprintf_r+0x1e16>
8000575a:	2f 83       	sub	r3,-8
8000575c:	c0 a8       	rjmp	80005770 <_vfprintf_r+0x1e28>
8000575e:	fa ca f9 78 	sub	r10,sp,-1672
80005762:	02 9b       	mov	r11,r1
80005764:	08 9c       	mov	r12,r4
80005766:	fe b0 f0 e3 	rcall	8000392c <__sprint_r>
8000576a:	c6 e1       	brne	80005846 <_vfprintf_r+0x1efe>
8000576c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005770:	e2 15 00 04 	andl	r5,0x4,COH
80005774:	c3 f0       	breq	800057f2 <_vfprintf_r+0x1eaa>
80005776:	40 86       	lddsp	r6,sp[0x20]
80005778:	40 39       	lddsp	r9,sp[0xc]
8000577a:	12 16       	sub	r6,r9
8000577c:	58 06       	cp.w	r6,0
8000577e:	e0 89 00 1a 	brgt	800057b2 <_vfprintf_r+0x1e6a>
80005782:	c3 88       	rjmp	800057f2 <_vfprintf_r+0x1eaa>
80005784:	2f 09       	sub	r9,-16
80005786:	2f f8       	sub	r8,-1
80005788:	fb 49 06 90 	st.w	sp[1680],r9
8000578c:	87 05       	st.w	r3[0x0],r5
8000578e:	87 12       	st.w	r3[0x4],r2
80005790:	fb 48 06 8c 	st.w	sp[1676],r8
80005794:	58 78       	cp.w	r8,7
80005796:	e0 89 00 04 	brgt	8000579e <_vfprintf_r+0x1e56>
8000579a:	2f 83       	sub	r3,-8
8000579c:	c0 98       	rjmp	800057ae <_vfprintf_r+0x1e66>
8000579e:	00 9a       	mov	r10,r0
800057a0:	02 9b       	mov	r11,r1
800057a2:	08 9c       	mov	r12,r4
800057a4:	fe b0 f0 c4 	rcall	8000392c <__sprint_r>
800057a8:	c4 f1       	brne	80005846 <_vfprintf_r+0x1efe>
800057aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800057ae:	21 06       	sub	r6,16
800057b0:	c0 68       	rjmp	800057bc <_vfprintf_r+0x1e74>
800057b2:	fe c5 aa 26 	sub	r5,pc,-21978
800057b6:	31 02       	mov	r2,16
800057b8:	fa c0 f9 78 	sub	r0,sp,-1672
800057bc:	fa f9 06 90 	ld.w	r9,sp[1680]
800057c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057c4:	fe ca aa 38 	sub	r10,pc,-21960
800057c8:	59 06       	cp.w	r6,16
800057ca:	fe 99 ff dd 	brgt	80005784 <_vfprintf_r+0x1e3c>
800057ce:	0c 09       	add	r9,r6
800057d0:	2f f8       	sub	r8,-1
800057d2:	87 0a       	st.w	r3[0x0],r10
800057d4:	87 16       	st.w	r3[0x4],r6
800057d6:	fb 49 06 90 	st.w	sp[1680],r9
800057da:	fb 48 06 8c 	st.w	sp[1676],r8
800057de:	58 78       	cp.w	r8,7
800057e0:	e0 8a 00 09 	brle	800057f2 <_vfprintf_r+0x1eaa>
800057e4:	fa ca f9 78 	sub	r10,sp,-1672
800057e8:	02 9b       	mov	r11,r1
800057ea:	08 9c       	mov	r12,r4
800057ec:	fe b0 f0 a0 	rcall	8000392c <__sprint_r>
800057f0:	c2 b1       	brne	80005846 <_vfprintf_r+0x1efe>
800057f2:	40 bc       	lddsp	r12,sp[0x2c]
800057f4:	40 36       	lddsp	r6,sp[0xc]
800057f6:	40 8e       	lddsp	lr,sp[0x20]
800057f8:	ec 0e 0c 48 	max	r8,r6,lr
800057fc:	10 0c       	add	r12,r8
800057fe:	50 bc       	stdsp	sp[0x2c],r12
80005800:	fa f8 06 90 	ld.w	r8,sp[1680]
80005804:	58 08       	cp.w	r8,0
80005806:	c0 80       	breq	80005816 <_vfprintf_r+0x1ece>
80005808:	fa ca f9 78 	sub	r10,sp,-1672
8000580c:	02 9b       	mov	r11,r1
8000580e:	08 9c       	mov	r12,r4
80005810:	fe b0 f0 8e 	rcall	8000392c <__sprint_r>
80005814:	c1 91       	brne	80005846 <_vfprintf_r+0x1efe>
80005816:	30 0b       	mov	r11,0
80005818:	fa c3 f9 e0 	sub	r3,sp,-1568
8000581c:	fb 4b 06 8c 	st.w	sp[1676],r11
80005820:	fe 9f f1 22 	bral	80003a64 <_vfprintf_r+0x11c>
80005824:	08 95       	mov	r5,r4
80005826:	fa f8 06 90 	ld.w	r8,sp[1680]
8000582a:	58 08       	cp.w	r8,0
8000582c:	c0 80       	breq	8000583c <_vfprintf_r+0x1ef4>
8000582e:	08 9c       	mov	r12,r4
80005830:	fa ca f9 78 	sub	r10,sp,-1672
80005834:	02 9b       	mov	r11,r1
80005836:	fe b0 f0 7b 	rcall	8000392c <__sprint_r>
8000583a:	c0 61       	brne	80005846 <_vfprintf_r+0x1efe>
8000583c:	30 08       	mov	r8,0
8000583e:	fb 48 06 8c 	st.w	sp[1676],r8
80005842:	c0 28       	rjmp	80005846 <_vfprintf_r+0x1efe>
80005844:	40 41       	lddsp	r1,sp[0x10]
80005846:	82 68       	ld.sh	r8,r1[0xc]
80005848:	ed b8 00 06 	bld	r8,0x6
8000584c:	c0 31       	brne	80005852 <_vfprintf_r+0x1f0a>
8000584e:	3f fa       	mov	r10,-1
80005850:	50 ba       	stdsp	sp[0x2c],r10
80005852:	40 bc       	lddsp	r12,sp[0x2c]
80005854:	fe 3d f9 44 	sub	sp,-1724
80005858:	d8 32       	popm	r0-r7,pc
8000585a:	d7 03       	nop

8000585c <__swsetup_r>:
8000585c:	d4 21       	pushm	r4-r7,lr
8000585e:	e0 68 00 f8 	mov	r8,248
80005862:	18 96       	mov	r6,r12
80005864:	16 97       	mov	r7,r11
80005866:	70 0c       	ld.w	r12,r8[0x0]
80005868:	58 0c       	cp.w	r12,0
8000586a:	c0 60       	breq	80005876 <__swsetup_r+0x1a>
8000586c:	78 68       	ld.w	r8,r12[0x18]
8000586e:	58 08       	cp.w	r8,0
80005870:	c0 31       	brne	80005876 <__swsetup_r+0x1a>
80005872:	e0 a0 07 b9 	rcall	800067e4 <__sinit>
80005876:	fe c8 a9 ba 	sub	r8,pc,-22086
8000587a:	10 37       	cp.w	r7,r8
8000587c:	c0 61       	brne	80005888 <__swsetup_r+0x2c>
8000587e:	e0 68 00 f8 	mov	r8,248
80005882:	70 08       	ld.w	r8,r8[0x0]
80005884:	70 07       	ld.w	r7,r8[0x0]
80005886:	c1 28       	rjmp	800058aa <__swsetup_r+0x4e>
80005888:	fe c8 a9 ac 	sub	r8,pc,-22100
8000588c:	10 37       	cp.w	r7,r8
8000588e:	c0 61       	brne	8000589a <__swsetup_r+0x3e>
80005890:	e0 68 00 f8 	mov	r8,248
80005894:	70 08       	ld.w	r8,r8[0x0]
80005896:	70 17       	ld.w	r7,r8[0x4]
80005898:	c0 98       	rjmp	800058aa <__swsetup_r+0x4e>
8000589a:	fe c8 a9 9e 	sub	r8,pc,-22114
8000589e:	10 37       	cp.w	r7,r8
800058a0:	c0 51       	brne	800058aa <__swsetup_r+0x4e>
800058a2:	e0 68 00 f8 	mov	r8,248
800058a6:	70 08       	ld.w	r8,r8[0x0]
800058a8:	70 27       	ld.w	r7,r8[0x8]
800058aa:	8e 68       	ld.sh	r8,r7[0xc]
800058ac:	ed b8 00 03 	bld	r8,0x3
800058b0:	c1 e0       	breq	800058ec <__swsetup_r+0x90>
800058b2:	ed b8 00 04 	bld	r8,0x4
800058b6:	c3 e1       	brne	80005932 <__swsetup_r+0xd6>
800058b8:	ed b8 00 02 	bld	r8,0x2
800058bc:	c1 51       	brne	800058e6 <__swsetup_r+0x8a>
800058be:	6e db       	ld.w	r11,r7[0x34]
800058c0:	58 0b       	cp.w	r11,0
800058c2:	c0 a0       	breq	800058d6 <__swsetup_r+0x7a>
800058c4:	ee c8 ff bc 	sub	r8,r7,-68
800058c8:	10 3b       	cp.w	r11,r8
800058ca:	c0 40       	breq	800058d2 <__swsetup_r+0x76>
800058cc:	0c 9c       	mov	r12,r6
800058ce:	e0 a0 08 25 	rcall	80006918 <_free_r>
800058d2:	30 08       	mov	r8,0
800058d4:	8f d8       	st.w	r7[0x34],r8
800058d6:	8e 68       	ld.sh	r8,r7[0xc]
800058d8:	e0 18 ff db 	andl	r8,0xffdb
800058dc:	ae 68       	st.h	r7[0xc],r8
800058de:	30 08       	mov	r8,0
800058e0:	8f 18       	st.w	r7[0x4],r8
800058e2:	6e 48       	ld.w	r8,r7[0x10]
800058e4:	8f 08       	st.w	r7[0x0],r8
800058e6:	8e 68       	ld.sh	r8,r7[0xc]
800058e8:	a3 b8       	sbr	r8,0x3
800058ea:	ae 68       	st.h	r7[0xc],r8
800058ec:	6e 48       	ld.w	r8,r7[0x10]
800058ee:	58 08       	cp.w	r8,0
800058f0:	c0 b1       	brne	80005906 <__swsetup_r+0xaa>
800058f2:	8e 68       	ld.sh	r8,r7[0xc]
800058f4:	e2 18 02 80 	andl	r8,0x280,COH
800058f8:	e0 48 02 00 	cp.w	r8,512
800058fc:	c0 50       	breq	80005906 <__swsetup_r+0xaa>
800058fe:	0c 9c       	mov	r12,r6
80005900:	0e 9b       	mov	r11,r7
80005902:	e0 a0 0a 4b 	rcall	80006d98 <__smakebuf_r>
80005906:	8e 69       	ld.sh	r9,r7[0xc]
80005908:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000590c:	c0 70       	breq	8000591a <__swsetup_r+0xbe>
8000590e:	30 08       	mov	r8,0
80005910:	8f 28       	st.w	r7[0x8],r8
80005912:	6e 58       	ld.w	r8,r7[0x14]
80005914:	5c 38       	neg	r8
80005916:	8f 68       	st.w	r7[0x18],r8
80005918:	c0 68       	rjmp	80005924 <__swsetup_r+0xc8>
8000591a:	ed b9 00 01 	bld	r9,0x1
8000591e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005922:	8f 28       	st.w	r7[0x8],r8
80005924:	6e 48       	ld.w	r8,r7[0x10]
80005926:	58 08       	cp.w	r8,0
80005928:	c0 61       	brne	80005934 <__swsetup_r+0xd8>
8000592a:	8e 68       	ld.sh	r8,r7[0xc]
8000592c:	ed b8 00 07 	bld	r8,0x7
80005930:	c0 21       	brne	80005934 <__swsetup_r+0xd8>
80005932:	dc 2a       	popm	r4-r7,pc,r12=-1
80005934:	d8 2a       	popm	r4-r7,pc,r12=0
80005936:	d7 03       	nop

80005938 <quorem>:
80005938:	d4 31       	pushm	r0-r7,lr
8000593a:	20 2d       	sub	sp,8
8000593c:	18 97       	mov	r7,r12
8000593e:	78 48       	ld.w	r8,r12[0x10]
80005940:	76 46       	ld.w	r6,r11[0x10]
80005942:	0c 38       	cp.w	r8,r6
80005944:	c0 34       	brge	8000594a <quorem+0x12>
80005946:	30 0c       	mov	r12,0
80005948:	c8 58       	rjmp	80005a52 <quorem+0x11a>
8000594a:	ec c2 ff fc 	sub	r2,r6,-4
8000594e:	f6 c3 ff ec 	sub	r3,r11,-20
80005952:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005956:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000595a:	2f f9       	sub	r9,-1
8000595c:	20 16       	sub	r6,1
8000595e:	f8 09 0d 08 	divu	r8,r12,r9
80005962:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005966:	ee c4 ff ec 	sub	r4,r7,-20
8000596a:	10 95       	mov	r5,r8
8000596c:	58 08       	cp.w	r8,0
8000596e:	c4 10       	breq	800059f0 <quorem+0xb8>
80005970:	30 09       	mov	r9,0
80005972:	06 9a       	mov	r10,r3
80005974:	08 98       	mov	r8,r4
80005976:	12 91       	mov	r1,r9
80005978:	50 0b       	stdsp	sp[0x0],r11
8000597a:	70 0e       	ld.w	lr,r8[0x0]
8000597c:	b1 8e       	lsr	lr,0x10
8000597e:	50 1e       	stdsp	sp[0x4],lr
80005980:	15 0e       	ld.w	lr,r10++
80005982:	fc 00 16 10 	lsr	r0,lr,0x10
80005986:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000598a:	ea 0e 03 41 	mac	r1,r5,lr
8000598e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005992:	b1 81       	lsr	r1,0x10
80005994:	40 1b       	lddsp	r11,sp[0x4]
80005996:	ea 00 02 40 	mul	r0,r5,r0
8000599a:	e2 00 00 00 	add	r0,r1,r0
8000599e:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800059a2:	02 1b       	sub	r11,r1
800059a4:	50 1b       	stdsp	sp[0x4],r11
800059a6:	70 0b       	ld.w	r11,r8[0x0]
800059a8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800059ac:	02 09       	add	r9,r1
800059ae:	f2 0e 01 0e 	sub	lr,r9,lr
800059b2:	b0 1e       	st.h	r8[0x2],lr
800059b4:	fc 09 14 10 	asr	r9,lr,0x10
800059b8:	40 1e       	lddsp	lr,sp[0x4]
800059ba:	fc 09 00 09 	add	r9,lr,r9
800059be:	b0 09       	st.h	r8[0x0],r9
800059c0:	e0 01 16 10 	lsr	r1,r0,0x10
800059c4:	2f c8       	sub	r8,-4
800059c6:	b1 49       	asr	r9,0x10
800059c8:	04 3a       	cp.w	r10,r2
800059ca:	fe 98 ff d8 	brls	8000597a <quorem+0x42>
800059ce:	40 0b       	lddsp	r11,sp[0x0]
800059d0:	58 0c       	cp.w	r12,0
800059d2:	c0 f1       	brne	800059f0 <quorem+0xb8>
800059d4:	ec c8 ff fb 	sub	r8,r6,-5
800059d8:	ee 08 00 28 	add	r8,r7,r8<<0x2
800059dc:	c0 28       	rjmp	800059e0 <quorem+0xa8>
800059de:	20 16       	sub	r6,1
800059e0:	20 48       	sub	r8,4
800059e2:	08 38       	cp.w	r8,r4
800059e4:	e0 88 00 05 	brls	800059ee <quorem+0xb6>
800059e8:	70 09       	ld.w	r9,r8[0x0]
800059ea:	58 09       	cp.w	r9,0
800059ec:	cf 90       	breq	800059de <quorem+0xa6>
800059ee:	8f 46       	st.w	r7[0x10],r6
800059f0:	0e 9c       	mov	r12,r7
800059f2:	e0 a0 0c fb 	rcall	800073e8 <__mcmp>
800059f6:	c2 d5       	brlt	80005a50 <quorem+0x118>
800059f8:	2f f5       	sub	r5,-1
800059fa:	08 98       	mov	r8,r4
800059fc:	30 09       	mov	r9,0
800059fe:	07 0b       	ld.w	r11,r3++
80005a00:	f6 0a 16 10 	lsr	r10,r11,0x10
80005a04:	70 0c       	ld.w	r12,r8[0x0]
80005a06:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005a0a:	f8 0e 16 10 	lsr	lr,r12,0x10
80005a0e:	14 1e       	sub	lr,r10
80005a10:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005a14:	16 1a       	sub	r10,r11
80005a16:	12 0a       	add	r10,r9
80005a18:	b0 1a       	st.h	r8[0x2],r10
80005a1a:	b1 4a       	asr	r10,0x10
80005a1c:	fc 0a 00 09 	add	r9,lr,r10
80005a20:	b0 09       	st.h	r8[0x0],r9
80005a22:	2f c8       	sub	r8,-4
80005a24:	b1 49       	asr	r9,0x10
80005a26:	04 33       	cp.w	r3,r2
80005a28:	fe 98 ff eb 	brls	800059fe <quorem+0xc6>
80005a2c:	ec c8 ff fb 	sub	r8,r6,-5
80005a30:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005a34:	58 09       	cp.w	r9,0
80005a36:	c0 d1       	brne	80005a50 <quorem+0x118>
80005a38:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005a3c:	c0 28       	rjmp	80005a40 <quorem+0x108>
80005a3e:	20 16       	sub	r6,1
80005a40:	20 48       	sub	r8,4
80005a42:	08 38       	cp.w	r8,r4
80005a44:	e0 88 00 05 	brls	80005a4e <quorem+0x116>
80005a48:	70 09       	ld.w	r9,r8[0x0]
80005a4a:	58 09       	cp.w	r9,0
80005a4c:	cf 90       	breq	80005a3e <quorem+0x106>
80005a4e:	8f 46       	st.w	r7[0x10],r6
80005a50:	0a 9c       	mov	r12,r5
80005a52:	2f ed       	sub	sp,-8
80005a54:	d8 32       	popm	r0-r7,pc
80005a56:	d7 03       	nop

80005a58 <_dtoa_r>:
80005a58:	d4 31       	pushm	r0-r7,lr
80005a5a:	21 ad       	sub	sp,104
80005a5c:	fa c4 ff 74 	sub	r4,sp,-140
80005a60:	18 97       	mov	r7,r12
80005a62:	16 95       	mov	r5,r11
80005a64:	68 2c       	ld.w	r12,r4[0x8]
80005a66:	50 c9       	stdsp	sp[0x30],r9
80005a68:	68 16       	ld.w	r6,r4[0x4]
80005a6a:	68 09       	ld.w	r9,r4[0x0]
80005a6c:	50 e8       	stdsp	sp[0x38],r8
80005a6e:	14 94       	mov	r4,r10
80005a70:	51 2c       	stdsp	sp[0x48],r12
80005a72:	fa e5 00 08 	st.d	sp[8],r4
80005a76:	51 59       	stdsp	sp[0x54],r9
80005a78:	6e 95       	ld.w	r5,r7[0x24]
80005a7a:	58 05       	cp.w	r5,0
80005a7c:	c0 91       	brne	80005a8e <_dtoa_r+0x36>
80005a7e:	31 0c       	mov	r12,16
80005a80:	e0 a0 09 ea 	rcall	80006e54 <malloc>
80005a84:	99 35       	st.w	r12[0xc],r5
80005a86:	8f 9c       	st.w	r7[0x24],r12
80005a88:	99 15       	st.w	r12[0x4],r5
80005a8a:	99 25       	st.w	r12[0x8],r5
80005a8c:	99 05       	st.w	r12[0x0],r5
80005a8e:	6e 99       	ld.w	r9,r7[0x24]
80005a90:	72 08       	ld.w	r8,r9[0x0]
80005a92:	58 08       	cp.w	r8,0
80005a94:	c0 f0       	breq	80005ab2 <_dtoa_r+0x5a>
80005a96:	72 1a       	ld.w	r10,r9[0x4]
80005a98:	91 1a       	st.w	r8[0x4],r10
80005a9a:	30 1a       	mov	r10,1
80005a9c:	72 19       	ld.w	r9,r9[0x4]
80005a9e:	f4 09 09 49 	lsl	r9,r10,r9
80005aa2:	10 9b       	mov	r11,r8
80005aa4:	91 29       	st.w	r8[0x8],r9
80005aa6:	0e 9c       	mov	r12,r7
80005aa8:	e0 a0 0c ba 	rcall	8000741c <_Bfree>
80005aac:	6e 98       	ld.w	r8,r7[0x24]
80005aae:	30 09       	mov	r9,0
80005ab0:	91 09       	st.w	r8[0x0],r9
80005ab2:	40 28       	lddsp	r8,sp[0x8]
80005ab4:	10 94       	mov	r4,r8
80005ab6:	58 08       	cp.w	r8,0
80005ab8:	c0 64       	brge	80005ac4 <_dtoa_r+0x6c>
80005aba:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005abe:	50 28       	stdsp	sp[0x8],r8
80005ac0:	30 18       	mov	r8,1
80005ac2:	c0 28       	rjmp	80005ac6 <_dtoa_r+0x6e>
80005ac4:	30 08       	mov	r8,0
80005ac6:	8d 08       	st.w	r6[0x0],r8
80005ac8:	fc 1c 7f f0 	movh	r12,0x7ff0
80005acc:	40 26       	lddsp	r6,sp[0x8]
80005ace:	0c 98       	mov	r8,r6
80005ad0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005ad4:	18 38       	cp.w	r8,r12
80005ad6:	c2 01       	brne	80005b16 <_dtoa_r+0xbe>
80005ad8:	e0 68 27 0f 	mov	r8,9999
80005adc:	41 5b       	lddsp	r11,sp[0x54]
80005ade:	97 08       	st.w	r11[0x0],r8
80005ae0:	40 3a       	lddsp	r10,sp[0xc]
80005ae2:	58 0a       	cp.w	r10,0
80005ae4:	c0 71       	brne	80005af2 <_dtoa_r+0x9a>
80005ae6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005aea:	c0 41       	brne	80005af2 <_dtoa_r+0x9a>
80005aec:	fe cc ac 40 	sub	r12,pc,-21440
80005af0:	c0 38       	rjmp	80005af6 <_dtoa_r+0x9e>
80005af2:	fe cc ac 3a 	sub	r12,pc,-21446
80005af6:	41 29       	lddsp	r9,sp[0x48]
80005af8:	58 09       	cp.w	r9,0
80005afa:	e0 80 05 9a 	breq	8000662e <_dtoa_r+0xbd6>
80005afe:	f8 c8 ff fd 	sub	r8,r12,-3
80005b02:	f8 c9 ff f8 	sub	r9,r12,-8
80005b06:	11 8b       	ld.ub	r11,r8[0x0]
80005b08:	30 0a       	mov	r10,0
80005b0a:	41 25       	lddsp	r5,sp[0x48]
80005b0c:	f4 0b 18 00 	cp.b	r11,r10
80005b10:	f2 08 17 10 	movne	r8,r9
80005b14:	c1 68       	rjmp	80005b40 <_dtoa_r+0xe8>
80005b16:	fa ea 00 08 	ld.d	r10,sp[8]
80005b1a:	30 08       	mov	r8,0
80005b1c:	fa eb 00 3c 	st.d	sp[60],r10
80005b20:	30 09       	mov	r9,0
80005b22:	e0 a0 14 e6 	rcall	800084ee <__avr32_f64_cmp_eq>
80005b26:	c1 00       	breq	80005b46 <_dtoa_r+0xee>
80005b28:	30 18       	mov	r8,1
80005b2a:	41 5a       	lddsp	r10,sp[0x54]
80005b2c:	95 08       	st.w	r10[0x0],r8
80005b2e:	fe cc ad a6 	sub	r12,pc,-21082
80005b32:	41 29       	lddsp	r9,sp[0x48]
80005b34:	f8 08 00 08 	add	r8,r12,r8
80005b38:	58 09       	cp.w	r9,0
80005b3a:	e0 80 05 7a 	breq	8000662e <_dtoa_r+0xbd6>
80005b3e:	12 95       	mov	r5,r9
80005b40:	8b 08       	st.w	r5[0x0],r8
80005b42:	e0 8f 05 76 	bral	8000662e <_dtoa_r+0xbd6>
80005b46:	fa c8 ff 9c 	sub	r8,sp,-100
80005b4a:	fa c9 ff a0 	sub	r9,sp,-96
80005b4e:	fa ea 00 3c 	ld.d	r10,sp[60]
80005b52:	0e 9c       	mov	r12,r7
80005b54:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005b58:	e0 a0 0c b4 	rcall	800074c0 <__d2b>
80005b5c:	18 93       	mov	r3,r12
80005b5e:	58 05       	cp.w	r5,0
80005b60:	c0 d0       	breq	80005b7a <_dtoa_r+0x122>
80005b62:	fa ea 00 3c 	ld.d	r10,sp[60]
80005b66:	30 04       	mov	r4,0
80005b68:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005b6c:	ea c5 03 ff 	sub	r5,r5,1023
80005b70:	10 9b       	mov	r11,r8
80005b72:	51 74       	stdsp	sp[0x5c],r4
80005b74:	ea 1b 3f f0 	orh	r11,0x3ff0
80005b78:	c2 58       	rjmp	80005bc2 <_dtoa_r+0x16a>
80005b7a:	41 88       	lddsp	r8,sp[0x60]
80005b7c:	41 9c       	lddsp	r12,sp[0x64]
80005b7e:	10 0c       	add	r12,r8
80005b80:	f8 c5 fb ce 	sub	r5,r12,-1074
80005b84:	e0 45 00 20 	cp.w	r5,32
80005b88:	e0 8a 00 0e 	brle	80005ba4 <_dtoa_r+0x14c>
80005b8c:	f8 cc fb ee 	sub	r12,r12,-1042
80005b90:	40 3b       	lddsp	r11,sp[0xc]
80005b92:	ea 08 11 40 	rsub	r8,r5,64
80005b96:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005b9a:	ec 08 09 46 	lsl	r6,r6,r8
80005b9e:	0c 4c       	or	r12,r6
80005ba0:	c0 78       	rjmp	80005bae <_dtoa_r+0x156>
80005ba2:	d7 03       	nop
80005ba4:	ea 0c 11 20 	rsub	r12,r5,32
80005ba8:	40 3a       	lddsp	r10,sp[0xc]
80005baa:	f4 0c 09 4c 	lsl	r12,r10,r12
80005bae:	e0 a0 14 2c 	rcall	80008406 <__avr32_u32_to_f64>
80005bb2:	fc 18 fe 10 	movh	r8,0xfe10
80005bb6:	30 19       	mov	r9,1
80005bb8:	ea c5 04 33 	sub	r5,r5,1075
80005bbc:	f0 0b 00 0b 	add	r11,r8,r11
80005bc0:	51 79       	stdsp	sp[0x5c],r9
80005bc2:	30 08       	mov	r8,0
80005bc4:	fc 19 3f f8 	movh	r9,0x3ff8
80005bc8:	e0 a0 12 b4 	rcall	80008130 <__avr32_f64_sub>
80005bcc:	e0 68 43 61 	mov	r8,17249
80005bd0:	ea 18 63 6f 	orh	r8,0x636f
80005bd4:	e0 69 87 a7 	mov	r9,34727
80005bd8:	ea 19 3f d2 	orh	r9,0x3fd2
80005bdc:	e0 a0 11 be 	rcall	80007f58 <__avr32_f64_mul>
80005be0:	e0 68 c8 b3 	mov	r8,51379
80005be4:	ea 18 8b 60 	orh	r8,0x8b60
80005be8:	e0 69 8a 28 	mov	r9,35368
80005bec:	ea 19 3f c6 	orh	r9,0x3fc6
80005bf0:	e0 a0 13 6e 	rcall	800082cc <__avr32_f64_add>
80005bf4:	0a 9c       	mov	r12,r5
80005bf6:	14 90       	mov	r0,r10
80005bf8:	16 91       	mov	r1,r11
80005bfa:	e0 a0 14 0a 	rcall	8000840e <__avr32_s32_to_f64>
80005bfe:	e0 68 79 fb 	mov	r8,31227
80005c02:	ea 18 50 9f 	orh	r8,0x509f
80005c06:	e0 69 44 13 	mov	r9,17427
80005c0a:	ea 19 3f d3 	orh	r9,0x3fd3
80005c0e:	e0 a0 11 a5 	rcall	80007f58 <__avr32_f64_mul>
80005c12:	14 98       	mov	r8,r10
80005c14:	16 99       	mov	r9,r11
80005c16:	00 9a       	mov	r10,r0
80005c18:	02 9b       	mov	r11,r1
80005c1a:	e0 a0 13 59 	rcall	800082cc <__avr32_f64_add>
80005c1e:	14 90       	mov	r0,r10
80005c20:	16 91       	mov	r1,r11
80005c22:	e0 a0 13 df 	rcall	800083e0 <__avr32_f64_to_s32>
80005c26:	30 08       	mov	r8,0
80005c28:	18 96       	mov	r6,r12
80005c2a:	30 09       	mov	r9,0
80005c2c:	00 9a       	mov	r10,r0
80005c2e:	02 9b       	mov	r11,r1
80005c30:	e0 a0 14 a6 	rcall	8000857c <__avr32_f64_cmp_lt>
80005c34:	c0 c0       	breq	80005c4c <_dtoa_r+0x1f4>
80005c36:	0c 9c       	mov	r12,r6
80005c38:	e0 a0 13 eb 	rcall	8000840e <__avr32_s32_to_f64>
80005c3c:	14 98       	mov	r8,r10
80005c3e:	16 99       	mov	r9,r11
80005c40:	00 9a       	mov	r10,r0
80005c42:	02 9b       	mov	r11,r1
80005c44:	e0 a0 14 55 	rcall	800084ee <__avr32_f64_cmp_eq>
80005c48:	f7 b6 00 01 	subeq	r6,1
80005c4c:	59 66       	cp.w	r6,22
80005c4e:	e0 88 00 05 	brls	80005c58 <_dtoa_r+0x200>
80005c52:	30 18       	mov	r8,1
80005c54:	51 48       	stdsp	sp[0x50],r8
80005c56:	c1 38       	rjmp	80005c7c <_dtoa_r+0x224>
80005c58:	fe c8 ac ec 	sub	r8,pc,-21268
80005c5c:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c60:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005c64:	e0 a0 14 8c 	rcall	8000857c <__avr32_f64_cmp_lt>
80005c68:	f9 b4 00 00 	moveq	r4,0
80005c6c:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005c70:	f7 b6 01 01 	subne	r6,1
80005c74:	f9 bc 01 00 	movne	r12,0
80005c78:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005c7c:	41 90       	lddsp	r0,sp[0x64]
80005c7e:	20 10       	sub	r0,1
80005c80:	0a 10       	sub	r0,r5
80005c82:	c0 46       	brmi	80005c8a <_dtoa_r+0x232>
80005c84:	50 40       	stdsp	sp[0x10],r0
80005c86:	30 00       	mov	r0,0
80005c88:	c0 48       	rjmp	80005c90 <_dtoa_r+0x238>
80005c8a:	30 0b       	mov	r11,0
80005c8c:	5c 30       	neg	r0
80005c8e:	50 4b       	stdsp	sp[0x10],r11
80005c90:	ec 02 11 00 	rsub	r2,r6,0
80005c94:	58 06       	cp.w	r6,0
80005c96:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005c9a:	f5 d6 e4 0a 	addge	r10,r10,r6
80005c9e:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005ca2:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005ca6:	f9 b2 04 00 	movge	r2,0
80005caa:	e1 d6 e5 10 	sublt	r0,r0,r6
80005cae:	f9 b9 05 00 	movlt	r9,0
80005cb2:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005cb6:	40 c8       	lddsp	r8,sp[0x30]
80005cb8:	58 98       	cp.w	r8,9
80005cba:	e0 8b 00 20 	brhi	80005cfa <_dtoa_r+0x2a2>
80005cbe:	58 58       	cp.w	r8,5
80005cc0:	f9 b4 0a 01 	movle	r4,1
80005cc4:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005cc8:	f7 b5 09 04 	subgt	r5,4
80005ccc:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005cd0:	f9 b4 09 00 	movgt	r4,0
80005cd4:	40 cc       	lddsp	r12,sp[0x30]
80005cd6:	58 3c       	cp.w	r12,3
80005cd8:	c2 d0       	breq	80005d32 <_dtoa_r+0x2da>
80005cda:	e0 89 00 05 	brgt	80005ce4 <_dtoa_r+0x28c>
80005cde:	58 2c       	cp.w	r12,2
80005ce0:	c1 01       	brne	80005d00 <_dtoa_r+0x2a8>
80005ce2:	c1 88       	rjmp	80005d12 <_dtoa_r+0x2ba>
80005ce4:	40 cb       	lddsp	r11,sp[0x30]
80005ce6:	58 4b       	cp.w	r11,4
80005ce8:	c0 60       	breq	80005cf4 <_dtoa_r+0x29c>
80005cea:	58 5b       	cp.w	r11,5
80005cec:	c0 a1       	brne	80005d00 <_dtoa_r+0x2a8>
80005cee:	30 1a       	mov	r10,1
80005cf0:	50 da       	stdsp	sp[0x34],r10
80005cf2:	c2 28       	rjmp	80005d36 <_dtoa_r+0x2de>
80005cf4:	30 19       	mov	r9,1
80005cf6:	50 d9       	stdsp	sp[0x34],r9
80005cf8:	c0 f8       	rjmp	80005d16 <_dtoa_r+0x2be>
80005cfa:	30 08       	mov	r8,0
80005cfc:	30 14       	mov	r4,1
80005cfe:	50 c8       	stdsp	sp[0x30],r8
80005d00:	3f f5       	mov	r5,-1
80005d02:	30 1c       	mov	r12,1
80005d04:	30 0b       	mov	r11,0
80005d06:	50 95       	stdsp	sp[0x24],r5
80005d08:	50 dc       	stdsp	sp[0x34],r12
80005d0a:	0a 91       	mov	r1,r5
80005d0c:	31 28       	mov	r8,18
80005d0e:	50 eb       	stdsp	sp[0x38],r11
80005d10:	c2 08       	rjmp	80005d50 <_dtoa_r+0x2f8>
80005d12:	30 0a       	mov	r10,0
80005d14:	50 da       	stdsp	sp[0x34],r10
80005d16:	40 e9       	lddsp	r9,sp[0x38]
80005d18:	58 09       	cp.w	r9,0
80005d1a:	e0 89 00 07 	brgt	80005d28 <_dtoa_r+0x2d0>
80005d1e:	30 18       	mov	r8,1
80005d20:	50 98       	stdsp	sp[0x24],r8
80005d22:	10 91       	mov	r1,r8
80005d24:	50 e8       	stdsp	sp[0x38],r8
80005d26:	c1 58       	rjmp	80005d50 <_dtoa_r+0x2f8>
80005d28:	40 e5       	lddsp	r5,sp[0x38]
80005d2a:	50 95       	stdsp	sp[0x24],r5
80005d2c:	0a 91       	mov	r1,r5
80005d2e:	0a 98       	mov	r8,r5
80005d30:	c1 08       	rjmp	80005d50 <_dtoa_r+0x2f8>
80005d32:	30 0c       	mov	r12,0
80005d34:	50 dc       	stdsp	sp[0x34],r12
80005d36:	40 eb       	lddsp	r11,sp[0x38]
80005d38:	ec 0b 00 0b 	add	r11,r6,r11
80005d3c:	50 9b       	stdsp	sp[0x24],r11
80005d3e:	16 98       	mov	r8,r11
80005d40:	2f f8       	sub	r8,-1
80005d42:	58 08       	cp.w	r8,0
80005d44:	e0 89 00 05 	brgt	80005d4e <_dtoa_r+0x2f6>
80005d48:	10 91       	mov	r1,r8
80005d4a:	30 18       	mov	r8,1
80005d4c:	c0 28       	rjmp	80005d50 <_dtoa_r+0x2f8>
80005d4e:	10 91       	mov	r1,r8
80005d50:	30 09       	mov	r9,0
80005d52:	6e 9a       	ld.w	r10,r7[0x24]
80005d54:	95 19       	st.w	r10[0x4],r9
80005d56:	30 49       	mov	r9,4
80005d58:	c0 68       	rjmp	80005d64 <_dtoa_r+0x30c>
80005d5a:	d7 03       	nop
80005d5c:	6a 1a       	ld.w	r10,r5[0x4]
80005d5e:	a1 79       	lsl	r9,0x1
80005d60:	2f fa       	sub	r10,-1
80005d62:	8b 1a       	st.w	r5[0x4],r10
80005d64:	6e 95       	ld.w	r5,r7[0x24]
80005d66:	f2 ca ff ec 	sub	r10,r9,-20
80005d6a:	10 3a       	cp.w	r10,r8
80005d6c:	fe 98 ff f8 	brls	80005d5c <_dtoa_r+0x304>
80005d70:	6a 1b       	ld.w	r11,r5[0x4]
80005d72:	0e 9c       	mov	r12,r7
80005d74:	e0 a0 0b 6e 	rcall	80007450 <_Balloc>
80005d78:	58 e1       	cp.w	r1,14
80005d7a:	5f 88       	srls	r8
80005d7c:	8b 0c       	st.w	r5[0x0],r12
80005d7e:	f1 e4 00 04 	and	r4,r8,r4
80005d82:	6e 98       	ld.w	r8,r7[0x24]
80005d84:	70 08       	ld.w	r8,r8[0x0]
80005d86:	50 88       	stdsp	sp[0x20],r8
80005d88:	e0 80 01 82 	breq	8000608c <_dtoa_r+0x634>
80005d8c:	58 06       	cp.w	r6,0
80005d8e:	e0 8a 00 43 	brle	80005e14 <_dtoa_r+0x3bc>
80005d92:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005d96:	fe c8 ae 2a 	sub	r8,pc,-20950
80005d9a:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005d9e:	fa e5 00 18 	st.d	sp[24],r4
80005da2:	ec 04 14 04 	asr	r4,r6,0x4
80005da6:	ed b4 00 04 	bld	r4,0x4
80005daa:	c0 30       	breq	80005db0 <_dtoa_r+0x358>
80005dac:	30 25       	mov	r5,2
80005dae:	c1 08       	rjmp	80005dce <_dtoa_r+0x376>
80005db0:	fe c8 ad 7c 	sub	r8,pc,-21124
80005db4:	f0 e8 00 20 	ld.d	r8,r8[32]
80005db8:	fa ea 00 3c 	ld.d	r10,sp[60]
80005dbc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005dc0:	e0 a0 14 12 	rcall	800085e4 <__avr32_f64_div>
80005dc4:	30 35       	mov	r5,3
80005dc6:	14 98       	mov	r8,r10
80005dc8:	16 99       	mov	r9,r11
80005dca:	fa e9 00 08 	st.d	sp[8],r8
80005dce:	fe cc ad 9a 	sub	r12,pc,-21094
80005dd2:	50 a3       	stdsp	sp[0x28],r3
80005dd4:	0c 93       	mov	r3,r6
80005dd6:	18 96       	mov	r6,r12
80005dd8:	c0 f8       	rjmp	80005df6 <_dtoa_r+0x39e>
80005dda:	fa ea 00 18 	ld.d	r10,sp[24]
80005dde:	ed b4 00 00 	bld	r4,0x0
80005de2:	c0 81       	brne	80005df2 <_dtoa_r+0x39a>
80005de4:	ec e8 00 00 	ld.d	r8,r6[0]
80005de8:	2f f5       	sub	r5,-1
80005dea:	e0 a0 10 b7 	rcall	80007f58 <__avr32_f64_mul>
80005dee:	fa eb 00 18 	st.d	sp[24],r10
80005df2:	a1 54       	asr	r4,0x1
80005df4:	2f 86       	sub	r6,-8
80005df6:	58 04       	cp.w	r4,0
80005df8:	cf 11       	brne	80005dda <_dtoa_r+0x382>
80005dfa:	fa e8 00 18 	ld.d	r8,sp[24]
80005dfe:	fa ea 00 08 	ld.d	r10,sp[8]
80005e02:	06 96       	mov	r6,r3
80005e04:	e0 a0 13 f0 	rcall	800085e4 <__avr32_f64_div>
80005e08:	40 a3       	lddsp	r3,sp[0x28]
80005e0a:	14 98       	mov	r8,r10
80005e0c:	16 99       	mov	r9,r11
80005e0e:	fa e9 00 08 	st.d	sp[8],r8
80005e12:	c2 f8       	rjmp	80005e70 <_dtoa_r+0x418>
80005e14:	ec 08 11 00 	rsub	r8,r6,0
80005e18:	c0 31       	brne	80005e1e <_dtoa_r+0x3c6>
80005e1a:	30 25       	mov	r5,2
80005e1c:	c2 a8       	rjmp	80005e70 <_dtoa_r+0x418>
80005e1e:	fe cc ad ea 	sub	r12,pc,-21014
80005e22:	f0 04 14 04 	asr	r4,r8,0x4
80005e26:	50 1c       	stdsp	sp[0x4],r12
80005e28:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005e2c:	fe c9 ae c0 	sub	r9,pc,-20800
80005e30:	fa ea 00 3c 	ld.d	r10,sp[60]
80005e34:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005e38:	e0 a0 10 90 	rcall	80007f58 <__avr32_f64_mul>
80005e3c:	40 1c       	lddsp	r12,sp[0x4]
80005e3e:	50 63       	stdsp	sp[0x18],r3
80005e40:	30 25       	mov	r5,2
80005e42:	0c 93       	mov	r3,r6
80005e44:	fa eb 00 08 	st.d	sp[8],r10
80005e48:	18 96       	mov	r6,r12
80005e4a:	c0 f8       	rjmp	80005e68 <_dtoa_r+0x410>
80005e4c:	fa ea 00 08 	ld.d	r10,sp[8]
80005e50:	ed b4 00 00 	bld	r4,0x0
80005e54:	c0 81       	brne	80005e64 <_dtoa_r+0x40c>
80005e56:	ec e8 00 00 	ld.d	r8,r6[0]
80005e5a:	2f f5       	sub	r5,-1
80005e5c:	e0 a0 10 7e 	rcall	80007f58 <__avr32_f64_mul>
80005e60:	fa eb 00 08 	st.d	sp[8],r10
80005e64:	a1 54       	asr	r4,0x1
80005e66:	2f 86       	sub	r6,-8
80005e68:	58 04       	cp.w	r4,0
80005e6a:	cf 11       	brne	80005e4c <_dtoa_r+0x3f4>
80005e6c:	06 96       	mov	r6,r3
80005e6e:	40 63       	lddsp	r3,sp[0x18]
80005e70:	41 4a       	lddsp	r10,sp[0x50]
80005e72:	58 0a       	cp.w	r10,0
80005e74:	c2 a0       	breq	80005ec8 <_dtoa_r+0x470>
80005e76:	fa e8 00 08 	ld.d	r8,sp[8]
80005e7a:	58 01       	cp.w	r1,0
80005e7c:	5f 94       	srgt	r4
80005e7e:	fa e9 00 18 	st.d	sp[24],r8
80005e82:	30 08       	mov	r8,0
80005e84:	fc 19 3f f0 	movh	r9,0x3ff0
80005e88:	fa ea 00 18 	ld.d	r10,sp[24]
80005e8c:	e0 a0 13 78 	rcall	8000857c <__avr32_f64_cmp_lt>
80005e90:	f9 bc 00 00 	moveq	r12,0
80005e94:	f9 bc 01 01 	movne	r12,1
80005e98:	e9 ec 00 0c 	and	r12,r4,r12
80005e9c:	c1 60       	breq	80005ec8 <_dtoa_r+0x470>
80005e9e:	40 98       	lddsp	r8,sp[0x24]
80005ea0:	58 08       	cp.w	r8,0
80005ea2:	e0 8a 00 f1 	brle	80006084 <_dtoa_r+0x62c>
80005ea6:	30 08       	mov	r8,0
80005ea8:	fc 19 40 24 	movh	r9,0x4024
80005eac:	ec c4 00 01 	sub	r4,r6,1
80005eb0:	fa ea 00 18 	ld.d	r10,sp[24]
80005eb4:	2f f5       	sub	r5,-1
80005eb6:	50 64       	stdsp	sp[0x18],r4
80005eb8:	e0 a0 10 50 	rcall	80007f58 <__avr32_f64_mul>
80005ebc:	40 94       	lddsp	r4,sp[0x24]
80005ebe:	14 98       	mov	r8,r10
80005ec0:	16 99       	mov	r9,r11
80005ec2:	fa e9 00 08 	st.d	sp[8],r8
80005ec6:	c0 38       	rjmp	80005ecc <_dtoa_r+0x474>
80005ec8:	50 66       	stdsp	sp[0x18],r6
80005eca:	02 94       	mov	r4,r1
80005ecc:	0a 9c       	mov	r12,r5
80005ece:	e0 a0 12 a0 	rcall	8000840e <__avr32_s32_to_f64>
80005ed2:	fa e8 00 08 	ld.d	r8,sp[8]
80005ed6:	e0 a0 10 41 	rcall	80007f58 <__avr32_f64_mul>
80005eda:	30 08       	mov	r8,0
80005edc:	fc 19 40 1c 	movh	r9,0x401c
80005ee0:	e0 a0 11 f6 	rcall	800082cc <__avr32_f64_add>
80005ee4:	14 98       	mov	r8,r10
80005ee6:	16 99       	mov	r9,r11
80005ee8:	fa e9 00 28 	st.d	sp[40],r8
80005eec:	fc 18 fc c0 	movh	r8,0xfcc0
80005ef0:	40 a5       	lddsp	r5,sp[0x28]
80005ef2:	10 05       	add	r5,r8
80005ef4:	50 a5       	stdsp	sp[0x28],r5
80005ef6:	58 04       	cp.w	r4,0
80005ef8:	c2 11       	brne	80005f3a <_dtoa_r+0x4e2>
80005efa:	fa ea 00 08 	ld.d	r10,sp[8]
80005efe:	30 08       	mov	r8,0
80005f00:	fc 19 40 14 	movh	r9,0x4014
80005f04:	e0 a0 11 16 	rcall	80008130 <__avr32_f64_sub>
80005f08:	40 bc       	lddsp	r12,sp[0x2c]
80005f0a:	fa eb 00 08 	st.d	sp[8],r10
80005f0e:	14 98       	mov	r8,r10
80005f10:	16 99       	mov	r9,r11
80005f12:	18 9a       	mov	r10,r12
80005f14:	0a 9b       	mov	r11,r5
80005f16:	e0 a0 13 33 	rcall	8000857c <__avr32_f64_cmp_lt>
80005f1a:	e0 81 02 54 	brne	800063c2 <_dtoa_r+0x96a>
80005f1e:	0a 98       	mov	r8,r5
80005f20:	40 b9       	lddsp	r9,sp[0x2c]
80005f22:	ee 18 80 00 	eorh	r8,0x8000
80005f26:	fa ea 00 08 	ld.d	r10,sp[8]
80005f2a:	10 95       	mov	r5,r8
80005f2c:	12 98       	mov	r8,r9
80005f2e:	0a 99       	mov	r9,r5
80005f30:	e0 a0 13 26 	rcall	8000857c <__avr32_f64_cmp_lt>
80005f34:	e0 81 02 3e 	brne	800063b0 <_dtoa_r+0x958>
80005f38:	ca 68       	rjmp	80006084 <_dtoa_r+0x62c>
80005f3a:	fe c9 af ce 	sub	r9,pc,-20530
80005f3e:	e8 c8 00 01 	sub	r8,r4,1
80005f42:	40 d5       	lddsp	r5,sp[0x34]
80005f44:	58 05       	cp.w	r5,0
80005f46:	c4 f0       	breq	80005fe4 <_dtoa_r+0x58c>
80005f48:	30 0c       	mov	r12,0
80005f4a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005f4e:	51 3c       	stdsp	sp[0x4c],r12
80005f50:	30 0a       	mov	r10,0
80005f52:	fc 1b 3f e0 	movh	r11,0x3fe0
80005f56:	e0 a0 13 47 	rcall	800085e4 <__avr32_f64_div>
80005f5a:	fa e8 00 28 	ld.d	r8,sp[40]
80005f5e:	40 85       	lddsp	r5,sp[0x20]
80005f60:	e0 a0 10 e8 	rcall	80008130 <__avr32_f64_sub>
80005f64:	fa eb 00 28 	st.d	sp[40],r10
80005f68:	fa ea 00 08 	ld.d	r10,sp[8]
80005f6c:	e0 a0 12 3a 	rcall	800083e0 <__avr32_f64_to_s32>
80005f70:	51 6c       	stdsp	sp[0x58],r12
80005f72:	e0 a0 12 4e 	rcall	8000840e <__avr32_s32_to_f64>
80005f76:	14 98       	mov	r8,r10
80005f78:	16 99       	mov	r9,r11
80005f7a:	fa ea 00 08 	ld.d	r10,sp[8]
80005f7e:	e0 a0 10 d9 	rcall	80008130 <__avr32_f64_sub>
80005f82:	fa eb 00 08 	st.d	sp[8],r10
80005f86:	41 68       	lddsp	r8,sp[0x58]
80005f88:	2d 08       	sub	r8,-48
80005f8a:	0a c8       	st.b	r5++,r8
80005f8c:	41 39       	lddsp	r9,sp[0x4c]
80005f8e:	2f f9       	sub	r9,-1
80005f90:	51 39       	stdsp	sp[0x4c],r9
80005f92:	fa e8 00 28 	ld.d	r8,sp[40]
80005f96:	e0 a0 12 f3 	rcall	8000857c <__avr32_f64_cmp_lt>
80005f9a:	e0 81 03 39 	brne	8000660c <_dtoa_r+0xbb4>
80005f9e:	fa e8 00 08 	ld.d	r8,sp[8]
80005fa2:	30 0a       	mov	r10,0
80005fa4:	fc 1b 3f f0 	movh	r11,0x3ff0
80005fa8:	e0 a0 10 c4 	rcall	80008130 <__avr32_f64_sub>
80005fac:	fa e8 00 28 	ld.d	r8,sp[40]
80005fb0:	e0 a0 12 e6 	rcall	8000857c <__avr32_f64_cmp_lt>
80005fb4:	fa ea 00 28 	ld.d	r10,sp[40]
80005fb8:	30 08       	mov	r8,0
80005fba:	fc 19 40 24 	movh	r9,0x4024
80005fbe:	e0 81 00 da 	brne	80006172 <_dtoa_r+0x71a>
80005fc2:	41 3c       	lddsp	r12,sp[0x4c]
80005fc4:	08 3c       	cp.w	r12,r4
80005fc6:	c5 f4       	brge	80006084 <_dtoa_r+0x62c>
80005fc8:	e0 a0 0f c8 	rcall	80007f58 <__avr32_f64_mul>
80005fcc:	30 08       	mov	r8,0
80005fce:	fa eb 00 28 	st.d	sp[40],r10
80005fd2:	fc 19 40 24 	movh	r9,0x4024
80005fd6:	fa ea 00 08 	ld.d	r10,sp[8]
80005fda:	e0 a0 0f bf 	rcall	80007f58 <__avr32_f64_mul>
80005fde:	fa eb 00 08 	st.d	sp[8],r10
80005fe2:	cc 3b       	rjmp	80005f68 <_dtoa_r+0x510>
80005fe4:	40 85       	lddsp	r5,sp[0x20]
80005fe6:	08 05       	add	r5,r4
80005fe8:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005fec:	51 35       	stdsp	sp[0x4c],r5
80005fee:	fa e8 00 28 	ld.d	r8,sp[40]
80005ff2:	40 85       	lddsp	r5,sp[0x20]
80005ff4:	e0 a0 0f b2 	rcall	80007f58 <__avr32_f64_mul>
80005ff8:	fa eb 00 28 	st.d	sp[40],r10
80005ffc:	fa ea 00 08 	ld.d	r10,sp[8]
80006000:	e0 a0 11 f0 	rcall	800083e0 <__avr32_f64_to_s32>
80006004:	51 6c       	stdsp	sp[0x58],r12
80006006:	e0 a0 12 04 	rcall	8000840e <__avr32_s32_to_f64>
8000600a:	14 98       	mov	r8,r10
8000600c:	16 99       	mov	r9,r11
8000600e:	fa ea 00 08 	ld.d	r10,sp[8]
80006012:	e0 a0 10 8f 	rcall	80008130 <__avr32_f64_sub>
80006016:	fa eb 00 08 	st.d	sp[8],r10
8000601a:	41 68       	lddsp	r8,sp[0x58]
8000601c:	2d 08       	sub	r8,-48
8000601e:	0a c8       	st.b	r5++,r8
80006020:	41 3c       	lddsp	r12,sp[0x4c]
80006022:	18 35       	cp.w	r5,r12
80006024:	c2 81       	brne	80006074 <_dtoa_r+0x61c>
80006026:	30 08       	mov	r8,0
80006028:	fc 19 3f e0 	movh	r9,0x3fe0
8000602c:	fa ea 00 28 	ld.d	r10,sp[40]
80006030:	e0 a0 11 4e 	rcall	800082cc <__avr32_f64_add>
80006034:	40 85       	lddsp	r5,sp[0x20]
80006036:	fa e8 00 08 	ld.d	r8,sp[8]
8000603a:	08 05       	add	r5,r4
8000603c:	e0 a0 12 a0 	rcall	8000857c <__avr32_f64_cmp_lt>
80006040:	e0 81 00 99 	brne	80006172 <_dtoa_r+0x71a>
80006044:	fa e8 00 28 	ld.d	r8,sp[40]
80006048:	30 0a       	mov	r10,0
8000604a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000604e:	e0 a0 10 71 	rcall	80008130 <__avr32_f64_sub>
80006052:	14 98       	mov	r8,r10
80006054:	16 99       	mov	r9,r11
80006056:	fa ea 00 08 	ld.d	r10,sp[8]
8000605a:	e0 a0 12 91 	rcall	8000857c <__avr32_f64_cmp_lt>
8000605e:	c1 30       	breq	80006084 <_dtoa_r+0x62c>
80006060:	33 09       	mov	r9,48
80006062:	0a 98       	mov	r8,r5
80006064:	11 7a       	ld.ub	r10,--r8
80006066:	f2 0a 18 00 	cp.b	r10,r9
8000606a:	e0 81 02 d1 	brne	8000660c <_dtoa_r+0xbb4>
8000606e:	10 95       	mov	r5,r8
80006070:	cf 9b       	rjmp	80006062 <_dtoa_r+0x60a>
80006072:	d7 03       	nop
80006074:	30 08       	mov	r8,0
80006076:	fc 19 40 24 	movh	r9,0x4024
8000607a:	e0 a0 0f 6f 	rcall	80007f58 <__avr32_f64_mul>
8000607e:	fa eb 00 08 	st.d	sp[8],r10
80006082:	cb db       	rjmp	80005ffc <_dtoa_r+0x5a4>
80006084:	fa ea 00 3c 	ld.d	r10,sp[60]
80006088:	fa eb 00 08 	st.d	sp[8],r10
8000608c:	58 e6       	cp.w	r6,14
8000608e:	5f ab       	srle	r11
80006090:	41 8a       	lddsp	r10,sp[0x60]
80006092:	30 08       	mov	r8,0
80006094:	f4 09 11 ff 	rsub	r9,r10,-1
80006098:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000609c:	f0 09 18 00 	cp.b	r9,r8
800060a0:	e0 80 00 82 	breq	800061a4 <_dtoa_r+0x74c>
800060a4:	40 ea       	lddsp	r10,sp[0x38]
800060a6:	58 01       	cp.w	r1,0
800060a8:	5f a9       	srle	r9
800060aa:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800060ae:	fe ca b1 42 	sub	r10,pc,-20158
800060b2:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800060b6:	fa e5 00 10 	st.d	sp[16],r4
800060ba:	f0 09 18 00 	cp.b	r9,r8
800060be:	c1 40       	breq	800060e6 <_dtoa_r+0x68e>
800060c0:	58 01       	cp.w	r1,0
800060c2:	e0 81 01 77 	brne	800063b0 <_dtoa_r+0x958>
800060c6:	30 08       	mov	r8,0
800060c8:	fc 19 40 14 	movh	r9,0x4014
800060cc:	08 9a       	mov	r10,r4
800060ce:	0a 9b       	mov	r11,r5
800060d0:	e0 a0 0f 44 	rcall	80007f58 <__avr32_f64_mul>
800060d4:	fa e8 00 08 	ld.d	r8,sp[8]
800060d8:	e0 a0 12 1e 	rcall	80008514 <__avr32_f64_cmp_ge>
800060dc:	e0 81 01 6a 	brne	800063b0 <_dtoa_r+0x958>
800060e0:	02 92       	mov	r2,r1
800060e2:	e0 8f 01 72 	bral	800063c6 <_dtoa_r+0x96e>
800060e6:	40 85       	lddsp	r5,sp[0x20]
800060e8:	30 14       	mov	r4,1
800060ea:	fa e8 00 10 	ld.d	r8,sp[16]
800060ee:	fa ea 00 08 	ld.d	r10,sp[8]
800060f2:	e0 a0 12 79 	rcall	800085e4 <__avr32_f64_div>
800060f6:	e0 a0 11 75 	rcall	800083e0 <__avr32_f64_to_s32>
800060fa:	18 92       	mov	r2,r12
800060fc:	e0 a0 11 89 	rcall	8000840e <__avr32_s32_to_f64>
80006100:	fa e8 00 10 	ld.d	r8,sp[16]
80006104:	e0 a0 0f 2a 	rcall	80007f58 <__avr32_f64_mul>
80006108:	14 98       	mov	r8,r10
8000610a:	16 99       	mov	r9,r11
8000610c:	fa ea 00 08 	ld.d	r10,sp[8]
80006110:	e0 a0 10 10 	rcall	80008130 <__avr32_f64_sub>
80006114:	fa eb 00 08 	st.d	sp[8],r10
80006118:	e4 c8 ff d0 	sub	r8,r2,-48
8000611c:	0a c8       	st.b	r5++,r8
8000611e:	fc 19 40 24 	movh	r9,0x4024
80006122:	30 08       	mov	r8,0
80006124:	02 34       	cp.w	r4,r1
80006126:	c3 31       	brne	8000618c <_dtoa_r+0x734>
80006128:	fa e8 00 08 	ld.d	r8,sp[8]
8000612c:	e0 a0 10 d0 	rcall	800082cc <__avr32_f64_add>
80006130:	16 91       	mov	r1,r11
80006132:	14 90       	mov	r0,r10
80006134:	14 98       	mov	r8,r10
80006136:	02 99       	mov	r9,r1
80006138:	fa ea 00 10 	ld.d	r10,sp[16]
8000613c:	e0 a0 12 20 	rcall	8000857c <__avr32_f64_cmp_lt>
80006140:	c1 a1       	brne	80006174 <_dtoa_r+0x71c>
80006142:	fa e8 00 10 	ld.d	r8,sp[16]
80006146:	00 9a       	mov	r10,r0
80006148:	02 9b       	mov	r11,r1
8000614a:	e0 a0 11 d2 	rcall	800084ee <__avr32_f64_cmp_eq>
8000614e:	e0 80 02 5e 	breq	8000660a <_dtoa_r+0xbb2>
80006152:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006156:	c0 f1       	brne	80006174 <_dtoa_r+0x71c>
80006158:	e0 8f 02 59 	bral	8000660a <_dtoa_r+0xbb2>
8000615c:	40 8a       	lddsp	r10,sp[0x20]
8000615e:	14 38       	cp.w	r8,r10
80006160:	c0 30       	breq	80006166 <_dtoa_r+0x70e>
80006162:	10 95       	mov	r5,r8
80006164:	c0 98       	rjmp	80006176 <_dtoa_r+0x71e>
80006166:	33 08       	mov	r8,48
80006168:	40 89       	lddsp	r9,sp[0x20]
8000616a:	2f f6       	sub	r6,-1
8000616c:	b2 88       	st.b	r9[0x0],r8
8000616e:	40 88       	lddsp	r8,sp[0x20]
80006170:	c0 88       	rjmp	80006180 <_dtoa_r+0x728>
80006172:	40 66       	lddsp	r6,sp[0x18]
80006174:	33 99       	mov	r9,57
80006176:	0a 98       	mov	r8,r5
80006178:	11 7a       	ld.ub	r10,--r8
8000617a:	f2 0a 18 00 	cp.b	r10,r9
8000617e:	ce f0       	breq	8000615c <_dtoa_r+0x704>
80006180:	50 66       	stdsp	sp[0x18],r6
80006182:	11 89       	ld.ub	r9,r8[0x0]
80006184:	2f f9       	sub	r9,-1
80006186:	b0 89       	st.b	r8[0x0],r9
80006188:	e0 8f 02 42 	bral	8000660c <_dtoa_r+0xbb4>
8000618c:	e0 a0 0e e6 	rcall	80007f58 <__avr32_f64_mul>
80006190:	2f f4       	sub	r4,-1
80006192:	fa eb 00 08 	st.d	sp[8],r10
80006196:	30 08       	mov	r8,0
80006198:	30 09       	mov	r9,0
8000619a:	e0 a0 11 aa 	rcall	800084ee <__avr32_f64_cmp_eq>
8000619e:	ca 60       	breq	800060ea <_dtoa_r+0x692>
800061a0:	e0 8f 02 35 	bral	8000660a <_dtoa_r+0xbb2>
800061a4:	40 d8       	lddsp	r8,sp[0x34]
800061a6:	58 08       	cp.w	r8,0
800061a8:	c0 51       	brne	800061b2 <_dtoa_r+0x75a>
800061aa:	04 98       	mov	r8,r2
800061ac:	00 95       	mov	r5,r0
800061ae:	40 d4       	lddsp	r4,sp[0x34]
800061b0:	c3 78       	rjmp	8000621e <_dtoa_r+0x7c6>
800061b2:	40 c5       	lddsp	r5,sp[0x30]
800061b4:	58 15       	cp.w	r5,1
800061b6:	e0 89 00 0f 	brgt	800061d4 <_dtoa_r+0x77c>
800061ba:	41 74       	lddsp	r4,sp[0x5c]
800061bc:	58 04       	cp.w	r4,0
800061be:	c0 40       	breq	800061c6 <_dtoa_r+0x76e>
800061c0:	f4 c9 fb cd 	sub	r9,r10,-1075
800061c4:	c0 48       	rjmp	800061cc <_dtoa_r+0x774>
800061c6:	41 99       	lddsp	r9,sp[0x64]
800061c8:	f2 09 11 36 	rsub	r9,r9,54
800061cc:	04 98       	mov	r8,r2
800061ce:	00 95       	mov	r5,r0
800061d0:	c1 c8       	rjmp	80006208 <_dtoa_r+0x7b0>
800061d2:	d7 03       	nop
800061d4:	e2 c8 00 01 	sub	r8,r1,1
800061d8:	58 01       	cp.w	r1,0
800061da:	e0 05 17 40 	movge	r5,r0
800061de:	e2 09 17 40 	movge	r9,r1
800061e2:	e1 d1 e5 15 	sublt	r5,r0,r1
800061e6:	f9 b9 05 00 	movlt	r9,0
800061ea:	10 32       	cp.w	r2,r8
800061ec:	e5 d8 e4 18 	subge	r8,r2,r8
800061f0:	f1 d2 e5 18 	sublt	r8,r8,r2
800061f4:	e5 d8 e5 02 	addlt	r2,r2,r8
800061f8:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800061fc:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006200:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006204:	f9 b8 05 00 	movlt	r8,0
80006208:	40 4b       	lddsp	r11,sp[0x10]
8000620a:	12 0b       	add	r11,r9
8000620c:	50 08       	stdsp	sp[0x0],r8
8000620e:	50 4b       	stdsp	sp[0x10],r11
80006210:	12 00       	add	r0,r9
80006212:	30 1b       	mov	r11,1
80006214:	0e 9c       	mov	r12,r7
80006216:	e0 a0 0a d1 	rcall	800077b8 <__i2b>
8000621a:	40 08       	lddsp	r8,sp[0x0]
8000621c:	18 94       	mov	r4,r12
8000621e:	40 4a       	lddsp	r10,sp[0x10]
80006220:	58 05       	cp.w	r5,0
80006222:	5f 99       	srgt	r9
80006224:	58 0a       	cp.w	r10,0
80006226:	5f 9a       	srgt	r10
80006228:	f5 e9 00 09 	and	r9,r10,r9
8000622c:	c0 80       	breq	8000623c <_dtoa_r+0x7e4>
8000622e:	40 4c       	lddsp	r12,sp[0x10]
80006230:	f8 05 0d 49 	min	r9,r12,r5
80006234:	12 1c       	sub	r12,r9
80006236:	12 10       	sub	r0,r9
80006238:	50 4c       	stdsp	sp[0x10],r12
8000623a:	12 15       	sub	r5,r9
8000623c:	58 02       	cp.w	r2,0
8000623e:	e0 8a 00 27 	brle	8000628c <_dtoa_r+0x834>
80006242:	40 db       	lddsp	r11,sp[0x34]
80006244:	58 0b       	cp.w	r11,0
80006246:	c1 d0       	breq	80006280 <_dtoa_r+0x828>
80006248:	58 08       	cp.w	r8,0
8000624a:	e0 8a 00 17 	brle	80006278 <_dtoa_r+0x820>
8000624e:	10 9a       	mov	r10,r8
80006250:	50 08       	stdsp	sp[0x0],r8
80006252:	08 9b       	mov	r11,r4
80006254:	0e 9c       	mov	r12,r7
80006256:	e0 a0 0a f7 	rcall	80007844 <__pow5mult>
8000625a:	06 9a       	mov	r10,r3
8000625c:	18 9b       	mov	r11,r12
8000625e:	18 94       	mov	r4,r12
80006260:	0e 9c       	mov	r12,r7
80006262:	e0 a0 0a 2b 	rcall	800076b8 <__multiply>
80006266:	18 99       	mov	r9,r12
80006268:	06 9b       	mov	r11,r3
8000626a:	50 19       	stdsp	sp[0x4],r9
8000626c:	0e 9c       	mov	r12,r7
8000626e:	e0 a0 08 d7 	rcall	8000741c <_Bfree>
80006272:	40 19       	lddsp	r9,sp[0x4]
80006274:	40 08       	lddsp	r8,sp[0x0]
80006276:	12 93       	mov	r3,r9
80006278:	e4 08 01 0a 	sub	r10,r2,r8
8000627c:	c0 80       	breq	8000628c <_dtoa_r+0x834>
8000627e:	c0 28       	rjmp	80006282 <_dtoa_r+0x82a>
80006280:	04 9a       	mov	r10,r2
80006282:	06 9b       	mov	r11,r3
80006284:	0e 9c       	mov	r12,r7
80006286:	e0 a0 0a df 	rcall	80007844 <__pow5mult>
8000628a:	18 93       	mov	r3,r12
8000628c:	30 1b       	mov	r11,1
8000628e:	0e 9c       	mov	r12,r7
80006290:	e0 a0 0a 94 	rcall	800077b8 <__i2b>
80006294:	41 1a       	lddsp	r10,sp[0x44]
80006296:	18 92       	mov	r2,r12
80006298:	58 0a       	cp.w	r10,0
8000629a:	e0 8a 00 07 	brle	800062a8 <_dtoa_r+0x850>
8000629e:	18 9b       	mov	r11,r12
800062a0:	0e 9c       	mov	r12,r7
800062a2:	e0 a0 0a d1 	rcall	80007844 <__pow5mult>
800062a6:	18 92       	mov	r2,r12
800062a8:	40 c9       	lddsp	r9,sp[0x30]
800062aa:	58 19       	cp.w	r9,1
800062ac:	e0 89 00 14 	brgt	800062d4 <_dtoa_r+0x87c>
800062b0:	40 38       	lddsp	r8,sp[0xc]
800062b2:	58 08       	cp.w	r8,0
800062b4:	c1 01       	brne	800062d4 <_dtoa_r+0x87c>
800062b6:	40 29       	lddsp	r9,sp[0x8]
800062b8:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800062bc:	c0 c1       	brne	800062d4 <_dtoa_r+0x87c>
800062be:	12 98       	mov	r8,r9
800062c0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800062c4:	c0 80       	breq	800062d4 <_dtoa_r+0x87c>
800062c6:	40 4c       	lddsp	r12,sp[0x10]
800062c8:	30 1b       	mov	r11,1
800062ca:	2f fc       	sub	r12,-1
800062cc:	2f f0       	sub	r0,-1
800062ce:	50 4c       	stdsp	sp[0x10],r12
800062d0:	50 6b       	stdsp	sp[0x18],r11
800062d2:	c0 38       	rjmp	800062d8 <_dtoa_r+0x880>
800062d4:	30 0a       	mov	r10,0
800062d6:	50 6a       	stdsp	sp[0x18],r10
800062d8:	41 19       	lddsp	r9,sp[0x44]
800062da:	58 09       	cp.w	r9,0
800062dc:	c0 31       	brne	800062e2 <_dtoa_r+0x88a>
800062de:	30 1c       	mov	r12,1
800062e0:	c0 98       	rjmp	800062f2 <_dtoa_r+0x89a>
800062e2:	64 48       	ld.w	r8,r2[0x10]
800062e4:	2f c8       	sub	r8,-4
800062e6:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800062ea:	e0 a0 08 08 	rcall	800072fa <__hi0bits>
800062ee:	f8 0c 11 20 	rsub	r12,r12,32
800062f2:	40 4b       	lddsp	r11,sp[0x10]
800062f4:	f8 0b 00 08 	add	r8,r12,r11
800062f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800062fc:	c0 c0       	breq	80006314 <_dtoa_r+0x8bc>
800062fe:	f0 08 11 20 	rsub	r8,r8,32
80006302:	58 48       	cp.w	r8,4
80006304:	e0 8a 00 06 	brle	80006310 <_dtoa_r+0x8b8>
80006308:	20 48       	sub	r8,4
8000630a:	10 0b       	add	r11,r8
8000630c:	50 4b       	stdsp	sp[0x10],r11
8000630e:	c0 78       	rjmp	8000631c <_dtoa_r+0x8c4>
80006310:	58 48       	cp.w	r8,4
80006312:	c0 70       	breq	80006320 <_dtoa_r+0x8c8>
80006314:	40 4a       	lddsp	r10,sp[0x10]
80006316:	2e 48       	sub	r8,-28
80006318:	10 0a       	add	r10,r8
8000631a:	50 4a       	stdsp	sp[0x10],r10
8000631c:	10 00       	add	r0,r8
8000631e:	10 05       	add	r5,r8
80006320:	58 00       	cp.w	r0,0
80006322:	e0 8a 00 08 	brle	80006332 <_dtoa_r+0x8da>
80006326:	06 9b       	mov	r11,r3
80006328:	00 9a       	mov	r10,r0
8000632a:	0e 9c       	mov	r12,r7
8000632c:	e0 a0 09 82 	rcall	80007630 <__lshift>
80006330:	18 93       	mov	r3,r12
80006332:	40 49       	lddsp	r9,sp[0x10]
80006334:	58 09       	cp.w	r9,0
80006336:	e0 8a 00 08 	brle	80006346 <_dtoa_r+0x8ee>
8000633a:	04 9b       	mov	r11,r2
8000633c:	12 9a       	mov	r10,r9
8000633e:	0e 9c       	mov	r12,r7
80006340:	e0 a0 09 78 	rcall	80007630 <__lshift>
80006344:	18 92       	mov	r2,r12
80006346:	41 48       	lddsp	r8,sp[0x50]
80006348:	58 08       	cp.w	r8,0
8000634a:	c1 b0       	breq	80006380 <_dtoa_r+0x928>
8000634c:	04 9b       	mov	r11,r2
8000634e:	06 9c       	mov	r12,r3
80006350:	e0 a0 08 4c 	rcall	800073e8 <__mcmp>
80006354:	c1 64       	brge	80006380 <_dtoa_r+0x928>
80006356:	06 9b       	mov	r11,r3
80006358:	30 09       	mov	r9,0
8000635a:	30 aa       	mov	r10,10
8000635c:	0e 9c       	mov	r12,r7
8000635e:	e0 a0 0a 35 	rcall	800077c8 <__multadd>
80006362:	20 16       	sub	r6,1
80006364:	18 93       	mov	r3,r12
80006366:	40 dc       	lddsp	r12,sp[0x34]
80006368:	58 0c       	cp.w	r12,0
8000636a:	c0 31       	brne	80006370 <_dtoa_r+0x918>
8000636c:	40 91       	lddsp	r1,sp[0x24]
8000636e:	c0 98       	rjmp	80006380 <_dtoa_r+0x928>
80006370:	08 9b       	mov	r11,r4
80006372:	40 91       	lddsp	r1,sp[0x24]
80006374:	30 09       	mov	r9,0
80006376:	30 aa       	mov	r10,10
80006378:	0e 9c       	mov	r12,r7
8000637a:	e0 a0 0a 27 	rcall	800077c8 <__multadd>
8000637e:	18 94       	mov	r4,r12
80006380:	58 01       	cp.w	r1,0
80006382:	5f a9       	srle	r9
80006384:	40 cb       	lddsp	r11,sp[0x30]
80006386:	58 2b       	cp.w	r11,2
80006388:	5f 98       	srgt	r8
8000638a:	f3 e8 00 08 	and	r8,r9,r8
8000638e:	c2 50       	breq	800063d8 <_dtoa_r+0x980>
80006390:	58 01       	cp.w	r1,0
80006392:	c1 11       	brne	800063b4 <_dtoa_r+0x95c>
80006394:	04 9b       	mov	r11,r2
80006396:	02 99       	mov	r9,r1
80006398:	30 5a       	mov	r10,5
8000639a:	0e 9c       	mov	r12,r7
8000639c:	e0 a0 0a 16 	rcall	800077c8 <__multadd>
800063a0:	18 92       	mov	r2,r12
800063a2:	18 9b       	mov	r11,r12
800063a4:	06 9c       	mov	r12,r3
800063a6:	e0 a0 08 21 	rcall	800073e8 <__mcmp>
800063aa:	e0 89 00 0f 	brgt	800063c8 <_dtoa_r+0x970>
800063ae:	c0 38       	rjmp	800063b4 <_dtoa_r+0x95c>
800063b0:	30 02       	mov	r2,0
800063b2:	04 94       	mov	r4,r2
800063b4:	40 ea       	lddsp	r10,sp[0x38]
800063b6:	30 09       	mov	r9,0
800063b8:	5c da       	com	r10
800063ba:	40 85       	lddsp	r5,sp[0x20]
800063bc:	50 6a       	stdsp	sp[0x18],r10
800063be:	50 49       	stdsp	sp[0x10],r9
800063c0:	c0 f9       	rjmp	800065de <_dtoa_r+0xb86>
800063c2:	08 92       	mov	r2,r4
800063c4:	40 66       	lddsp	r6,sp[0x18]
800063c6:	04 94       	mov	r4,r2
800063c8:	2f f6       	sub	r6,-1
800063ca:	50 66       	stdsp	sp[0x18],r6
800063cc:	33 18       	mov	r8,49
800063ce:	40 85       	lddsp	r5,sp[0x20]
800063d0:	0a c8       	st.b	r5++,r8
800063d2:	30 08       	mov	r8,0
800063d4:	50 48       	stdsp	sp[0x10],r8
800063d6:	c0 49       	rjmp	800065de <_dtoa_r+0xb86>
800063d8:	40 dc       	lddsp	r12,sp[0x34]
800063da:	58 0c       	cp.w	r12,0
800063dc:	e0 80 00 b5 	breq	80006546 <_dtoa_r+0xaee>
800063e0:	58 05       	cp.w	r5,0
800063e2:	e0 8a 00 08 	brle	800063f2 <_dtoa_r+0x99a>
800063e6:	08 9b       	mov	r11,r4
800063e8:	0a 9a       	mov	r10,r5
800063ea:	0e 9c       	mov	r12,r7
800063ec:	e0 a0 09 22 	rcall	80007630 <__lshift>
800063f0:	18 94       	mov	r4,r12
800063f2:	40 6b       	lddsp	r11,sp[0x18]
800063f4:	58 0b       	cp.w	r11,0
800063f6:	c0 31       	brne	800063fc <_dtoa_r+0x9a4>
800063f8:	08 9c       	mov	r12,r4
800063fa:	c1 38       	rjmp	80006420 <_dtoa_r+0x9c8>
800063fc:	68 1b       	ld.w	r11,r4[0x4]
800063fe:	0e 9c       	mov	r12,r7
80006400:	e0 a0 08 28 	rcall	80007450 <_Balloc>
80006404:	68 4a       	ld.w	r10,r4[0x10]
80006406:	18 95       	mov	r5,r12
80006408:	e8 cb ff f4 	sub	r11,r4,-12
8000640c:	2f ea       	sub	r10,-2
8000640e:	2f 4c       	sub	r12,-12
80006410:	a3 6a       	lsl	r10,0x2
80006412:	fe b0 e7 ef 	rcall	800033f0 <memcpy>
80006416:	0a 9b       	mov	r11,r5
80006418:	30 1a       	mov	r10,1
8000641a:	0e 9c       	mov	r12,r7
8000641c:	e0 a0 09 0a 	rcall	80007630 <__lshift>
80006420:	50 44       	stdsp	sp[0x10],r4
80006422:	40 3a       	lddsp	r10,sp[0xc]
80006424:	30 19       	mov	r9,1
80006426:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000642a:	18 94       	mov	r4,r12
8000642c:	50 da       	stdsp	sp[0x34],r10
8000642e:	40 85       	lddsp	r5,sp[0x20]
80006430:	50 99       	stdsp	sp[0x24],r9
80006432:	50 26       	stdsp	sp[0x8],r6
80006434:	50 e1       	stdsp	sp[0x38],r1
80006436:	04 9b       	mov	r11,r2
80006438:	06 9c       	mov	r12,r3
8000643a:	fe b0 fa 7f 	rcall	80005938 <quorem>
8000643e:	40 4b       	lddsp	r11,sp[0x10]
80006440:	f8 c0 ff d0 	sub	r0,r12,-48
80006444:	06 9c       	mov	r12,r3
80006446:	e0 a0 07 d1 	rcall	800073e8 <__mcmp>
8000644a:	08 9a       	mov	r10,r4
8000644c:	50 6c       	stdsp	sp[0x18],r12
8000644e:	04 9b       	mov	r11,r2
80006450:	0e 9c       	mov	r12,r7
80006452:	e0 a0 08 87 	rcall	80007560 <__mdiff>
80006456:	18 91       	mov	r1,r12
80006458:	78 38       	ld.w	r8,r12[0xc]
8000645a:	58 08       	cp.w	r8,0
8000645c:	c0 30       	breq	80006462 <_dtoa_r+0xa0a>
8000645e:	30 16       	mov	r6,1
80006460:	c0 68       	rjmp	8000646c <_dtoa_r+0xa14>
80006462:	18 9b       	mov	r11,r12
80006464:	06 9c       	mov	r12,r3
80006466:	e0 a0 07 c1 	rcall	800073e8 <__mcmp>
8000646a:	18 96       	mov	r6,r12
8000646c:	0e 9c       	mov	r12,r7
8000646e:	02 9b       	mov	r11,r1
80006470:	e0 a0 07 d6 	rcall	8000741c <_Bfree>
80006474:	40 cc       	lddsp	r12,sp[0x30]
80006476:	ed ec 10 08 	or	r8,r6,r12
8000647a:	c0 d1       	brne	80006494 <_dtoa_r+0xa3c>
8000647c:	40 db       	lddsp	r11,sp[0x34]
8000647e:	58 0b       	cp.w	r11,0
80006480:	c0 a1       	brne	80006494 <_dtoa_r+0xa3c>
80006482:	40 26       	lddsp	r6,sp[0x8]
80006484:	e0 40 00 39 	cp.w	r0,57
80006488:	c3 00       	breq	800064e8 <_dtoa_r+0xa90>
8000648a:	40 6a       	lddsp	r10,sp[0x18]
8000648c:	58 0a       	cp.w	r10,0
8000648e:	e0 89 00 24 	brgt	800064d6 <_dtoa_r+0xa7e>
80006492:	c2 f8       	rjmp	800064f0 <_dtoa_r+0xa98>
80006494:	40 69       	lddsp	r9,sp[0x18]
80006496:	58 09       	cp.w	r9,0
80006498:	c0 85       	brlt	800064a8 <_dtoa_r+0xa50>
8000649a:	12 98       	mov	r8,r9
8000649c:	40 cc       	lddsp	r12,sp[0x30]
8000649e:	18 48       	or	r8,r12
800064a0:	c1 d1       	brne	800064da <_dtoa_r+0xa82>
800064a2:	40 db       	lddsp	r11,sp[0x34]
800064a4:	58 0b       	cp.w	r11,0
800064a6:	c1 a1       	brne	800064da <_dtoa_r+0xa82>
800064a8:	0c 99       	mov	r9,r6
800064aa:	40 26       	lddsp	r6,sp[0x8]
800064ac:	58 09       	cp.w	r9,0
800064ae:	e0 8a 00 21 	brle	800064f0 <_dtoa_r+0xa98>
800064b2:	06 9b       	mov	r11,r3
800064b4:	30 1a       	mov	r10,1
800064b6:	0e 9c       	mov	r12,r7
800064b8:	e0 a0 08 bc 	rcall	80007630 <__lshift>
800064bc:	04 9b       	mov	r11,r2
800064be:	18 93       	mov	r3,r12
800064c0:	e0 a0 07 94 	rcall	800073e8 <__mcmp>
800064c4:	e0 89 00 06 	brgt	800064d0 <_dtoa_r+0xa78>
800064c8:	c1 41       	brne	800064f0 <_dtoa_r+0xa98>
800064ca:	ed b0 00 00 	bld	r0,0x0
800064ce:	c1 11       	brne	800064f0 <_dtoa_r+0xa98>
800064d0:	e0 40 00 39 	cp.w	r0,57
800064d4:	c0 a0       	breq	800064e8 <_dtoa_r+0xa90>
800064d6:	2f f0       	sub	r0,-1
800064d8:	c0 c8       	rjmp	800064f0 <_dtoa_r+0xa98>
800064da:	58 06       	cp.w	r6,0
800064dc:	e0 8a 00 0c 	brle	800064f4 <_dtoa_r+0xa9c>
800064e0:	40 26       	lddsp	r6,sp[0x8]
800064e2:	e0 40 00 39 	cp.w	r0,57
800064e6:	c0 41       	brne	800064ee <_dtoa_r+0xa96>
800064e8:	33 98       	mov	r8,57
800064ea:	0a c8       	st.b	r5++,r8
800064ec:	c6 78       	rjmp	800065ba <_dtoa_r+0xb62>
800064ee:	2f f0       	sub	r0,-1
800064f0:	0a c0       	st.b	r5++,r0
800064f2:	c7 58       	rjmp	800065dc <_dtoa_r+0xb84>
800064f4:	0a c0       	st.b	r5++,r0
800064f6:	40 9a       	lddsp	r10,sp[0x24]
800064f8:	40 e9       	lddsp	r9,sp[0x38]
800064fa:	12 3a       	cp.w	r10,r9
800064fc:	c4 30       	breq	80006582 <_dtoa_r+0xb2a>
800064fe:	06 9b       	mov	r11,r3
80006500:	30 09       	mov	r9,0
80006502:	30 aa       	mov	r10,10
80006504:	0e 9c       	mov	r12,r7
80006506:	e0 a0 09 61 	rcall	800077c8 <__multadd>
8000650a:	40 48       	lddsp	r8,sp[0x10]
8000650c:	18 93       	mov	r3,r12
8000650e:	08 38       	cp.w	r8,r4
80006510:	c0 91       	brne	80006522 <_dtoa_r+0xaca>
80006512:	10 9b       	mov	r11,r8
80006514:	30 09       	mov	r9,0
80006516:	30 aa       	mov	r10,10
80006518:	0e 9c       	mov	r12,r7
8000651a:	e0 a0 09 57 	rcall	800077c8 <__multadd>
8000651e:	50 4c       	stdsp	sp[0x10],r12
80006520:	c0 e8       	rjmp	8000653c <_dtoa_r+0xae4>
80006522:	40 4b       	lddsp	r11,sp[0x10]
80006524:	30 09       	mov	r9,0
80006526:	30 aa       	mov	r10,10
80006528:	0e 9c       	mov	r12,r7
8000652a:	e0 a0 09 4f 	rcall	800077c8 <__multadd>
8000652e:	08 9b       	mov	r11,r4
80006530:	50 4c       	stdsp	sp[0x10],r12
80006532:	30 09       	mov	r9,0
80006534:	30 aa       	mov	r10,10
80006536:	0e 9c       	mov	r12,r7
80006538:	e0 a0 09 48 	rcall	800077c8 <__multadd>
8000653c:	18 94       	mov	r4,r12
8000653e:	40 9c       	lddsp	r12,sp[0x24]
80006540:	2f fc       	sub	r12,-1
80006542:	50 9c       	stdsp	sp[0x24],r12
80006544:	c7 9b       	rjmp	80006436 <_dtoa_r+0x9de>
80006546:	30 18       	mov	r8,1
80006548:	06 90       	mov	r0,r3
8000654a:	40 85       	lddsp	r5,sp[0x20]
8000654c:	08 93       	mov	r3,r4
8000654e:	0c 94       	mov	r4,r6
80006550:	10 96       	mov	r6,r8
80006552:	04 9b       	mov	r11,r2
80006554:	00 9c       	mov	r12,r0
80006556:	fe b0 f9 f1 	rcall	80005938 <quorem>
8000655a:	2d 0c       	sub	r12,-48
8000655c:	0a cc       	st.b	r5++,r12
8000655e:	02 36       	cp.w	r6,r1
80006560:	c0 a4       	brge	80006574 <_dtoa_r+0xb1c>
80006562:	00 9b       	mov	r11,r0
80006564:	30 09       	mov	r9,0
80006566:	30 aa       	mov	r10,10
80006568:	0e 9c       	mov	r12,r7
8000656a:	2f f6       	sub	r6,-1
8000656c:	e0 a0 09 2e 	rcall	800077c8 <__multadd>
80006570:	18 90       	mov	r0,r12
80006572:	cf 0b       	rjmp	80006552 <_dtoa_r+0xafa>
80006574:	08 96       	mov	r6,r4
80006576:	30 0b       	mov	r11,0
80006578:	06 94       	mov	r4,r3
8000657a:	50 4b       	stdsp	sp[0x10],r11
8000657c:	00 93       	mov	r3,r0
8000657e:	18 90       	mov	r0,r12
80006580:	c0 28       	rjmp	80006584 <_dtoa_r+0xb2c>
80006582:	40 26       	lddsp	r6,sp[0x8]
80006584:	06 9b       	mov	r11,r3
80006586:	30 1a       	mov	r10,1
80006588:	0e 9c       	mov	r12,r7
8000658a:	e0 a0 08 53 	rcall	80007630 <__lshift>
8000658e:	04 9b       	mov	r11,r2
80006590:	18 93       	mov	r3,r12
80006592:	e0 a0 07 2b 	rcall	800073e8 <__mcmp>
80006596:	e0 89 00 12 	brgt	800065ba <_dtoa_r+0xb62>
8000659a:	c1 b1       	brne	800065d0 <_dtoa_r+0xb78>
8000659c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800065a0:	c0 d1       	brne	800065ba <_dtoa_r+0xb62>
800065a2:	c1 78       	rjmp	800065d0 <_dtoa_r+0xb78>
800065a4:	40 89       	lddsp	r9,sp[0x20]
800065a6:	12 38       	cp.w	r8,r9
800065a8:	c0 30       	breq	800065ae <_dtoa_r+0xb56>
800065aa:	10 95       	mov	r5,r8
800065ac:	c0 88       	rjmp	800065bc <_dtoa_r+0xb64>
800065ae:	2f f6       	sub	r6,-1
800065b0:	50 66       	stdsp	sp[0x18],r6
800065b2:	33 18       	mov	r8,49
800065b4:	40 8c       	lddsp	r12,sp[0x20]
800065b6:	b8 88       	st.b	r12[0x0],r8
800065b8:	c1 38       	rjmp	800065de <_dtoa_r+0xb86>
800065ba:	33 9a       	mov	r10,57
800065bc:	0a 98       	mov	r8,r5
800065be:	11 79       	ld.ub	r9,--r8
800065c0:	f4 09 18 00 	cp.b	r9,r10
800065c4:	cf 00       	breq	800065a4 <_dtoa_r+0xb4c>
800065c6:	2f f9       	sub	r9,-1
800065c8:	b0 89       	st.b	r8[0x0],r9
800065ca:	c0 98       	rjmp	800065dc <_dtoa_r+0xb84>
800065cc:	10 95       	mov	r5,r8
800065ce:	c0 28       	rjmp	800065d2 <_dtoa_r+0xb7a>
800065d0:	33 09       	mov	r9,48
800065d2:	0a 98       	mov	r8,r5
800065d4:	11 7a       	ld.ub	r10,--r8
800065d6:	f2 0a 18 00 	cp.b	r10,r9
800065da:	cf 90       	breq	800065cc <_dtoa_r+0xb74>
800065dc:	50 66       	stdsp	sp[0x18],r6
800065de:	04 9b       	mov	r11,r2
800065e0:	0e 9c       	mov	r12,r7
800065e2:	e0 a0 07 1d 	rcall	8000741c <_Bfree>
800065e6:	58 04       	cp.w	r4,0
800065e8:	c1 20       	breq	8000660c <_dtoa_r+0xbb4>
800065ea:	40 4b       	lddsp	r11,sp[0x10]
800065ec:	08 3b       	cp.w	r11,r4
800065ee:	5f 19       	srne	r9
800065f0:	58 0b       	cp.w	r11,0
800065f2:	5f 18       	srne	r8
800065f4:	f3 e8 00 08 	and	r8,r9,r8
800065f8:	c0 40       	breq	80006600 <_dtoa_r+0xba8>
800065fa:	0e 9c       	mov	r12,r7
800065fc:	e0 a0 07 10 	rcall	8000741c <_Bfree>
80006600:	08 9b       	mov	r11,r4
80006602:	0e 9c       	mov	r12,r7
80006604:	e0 a0 07 0c 	rcall	8000741c <_Bfree>
80006608:	c0 28       	rjmp	8000660c <_dtoa_r+0xbb4>
8000660a:	50 66       	stdsp	sp[0x18],r6
8000660c:	0e 9c       	mov	r12,r7
8000660e:	06 9b       	mov	r11,r3
80006610:	e0 a0 07 06 	rcall	8000741c <_Bfree>
80006614:	30 08       	mov	r8,0
80006616:	aa 88       	st.b	r5[0x0],r8
80006618:	40 68       	lddsp	r8,sp[0x18]
8000661a:	41 5a       	lddsp	r10,sp[0x54]
8000661c:	2f f8       	sub	r8,-1
8000661e:	41 29       	lddsp	r9,sp[0x48]
80006620:	95 08       	st.w	r10[0x0],r8
80006622:	40 8c       	lddsp	r12,sp[0x20]
80006624:	58 09       	cp.w	r9,0
80006626:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000662a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000662e:	2e 6d       	sub	sp,-104
80006630:	d8 32       	popm	r0-r7,pc
80006632:	d7 03       	nop

80006634 <_fflush_r>:
80006634:	d4 21       	pushm	r4-r7,lr
80006636:	16 97       	mov	r7,r11
80006638:	18 96       	mov	r6,r12
8000663a:	76 48       	ld.w	r8,r11[0x10]
8000663c:	58 08       	cp.w	r8,0
8000663e:	c7 f0       	breq	8000673c <_fflush_r+0x108>
80006640:	58 0c       	cp.w	r12,0
80006642:	c0 50       	breq	8000664c <_fflush_r+0x18>
80006644:	78 68       	ld.w	r8,r12[0x18]
80006646:	58 08       	cp.w	r8,0
80006648:	c0 21       	brne	8000664c <_fflush_r+0x18>
8000664a:	cc dc       	rcall	800067e4 <__sinit>
8000664c:	fe c8 b7 90 	sub	r8,pc,-18544
80006650:	10 37       	cp.w	r7,r8
80006652:	c0 31       	brne	80006658 <_fflush_r+0x24>
80006654:	6c 07       	ld.w	r7,r6[0x0]
80006656:	c0 c8       	rjmp	8000666e <_fflush_r+0x3a>
80006658:	fe c8 b7 7c 	sub	r8,pc,-18564
8000665c:	10 37       	cp.w	r7,r8
8000665e:	c0 31       	brne	80006664 <_fflush_r+0x30>
80006660:	6c 17       	ld.w	r7,r6[0x4]
80006662:	c0 68       	rjmp	8000666e <_fflush_r+0x3a>
80006664:	fe c8 b7 68 	sub	r8,pc,-18584
80006668:	10 37       	cp.w	r7,r8
8000666a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000666e:	8e 6a       	ld.sh	r10,r7[0xc]
80006670:	14 98       	mov	r8,r10
80006672:	ed ba 00 03 	bld	r10,0x3
80006676:	c4 20       	breq	800066fa <_fflush_r+0xc6>
80006678:	ab ba       	sbr	r10,0xb
8000667a:	ae 6a       	st.h	r7[0xc],r10
8000667c:	6e 18       	ld.w	r8,r7[0x4]
8000667e:	58 08       	cp.w	r8,0
80006680:	e0 89 00 06 	brgt	8000668c <_fflush_r+0x58>
80006684:	6f 08       	ld.w	r8,r7[0x40]
80006686:	58 08       	cp.w	r8,0
80006688:	e0 8a 00 5a 	brle	8000673c <_fflush_r+0x108>
8000668c:	6e b8       	ld.w	r8,r7[0x2c]
8000668e:	58 08       	cp.w	r8,0
80006690:	c5 60       	breq	8000673c <_fflush_r+0x108>
80006692:	e2 1a 10 00 	andl	r10,0x1000,COH
80006696:	c0 30       	breq	8000669c <_fflush_r+0x68>
80006698:	6f 55       	ld.w	r5,r7[0x54]
8000669a:	c0 f8       	rjmp	800066b8 <_fflush_r+0x84>
8000669c:	30 19       	mov	r9,1
8000669e:	6e 8b       	ld.w	r11,r7[0x20]
800066a0:	0c 9c       	mov	r12,r6
800066a2:	5d 18       	icall	r8
800066a4:	18 95       	mov	r5,r12
800066a6:	5b fc       	cp.w	r12,-1
800066a8:	c0 81       	brne	800066b8 <_fflush_r+0x84>
800066aa:	6c 38       	ld.w	r8,r6[0xc]
800066ac:	59 d8       	cp.w	r8,29
800066ae:	c4 70       	breq	8000673c <_fflush_r+0x108>
800066b0:	8e 68       	ld.sh	r8,r7[0xc]
800066b2:	a7 a8       	sbr	r8,0x6
800066b4:	ae 68       	st.h	r7[0xc],r8
800066b6:	d8 22       	popm	r4-r7,pc
800066b8:	8e 68       	ld.sh	r8,r7[0xc]
800066ba:	ed b8 00 02 	bld	r8,0x2
800066be:	c0 91       	brne	800066d0 <_fflush_r+0x9c>
800066c0:	6e 18       	ld.w	r8,r7[0x4]
800066c2:	10 15       	sub	r5,r8
800066c4:	6e d8       	ld.w	r8,r7[0x34]
800066c6:	58 08       	cp.w	r8,0
800066c8:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800066cc:	eb d8 e1 15 	subne	r5,r5,r8
800066d0:	6e b8       	ld.w	r8,r7[0x2c]
800066d2:	0c 9c       	mov	r12,r6
800066d4:	30 09       	mov	r9,0
800066d6:	0a 9a       	mov	r10,r5
800066d8:	6e 8b       	ld.w	r11,r7[0x20]
800066da:	5d 18       	icall	r8
800066dc:	8e 68       	ld.sh	r8,r7[0xc]
800066de:	0a 3c       	cp.w	r12,r5
800066e0:	c2 61       	brne	8000672c <_fflush_r+0xf8>
800066e2:	ab d8       	cbr	r8,0xb
800066e4:	30 0c       	mov	r12,0
800066e6:	6e 49       	ld.w	r9,r7[0x10]
800066e8:	ae 68       	st.h	r7[0xc],r8
800066ea:	8f 1c       	st.w	r7[0x4],r12
800066ec:	8f 09       	st.w	r7[0x0],r9
800066ee:	ed b8 00 0c 	bld	r8,0xc
800066f2:	c2 51       	brne	8000673c <_fflush_r+0x108>
800066f4:	ef 45 00 54 	st.w	r7[84],r5
800066f8:	d8 22       	popm	r4-r7,pc
800066fa:	6e 45       	ld.w	r5,r7[0x10]
800066fc:	58 05       	cp.w	r5,0
800066fe:	c1 f0       	breq	8000673c <_fflush_r+0x108>
80006700:	6e 04       	ld.w	r4,r7[0x0]
80006702:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006706:	8f 05       	st.w	r7[0x0],r5
80006708:	f9 b8 01 00 	movne	r8,0
8000670c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006710:	0a 14       	sub	r4,r5
80006712:	8f 28       	st.w	r7[0x8],r8
80006714:	c1 18       	rjmp	80006736 <_fflush_r+0x102>
80006716:	08 99       	mov	r9,r4
80006718:	0a 9a       	mov	r10,r5
8000671a:	6e a8       	ld.w	r8,r7[0x28]
8000671c:	6e 8b       	ld.w	r11,r7[0x20]
8000671e:	0c 9c       	mov	r12,r6
80006720:	5d 18       	icall	r8
80006722:	18 14       	sub	r4,r12
80006724:	58 0c       	cp.w	r12,0
80006726:	e0 89 00 07 	brgt	80006734 <_fflush_r+0x100>
8000672a:	8e 68       	ld.sh	r8,r7[0xc]
8000672c:	a7 a8       	sbr	r8,0x6
8000672e:	3f fc       	mov	r12,-1
80006730:	ae 68       	st.h	r7[0xc],r8
80006732:	d8 22       	popm	r4-r7,pc
80006734:	18 05       	add	r5,r12
80006736:	58 04       	cp.w	r4,0
80006738:	fe 99 ff ef 	brgt	80006716 <_fflush_r+0xe2>
8000673c:	d8 2a       	popm	r4-r7,pc,r12=0
8000673e:	d7 03       	nop

80006740 <__sfp_lock_acquire>:
80006740:	5e fc       	retal	r12

80006742 <__sfp_lock_release>:
80006742:	5e fc       	retal	r12

80006744 <_cleanup_r>:
80006744:	d4 01       	pushm	lr
80006746:	fe cb e8 6a 	sub	r11,pc,-6038
8000674a:	e0 a0 02 fd 	rcall	80006d44 <_fwalk>
8000674e:	d8 02       	popm	pc

80006750 <__sfmoreglue>:
80006750:	d4 21       	pushm	r4-r7,lr
80006752:	16 95       	mov	r5,r11
80006754:	f6 06 10 5c 	mul	r6,r11,92
80006758:	ec cb ff f4 	sub	r11,r6,-12
8000675c:	e0 a0 03 84 	rcall	80006e64 <_malloc_r>
80006760:	18 97       	mov	r7,r12
80006762:	c0 90       	breq	80006774 <__sfmoreglue+0x24>
80006764:	99 15       	st.w	r12[0x4],r5
80006766:	30 0b       	mov	r11,0
80006768:	2f 4c       	sub	r12,-12
8000676a:	0c 9a       	mov	r10,r6
8000676c:	8f 2c       	st.w	r7[0x8],r12
8000676e:	8f 0b       	st.w	r7[0x0],r11
80006770:	e0 a0 05 bc 	rcall	800072e8 <memset>
80006774:	0e 9c       	mov	r12,r7
80006776:	d8 22       	popm	r4-r7,pc

80006778 <__sfp>:
80006778:	d4 21       	pushm	r4-r7,lr
8000677a:	fe c8 b8 5a 	sub	r8,pc,-18342
8000677e:	18 96       	mov	r6,r12
80006780:	70 07       	ld.w	r7,r8[0x0]
80006782:	6e 68       	ld.w	r8,r7[0x18]
80006784:	58 08       	cp.w	r8,0
80006786:	c0 31       	brne	8000678c <__sfp+0x14>
80006788:	0e 9c       	mov	r12,r7
8000678a:	c2 dc       	rcall	800067e4 <__sinit>
8000678c:	ee c7 ff 28 	sub	r7,r7,-216
80006790:	30 05       	mov	r5,0
80006792:	6e 2c       	ld.w	r12,r7[0x8]
80006794:	6e 18       	ld.w	r8,r7[0x4]
80006796:	c0 68       	rjmp	800067a2 <__sfp+0x2a>
80006798:	98 69       	ld.sh	r9,r12[0xc]
8000679a:	ea 09 19 00 	cp.h	r9,r5
8000679e:	c1 10       	breq	800067c0 <__sfp+0x48>
800067a0:	2a 4c       	sub	r12,-92
800067a2:	20 18       	sub	r8,1
800067a4:	cf a7       	brpl	80006798 <__sfp+0x20>
800067a6:	6e 08       	ld.w	r8,r7[0x0]
800067a8:	58 08       	cp.w	r8,0
800067aa:	c0 61       	brne	800067b6 <__sfp+0x3e>
800067ac:	30 4b       	mov	r11,4
800067ae:	0c 9c       	mov	r12,r6
800067b0:	cd 0f       	rcall	80006750 <__sfmoreglue>
800067b2:	8f 0c       	st.w	r7[0x0],r12
800067b4:	c0 30       	breq	800067ba <__sfp+0x42>
800067b6:	6e 07       	ld.w	r7,r7[0x0]
800067b8:	ce db       	rjmp	80006792 <__sfp+0x1a>
800067ba:	30 c8       	mov	r8,12
800067bc:	8d 38       	st.w	r6[0xc],r8
800067be:	d8 22       	popm	r4-r7,pc
800067c0:	30 08       	mov	r8,0
800067c2:	f9 48 00 4c 	st.w	r12[76],r8
800067c6:	99 08       	st.w	r12[0x0],r8
800067c8:	99 28       	st.w	r12[0x8],r8
800067ca:	99 18       	st.w	r12[0x4],r8
800067cc:	99 48       	st.w	r12[0x10],r8
800067ce:	99 58       	st.w	r12[0x14],r8
800067d0:	99 68       	st.w	r12[0x18],r8
800067d2:	99 d8       	st.w	r12[0x34],r8
800067d4:	99 e8       	st.w	r12[0x38],r8
800067d6:	f9 48 00 48 	st.w	r12[72],r8
800067da:	3f f8       	mov	r8,-1
800067dc:	b8 78       	st.h	r12[0xe],r8
800067de:	30 18       	mov	r8,1
800067e0:	b8 68       	st.h	r12[0xc],r8
800067e2:	d8 22       	popm	r4-r7,pc

800067e4 <__sinit>:
800067e4:	d4 21       	pushm	r4-r7,lr
800067e6:	18 96       	mov	r6,r12
800067e8:	78 67       	ld.w	r7,r12[0x18]
800067ea:	58 07       	cp.w	r7,0
800067ec:	c4 91       	brne	8000687e <__sinit+0x9a>
800067ee:	fe c8 00 aa 	sub	r8,pc,170
800067f2:	30 15       	mov	r5,1
800067f4:	99 a8       	st.w	r12[0x28],r8
800067f6:	f9 47 00 d8 	st.w	r12[216],r7
800067fa:	f9 47 00 dc 	st.w	r12[220],r7
800067fe:	f9 47 00 e0 	st.w	r12[224],r7
80006802:	99 65       	st.w	r12[0x18],r5
80006804:	cb af       	rcall	80006778 <__sfp>
80006806:	8d 0c       	st.w	r6[0x0],r12
80006808:	0c 9c       	mov	r12,r6
8000680a:	cb 7f       	rcall	80006778 <__sfp>
8000680c:	8d 1c       	st.w	r6[0x4],r12
8000680e:	0c 9c       	mov	r12,r6
80006810:	cb 4f       	rcall	80006778 <__sfp>
80006812:	6c 09       	ld.w	r9,r6[0x0]
80006814:	30 48       	mov	r8,4
80006816:	93 07       	st.w	r9[0x0],r7
80006818:	b2 68       	st.h	r9[0xc],r8
8000681a:	93 17       	st.w	r9[0x4],r7
8000681c:	93 27       	st.w	r9[0x8],r7
8000681e:	6c 18       	ld.w	r8,r6[0x4]
80006820:	b2 77       	st.h	r9[0xe],r7
80006822:	93 47       	st.w	r9[0x10],r7
80006824:	93 57       	st.w	r9[0x14],r7
80006826:	93 67       	st.w	r9[0x18],r7
80006828:	93 89       	st.w	r9[0x20],r9
8000682a:	91 07       	st.w	r8[0x0],r7
8000682c:	91 17       	st.w	r8[0x4],r7
8000682e:	91 27       	st.w	r8[0x8],r7
80006830:	fe ce eb e4 	sub	lr,pc,-5148
80006834:	fe cb ec 14 	sub	r11,pc,-5100
80006838:	93 9e       	st.w	r9[0x24],lr
8000683a:	93 ab       	st.w	r9[0x28],r11
8000683c:	fe ca ec 3c 	sub	r10,pc,-5060
80006840:	fe c4 ec 48 	sub	r4,pc,-5048
80006844:	93 ba       	st.w	r9[0x2c],r10
80006846:	93 c4       	st.w	r9[0x30],r4
80006848:	30 99       	mov	r9,9
8000684a:	b0 69       	st.h	r8[0xc],r9
8000684c:	b0 75       	st.h	r8[0xe],r5
8000684e:	91 c4       	st.w	r8[0x30],r4
80006850:	91 47       	st.w	r8[0x10],r7
80006852:	91 57       	st.w	r8[0x14],r7
80006854:	91 67       	st.w	r8[0x18],r7
80006856:	91 88       	st.w	r8[0x20],r8
80006858:	91 9e       	st.w	r8[0x24],lr
8000685a:	91 ab       	st.w	r8[0x28],r11
8000685c:	91 ba       	st.w	r8[0x2c],r10
8000685e:	8d 2c       	st.w	r6[0x8],r12
80006860:	31 28       	mov	r8,18
80006862:	99 07       	st.w	r12[0x0],r7
80006864:	b8 68       	st.h	r12[0xc],r8
80006866:	99 17       	st.w	r12[0x4],r7
80006868:	99 27       	st.w	r12[0x8],r7
8000686a:	30 28       	mov	r8,2
8000686c:	b8 78       	st.h	r12[0xe],r8
8000686e:	99 c4       	st.w	r12[0x30],r4
80006870:	99 67       	st.w	r12[0x18],r7
80006872:	99 9e       	st.w	r12[0x24],lr
80006874:	99 ab       	st.w	r12[0x28],r11
80006876:	99 ba       	st.w	r12[0x2c],r10
80006878:	99 47       	st.w	r12[0x10],r7
8000687a:	99 57       	st.w	r12[0x14],r7
8000687c:	99 8c       	st.w	r12[0x20],r12
8000687e:	d8 22       	popm	r4-r7,pc

80006880 <_malloc_trim_r>:
80006880:	d4 21       	pushm	r4-r7,lr
80006882:	16 95       	mov	r5,r11
80006884:	18 97       	mov	r7,r12
80006886:	e0 a0 05 38 	rcall	800072f6 <__malloc_lock>
8000688a:	e0 64 00 fc 	mov	r4,252
8000688e:	68 28       	ld.w	r8,r4[0x8]
80006890:	70 16       	ld.w	r6,r8[0x4]
80006892:	e0 16 ff fc 	andl	r6,0xfffc
80006896:	ec c8 ff 91 	sub	r8,r6,-111
8000689a:	f0 05 01 05 	sub	r5,r8,r5
8000689e:	e0 15 ff 80 	andl	r5,0xff80
800068a2:	ea c5 00 80 	sub	r5,r5,128
800068a6:	e0 45 00 7f 	cp.w	r5,127
800068aa:	e0 8a 00 25 	brle	800068f4 <_malloc_trim_r+0x74>
800068ae:	30 0b       	mov	r11,0
800068b0:	0e 9c       	mov	r12,r7
800068b2:	e0 a0 09 93 	rcall	80007bd8 <_sbrk_r>
800068b6:	68 28       	ld.w	r8,r4[0x8]
800068b8:	0c 08       	add	r8,r6
800068ba:	10 3c       	cp.w	r12,r8
800068bc:	c1 c1       	brne	800068f4 <_malloc_trim_r+0x74>
800068be:	ea 0b 11 00 	rsub	r11,r5,0
800068c2:	0e 9c       	mov	r12,r7
800068c4:	e0 a0 09 8a 	rcall	80007bd8 <_sbrk_r>
800068c8:	5b fc       	cp.w	r12,-1
800068ca:	c1 91       	brne	800068fc <_malloc_trim_r+0x7c>
800068cc:	30 0b       	mov	r11,0
800068ce:	0e 9c       	mov	r12,r7
800068d0:	e0 a0 09 84 	rcall	80007bd8 <_sbrk_r>
800068d4:	68 28       	ld.w	r8,r4[0x8]
800068d6:	f8 08 01 09 	sub	r9,r12,r8
800068da:	58 f9       	cp.w	r9,15
800068dc:	e0 8a 00 0c 	brle	800068f4 <_malloc_trim_r+0x74>
800068e0:	a1 a9       	sbr	r9,0x0
800068e2:	91 19       	st.w	r8[0x4],r9
800068e4:	e0 68 05 08 	mov	r8,1288
800068e8:	70 09       	ld.w	r9,r8[0x0]
800068ea:	e0 68 07 34 	mov	r8,1844
800068ee:	f8 09 01 09 	sub	r9,r12,r9
800068f2:	91 09       	st.w	r8[0x0],r9
800068f4:	0e 9c       	mov	r12,r7
800068f6:	e0 a0 05 01 	rcall	800072f8 <__malloc_unlock>
800068fa:	d8 2a       	popm	r4-r7,pc,r12=0
800068fc:	68 28       	ld.w	r8,r4[0x8]
800068fe:	0a 16       	sub	r6,r5
80006900:	a1 a6       	sbr	r6,0x0
80006902:	91 16       	st.w	r8[0x4],r6
80006904:	e0 68 07 34 	mov	r8,1844
80006908:	70 09       	ld.w	r9,r8[0x0]
8000690a:	0a 19       	sub	r9,r5
8000690c:	0e 9c       	mov	r12,r7
8000690e:	91 09       	st.w	r8[0x0],r9
80006910:	e0 a0 04 f4 	rcall	800072f8 <__malloc_unlock>
80006914:	da 2a       	popm	r4-r7,pc,r12=1
80006916:	d7 03       	nop

80006918 <_free_r>:
80006918:	d4 21       	pushm	r4-r7,lr
8000691a:	16 96       	mov	r6,r11
8000691c:	18 97       	mov	r7,r12
8000691e:	58 0b       	cp.w	r11,0
80006920:	e0 80 00 c0 	breq	80006aa0 <_free_r+0x188>
80006924:	e0 a0 04 e9 	rcall	800072f6 <__malloc_lock>
80006928:	20 86       	sub	r6,8
8000692a:	e0 6a 00 fc 	mov	r10,252
8000692e:	6c 18       	ld.w	r8,r6[0x4]
80006930:	74 2e       	ld.w	lr,r10[0x8]
80006932:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006936:	a1 c8       	cbr	r8,0x0
80006938:	ec 08 00 09 	add	r9,r6,r8
8000693c:	72 1b       	ld.w	r11,r9[0x4]
8000693e:	e0 1b ff fc 	andl	r11,0xfffc
80006942:	1c 39       	cp.w	r9,lr
80006944:	c1 e1       	brne	80006980 <_free_r+0x68>
80006946:	f6 08 00 08 	add	r8,r11,r8
8000694a:	58 0c       	cp.w	r12,0
8000694c:	c0 81       	brne	8000695c <_free_r+0x44>
8000694e:	6c 09       	ld.w	r9,r6[0x0]
80006950:	12 16       	sub	r6,r9
80006952:	12 08       	add	r8,r9
80006954:	6c 3b       	ld.w	r11,r6[0xc]
80006956:	6c 29       	ld.w	r9,r6[0x8]
80006958:	97 29       	st.w	r11[0x8],r9
8000695a:	93 3b       	st.w	r9[0xc],r11
8000695c:	10 99       	mov	r9,r8
8000695e:	95 26       	st.w	r10[0x8],r6
80006960:	a1 a9       	sbr	r9,0x0
80006962:	8d 19       	st.w	r6[0x4],r9
80006964:	e0 69 05 04 	mov	r9,1284
80006968:	72 09       	ld.w	r9,r9[0x0]
8000696a:	12 38       	cp.w	r8,r9
8000696c:	c0 63       	brcs	80006978 <_free_r+0x60>
8000696e:	e0 68 07 30 	mov	r8,1840
80006972:	0e 9c       	mov	r12,r7
80006974:	70 0b       	ld.w	r11,r8[0x0]
80006976:	c8 5f       	rcall	80006880 <_malloc_trim_r>
80006978:	0e 9c       	mov	r12,r7
8000697a:	e0 a0 04 bf 	rcall	800072f8 <__malloc_unlock>
8000697e:	d8 22       	popm	r4-r7,pc
80006980:	93 1b       	st.w	r9[0x4],r11
80006982:	58 0c       	cp.w	r12,0
80006984:	c0 30       	breq	8000698a <_free_r+0x72>
80006986:	30 0c       	mov	r12,0
80006988:	c1 08       	rjmp	800069a8 <_free_r+0x90>
8000698a:	6c 0e       	ld.w	lr,r6[0x0]
8000698c:	f4 c5 ff f8 	sub	r5,r10,-8
80006990:	1c 16       	sub	r6,lr
80006992:	1c 08       	add	r8,lr
80006994:	6c 2e       	ld.w	lr,r6[0x8]
80006996:	0a 3e       	cp.w	lr,r5
80006998:	f9 bc 00 01 	moveq	r12,1
8000699c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800069a0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800069a4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800069a8:	f2 0b 00 0e 	add	lr,r9,r11
800069ac:	7c 1e       	ld.w	lr,lr[0x4]
800069ae:	ed be 00 00 	bld	lr,0x0
800069b2:	c1 40       	breq	800069da <_free_r+0xc2>
800069b4:	16 08       	add	r8,r11
800069b6:	58 0c       	cp.w	r12,0
800069b8:	c0 d1       	brne	800069d2 <_free_r+0xba>
800069ba:	e0 6e 00 fc 	mov	lr,252
800069be:	72 2b       	ld.w	r11,r9[0x8]
800069c0:	2f 8e       	sub	lr,-8
800069c2:	1c 3b       	cp.w	r11,lr
800069c4:	c0 71       	brne	800069d2 <_free_r+0xba>
800069c6:	97 36       	st.w	r11[0xc],r6
800069c8:	97 26       	st.w	r11[0x8],r6
800069ca:	8d 2b       	st.w	r6[0x8],r11
800069cc:	8d 3b       	st.w	r6[0xc],r11
800069ce:	30 1c       	mov	r12,1
800069d0:	c0 58       	rjmp	800069da <_free_r+0xc2>
800069d2:	72 2b       	ld.w	r11,r9[0x8]
800069d4:	72 39       	ld.w	r9,r9[0xc]
800069d6:	93 2b       	st.w	r9[0x8],r11
800069d8:	97 39       	st.w	r11[0xc],r9
800069da:	10 99       	mov	r9,r8
800069dc:	ec 08 09 08 	st.w	r6[r8],r8
800069e0:	a1 a9       	sbr	r9,0x0
800069e2:	8d 19       	st.w	r6[0x4],r9
800069e4:	58 0c       	cp.w	r12,0
800069e6:	c5 a1       	brne	80006a9a <_free_r+0x182>
800069e8:	e0 48 01 ff 	cp.w	r8,511
800069ec:	e0 8b 00 13 	brhi	80006a12 <_free_r+0xfa>
800069f0:	a3 98       	lsr	r8,0x3
800069f2:	f4 08 00 39 	add	r9,r10,r8<<0x3
800069f6:	72 2b       	ld.w	r11,r9[0x8]
800069f8:	8d 39       	st.w	r6[0xc],r9
800069fa:	8d 2b       	st.w	r6[0x8],r11
800069fc:	97 36       	st.w	r11[0xc],r6
800069fe:	93 26       	st.w	r9[0x8],r6
80006a00:	a3 48       	asr	r8,0x2
80006a02:	74 19       	ld.w	r9,r10[0x4]
80006a04:	30 1b       	mov	r11,1
80006a06:	f6 08 09 48 	lsl	r8,r11,r8
80006a0a:	f3 e8 10 08 	or	r8,r9,r8
80006a0e:	95 18       	st.w	r10[0x4],r8
80006a10:	c4 58       	rjmp	80006a9a <_free_r+0x182>
80006a12:	f0 0b 16 09 	lsr	r11,r8,0x9
80006a16:	58 4b       	cp.w	r11,4
80006a18:	e0 8b 00 06 	brhi	80006a24 <_free_r+0x10c>
80006a1c:	f0 0b 16 06 	lsr	r11,r8,0x6
80006a20:	2c 8b       	sub	r11,-56
80006a22:	c2 08       	rjmp	80006a62 <_free_r+0x14a>
80006a24:	59 4b       	cp.w	r11,20
80006a26:	e0 8b 00 04 	brhi	80006a2e <_free_r+0x116>
80006a2a:	2a 5b       	sub	r11,-91
80006a2c:	c1 b8       	rjmp	80006a62 <_free_r+0x14a>
80006a2e:	e0 4b 00 54 	cp.w	r11,84
80006a32:	e0 8b 00 06 	brhi	80006a3e <_free_r+0x126>
80006a36:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006a3a:	29 2b       	sub	r11,-110
80006a3c:	c1 38       	rjmp	80006a62 <_free_r+0x14a>
80006a3e:	e0 4b 01 54 	cp.w	r11,340
80006a42:	e0 8b 00 06 	brhi	80006a4e <_free_r+0x136>
80006a46:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006a4a:	28 9b       	sub	r11,-119
80006a4c:	c0 b8       	rjmp	80006a62 <_free_r+0x14a>
80006a4e:	e0 4b 05 54 	cp.w	r11,1364
80006a52:	e0 88 00 05 	brls	80006a5c <_free_r+0x144>
80006a56:	37 eb       	mov	r11,126
80006a58:	c0 58       	rjmp	80006a62 <_free_r+0x14a>
80006a5a:	d7 03       	nop
80006a5c:	f0 0b 16 12 	lsr	r11,r8,0x12
80006a60:	28 4b       	sub	r11,-124
80006a62:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006a66:	78 29       	ld.w	r9,r12[0x8]
80006a68:	18 39       	cp.w	r9,r12
80006a6a:	c0 e1       	brne	80006a86 <_free_r+0x16e>
80006a6c:	74 18       	ld.w	r8,r10[0x4]
80006a6e:	a3 4b       	asr	r11,0x2
80006a70:	30 1c       	mov	r12,1
80006a72:	f8 0b 09 4b 	lsl	r11,r12,r11
80006a76:	f1 eb 10 0b 	or	r11,r8,r11
80006a7a:	12 98       	mov	r8,r9
80006a7c:	95 1b       	st.w	r10[0x4],r11
80006a7e:	c0 a8       	rjmp	80006a92 <_free_r+0x17a>
80006a80:	72 29       	ld.w	r9,r9[0x8]
80006a82:	18 39       	cp.w	r9,r12
80006a84:	c0 60       	breq	80006a90 <_free_r+0x178>
80006a86:	72 1a       	ld.w	r10,r9[0x4]
80006a88:	e0 1a ff fc 	andl	r10,0xfffc
80006a8c:	14 38       	cp.w	r8,r10
80006a8e:	cf 93       	brcs	80006a80 <_free_r+0x168>
80006a90:	72 38       	ld.w	r8,r9[0xc]
80006a92:	8d 38       	st.w	r6[0xc],r8
80006a94:	8d 29       	st.w	r6[0x8],r9
80006a96:	93 36       	st.w	r9[0xc],r6
80006a98:	91 26       	st.w	r8[0x8],r6
80006a9a:	0e 9c       	mov	r12,r7
80006a9c:	e0 a0 04 2e 	rcall	800072f8 <__malloc_unlock>
80006aa0:	d8 22       	popm	r4-r7,pc
80006aa2:	d7 03       	nop

80006aa4 <__sfvwrite_r>:
80006aa4:	d4 31       	pushm	r0-r7,lr
80006aa6:	20 3d       	sub	sp,12
80006aa8:	14 94       	mov	r4,r10
80006aaa:	18 95       	mov	r5,r12
80006aac:	16 97       	mov	r7,r11
80006aae:	74 28       	ld.w	r8,r10[0x8]
80006ab0:	58 08       	cp.w	r8,0
80006ab2:	e0 80 01 45 	breq	80006d3c <__sfvwrite_r+0x298>
80006ab6:	96 68       	ld.sh	r8,r11[0xc]
80006ab8:	ed b8 00 03 	bld	r8,0x3
80006abc:	c0 41       	brne	80006ac4 <__sfvwrite_r+0x20>
80006abe:	76 48       	ld.w	r8,r11[0x10]
80006ac0:	58 08       	cp.w	r8,0
80006ac2:	c0 c1       	brne	80006ada <__sfvwrite_r+0x36>
80006ac4:	0e 9b       	mov	r11,r7
80006ac6:	0a 9c       	mov	r12,r5
80006ac8:	fe b0 f6 ca 	rcall	8000585c <__swsetup_r>
80006acc:	c0 70       	breq	80006ada <__sfvwrite_r+0x36>
80006ace:	8e 68       	ld.sh	r8,r7[0xc]
80006ad0:	a7 a8       	sbr	r8,0x6
80006ad2:	ae 68       	st.h	r7[0xc],r8
80006ad4:	30 98       	mov	r8,9
80006ad6:	8b 38       	st.w	r5[0xc],r8
80006ad8:	c3 09       	rjmp	80006d38 <__sfvwrite_r+0x294>
80006ada:	8e 63       	ld.sh	r3,r7[0xc]
80006adc:	68 00       	ld.w	r0,r4[0x0]
80006ade:	06 96       	mov	r6,r3
80006ae0:	e2 16 00 02 	andl	r6,0x2,COH
80006ae4:	c2 10       	breq	80006b26 <__sfvwrite_r+0x82>
80006ae6:	30 03       	mov	r3,0
80006ae8:	e0 62 04 00 	mov	r2,1024
80006aec:	06 96       	mov	r6,r3
80006aee:	c0 48       	rjmp	80006af6 <__sfvwrite_r+0x52>
80006af0:	60 03       	ld.w	r3,r0[0x0]
80006af2:	60 16       	ld.w	r6,r0[0x4]
80006af4:	2f 80       	sub	r0,-8
80006af6:	58 06       	cp.w	r6,0
80006af8:	cf c0       	breq	80006af0 <__sfvwrite_r+0x4c>
80006afa:	e0 46 04 00 	cp.w	r6,1024
80006afe:	ec 09 17 80 	movls	r9,r6
80006b02:	e4 09 17 b0 	movhi	r9,r2
80006b06:	06 9a       	mov	r10,r3
80006b08:	6e a8       	ld.w	r8,r7[0x28]
80006b0a:	6e 8b       	ld.w	r11,r7[0x20]
80006b0c:	0a 9c       	mov	r12,r5
80006b0e:	5d 18       	icall	r8
80006b10:	18 16       	sub	r6,r12
80006b12:	58 0c       	cp.w	r12,0
80006b14:	e0 8a 01 0f 	brle	80006d32 <__sfvwrite_r+0x28e>
80006b18:	68 28       	ld.w	r8,r4[0x8]
80006b1a:	18 18       	sub	r8,r12
80006b1c:	89 28       	st.w	r4[0x8],r8
80006b1e:	e0 80 01 0f 	breq	80006d3c <__sfvwrite_r+0x298>
80006b22:	18 03       	add	r3,r12
80006b24:	ce 9b       	rjmp	80006af6 <__sfvwrite_r+0x52>
80006b26:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006b2a:	c0 70       	breq	80006b38 <__sfvwrite_r+0x94>
80006b2c:	50 06       	stdsp	sp[0x0],r6
80006b2e:	0c 93       	mov	r3,r6
80006b30:	0c 91       	mov	r1,r6
80006b32:	50 15       	stdsp	sp[0x4],r5
80006b34:	08 92       	mov	r2,r4
80006b36:	c9 e8       	rjmp	80006c72 <__sfvwrite_r+0x1ce>
80006b38:	06 96       	mov	r6,r3
80006b3a:	08 91       	mov	r1,r4
80006b3c:	c0 48       	rjmp	80006b44 <__sfvwrite_r+0xa0>
80006b3e:	60 03       	ld.w	r3,r0[0x0]
80006b40:	60 16       	ld.w	r6,r0[0x4]
80006b42:	2f 80       	sub	r0,-8
80006b44:	58 06       	cp.w	r6,0
80006b46:	cf c0       	breq	80006b3e <__sfvwrite_r+0x9a>
80006b48:	8e 68       	ld.sh	r8,r7[0xc]
80006b4a:	6e 24       	ld.w	r4,r7[0x8]
80006b4c:	10 99       	mov	r9,r8
80006b4e:	e2 19 02 00 	andl	r9,0x200,COH
80006b52:	c5 50       	breq	80006bfc <__sfvwrite_r+0x158>
80006b54:	08 36       	cp.w	r6,r4
80006b56:	c4 33       	brcs	80006bdc <__sfvwrite_r+0x138>
80006b58:	10 99       	mov	r9,r8
80006b5a:	e2 19 04 80 	andl	r9,0x480,COH
80006b5e:	c3 f0       	breq	80006bdc <__sfvwrite_r+0x138>
80006b60:	6e 4b       	ld.w	r11,r7[0x10]
80006b62:	6e 09       	ld.w	r9,r7[0x0]
80006b64:	16 19       	sub	r9,r11
80006b66:	50 09       	stdsp	sp[0x0],r9
80006b68:	6e 59       	ld.w	r9,r7[0x14]
80006b6a:	10 9c       	mov	r12,r8
80006b6c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006b70:	30 28       	mov	r8,2
80006b72:	f4 08 0c 08 	divs	r8,r10,r8
80006b76:	fa e9 00 04 	st.d	sp[4],r8
80006b7a:	10 94       	mov	r4,r8
80006b7c:	40 09       	lddsp	r9,sp[0x0]
80006b7e:	e2 1c 04 00 	andl	r12,0x400,COH
80006b82:	2f f9       	sub	r9,-1
80006b84:	0c 09       	add	r9,r6
80006b86:	12 38       	cp.w	r8,r9
80006b88:	f2 04 17 30 	movlo	r4,r9
80006b8c:	58 0c       	cp.w	r12,0
80006b8e:	c1 00       	breq	80006bae <__sfvwrite_r+0x10a>
80006b90:	08 9b       	mov	r11,r4
80006b92:	0a 9c       	mov	r12,r5
80006b94:	c6 8d       	rcall	80006e64 <_malloc_r>
80006b96:	18 92       	mov	r2,r12
80006b98:	c1 40       	breq	80006bc0 <__sfvwrite_r+0x11c>
80006b9a:	40 0a       	lddsp	r10,sp[0x0]
80006b9c:	6e 4b       	ld.w	r11,r7[0x10]
80006b9e:	fe b0 e4 29 	rcall	800033f0 <memcpy>
80006ba2:	8e 68       	ld.sh	r8,r7[0xc]
80006ba4:	e0 18 fb 7f 	andl	r8,0xfb7f
80006ba8:	a7 b8       	sbr	r8,0x7
80006baa:	ae 68       	st.h	r7[0xc],r8
80006bac:	c0 d8       	rjmp	80006bc6 <__sfvwrite_r+0x122>
80006bae:	08 9a       	mov	r10,r4
80006bb0:	0a 9c       	mov	r12,r5
80006bb2:	e0 a0 06 8f 	rcall	800078d0 <_realloc_r>
80006bb6:	18 92       	mov	r2,r12
80006bb8:	c0 71       	brne	80006bc6 <__sfvwrite_r+0x122>
80006bba:	6e 4b       	ld.w	r11,r7[0x10]
80006bbc:	0a 9c       	mov	r12,r5
80006bbe:	ca de       	rcall	80006918 <_free_r>
80006bc0:	30 c8       	mov	r8,12
80006bc2:	8b 38       	st.w	r5[0xc],r8
80006bc4:	cb 78       	rjmp	80006d32 <__sfvwrite_r+0x28e>
80006bc6:	40 0a       	lddsp	r10,sp[0x0]
80006bc8:	40 09       	lddsp	r9,sp[0x0]
80006bca:	e8 0a 01 0a 	sub	r10,r4,r10
80006bce:	e4 09 00 08 	add	r8,r2,r9
80006bd2:	8f 54       	st.w	r7[0x14],r4
80006bd4:	8f 2a       	st.w	r7[0x8],r10
80006bd6:	8f 08       	st.w	r7[0x0],r8
80006bd8:	8f 42       	st.w	r7[0x10],r2
80006bda:	0c 94       	mov	r4,r6
80006bdc:	08 36       	cp.w	r6,r4
80006bde:	ec 04 17 30 	movlo	r4,r6
80006be2:	06 9b       	mov	r11,r3
80006be4:	08 9a       	mov	r10,r4
80006be6:	6e 0c       	ld.w	r12,r7[0x0]
80006be8:	e0 a0 03 61 	rcall	800072aa <memmove>
80006bec:	6e 08       	ld.w	r8,r7[0x0]
80006bee:	08 08       	add	r8,r4
80006bf0:	8f 08       	st.w	r7[0x0],r8
80006bf2:	6e 28       	ld.w	r8,r7[0x8]
80006bf4:	08 18       	sub	r8,r4
80006bf6:	0c 94       	mov	r4,r6
80006bf8:	8f 28       	st.w	r7[0x8],r8
80006bfa:	c3 08       	rjmp	80006c5a <__sfvwrite_r+0x1b6>
80006bfc:	08 36       	cp.w	r6,r4
80006bfe:	5f ba       	srhi	r10
80006c00:	6e 0c       	ld.w	r12,r7[0x0]
80006c02:	6e 48       	ld.w	r8,r7[0x10]
80006c04:	10 3c       	cp.w	r12,r8
80006c06:	5f b8       	srhi	r8
80006c08:	f5 e8 00 08 	and	r8,r10,r8
80006c0c:	f2 08 18 00 	cp.b	r8,r9
80006c10:	c0 e0       	breq	80006c2c <__sfvwrite_r+0x188>
80006c12:	06 9b       	mov	r11,r3
80006c14:	08 9a       	mov	r10,r4
80006c16:	e0 a0 03 4a 	rcall	800072aa <memmove>
80006c1a:	6e 08       	ld.w	r8,r7[0x0]
80006c1c:	08 08       	add	r8,r4
80006c1e:	0e 9b       	mov	r11,r7
80006c20:	8f 08       	st.w	r7[0x0],r8
80006c22:	0a 9c       	mov	r12,r5
80006c24:	fe b0 fd 08 	rcall	80006634 <_fflush_r>
80006c28:	c1 90       	breq	80006c5a <__sfvwrite_r+0x1b6>
80006c2a:	c8 48       	rjmp	80006d32 <__sfvwrite_r+0x28e>
80006c2c:	6e 59       	ld.w	r9,r7[0x14]
80006c2e:	12 36       	cp.w	r6,r9
80006c30:	c0 a3       	brcs	80006c44 <__sfvwrite_r+0x1a0>
80006c32:	6e a8       	ld.w	r8,r7[0x28]
80006c34:	06 9a       	mov	r10,r3
80006c36:	6e 8b       	ld.w	r11,r7[0x20]
80006c38:	0a 9c       	mov	r12,r5
80006c3a:	5d 18       	icall	r8
80006c3c:	18 94       	mov	r4,r12
80006c3e:	e0 89 00 0e 	brgt	80006c5a <__sfvwrite_r+0x1b6>
80006c42:	c7 88       	rjmp	80006d32 <__sfvwrite_r+0x28e>
80006c44:	0c 9a       	mov	r10,r6
80006c46:	06 9b       	mov	r11,r3
80006c48:	e0 a0 03 31 	rcall	800072aa <memmove>
80006c4c:	6e 08       	ld.w	r8,r7[0x0]
80006c4e:	0c 08       	add	r8,r6
80006c50:	0c 94       	mov	r4,r6
80006c52:	8f 08       	st.w	r7[0x0],r8
80006c54:	6e 28       	ld.w	r8,r7[0x8]
80006c56:	0c 18       	sub	r8,r6
80006c58:	8f 28       	st.w	r7[0x8],r8
80006c5a:	62 28       	ld.w	r8,r1[0x8]
80006c5c:	08 18       	sub	r8,r4
80006c5e:	83 28       	st.w	r1[0x8],r8
80006c60:	c6 e0       	breq	80006d3c <__sfvwrite_r+0x298>
80006c62:	08 16       	sub	r6,r4
80006c64:	08 03       	add	r3,r4
80006c66:	c6 fb       	rjmp	80006b44 <__sfvwrite_r+0xa0>
80006c68:	60 03       	ld.w	r3,r0[0x0]
80006c6a:	60 11       	ld.w	r1,r0[0x4]
80006c6c:	30 08       	mov	r8,0
80006c6e:	2f 80       	sub	r0,-8
80006c70:	50 08       	stdsp	sp[0x0],r8
80006c72:	58 01       	cp.w	r1,0
80006c74:	cf a0       	breq	80006c68 <__sfvwrite_r+0x1c4>
80006c76:	40 0a       	lddsp	r10,sp[0x0]
80006c78:	58 0a       	cp.w	r10,0
80006c7a:	c1 51       	brne	80006ca4 <__sfvwrite_r+0x200>
80006c7c:	e2 c6 ff ff 	sub	r6,r1,-1
80006c80:	02 9a       	mov	r10,r1
80006c82:	30 ab       	mov	r11,10
80006c84:	06 9c       	mov	r12,r3
80006c86:	e0 a0 03 07 	rcall	80007294 <memchr>
80006c8a:	f8 c8 ff ff 	sub	r8,r12,-1
80006c8e:	58 0c       	cp.w	r12,0
80006c90:	f1 d3 e1 16 	subne	r6,r8,r3
80006c94:	f9 b9 01 01 	movne	r9,1
80006c98:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006c9c:	f9 b8 00 01 	moveq	r8,1
80006ca0:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006ca4:	02 36       	cp.w	r6,r1
80006ca6:	ec 04 17 80 	movls	r4,r6
80006caa:	e2 04 17 b0 	movhi	r4,r1
80006cae:	6e 59       	ld.w	r9,r7[0x14]
80006cb0:	6e 25       	ld.w	r5,r7[0x8]
80006cb2:	f2 05 00 05 	add	r5,r9,r5
80006cb6:	0a 34       	cp.w	r4,r5
80006cb8:	5f 9a       	srgt	r10
80006cba:	6e 0c       	ld.w	r12,r7[0x0]
80006cbc:	6e 48       	ld.w	r8,r7[0x10]
80006cbe:	10 3c       	cp.w	r12,r8
80006cc0:	5f b8       	srhi	r8
80006cc2:	f5 e8 00 08 	and	r8,r10,r8
80006cc6:	30 0a       	mov	r10,0
80006cc8:	f4 08 18 00 	cp.b	r8,r10
80006ccc:	c0 e0       	breq	80006ce8 <__sfvwrite_r+0x244>
80006cce:	06 9b       	mov	r11,r3
80006cd0:	0a 9a       	mov	r10,r5
80006cd2:	e0 a0 02 ec 	rcall	800072aa <memmove>
80006cd6:	6e 08       	ld.w	r8,r7[0x0]
80006cd8:	0a 08       	add	r8,r5
80006cda:	0e 9b       	mov	r11,r7
80006cdc:	8f 08       	st.w	r7[0x0],r8
80006cde:	40 1c       	lddsp	r12,sp[0x4]
80006ce0:	fe b0 fc aa 	rcall	80006634 <_fflush_r>
80006ce4:	c1 80       	breq	80006d14 <__sfvwrite_r+0x270>
80006ce6:	c2 68       	rjmp	80006d32 <__sfvwrite_r+0x28e>
80006ce8:	12 34       	cp.w	r4,r9
80006cea:	c0 a5       	brlt	80006cfe <__sfvwrite_r+0x25a>
80006cec:	6e a8       	ld.w	r8,r7[0x28]
80006cee:	06 9a       	mov	r10,r3
80006cf0:	6e 8b       	ld.w	r11,r7[0x20]
80006cf2:	40 1c       	lddsp	r12,sp[0x4]
80006cf4:	5d 18       	icall	r8
80006cf6:	18 95       	mov	r5,r12
80006cf8:	e0 89 00 0e 	brgt	80006d14 <__sfvwrite_r+0x270>
80006cfc:	c1 b8       	rjmp	80006d32 <__sfvwrite_r+0x28e>
80006cfe:	08 9a       	mov	r10,r4
80006d00:	06 9b       	mov	r11,r3
80006d02:	e0 a0 02 d4 	rcall	800072aa <memmove>
80006d06:	6e 08       	ld.w	r8,r7[0x0]
80006d08:	08 08       	add	r8,r4
80006d0a:	08 95       	mov	r5,r4
80006d0c:	8f 08       	st.w	r7[0x0],r8
80006d0e:	6e 28       	ld.w	r8,r7[0x8]
80006d10:	08 18       	sub	r8,r4
80006d12:	8f 28       	st.w	r7[0x8],r8
80006d14:	0a 16       	sub	r6,r5
80006d16:	c0 71       	brne	80006d24 <__sfvwrite_r+0x280>
80006d18:	0e 9b       	mov	r11,r7
80006d1a:	40 1c       	lddsp	r12,sp[0x4]
80006d1c:	fe b0 fc 8c 	rcall	80006634 <_fflush_r>
80006d20:	c0 91       	brne	80006d32 <__sfvwrite_r+0x28e>
80006d22:	50 06       	stdsp	sp[0x0],r6
80006d24:	64 28       	ld.w	r8,r2[0x8]
80006d26:	0a 18       	sub	r8,r5
80006d28:	85 28       	st.w	r2[0x8],r8
80006d2a:	c0 90       	breq	80006d3c <__sfvwrite_r+0x298>
80006d2c:	0a 11       	sub	r1,r5
80006d2e:	0a 03       	add	r3,r5
80006d30:	ca 1b       	rjmp	80006c72 <__sfvwrite_r+0x1ce>
80006d32:	8e 68       	ld.sh	r8,r7[0xc]
80006d34:	a7 a8       	sbr	r8,0x6
80006d36:	ae 68       	st.h	r7[0xc],r8
80006d38:	3f fc       	mov	r12,-1
80006d3a:	c0 28       	rjmp	80006d3e <__sfvwrite_r+0x29a>
80006d3c:	30 0c       	mov	r12,0
80006d3e:	2f dd       	sub	sp,-12
80006d40:	d8 32       	popm	r0-r7,pc
80006d42:	d7 03       	nop

80006d44 <_fwalk>:
80006d44:	d4 31       	pushm	r0-r7,lr
80006d46:	30 05       	mov	r5,0
80006d48:	16 91       	mov	r1,r11
80006d4a:	f8 c7 ff 28 	sub	r7,r12,-216
80006d4e:	0a 92       	mov	r2,r5
80006d50:	fe b0 fc f8 	rcall	80006740 <__sfp_lock_acquire>
80006d54:	3f f3       	mov	r3,-1
80006d56:	c1 68       	rjmp	80006d82 <_fwalk+0x3e>
80006d58:	6e 26       	ld.w	r6,r7[0x8]
80006d5a:	6e 14       	ld.w	r4,r7[0x4]
80006d5c:	2f 46       	sub	r6,-12
80006d5e:	c0 c8       	rjmp	80006d76 <_fwalk+0x32>
80006d60:	8c 08       	ld.sh	r8,r6[0x0]
80006d62:	e4 08 19 00 	cp.h	r8,r2
80006d66:	c0 70       	breq	80006d74 <_fwalk+0x30>
80006d68:	8c 18       	ld.sh	r8,r6[0x2]
80006d6a:	e6 08 19 00 	cp.h	r8,r3
80006d6e:	c0 30       	breq	80006d74 <_fwalk+0x30>
80006d70:	5d 11       	icall	r1
80006d72:	18 45       	or	r5,r12
80006d74:	2a 46       	sub	r6,-92
80006d76:	20 14       	sub	r4,1
80006d78:	ec cc 00 0c 	sub	r12,r6,12
80006d7c:	58 04       	cp.w	r4,0
80006d7e:	cf 14       	brge	80006d60 <_fwalk+0x1c>
80006d80:	6e 07       	ld.w	r7,r7[0x0]
80006d82:	58 07       	cp.w	r7,0
80006d84:	ce a1       	brne	80006d58 <_fwalk+0x14>
80006d86:	fe b0 fc de 	rcall	80006742 <__sfp_lock_release>
80006d8a:	0a 9c       	mov	r12,r5
80006d8c:	d8 32       	popm	r0-r7,pc
80006d8e:	d7 03       	nop

80006d90 <_localeconv_r>:
80006d90:	fe cc be 6c 	sub	r12,pc,-16788
80006d94:	5e fc       	retal	r12
80006d96:	d7 03       	nop

80006d98 <__smakebuf_r>:
80006d98:	d4 21       	pushm	r4-r7,lr
80006d9a:	20 fd       	sub	sp,60
80006d9c:	96 68       	ld.sh	r8,r11[0xc]
80006d9e:	16 97       	mov	r7,r11
80006da0:	18 96       	mov	r6,r12
80006da2:	e2 18 00 02 	andl	r8,0x2,COH
80006da6:	c3 c1       	brne	80006e1e <__smakebuf_r+0x86>
80006da8:	96 7b       	ld.sh	r11,r11[0xe]
80006daa:	f0 0b 19 00 	cp.h	r11,r8
80006dae:	c0 55       	brlt	80006db8 <__smakebuf_r+0x20>
80006db0:	1a 9a       	mov	r10,sp
80006db2:	e0 a0 08 9d 	rcall	80007eec <_fstat_r>
80006db6:	c0 f4       	brge	80006dd4 <__smakebuf_r+0x3c>
80006db8:	8e 65       	ld.sh	r5,r7[0xc]
80006dba:	0a 98       	mov	r8,r5
80006dbc:	ab b8       	sbr	r8,0xb
80006dbe:	e2 15 00 80 	andl	r5,0x80,COH
80006dc2:	ae 68       	st.h	r7[0xc],r8
80006dc4:	30 04       	mov	r4,0
80006dc6:	e0 68 04 00 	mov	r8,1024
80006dca:	f9 b5 01 40 	movne	r5,64
80006dce:	f0 05 17 00 	moveq	r5,r8
80006dd2:	c1 c8       	rjmp	80006e0a <__smakebuf_r+0x72>
80006dd4:	40 18       	lddsp	r8,sp[0x4]
80006dd6:	e2 18 f0 00 	andl	r8,0xf000,COH
80006dda:	e0 48 20 00 	cp.w	r8,8192
80006dde:	5f 04       	sreq	r4
80006de0:	e0 48 80 00 	cp.w	r8,32768
80006de4:	c0 e1       	brne	80006e00 <__smakebuf_r+0x68>
80006de6:	6e b9       	ld.w	r9,r7[0x2c]
80006de8:	fe c8 f1 e8 	sub	r8,pc,-3608
80006dec:	10 39       	cp.w	r9,r8
80006dee:	c0 91       	brne	80006e00 <__smakebuf_r+0x68>
80006df0:	8e 68       	ld.sh	r8,r7[0xc]
80006df2:	e0 65 04 00 	mov	r5,1024
80006df6:	ab a8       	sbr	r8,0xa
80006df8:	ef 45 00 50 	st.w	r7[80],r5
80006dfc:	ae 68       	st.h	r7[0xc],r8
80006dfe:	c0 68       	rjmp	80006e0a <__smakebuf_r+0x72>
80006e00:	8e 68       	ld.sh	r8,r7[0xc]
80006e02:	e0 65 04 00 	mov	r5,1024
80006e06:	ab b8       	sbr	r8,0xb
80006e08:	ae 68       	st.h	r7[0xc],r8
80006e0a:	0a 9b       	mov	r11,r5
80006e0c:	0c 9c       	mov	r12,r6
80006e0e:	c2 bc       	rcall	80006e64 <_malloc_r>
80006e10:	8e 68       	ld.sh	r8,r7[0xc]
80006e12:	c0 d1       	brne	80006e2c <__smakebuf_r+0x94>
80006e14:	ed b8 00 09 	bld	r8,0x9
80006e18:	c1 b0       	breq	80006e4e <__smakebuf_r+0xb6>
80006e1a:	a1 b8       	sbr	r8,0x1
80006e1c:	ae 68       	st.h	r7[0xc],r8
80006e1e:	ee c8 ff b9 	sub	r8,r7,-71
80006e22:	8f 48       	st.w	r7[0x10],r8
80006e24:	8f 08       	st.w	r7[0x0],r8
80006e26:	30 18       	mov	r8,1
80006e28:	8f 58       	st.w	r7[0x14],r8
80006e2a:	c1 28       	rjmp	80006e4e <__smakebuf_r+0xb6>
80006e2c:	a7 b8       	sbr	r8,0x7
80006e2e:	8f 4c       	st.w	r7[0x10],r12
80006e30:	ae 68       	st.h	r7[0xc],r8
80006e32:	8f 55       	st.w	r7[0x14],r5
80006e34:	fe c8 06 f0 	sub	r8,pc,1776
80006e38:	8f 0c       	st.w	r7[0x0],r12
80006e3a:	8d a8       	st.w	r6[0x28],r8
80006e3c:	58 04       	cp.w	r4,0
80006e3e:	c0 80       	breq	80006e4e <__smakebuf_r+0xb6>
80006e40:	8e 7c       	ld.sh	r12,r7[0xe]
80006e42:	e0 a0 07 47 	rcall	80007cd0 <isatty>
80006e46:	c0 40       	breq	80006e4e <__smakebuf_r+0xb6>
80006e48:	8e 68       	ld.sh	r8,r7[0xc]
80006e4a:	a1 a8       	sbr	r8,0x0
80006e4c:	ae 68       	st.h	r7[0xc],r8
80006e4e:	2f 1d       	sub	sp,-60
80006e50:	d8 22       	popm	r4-r7,pc
80006e52:	d7 03       	nop

80006e54 <malloc>:
80006e54:	d4 01       	pushm	lr
80006e56:	e0 68 00 f8 	mov	r8,248
80006e5a:	18 9b       	mov	r11,r12
80006e5c:	70 0c       	ld.w	r12,r8[0x0]
80006e5e:	c0 3c       	rcall	80006e64 <_malloc_r>
80006e60:	d8 02       	popm	pc
80006e62:	d7 03       	nop

80006e64 <_malloc_r>:
80006e64:	d4 31       	pushm	r0-r7,lr
80006e66:	f6 c8 ff f5 	sub	r8,r11,-11
80006e6a:	18 95       	mov	r5,r12
80006e6c:	10 97       	mov	r7,r8
80006e6e:	e0 17 ff f8 	andl	r7,0xfff8
80006e72:	59 68       	cp.w	r8,22
80006e74:	f9 b7 08 10 	movls	r7,16
80006e78:	16 37       	cp.w	r7,r11
80006e7a:	5f 38       	srlo	r8
80006e7c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006e80:	c0 50       	breq	80006e8a <_malloc_r+0x26>
80006e82:	30 c8       	mov	r8,12
80006e84:	99 38       	st.w	r12[0xc],r8
80006e86:	e0 8f 01 f7 	bral	80007274 <_malloc_r+0x410>
80006e8a:	e0 a0 02 36 	rcall	800072f6 <__malloc_lock>
80006e8e:	e0 47 01 f7 	cp.w	r7,503
80006e92:	e0 8b 00 1d 	brhi	80006ecc <_malloc_r+0x68>
80006e96:	ee 03 16 03 	lsr	r3,r7,0x3
80006e9a:	e0 68 00 fc 	mov	r8,252
80006e9e:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006ea2:	70 36       	ld.w	r6,r8[0xc]
80006ea4:	10 36       	cp.w	r6,r8
80006ea6:	c0 61       	brne	80006eb2 <_malloc_r+0x4e>
80006ea8:	ec c8 ff f8 	sub	r8,r6,-8
80006eac:	70 36       	ld.w	r6,r8[0xc]
80006eae:	10 36       	cp.w	r6,r8
80006eb0:	c0 c0       	breq	80006ec8 <_malloc_r+0x64>
80006eb2:	6c 18       	ld.w	r8,r6[0x4]
80006eb4:	e0 18 ff fc 	andl	r8,0xfffc
80006eb8:	6c 3a       	ld.w	r10,r6[0xc]
80006eba:	ec 08 00 09 	add	r9,r6,r8
80006ebe:	0a 9c       	mov	r12,r5
80006ec0:	6c 28       	ld.w	r8,r6[0x8]
80006ec2:	95 28       	st.w	r10[0x8],r8
80006ec4:	91 3a       	st.w	r8[0xc],r10
80006ec6:	c4 78       	rjmp	80006f54 <_malloc_r+0xf0>
80006ec8:	2f e3       	sub	r3,-2
80006eca:	c4 d8       	rjmp	80006f64 <_malloc_r+0x100>
80006ecc:	ee 03 16 09 	lsr	r3,r7,0x9
80006ed0:	c0 41       	brne	80006ed8 <_malloc_r+0x74>
80006ed2:	ee 03 16 03 	lsr	r3,r7,0x3
80006ed6:	c2 68       	rjmp	80006f22 <_malloc_r+0xbe>
80006ed8:	58 43       	cp.w	r3,4
80006eda:	e0 8b 00 06 	brhi	80006ee6 <_malloc_r+0x82>
80006ede:	ee 03 16 06 	lsr	r3,r7,0x6
80006ee2:	2c 83       	sub	r3,-56
80006ee4:	c1 f8       	rjmp	80006f22 <_malloc_r+0xbe>
80006ee6:	59 43       	cp.w	r3,20
80006ee8:	e0 8b 00 04 	brhi	80006ef0 <_malloc_r+0x8c>
80006eec:	2a 53       	sub	r3,-91
80006eee:	c1 a8       	rjmp	80006f22 <_malloc_r+0xbe>
80006ef0:	e0 43 00 54 	cp.w	r3,84
80006ef4:	e0 8b 00 06 	brhi	80006f00 <_malloc_r+0x9c>
80006ef8:	ee 03 16 0c 	lsr	r3,r7,0xc
80006efc:	29 23       	sub	r3,-110
80006efe:	c1 28       	rjmp	80006f22 <_malloc_r+0xbe>
80006f00:	e0 43 01 54 	cp.w	r3,340
80006f04:	e0 8b 00 06 	brhi	80006f10 <_malloc_r+0xac>
80006f08:	ee 03 16 0f 	lsr	r3,r7,0xf
80006f0c:	28 93       	sub	r3,-119
80006f0e:	c0 a8       	rjmp	80006f22 <_malloc_r+0xbe>
80006f10:	e0 43 05 54 	cp.w	r3,1364
80006f14:	e0 88 00 04 	brls	80006f1c <_malloc_r+0xb8>
80006f18:	37 e3       	mov	r3,126
80006f1a:	c0 48       	rjmp	80006f22 <_malloc_r+0xbe>
80006f1c:	ee 03 16 12 	lsr	r3,r7,0x12
80006f20:	28 43       	sub	r3,-124
80006f22:	e0 6a 00 fc 	mov	r10,252
80006f26:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006f2a:	74 36       	ld.w	r6,r10[0xc]
80006f2c:	c1 98       	rjmp	80006f5e <_malloc_r+0xfa>
80006f2e:	6c 19       	ld.w	r9,r6[0x4]
80006f30:	e0 19 ff fc 	andl	r9,0xfffc
80006f34:	f2 07 01 0b 	sub	r11,r9,r7
80006f38:	58 fb       	cp.w	r11,15
80006f3a:	e0 8a 00 04 	brle	80006f42 <_malloc_r+0xde>
80006f3e:	20 13       	sub	r3,1
80006f40:	c1 18       	rjmp	80006f62 <_malloc_r+0xfe>
80006f42:	6c 38       	ld.w	r8,r6[0xc]
80006f44:	58 0b       	cp.w	r11,0
80006f46:	c0 b5       	brlt	80006f5c <_malloc_r+0xf8>
80006f48:	6c 2a       	ld.w	r10,r6[0x8]
80006f4a:	ec 09 00 09 	add	r9,r6,r9
80006f4e:	0a 9c       	mov	r12,r5
80006f50:	91 2a       	st.w	r8[0x8],r10
80006f52:	95 38       	st.w	r10[0xc],r8
80006f54:	72 18       	ld.w	r8,r9[0x4]
80006f56:	a1 a8       	sbr	r8,0x0
80006f58:	93 18       	st.w	r9[0x4],r8
80006f5a:	cb c8       	rjmp	800070d2 <_malloc_r+0x26e>
80006f5c:	10 96       	mov	r6,r8
80006f5e:	14 36       	cp.w	r6,r10
80006f60:	ce 71       	brne	80006f2e <_malloc_r+0xca>
80006f62:	2f f3       	sub	r3,-1
80006f64:	e0 6a 00 fc 	mov	r10,252
80006f68:	f4 cc ff f8 	sub	r12,r10,-8
80006f6c:	78 26       	ld.w	r6,r12[0x8]
80006f6e:	18 36       	cp.w	r6,r12
80006f70:	c6 c0       	breq	80007048 <_malloc_r+0x1e4>
80006f72:	6c 19       	ld.w	r9,r6[0x4]
80006f74:	e0 19 ff fc 	andl	r9,0xfffc
80006f78:	f2 07 01 08 	sub	r8,r9,r7
80006f7c:	58 f8       	cp.w	r8,15
80006f7e:	e0 89 00 8f 	brgt	8000709c <_malloc_r+0x238>
80006f82:	99 3c       	st.w	r12[0xc],r12
80006f84:	99 2c       	st.w	r12[0x8],r12
80006f86:	58 08       	cp.w	r8,0
80006f88:	c0 55       	brlt	80006f92 <_malloc_r+0x12e>
80006f8a:	ec 09 00 09 	add	r9,r6,r9
80006f8e:	0a 9c       	mov	r12,r5
80006f90:	ce 2b       	rjmp	80006f54 <_malloc_r+0xf0>
80006f92:	e0 49 01 ff 	cp.w	r9,511
80006f96:	e0 8b 00 13 	brhi	80006fbc <_malloc_r+0x158>
80006f9a:	a3 99       	lsr	r9,0x3
80006f9c:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006fa0:	70 2b       	ld.w	r11,r8[0x8]
80006fa2:	8d 38       	st.w	r6[0xc],r8
80006fa4:	8d 2b       	st.w	r6[0x8],r11
80006fa6:	97 36       	st.w	r11[0xc],r6
80006fa8:	91 26       	st.w	r8[0x8],r6
80006faa:	a3 49       	asr	r9,0x2
80006fac:	74 18       	ld.w	r8,r10[0x4]
80006fae:	30 1b       	mov	r11,1
80006fb0:	f6 09 09 49 	lsl	r9,r11,r9
80006fb4:	f1 e9 10 09 	or	r9,r8,r9
80006fb8:	95 19       	st.w	r10[0x4],r9
80006fba:	c4 78       	rjmp	80007048 <_malloc_r+0x1e4>
80006fbc:	f2 0a 16 09 	lsr	r10,r9,0x9
80006fc0:	58 4a       	cp.w	r10,4
80006fc2:	e0 8b 00 07 	brhi	80006fd0 <_malloc_r+0x16c>
80006fc6:	f2 0a 16 06 	lsr	r10,r9,0x6
80006fca:	2c 8a       	sub	r10,-56
80006fcc:	c2 08       	rjmp	8000700c <_malloc_r+0x1a8>
80006fce:	d7 03       	nop
80006fd0:	59 4a       	cp.w	r10,20
80006fd2:	e0 8b 00 04 	brhi	80006fda <_malloc_r+0x176>
80006fd6:	2a 5a       	sub	r10,-91
80006fd8:	c1 a8       	rjmp	8000700c <_malloc_r+0x1a8>
80006fda:	e0 4a 00 54 	cp.w	r10,84
80006fde:	e0 8b 00 06 	brhi	80006fea <_malloc_r+0x186>
80006fe2:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006fe6:	29 2a       	sub	r10,-110
80006fe8:	c1 28       	rjmp	8000700c <_malloc_r+0x1a8>
80006fea:	e0 4a 01 54 	cp.w	r10,340
80006fee:	e0 8b 00 06 	brhi	80006ffa <_malloc_r+0x196>
80006ff2:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006ff6:	28 9a       	sub	r10,-119
80006ff8:	c0 a8       	rjmp	8000700c <_malloc_r+0x1a8>
80006ffa:	e0 4a 05 54 	cp.w	r10,1364
80006ffe:	e0 88 00 04 	brls	80007006 <_malloc_r+0x1a2>
80007002:	37 ea       	mov	r10,126
80007004:	c0 48       	rjmp	8000700c <_malloc_r+0x1a8>
80007006:	f2 0a 16 12 	lsr	r10,r9,0x12
8000700a:	28 4a       	sub	r10,-124
8000700c:	e0 6b 00 fc 	mov	r11,252
80007010:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007014:	68 28       	ld.w	r8,r4[0x8]
80007016:	08 38       	cp.w	r8,r4
80007018:	c0 e1       	brne	80007034 <_malloc_r+0x1d0>
8000701a:	76 19       	ld.w	r9,r11[0x4]
8000701c:	a3 4a       	asr	r10,0x2
8000701e:	30 1e       	mov	lr,1
80007020:	fc 0a 09 4a 	lsl	r10,lr,r10
80007024:	f3 ea 10 0a 	or	r10,r9,r10
80007028:	10 99       	mov	r9,r8
8000702a:	97 1a       	st.w	r11[0x4],r10
8000702c:	c0 a8       	rjmp	80007040 <_malloc_r+0x1dc>
8000702e:	70 28       	ld.w	r8,r8[0x8]
80007030:	08 38       	cp.w	r8,r4
80007032:	c0 60       	breq	8000703e <_malloc_r+0x1da>
80007034:	70 1a       	ld.w	r10,r8[0x4]
80007036:	e0 1a ff fc 	andl	r10,0xfffc
8000703a:	14 39       	cp.w	r9,r10
8000703c:	cf 93       	brcs	8000702e <_malloc_r+0x1ca>
8000703e:	70 39       	ld.w	r9,r8[0xc]
80007040:	8d 39       	st.w	r6[0xc],r9
80007042:	8d 28       	st.w	r6[0x8],r8
80007044:	91 36       	st.w	r8[0xc],r6
80007046:	93 26       	st.w	r9[0x8],r6
80007048:	e6 08 14 02 	asr	r8,r3,0x2
8000704c:	30 1b       	mov	r11,1
8000704e:	e0 64 00 fc 	mov	r4,252
80007052:	f6 08 09 4b 	lsl	r11,r11,r8
80007056:	68 18       	ld.w	r8,r4[0x4]
80007058:	10 3b       	cp.w	r11,r8
8000705a:	e0 8b 00 69 	brhi	8000712c <_malloc_r+0x2c8>
8000705e:	f7 e8 00 09 	and	r9,r11,r8
80007062:	c0 b1       	brne	80007078 <_malloc_r+0x214>
80007064:	e0 13 ff fc 	andl	r3,0xfffc
80007068:	a1 7b       	lsl	r11,0x1
8000706a:	2f c3       	sub	r3,-4
8000706c:	c0 38       	rjmp	80007072 <_malloc_r+0x20e>
8000706e:	2f c3       	sub	r3,-4
80007070:	a1 7b       	lsl	r11,0x1
80007072:	f7 e8 00 09 	and	r9,r11,r8
80007076:	cf c0       	breq	8000706e <_malloc_r+0x20a>
80007078:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000707c:	06 92       	mov	r2,r3
8000707e:	1c 91       	mov	r1,lr
80007080:	62 36       	ld.w	r6,r1[0xc]
80007082:	c2 d8       	rjmp	800070dc <_malloc_r+0x278>
80007084:	6c 1a       	ld.w	r10,r6[0x4]
80007086:	e0 1a ff fc 	andl	r10,0xfffc
8000708a:	f4 07 01 08 	sub	r8,r10,r7
8000708e:	58 f8       	cp.w	r8,15
80007090:	e0 8a 00 15 	brle	800070ba <_malloc_r+0x256>
80007094:	6c 3a       	ld.w	r10,r6[0xc]
80007096:	6c 29       	ld.w	r9,r6[0x8]
80007098:	95 29       	st.w	r10[0x8],r9
8000709a:	93 3a       	st.w	r9[0xc],r10
8000709c:	0e 99       	mov	r9,r7
8000709e:	ec 07 00 07 	add	r7,r6,r7
800070a2:	a1 a9       	sbr	r9,0x0
800070a4:	99 37       	st.w	r12[0xc],r7
800070a6:	99 27       	st.w	r12[0x8],r7
800070a8:	8d 19       	st.w	r6[0x4],r9
800070aa:	ee 08 09 08 	st.w	r7[r8],r8
800070ae:	8f 2c       	st.w	r7[0x8],r12
800070b0:	8f 3c       	st.w	r7[0xc],r12
800070b2:	a1 a8       	sbr	r8,0x0
800070b4:	0a 9c       	mov	r12,r5
800070b6:	8f 18       	st.w	r7[0x4],r8
800070b8:	c0 d8       	rjmp	800070d2 <_malloc_r+0x26e>
800070ba:	6c 39       	ld.w	r9,r6[0xc]
800070bc:	58 08       	cp.w	r8,0
800070be:	c0 e5       	brlt	800070da <_malloc_r+0x276>
800070c0:	ec 0a 00 0a 	add	r10,r6,r10
800070c4:	74 18       	ld.w	r8,r10[0x4]
800070c6:	a1 a8       	sbr	r8,0x0
800070c8:	0a 9c       	mov	r12,r5
800070ca:	95 18       	st.w	r10[0x4],r8
800070cc:	6c 28       	ld.w	r8,r6[0x8]
800070ce:	93 28       	st.w	r9[0x8],r8
800070d0:	91 39       	st.w	r8[0xc],r9
800070d2:	c1 3d       	rcall	800072f8 <__malloc_unlock>
800070d4:	ec cc ff f8 	sub	r12,r6,-8
800070d8:	d8 32       	popm	r0-r7,pc
800070da:	12 96       	mov	r6,r9
800070dc:	02 36       	cp.w	r6,r1
800070de:	cd 31       	brne	80007084 <_malloc_r+0x220>
800070e0:	2f f2       	sub	r2,-1
800070e2:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800070e6:	c0 30       	breq	800070ec <_malloc_r+0x288>
800070e8:	2f 81       	sub	r1,-8
800070ea:	cc bb       	rjmp	80007080 <_malloc_r+0x21c>
800070ec:	1c 98       	mov	r8,lr
800070ee:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800070f2:	c0 81       	brne	80007102 <_malloc_r+0x29e>
800070f4:	68 19       	ld.w	r9,r4[0x4]
800070f6:	f6 08 11 ff 	rsub	r8,r11,-1
800070fa:	f3 e8 00 08 	and	r8,r9,r8
800070fe:	89 18       	st.w	r4[0x4],r8
80007100:	c0 78       	rjmp	8000710e <_malloc_r+0x2aa>
80007102:	f0 c9 00 08 	sub	r9,r8,8
80007106:	20 13       	sub	r3,1
80007108:	70 08       	ld.w	r8,r8[0x0]
8000710a:	12 38       	cp.w	r8,r9
8000710c:	cf 10       	breq	800070ee <_malloc_r+0x28a>
8000710e:	a1 7b       	lsl	r11,0x1
80007110:	68 18       	ld.w	r8,r4[0x4]
80007112:	10 3b       	cp.w	r11,r8
80007114:	e0 8b 00 0c 	brhi	8000712c <_malloc_r+0x2c8>
80007118:	58 0b       	cp.w	r11,0
8000711a:	c0 90       	breq	8000712c <_malloc_r+0x2c8>
8000711c:	04 93       	mov	r3,r2
8000711e:	c0 38       	rjmp	80007124 <_malloc_r+0x2c0>
80007120:	2f c3       	sub	r3,-4
80007122:	a1 7b       	lsl	r11,0x1
80007124:	f7 e8 00 09 	and	r9,r11,r8
80007128:	ca 81       	brne	80007078 <_malloc_r+0x214>
8000712a:	cf bb       	rjmp	80007120 <_malloc_r+0x2bc>
8000712c:	68 23       	ld.w	r3,r4[0x8]
8000712e:	66 12       	ld.w	r2,r3[0x4]
80007130:	e0 12 ff fc 	andl	r2,0xfffc
80007134:	0e 32       	cp.w	r2,r7
80007136:	5f 39       	srlo	r9
80007138:	e4 07 01 08 	sub	r8,r2,r7
8000713c:	58 f8       	cp.w	r8,15
8000713e:	5f aa       	srle	r10
80007140:	f5 e9 10 09 	or	r9,r10,r9
80007144:	e0 80 00 9a 	breq	80007278 <_malloc_r+0x414>
80007148:	e0 68 07 30 	mov	r8,1840
8000714c:	70 01       	ld.w	r1,r8[0x0]
8000714e:	e0 68 05 08 	mov	r8,1288
80007152:	2f 01       	sub	r1,-16
80007154:	70 08       	ld.w	r8,r8[0x0]
80007156:	0e 01       	add	r1,r7
80007158:	5b f8       	cp.w	r8,-1
8000715a:	c0 40       	breq	80007162 <_malloc_r+0x2fe>
8000715c:	28 11       	sub	r1,-127
8000715e:	e0 11 ff 80 	andl	r1,0xff80
80007162:	02 9b       	mov	r11,r1
80007164:	0a 9c       	mov	r12,r5
80007166:	e0 a0 05 39 	rcall	80007bd8 <_sbrk_r>
8000716a:	18 96       	mov	r6,r12
8000716c:	5b fc       	cp.w	r12,-1
8000716e:	c7 50       	breq	80007258 <_malloc_r+0x3f4>
80007170:	e6 02 00 08 	add	r8,r3,r2
80007174:	10 3c       	cp.w	r12,r8
80007176:	c0 32       	brcc	8000717c <_malloc_r+0x318>
80007178:	08 33       	cp.w	r3,r4
8000717a:	c6 f1       	brne	80007258 <_malloc_r+0x3f4>
8000717c:	e0 6a 07 34 	mov	r10,1844
80007180:	74 09       	ld.w	r9,r10[0x0]
80007182:	e2 09 00 09 	add	r9,r1,r9
80007186:	95 09       	st.w	r10[0x0],r9
80007188:	10 36       	cp.w	r6,r8
8000718a:	c0 a1       	brne	8000719e <_malloc_r+0x33a>
8000718c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007190:	c0 71       	brne	8000719e <_malloc_r+0x33a>
80007192:	e2 02 00 02 	add	r2,r1,r2
80007196:	68 28       	ld.w	r8,r4[0x8]
80007198:	a1 a2       	sbr	r2,0x0
8000719a:	91 12       	st.w	r8[0x4],r2
8000719c:	c4 f8       	rjmp	8000723a <_malloc_r+0x3d6>
8000719e:	e0 6a 05 08 	mov	r10,1288
800071a2:	74 0b       	ld.w	r11,r10[0x0]
800071a4:	5b fb       	cp.w	r11,-1
800071a6:	c0 31       	brne	800071ac <_malloc_r+0x348>
800071a8:	95 06       	st.w	r10[0x0],r6
800071aa:	c0 78       	rjmp	800071b8 <_malloc_r+0x354>
800071ac:	ec 09 00 09 	add	r9,r6,r9
800071b0:	e0 6a 07 34 	mov	r10,1844
800071b4:	10 19       	sub	r9,r8
800071b6:	95 09       	st.w	r10[0x0],r9
800071b8:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800071bc:	f0 09 11 08 	rsub	r9,r8,8
800071c0:	58 08       	cp.w	r8,0
800071c2:	f2 08 17 10 	movne	r8,r9
800071c6:	ed d8 e1 06 	addne	r6,r6,r8
800071ca:	28 08       	sub	r8,-128
800071cc:	ec 01 00 01 	add	r1,r6,r1
800071d0:	0a 9c       	mov	r12,r5
800071d2:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800071d6:	f0 01 01 01 	sub	r1,r8,r1
800071da:	02 9b       	mov	r11,r1
800071dc:	e0 a0 04 fe 	rcall	80007bd8 <_sbrk_r>
800071e0:	e0 68 07 34 	mov	r8,1844
800071e4:	5b fc       	cp.w	r12,-1
800071e6:	ec 0c 17 00 	moveq	r12,r6
800071ea:	f9 b1 00 00 	moveq	r1,0
800071ee:	70 09       	ld.w	r9,r8[0x0]
800071f0:	0c 1c       	sub	r12,r6
800071f2:	89 26       	st.w	r4[0x8],r6
800071f4:	02 0c       	add	r12,r1
800071f6:	12 01       	add	r1,r9
800071f8:	a1 ac       	sbr	r12,0x0
800071fa:	91 01       	st.w	r8[0x0],r1
800071fc:	8d 1c       	st.w	r6[0x4],r12
800071fe:	08 33       	cp.w	r3,r4
80007200:	c1 d0       	breq	8000723a <_malloc_r+0x3d6>
80007202:	58 f2       	cp.w	r2,15
80007204:	e0 8b 00 05 	brhi	8000720e <_malloc_r+0x3aa>
80007208:	30 18       	mov	r8,1
8000720a:	8d 18       	st.w	r6[0x4],r8
8000720c:	c2 68       	rjmp	80007258 <_malloc_r+0x3f4>
8000720e:	30 59       	mov	r9,5
80007210:	20 c2       	sub	r2,12
80007212:	e0 12 ff f8 	andl	r2,0xfff8
80007216:	e6 02 00 08 	add	r8,r3,r2
8000721a:	91 29       	st.w	r8[0x8],r9
8000721c:	91 19       	st.w	r8[0x4],r9
8000721e:	66 18       	ld.w	r8,r3[0x4]
80007220:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007224:	e5 e8 10 08 	or	r8,r2,r8
80007228:	87 18       	st.w	r3[0x4],r8
8000722a:	58 f2       	cp.w	r2,15
8000722c:	e0 88 00 07 	brls	8000723a <_malloc_r+0x3d6>
80007230:	e6 cb ff f8 	sub	r11,r3,-8
80007234:	0a 9c       	mov	r12,r5
80007236:	fe b0 fb 71 	rcall	80006918 <_free_r>
8000723a:	e0 69 07 2c 	mov	r9,1836
8000723e:	72 0a       	ld.w	r10,r9[0x0]
80007240:	e0 68 07 34 	mov	r8,1844
80007244:	70 08       	ld.w	r8,r8[0x0]
80007246:	14 38       	cp.w	r8,r10
80007248:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000724c:	e0 69 07 28 	mov	r9,1832
80007250:	72 0a       	ld.w	r10,r9[0x0]
80007252:	14 38       	cp.w	r8,r10
80007254:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007258:	68 28       	ld.w	r8,r4[0x8]
8000725a:	70 18       	ld.w	r8,r8[0x4]
8000725c:	e0 18 ff fc 	andl	r8,0xfffc
80007260:	0e 38       	cp.w	r8,r7
80007262:	5f 39       	srlo	r9
80007264:	0e 18       	sub	r8,r7
80007266:	58 f8       	cp.w	r8,15
80007268:	5f aa       	srle	r10
8000726a:	f5 e9 10 09 	or	r9,r10,r9
8000726e:	c0 50       	breq	80007278 <_malloc_r+0x414>
80007270:	0a 9c       	mov	r12,r5
80007272:	c4 3c       	rcall	800072f8 <__malloc_unlock>
80007274:	d8 3a       	popm	r0-r7,pc,r12=0
80007276:	d7 03       	nop
80007278:	68 26       	ld.w	r6,r4[0x8]
8000727a:	a1 a8       	sbr	r8,0x0
8000727c:	0e 99       	mov	r9,r7
8000727e:	a1 a9       	sbr	r9,0x0
80007280:	8d 19       	st.w	r6[0x4],r9
80007282:	ec 07 00 07 	add	r7,r6,r7
80007286:	0a 9c       	mov	r12,r5
80007288:	89 27       	st.w	r4[0x8],r7
8000728a:	8f 18       	st.w	r7[0x4],r8
8000728c:	c3 6c       	rcall	800072f8 <__malloc_unlock>
8000728e:	ec cc ff f8 	sub	r12,r6,-8
80007292:	d8 32       	popm	r0-r7,pc

80007294 <memchr>:
80007294:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007298:	c0 68       	rjmp	800072a4 <memchr+0x10>
8000729a:	20 1a       	sub	r10,1
8000729c:	19 88       	ld.ub	r8,r12[0x0]
8000729e:	16 38       	cp.w	r8,r11
800072a0:	5e 0c       	reteq	r12
800072a2:	2f fc       	sub	r12,-1
800072a4:	58 0a       	cp.w	r10,0
800072a6:	cf a1       	brne	8000729a <memchr+0x6>
800072a8:	5e fa       	retal	r10

800072aa <memmove>:
800072aa:	d4 01       	pushm	lr
800072ac:	18 3b       	cp.w	r11,r12
800072ae:	c1 92       	brcc	800072e0 <memmove+0x36>
800072b0:	f6 0a 00 09 	add	r9,r11,r10
800072b4:	12 3c       	cp.w	r12,r9
800072b6:	c1 52       	brcc	800072e0 <memmove+0x36>
800072b8:	f8 0a 00 0b 	add	r11,r12,r10
800072bc:	30 08       	mov	r8,0
800072be:	c0 68       	rjmp	800072ca <memmove+0x20>
800072c0:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800072c4:	20 1a       	sub	r10,1
800072c6:	f6 08 0b 0e 	st.b	r11[r8],lr
800072ca:	20 18       	sub	r8,1
800072cc:	58 0a       	cp.w	r10,0
800072ce:	cf 91       	brne	800072c0 <memmove+0x16>
800072d0:	d8 02       	popm	pc
800072d2:	f6 08 07 09 	ld.ub	r9,r11[r8]
800072d6:	20 1a       	sub	r10,1
800072d8:	f8 08 0b 09 	st.b	r12[r8],r9
800072dc:	2f f8       	sub	r8,-1
800072de:	c0 28       	rjmp	800072e2 <memmove+0x38>
800072e0:	30 08       	mov	r8,0
800072e2:	58 0a       	cp.w	r10,0
800072e4:	cf 71       	brne	800072d2 <memmove+0x28>
800072e6:	d8 02       	popm	pc

800072e8 <memset>:
800072e8:	18 98       	mov	r8,r12
800072ea:	c0 38       	rjmp	800072f0 <memset+0x8>
800072ec:	10 cb       	st.b	r8++,r11
800072ee:	20 1a       	sub	r10,1
800072f0:	58 0a       	cp.w	r10,0
800072f2:	cf d1       	brne	800072ec <memset+0x4>
800072f4:	5e fc       	retal	r12

800072f6 <__malloc_lock>:
800072f6:	5e fc       	retal	r12

800072f8 <__malloc_unlock>:
800072f8:	5e fc       	retal	r12

800072fa <__hi0bits>:
800072fa:	18 98       	mov	r8,r12
800072fc:	e0 1c 00 00 	andl	r12,0x0
80007300:	f0 09 15 10 	lsl	r9,r8,0x10
80007304:	58 0c       	cp.w	r12,0
80007306:	f2 08 17 00 	moveq	r8,r9
8000730a:	f9 bc 00 10 	moveq	r12,16
8000730e:	f9 bc 01 00 	movne	r12,0
80007312:	10 9a       	mov	r10,r8
80007314:	f0 09 15 08 	lsl	r9,r8,0x8
80007318:	e6 1a ff 00 	andh	r10,0xff00,COH
8000731c:	f7 bc 00 f8 	subeq	r12,-8
80007320:	f2 08 17 00 	moveq	r8,r9
80007324:	10 9a       	mov	r10,r8
80007326:	f0 09 15 04 	lsl	r9,r8,0x4
8000732a:	e6 1a f0 00 	andh	r10,0xf000,COH
8000732e:	f7 bc 00 fc 	subeq	r12,-4
80007332:	f2 08 17 00 	moveq	r8,r9
80007336:	10 9a       	mov	r10,r8
80007338:	f0 09 15 02 	lsl	r9,r8,0x2
8000733c:	e6 1a c0 00 	andh	r10,0xc000,COH
80007340:	f7 bc 00 fe 	subeq	r12,-2
80007344:	f2 08 17 00 	moveq	r8,r9
80007348:	58 08       	cp.w	r8,0
8000734a:	5e 5c       	retlt	r12
8000734c:	ed b8 00 1e 	bld	r8,0x1e
80007350:	f9 bc 01 20 	movne	r12,32
80007354:	f7 bc 00 ff 	subeq	r12,-1
80007358:	5e fc       	retal	r12

8000735a <__lo0bits>:
8000735a:	18 99       	mov	r9,r12
8000735c:	78 08       	ld.w	r8,r12[0x0]
8000735e:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007362:	c1 50       	breq	8000738c <__lo0bits+0x32>
80007364:	ed b8 00 00 	bld	r8,0x0
80007368:	c0 21       	brne	8000736c <__lo0bits+0x12>
8000736a:	5e fd       	retal	0
8000736c:	10 9b       	mov	r11,r8
8000736e:	f0 0a 16 01 	lsr	r10,r8,0x1
80007372:	e2 1b 00 02 	andl	r11,0x2,COH
80007376:	a3 88       	lsr	r8,0x2
80007378:	58 0b       	cp.w	r11,0
8000737a:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000737e:	f9 bc 01 01 	movne	r12,1
80007382:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007386:	f9 bc 00 02 	moveq	r12,2
8000738a:	5e fc       	retal	r12
8000738c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007390:	f0 0b 16 10 	lsr	r11,r8,0x10
80007394:	58 0a       	cp.w	r10,0
80007396:	f6 08 17 00 	moveq	r8,r11
8000739a:	f9 bc 00 10 	moveq	r12,16
8000739e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800073a2:	f0 0a 16 08 	lsr	r10,r8,0x8
800073a6:	58 0b       	cp.w	r11,0
800073a8:	f7 bc 00 f8 	subeq	r12,-8
800073ac:	f4 08 17 00 	moveq	r8,r10
800073b0:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800073b4:	f0 0a 16 04 	lsr	r10,r8,0x4
800073b8:	58 0b       	cp.w	r11,0
800073ba:	f7 bc 00 fc 	subeq	r12,-4
800073be:	f4 08 17 00 	moveq	r8,r10
800073c2:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800073c6:	f0 0a 16 02 	lsr	r10,r8,0x2
800073ca:	58 0b       	cp.w	r11,0
800073cc:	f7 bc 00 fe 	subeq	r12,-2
800073d0:	f4 08 17 00 	moveq	r8,r10
800073d4:	ed b8 00 00 	bld	r8,0x0
800073d8:	c0 60       	breq	800073e4 <__lo0bits+0x8a>
800073da:	a1 98       	lsr	r8,0x1
800073dc:	c0 31       	brne	800073e2 <__lo0bits+0x88>
800073de:	32 0c       	mov	r12,32
800073e0:	5e fc       	retal	r12
800073e2:	2f fc       	sub	r12,-1
800073e4:	93 08       	st.w	r9[0x0],r8
800073e6:	5e fc       	retal	r12

800073e8 <__mcmp>:
800073e8:	d4 01       	pushm	lr
800073ea:	18 98       	mov	r8,r12
800073ec:	76 49       	ld.w	r9,r11[0x10]
800073ee:	78 4c       	ld.w	r12,r12[0x10]
800073f0:	12 1c       	sub	r12,r9
800073f2:	c1 31       	brne	80007418 <__mcmp+0x30>
800073f4:	2f b9       	sub	r9,-5
800073f6:	a3 69       	lsl	r9,0x2
800073f8:	12 0b       	add	r11,r9
800073fa:	f0 09 00 09 	add	r9,r8,r9
800073fe:	2e c8       	sub	r8,-20
80007400:	13 4e       	ld.w	lr,--r9
80007402:	17 4a       	ld.w	r10,--r11
80007404:	14 3e       	cp.w	lr,r10
80007406:	c0 60       	breq	80007412 <__mcmp+0x2a>
80007408:	f9 bc 03 ff 	movlo	r12,-1
8000740c:	f9 bc 02 01 	movhs	r12,1
80007410:	d8 02       	popm	pc
80007412:	10 39       	cp.w	r9,r8
80007414:	fe 9b ff f6 	brhi	80007400 <__mcmp+0x18>
80007418:	d8 02       	popm	pc
8000741a:	d7 03       	nop

8000741c <_Bfree>:
8000741c:	d4 21       	pushm	r4-r7,lr
8000741e:	18 97       	mov	r7,r12
80007420:	16 95       	mov	r5,r11
80007422:	78 96       	ld.w	r6,r12[0x24]
80007424:	58 06       	cp.w	r6,0
80007426:	c0 91       	brne	80007438 <_Bfree+0x1c>
80007428:	31 0c       	mov	r12,16
8000742a:	fe b0 fd 15 	rcall	80006e54 <malloc>
8000742e:	99 36       	st.w	r12[0xc],r6
80007430:	8f 9c       	st.w	r7[0x24],r12
80007432:	99 16       	st.w	r12[0x4],r6
80007434:	99 26       	st.w	r12[0x8],r6
80007436:	99 06       	st.w	r12[0x0],r6
80007438:	58 05       	cp.w	r5,0
8000743a:	c0 90       	breq	8000744c <_Bfree+0x30>
8000743c:	6a 19       	ld.w	r9,r5[0x4]
8000743e:	6e 98       	ld.w	r8,r7[0x24]
80007440:	70 38       	ld.w	r8,r8[0xc]
80007442:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007446:	8b 0a       	st.w	r5[0x0],r10
80007448:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000744c:	d8 22       	popm	r4-r7,pc
8000744e:	d7 03       	nop

80007450 <_Balloc>:
80007450:	d4 21       	pushm	r4-r7,lr
80007452:	18 97       	mov	r7,r12
80007454:	16 96       	mov	r6,r11
80007456:	78 95       	ld.w	r5,r12[0x24]
80007458:	58 05       	cp.w	r5,0
8000745a:	c0 91       	brne	8000746c <_Balloc+0x1c>
8000745c:	31 0c       	mov	r12,16
8000745e:	fe b0 fc fb 	rcall	80006e54 <malloc>
80007462:	99 35       	st.w	r12[0xc],r5
80007464:	8f 9c       	st.w	r7[0x24],r12
80007466:	99 15       	st.w	r12[0x4],r5
80007468:	99 25       	st.w	r12[0x8],r5
8000746a:	99 05       	st.w	r12[0x0],r5
8000746c:	6e 95       	ld.w	r5,r7[0x24]
8000746e:	6a 38       	ld.w	r8,r5[0xc]
80007470:	58 08       	cp.w	r8,0
80007472:	c0 b1       	brne	80007488 <_Balloc+0x38>
80007474:	31 0a       	mov	r10,16
80007476:	30 4b       	mov	r11,4
80007478:	0e 9c       	mov	r12,r7
8000747a:	e0 a0 04 93 	rcall	80007da0 <_calloc_r>
8000747e:	8b 3c       	st.w	r5[0xc],r12
80007480:	6e 98       	ld.w	r8,r7[0x24]
80007482:	70 3c       	ld.w	r12,r8[0xc]
80007484:	58 0c       	cp.w	r12,0
80007486:	c1 b0       	breq	800074bc <_Balloc+0x6c>
80007488:	6e 98       	ld.w	r8,r7[0x24]
8000748a:	70 38       	ld.w	r8,r8[0xc]
8000748c:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007490:	70 0c       	ld.w	r12,r8[0x0]
80007492:	58 0c       	cp.w	r12,0
80007494:	c0 40       	breq	8000749c <_Balloc+0x4c>
80007496:	78 09       	ld.w	r9,r12[0x0]
80007498:	91 09       	st.w	r8[0x0],r9
8000749a:	c0 e8       	rjmp	800074b6 <_Balloc+0x66>
8000749c:	0e 9c       	mov	r12,r7
8000749e:	30 17       	mov	r7,1
800074a0:	0e 9b       	mov	r11,r7
800074a2:	ee 06 09 47 	lsl	r7,r7,r6
800074a6:	ee ca ff fb 	sub	r10,r7,-5
800074aa:	a3 6a       	lsl	r10,0x2
800074ac:	e0 a0 04 7a 	rcall	80007da0 <_calloc_r>
800074b0:	c0 60       	breq	800074bc <_Balloc+0x6c>
800074b2:	99 16       	st.w	r12[0x4],r6
800074b4:	99 27       	st.w	r12[0x8],r7
800074b6:	30 08       	mov	r8,0
800074b8:	99 38       	st.w	r12[0xc],r8
800074ba:	99 48       	st.w	r12[0x10],r8
800074bc:	d8 22       	popm	r4-r7,pc
800074be:	d7 03       	nop

800074c0 <__d2b>:
800074c0:	d4 31       	pushm	r0-r7,lr
800074c2:	20 2d       	sub	sp,8
800074c4:	16 93       	mov	r3,r11
800074c6:	12 96       	mov	r6,r9
800074c8:	10 95       	mov	r5,r8
800074ca:	14 92       	mov	r2,r10
800074cc:	30 1b       	mov	r11,1
800074ce:	cc 1f       	rcall	80007450 <_Balloc>
800074d0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800074d4:	50 09       	stdsp	sp[0x0],r9
800074d6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800074da:	b5 a9       	sbr	r9,0x14
800074dc:	f0 01 16 14 	lsr	r1,r8,0x14
800074e0:	fb f9 1a 00 	st.wne	sp[0x0],r9
800074e4:	18 94       	mov	r4,r12
800074e6:	58 02       	cp.w	r2,0
800074e8:	c1 d0       	breq	80007522 <__d2b+0x62>
800074ea:	fa cc ff f8 	sub	r12,sp,-8
800074ee:	18 d2       	st.w	--r12,r2
800074f0:	c3 5f       	rcall	8000735a <__lo0bits>
800074f2:	40 18       	lddsp	r8,sp[0x4]
800074f4:	c0 d0       	breq	8000750e <__d2b+0x4e>
800074f6:	40 09       	lddsp	r9,sp[0x0]
800074f8:	f8 0a 11 20 	rsub	r10,r12,32
800074fc:	f2 0a 09 4a 	lsl	r10,r9,r10
80007500:	f5 e8 10 08 	or	r8,r10,r8
80007504:	89 58       	st.w	r4[0x14],r8
80007506:	f2 0c 0a 49 	lsr	r9,r9,r12
8000750a:	50 09       	stdsp	sp[0x0],r9
8000750c:	c0 28       	rjmp	80007510 <__d2b+0x50>
8000750e:	89 58       	st.w	r4[0x14],r8
80007510:	40 08       	lddsp	r8,sp[0x0]
80007512:	58 08       	cp.w	r8,0
80007514:	f9 b3 01 02 	movne	r3,2
80007518:	f9 b3 00 01 	moveq	r3,1
8000751c:	89 68       	st.w	r4[0x18],r8
8000751e:	89 43       	st.w	r4[0x10],r3
80007520:	c0 88       	rjmp	80007530 <__d2b+0x70>
80007522:	1a 9c       	mov	r12,sp
80007524:	c1 bf       	rcall	8000735a <__lo0bits>
80007526:	30 13       	mov	r3,1
80007528:	40 08       	lddsp	r8,sp[0x0]
8000752a:	2e 0c       	sub	r12,-32
8000752c:	89 43       	st.w	r4[0x10],r3
8000752e:	89 58       	st.w	r4[0x14],r8
80007530:	58 01       	cp.w	r1,0
80007532:	c0 90       	breq	80007544 <__d2b+0x84>
80007534:	e2 c1 04 33 	sub	r1,r1,1075
80007538:	18 01       	add	r1,r12
8000753a:	8d 01       	st.w	r6[0x0],r1
8000753c:	f8 0c 11 35 	rsub	r12,r12,53
80007540:	8b 0c       	st.w	r5[0x0],r12
80007542:	c0 c8       	rjmp	8000755a <__d2b+0x9a>
80007544:	e6 c8 ff fc 	sub	r8,r3,-4
80007548:	f8 cc 04 32 	sub	r12,r12,1074
8000754c:	a5 73       	lsl	r3,0x5
8000754e:	8d 0c       	st.w	r6[0x0],r12
80007550:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007554:	cd 3e       	rcall	800072fa <__hi0bits>
80007556:	18 13       	sub	r3,r12
80007558:	8b 03       	st.w	r5[0x0],r3
8000755a:	08 9c       	mov	r12,r4
8000755c:	2f ed       	sub	sp,-8
8000755e:	d8 32       	popm	r0-r7,pc

80007560 <__mdiff>:
80007560:	d4 31       	pushm	r0-r7,lr
80007562:	74 48       	ld.w	r8,r10[0x10]
80007564:	76 45       	ld.w	r5,r11[0x10]
80007566:	16 97       	mov	r7,r11
80007568:	14 96       	mov	r6,r10
8000756a:	10 15       	sub	r5,r8
8000756c:	c1 31       	brne	80007592 <__mdiff+0x32>
8000756e:	2f b8       	sub	r8,-5
80007570:	ee ce ff ec 	sub	lr,r7,-20
80007574:	a3 68       	lsl	r8,0x2
80007576:	f4 08 00 0b 	add	r11,r10,r8
8000757a:	ee 08 00 08 	add	r8,r7,r8
8000757e:	11 4a       	ld.w	r10,--r8
80007580:	17 49       	ld.w	r9,--r11
80007582:	12 3a       	cp.w	r10,r9
80007584:	c0 30       	breq	8000758a <__mdiff+0x2a>
80007586:	c0 e2       	brcc	800075a2 <__mdiff+0x42>
80007588:	c0 78       	rjmp	80007596 <__mdiff+0x36>
8000758a:	1c 38       	cp.w	r8,lr
8000758c:	fe 9b ff f9 	brhi	8000757e <__mdiff+0x1e>
80007590:	c4 98       	rjmp	80007622 <__mdiff+0xc2>
80007592:	58 05       	cp.w	r5,0
80007594:	c0 64       	brge	800075a0 <__mdiff+0x40>
80007596:	0e 98       	mov	r8,r7
80007598:	30 15       	mov	r5,1
8000759a:	0c 97       	mov	r7,r6
8000759c:	10 96       	mov	r6,r8
8000759e:	c0 28       	rjmp	800075a2 <__mdiff+0x42>
800075a0:	30 05       	mov	r5,0
800075a2:	6e 1b       	ld.w	r11,r7[0x4]
800075a4:	c5 6f       	rcall	80007450 <_Balloc>
800075a6:	6e 49       	ld.w	r9,r7[0x10]
800075a8:	6c 44       	ld.w	r4,r6[0x10]
800075aa:	99 35       	st.w	r12[0xc],r5
800075ac:	2f b4       	sub	r4,-5
800075ae:	f2 c5 ff fb 	sub	r5,r9,-5
800075b2:	ec 04 00 24 	add	r4,r6,r4<<0x2
800075b6:	ee 05 00 25 	add	r5,r7,r5<<0x2
800075ba:	2e c6       	sub	r6,-20
800075bc:	2e c7       	sub	r7,-20
800075be:	f8 c8 ff ec 	sub	r8,r12,-20
800075c2:	30 0a       	mov	r10,0
800075c4:	0f 0e       	ld.w	lr,r7++
800075c6:	0d 0b       	ld.w	r11,r6++
800075c8:	fc 02 16 10 	lsr	r2,lr,0x10
800075cc:	f6 03 16 10 	lsr	r3,r11,0x10
800075d0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800075d4:	e4 03 01 03 	sub	r3,r2,r3
800075d8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800075dc:	fc 0b 01 0b 	sub	r11,lr,r11
800075e0:	f6 0a 00 0a 	add	r10,r11,r10
800075e4:	b0 1a       	st.h	r8[0x2],r10
800075e6:	b1 4a       	asr	r10,0x10
800075e8:	e6 0a 00 0a 	add	r10,r3,r10
800075ec:	b0 0a       	st.h	r8[0x0],r10
800075ee:	2f c8       	sub	r8,-4
800075f0:	b1 4a       	asr	r10,0x10
800075f2:	08 36       	cp.w	r6,r4
800075f4:	ce 83       	brcs	800075c4 <__mdiff+0x64>
800075f6:	c0 d8       	rjmp	80007610 <__mdiff+0xb0>
800075f8:	0f 0b       	ld.w	r11,r7++
800075fa:	f6 0e 16 10 	lsr	lr,r11,0x10
800075fe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007602:	16 0a       	add	r10,r11
80007604:	b0 1a       	st.h	r8[0x2],r10
80007606:	b1 4a       	asr	r10,0x10
80007608:	1c 0a       	add	r10,lr
8000760a:	b0 0a       	st.h	r8[0x0],r10
8000760c:	2f c8       	sub	r8,-4
8000760e:	b1 4a       	asr	r10,0x10
80007610:	0a 37       	cp.w	r7,r5
80007612:	cf 33       	brcs	800075f8 <__mdiff+0x98>
80007614:	c0 28       	rjmp	80007618 <__mdiff+0xb8>
80007616:	20 19       	sub	r9,1
80007618:	11 4a       	ld.w	r10,--r8
8000761a:	58 0a       	cp.w	r10,0
8000761c:	cf d0       	breq	80007616 <__mdiff+0xb6>
8000761e:	99 49       	st.w	r12[0x10],r9
80007620:	d8 32       	popm	r0-r7,pc
80007622:	30 0b       	mov	r11,0
80007624:	c1 6f       	rcall	80007450 <_Balloc>
80007626:	30 18       	mov	r8,1
80007628:	99 48       	st.w	r12[0x10],r8
8000762a:	30 08       	mov	r8,0
8000762c:	99 58       	st.w	r12[0x14],r8
8000762e:	d8 32       	popm	r0-r7,pc

80007630 <__lshift>:
80007630:	d4 31       	pushm	r0-r7,lr
80007632:	16 97       	mov	r7,r11
80007634:	76 46       	ld.w	r6,r11[0x10]
80007636:	f4 02 14 05 	asr	r2,r10,0x5
8000763a:	2f f6       	sub	r6,-1
8000763c:	14 93       	mov	r3,r10
8000763e:	18 94       	mov	r4,r12
80007640:	04 06       	add	r6,r2
80007642:	76 1b       	ld.w	r11,r11[0x4]
80007644:	6e 28       	ld.w	r8,r7[0x8]
80007646:	c0 38       	rjmp	8000764c <__lshift+0x1c>
80007648:	2f fb       	sub	r11,-1
8000764a:	a1 78       	lsl	r8,0x1
8000764c:	10 36       	cp.w	r6,r8
8000764e:	fe 99 ff fd 	brgt	80007648 <__lshift+0x18>
80007652:	08 9c       	mov	r12,r4
80007654:	cf ee       	rcall	80007450 <_Balloc>
80007656:	30 09       	mov	r9,0
80007658:	18 95       	mov	r5,r12
8000765a:	f8 c8 ff ec 	sub	r8,r12,-20
8000765e:	12 9a       	mov	r10,r9
80007660:	c0 38       	rjmp	80007666 <__lshift+0x36>
80007662:	10 aa       	st.w	r8++,r10
80007664:	2f f9       	sub	r9,-1
80007666:	04 39       	cp.w	r9,r2
80007668:	cf d5       	brlt	80007662 <__lshift+0x32>
8000766a:	6e 4b       	ld.w	r11,r7[0x10]
8000766c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007670:	2f bb       	sub	r11,-5
80007672:	ee c9 ff ec 	sub	r9,r7,-20
80007676:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000767a:	58 03       	cp.w	r3,0
8000767c:	c1 30       	breq	800076a2 <__lshift+0x72>
8000767e:	e6 0c 11 20 	rsub	r12,r3,32
80007682:	30 0a       	mov	r10,0
80007684:	72 02       	ld.w	r2,r9[0x0]
80007686:	e4 03 09 42 	lsl	r2,r2,r3
8000768a:	04 4a       	or	r10,r2
8000768c:	10 aa       	st.w	r8++,r10
8000768e:	13 0a       	ld.w	r10,r9++
80007690:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007694:	16 39       	cp.w	r9,r11
80007696:	cf 73       	brcs	80007684 <__lshift+0x54>
80007698:	91 0a       	st.w	r8[0x0],r10
8000769a:	58 0a       	cp.w	r10,0
8000769c:	c0 70       	breq	800076aa <__lshift+0x7a>
8000769e:	2f f6       	sub	r6,-1
800076a0:	c0 58       	rjmp	800076aa <__lshift+0x7a>
800076a2:	13 0a       	ld.w	r10,r9++
800076a4:	10 aa       	st.w	r8++,r10
800076a6:	16 39       	cp.w	r9,r11
800076a8:	cf d3       	brcs	800076a2 <__lshift+0x72>
800076aa:	08 9c       	mov	r12,r4
800076ac:	20 16       	sub	r6,1
800076ae:	0e 9b       	mov	r11,r7
800076b0:	8b 46       	st.w	r5[0x10],r6
800076b2:	cb 5e       	rcall	8000741c <_Bfree>
800076b4:	0a 9c       	mov	r12,r5
800076b6:	d8 32       	popm	r0-r7,pc

800076b8 <__multiply>:
800076b8:	d4 31       	pushm	r0-r7,lr
800076ba:	20 2d       	sub	sp,8
800076bc:	76 49       	ld.w	r9,r11[0x10]
800076be:	74 48       	ld.w	r8,r10[0x10]
800076c0:	16 96       	mov	r6,r11
800076c2:	14 95       	mov	r5,r10
800076c4:	10 39       	cp.w	r9,r8
800076c6:	ec 08 17 50 	movlt	r8,r6
800076ca:	ea 06 17 50 	movlt	r6,r5
800076ce:	f0 05 17 50 	movlt	r5,r8
800076d2:	6c 28       	ld.w	r8,r6[0x8]
800076d4:	76 43       	ld.w	r3,r11[0x10]
800076d6:	74 42       	ld.w	r2,r10[0x10]
800076d8:	76 1b       	ld.w	r11,r11[0x4]
800076da:	e4 03 00 07 	add	r7,r2,r3
800076de:	10 37       	cp.w	r7,r8
800076e0:	f7 bb 09 ff 	subgt	r11,-1
800076e4:	cb 6e       	rcall	80007450 <_Balloc>
800076e6:	ee c4 ff fb 	sub	r4,r7,-5
800076ea:	f8 c9 ff ec 	sub	r9,r12,-20
800076ee:	f8 04 00 24 	add	r4,r12,r4<<0x2
800076f2:	30 0a       	mov	r10,0
800076f4:	12 98       	mov	r8,r9
800076f6:	c0 28       	rjmp	800076fa <__multiply+0x42>
800076f8:	10 aa       	st.w	r8++,r10
800076fa:	08 38       	cp.w	r8,r4
800076fc:	cf e3       	brcs	800076f8 <__multiply+0x40>
800076fe:	2f b3       	sub	r3,-5
80007700:	2f b2       	sub	r2,-5
80007702:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007706:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000770a:	ec cb ff ec 	sub	r11,r6,-20
8000770e:	50 12       	stdsp	sp[0x4],r2
80007710:	ea ca ff ec 	sub	r10,r5,-20
80007714:	c4 48       	rjmp	8000779c <__multiply+0xe4>
80007716:	94 95       	ld.uh	r5,r10[0x2]
80007718:	58 05       	cp.w	r5,0
8000771a:	c2 00       	breq	8000775a <__multiply+0xa2>
8000771c:	12 98       	mov	r8,r9
8000771e:	16 96       	mov	r6,r11
80007720:	30 0e       	mov	lr,0
80007722:	50 09       	stdsp	sp[0x0],r9
80007724:	0d 02       	ld.w	r2,r6++
80007726:	e4 00 16 10 	lsr	r0,r2,0x10
8000772a:	70 01       	ld.w	r1,r8[0x0]
8000772c:	70 09       	ld.w	r9,r8[0x0]
8000772e:	b1 81       	lsr	r1,0x10
80007730:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007734:	e0 05 03 41 	mac	r1,r0,r5
80007738:	ab 32       	mul	r2,r5
8000773a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000773e:	00 02       	add	r2,r0
80007740:	e4 0e 00 0e 	add	lr,r2,lr
80007744:	b0 1e       	st.h	r8[0x2],lr
80007746:	b1 8e       	lsr	lr,0x10
80007748:	1c 01       	add	r1,lr
8000774a:	b0 01       	st.h	r8[0x0],r1
8000774c:	e2 0e 16 10 	lsr	lr,r1,0x10
80007750:	2f c8       	sub	r8,-4
80007752:	06 36       	cp.w	r6,r3
80007754:	ce 83       	brcs	80007724 <__multiply+0x6c>
80007756:	40 09       	lddsp	r9,sp[0x0]
80007758:	91 0e       	st.w	r8[0x0],lr
8000775a:	94 86       	ld.uh	r6,r10[0x0]
8000775c:	58 06       	cp.w	r6,0
8000775e:	c1 d0       	breq	80007798 <__multiply+0xe0>
80007760:	72 02       	ld.w	r2,r9[0x0]
80007762:	12 98       	mov	r8,r9
80007764:	16 9e       	mov	lr,r11
80007766:	30 05       	mov	r5,0
80007768:	b0 12       	st.h	r8[0x2],r2
8000776a:	1d 01       	ld.w	r1,lr++
8000776c:	90 82       	ld.uh	r2,r8[0x0]
8000776e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007772:	ad 30       	mul	r0,r6
80007774:	e0 02 00 02 	add	r2,r0,r2
80007778:	e4 05 00 05 	add	r5,r2,r5
8000777c:	b0 05       	st.h	r8[0x0],r5
8000777e:	b1 85       	lsr	r5,0x10
80007780:	b1 81       	lsr	r1,0x10
80007782:	2f c8       	sub	r8,-4
80007784:	ad 31       	mul	r1,r6
80007786:	90 92       	ld.uh	r2,r8[0x2]
80007788:	e2 02 00 02 	add	r2,r1,r2
8000778c:	0a 02       	add	r2,r5
8000778e:	e4 05 16 10 	lsr	r5,r2,0x10
80007792:	06 3e       	cp.w	lr,r3
80007794:	ce a3       	brcs	80007768 <__multiply+0xb0>
80007796:	91 02       	st.w	r8[0x0],r2
80007798:	2f ca       	sub	r10,-4
8000779a:	2f c9       	sub	r9,-4
8000779c:	40 18       	lddsp	r8,sp[0x4]
8000779e:	10 3a       	cp.w	r10,r8
800077a0:	cb b3       	brcs	80007716 <__multiply+0x5e>
800077a2:	c0 28       	rjmp	800077a6 <__multiply+0xee>
800077a4:	20 17       	sub	r7,1
800077a6:	58 07       	cp.w	r7,0
800077a8:	e0 8a 00 05 	brle	800077b2 <__multiply+0xfa>
800077ac:	09 48       	ld.w	r8,--r4
800077ae:	58 08       	cp.w	r8,0
800077b0:	cf a0       	breq	800077a4 <__multiply+0xec>
800077b2:	99 47       	st.w	r12[0x10],r7
800077b4:	2f ed       	sub	sp,-8
800077b6:	d8 32       	popm	r0-r7,pc

800077b8 <__i2b>:
800077b8:	d4 21       	pushm	r4-r7,lr
800077ba:	16 97       	mov	r7,r11
800077bc:	30 1b       	mov	r11,1
800077be:	c4 9e       	rcall	80007450 <_Balloc>
800077c0:	30 19       	mov	r9,1
800077c2:	99 57       	st.w	r12[0x14],r7
800077c4:	99 49       	st.w	r12[0x10],r9
800077c6:	d8 22       	popm	r4-r7,pc

800077c8 <__multadd>:
800077c8:	d4 31       	pushm	r0-r7,lr
800077ca:	30 08       	mov	r8,0
800077cc:	12 95       	mov	r5,r9
800077ce:	16 97       	mov	r7,r11
800077d0:	18 96       	mov	r6,r12
800077d2:	76 44       	ld.w	r4,r11[0x10]
800077d4:	f6 c9 ff ec 	sub	r9,r11,-20
800077d8:	72 0b       	ld.w	r11,r9[0x0]
800077da:	f6 0c 16 10 	lsr	r12,r11,0x10
800077de:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800077e2:	f4 0c 02 4c 	mul	r12,r10,r12
800077e6:	f4 0b 03 45 	mac	r5,r10,r11
800077ea:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800077ee:	b1 85       	lsr	r5,0x10
800077f0:	18 05       	add	r5,r12
800077f2:	ea 0c 15 10 	lsl	r12,r5,0x10
800077f6:	f8 0b 00 0b 	add	r11,r12,r11
800077fa:	12 ab       	st.w	r9++,r11
800077fc:	2f f8       	sub	r8,-1
800077fe:	b1 85       	lsr	r5,0x10
80007800:	08 38       	cp.w	r8,r4
80007802:	ce b5       	brlt	800077d8 <__multadd+0x10>
80007804:	58 05       	cp.w	r5,0
80007806:	c1 c0       	breq	8000783e <__multadd+0x76>
80007808:	6e 28       	ld.w	r8,r7[0x8]
8000780a:	10 34       	cp.w	r4,r8
8000780c:	c1 35       	brlt	80007832 <__multadd+0x6a>
8000780e:	6e 1b       	ld.w	r11,r7[0x4]
80007810:	0c 9c       	mov	r12,r6
80007812:	2f fb       	sub	r11,-1
80007814:	c1 ee       	rcall	80007450 <_Balloc>
80007816:	6e 4a       	ld.w	r10,r7[0x10]
80007818:	ee cb ff f4 	sub	r11,r7,-12
8000781c:	18 93       	mov	r3,r12
8000781e:	2f ea       	sub	r10,-2
80007820:	2f 4c       	sub	r12,-12
80007822:	a3 6a       	lsl	r10,0x2
80007824:	fe b0 dd e6 	rcall	800033f0 <memcpy>
80007828:	0e 9b       	mov	r11,r7
8000782a:	0c 9c       	mov	r12,r6
8000782c:	fe b0 fd f8 	rcall	8000741c <_Bfree>
80007830:	06 97       	mov	r7,r3
80007832:	e8 c8 ff ff 	sub	r8,r4,-1
80007836:	2f b4       	sub	r4,-5
80007838:	8f 48       	st.w	r7[0x10],r8
8000783a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000783e:	0e 9c       	mov	r12,r7
80007840:	d8 32       	popm	r0-r7,pc
80007842:	d7 03       	nop

80007844 <__pow5mult>:
80007844:	d4 31       	pushm	r0-r7,lr
80007846:	14 96       	mov	r6,r10
80007848:	18 97       	mov	r7,r12
8000784a:	16 94       	mov	r4,r11
8000784c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007850:	c0 90       	breq	80007862 <__pow5mult+0x1e>
80007852:	20 18       	sub	r8,1
80007854:	fe c9 c8 f4 	sub	r9,pc,-14092
80007858:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000785c:	30 09       	mov	r9,0
8000785e:	cb 5f       	rcall	800077c8 <__multadd>
80007860:	18 94       	mov	r4,r12
80007862:	a3 46       	asr	r6,0x2
80007864:	c3 40       	breq	800078cc <__pow5mult+0x88>
80007866:	6e 95       	ld.w	r5,r7[0x24]
80007868:	58 05       	cp.w	r5,0
8000786a:	c0 91       	brne	8000787c <__pow5mult+0x38>
8000786c:	31 0c       	mov	r12,16
8000786e:	fe b0 fa f3 	rcall	80006e54 <malloc>
80007872:	99 35       	st.w	r12[0xc],r5
80007874:	8f 9c       	st.w	r7[0x24],r12
80007876:	99 15       	st.w	r12[0x4],r5
80007878:	99 25       	st.w	r12[0x8],r5
8000787a:	99 05       	st.w	r12[0x0],r5
8000787c:	6e 93       	ld.w	r3,r7[0x24]
8000787e:	66 25       	ld.w	r5,r3[0x8]
80007880:	58 05       	cp.w	r5,0
80007882:	c0 c1       	brne	8000789a <__pow5mult+0x56>
80007884:	e0 6b 02 71 	mov	r11,625
80007888:	0e 9c       	mov	r12,r7
8000788a:	c9 7f       	rcall	800077b8 <__i2b>
8000788c:	87 2c       	st.w	r3[0x8],r12
8000788e:	30 08       	mov	r8,0
80007890:	18 95       	mov	r5,r12
80007892:	99 08       	st.w	r12[0x0],r8
80007894:	c0 38       	rjmp	8000789a <__pow5mult+0x56>
80007896:	06 9c       	mov	r12,r3
80007898:	18 95       	mov	r5,r12
8000789a:	ed b6 00 00 	bld	r6,0x0
8000789e:	c0 b1       	brne	800078b4 <__pow5mult+0x70>
800078a0:	08 9b       	mov	r11,r4
800078a2:	0a 9a       	mov	r10,r5
800078a4:	0e 9c       	mov	r12,r7
800078a6:	c0 9f       	rcall	800076b8 <__multiply>
800078a8:	08 9b       	mov	r11,r4
800078aa:	18 93       	mov	r3,r12
800078ac:	0e 9c       	mov	r12,r7
800078ae:	06 94       	mov	r4,r3
800078b0:	fe b0 fd b6 	rcall	8000741c <_Bfree>
800078b4:	a1 56       	asr	r6,0x1
800078b6:	c0 b0       	breq	800078cc <__pow5mult+0x88>
800078b8:	6a 03       	ld.w	r3,r5[0x0]
800078ba:	58 03       	cp.w	r3,0
800078bc:	ce d1       	brne	80007896 <__pow5mult+0x52>
800078be:	0a 9a       	mov	r10,r5
800078c0:	0a 9b       	mov	r11,r5
800078c2:	0e 9c       	mov	r12,r7
800078c4:	cf ae       	rcall	800076b8 <__multiply>
800078c6:	8b 0c       	st.w	r5[0x0],r12
800078c8:	99 03       	st.w	r12[0x0],r3
800078ca:	ce 7b       	rjmp	80007898 <__pow5mult+0x54>
800078cc:	08 9c       	mov	r12,r4
800078ce:	d8 32       	popm	r0-r7,pc

800078d0 <_realloc_r>:
800078d0:	d4 31       	pushm	r0-r7,lr
800078d2:	20 1d       	sub	sp,4
800078d4:	16 94       	mov	r4,r11
800078d6:	18 92       	mov	r2,r12
800078d8:	14 9b       	mov	r11,r10
800078da:	58 04       	cp.w	r4,0
800078dc:	c0 51       	brne	800078e6 <_realloc_r+0x16>
800078de:	fe b0 fa c3 	rcall	80006e64 <_malloc_r>
800078e2:	18 95       	mov	r5,r12
800078e4:	c5 39       	rjmp	80007b8a <_realloc_r+0x2ba>
800078e6:	50 0a       	stdsp	sp[0x0],r10
800078e8:	fe b0 fd 07 	rcall	800072f6 <__malloc_lock>
800078ec:	40 0b       	lddsp	r11,sp[0x0]
800078ee:	f6 c8 ff f5 	sub	r8,r11,-11
800078f2:	e8 c1 00 08 	sub	r1,r4,8
800078f6:	10 96       	mov	r6,r8
800078f8:	62 1c       	ld.w	r12,r1[0x4]
800078fa:	e0 16 ff f8 	andl	r6,0xfff8
800078fe:	59 68       	cp.w	r8,22
80007900:	f9 b6 08 10 	movls	r6,16
80007904:	16 36       	cp.w	r6,r11
80007906:	5f 38       	srlo	r8
80007908:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000790c:	c0 50       	breq	80007916 <_realloc_r+0x46>
8000790e:	30 c8       	mov	r8,12
80007910:	30 05       	mov	r5,0
80007912:	85 38       	st.w	r2[0xc],r8
80007914:	c3 b9       	rjmp	80007b8a <_realloc_r+0x2ba>
80007916:	18 90       	mov	r0,r12
80007918:	e0 10 ff fc 	andl	r0,0xfffc
8000791c:	0c 30       	cp.w	r0,r6
8000791e:	e0 84 01 0b 	brge	80007b34 <_realloc_r+0x264>
80007922:	e0 68 00 fc 	mov	r8,252
80007926:	e2 00 00 09 	add	r9,r1,r0
8000792a:	70 25       	ld.w	r5,r8[0x8]
8000792c:	0a 39       	cp.w	r9,r5
8000792e:	c0 90       	breq	80007940 <_realloc_r+0x70>
80007930:	72 1a       	ld.w	r10,r9[0x4]
80007932:	a1 ca       	cbr	r10,0x0
80007934:	f2 0a 00 0a 	add	r10,r9,r10
80007938:	74 1a       	ld.w	r10,r10[0x4]
8000793a:	ed ba 00 00 	bld	r10,0x0
8000793e:	c2 20       	breq	80007982 <_realloc_r+0xb2>
80007940:	72 1a       	ld.w	r10,r9[0x4]
80007942:	e0 1a ff fc 	andl	r10,0xfffc
80007946:	f4 00 00 03 	add	r3,r10,r0
8000794a:	0a 39       	cp.w	r9,r5
8000794c:	c1 31       	brne	80007972 <_realloc_r+0xa2>
8000794e:	ec c7 ff f0 	sub	r7,r6,-16
80007952:	0e 33       	cp.w	r3,r7
80007954:	c1 95       	brlt	80007986 <_realloc_r+0xb6>
80007956:	e2 06 00 09 	add	r9,r1,r6
8000795a:	0c 13       	sub	r3,r6
8000795c:	a1 a3       	sbr	r3,0x0
8000795e:	93 13       	st.w	r9[0x4],r3
80007960:	91 29       	st.w	r8[0x8],r9
80007962:	04 9c       	mov	r12,r2
80007964:	62 18       	ld.w	r8,r1[0x4]
80007966:	08 95       	mov	r5,r4
80007968:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000796c:	10 46       	or	r6,r8
8000796e:	83 16       	st.w	r1[0x4],r6
80007970:	c0 b9       	rjmp	80007b86 <_realloc_r+0x2b6>
80007972:	0c 33       	cp.w	r3,r6
80007974:	c0 95       	brlt	80007986 <_realloc_r+0xb6>
80007976:	72 28       	ld.w	r8,r9[0x8]
80007978:	02 97       	mov	r7,r1
8000797a:	72 39       	ld.w	r9,r9[0xc]
8000797c:	93 28       	st.w	r9[0x8],r8
8000797e:	91 39       	st.w	r8[0xc],r9
80007980:	cd c8       	rjmp	80007b38 <_realloc_r+0x268>
80007982:	30 0a       	mov	r10,0
80007984:	14 99       	mov	r9,r10
80007986:	ed bc 00 00 	bld	r12,0x0
8000798a:	e0 80 00 95 	breq	80007ab4 <_realloc_r+0x1e4>
8000798e:	62 07       	ld.w	r7,r1[0x0]
80007990:	e2 07 01 07 	sub	r7,r1,r7
80007994:	6e 1c       	ld.w	r12,r7[0x4]
80007996:	e0 1c ff fc 	andl	r12,0xfffc
8000799a:	58 09       	cp.w	r9,0
8000799c:	c5 60       	breq	80007a48 <_realloc_r+0x178>
8000799e:	f8 00 00 03 	add	r3,r12,r0
800079a2:	0a 39       	cp.w	r9,r5
800079a4:	c4 81       	brne	80007a34 <_realloc_r+0x164>
800079a6:	14 03       	add	r3,r10
800079a8:	ec c9 ff f0 	sub	r9,r6,-16
800079ac:	12 33       	cp.w	r3,r9
800079ae:	c4 d5       	brlt	80007a48 <_realloc_r+0x178>
800079b0:	6e 3a       	ld.w	r10,r7[0xc]
800079b2:	6e 29       	ld.w	r9,r7[0x8]
800079b4:	95 29       	st.w	r10[0x8],r9
800079b6:	93 3a       	st.w	r9[0xc],r10
800079b8:	ee c5 ff f8 	sub	r5,r7,-8
800079bc:	e0 ca 00 04 	sub	r10,r0,4
800079c0:	e0 4a 00 24 	cp.w	r10,36
800079c4:	e0 8b 00 25 	brhi	80007a0e <_realloc_r+0x13e>
800079c8:	0a 99       	mov	r9,r5
800079ca:	59 3a       	cp.w	r10,19
800079cc:	e0 88 00 1a 	brls	80007a00 <_realloc_r+0x130>
800079d0:	09 09       	ld.w	r9,r4++
800079d2:	8b 09       	st.w	r5[0x0],r9
800079d4:	09 09       	ld.w	r9,r4++
800079d6:	8f 39       	st.w	r7[0xc],r9
800079d8:	ee c9 ff f0 	sub	r9,r7,-16
800079dc:	59 ba       	cp.w	r10,27
800079de:	e0 88 00 11 	brls	80007a00 <_realloc_r+0x130>
800079e2:	09 0b       	ld.w	r11,r4++
800079e4:	93 0b       	st.w	r9[0x0],r11
800079e6:	09 09       	ld.w	r9,r4++
800079e8:	8f 59       	st.w	r7[0x14],r9
800079ea:	ee c9 ff e8 	sub	r9,r7,-24
800079ee:	e0 4a 00 24 	cp.w	r10,36
800079f2:	c0 71       	brne	80007a00 <_realloc_r+0x130>
800079f4:	09 0a       	ld.w	r10,r4++
800079f6:	93 0a       	st.w	r9[0x0],r10
800079f8:	ee c9 ff e0 	sub	r9,r7,-32
800079fc:	09 0a       	ld.w	r10,r4++
800079fe:	8f 7a       	st.w	r7[0x1c],r10
80007a00:	09 0a       	ld.w	r10,r4++
80007a02:	12 aa       	st.w	r9++,r10
80007a04:	68 0a       	ld.w	r10,r4[0x0]
80007a06:	93 0a       	st.w	r9[0x0],r10
80007a08:	68 1a       	ld.w	r10,r4[0x4]
80007a0a:	93 1a       	st.w	r9[0x4],r10
80007a0c:	c0 78       	rjmp	80007a1a <_realloc_r+0x14a>
80007a0e:	50 08       	stdsp	sp[0x0],r8
80007a10:	08 9b       	mov	r11,r4
80007a12:	0a 9c       	mov	r12,r5
80007a14:	fe b0 fc 4b 	rcall	800072aa <memmove>
80007a18:	40 08       	lddsp	r8,sp[0x0]
80007a1a:	ee 06 00 09 	add	r9,r7,r6
80007a1e:	0c 13       	sub	r3,r6
80007a20:	a1 a3       	sbr	r3,0x0
80007a22:	93 13       	st.w	r9[0x4],r3
80007a24:	91 29       	st.w	r8[0x8],r9
80007a26:	04 9c       	mov	r12,r2
80007a28:	6e 18       	ld.w	r8,r7[0x4]
80007a2a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a2e:	10 46       	or	r6,r8
80007a30:	8f 16       	st.w	r7[0x4],r6
80007a32:	ca a8       	rjmp	80007b86 <_realloc_r+0x2b6>
80007a34:	14 03       	add	r3,r10
80007a36:	0c 33       	cp.w	r3,r6
80007a38:	c0 85       	brlt	80007a48 <_realloc_r+0x178>
80007a3a:	72 28       	ld.w	r8,r9[0x8]
80007a3c:	72 39       	ld.w	r9,r9[0xc]
80007a3e:	93 28       	st.w	r9[0x8],r8
80007a40:	91 39       	st.w	r8[0xc],r9
80007a42:	6e 28       	ld.w	r8,r7[0x8]
80007a44:	6e 39       	ld.w	r9,r7[0xc]
80007a46:	c0 78       	rjmp	80007a54 <_realloc_r+0x184>
80007a48:	f8 00 00 03 	add	r3,r12,r0
80007a4c:	0c 33       	cp.w	r3,r6
80007a4e:	c3 35       	brlt	80007ab4 <_realloc_r+0x1e4>
80007a50:	6e 39       	ld.w	r9,r7[0xc]
80007a52:	6e 28       	ld.w	r8,r7[0x8]
80007a54:	93 28       	st.w	r9[0x8],r8
80007a56:	91 39       	st.w	r8[0xc],r9
80007a58:	e0 ca 00 04 	sub	r10,r0,4
80007a5c:	ee cc ff f8 	sub	r12,r7,-8
80007a60:	e0 4a 00 24 	cp.w	r10,36
80007a64:	e0 8b 00 24 	brhi	80007aac <_realloc_r+0x1dc>
80007a68:	59 3a       	cp.w	r10,19
80007a6a:	e0 88 00 1a 	brls	80007a9e <_realloc_r+0x1ce>
80007a6e:	09 08       	ld.w	r8,r4++
80007a70:	99 08       	st.w	r12[0x0],r8
80007a72:	09 08       	ld.w	r8,r4++
80007a74:	8f 38       	st.w	r7[0xc],r8
80007a76:	ee cc ff f0 	sub	r12,r7,-16
80007a7a:	59 ba       	cp.w	r10,27
80007a7c:	e0 88 00 11 	brls	80007a9e <_realloc_r+0x1ce>
80007a80:	09 08       	ld.w	r8,r4++
80007a82:	99 08       	st.w	r12[0x0],r8
80007a84:	09 08       	ld.w	r8,r4++
80007a86:	8f 58       	st.w	r7[0x14],r8
80007a88:	ee cc ff e8 	sub	r12,r7,-24
80007a8c:	e0 4a 00 24 	cp.w	r10,36
80007a90:	c0 71       	brne	80007a9e <_realloc_r+0x1ce>
80007a92:	09 08       	ld.w	r8,r4++
80007a94:	99 08       	st.w	r12[0x0],r8
80007a96:	ee cc ff e0 	sub	r12,r7,-32
80007a9a:	09 08       	ld.w	r8,r4++
80007a9c:	8f 78       	st.w	r7[0x1c],r8
80007a9e:	09 08       	ld.w	r8,r4++
80007aa0:	18 a8       	st.w	r12++,r8
80007aa2:	68 08       	ld.w	r8,r4[0x0]
80007aa4:	99 08       	st.w	r12[0x0],r8
80007aa6:	68 18       	ld.w	r8,r4[0x4]
80007aa8:	99 18       	st.w	r12[0x4],r8
80007aaa:	c4 78       	rjmp	80007b38 <_realloc_r+0x268>
80007aac:	08 9b       	mov	r11,r4
80007aae:	fe b0 fb fe 	rcall	800072aa <memmove>
80007ab2:	c4 38       	rjmp	80007b38 <_realloc_r+0x268>
80007ab4:	04 9c       	mov	r12,r2
80007ab6:	fe b0 f9 d7 	rcall	80006e64 <_malloc_r>
80007aba:	18 95       	mov	r5,r12
80007abc:	c3 a0       	breq	80007b30 <_realloc_r+0x260>
80007abe:	62 18       	ld.w	r8,r1[0x4]
80007ac0:	f8 c9 00 08 	sub	r9,r12,8
80007ac4:	a1 c8       	cbr	r8,0x0
80007ac6:	e2 08 00 08 	add	r8,r1,r8
80007aca:	10 39       	cp.w	r9,r8
80007acc:	c0 71       	brne	80007ada <_realloc_r+0x20a>
80007ace:	72 13       	ld.w	r3,r9[0x4]
80007ad0:	02 97       	mov	r7,r1
80007ad2:	e0 13 ff fc 	andl	r3,0xfffc
80007ad6:	00 03       	add	r3,r0
80007ad8:	c3 08       	rjmp	80007b38 <_realloc_r+0x268>
80007ada:	e0 ca 00 04 	sub	r10,r0,4
80007ade:	e0 4a 00 24 	cp.w	r10,36
80007ae2:	e0 8b 00 20 	brhi	80007b22 <_realloc_r+0x252>
80007ae6:	08 99       	mov	r9,r4
80007ae8:	18 98       	mov	r8,r12
80007aea:	59 3a       	cp.w	r10,19
80007aec:	e0 88 00 14 	brls	80007b14 <_realloc_r+0x244>
80007af0:	13 0b       	ld.w	r11,r9++
80007af2:	10 ab       	st.w	r8++,r11
80007af4:	13 0b       	ld.w	r11,r9++
80007af6:	10 ab       	st.w	r8++,r11
80007af8:	59 ba       	cp.w	r10,27
80007afa:	e0 88 00 0d 	brls	80007b14 <_realloc_r+0x244>
80007afe:	13 0b       	ld.w	r11,r9++
80007b00:	10 ab       	st.w	r8++,r11
80007b02:	13 0b       	ld.w	r11,r9++
80007b04:	10 ab       	st.w	r8++,r11
80007b06:	e0 4a 00 24 	cp.w	r10,36
80007b0a:	c0 51       	brne	80007b14 <_realloc_r+0x244>
80007b0c:	13 0a       	ld.w	r10,r9++
80007b0e:	10 aa       	st.w	r8++,r10
80007b10:	13 0a       	ld.w	r10,r9++
80007b12:	10 aa       	st.w	r8++,r10
80007b14:	13 0a       	ld.w	r10,r9++
80007b16:	10 aa       	st.w	r8++,r10
80007b18:	72 0a       	ld.w	r10,r9[0x0]
80007b1a:	91 0a       	st.w	r8[0x0],r10
80007b1c:	72 19       	ld.w	r9,r9[0x4]
80007b1e:	91 19       	st.w	r8[0x4],r9
80007b20:	c0 48       	rjmp	80007b28 <_realloc_r+0x258>
80007b22:	08 9b       	mov	r11,r4
80007b24:	fe b0 fb c3 	rcall	800072aa <memmove>
80007b28:	08 9b       	mov	r11,r4
80007b2a:	04 9c       	mov	r12,r2
80007b2c:	fe b0 f6 f6 	rcall	80006918 <_free_r>
80007b30:	04 9c       	mov	r12,r2
80007b32:	c2 a8       	rjmp	80007b86 <_realloc_r+0x2b6>
80007b34:	00 93       	mov	r3,r0
80007b36:	02 97       	mov	r7,r1
80007b38:	e6 06 01 09 	sub	r9,r3,r6
80007b3c:	6e 18       	ld.w	r8,r7[0x4]
80007b3e:	58 f9       	cp.w	r9,15
80007b40:	e0 88 00 16 	brls	80007b6c <_realloc_r+0x29c>
80007b44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b48:	ed e8 10 08 	or	r8,r6,r8
80007b4c:	8f 18       	st.w	r7[0x4],r8
80007b4e:	12 98       	mov	r8,r9
80007b50:	a1 a8       	sbr	r8,0x0
80007b52:	ee 06 00 0b 	add	r11,r7,r6
80007b56:	f6 09 00 09 	add	r9,r11,r9
80007b5a:	97 18       	st.w	r11[0x4],r8
80007b5c:	72 18       	ld.w	r8,r9[0x4]
80007b5e:	a1 a8       	sbr	r8,0x0
80007b60:	2f 8b       	sub	r11,-8
80007b62:	93 18       	st.w	r9[0x4],r8
80007b64:	04 9c       	mov	r12,r2
80007b66:	fe b0 f6 d9 	rcall	80006918 <_free_r>
80007b6a:	c0 b8       	rjmp	80007b80 <_realloc_r+0x2b0>
80007b6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b70:	e7 e8 10 08 	or	r8,r3,r8
80007b74:	8f 18       	st.w	r7[0x4],r8
80007b76:	ee 03 00 03 	add	r3,r7,r3
80007b7a:	66 18       	ld.w	r8,r3[0x4]
80007b7c:	a1 a8       	sbr	r8,0x0
80007b7e:	87 18       	st.w	r3[0x4],r8
80007b80:	04 9c       	mov	r12,r2
80007b82:	ee c5 ff f8 	sub	r5,r7,-8
80007b86:	fe b0 fb b9 	rcall	800072f8 <__malloc_unlock>
80007b8a:	0a 9c       	mov	r12,r5
80007b8c:	2f fd       	sub	sp,-4
80007b8e:	d8 32       	popm	r0-r7,pc

80007b90 <__isinfd>:
80007b90:	14 98       	mov	r8,r10
80007b92:	fc 19 7f f0 	movh	r9,0x7ff0
80007b96:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b9a:	f0 0b 11 00 	rsub	r11,r8,0
80007b9e:	f7 e8 10 08 	or	r8,r11,r8
80007ba2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007ba6:	f2 08 01 08 	sub	r8,r9,r8
80007baa:	f0 0c 11 00 	rsub	r12,r8,0
80007bae:	f9 e8 10 08 	or	r8,r12,r8
80007bb2:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007bb6:	2f fc       	sub	r12,-1
80007bb8:	5e fc       	retal	r12

80007bba <__isnand>:
80007bba:	14 98       	mov	r8,r10
80007bbc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007bc0:	f0 0c 11 00 	rsub	r12,r8,0
80007bc4:	10 4c       	or	r12,r8
80007bc6:	fc 18 7f f0 	movh	r8,0x7ff0
80007bca:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007bce:	f0 0c 01 0c 	sub	r12,r8,r12
80007bd2:	bf 9c       	lsr	r12,0x1f
80007bd4:	5e fc       	retal	r12
80007bd6:	d7 03       	nop

80007bd8 <_sbrk_r>:
80007bd8:	d4 21       	pushm	r4-r7,lr
80007bda:	30 08       	mov	r8,0
80007bdc:	18 97       	mov	r7,r12
80007bde:	e0 66 08 60 	mov	r6,2144
80007be2:	16 9c       	mov	r12,r11
80007be4:	8d 08       	st.w	r6[0x0],r8
80007be6:	ca fc       	rcall	80007d44 <_sbrk>
80007be8:	5b fc       	cp.w	r12,-1
80007bea:	c0 51       	brne	80007bf4 <_sbrk_r+0x1c>
80007bec:	6c 08       	ld.w	r8,r6[0x0]
80007bee:	58 08       	cp.w	r8,0
80007bf0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007bf4:	d8 22       	popm	r4-r7,pc
80007bf6:	d7 03       	nop

80007bf8 <__sclose>:
80007bf8:	d4 01       	pushm	lr
80007bfa:	96 7b       	ld.sh	r11,r11[0xe]
80007bfc:	cf ec       	rcall	80007df8 <_close_r>
80007bfe:	d8 02       	popm	pc

80007c00 <__sseek>:
80007c00:	d4 21       	pushm	r4-r7,lr
80007c02:	16 97       	mov	r7,r11
80007c04:	96 7b       	ld.sh	r11,r11[0xe]
80007c06:	c8 5d       	rcall	80007f10 <_lseek_r>
80007c08:	8e 68       	ld.sh	r8,r7[0xc]
80007c0a:	10 99       	mov	r9,r8
80007c0c:	ad c8       	cbr	r8,0xc
80007c0e:	ad a9       	sbr	r9,0xc
80007c10:	5b fc       	cp.w	r12,-1
80007c12:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007c16:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007c1a:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007c1e:	d8 22       	popm	r4-r7,pc

80007c20 <__swrite>:
80007c20:	d4 21       	pushm	r4-r7,lr
80007c22:	96 68       	ld.sh	r8,r11[0xc]
80007c24:	16 97       	mov	r7,r11
80007c26:	14 95       	mov	r5,r10
80007c28:	12 94       	mov	r4,r9
80007c2a:	e2 18 01 00 	andl	r8,0x100,COH
80007c2e:	18 96       	mov	r6,r12
80007c30:	c0 50       	breq	80007c3a <__swrite+0x1a>
80007c32:	30 29       	mov	r9,2
80007c34:	30 0a       	mov	r10,0
80007c36:	96 7b       	ld.sh	r11,r11[0xe]
80007c38:	c6 cd       	rcall	80007f10 <_lseek_r>
80007c3a:	8e 68       	ld.sh	r8,r7[0xc]
80007c3c:	ad c8       	cbr	r8,0xc
80007c3e:	08 99       	mov	r9,r4
80007c40:	0a 9a       	mov	r10,r5
80007c42:	8e 7b       	ld.sh	r11,r7[0xe]
80007c44:	0c 9c       	mov	r12,r6
80007c46:	ae 68       	st.h	r7[0xc],r8
80007c48:	c9 ac       	rcall	80007d7c <_write_r>
80007c4a:	d8 22       	popm	r4-r7,pc

80007c4c <__sread>:
80007c4c:	d4 21       	pushm	r4-r7,lr
80007c4e:	16 97       	mov	r7,r11
80007c50:	96 7b       	ld.sh	r11,r11[0xe]
80007c52:	c7 1d       	rcall	80007f34 <_read_r>
80007c54:	c0 65       	brlt	80007c60 <__sread+0x14>
80007c56:	6f 58       	ld.w	r8,r7[0x54]
80007c58:	18 08       	add	r8,r12
80007c5a:	ef 48 00 54 	st.w	r7[84],r8
80007c5e:	d8 22       	popm	r4-r7,pc
80007c60:	8e 68       	ld.sh	r8,r7[0xc]
80007c62:	ad c8       	cbr	r8,0xc
80007c64:	ae 68       	st.h	r7[0xc],r8
80007c66:	d8 22       	popm	r4-r7,pc

80007c68 <strlen>:
80007c68:	30 09       	mov	r9,0
80007c6a:	18 98       	mov	r8,r12
80007c6c:	c0 28       	rjmp	80007c70 <strlen+0x8>
80007c6e:	2f f8       	sub	r8,-1
80007c70:	11 8a       	ld.ub	r10,r8[0x0]
80007c72:	f2 0a 18 00 	cp.b	r10,r9
80007c76:	cf c1       	brne	80007c6e <strlen+0x6>
80007c78:	f0 0c 01 0c 	sub	r12,r8,r12
80007c7c:	5e fc       	retal	r12
80007c7e:	d7 03       	nop

80007c80 <_close>:
80007c80:	30 28       	mov	r8,2
80007c82:	d6 73       	breakpoint
80007c84:	3f fc       	mov	r12,-1
80007c86:	35 8b       	mov	r11,88
80007c88:	58 0c       	cp.w	r12,0
80007c8a:	5e 4c       	retge	r12
80007c8c:	e0 6a 08 60 	mov	r10,2144
80007c90:	95 0b       	st.w	r10[0x0],r11
80007c92:	5e fc       	retal	r12

80007c94 <_lseek>:
80007c94:	30 58       	mov	r8,5
80007c96:	d6 73       	breakpoint
80007c98:	3f fc       	mov	r12,-1
80007c9a:	35 8b       	mov	r11,88
80007c9c:	58 0c       	cp.w	r12,0
80007c9e:	5e 4c       	retge	r12
80007ca0:	e0 6a 08 60 	mov	r10,2144
80007ca4:	95 0b       	st.w	r10[0x0],r11
80007ca6:	5e fc       	retal	r12

80007ca8 <_read>:
80007ca8:	30 38       	mov	r8,3
80007caa:	d6 73       	breakpoint
80007cac:	3f fc       	mov	r12,-1
80007cae:	35 8b       	mov	r11,88
80007cb0:	58 0c       	cp.w	r12,0
80007cb2:	5e 4c       	retge	r12
80007cb4:	e0 6a 08 60 	mov	r10,2144
80007cb8:	95 0b       	st.w	r10[0x0],r11
80007cba:	5e fc       	retal	r12

80007cbc <_write>:
80007cbc:	30 48       	mov	r8,4
80007cbe:	d6 73       	breakpoint
80007cc0:	3f fc       	mov	r12,-1
80007cc2:	35 8b       	mov	r11,88
80007cc4:	58 0c       	cp.w	r12,0
80007cc6:	5e 4c       	retge	r12
80007cc8:	e0 6a 08 60 	mov	r10,2144
80007ccc:	95 0b       	st.w	r10[0x0],r11
80007cce:	5e fc       	retal	r12

80007cd0 <isatty>:
80007cd0:	30 b8       	mov	r8,11
80007cd2:	d6 73       	breakpoint
80007cd4:	3f fc       	mov	r12,-1
80007cd6:	35 8b       	mov	r11,88
80007cd8:	58 0c       	cp.w	r12,0
80007cda:	5e 4c       	retge	r12
80007cdc:	e0 6a 08 60 	mov	r10,2144
80007ce0:	95 0b       	st.w	r10[0x0],r11
80007ce2:	5e fc       	retal	r12

80007ce4 <_fstat_host>:
80007ce4:	30 98       	mov	r8,9
80007ce6:	d6 73       	breakpoint
80007ce8:	3f fc       	mov	r12,-1
80007cea:	35 8b       	mov	r11,88
80007cec:	58 0c       	cp.w	r12,0
80007cee:	5e 4c       	retge	r12
80007cf0:	e0 6a 08 60 	mov	r10,2144
80007cf4:	95 0b       	st.w	r10[0x0],r11
80007cf6:	5e fc       	retal	r12

80007cf8 <_fstat>:
80007cf8:	d4 21       	pushm	r4-r7,lr
80007cfa:	21 0d       	sub	sp,64
80007cfc:	16 97       	mov	r7,r11
80007cfe:	1a 9b       	mov	r11,sp
80007d00:	cf 2f       	rcall	80007ce4 <_fstat_host>
80007d02:	c0 34       	brge	80007d08 <_fstat+0x10>
80007d04:	3f fc       	mov	r12,-1
80007d06:	c1 c8       	rjmp	80007d3e <_fstat+0x46>
80007d08:	40 08       	lddsp	r8,sp[0x0]
80007d0a:	ae 08       	st.h	r7[0x0],r8
80007d0c:	40 18       	lddsp	r8,sp[0x4]
80007d0e:	ae 18       	st.h	r7[0x2],r8
80007d10:	40 28       	lddsp	r8,sp[0x8]
80007d12:	8f 18       	st.w	r7[0x4],r8
80007d14:	40 38       	lddsp	r8,sp[0xc]
80007d16:	ae 48       	st.h	r7[0x8],r8
80007d18:	40 48       	lddsp	r8,sp[0x10]
80007d1a:	ae 58       	st.h	r7[0xa],r8
80007d1c:	40 58       	lddsp	r8,sp[0x14]
80007d1e:	ae 68       	st.h	r7[0xc],r8
80007d20:	40 68       	lddsp	r8,sp[0x18]
80007d22:	ae 78       	st.h	r7[0xe],r8
80007d24:	40 88       	lddsp	r8,sp[0x20]
80007d26:	8f 48       	st.w	r7[0x10],r8
80007d28:	40 a8       	lddsp	r8,sp[0x28]
80007d2a:	8f b8       	st.w	r7[0x2c],r8
80007d2c:	40 c8       	lddsp	r8,sp[0x30]
80007d2e:	8f c8       	st.w	r7[0x30],r8
80007d30:	40 d8       	lddsp	r8,sp[0x34]
80007d32:	8f 58       	st.w	r7[0x14],r8
80007d34:	40 e8       	lddsp	r8,sp[0x38]
80007d36:	30 0c       	mov	r12,0
80007d38:	8f 78       	st.w	r7[0x1c],r8
80007d3a:	40 f8       	lddsp	r8,sp[0x3c]
80007d3c:	8f 98       	st.w	r7[0x24],r8
80007d3e:	2f 0d       	sub	sp,-64
80007d40:	d8 22       	popm	r4-r7,pc
80007d42:	d7 03       	nop

80007d44 <_sbrk>:
80007d44:	d4 01       	pushm	lr
80007d46:	e0 68 07 5c 	mov	r8,1884
80007d4a:	70 09       	ld.w	r9,r8[0x0]
80007d4c:	58 09       	cp.w	r9,0
80007d4e:	c0 41       	brne	80007d56 <_sbrk+0x12>
80007d50:	e0 69 08 68 	mov	r9,2152
80007d54:	91 09       	st.w	r8[0x0],r9
80007d56:	e0 69 07 5c 	mov	r9,1884
80007d5a:	e0 6a f0 00 	mov	r10,61440
80007d5e:	72 08       	ld.w	r8,r9[0x0]
80007d60:	f0 0c 00 0c 	add	r12,r8,r12
80007d64:	14 3c       	cp.w	r12,r10
80007d66:	e0 8b 00 04 	brhi	80007d6e <_sbrk+0x2a>
80007d6a:	93 0c       	st.w	r9[0x0],r12
80007d6c:	c0 58       	rjmp	80007d76 <_sbrk+0x32>
80007d6e:	c5 5c       	rcall	80007e18 <__errno>
80007d70:	30 c8       	mov	r8,12
80007d72:	99 08       	st.w	r12[0x0],r8
80007d74:	3f f8       	mov	r8,-1
80007d76:	10 9c       	mov	r12,r8
80007d78:	d8 02       	popm	pc
80007d7a:	d7 03       	nop

80007d7c <_write_r>:
80007d7c:	d4 21       	pushm	r4-r7,lr
80007d7e:	16 98       	mov	r8,r11
80007d80:	18 97       	mov	r7,r12
80007d82:	10 9c       	mov	r12,r8
80007d84:	30 08       	mov	r8,0
80007d86:	14 9b       	mov	r11,r10
80007d88:	e0 66 08 60 	mov	r6,2144
80007d8c:	12 9a       	mov	r10,r9
80007d8e:	8d 08       	st.w	r6[0x0],r8
80007d90:	c9 6f       	rcall	80007cbc <_write>
80007d92:	5b fc       	cp.w	r12,-1
80007d94:	c0 51       	brne	80007d9e <_write_r+0x22>
80007d96:	6c 08       	ld.w	r8,r6[0x0]
80007d98:	58 08       	cp.w	r8,0
80007d9a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d9e:	d8 22       	popm	r4-r7,pc

80007da0 <_calloc_r>:
80007da0:	d4 21       	pushm	r4-r7,lr
80007da2:	f4 0b 02 4b 	mul	r11,r10,r11
80007da6:	fe b0 f8 5f 	rcall	80006e64 <_malloc_r>
80007daa:	18 97       	mov	r7,r12
80007dac:	c2 30       	breq	80007df2 <_calloc_r+0x52>
80007dae:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007db2:	e0 1a ff fc 	andl	r10,0xfffc
80007db6:	20 4a       	sub	r10,4
80007db8:	e0 4a 00 24 	cp.w	r10,36
80007dbc:	e0 8b 00 18 	brhi	80007dec <_calloc_r+0x4c>
80007dc0:	18 98       	mov	r8,r12
80007dc2:	59 3a       	cp.w	r10,19
80007dc4:	e0 88 00 0f 	brls	80007de2 <_calloc_r+0x42>
80007dc8:	30 09       	mov	r9,0
80007dca:	10 a9       	st.w	r8++,r9
80007dcc:	10 a9       	st.w	r8++,r9
80007dce:	59 ba       	cp.w	r10,27
80007dd0:	e0 88 00 09 	brls	80007de2 <_calloc_r+0x42>
80007dd4:	10 a9       	st.w	r8++,r9
80007dd6:	10 a9       	st.w	r8++,r9
80007dd8:	e0 4a 00 24 	cp.w	r10,36
80007ddc:	c0 31       	brne	80007de2 <_calloc_r+0x42>
80007dde:	10 a9       	st.w	r8++,r9
80007de0:	10 a9       	st.w	r8++,r9
80007de2:	30 09       	mov	r9,0
80007de4:	10 a9       	st.w	r8++,r9
80007de6:	91 19       	st.w	r8[0x4],r9
80007de8:	91 09       	st.w	r8[0x0],r9
80007dea:	c0 48       	rjmp	80007df2 <_calloc_r+0x52>
80007dec:	30 0b       	mov	r11,0
80007dee:	fe b0 fa 7d 	rcall	800072e8 <memset>
80007df2:	0e 9c       	mov	r12,r7
80007df4:	d8 22       	popm	r4-r7,pc
80007df6:	d7 03       	nop

80007df8 <_close_r>:
80007df8:	d4 21       	pushm	r4-r7,lr
80007dfa:	30 08       	mov	r8,0
80007dfc:	18 97       	mov	r7,r12
80007dfe:	e0 66 08 60 	mov	r6,2144
80007e02:	16 9c       	mov	r12,r11
80007e04:	8d 08       	st.w	r6[0x0],r8
80007e06:	c3 df       	rcall	80007c80 <_close>
80007e08:	5b fc       	cp.w	r12,-1
80007e0a:	c0 51       	brne	80007e14 <_close_r+0x1c>
80007e0c:	6c 08       	ld.w	r8,r6[0x0]
80007e0e:	58 08       	cp.w	r8,0
80007e10:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e14:	d8 22       	popm	r4-r7,pc
80007e16:	d7 03       	nop

80007e18 <__errno>:
80007e18:	e0 68 00 f8 	mov	r8,248
80007e1c:	70 0c       	ld.w	r12,r8[0x0]
80007e1e:	2f 4c       	sub	r12,-12
80007e20:	5e fc       	retal	r12
80007e22:	d7 03       	nop

80007e24 <_fclose_r>:
80007e24:	d4 21       	pushm	r4-r7,lr
80007e26:	18 96       	mov	r6,r12
80007e28:	16 97       	mov	r7,r11
80007e2a:	58 0b       	cp.w	r11,0
80007e2c:	c0 31       	brne	80007e32 <_fclose_r+0xe>
80007e2e:	16 95       	mov	r5,r11
80007e30:	c5 38       	rjmp	80007ed6 <_fclose_r+0xb2>
80007e32:	fe b0 f4 87 	rcall	80006740 <__sfp_lock_acquire>
80007e36:	58 06       	cp.w	r6,0
80007e38:	c0 70       	breq	80007e46 <_fclose_r+0x22>
80007e3a:	6c 68       	ld.w	r8,r6[0x18]
80007e3c:	58 08       	cp.w	r8,0
80007e3e:	c0 41       	brne	80007e46 <_fclose_r+0x22>
80007e40:	0c 9c       	mov	r12,r6
80007e42:	fe b0 f4 d1 	rcall	800067e4 <__sinit>
80007e46:	fe c8 cf 8a 	sub	r8,pc,-12406
80007e4a:	10 37       	cp.w	r7,r8
80007e4c:	c0 31       	brne	80007e52 <_fclose_r+0x2e>
80007e4e:	6c 07       	ld.w	r7,r6[0x0]
80007e50:	c0 c8       	rjmp	80007e68 <_fclose_r+0x44>
80007e52:	fe c8 cf 76 	sub	r8,pc,-12426
80007e56:	10 37       	cp.w	r7,r8
80007e58:	c0 31       	brne	80007e5e <_fclose_r+0x3a>
80007e5a:	6c 17       	ld.w	r7,r6[0x4]
80007e5c:	c0 68       	rjmp	80007e68 <_fclose_r+0x44>
80007e5e:	fe c8 cf 62 	sub	r8,pc,-12446
80007e62:	10 37       	cp.w	r7,r8
80007e64:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007e68:	8e 69       	ld.sh	r9,r7[0xc]
80007e6a:	30 08       	mov	r8,0
80007e6c:	f0 09 19 00 	cp.h	r9,r8
80007e70:	c0 51       	brne	80007e7a <_fclose_r+0x56>
80007e72:	fe b0 f4 68 	rcall	80006742 <__sfp_lock_release>
80007e76:	30 05       	mov	r5,0
80007e78:	c2 f8       	rjmp	80007ed6 <_fclose_r+0xb2>
80007e7a:	0e 9b       	mov	r11,r7
80007e7c:	0c 9c       	mov	r12,r6
80007e7e:	fe b0 f3 db 	rcall	80006634 <_fflush_r>
80007e82:	6e c8       	ld.w	r8,r7[0x30]
80007e84:	18 95       	mov	r5,r12
80007e86:	58 08       	cp.w	r8,0
80007e88:	c0 60       	breq	80007e94 <_fclose_r+0x70>
80007e8a:	6e 8b       	ld.w	r11,r7[0x20]
80007e8c:	0c 9c       	mov	r12,r6
80007e8e:	5d 18       	icall	r8
80007e90:	f9 b5 05 ff 	movlt	r5,-1
80007e94:	8e 68       	ld.sh	r8,r7[0xc]
80007e96:	ed b8 00 07 	bld	r8,0x7
80007e9a:	c0 51       	brne	80007ea4 <_fclose_r+0x80>
80007e9c:	6e 4b       	ld.w	r11,r7[0x10]
80007e9e:	0c 9c       	mov	r12,r6
80007ea0:	fe b0 f5 3c 	rcall	80006918 <_free_r>
80007ea4:	6e db       	ld.w	r11,r7[0x34]
80007ea6:	58 0b       	cp.w	r11,0
80007ea8:	c0 a0       	breq	80007ebc <_fclose_r+0x98>
80007eaa:	ee c8 ff bc 	sub	r8,r7,-68
80007eae:	10 3b       	cp.w	r11,r8
80007eb0:	c0 40       	breq	80007eb8 <_fclose_r+0x94>
80007eb2:	0c 9c       	mov	r12,r6
80007eb4:	fe b0 f5 32 	rcall	80006918 <_free_r>
80007eb8:	30 08       	mov	r8,0
80007eba:	8f d8       	st.w	r7[0x34],r8
80007ebc:	6f 2b       	ld.w	r11,r7[0x48]
80007ebe:	58 0b       	cp.w	r11,0
80007ec0:	c0 70       	breq	80007ece <_fclose_r+0xaa>
80007ec2:	0c 9c       	mov	r12,r6
80007ec4:	fe b0 f5 2a 	rcall	80006918 <_free_r>
80007ec8:	30 08       	mov	r8,0
80007eca:	ef 48 00 48 	st.w	r7[72],r8
80007ece:	30 08       	mov	r8,0
80007ed0:	ae 68       	st.h	r7[0xc],r8
80007ed2:	fe b0 f4 38 	rcall	80006742 <__sfp_lock_release>
80007ed6:	0a 9c       	mov	r12,r5
80007ed8:	d8 22       	popm	r4-r7,pc
80007eda:	d7 03       	nop

80007edc <fclose>:
80007edc:	d4 01       	pushm	lr
80007ede:	e0 68 00 f8 	mov	r8,248
80007ee2:	18 9b       	mov	r11,r12
80007ee4:	70 0c       	ld.w	r12,r8[0x0]
80007ee6:	c9 ff       	rcall	80007e24 <_fclose_r>
80007ee8:	d8 02       	popm	pc
80007eea:	d7 03       	nop

80007eec <_fstat_r>:
80007eec:	d4 21       	pushm	r4-r7,lr
80007eee:	16 98       	mov	r8,r11
80007ef0:	18 97       	mov	r7,r12
80007ef2:	10 9c       	mov	r12,r8
80007ef4:	30 08       	mov	r8,0
80007ef6:	e0 66 08 60 	mov	r6,2144
80007efa:	14 9b       	mov	r11,r10
80007efc:	8d 08       	st.w	r6[0x0],r8
80007efe:	cf de       	rcall	80007cf8 <_fstat>
80007f00:	5b fc       	cp.w	r12,-1
80007f02:	c0 51       	brne	80007f0c <_fstat_r+0x20>
80007f04:	6c 08       	ld.w	r8,r6[0x0]
80007f06:	58 08       	cp.w	r8,0
80007f08:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f0c:	d8 22       	popm	r4-r7,pc
80007f0e:	d7 03       	nop

80007f10 <_lseek_r>:
80007f10:	d4 21       	pushm	r4-r7,lr
80007f12:	16 98       	mov	r8,r11
80007f14:	18 97       	mov	r7,r12
80007f16:	10 9c       	mov	r12,r8
80007f18:	30 08       	mov	r8,0
80007f1a:	14 9b       	mov	r11,r10
80007f1c:	e0 66 08 60 	mov	r6,2144
80007f20:	12 9a       	mov	r10,r9
80007f22:	8d 08       	st.w	r6[0x0],r8
80007f24:	cb 8e       	rcall	80007c94 <_lseek>
80007f26:	5b fc       	cp.w	r12,-1
80007f28:	c0 51       	brne	80007f32 <_lseek_r+0x22>
80007f2a:	6c 08       	ld.w	r8,r6[0x0]
80007f2c:	58 08       	cp.w	r8,0
80007f2e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f32:	d8 22       	popm	r4-r7,pc

80007f34 <_read_r>:
80007f34:	d4 21       	pushm	r4-r7,lr
80007f36:	16 98       	mov	r8,r11
80007f38:	18 97       	mov	r7,r12
80007f3a:	10 9c       	mov	r12,r8
80007f3c:	30 08       	mov	r8,0
80007f3e:	14 9b       	mov	r11,r10
80007f40:	e0 66 08 60 	mov	r6,2144
80007f44:	12 9a       	mov	r10,r9
80007f46:	8d 08       	st.w	r6[0x0],r8
80007f48:	cb 0e       	rcall	80007ca8 <_read>
80007f4a:	5b fc       	cp.w	r12,-1
80007f4c:	c0 51       	brne	80007f56 <_read_r+0x22>
80007f4e:	6c 08       	ld.w	r8,r6[0x0]
80007f50:	58 08       	cp.w	r8,0
80007f52:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f56:	d8 22       	popm	r4-r7,pc

80007f58 <__avr32_f64_mul>:
80007f58:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007f5c:	e0 80 00 dc 	breq	80008114 <__avr32_f64_mul_op1_zero>
80007f60:	d4 21       	pushm	r4-r7,lr
80007f62:	f7 e9 20 0e 	eor	lr,r11,r9
80007f66:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007f6a:	30 15       	mov	r5,1
80007f6c:	c4 30       	breq	80007ff2 <__avr32_f64_mul_op1_subnormal>
80007f6e:	ab 6b       	lsl	r11,0xa
80007f70:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007f74:	ab 6a       	lsl	r10,0xa
80007f76:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007f7a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007f7e:	c5 c0       	breq	80008036 <__avr32_f64_mul_op2_subnormal>
80007f80:	a1 78       	lsl	r8,0x1
80007f82:	5c f9       	rol	r9
80007f84:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007f88:	e0 47 07 ff 	cp.w	r7,2047
80007f8c:	c7 70       	breq	8000807a <__avr32_f64_mul_op_nan_or_inf>
80007f8e:	e0 46 07 ff 	cp.w	r6,2047
80007f92:	c7 40       	breq	8000807a <__avr32_f64_mul_op_nan_or_inf>
80007f94:	ee 06 00 0c 	add	r12,r7,r6
80007f98:	e0 2c 03 fe 	sub	r12,1022
80007f9c:	f6 08 06 44 	mulu.d	r4,r11,r8
80007fa0:	f4 09 07 44 	macu.d	r4,r10,r9
80007fa4:	f4 08 06 46 	mulu.d	r6,r10,r8
80007fa8:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007fac:	08 07       	add	r7,r4
80007fae:	f4 05 00 4a 	adc	r10,r10,r5
80007fb2:	5c 0b       	acr	r11
80007fb4:	ed bb 00 14 	bld	r11,0x14
80007fb8:	c0 50       	breq	80007fc2 <__avr32_f64_mul+0x6a>
80007fba:	a1 77       	lsl	r7,0x1
80007fbc:	5c fa       	rol	r10
80007fbe:	5c fb       	rol	r11
80007fc0:	20 1c       	sub	r12,1
80007fc2:	58 0c       	cp.w	r12,0
80007fc4:	e0 8a 00 6f 	brle	800080a2 <__avr32_f64_mul_res_subnormal>
80007fc8:	e0 4c 07 ff 	cp.w	r12,2047
80007fcc:	e0 84 00 9c 	brge	80008104 <__avr32_f64_mul_res_inf>
80007fd0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007fd4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007fd8:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007fdc:	ee 17 80 00 	eorh	r7,0x8000
80007fe0:	f1 b7 04 20 	satu	r7,0x1
80007fe4:	0e 0a       	add	r10,r7
80007fe6:	5c 0b       	acr	r11
80007fe8:	ed be 00 1f 	bld	lr,0x1f
80007fec:	ef bb 00 1f 	bst	r11,0x1f
80007ff0:	d8 22       	popm	r4-r7,pc

80007ff2 <__avr32_f64_mul_op1_subnormal>:
80007ff2:	e4 1b 00 0f 	andh	r11,0xf
80007ff6:	f4 0c 12 00 	clz	r12,r10
80007ffa:	f6 06 12 00 	clz	r6,r11
80007ffe:	f7 bc 03 e1 	sublo	r12,-31
80008002:	f8 06 17 30 	movlo	r6,r12
80008006:	f7 b6 02 01 	subhs	r6,1
8000800a:	e0 46 00 20 	cp.w	r6,32
8000800e:	c0 d4       	brge	80008028 <__avr32_f64_mul_op1_subnormal+0x36>
80008010:	ec 0c 11 20 	rsub	r12,r6,32
80008014:	f6 06 09 4b 	lsl	r11,r11,r6
80008018:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000801c:	18 4b       	or	r11,r12
8000801e:	f4 06 09 4a 	lsl	r10,r10,r6
80008022:	20 b6       	sub	r6,11
80008024:	0c 17       	sub	r7,r6
80008026:	ca ab       	rjmp	80007f7a <__avr32_f64_mul+0x22>
80008028:	f4 06 09 4b 	lsl	r11,r10,r6
8000802c:	c6 40       	breq	800080f4 <__avr32_f64_mul_res_zero>
8000802e:	30 0a       	mov	r10,0
80008030:	20 b6       	sub	r6,11
80008032:	0c 17       	sub	r7,r6
80008034:	ca 3b       	rjmp	80007f7a <__avr32_f64_mul+0x22>

80008036 <__avr32_f64_mul_op2_subnormal>:
80008036:	e4 19 00 0f 	andh	r9,0xf
8000803a:	f0 0c 12 00 	clz	r12,r8
8000803e:	f2 05 12 00 	clz	r5,r9
80008042:	f7 bc 03 ea 	sublo	r12,-22
80008046:	f8 05 17 30 	movlo	r5,r12
8000804a:	f7 b5 02 0a 	subhs	r5,10
8000804e:	e0 45 00 20 	cp.w	r5,32
80008052:	c0 d4       	brge	8000806c <__avr32_f64_mul_op2_subnormal+0x36>
80008054:	ea 0c 11 20 	rsub	r12,r5,32
80008058:	f2 05 09 49 	lsl	r9,r9,r5
8000805c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008060:	18 49       	or	r9,r12
80008062:	f0 05 09 48 	lsl	r8,r8,r5
80008066:	20 25       	sub	r5,2
80008068:	0a 16       	sub	r6,r5
8000806a:	c8 fb       	rjmp	80007f88 <__avr32_f64_mul+0x30>
8000806c:	f0 05 09 49 	lsl	r9,r8,r5
80008070:	c4 20       	breq	800080f4 <__avr32_f64_mul_res_zero>
80008072:	30 08       	mov	r8,0
80008074:	20 25       	sub	r5,2
80008076:	0a 16       	sub	r6,r5
80008078:	c8 8b       	rjmp	80007f88 <__avr32_f64_mul+0x30>

8000807a <__avr32_f64_mul_op_nan_or_inf>:
8000807a:	e4 19 00 0f 	andh	r9,0xf
8000807e:	e4 1b 00 0f 	andh	r11,0xf
80008082:	14 4b       	or	r11,r10
80008084:	10 49       	or	r9,r8
80008086:	e0 47 07 ff 	cp.w	r7,2047
8000808a:	c0 91       	brne	8000809c <__avr32_f64_mul_op1_not_naninf>
8000808c:	58 0b       	cp.w	r11,0
8000808e:	c3 81       	brne	800080fe <__avr32_f64_mul_res_nan>
80008090:	e0 46 07 ff 	cp.w	r6,2047
80008094:	c3 81       	brne	80008104 <__avr32_f64_mul_res_inf>
80008096:	58 09       	cp.w	r9,0
80008098:	c3 60       	breq	80008104 <__avr32_f64_mul_res_inf>
8000809a:	c3 28       	rjmp	800080fe <__avr32_f64_mul_res_nan>

8000809c <__avr32_f64_mul_op1_not_naninf>:
8000809c:	58 09       	cp.w	r9,0
8000809e:	c3 30       	breq	80008104 <__avr32_f64_mul_res_inf>
800080a0:	c2 f8       	rjmp	800080fe <__avr32_f64_mul_res_nan>

800080a2 <__avr32_f64_mul_res_subnormal>:
800080a2:	5c 3c       	neg	r12
800080a4:	2f fc       	sub	r12,-1
800080a6:	f1 bc 04 c0 	satu	r12,0x6
800080aa:	e0 4c 00 20 	cp.w	r12,32
800080ae:	c1 14       	brge	800080d0 <__avr32_f64_mul_res_subnormal+0x2e>
800080b0:	f8 08 11 20 	rsub	r8,r12,32
800080b4:	0e 46       	or	r6,r7
800080b6:	ee 0c 0a 47 	lsr	r7,r7,r12
800080ba:	f4 08 09 49 	lsl	r9,r10,r8
800080be:	12 47       	or	r7,r9
800080c0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800080c4:	f6 08 09 49 	lsl	r9,r11,r8
800080c8:	12 4a       	or	r10,r9
800080ca:	f6 0c 0a 4b 	lsr	r11,r11,r12
800080ce:	c8 3b       	rjmp	80007fd4 <__avr32_f64_mul+0x7c>
800080d0:	f8 08 11 20 	rsub	r8,r12,32
800080d4:	f9 b9 00 00 	moveq	r9,0
800080d8:	c0 30       	breq	800080de <__avr32_f64_mul_res_subnormal+0x3c>
800080da:	f6 08 09 49 	lsl	r9,r11,r8
800080de:	0e 46       	or	r6,r7
800080e0:	ed ea 10 16 	or	r6,r6,r10<<0x1
800080e4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800080e8:	f3 ea 10 07 	or	r7,r9,r10
800080ec:	f6 0c 0a 4a 	lsr	r10,r11,r12
800080f0:	30 0b       	mov	r11,0
800080f2:	c7 1b       	rjmp	80007fd4 <__avr32_f64_mul+0x7c>

800080f4 <__avr32_f64_mul_res_zero>:
800080f4:	1c 9b       	mov	r11,lr
800080f6:	e6 1b 80 00 	andh	r11,0x8000,COH
800080fa:	30 0a       	mov	r10,0
800080fc:	d8 22       	popm	r4-r7,pc

800080fe <__avr32_f64_mul_res_nan>:
800080fe:	3f fb       	mov	r11,-1
80008100:	3f fa       	mov	r10,-1
80008102:	d8 22       	popm	r4-r7,pc

80008104 <__avr32_f64_mul_res_inf>:
80008104:	f0 6b 00 00 	mov	r11,-1048576
80008108:	ed be 00 1f 	bld	lr,0x1f
8000810c:	ef bb 00 1f 	bst	r11,0x1f
80008110:	30 0a       	mov	r10,0
80008112:	d8 22       	popm	r4-r7,pc

80008114 <__avr32_f64_mul_op1_zero>:
80008114:	f7 e9 20 0b 	eor	r11,r11,r9
80008118:	e6 1b 80 00 	andh	r11,0x8000,COH
8000811c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008120:	e0 4c 07 ff 	cp.w	r12,2047
80008124:	5e 1c       	retne	r12
80008126:	3f fa       	mov	r10,-1
80008128:	3f fb       	mov	r11,-1
8000812a:	5e fc       	retal	r12

8000812c <__avr32_f64_sub_from_add>:
8000812c:	ee 19 80 00 	eorh	r9,0x8000

80008130 <__avr32_f64_sub>:
80008130:	f7 e9 20 0c 	eor	r12,r11,r9
80008134:	e0 86 00 ca 	brmi	800082c8 <__avr32_f64_add_from_sub>
80008138:	eb cd 40 e0 	pushm	r5-r7,lr
8000813c:	16 9c       	mov	r12,r11
8000813e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008142:	bf db       	cbr	r11,0x1f
80008144:	bf d9       	cbr	r9,0x1f
80008146:	10 3a       	cp.w	r10,r8
80008148:	f2 0b 13 00 	cpc	r11,r9
8000814c:	c0 92       	brcc	8000815e <__avr32_f64_sub+0x2e>
8000814e:	16 97       	mov	r7,r11
80008150:	12 9b       	mov	r11,r9
80008152:	0e 99       	mov	r9,r7
80008154:	14 97       	mov	r7,r10
80008156:	10 9a       	mov	r10,r8
80008158:	0e 98       	mov	r8,r7
8000815a:	ee 1c 80 00 	eorh	r12,0x8000
8000815e:	f6 07 16 14 	lsr	r7,r11,0x14
80008162:	ab 7b       	lsl	r11,0xb
80008164:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008168:	ab 7a       	lsl	r10,0xb
8000816a:	bf bb       	sbr	r11,0x1f
8000816c:	f2 06 16 14 	lsr	r6,r9,0x14
80008170:	c4 40       	breq	800081f8 <__avr32_f64_sub_opL_subnormal>
80008172:	ab 79       	lsl	r9,0xb
80008174:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008178:	ab 78       	lsl	r8,0xb
8000817a:	bf b9       	sbr	r9,0x1f

8000817c <__avr32_f64_sub_opL_subnormal_done>:
8000817c:	e0 47 07 ff 	cp.w	r7,2047
80008180:	c4 f0       	breq	8000821e <__avr32_f64_sub_opH_nan_or_inf>
80008182:	0e 26       	rsub	r6,r7
80008184:	c1 20       	breq	800081a8 <__avr32_f64_sub_shift_done>
80008186:	ec 05 11 20 	rsub	r5,r6,32
8000818a:	e0 46 00 20 	cp.w	r6,32
8000818e:	c7 c2       	brcc	80008286 <__avr32_f64_sub_longshift>
80008190:	f0 05 09 4e 	lsl	lr,r8,r5
80008194:	f2 05 09 45 	lsl	r5,r9,r5
80008198:	f0 06 0a 48 	lsr	r8,r8,r6
8000819c:	f2 06 0a 49 	lsr	r9,r9,r6
800081a0:	0a 48       	or	r8,r5
800081a2:	58 0e       	cp.w	lr,0
800081a4:	5f 1e       	srne	lr
800081a6:	1c 48       	or	r8,lr

800081a8 <__avr32_f64_sub_shift_done>:
800081a8:	10 1a       	sub	r10,r8
800081aa:	f6 09 01 4b 	sbc	r11,r11,r9
800081ae:	f6 06 12 00 	clz	r6,r11
800081b2:	c0 e0       	breq	800081ce <__avr32_f64_sub_longnormalize_done>
800081b4:	c7 83       	brcs	800082a4 <__avr32_f64_sub_longnormalize>
800081b6:	ec 0e 11 20 	rsub	lr,r6,32
800081ba:	f6 06 09 4b 	lsl	r11,r11,r6
800081be:	f4 0e 0a 4e 	lsr	lr,r10,lr
800081c2:	1c 4b       	or	r11,lr
800081c4:	f4 06 09 4a 	lsl	r10,r10,r6
800081c8:	0c 17       	sub	r7,r6
800081ca:	e0 8a 00 39 	brle	8000823c <__avr32_f64_sub_subnormal_result>

800081ce <__avr32_f64_sub_longnormalize_done>:
800081ce:	f4 09 15 15 	lsl	r9,r10,0x15
800081d2:	ab 9a       	lsr	r10,0xb
800081d4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800081d8:	ab 9b       	lsr	r11,0xb
800081da:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800081de:	18 4b       	or	r11,r12

800081e0 <__avr32_f64_sub_round>:
800081e0:	fc 17 80 00 	movh	r7,0x8000
800081e4:	ed ba 00 00 	bld	r10,0x0
800081e8:	f7 b7 01 ff 	subne	r7,-1
800081ec:	0e 39       	cp.w	r9,r7
800081ee:	5f 29       	srhs	r9
800081f0:	12 0a       	add	r10,r9
800081f2:	5c 0b       	acr	r11
800081f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081f8 <__avr32_f64_sub_opL_subnormal>:
800081f8:	ab 79       	lsl	r9,0xb
800081fa:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800081fe:	ab 78       	lsl	r8,0xb
80008200:	f3 e8 10 0e 	or	lr,r9,r8
80008204:	f9 b6 01 01 	movne	r6,1
80008208:	ee 0e 11 00 	rsub	lr,r7,0
8000820c:	f9 b7 00 01 	moveq	r7,1
80008210:	ef bb 00 1f 	bst	r11,0x1f
80008214:	f7 ea 10 0e 	or	lr,r11,r10
80008218:	f9 b7 00 00 	moveq	r7,0
8000821c:	cb 0b       	rjmp	8000817c <__avr32_f64_sub_opL_subnormal_done>

8000821e <__avr32_f64_sub_opH_nan_or_inf>:
8000821e:	bf db       	cbr	r11,0x1f
80008220:	f7 ea 10 0e 	or	lr,r11,r10
80008224:	c0 81       	brne	80008234 <__avr32_f64_sub_return_nan>
80008226:	e0 46 07 ff 	cp.w	r6,2047
8000822a:	c0 50       	breq	80008234 <__avr32_f64_sub_return_nan>
8000822c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008230:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008234 <__avr32_f64_sub_return_nan>:
80008234:	3f fa       	mov	r10,-1
80008236:	3f fb       	mov	r11,-1
80008238:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000823c <__avr32_f64_sub_subnormal_result>:
8000823c:	5c 37       	neg	r7
8000823e:	2f f7       	sub	r7,-1
80008240:	f1 b7 04 c0 	satu	r7,0x6
80008244:	e0 47 00 20 	cp.w	r7,32
80008248:	c1 14       	brge	8000826a <__avr32_f64_sub_subnormal_result+0x2e>
8000824a:	ee 08 11 20 	rsub	r8,r7,32
8000824e:	f4 08 09 49 	lsl	r9,r10,r8
80008252:	5f 16       	srne	r6
80008254:	f4 07 0a 4a 	lsr	r10,r10,r7
80008258:	0c 4a       	or	r10,r6
8000825a:	f6 08 09 49 	lsl	r9,r11,r8
8000825e:	f5 e9 10 0a 	or	r10,r10,r9
80008262:	f4 07 0a 4b 	lsr	r11,r10,r7
80008266:	30 07       	mov	r7,0
80008268:	cb 3b       	rjmp	800081ce <__avr32_f64_sub_longnormalize_done>
8000826a:	ee 08 11 40 	rsub	r8,r7,64
8000826e:	f6 08 09 49 	lsl	r9,r11,r8
80008272:	14 49       	or	r9,r10
80008274:	5f 16       	srne	r6
80008276:	f6 07 0a 4a 	lsr	r10,r11,r7
8000827a:	0c 4a       	or	r10,r6
8000827c:	30 0b       	mov	r11,0
8000827e:	30 07       	mov	r7,0
80008280:	ca 7b       	rjmp	800081ce <__avr32_f64_sub_longnormalize_done>
80008282:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008286 <__avr32_f64_sub_longshift>:
80008286:	f1 b6 04 c0 	satu	r6,0x6
8000828a:	f0 0e 17 00 	moveq	lr,r8
8000828e:	c0 40       	breq	80008296 <__avr32_f64_sub_longshift+0x10>
80008290:	f2 05 09 4e 	lsl	lr,r9,r5
80008294:	10 4e       	or	lr,r8
80008296:	f2 06 0a 48 	lsr	r8,r9,r6
8000829a:	30 09       	mov	r9,0
8000829c:	58 0e       	cp.w	lr,0
8000829e:	5f 1e       	srne	lr
800082a0:	1c 48       	or	r8,lr
800082a2:	c8 3b       	rjmp	800081a8 <__avr32_f64_sub_shift_done>

800082a4 <__avr32_f64_sub_longnormalize>:
800082a4:	f4 06 12 00 	clz	r6,r10
800082a8:	f9 b7 03 00 	movlo	r7,0
800082ac:	f9 b6 03 00 	movlo	r6,0
800082b0:	f9 bc 03 00 	movlo	r12,0
800082b4:	f7 b6 02 e0 	subhs	r6,-32
800082b8:	f4 06 09 4b 	lsl	r11,r10,r6
800082bc:	30 0a       	mov	r10,0
800082be:	0c 17       	sub	r7,r6
800082c0:	fe 9a ff be 	brle	8000823c <__avr32_f64_sub_subnormal_result>
800082c4:	c8 5b       	rjmp	800081ce <__avr32_f64_sub_longnormalize_done>
800082c6:	d7 03       	nop

800082c8 <__avr32_f64_add_from_sub>:
800082c8:	ee 19 80 00 	eorh	r9,0x8000

800082cc <__avr32_f64_add>:
800082cc:	f7 e9 20 0c 	eor	r12,r11,r9
800082d0:	fe 96 ff 2e 	brmi	8000812c <__avr32_f64_sub_from_add>
800082d4:	eb cd 40 e0 	pushm	r5-r7,lr
800082d8:	16 9c       	mov	r12,r11
800082da:	e6 1c 80 00 	andh	r12,0x8000,COH
800082de:	bf db       	cbr	r11,0x1f
800082e0:	bf d9       	cbr	r9,0x1f
800082e2:	12 3b       	cp.w	r11,r9
800082e4:	c0 72       	brcc	800082f2 <__avr32_f64_add+0x26>
800082e6:	16 97       	mov	r7,r11
800082e8:	12 9b       	mov	r11,r9
800082ea:	0e 99       	mov	r9,r7
800082ec:	14 97       	mov	r7,r10
800082ee:	10 9a       	mov	r10,r8
800082f0:	0e 98       	mov	r8,r7
800082f2:	30 0e       	mov	lr,0
800082f4:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800082f8:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800082fc:	b5 ab       	sbr	r11,0x14
800082fe:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008302:	c6 20       	breq	800083c6 <__avr32_f64_add_op2_subnormal>
80008304:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008308:	b5 a9       	sbr	r9,0x14
8000830a:	e0 47 07 ff 	cp.w	r7,2047
8000830e:	c2 80       	breq	8000835e <__avr32_f64_add_opH_nan_or_inf>
80008310:	0e 26       	rsub	r6,r7
80008312:	c1 20       	breq	80008336 <__avr32_f64_add_shift_done>
80008314:	e0 46 00 36 	cp.w	r6,54
80008318:	c1 52       	brcc	80008342 <__avr32_f64_add_res_of_done>
8000831a:	ec 05 11 20 	rsub	r5,r6,32
8000831e:	e0 46 00 20 	cp.w	r6,32
80008322:	c3 52       	brcc	8000838c <__avr32_f64_add_longshift>
80008324:	f0 05 09 4e 	lsl	lr,r8,r5
80008328:	f2 05 09 45 	lsl	r5,r9,r5
8000832c:	f0 06 0a 48 	lsr	r8,r8,r6
80008330:	f2 06 0a 49 	lsr	r9,r9,r6
80008334:	0a 48       	or	r8,r5

80008336 <__avr32_f64_add_shift_done>:
80008336:	10 0a       	add	r10,r8
80008338:	f6 09 00 4b 	adc	r11,r11,r9
8000833c:	ed bb 00 15 	bld	r11,0x15
80008340:	c3 40       	breq	800083a8 <__avr32_f64_add_res_of>

80008342 <__avr32_f64_add_res_of_done>:
80008342:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008346:	18 4b       	or	r11,r12

80008348 <__avr32_f64_add_round>:
80008348:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000834c:	18 4e       	or	lr,r12
8000834e:	ee 1e 80 00 	eorh	lr,0x8000
80008352:	f1 be 04 20 	satu	lr,0x1
80008356:	1c 0a       	add	r10,lr
80008358:	5c 0b       	acr	r11
8000835a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000835e <__avr32_f64_add_opH_nan_or_inf>:
8000835e:	b5 cb       	cbr	r11,0x14
80008360:	f7 ea 10 0e 	or	lr,r11,r10
80008364:	c1 01       	brne	80008384 <__avr32_f64_add_return_nan>
80008366:	e0 46 07 ff 	cp.w	r6,2047
8000836a:	c0 30       	breq	80008370 <__avr32_f64_add_opL_nan_or_inf>
8000836c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008370 <__avr32_f64_add_opL_nan_or_inf>:
80008370:	b5 c9       	cbr	r9,0x14
80008372:	f3 e8 10 0e 	or	lr,r9,r8
80008376:	c0 71       	brne	80008384 <__avr32_f64_add_return_nan>
80008378:	30 0a       	mov	r10,0
8000837a:	fc 1b 7f f0 	movh	r11,0x7ff0
8000837e:	18 4b       	or	r11,r12
80008380:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008384 <__avr32_f64_add_return_nan>:
80008384:	3f fa       	mov	r10,-1
80008386:	3f fb       	mov	r11,-1
80008388:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000838c <__avr32_f64_add_longshift>:
8000838c:	f1 b6 04 c0 	satu	r6,0x6
80008390:	f0 0e 17 00 	moveq	lr,r8
80008394:	c0 60       	breq	800083a0 <__avr32_f64_add_longshift+0x14>
80008396:	f2 05 09 4e 	lsl	lr,r9,r5
8000839a:	58 08       	cp.w	r8,0
8000839c:	5f 18       	srne	r8
8000839e:	10 4e       	or	lr,r8
800083a0:	f2 06 0a 48 	lsr	r8,r9,r6
800083a4:	30 09       	mov	r9,0
800083a6:	cc 8b       	rjmp	80008336 <__avr32_f64_add_shift_done>

800083a8 <__avr32_f64_add_res_of>:
800083a8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800083ac:	a1 9b       	lsr	r11,0x1
800083ae:	5d 0a       	ror	r10
800083b0:	5d 0e       	ror	lr
800083b2:	2f f7       	sub	r7,-1
800083b4:	e0 47 07 ff 	cp.w	r7,2047
800083b8:	f9 ba 00 00 	moveq	r10,0
800083bc:	f9 bb 00 00 	moveq	r11,0
800083c0:	f9 be 00 00 	moveq	lr,0
800083c4:	cb fb       	rjmp	80008342 <__avr32_f64_add_res_of_done>

800083c6 <__avr32_f64_add_op2_subnormal>:
800083c6:	30 16       	mov	r6,1
800083c8:	58 07       	cp.w	r7,0
800083ca:	ca 01       	brne	8000830a <__avr32_f64_add+0x3e>
800083cc:	b5 cb       	cbr	r11,0x14
800083ce:	10 0a       	add	r10,r8
800083d0:	f6 09 00 4b 	adc	r11,r11,r9
800083d4:	18 4b       	or	r11,r12
800083d6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800083da:	d7 03       	nop

800083dc <__avr32_f64_to_u32>:
800083dc:	58 0b       	cp.w	r11,0
800083de:	5e 6d       	retmi	0

800083e0 <__avr32_f64_to_s32>:
800083e0:	f6 0c 15 01 	lsl	r12,r11,0x1
800083e4:	b5 9c       	lsr	r12,0x15
800083e6:	e0 2c 03 ff 	sub	r12,1023
800083ea:	5e 3d       	retlo	0
800083ec:	f8 0c 11 1f 	rsub	r12,r12,31
800083f0:	16 99       	mov	r9,r11
800083f2:	ab 7b       	lsl	r11,0xb
800083f4:	bf bb       	sbr	r11,0x1f
800083f6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800083fa:	f6 0c 0a 4b 	lsr	r11,r11,r12
800083fe:	a1 79       	lsl	r9,0x1
80008400:	5e 2b       	reths	r11
80008402:	5c 3b       	neg	r11
80008404:	5e fb       	retal	r11

80008406 <__avr32_u32_to_f64>:
80008406:	f8 cb 00 00 	sub	r11,r12,0
8000840a:	30 0c       	mov	r12,0
8000840c:	c0 38       	rjmp	80008412 <__avr32_s32_to_f64+0x4>

8000840e <__avr32_s32_to_f64>:
8000840e:	18 9b       	mov	r11,r12
80008410:	5c 4b       	abs	r11
80008412:	30 0a       	mov	r10,0
80008414:	5e 0b       	reteq	r11
80008416:	d4 01       	pushm	lr
80008418:	e0 69 04 1e 	mov	r9,1054
8000841c:	f6 08 12 00 	clz	r8,r11
80008420:	c1 70       	breq	8000844e <__avr32_s32_to_f64+0x40>
80008422:	c0 c3       	brcs	8000843a <__avr32_s32_to_f64+0x2c>
80008424:	f0 0e 11 20 	rsub	lr,r8,32
80008428:	f6 08 09 4b 	lsl	r11,r11,r8
8000842c:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008430:	1c 4b       	or	r11,lr
80008432:	f4 08 09 4a 	lsl	r10,r10,r8
80008436:	10 19       	sub	r9,r8
80008438:	c0 b8       	rjmp	8000844e <__avr32_s32_to_f64+0x40>
8000843a:	f4 08 12 00 	clz	r8,r10
8000843e:	f9 b8 03 00 	movlo	r8,0
80008442:	f7 b8 02 e0 	subhs	r8,-32
80008446:	f4 08 09 4b 	lsl	r11,r10,r8
8000844a:	30 0a       	mov	r10,0
8000844c:	10 19       	sub	r9,r8
8000844e:	58 09       	cp.w	r9,0
80008450:	e0 89 00 30 	brgt	800084b0 <__avr32_s32_to_f64+0xa2>
80008454:	5c 39       	neg	r9
80008456:	2f f9       	sub	r9,-1
80008458:	e0 49 00 36 	cp.w	r9,54
8000845c:	c0 43       	brcs	80008464 <__avr32_s32_to_f64+0x56>
8000845e:	30 0b       	mov	r11,0
80008460:	30 0a       	mov	r10,0
80008462:	c2 68       	rjmp	800084ae <__avr32_s32_to_f64+0xa0>
80008464:	2f 69       	sub	r9,-10
80008466:	f2 08 11 20 	rsub	r8,r9,32
8000846a:	e0 49 00 20 	cp.w	r9,32
8000846e:	c0 b2       	brcc	80008484 <__avr32_s32_to_f64+0x76>
80008470:	f4 08 09 4e 	lsl	lr,r10,r8
80008474:	f6 08 09 48 	lsl	r8,r11,r8
80008478:	f4 09 0a 4a 	lsr	r10,r10,r9
8000847c:	f6 09 0a 4b 	lsr	r11,r11,r9
80008480:	10 4b       	or	r11,r8
80008482:	c0 88       	rjmp	80008492 <__avr32_s32_to_f64+0x84>
80008484:	f6 08 09 4e 	lsl	lr,r11,r8
80008488:	14 4e       	or	lr,r10
8000848a:	16 9a       	mov	r10,r11
8000848c:	30 0b       	mov	r11,0
8000848e:	f4 09 0a 4a 	lsr	r10,r10,r9
80008492:	ed ba 00 00 	bld	r10,0x0
80008496:	c0 92       	brcc	800084a8 <__avr32_s32_to_f64+0x9a>
80008498:	1c 7e       	tst	lr,lr
8000849a:	c0 41       	brne	800084a2 <__avr32_s32_to_f64+0x94>
8000849c:	ed ba 00 01 	bld	r10,0x1
800084a0:	c0 42       	brcc	800084a8 <__avr32_s32_to_f64+0x9a>
800084a2:	2f fa       	sub	r10,-1
800084a4:	f7 bb 02 ff 	subhs	r11,-1
800084a8:	5c fc       	rol	r12
800084aa:	5d 0b       	ror	r11
800084ac:	5d 0a       	ror	r10
800084ae:	d8 02       	popm	pc
800084b0:	e0 68 03 ff 	mov	r8,1023
800084b4:	ed ba 00 0b 	bld	r10,0xb
800084b8:	f7 b8 00 ff 	subeq	r8,-1
800084bc:	10 0a       	add	r10,r8
800084be:	5c 0b       	acr	r11
800084c0:	f7 b9 03 fe 	sublo	r9,-2
800084c4:	e0 49 07 ff 	cp.w	r9,2047
800084c8:	c0 55       	brlt	800084d2 <__avr32_s32_to_f64+0xc4>
800084ca:	30 0a       	mov	r10,0
800084cc:	fc 1b ff e0 	movh	r11,0xffe0
800084d0:	c0 c8       	rjmp	800084e8 <__floatsidf_return_op1>
800084d2:	ed bb 00 1f 	bld	r11,0x1f
800084d6:	f7 b9 01 01 	subne	r9,1
800084da:	ab 9a       	lsr	r10,0xb
800084dc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800084e0:	a1 7b       	lsl	r11,0x1
800084e2:	ab 9b       	lsr	r11,0xb
800084e4:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800084e8 <__floatsidf_return_op1>:
800084e8:	a1 7c       	lsl	r12,0x1
800084ea:	5d 0b       	ror	r11
800084ec:	d8 02       	popm	pc

800084ee <__avr32_f64_cmp_eq>:
800084ee:	10 3a       	cp.w	r10,r8
800084f0:	f2 0b 13 00 	cpc	r11,r9
800084f4:	c0 80       	breq	80008504 <__avr32_f64_cmp_eq+0x16>
800084f6:	a1 7b       	lsl	r11,0x1
800084f8:	a1 79       	lsl	r9,0x1
800084fa:	14 4b       	or	r11,r10
800084fc:	12 4b       	or	r11,r9
800084fe:	10 4b       	or	r11,r8
80008500:	5e 0f       	reteq	1
80008502:	5e fd       	retal	0
80008504:	a1 7b       	lsl	r11,0x1
80008506:	fc 1c ff e0 	movh	r12,0xffe0
8000850a:	58 0a       	cp.w	r10,0
8000850c:	f8 0b 13 00 	cpc	r11,r12
80008510:	5e 8f       	retls	1
80008512:	5e fd       	retal	0

80008514 <__avr32_f64_cmp_ge>:
80008514:	1a de       	st.w	--sp,lr
80008516:	1a d7       	st.w	--sp,r7
80008518:	a1 7b       	lsl	r11,0x1
8000851a:	5f 3c       	srlo	r12
8000851c:	a1 79       	lsl	r9,0x1
8000851e:	5f 37       	srlo	r7
80008520:	5c fc       	rol	r12
80008522:	fc 1e ff e0 	movh	lr,0xffe0
80008526:	58 0a       	cp.w	r10,0
80008528:	fc 0b 13 00 	cpc	r11,lr
8000852c:	e0 8b 00 1d 	brhi	80008566 <__avr32_f64_cmp_ge+0x52>
80008530:	58 08       	cp.w	r8,0
80008532:	fc 09 13 00 	cpc	r9,lr
80008536:	e0 8b 00 18 	brhi	80008566 <__avr32_f64_cmp_ge+0x52>
8000853a:	58 0b       	cp.w	r11,0
8000853c:	f5 ba 00 00 	subfeq	r10,0
80008540:	c1 50       	breq	8000856a <__avr32_f64_cmp_ge+0x56>
80008542:	1b 07       	ld.w	r7,sp++
80008544:	1b 0e       	ld.w	lr,sp++
80008546:	58 3c       	cp.w	r12,3
80008548:	c0 a0       	breq	8000855c <__avr32_f64_cmp_ge+0x48>
8000854a:	58 1c       	cp.w	r12,1
8000854c:	c0 33       	brcs	80008552 <__avr32_f64_cmp_ge+0x3e>
8000854e:	5e 0f       	reteq	1
80008550:	5e 1d       	retne	0
80008552:	10 3a       	cp.w	r10,r8
80008554:	f2 0b 13 00 	cpc	r11,r9
80008558:	5e 2f       	reths	1
8000855a:	5e 3d       	retlo	0
8000855c:	14 38       	cp.w	r8,r10
8000855e:	f6 09 13 00 	cpc	r9,r11
80008562:	5e 2f       	reths	1
80008564:	5e 3d       	retlo	0
80008566:	1b 07       	ld.w	r7,sp++
80008568:	d8 0a       	popm	pc,r12=0
8000856a:	58 17       	cp.w	r7,1
8000856c:	5f 0c       	sreq	r12
8000856e:	58 09       	cp.w	r9,0
80008570:	f5 b8 00 00 	subfeq	r8,0
80008574:	1b 07       	ld.w	r7,sp++
80008576:	1b 0e       	ld.w	lr,sp++
80008578:	5e 0f       	reteq	1
8000857a:	5e fc       	retal	r12

8000857c <__avr32_f64_cmp_lt>:
8000857c:	1a de       	st.w	--sp,lr
8000857e:	1a d7       	st.w	--sp,r7
80008580:	a1 7b       	lsl	r11,0x1
80008582:	5f 3c       	srlo	r12
80008584:	a1 79       	lsl	r9,0x1
80008586:	5f 37       	srlo	r7
80008588:	5c fc       	rol	r12
8000858a:	fc 1e ff e0 	movh	lr,0xffe0
8000858e:	58 0a       	cp.w	r10,0
80008590:	fc 0b 13 00 	cpc	r11,lr
80008594:	e0 8b 00 1d 	brhi	800085ce <__avr32_f64_cmp_lt+0x52>
80008598:	58 08       	cp.w	r8,0
8000859a:	fc 09 13 00 	cpc	r9,lr
8000859e:	e0 8b 00 18 	brhi	800085ce <__avr32_f64_cmp_lt+0x52>
800085a2:	58 0b       	cp.w	r11,0
800085a4:	f5 ba 00 00 	subfeq	r10,0
800085a8:	c1 50       	breq	800085d2 <__avr32_f64_cmp_lt+0x56>
800085aa:	1b 07       	ld.w	r7,sp++
800085ac:	1b 0e       	ld.w	lr,sp++
800085ae:	58 3c       	cp.w	r12,3
800085b0:	c0 a0       	breq	800085c4 <__avr32_f64_cmp_lt+0x48>
800085b2:	58 1c       	cp.w	r12,1
800085b4:	c0 33       	brcs	800085ba <__avr32_f64_cmp_lt+0x3e>
800085b6:	5e 0d       	reteq	0
800085b8:	5e 1f       	retne	1
800085ba:	10 3a       	cp.w	r10,r8
800085bc:	f2 0b 13 00 	cpc	r11,r9
800085c0:	5e 2d       	reths	0
800085c2:	5e 3f       	retlo	1
800085c4:	14 38       	cp.w	r8,r10
800085c6:	f6 09 13 00 	cpc	r9,r11
800085ca:	5e 2d       	reths	0
800085cc:	5e 3f       	retlo	1
800085ce:	1b 07       	ld.w	r7,sp++
800085d0:	d8 0a       	popm	pc,r12=0
800085d2:	58 17       	cp.w	r7,1
800085d4:	5f 1c       	srne	r12
800085d6:	58 09       	cp.w	r9,0
800085d8:	f5 b8 00 00 	subfeq	r8,0
800085dc:	1b 07       	ld.w	r7,sp++
800085de:	1b 0e       	ld.w	lr,sp++
800085e0:	5e 0d       	reteq	0
800085e2:	5e fc       	retal	r12

800085e4 <__avr32_f64_div>:
800085e4:	eb cd 40 ff 	pushm	r0-r7,lr
800085e8:	f7 e9 20 0e 	eor	lr,r11,r9
800085ec:	f6 07 16 14 	lsr	r7,r11,0x14
800085f0:	a9 7b       	lsl	r11,0x9
800085f2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800085f6:	a9 7a       	lsl	r10,0x9
800085f8:	bd bb       	sbr	r11,0x1d
800085fa:	e4 1b 3f ff 	andh	r11,0x3fff
800085fe:	ab d7       	cbr	r7,0xb
80008600:	e0 80 00 cc 	breq	80008798 <__avr32_f64_div_round_subnormal+0x54>
80008604:	e0 47 07 ff 	cp.w	r7,2047
80008608:	e0 84 00 b5 	brge	80008772 <__avr32_f64_div_round_subnormal+0x2e>
8000860c:	f2 06 16 14 	lsr	r6,r9,0x14
80008610:	a9 79       	lsl	r9,0x9
80008612:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008616:	a9 78       	lsl	r8,0x9
80008618:	bd b9       	sbr	r9,0x1d
8000861a:	e4 19 3f ff 	andh	r9,0x3fff
8000861e:	ab d6       	cbr	r6,0xb
80008620:	e0 80 00 e2 	breq	800087e4 <__avr32_f64_div_round_subnormal+0xa0>
80008624:	e0 46 07 ff 	cp.w	r6,2047
80008628:	e0 84 00 b2 	brge	8000878c <__avr32_f64_div_round_subnormal+0x48>
8000862c:	0c 17       	sub	r7,r6
8000862e:	fe 37 fc 01 	sub	r7,-1023
80008632:	fc 1c 80 00 	movh	r12,0x8000
80008636:	f8 03 16 01 	lsr	r3,r12,0x1
8000863a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000863e:	5c d4       	com	r4
80008640:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008644:	e6 09 06 44 	mulu.d	r4,r3,r9
80008648:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000864c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008650:	ea 03 15 02 	lsl	r3,r5,0x2
80008654:	e6 09 06 44 	mulu.d	r4,r3,r9
80008658:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000865c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008660:	ea 03 15 02 	lsl	r3,r5,0x2
80008664:	e6 09 06 44 	mulu.d	r4,r3,r9
80008668:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000866c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008670:	ea 03 15 02 	lsl	r3,r5,0x2
80008674:	e6 08 06 40 	mulu.d	r0,r3,r8
80008678:	e4 09 07 40 	macu.d	r0,r2,r9
8000867c:	e6 09 06 44 	mulu.d	r4,r3,r9
80008680:	02 04       	add	r4,r1
80008682:	5c 05       	acr	r5
80008684:	a3 65       	lsl	r5,0x2
80008686:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000868a:	a3 64       	lsl	r4,0x2
8000868c:	5c 34       	neg	r4
8000868e:	f8 05 01 45 	sbc	r5,r12,r5
80008692:	e6 04 06 40 	mulu.d	r0,r3,r4
80008696:	e4 05 07 40 	macu.d	r0,r2,r5
8000869a:	e6 05 06 44 	mulu.d	r4,r3,r5
8000869e:	02 04       	add	r4,r1
800086a0:	5c 05       	acr	r5
800086a2:	ea 03 15 02 	lsl	r3,r5,0x2
800086a6:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800086aa:	e8 02 15 02 	lsl	r2,r4,0x2
800086ae:	e6 08 06 40 	mulu.d	r0,r3,r8
800086b2:	e4 09 07 40 	macu.d	r0,r2,r9
800086b6:	e6 09 06 44 	mulu.d	r4,r3,r9
800086ba:	02 04       	add	r4,r1
800086bc:	5c 05       	acr	r5
800086be:	a3 65       	lsl	r5,0x2
800086c0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800086c4:	a3 64       	lsl	r4,0x2
800086c6:	5c 34       	neg	r4
800086c8:	f8 05 01 45 	sbc	r5,r12,r5
800086cc:	e6 04 06 40 	mulu.d	r0,r3,r4
800086d0:	e4 05 07 40 	macu.d	r0,r2,r5
800086d4:	e6 05 06 44 	mulu.d	r4,r3,r5
800086d8:	02 04       	add	r4,r1
800086da:	5c 05       	acr	r5
800086dc:	ea 03 15 02 	lsl	r3,r5,0x2
800086e0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800086e4:	e8 02 15 02 	lsl	r2,r4,0x2
800086e8:	e6 0a 06 40 	mulu.d	r0,r3,r10
800086ec:	e4 0b 07 40 	macu.d	r0,r2,r11
800086f0:	e6 0b 06 42 	mulu.d	r2,r3,r11
800086f4:	02 02       	add	r2,r1
800086f6:	5c 03       	acr	r3
800086f8:	ed b3 00 1c 	bld	r3,0x1c
800086fc:	c0 90       	breq	8000870e <__avr32_f64_div+0x12a>
800086fe:	a1 72       	lsl	r2,0x1
80008700:	5c f3       	rol	r3
80008702:	20 17       	sub	r7,1
80008704:	a3 9a       	lsr	r10,0x3
80008706:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000870a:	a3 9b       	lsr	r11,0x3
8000870c:	c0 58       	rjmp	80008716 <__avr32_f64_div+0x132>
8000870e:	a5 8a       	lsr	r10,0x4
80008710:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008714:	a5 8b       	lsr	r11,0x4
80008716:	58 07       	cp.w	r7,0
80008718:	e0 8a 00 8b 	brle	8000882e <__avr32_f64_div_res_subnormal>
8000871c:	e0 12 ff 00 	andl	r2,0xff00
80008720:	e8 12 00 80 	orl	r2,0x80
80008724:	e6 08 06 40 	mulu.d	r0,r3,r8
80008728:	e4 09 07 40 	macu.d	r0,r2,r9
8000872c:	e4 08 06 44 	mulu.d	r4,r2,r8
80008730:	e6 09 06 48 	mulu.d	r8,r3,r9
80008734:	00 05       	add	r5,r0
80008736:	f0 01 00 48 	adc	r8,r8,r1
8000873a:	5c 09       	acr	r9
8000873c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008740:	58 04       	cp.w	r4,0
80008742:	5c 25       	cpc	r5

80008744 <__avr32_f64_div_round_subnormal>:
80008744:	f4 08 13 00 	cpc	r8,r10
80008748:	f6 09 13 00 	cpc	r9,r11
8000874c:	5f 36       	srlo	r6
8000874e:	f8 06 17 00 	moveq	r6,r12
80008752:	e4 0a 16 08 	lsr	r10,r2,0x8
80008756:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000875a:	e6 0b 16 08 	lsr	r11,r3,0x8
8000875e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008762:	ed be 00 1f 	bld	lr,0x1f
80008766:	ef bb 00 1f 	bst	r11,0x1f
8000876a:	0c 0a       	add	r10,r6
8000876c:	5c 0b       	acr	r11
8000876e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008772:	e4 1b 00 0f 	andh	r11,0xf
80008776:	14 4b       	or	r11,r10
80008778:	e0 81 00 a7 	brne	800088c6 <__avr32_f64_div_res_subnormal+0x98>
8000877c:	f2 06 16 14 	lsr	r6,r9,0x14
80008780:	ab d6       	cbr	r6,0xb
80008782:	e0 46 07 ff 	cp.w	r6,2047
80008786:	e0 81 00 a4 	brne	800088ce <__avr32_f64_div_res_subnormal+0xa0>
8000878a:	c9 e8       	rjmp	800088c6 <__avr32_f64_div_res_subnormal+0x98>
8000878c:	e4 19 00 0f 	andh	r9,0xf
80008790:	10 49       	or	r9,r8
80008792:	e0 81 00 9a 	brne	800088c6 <__avr32_f64_div_res_subnormal+0x98>
80008796:	c9 28       	rjmp	800088ba <__avr32_f64_div_res_subnormal+0x8c>
80008798:	a3 7b       	lsl	r11,0x3
8000879a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000879e:	a3 7a       	lsl	r10,0x3
800087a0:	f5 eb 10 04 	or	r4,r10,r11
800087a4:	e0 80 00 a0 	breq	800088e4 <__avr32_f64_div_op1_zero>
800087a8:	f6 04 12 00 	clz	r4,r11
800087ac:	c1 70       	breq	800087da <__avr32_f64_div_round_subnormal+0x96>
800087ae:	c0 c3       	brcs	800087c6 <__avr32_f64_div_round_subnormal+0x82>
800087b0:	e8 05 11 20 	rsub	r5,r4,32
800087b4:	f6 04 09 4b 	lsl	r11,r11,r4
800087b8:	f4 05 0a 45 	lsr	r5,r10,r5
800087bc:	0a 4b       	or	r11,r5
800087be:	f4 04 09 4a 	lsl	r10,r10,r4
800087c2:	08 17       	sub	r7,r4
800087c4:	c0 b8       	rjmp	800087da <__avr32_f64_div_round_subnormal+0x96>
800087c6:	f4 04 12 00 	clz	r4,r10
800087ca:	f9 b4 03 00 	movlo	r4,0
800087ce:	f7 b4 02 e0 	subhs	r4,-32
800087d2:	f4 04 09 4b 	lsl	r11,r10,r4
800087d6:	30 0a       	mov	r10,0
800087d8:	08 17       	sub	r7,r4
800087da:	a3 8a       	lsr	r10,0x2
800087dc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800087e0:	a3 8b       	lsr	r11,0x2
800087e2:	c1 1b       	rjmp	80008604 <__avr32_f64_div+0x20>
800087e4:	a3 79       	lsl	r9,0x3
800087e6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800087ea:	a3 78       	lsl	r8,0x3
800087ec:	f3 e8 10 04 	or	r4,r9,r8
800087f0:	c6 f0       	breq	800088ce <__avr32_f64_div_res_subnormal+0xa0>
800087f2:	f2 04 12 00 	clz	r4,r9
800087f6:	c1 70       	breq	80008824 <__avr32_f64_div_round_subnormal+0xe0>
800087f8:	c0 c3       	brcs	80008810 <__avr32_f64_div_round_subnormal+0xcc>
800087fa:	e8 05 11 20 	rsub	r5,r4,32
800087fe:	f2 04 09 49 	lsl	r9,r9,r4
80008802:	f0 05 0a 45 	lsr	r5,r8,r5
80008806:	0a 49       	or	r9,r5
80008808:	f0 04 09 48 	lsl	r8,r8,r4
8000880c:	08 16       	sub	r6,r4
8000880e:	c0 b8       	rjmp	80008824 <__avr32_f64_div_round_subnormal+0xe0>
80008810:	f0 04 12 00 	clz	r4,r8
80008814:	f9 b4 03 00 	movlo	r4,0
80008818:	f7 b4 02 e0 	subhs	r4,-32
8000881c:	f0 04 09 49 	lsl	r9,r8,r4
80008820:	30 08       	mov	r8,0
80008822:	08 16       	sub	r6,r4
80008824:	a3 88       	lsr	r8,0x2
80008826:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000882a:	a3 89       	lsr	r9,0x2
8000882c:	cf ca       	rjmp	80008624 <__avr32_f64_div+0x40>

8000882e <__avr32_f64_div_res_subnormal>:
8000882e:	5c 37       	neg	r7
80008830:	2f f7       	sub	r7,-1
80008832:	f1 b7 04 c0 	satu	r7,0x6
80008836:	e0 47 00 20 	cp.w	r7,32
8000883a:	c1 54       	brge	80008864 <__avr32_f64_div_res_subnormal+0x36>
8000883c:	ee 06 11 20 	rsub	r6,r7,32
80008840:	e4 07 0a 42 	lsr	r2,r2,r7
80008844:	e6 06 09 4c 	lsl	r12,r3,r6
80008848:	18 42       	or	r2,r12
8000884a:	e6 07 0a 43 	lsr	r3,r3,r7
8000884e:	f4 06 09 41 	lsl	r1,r10,r6
80008852:	f4 07 0a 4a 	lsr	r10,r10,r7
80008856:	f6 06 09 4c 	lsl	r12,r11,r6
8000885a:	18 4a       	or	r10,r12
8000885c:	f6 07 0a 4b 	lsr	r11,r11,r7
80008860:	30 00       	mov	r0,0
80008862:	c1 58       	rjmp	8000888c <__avr32_f64_div_res_subnormal+0x5e>
80008864:	ee 06 11 20 	rsub	r6,r7,32
80008868:	f9 b0 00 00 	moveq	r0,0
8000886c:	f9 bc 00 00 	moveq	r12,0
80008870:	c0 50       	breq	8000887a <__avr32_f64_div_res_subnormal+0x4c>
80008872:	f4 06 09 40 	lsl	r0,r10,r6
80008876:	f6 06 09 4c 	lsl	r12,r11,r6
8000887a:	e6 07 0a 42 	lsr	r2,r3,r7
8000887e:	30 03       	mov	r3,0
80008880:	f4 07 0a 41 	lsr	r1,r10,r7
80008884:	18 41       	or	r1,r12
80008886:	f6 07 0a 4a 	lsr	r10,r11,r7
8000888a:	30 0b       	mov	r11,0
8000888c:	e0 12 ff 00 	andl	r2,0xff00
80008890:	e8 12 00 80 	orl	r2,0x80
80008894:	e6 08 06 46 	mulu.d	r6,r3,r8
80008898:	e4 09 07 46 	macu.d	r6,r2,r9
8000889c:	e4 08 06 44 	mulu.d	r4,r2,r8
800088a0:	e6 09 06 48 	mulu.d	r8,r3,r9
800088a4:	0c 05       	add	r5,r6
800088a6:	f0 07 00 48 	adc	r8,r8,r7
800088aa:	5c 09       	acr	r9
800088ac:	30 07       	mov	r7,0
800088ae:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800088b2:	00 34       	cp.w	r4,r0
800088b4:	e2 05 13 00 	cpc	r5,r1
800088b8:	c4 6b       	rjmp	80008744 <__avr32_f64_div_round_subnormal>
800088ba:	1c 9b       	mov	r11,lr
800088bc:	e6 1b 80 00 	andh	r11,0x8000,COH
800088c0:	30 0a       	mov	r10,0
800088c2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800088c6:	3f fb       	mov	r11,-1
800088c8:	30 0a       	mov	r10,0
800088ca:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800088ce:	f5 eb 10 04 	or	r4,r10,r11
800088d2:	c0 90       	breq	800088e4 <__avr32_f64_div_op1_zero>
800088d4:	1c 9b       	mov	r11,lr
800088d6:	e6 1b 80 00 	andh	r11,0x8000,COH
800088da:	ea 1b 7f f0 	orh	r11,0x7ff0
800088de:	30 0a       	mov	r10,0
800088e0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800088e4 <__avr32_f64_div_op1_zero>:
800088e4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800088e8:	ce f0       	breq	800088c6 <__avr32_f64_div_res_subnormal+0x98>
800088ea:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800088ee:	e0 44 07 ff 	cp.w	r4,2047
800088f2:	ce 41       	brne	800088ba <__avr32_f64_div_res_subnormal+0x8c>
800088f4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800088f8:	ce 10       	breq	800088ba <__avr32_f64_div_res_subnormal+0x8c>
800088fa:	ce 6b       	rjmp	800088c6 <__avr32_f64_div_res_subnormal+0x98>

800088fc <__avr32_udiv64>:
800088fc:	d4 31       	pushm	r0-r7,lr
800088fe:	1a 97       	mov	r7,sp
80008900:	20 3d       	sub	sp,12
80008902:	10 9c       	mov	r12,r8
80008904:	12 9e       	mov	lr,r9
80008906:	14 93       	mov	r3,r10
80008908:	58 09       	cp.w	r9,0
8000890a:	e0 81 00 bd 	brne	80008a84 <__avr32_udiv64+0x188>
8000890e:	16 38       	cp.w	r8,r11
80008910:	e0 88 00 40 	brls	80008990 <__avr32_udiv64+0x94>
80008914:	f0 08 12 00 	clz	r8,r8
80008918:	c0 d0       	breq	80008932 <__avr32_udiv64+0x36>
8000891a:	f6 08 09 4b 	lsl	r11,r11,r8
8000891e:	f0 09 11 20 	rsub	r9,r8,32
80008922:	f8 08 09 4c 	lsl	r12,r12,r8
80008926:	f4 09 0a 49 	lsr	r9,r10,r9
8000892a:	f4 08 09 43 	lsl	r3,r10,r8
8000892e:	f3 eb 10 0b 	or	r11,r9,r11
80008932:	f8 0e 16 10 	lsr	lr,r12,0x10
80008936:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000893a:	f6 0e 0d 00 	divu	r0,r11,lr
8000893e:	e6 0b 16 10 	lsr	r11,r3,0x10
80008942:	00 99       	mov	r9,r0
80008944:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008948:	e0 0a 02 48 	mul	r8,r0,r10
8000894c:	10 3b       	cp.w	r11,r8
8000894e:	c0 a2       	brcc	80008962 <__avr32_udiv64+0x66>
80008950:	20 19       	sub	r9,1
80008952:	18 0b       	add	r11,r12
80008954:	18 3b       	cp.w	r11,r12
80008956:	c0 63       	brcs	80008962 <__avr32_udiv64+0x66>
80008958:	10 3b       	cp.w	r11,r8
8000895a:	f7 b9 03 01 	sublo	r9,1
8000895e:	f7 dc e3 0b 	addcs	r11,r11,r12
80008962:	f6 08 01 01 	sub	r1,r11,r8
80008966:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000896a:	e2 0e 0d 00 	divu	r0,r1,lr
8000896e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008972:	00 98       	mov	r8,r0
80008974:	e0 0a 02 4a 	mul	r10,r0,r10
80008978:	14 33       	cp.w	r3,r10
8000897a:	c0 82       	brcc	8000898a <__avr32_udiv64+0x8e>
8000897c:	20 18       	sub	r8,1
8000897e:	18 03       	add	r3,r12
80008980:	18 33       	cp.w	r3,r12
80008982:	c0 43       	brcs	8000898a <__avr32_udiv64+0x8e>
80008984:	14 33       	cp.w	r3,r10
80008986:	f7 b8 03 01 	sublo	r8,1
8000898a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000898e:	cd f8       	rjmp	80008b4c <__avr32_udiv64+0x250>
80008990:	58 08       	cp.w	r8,0
80008992:	c0 51       	brne	8000899c <__avr32_udiv64+0xa0>
80008994:	30 19       	mov	r9,1
80008996:	f2 08 0d 08 	divu	r8,r9,r8
8000899a:	10 9c       	mov	r12,r8
8000899c:	f8 06 12 00 	clz	r6,r12
800089a0:	c0 41       	brne	800089a8 <__avr32_udiv64+0xac>
800089a2:	18 1b       	sub	r11,r12
800089a4:	30 19       	mov	r9,1
800089a6:	c4 08       	rjmp	80008a26 <__avr32_udiv64+0x12a>
800089a8:	ec 01 11 20 	rsub	r1,r6,32
800089ac:	f4 01 0a 49 	lsr	r9,r10,r1
800089b0:	f8 06 09 4c 	lsl	r12,r12,r6
800089b4:	f6 06 09 48 	lsl	r8,r11,r6
800089b8:	f6 01 0a 41 	lsr	r1,r11,r1
800089bc:	f3 e8 10 08 	or	r8,r9,r8
800089c0:	f8 03 16 10 	lsr	r3,r12,0x10
800089c4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800089c8:	e2 03 0d 00 	divu	r0,r1,r3
800089cc:	f0 0b 16 10 	lsr	r11,r8,0x10
800089d0:	00 9e       	mov	lr,r0
800089d2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800089d6:	e0 05 02 49 	mul	r9,r0,r5
800089da:	12 3b       	cp.w	r11,r9
800089dc:	c0 a2       	brcc	800089f0 <__avr32_udiv64+0xf4>
800089de:	20 1e       	sub	lr,1
800089e0:	18 0b       	add	r11,r12
800089e2:	18 3b       	cp.w	r11,r12
800089e4:	c0 63       	brcs	800089f0 <__avr32_udiv64+0xf4>
800089e6:	12 3b       	cp.w	r11,r9
800089e8:	f7 be 03 01 	sublo	lr,1
800089ec:	f7 dc e3 0b 	addcs	r11,r11,r12
800089f0:	12 1b       	sub	r11,r9
800089f2:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800089f6:	f6 03 0d 02 	divu	r2,r11,r3
800089fa:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800089fe:	04 99       	mov	r9,r2
80008a00:	e4 05 02 4b 	mul	r11,r2,r5
80008a04:	16 38       	cp.w	r8,r11
80008a06:	c0 a2       	brcc	80008a1a <__avr32_udiv64+0x11e>
80008a08:	20 19       	sub	r9,1
80008a0a:	18 08       	add	r8,r12
80008a0c:	18 38       	cp.w	r8,r12
80008a0e:	c0 63       	brcs	80008a1a <__avr32_udiv64+0x11e>
80008a10:	16 38       	cp.w	r8,r11
80008a12:	f7 b9 03 01 	sublo	r9,1
80008a16:	f1 dc e3 08 	addcs	r8,r8,r12
80008a1a:	f4 06 09 43 	lsl	r3,r10,r6
80008a1e:	f0 0b 01 0b 	sub	r11,r8,r11
80008a22:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008a26:	f8 06 16 10 	lsr	r6,r12,0x10
80008a2a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008a2e:	f6 06 0d 00 	divu	r0,r11,r6
80008a32:	e6 0b 16 10 	lsr	r11,r3,0x10
80008a36:	00 9a       	mov	r10,r0
80008a38:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008a3c:	e0 0e 02 48 	mul	r8,r0,lr
80008a40:	10 3b       	cp.w	r11,r8
80008a42:	c0 a2       	brcc	80008a56 <__avr32_udiv64+0x15a>
80008a44:	20 1a       	sub	r10,1
80008a46:	18 0b       	add	r11,r12
80008a48:	18 3b       	cp.w	r11,r12
80008a4a:	c0 63       	brcs	80008a56 <__avr32_udiv64+0x15a>
80008a4c:	10 3b       	cp.w	r11,r8
80008a4e:	f7 ba 03 01 	sublo	r10,1
80008a52:	f7 dc e3 0b 	addcs	r11,r11,r12
80008a56:	f6 08 01 01 	sub	r1,r11,r8
80008a5a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008a5e:	e2 06 0d 00 	divu	r0,r1,r6
80008a62:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008a66:	00 98       	mov	r8,r0
80008a68:	e0 0e 02 4b 	mul	r11,r0,lr
80008a6c:	16 33       	cp.w	r3,r11
80008a6e:	c0 82       	brcc	80008a7e <__avr32_udiv64+0x182>
80008a70:	20 18       	sub	r8,1
80008a72:	18 03       	add	r3,r12
80008a74:	18 33       	cp.w	r3,r12
80008a76:	c0 43       	brcs	80008a7e <__avr32_udiv64+0x182>
80008a78:	16 33       	cp.w	r3,r11
80008a7a:	f7 b8 03 01 	sublo	r8,1
80008a7e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008a82:	c6 98       	rjmp	80008b54 <__avr32_udiv64+0x258>
80008a84:	16 39       	cp.w	r9,r11
80008a86:	e0 8b 00 65 	brhi	80008b50 <__avr32_udiv64+0x254>
80008a8a:	f2 09 12 00 	clz	r9,r9
80008a8e:	c0 b1       	brne	80008aa4 <__avr32_udiv64+0x1a8>
80008a90:	10 3a       	cp.w	r10,r8
80008a92:	5f 2a       	srhs	r10
80008a94:	1c 3b       	cp.w	r11,lr
80008a96:	5f b8       	srhi	r8
80008a98:	10 4a       	or	r10,r8
80008a9a:	f2 0a 18 00 	cp.b	r10,r9
80008a9e:	c5 90       	breq	80008b50 <__avr32_udiv64+0x254>
80008aa0:	30 18       	mov	r8,1
80008aa2:	c5 98       	rjmp	80008b54 <__avr32_udiv64+0x258>
80008aa4:	f0 09 09 46 	lsl	r6,r8,r9
80008aa8:	f2 03 11 20 	rsub	r3,r9,32
80008aac:	fc 09 09 4e 	lsl	lr,lr,r9
80008ab0:	f0 03 0a 48 	lsr	r8,r8,r3
80008ab4:	f6 09 09 4c 	lsl	r12,r11,r9
80008ab8:	f4 03 0a 42 	lsr	r2,r10,r3
80008abc:	ef 46 ff f4 	st.w	r7[-12],r6
80008ac0:	f6 03 0a 43 	lsr	r3,r11,r3
80008ac4:	18 42       	or	r2,r12
80008ac6:	f1 ee 10 0c 	or	r12,r8,lr
80008aca:	f8 01 16 10 	lsr	r1,r12,0x10
80008ace:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008ad2:	e6 01 0d 04 	divu	r4,r3,r1
80008ad6:	e4 03 16 10 	lsr	r3,r2,0x10
80008ada:	08 9e       	mov	lr,r4
80008adc:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008ae0:	e8 06 02 48 	mul	r8,r4,r6
80008ae4:	10 33       	cp.w	r3,r8
80008ae6:	c0 a2       	brcc	80008afa <__avr32_udiv64+0x1fe>
80008ae8:	20 1e       	sub	lr,1
80008aea:	18 03       	add	r3,r12
80008aec:	18 33       	cp.w	r3,r12
80008aee:	c0 63       	brcs	80008afa <__avr32_udiv64+0x1fe>
80008af0:	10 33       	cp.w	r3,r8
80008af2:	f7 be 03 01 	sublo	lr,1
80008af6:	e7 dc e3 03 	addcs	r3,r3,r12
80008afa:	10 13       	sub	r3,r8
80008afc:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008b00:	e6 01 0d 00 	divu	r0,r3,r1
80008b04:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008b08:	00 98       	mov	r8,r0
80008b0a:	e0 06 02 46 	mul	r6,r0,r6
80008b0e:	0c 3b       	cp.w	r11,r6
80008b10:	c0 a2       	brcc	80008b24 <__avr32_udiv64+0x228>
80008b12:	20 18       	sub	r8,1
80008b14:	18 0b       	add	r11,r12
80008b16:	18 3b       	cp.w	r11,r12
80008b18:	c0 63       	brcs	80008b24 <__avr32_udiv64+0x228>
80008b1a:	0c 3b       	cp.w	r11,r6
80008b1c:	f7 dc e3 0b 	addcs	r11,r11,r12
80008b20:	f7 b8 03 01 	sublo	r8,1
80008b24:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008b28:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008b2c:	0c 1b       	sub	r11,r6
80008b2e:	f0 04 06 42 	mulu.d	r2,r8,r4
80008b32:	06 95       	mov	r5,r3
80008b34:	16 35       	cp.w	r5,r11
80008b36:	e0 8b 00 0a 	brhi	80008b4a <__avr32_udiv64+0x24e>
80008b3a:	5f 0b       	sreq	r11
80008b3c:	f4 09 09 49 	lsl	r9,r10,r9
80008b40:	12 32       	cp.w	r2,r9
80008b42:	5f b9       	srhi	r9
80008b44:	f7 e9 00 09 	and	r9,r11,r9
80008b48:	c0 60       	breq	80008b54 <__avr32_udiv64+0x258>
80008b4a:	20 18       	sub	r8,1
80008b4c:	30 09       	mov	r9,0
80008b4e:	c0 38       	rjmp	80008b54 <__avr32_udiv64+0x258>
80008b50:	30 09       	mov	r9,0
80008b52:	12 98       	mov	r8,r9
80008b54:	10 9a       	mov	r10,r8
80008b56:	12 93       	mov	r3,r9
80008b58:	10 92       	mov	r2,r8
80008b5a:	12 9b       	mov	r11,r9
80008b5c:	2f dd       	sub	sp,-12
80008b5e:	d8 32       	popm	r0-r7,pc

80008b60 <__avr32_umod64>:
80008b60:	d4 31       	pushm	r0-r7,lr
80008b62:	1a 97       	mov	r7,sp
80008b64:	20 3d       	sub	sp,12
80008b66:	10 9c       	mov	r12,r8
80008b68:	12 95       	mov	r5,r9
80008b6a:	14 9e       	mov	lr,r10
80008b6c:	16 91       	mov	r1,r11
80008b6e:	16 96       	mov	r6,r11
80008b70:	58 09       	cp.w	r9,0
80008b72:	e0 81 00 81 	brne	80008c74 <__avr32_umod64+0x114>
80008b76:	16 38       	cp.w	r8,r11
80008b78:	e0 88 00 12 	brls	80008b9c <__avr32_umod64+0x3c>
80008b7c:	f0 08 12 00 	clz	r8,r8
80008b80:	c4 e0       	breq	80008c1c <__avr32_umod64+0xbc>
80008b82:	f6 08 09 46 	lsl	r6,r11,r8
80008b86:	f8 08 09 4c 	lsl	r12,r12,r8
80008b8a:	f0 0b 11 20 	rsub	r11,r8,32
80008b8e:	f4 08 09 4e 	lsl	lr,r10,r8
80008b92:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008b96:	f7 e6 10 06 	or	r6,r11,r6
80008b9a:	c4 18       	rjmp	80008c1c <__avr32_umod64+0xbc>
80008b9c:	58 08       	cp.w	r8,0
80008b9e:	c0 51       	brne	80008ba8 <__avr32_umod64+0x48>
80008ba0:	30 19       	mov	r9,1
80008ba2:	f2 08 0d 08 	divu	r8,r9,r8
80008ba6:	10 9c       	mov	r12,r8
80008ba8:	f8 08 12 00 	clz	r8,r12
80008bac:	c0 31       	brne	80008bb2 <__avr32_umod64+0x52>
80008bae:	18 16       	sub	r6,r12
80008bb0:	c3 68       	rjmp	80008c1c <__avr32_umod64+0xbc>
80008bb2:	f0 03 11 20 	rsub	r3,r8,32
80008bb6:	f4 03 0a 4b 	lsr	r11,r10,r3
80008bba:	f8 08 09 4c 	lsl	r12,r12,r8
80008bbe:	ec 08 09 49 	lsl	r9,r6,r8
80008bc2:	ec 03 0a 43 	lsr	r3,r6,r3
80008bc6:	f7 e9 10 09 	or	r9,r11,r9
80008bca:	f8 05 16 10 	lsr	r5,r12,0x10
80008bce:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008bd2:	e6 05 0d 02 	divu	r2,r3,r5
80008bd6:	f2 0e 16 10 	lsr	lr,r9,0x10
80008bda:	ec 02 02 4b 	mul	r11,r6,r2
80008bde:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008be2:	16 3e       	cp.w	lr,r11
80008be4:	c0 72       	brcc	80008bf2 <__avr32_umod64+0x92>
80008be6:	18 0e       	add	lr,r12
80008be8:	18 3e       	cp.w	lr,r12
80008bea:	c0 43       	brcs	80008bf2 <__avr32_umod64+0x92>
80008bec:	16 3e       	cp.w	lr,r11
80008bee:	fd dc e3 0e 	addcs	lr,lr,r12
80008bf2:	fc 0b 01 03 	sub	r3,lr,r11
80008bf6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008bfa:	e6 05 0d 02 	divu	r2,r3,r5
80008bfe:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008c02:	a5 36       	mul	r6,r2
80008c04:	0c 39       	cp.w	r9,r6
80008c06:	c0 72       	brcc	80008c14 <__avr32_umod64+0xb4>
80008c08:	18 09       	add	r9,r12
80008c0a:	18 39       	cp.w	r9,r12
80008c0c:	c0 43       	brcs	80008c14 <__avr32_umod64+0xb4>
80008c0e:	0c 39       	cp.w	r9,r6
80008c10:	f3 dc e3 09 	addcs	r9,r9,r12
80008c14:	f2 06 01 06 	sub	r6,r9,r6
80008c18:	f4 08 09 4e 	lsl	lr,r10,r8
80008c1c:	f8 0a 16 10 	lsr	r10,r12,0x10
80008c20:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008c24:	ec 0a 0d 02 	divu	r2,r6,r10
80008c28:	fc 09 16 10 	lsr	r9,lr,0x10
80008c2c:	ea 02 02 4b 	mul	r11,r5,r2
80008c30:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008c34:	16 39       	cp.w	r9,r11
80008c36:	c0 72       	brcc	80008c44 <__avr32_umod64+0xe4>
80008c38:	18 09       	add	r9,r12
80008c3a:	18 39       	cp.w	r9,r12
80008c3c:	c0 43       	brcs	80008c44 <__avr32_umod64+0xe4>
80008c3e:	16 39       	cp.w	r9,r11
80008c40:	f3 dc e3 09 	addcs	r9,r9,r12
80008c44:	f2 0b 01 0b 	sub	r11,r9,r11
80008c48:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008c4c:	f6 0a 0d 0a 	divu	r10,r11,r10
80008c50:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008c54:	ea 0a 02 4a 	mul	r10,r5,r10
80008c58:	14 3e       	cp.w	lr,r10
80008c5a:	c0 72       	brcc	80008c68 <__avr32_umod64+0x108>
80008c5c:	18 0e       	add	lr,r12
80008c5e:	18 3e       	cp.w	lr,r12
80008c60:	c0 43       	brcs	80008c68 <__avr32_umod64+0x108>
80008c62:	14 3e       	cp.w	lr,r10
80008c64:	fd dc e3 0e 	addcs	lr,lr,r12
80008c68:	fc 0a 01 0a 	sub	r10,lr,r10
80008c6c:	30 0b       	mov	r11,0
80008c6e:	f4 08 0a 4a 	lsr	r10,r10,r8
80008c72:	c7 b8       	rjmp	80008d68 <__avr32_umod64+0x208>
80008c74:	16 39       	cp.w	r9,r11
80008c76:	e0 8b 00 79 	brhi	80008d68 <__avr32_umod64+0x208>
80008c7a:	f2 09 12 00 	clz	r9,r9
80008c7e:	c1 21       	brne	80008ca2 <__avr32_umod64+0x142>
80008c80:	10 3a       	cp.w	r10,r8
80008c82:	5f 2b       	srhs	r11
80008c84:	0a 31       	cp.w	r1,r5
80008c86:	5f ba       	srhi	r10
80008c88:	f7 ea 10 0a 	or	r10,r11,r10
80008c8c:	f2 0a 18 00 	cp.b	r10,r9
80008c90:	c0 60       	breq	80008c9c <__avr32_umod64+0x13c>
80008c92:	fc 08 01 0c 	sub	r12,lr,r8
80008c96:	e2 05 01 46 	sbc	r6,r1,r5
80008c9a:	18 9e       	mov	lr,r12
80008c9c:	0c 9b       	mov	r11,r6
80008c9e:	1c 9a       	mov	r10,lr
80008ca0:	c6 48       	rjmp	80008d68 <__avr32_umod64+0x208>
80008ca2:	ea 09 09 4c 	lsl	r12,r5,r9
80008ca6:	f2 06 11 20 	rsub	r6,r9,32
80008caa:	f6 09 09 4b 	lsl	r11,r11,r9
80008cae:	f0 09 09 42 	lsl	r2,r8,r9
80008cb2:	ef 46 ff f4 	st.w	r7[-12],r6
80008cb6:	f0 06 0a 48 	lsr	r8,r8,r6
80008cba:	18 48       	or	r8,r12
80008cbc:	e2 06 0a 4c 	lsr	r12,r1,r6
80008cc0:	f4 09 09 43 	lsl	r3,r10,r9
80008cc4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008cc8:	f4 06 0a 4a 	lsr	r10,r10,r6
80008ccc:	16 4a       	or	r10,r11
80008cce:	f0 0b 16 10 	lsr	r11,r8,0x10
80008cd2:	f8 0b 0d 04 	divu	r4,r12,r11
80008cd6:	f4 0c 16 10 	lsr	r12,r10,0x10
80008cda:	08 91       	mov	r1,r4
80008cdc:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008ce0:	e8 0e 02 46 	mul	r6,r4,lr
80008ce4:	0c 3c       	cp.w	r12,r6
80008ce6:	c0 a2       	brcc	80008cfa <__avr32_umod64+0x19a>
80008ce8:	20 11       	sub	r1,1
80008cea:	10 0c       	add	r12,r8
80008cec:	10 3c       	cp.w	r12,r8
80008cee:	c0 63       	brcs	80008cfa <__avr32_umod64+0x19a>
80008cf0:	0c 3c       	cp.w	r12,r6
80008cf2:	f7 b1 03 01 	sublo	r1,1
80008cf6:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008cfa:	0c 1c       	sub	r12,r6
80008cfc:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008d00:	f8 0b 0d 04 	divu	r4,r12,r11
80008d04:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008d08:	08 96       	mov	r6,r4
80008d0a:	e8 0e 02 4e 	mul	lr,r4,lr
80008d0e:	1c 3b       	cp.w	r11,lr
80008d10:	c0 a2       	brcc	80008d24 <__avr32_umod64+0x1c4>
80008d12:	20 16       	sub	r6,1
80008d14:	10 0b       	add	r11,r8
80008d16:	10 3b       	cp.w	r11,r8
80008d18:	c0 63       	brcs	80008d24 <__avr32_umod64+0x1c4>
80008d1a:	1c 3b       	cp.w	r11,lr
80008d1c:	f7 b6 03 01 	sublo	r6,1
80008d20:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008d24:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008d28:	1c 1b       	sub	r11,lr
80008d2a:	e2 02 06 40 	mulu.d	r0,r1,r2
80008d2e:	00 9e       	mov	lr,r0
80008d30:	02 9c       	mov	r12,r1
80008d32:	16 3c       	cp.w	r12,r11
80008d34:	e0 8b 00 08 	brhi	80008d44 <__avr32_umod64+0x1e4>
80008d38:	5f 06       	sreq	r6
80008d3a:	06 30       	cp.w	r0,r3
80008d3c:	5f ba       	srhi	r10
80008d3e:	ed ea 00 0a 	and	r10,r6,r10
80008d42:	c0 60       	breq	80008d4e <__avr32_umod64+0x1ee>
80008d44:	fc 02 01 04 	sub	r4,lr,r2
80008d48:	f8 08 01 4c 	sbc	r12,r12,r8
80008d4c:	08 9e       	mov	lr,r4
80008d4e:	e6 0e 01 0a 	sub	r10,r3,lr
80008d52:	f6 0c 01 4c 	sbc	r12,r11,r12
80008d56:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008d5a:	f8 09 0a 4b 	lsr	r11,r12,r9
80008d5e:	f4 09 0a 4a 	lsr	r10,r10,r9
80008d62:	f8 01 09 4c 	lsl	r12,r12,r1
80008d66:	18 4a       	or	r10,r12
80008d68:	2f dd       	sub	sp,-12
80008d6a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008e00:	c0 08       	rjmp	80008e00 <_evba>
	...

80008e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008e04:	c0 08       	rjmp	80008e04 <_handle_TLB_Multiple_Hit>
	...

80008e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008e08:	c0 08       	rjmp	80008e08 <_handle_Bus_Error_Data_Fetch>
	...

80008e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008e0c:	c0 08       	rjmp	80008e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008e10:	c0 08       	rjmp	80008e10 <_handle_NMI>
	...

80008e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008e14:	c0 08       	rjmp	80008e14 <_handle_Instruction_Address>
	...

80008e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008e18:	c0 08       	rjmp	80008e18 <_handle_ITLB_Protection>
	...

80008e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008e1c:	c0 08       	rjmp	80008e1c <_handle_Breakpoint>
	...

80008e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008e20:	c0 08       	rjmp	80008e20 <_handle_Illegal_Opcode>
	...

80008e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008e24:	c0 08       	rjmp	80008e24 <_handle_Unimplemented_Instruction>
	...

80008e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008e28:	c0 08       	rjmp	80008e28 <_handle_Privilege_Violation>
	...

80008e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008e2c:	c0 08       	rjmp	80008e2c <_handle_Floating_Point>
	...

80008e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008e30:	c0 08       	rjmp	80008e30 <_handle_Coprocessor_Absent>
	...

80008e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008e34:	c0 08       	rjmp	80008e34 <_handle_Data_Address_Read>
	...

80008e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008e38:	c0 08       	rjmp	80008e38 <_handle_Data_Address_Write>
	...

80008e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008e3c:	c0 08       	rjmp	80008e3c <_handle_DTLB_Protection_Read>
	...

80008e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008e40:	c0 08       	rjmp	80008e40 <_handle_DTLB_Protection_Write>
	...

80008e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008e44:	c0 08       	rjmp	80008e44 <_handle_DTLB_Modified>
	...

80008e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008e50:	c0 08       	rjmp	80008e50 <_handle_ITLB_Miss>
	...

80008e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008e60:	c0 08       	rjmp	80008e60 <_handle_DTLB_Miss_Read>
	...

80008e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008e70:	c0 08       	rjmp	80008e70 <_handle_DTLB_Miss_Write>
	...

80008f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008f00:	c0 08       	rjmp	80008f00 <_handle_Supervisor_Call>
80008f02:	d7 03       	nop

80008f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f04:	30 0c       	mov	r12,0
80008f06:	fe b0 d0 91 	rcall	80003028 <_get_interrupt_handler>
80008f0a:	58 0c       	cp.w	r12,0
80008f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f10:	d6 03       	rete

80008f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f12:	30 1c       	mov	r12,1
80008f14:	fe b0 d0 8a 	rcall	80003028 <_get_interrupt_handler>
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f1e:	d6 03       	rete

80008f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f20:	30 2c       	mov	r12,2
80008f22:	fe b0 d0 83 	rcall	80003028 <_get_interrupt_handler>
80008f26:	58 0c       	cp.w	r12,0
80008f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f2c:	d6 03       	rete

80008f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f2e:	30 3c       	mov	r12,3
80008f30:	fe b0 d0 7c 	rcall	80003028 <_get_interrupt_handler>
80008f34:	58 0c       	cp.w	r12,0
80008f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f3a:	d6 03       	rete
80008f3c:	d7 03       	nop
80008f3e:	d7 03       	nop
80008f40:	d7 03       	nop
80008f42:	d7 03       	nop
80008f44:	d7 03       	nop
80008f46:	d7 03       	nop
80008f48:	d7 03       	nop
80008f4a:	d7 03       	nop
80008f4c:	d7 03       	nop
80008f4e:	d7 03       	nop
80008f50:	d7 03       	nop
80008f52:	d7 03       	nop
80008f54:	d7 03       	nop
80008f56:	d7 03       	nop
80008f58:	d7 03       	nop
80008f5a:	d7 03       	nop
80008f5c:	d7 03       	nop
80008f5e:	d7 03       	nop
80008f60:	d7 03       	nop
80008f62:	d7 03       	nop
80008f64:	d7 03       	nop
80008f66:	d7 03       	nop
80008f68:	d7 03       	nop
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	d7 03       	nop
80008f70:	d7 03       	nop
80008f72:	d7 03       	nop
80008f74:	d7 03       	nop
80008f76:	d7 03       	nop
80008f78:	d7 03       	nop
80008f7a:	d7 03       	nop
80008f7c:	d7 03       	nop
80008f7e:	d7 03       	nop
80008f80:	d7 03       	nop
80008f82:	d7 03       	nop
80008f84:	d7 03       	nop
80008f86:	d7 03       	nop
80008f88:	d7 03       	nop
80008f8a:	d7 03       	nop
80008f8c:	d7 03       	nop
80008f8e:	d7 03       	nop
80008f90:	d7 03       	nop
80008f92:	d7 03       	nop
80008f94:	d7 03       	nop
80008f96:	d7 03       	nop
80008f98:	d7 03       	nop
80008f9a:	d7 03       	nop
80008f9c:	d7 03       	nop
80008f9e:	d7 03       	nop
80008fa0:	d7 03       	nop
80008fa2:	d7 03       	nop
80008fa4:	d7 03       	nop
80008fa6:	d7 03       	nop
80008fa8:	d7 03       	nop
80008faa:	d7 03       	nop
80008fac:	d7 03       	nop
80008fae:	d7 03       	nop
80008fb0:	d7 03       	nop
80008fb2:	d7 03       	nop
80008fb4:	d7 03       	nop
80008fb6:	d7 03       	nop
80008fb8:	d7 03       	nop
80008fba:	d7 03       	nop
80008fbc:	d7 03       	nop
80008fbe:	d7 03       	nop
80008fc0:	d7 03       	nop
80008fc2:	d7 03       	nop
80008fc4:	d7 03       	nop
80008fc6:	d7 03       	nop
80008fc8:	d7 03       	nop
80008fca:	d7 03       	nop
80008fcc:	d7 03       	nop
80008fce:	d7 03       	nop
80008fd0:	d7 03       	nop
80008fd2:	d7 03       	nop
80008fd4:	d7 03       	nop
80008fd6:	d7 03       	nop
80008fd8:	d7 03       	nop
80008fda:	d7 03       	nop
80008fdc:	d7 03       	nop
80008fde:	d7 03       	nop
80008fe0:	d7 03       	nop
80008fe2:	d7 03       	nop
80008fe4:	d7 03       	nop
80008fe6:	d7 03       	nop
80008fe8:	d7 03       	nop
80008fea:	d7 03       	nop
80008fec:	d7 03       	nop
80008fee:	d7 03       	nop
80008ff0:	d7 03       	nop
80008ff2:	d7 03       	nop
80008ff4:	d7 03       	nop
80008ff6:	d7 03       	nop
80008ff8:	d7 03       	nop
80008ffa:	d7 03       	nop
80008ffc:	d7 03       	nop
80008ffe:	d7 03       	nop
