
TCC_Test_Controller.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008784  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000a800  8000a800  0000ac00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000094c  8000aa00  8000aa00  0000ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000b34c  8000b34c  0000b74c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000504  00000008  8000b350  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  0000050c  8000b854  0000bd0c  2**0
                  ALLOC
  9 .bss          00000438  00000510  00000510  00000000  2**2
                  ALLOC
 10 .heap         0000e6b8  00000948  00000948  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000bd0c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000fd0  00000000  00000000  0000bd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00001f60  00000000  00000000  0000cd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0002ff74  00000000  00000000  0000ec70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000059f8  00000000  00000000  0003ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010a5e  00000000  00000000  000445dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000028f0  00000000  00000000  0005503c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005ee3  00000000  00000000  0005792c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000f5ab  00000000  00000000  0005d80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00fac0de  00000000  00000000  0006cdba  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00001170  00000000  00000000  01018e98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf b3 24 	sub	pc,pc,-19676

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf d3 28 	sub	pc,pc,-11480

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 10       	ld.sh	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 24       	ld.uh	r4,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 1c       	ld.sh	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 28       	ld.uh	r8,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 14       	ld.sh	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 18       	ld.sh	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 30       	ld.ub	r0,r2++
800020dc:	00 00       	add	r0,r0
800020de:	05 20       	ld.uh	r0,r2++
800020e0:	00 00       	add	r0,r0
800020e2:	05 2c       	ld.uh	r12,r2++

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c2 18       	rjmp	8000213c <twim_set_speed+0x58>
800020fc:	30 09       	mov	r9,0
800020fe:	30 16       	mov	r6,1
80002100:	30 7a       	mov	r10,7
80002102:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80002104:	2f f9       	sub	r9,-1
80002106:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002108:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000210a:	e0 48 00 ff 	cp.w	r8,255
8000210e:	f9 be 0b 01 	movhi	lr,1
80002112:	f9 be 08 00 	movls	lr,0
80002116:	f2 0a 18 00 	cp.b	r10,r9
8000211a:	ec 0b 17 20 	movhs	r11,r6
8000211e:	f9 bb 03 00 	movlo	r11,0
80002122:	fd eb 00 0b 	and	r11,lr,r11
80002126:	ee 0b 18 00 	cp.b	r11,r7
8000212a:	ce d1       	brne	80002104 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000212c:	30 7a       	mov	r10,7
8000212e:	f4 09 18 00 	cp.b	r9,r10
80002132:	e0 88 00 05 	brls	8000213c <twim_set_speed+0x58>
80002136:	3f 8c       	mov	r12,-8
80002138:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000213c:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002140:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002144:	14 18       	sub	r8,r10
80002146:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000214a:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000214e:	99 19       	st.w	r12[0x4],r9
80002150:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80002154 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002154:	48 38       	lddpc	r8,80002160 <twim_status+0xc>
80002156:	70 08       	ld.w	r8,r8[0x0]
80002158:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000215a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000215e:	5e fc       	retal	r12
80002160:	00 00       	add	r0,r0
80002162:	05 10       	ld.sh	r0,r2++

80002164 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002164:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002168:	e6 18 00 01 	andh	r8,0x1,COH
8000216c:	c0 21       	brne	80002170 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000216e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002170:	3f f8       	mov	r8,-1
80002172:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002174:	99 b8       	st.w	r12[0x2c],r8
}
80002176:	5e fc       	retal	r12

80002178 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002178:	eb cd 40 fe 	pushm	r1-r7,lr
8000217c:	18 97       	mov	r7,r12
8000217e:	16 93       	mov	r3,r11
80002180:	14 95       	mov	r5,r10
80002182:	12 92       	mov	r2,r9
80002184:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002186:	30 14       	mov	r4,1
80002188:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000218a:	e0 68 00 80 	mov	r8,128
8000218e:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002190:	30 28       	mov	r8,2
80002192:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002194:	49 e6       	lddpc	r6,8000220c <twim_write+0x94>
80002196:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002198:	f0 1f 00 1e 	mcall	80002210 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000219c:	49 e8       	lddpc	r8,80002214 <twim_write+0x9c>
8000219e:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800021a0:	49 e8       	lddpc	r8,80002218 <twim_write+0xa0>
800021a2:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800021a4:	30 09       	mov	r9,0
800021a6:	49 e8       	lddpc	r8,8000221c <twim_write+0xa4>
800021a8:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800021aa:	49 e9       	lddpc	r9,80002220 <twim_write+0xa8>
800021ac:	30 08       	mov	r8,0
800021ae:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021b0:	6c 08       	ld.w	r8,r6[0x0]
800021b2:	b1 65       	lsl	r5,0x10
800021b4:	e8 15 e0 00 	orl	r5,0xe000
800021b8:	eb e2 10 12 	or	r2,r5,r2<<0x1
800021bc:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
800021c0:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021c2:	49 9a       	lddpc	r10,80002224 <twim_write+0xac>
800021c4:	e0 6b 03 02 	mov	r11,770
800021c8:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021ca:	74 0a       	ld.w	r10,r10[0x0]
800021cc:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021ce:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
800021d0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d2:	72 08       	ld.w	r8,r9[0x0]
800021d4:	58 08       	cp.w	r8,0
800021d6:	c0 80       	breq	800021e6 <twim_write+0x6e>
800021d8:	c0 b8       	rjmp	800021ee <twim_write+0x76>
		cpu_relax();
800021da:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021de:	6c 08       	ld.w	r8,r6[0x0]
800021e0:	58 08       	cp.w	r8,0
800021e2:	c0 30       	breq	800021e8 <twim_write+0x70>
800021e4:	c0 58       	rjmp	800021ee <twim_write+0x76>
800021e6:	48 f6       	lddpc	r6,80002220 <twim_write+0xa8>
800021e8:	f0 1f 00 10 	mcall	80002228 <twim_write+0xb0>
800021ec:	cf 70       	breq	800021da <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800021ee:	30 28       	mov	r8,2
800021f0:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021f2:	48 c8       	lddpc	r8,80002220 <twim_write+0xa8>
800021f4:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021f6:	5b c8       	cp.w	r8,-4
800021f8:	c0 70       	breq	80002206 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021fa:	48 a8       	lddpc	r8,80002220 <twim_write+0xa8>
800021fc:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021fe:	5b e8       	cp.w	r8,-2
80002200:	c0 30       	breq	80002206 <twim_write+0x8e>
80002202:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002206:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000220a:	00 00       	add	r0,r0
8000220c:	00 00       	add	r0,r0
8000220e:	05 10       	ld.sh	r0,r2++
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 64       	sub	r4,22
80002214:	00 00       	add	r0,r0
80002216:	05 20       	ld.uh	r0,r2++
80002218:	00 00       	add	r0,r0
8000221a:	05 30       	ld.ub	r0,r2++
8000221c:	00 00       	add	r0,r0
8000221e:	05 28       	ld.uh	r8,r2++
80002220:	00 00       	add	r0,r0
80002222:	05 1c       	ld.sh	r12,r2++
80002224:	00 00       	add	r0,r0
80002226:	05 24       	ld.uh	r4,r2++
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	21 54       	sub	r4,21

8000222c <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8000222c:	d4 01       	pushm	lr
8000222e:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002230:	30 08       	mov	r8,0
80002232:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002234:	30 08       	mov	r8,0
80002236:	16 99       	mov	r9,r11
80002238:	10 9a       	mov	r10,r8
8000223a:	1a 9b       	mov	r11,sp
8000223c:	f0 1f 00 02 	mcall	80002244 <twim_probe+0x18>
}
80002240:	2f fd       	sub	sp,-4
80002242:	d8 02       	popm	pc
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	21 78       	sub	r8,23

80002248 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002248:	eb cd 40 e0 	pushm	r5-r7,lr
8000224c:	18 97       	mov	r7,r12
8000224e:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002250:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002254:	30 0a       	mov	r10,0
80002256:	4a 69       	lddpc	r9,800022ec <twim_master_init+0xa4>
80002258:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8000225a:	e6 18 00 01 	andh	r8,0x1,COH
8000225e:	c0 b1       	brne	80002274 <twim_master_init+0x2c>
		cpu_irq_disable ();
80002260:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002262:	3f f8       	mov	r8,-1
80002264:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002266:	30 18       	mov	r8,1
80002268:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226a:	e0 68 00 80 	mov	r8,128
8000226e:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002270:	d5 03       	csrf	0x10
80002272:	c0 88       	rjmp	80002282 <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002274:	3f f8       	mov	r8,-1
80002276:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002278:	30 18       	mov	r8,1
8000227a:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000227c:	e0 68 00 80 	mov	r8,128
80002280:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002282:	3f f8       	mov	r8,-1
80002284:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002286:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000228a:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
8000228c:	30 1a       	mov	r10,1
8000228e:	e0 6b 03 20 	mov	r11,800
80002292:	49 8c       	lddpc	r12,800022f0 <twim_master_init+0xa8>
80002294:	f0 1f 00 18 	mcall	800022f4 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002298:	e6 16 00 01 	andh	r6,0x1,COH
8000229c:	c0 21       	brne	800022a0 <twim_master_init+0x58>
      cpu_irq_enable();
8000229e:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800022a0:	eb 39 00 0c 	ld.ub	r9,r5[12]
800022a4:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800022a6:	f0 09 18 00 	cp.b	r9,r8
800022aa:	f9 b8 01 10 	movne	r8,16
800022ae:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800022b2:	f9 b8 01 ff 	movne	r8,-1
800022b6:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800022ba:	6a 0a       	ld.w	r10,r5[0x0]
800022bc:	6a 1b       	ld.w	r11,r5[0x4]
800022be:	0e 9c       	mov	r12,r7
800022c0:	f0 1f 00 0e 	mcall	800022f8 <twim_master_init+0xb0>
800022c4:	5b 8c       	cp.w	r12,-8
800022c6:	c1 00       	breq	800022e6 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800022c8:	6a 2b       	ld.w	r11,r5[0x8]
800022ca:	0e 9c       	mov	r12,r7
800022cc:	f0 1f 00 0c 	mcall	800022fc <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d0:	48 78       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022d4:	5b c8       	cp.w	r8,-4
800022d6:	c0 70       	breq	800022e4 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d8:	48 58       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022dc:	5b e8       	cp.w	r8,-2
800022de:	c0 30       	breq	800022e4 <twim_master_init+0x9c>
800022e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800022e4:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800022e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022ea:	00 00       	add	r0,r0
800022ec:	00 00       	add	r0,r0
800022ee:	05 1c       	ld.sh	r12,r2++
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	20 08       	sub	r8,0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	49 dc       	lddpc	r12,80002368 <twis_slave_interrupt_handler+0x68>
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	20 e4       	sub	r4,14
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	22 2c       	sub	r12,34

80002300 <twis_slave_interrupt_handler>:
/**
 * \internal
 * \brief TWIS interrupt handler
 */
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
80002300:	eb cd 40 e0 	pushm	r5-r7,lr
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
80002304:	4c 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002306:	70 06       	ld.w	r6,r8[0x0]
80002308:	6c 65       	ld.w	r5,r6[0x18]
	unsigned long enabled = twis_inst_slave->imr;
8000230a:	6c 97       	ld.w	r7,r6[0x24]
	unsigned long pending = status & enabled;

	// An error has occurred, set only address match active and return
	if (status & AVR32_TWIS_SR_ERROR_MASK) {
8000230c:	0a 98       	mov	r8,r5
8000230e:	e2 18 70 c0 	andl	r8,0x70c0,COH
80002312:	c0 b0       	breq	80002328 <twis_slave_interrupt_handler+0x28>
		twis_inst_slave->idr = ~0UL;
80002314:	3f f8       	mov	r8,-1
80002316:	8d 88       	st.w	r6[0x20],r8
		twis_inst_slave->scr = ~0UL;
80002318:	8d a8       	st.w	r6[0x28],r8
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
8000231a:	e0 78 00 00 	mov	r8,65536
8000231e:	8d 78       	st.w	r6[0x1c],r8

		twis_slave_fct.stop();
80002320:	4b a8       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
80002322:	70 28       	ld.w	r8,r8[0x8]
80002324:	5d 18       	icall	r8

		return;
80002326:	c6 b8       	rjmp	800023fc <twis_slave_interrupt_handler+0xfc>
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
	unsigned long enabled = twis_inst_slave->imr;
	unsigned long pending = status & enabled;
80002328:	0a 67       	and	r7,r5

		return;
	}

	// Check if the slave address match flag is raised
	if (pending & AVR32_TWIS_IER_SAM_MASK) {
8000232a:	0e 98       	mov	r8,r7
8000232c:	e6 18 00 01 	andh	r8,0x1,COH
80002330:	c2 70       	breq	8000237e <twis_slave_interrupt_handler+0x7e>
		// Ignore repeated start and transmission complete flags
		if (pending & (AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK)) {
80002332:	0e 98       	mov	r8,r7
80002334:	e4 18 00 40 	andh	r8,0x40
80002338:	e0 18 00 08 	andl	r8,0x8
8000233c:	c0 60       	breq	80002348 <twis_slave_interrupt_handler+0x48>
			twis_inst_slave->scr = (AVR32_TWIS_SCR_REP_MASK |
8000233e:	30 88       	mov	r8,8
80002340:	ea 18 00 40 	orh	r8,0x40
80002344:	8d a8       	st.w	r6[0x28],r8
					AVR32_TWIS_SCR_TCOMP_MASK);
			twis_inst_slave->idr = (AVR32_TWIS_IDR_REP_MASK |
80002346:	8d 88       	st.w	r6[0x20],r8
					AVR32_TWIS_IDR_TCOMP_MASK);
		}
		pending &= ~(AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK);
80002348:	e4 17 ff bf 	andh	r7,0xffbf
8000234c:	e0 17 ff f7 	andl	r7,0xfff7

		// Enable error handling
		twis_inst_slave->ier = AVR32_TWIS_SR_ERROR_MASK;
80002350:	e0 68 70 c0 	mov	r8,28864
80002354:	8d 78       	st.w	r6[0x1c],r8

		// Check if the slave should be in receive or transmit mode
		if (status & AVR32_TWIS_SR_TRA_MASK) {
80002356:	0a 98       	mov	r8,r5
80002358:	e2 18 00 20 	andl	r8,0x20,COH
8000235c:	c0 d0       	breq	80002376 <twis_slave_interrupt_handler+0x76>
			// Transmit mode
			twis_inst_slave->scr = AVR32_TWIS_SR_BTF_MASK;
8000235e:	fc 18 00 80 	movh	r8,0x80
80002362:	8d a8       	st.w	r6[0x28],r8
			twis_inst_slave->ier = AVR32_TWIS_IER_BTF_MASK
80002364:	30 88       	mov	r8,8
80002366:	ea 18 00 80 	orh	r8,0x80
8000236a:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_TCOMP_MASK;
			twis_inst_slave->thr = twis_slave_fct.tx();
8000236c:	4a 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000236e:	70 1c       	ld.w	r12,r8[0x4]
80002370:	5d 1c       	icall	r12
80002372:	8d 4c       	st.w	r6[0x10],r12
80002374:	c0 58       	rjmp	8000237e <twis_slave_interrupt_handler+0x7e>
		} else {
			// Receive mode
			twis_inst_slave->ier = AVR32_TWIS_IER_RXRDY_MASK
80002376:	30 98       	mov	r8,9
80002378:	ea 18 00 40 	orh	r8,0x40
8000237c:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_REP_MASK;
		}
	}

	// Check if there is data ready to be read in the data receive register
	if (pending & AVR32_TWIS_IER_RXRDY_MASK) {
8000237e:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80002382:	c0 80       	breq	80002392 <twis_slave_interrupt_handler+0x92>
		// Call user specific receive function
		twis_slave_fct.rx(twis_inst_slave->rhr);
80002384:	4a 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002386:	70 08       	ld.w	r8,r8[0x0]
80002388:	70 3c       	ld.w	r12,r8[0xc]
8000238a:	4a 08       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000238c:	70 08       	ld.w	r8,r8[0x0]
8000238e:	5c 5c       	castu.b	r12
80002390:	5d 18       	icall	r8
	}

	// Check if the transmit ready flag is raised
	if (pending & AVR32_TWIS_SR_BTF_MASK) {
80002392:	0e 98       	mov	r8,r7
80002394:	e6 18 00 80 	andh	r8,0x80,COH
80002398:	c1 80       	breq	800023c8 <twis_slave_interrupt_handler+0xc8>
		if (status & AVR32_TWIS_SR_NAK_MASK) {
8000239a:	e2 15 01 00 	andl	r5,0x100,COH
8000239e:	c0 f0       	breq	800023bc <twis_slave_interrupt_handler+0xbc>
			twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK;
800023a0:	49 98       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023a2:	70 08       	ld.w	r8,r8[0x0]
800023a4:	fc 19 00 80 	movh	r9,0x80
800023a8:	91 89       	st.w	r8[0x20],r9
			twis_inst_slave->scr = AVR32_TWIS_SCR_BTF_MASK;
800023aa:	91 a9       	st.w	r8[0x28],r9
			twis_inst_slave->ier = AVR32_TWIS_IER_TCOMP_MASK
800023ac:	30 89       	mov	r9,8
800023ae:	ea 19 00 40 	orh	r9,0x40
800023b2:	91 79       	st.w	r8[0x1c],r9
				| AVR32_TWIS_IER_REP_MASK;
			// Clear the NAK
			twis_inst_slave->scr = AVR32_TWIS_SCR_NAK_MASK;
800023b4:	e0 69 01 00 	mov	r9,256
800023b8:	91 a9       	st.w	r8[0x28],r9
800023ba:	c0 78       	rjmp	800023c8 <twis_slave_interrupt_handler+0xc8>
		} else {
			twis_inst_slave->thr = twis_slave_fct.tx();
800023bc:	49 28       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023be:	70 06       	ld.w	r6,r8[0x0]
800023c0:	49 28       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023c2:	70 1c       	ld.w	r12,r8[0x4]
800023c4:	5d 1c       	icall	r12
800023c6:	8d 4c       	st.w	r6[0x10],r12
		}
	}

	// Check if the transmission complete or repeated start flags raised
	if (pending & (AVR32_TWIS_SR_TCOMP_MASK | AVR32_TWIS_SR_REP_MASK)) {
800023c8:	0e 98       	mov	r8,r7
800023ca:	e4 18 00 40 	andh	r8,0x40
800023ce:	e0 18 00 08 	andl	r8,0x8
800023d2:	c1 10       	breq	800023f4 <twis_slave_interrupt_handler+0xf4>
		// Clear transmit complete and repeated start flags
		twis_inst_slave->scr = AVR32_TWIS_SCR_TCOMP_MASK
800023d4:	48 c8       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023d6:	70 08       	ld.w	r8,r8[0x0]
800023d8:	30 89       	mov	r9,8
800023da:	ea 19 00 40 	orh	r9,0x40
800023de:	91 a9       	st.w	r8[0x28],r9
			| AVR32_TWIS_SCR_REP_MASK;
		// Disable transmission ready interrupt
		twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK
800023e0:	30 99       	mov	r9,9
800023e2:	ea 19 00 c0 	orh	r9,0xc0
800023e6:	91 89       	st.w	r8[0x20],r9
			| AVR32_TWIS_IDR_RXRDY_MASK
			| AVR32_TWIS_IDR_TCOMP_MASK
			| AVR32_TWIS_IDR_REP_MASK;
		// Enable slave address match interrupt
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
800023e8:	e0 79 00 00 	mov	r9,65536
800023ec:	91 79       	st.w	r8[0x1c],r9
		// Call user specific stop function
		twis_slave_fct.stop();
800023ee:	48 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023f0:	70 28       	ld.w	r8,r8[0x8]
800023f2:	5d 18       	icall	r8
	 *
	 * Fix/Workaround
	 * Clear SR.NAK only after the Byte Transfer Finished (BTF) bit of the same register has been
	 * set.
	 */
	twis_inst_slave->scr = pending & (~AVR32_TWIS_SCR_NAK_MASK);
800023f4:	48 48       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023f6:	70 08       	ld.w	r8,r8[0x0]
800023f8:	a9 c7       	cbr	r7,0x8
800023fa:	91 a7       	st.w	r8[0x28],r7
	return;
}
800023fc:	e3 cd 40 e0 	ldm	sp++,r5-r7,lr
80002400:	d6 03       	rete
80002402:	00 00       	add	r0,r0
80002404:	00 00       	add	r0,r0
80002406:	05 40       	ld.w	r0,--r2
80002408:	00 00       	add	r0,r0
8000240a:	05 34       	ld.ub	r4,r2++

8000240c <twis_slave_init>:
 *              (see \ref twis_options_t)
 * \param *slave_fct  Pointer on application functions
 */
status_code_t twis_slave_init(volatile avr32_twis_t *twis, const twis_options_t *opt,
		const twis_slave_fct_t *slave_fct)
{
8000240c:	d4 21       	pushm	r4-r7,lr
8000240e:	18 97       	mov	r7,r12
80002410:	16 95       	mov	r5,r11
80002412:	14 94       	mov	r4,r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002414:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002418:	d3 03       	ssrf	0x10
	irqflags_t irq_save;

	irq_save = cpu_irq_save();

	twis->idr = ~0UL;
8000241a:	3f f8       	mov	r8,-1
8000241c:	99 88       	st.w	r12[0x20],r8
	twis->scr = ~0UL;
8000241e:	99 a8       	st.w	r12[0x28],r8

	// Reset the TWIS module
	twis->cr = AVR32_TWIS_CR_SWRST_MASK;
80002420:	e0 68 00 80 	mov	r8,128
80002424:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002426:	12 98       	mov	r8,r9
80002428:	e6 18 00 01 	andh	r8,0x1,COH
8000242c:	c0 21       	brne	80002430 <twis_slave_init+0x24>
      cpu_irq_enable();
8000242e:	d5 03       	csrf	0x10

	cpu_irq_restore(irq_save);

	// Clear the TWIS status register
	twis->scr = ~0UL;;
80002430:	3f f8       	mov	r8,-1
80002432:	8f a8       	st.w	r7[0x28],r8

	// Disable all interrupts
	cpu_irq_disable();
80002434:	d3 03       	ssrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002436:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000243a:	d3 03       	ssrf	0x10

	// register Register twis_slave_interrupt_handler interrupt on level CONF_TWIS_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twis_slave_interrupt_handler,
8000243c:	30 1a       	mov	r10,1
8000243e:	e0 6b 03 60 	mov	r11,864
80002442:	4a 1c       	lddpc	r12,800024c4 <twis_slave_init+0xb8>
80002444:	f0 1f 00 21 	mcall	800024c8 <twis_slave_init+0xbc>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002448:	e6 16 00 01 	andh	r6,0x1,COH
8000244c:	c0 21       	brne	80002450 <twis_slave_init+0x44>
      cpu_irq_enable();
8000244e:	d5 03       	csrf	0x10
			CONF_TWIS_IRQ_LINE, CONF_TWIS_IRQ_LEVEL);
	cpu_irq_restore(flags);

	twis_inst_slave = twis;
80002450:	49 f8       	lddpc	r8,800024cc <twis_slave_init+0xc0>
80002452:	91 07       	st.w	r8[0x0],r7

	// Enable the TWI Slave Module and allow for clock stretching
	twis->cr = AVR32_TWIS_CR_SEN_MASK | AVR32_TWIS_CR_SMATCH_MASK
80002454:	31 58       	mov	r8,21
80002456:	8f 08       	st.w	r7[0x0],r8
	 */
#if AVR32_TWIS_H_VERSION > 120
	twis->cr |= AVR32_TWIS_CR_SOAM_MASK;
#endif

	if (opt->smbus) {
80002458:	eb 39 00 09 	ld.ub	r9,r5[9]
8000245c:	30 08       	mov	r8,0
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 40       	breq	8000246a <twis_slave_init+0x5e>
		twis->cr |= AVR32_TWIS_CR_SMEN_MASK;
80002464:	6e 08       	ld.w	r8,r7[0x0]
80002466:	a1 b8       	sbr	r8,0x1
80002468:	8f 08       	st.w	r7[0x0],r8
	}

	if (opt->tenbit) {
8000246a:	eb 39 00 0a 	ld.ub	r9,r5[10]
8000246e:	30 08       	mov	r8,0
80002470:	f0 09 18 00 	cp.b	r9,r8
80002474:	c0 40       	breq	8000247c <twis_slave_init+0x70>
		twis->cr |= AVR32_TWIS_CR_TENBIT_MASK;
80002476:	6e 08       	ld.w	r8,r7[0x0]
80002478:	bb a8       	sbr	r8,0x1a
8000247a:	8f 08       	st.w	r7[0x0],r8
	}

	// Set slave address
	twis->cr |= (opt->chip << AVR32_TWIS_CR_ADR_OFFSET);
8000247c:	6e 08       	ld.w	r8,r7[0x0]
8000247e:	eb 39 00 08 	ld.ub	r9,r5[8]
80002482:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002486:	8f 08       	st.w	r7[0x0],r8

	// Calculate the wait time from clk falling edge to
	//let the slave control the bus
	uint8_t setup_time = (opt->pba_hz / opt->speed)/7;
	twis->tr = (setup_time << AVR32_TWIS_TR_SUDAT_OFFSET);
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	6a 19       	ld.w	r9,r5[0x4]
8000248c:	f0 09 0d 08 	divu	r8,r8,r9
80002490:	10 9a       	mov	r10,r8
80002492:	e0 69 49 25 	mov	r9,18725
80002496:	ea 19 24 92 	orh	r9,0x2492
8000249a:	f0 09 06 48 	mulu.d	r8,r8,r9
8000249e:	12 1a       	sub	r10,r9
800024a0:	a1 9a       	lsr	r10,0x1
800024a2:	f4 09 00 09 	add	r9,r10,r9
800024a6:	f3 d9 c0 48 	bfextu	r9,r9,0x2,0x8
800024aa:	b1 69       	lsl	r9,0x10
800024ac:	8f 29       	st.w	r7[0x8],r9

	// Get a pointer to user specific functions
	twis_slave_fct = *slave_fct;
800024ae:	48 98       	lddpc	r8,800024d0 <twis_slave_init+0xc4>
800024b0:	e8 ea 00 00 	ld.d	r10,r4[0]
800024b4:	f0 eb 00 00 	st.d	r8[0],r10
800024b8:	68 29       	ld.w	r9,r4[0x8]
800024ba:	91 29       	st.w	r8[0x8],r9

	// Slave Address Match Interrupt Enable
	twis->ier = AVR32_TWIS_IER_SAM_MASK;
800024bc:	e0 78 00 00 	mov	r8,65536
800024c0:	8f 78       	st.w	r7[0x1c],r8

	return STATUS_OK;
}
800024c2:	d8 2a       	popm	r4-r7,pc,r12=0
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	23 00       	sub	r0,48
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	49 dc       	lddpc	r12,8000253c <do_check_top_chunk+0x4>
800024cc:	00 00       	add	r0,r0
800024ce:	05 40       	ld.w	r0,--r2
800024d0:	00 00       	add	r0,r0
800024d2:	05 34       	ld.ub	r4,r2++

800024d4 <segment_holding>:
#define segment_holds(S, A)\
  ((char*)(A) >= S->base && (char*)(A) < S->base + S->size)

/* Return segment holding given address */
static msegmentptr segment_holding(mstate m, char* addr) {
  msegmentptr sp = &m->seg;
800024d4:	f8 cc fe 48 	sub	r12,r12,-440
  for (;;) {
    if (addr >= sp->base && addr < sp->base + sp->size)
800024d8:	78 08       	ld.w	r8,r12[0x0]
800024da:	16 38       	cp.w	r8,r11
800024dc:	e0 8b 00 06 	brhi	800024e8 <segment_holding+0x14>
800024e0:	78 19       	ld.w	r9,r12[0x4]
800024e2:	12 08       	add	r8,r9
800024e4:	10 3b       	cp.w	r11,r8
800024e6:	5e 3c       	retlo	r12
      return sp;
    if ((sp = sp->next) == 0)
800024e8:	78 2c       	ld.w	r12,r12[0x8]
800024ea:	58 0c       	cp.w	r12,0
800024ec:	cf 61       	brne	800024d8 <segment_holding+0x4>
      return 0;
  }
}
800024ee:	5e fc       	retal	r12

800024f0 <init_mparams>:

/* ---------------------------- setting mparams -------------------------- */

/* Initialize mparams */
static int init_mparams(void) {
  if (mparams.page_size == 0) {
800024f0:	49 08       	lddpc	r8,80002530 <init_mparams+0x40>
800024f2:	70 18       	ld.w	r8,r8[0x4]
800024f4:	58 08       	cp.w	r8,0
800024f6:	c1 c1       	brne	8000252e <init_mparams+0x3e>
    size_t s;

    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
800024f8:	48 e8       	lddpc	r8,80002530 <init_mparams+0x40>
800024fa:	e4 69 00 00 	mov	r9,262144
800024fe:	91 39       	st.w	r8[0xc],r9
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
80002500:	fc 19 00 20 	movh	r9,0x20
80002504:	91 49       	st.w	r8[0x10],r9
#if MORECORE_CONTIGUOUS
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
80002506:	30 19       	mov	r9,1
80002508:	91 59       	st.w	r8[0x14],r9
    }
#else /* (FOOTERS && !INSECURE) */
    s = (size_t)0x58585858U;
#endif /* (FOOTERS && !INSECURE) */
    ACQUIRE_MAGIC_INIT_LOCK();
    if (mparams.magic == 0) {
8000250a:	70 08       	ld.w	r8,r8[0x0]
8000250c:	58 08       	cp.w	r8,0
8000250e:	c0 b1       	brne	80002524 <init_mparams+0x34>
      mparams.magic = s;
80002510:	e0 69 58 58 	mov	r9,22616
80002514:	ea 19 58 58 	orh	r9,0x5858
80002518:	48 68       	lddpc	r8,80002530 <init_mparams+0x40>
8000251a:	91 09       	st.w	r8[0x0],r9
      /* Set up lock for main malloc area */
      INITIAL_LOCK(&gm->mutex);
      gm->mflags = mparams.default_mflags;
8000251c:	30 19       	mov	r9,1
8000251e:	48 68       	lddpc	r8,80002534 <init_mparams+0x44>
80002520:	f1 49 01 b4 	st.w	r8[436],r9
    }
    RELEASE_MAGIC_INIT_LOCK();

#ifndef WIN32
    mparams.page_size = malloc_getpagesize;
80002524:	48 38       	lddpc	r8,80002530 <init_mparams+0x40>
80002526:	e0 69 02 00 	mov	r9,512
8000252a:	91 19       	st.w	r8[0x4],r9
    mparams.granularity = ((DEFAULT_GRANULARITY != 0)?
8000252c:	91 29       	st.w	r8[0x8],r9
        ((mparams.granularity & (mparams.granularity-SIZE_T_ONE)) != 0) ||
        ((mparams.page_size   & (mparams.page_size-SIZE_T_ONE))   != 0))
      ABORT;
  }
  return 0;
}
8000252e:	5e fd       	retal	0
80002530:	00 00       	add	r0,r0
80002532:	07 0c       	ld.w	r12,r3++
80002534:	00 00       	add	r0,r0
80002536:	05 44       	ld.w	r4,--r2

80002538 <do_check_top_chunk>:
  assert((is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD));
  assert(ok_address(m, p));
}

/* Check properties of top chunk */
static void do_check_top_chunk(mstate m, mchunkptr p) {
80002538:	d4 01       	pushm	lr
  msegmentptr sp = segment_holding(m, (char*)p);
8000253a:	f0 1f 00 02 	mcall	80002540 <do_check_top_chunk+0x8>
  assert(sz == m->topsize);
  assert(sz > 0);
  assert(sz == ((sp->base + sp->size) - (char*)p) - TOP_FOOT_SIZE);
  assert(pinuse(p));
  assert(!next_pinuse(p));
}
8000253e:	d8 02       	popm	pc
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	24 d4       	sub	r4,77

80002544 <init_top>:
/* -------------------------- mspace management -------------------------- */

/* Initialize top chunk and its size */
static void init_top(mstate m, mchunkptr p, size_t psize) {
  /* Ensure alignment */
  size_t offset = align_offset(chunk2mem(p));
80002544:	f1 db c0 03 	bfextu	r8,r11,0x0,0x3
80002548:	c0 50       	breq	80002552 <init_top+0xe>
8000254a:	f0 08 11 08 	rsub	r8,r8,8
8000254e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
  p = (mchunkptr)((char*)p + offset);
80002552:	10 0b       	add	r11,r8
  psize -= offset;
80002554:	10 1a       	sub	r10,r8

  m->top = p;
80002556:	99 6b       	st.w	r12[0x18],r11
  m->topsize = psize;
80002558:	99 3a       	st.w	r12[0xc],r10
  p->head = psize | PINUSE_BIT;
8000255a:	14 98       	mov	r8,r10
8000255c:	a1 a8       	sbr	r8,0x0
8000255e:	97 18       	st.w	r11[0x4],r8
  /* set size of fake trailing chunk holding overhead space only once */
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
80002560:	14 0b       	add	r11,r10
80002562:	32 88       	mov	r8,40
80002564:	97 18       	st.w	r11[0x4],r8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
80002566:	48 38       	lddpc	r8,80002570 <init_top+0x2c>
80002568:	70 48       	ld.w	r8,r8[0x10]
8000256a:	99 78       	st.w	r12[0x1c],r8
}
8000256c:	5e fc       	retal	r12
8000256e:	00 00       	add	r0,r0
80002570:	00 00       	add	r0,r0
80002572:	07 0c       	ld.w	r12,r3++

80002574 <init_bins>:

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
80002574:	f8 c8 ff dc 	sub	r8,r12,-36
80002578:	f8 cc fe dc 	sub	r12,r12,-292
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
    sbinptr bin = smallbin_at(m,i);
    bin->fd = bin->bk = bin;
8000257c:	91 38       	st.w	r8[0xc],r8
8000257e:	91 28       	st.w	r8[0x8],r8
80002580:	2f 88       	sub	r8,-8

/* Initialize bins for a new mstate that is otherwise zeroed out */
static void init_bins(mstate m) {
  /* Establish circular links for smallbins */
  bindex_t i;
  for (i = 0; i < NSMALLBINS; ++i) {
80002582:	18 38       	cp.w	r8,r12
80002584:	cf c1       	brne	8000257c <init_bins+0x8>
    sbinptr bin = smallbin_at(m,i);
    bin->fd = bin->bk = bin;
  }
}
80002586:	5e fc       	retal	r12

80002588 <sys_trim>:
    sp = next;
  }
  return released;
}

static int sys_trim(mstate m, size_t pad) {
80002588:	d4 31       	pushm	r0-r7,lr
8000258a:	20 2d       	sub	sp,8
8000258c:	18 95       	mov	r5,r12
  size_t released = 0;
  if (pad < MAX_REQUEST && is_initialized(m)) {
8000258e:	fe 5b ff bf 	cp.w	r11,-65
80002592:	e0 8b 01 ac 	brhi	800028ea <sys_trim+0x362>
80002596:	78 68       	ld.w	r8,r12[0x18]
80002598:	58 08       	cp.w	r8,0
8000259a:	e0 80 01 a8 	breq	800028ea <sys_trim+0x362>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
8000259e:	f6 c6 ff d8 	sub	r6,r11,-40

    if (m->topsize > pad) {
800025a2:	78 37       	ld.w	r7,r12[0xc]
800025a4:	0e 36       	cp.w	r6,r7
800025a6:	c6 72       	brcc	80002674 <sys_trim+0xec>
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
800025a8:	fe f9 03 60 	ld.w	r9,pc[864]
800025ac:	72 23       	ld.w	r3,r9[0x8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);
800025ae:	10 9b       	mov	r11,r8
800025b0:	f0 1f 00 d7 	mcall	8000290c <sys_trim+0x384>
800025b4:	18 94       	mov	r4,r12

      if (!is_extern_segment(sp)) {
800025b6:	78 38       	ld.w	r8,r12[0xc]
800025b8:	10 99       	mov	r9,r8
800025ba:	e2 19 00 08 	andl	r9,0x8,COH
800025be:	c5 b1       	brne	80002674 <sys_trim+0xec>

    if (m->topsize > pad) {
      /* Shrink top space in granularity-size units, keeping at least one */
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
800025c0:	ee 03 00 0b 	add	r11,r7,r3
800025c4:	20 1b       	sub	r11,1
800025c6:	0c 1b       	sub	r11,r6
800025c8:	f6 03 0d 0a 	divu	r10,r11,r3
800025cc:	f4 c7 00 01 	sub	r7,r10,1
800025d0:	a7 37       	mul	r7,r3
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
        if (is_mmapped_segment(sp)) {
800025d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800025d6:	c1 30       	breq	800025fc <sys_trim+0x74>
          if (HAVE_MMAP &&
              sp->size >= extra &&
800025d8:	78 1c       	ld.w	r12,r12[0x4]
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
        if (is_mmapped_segment(sp)) {
          if (HAVE_MMAP &&
800025da:	18 37       	cp.w	r7,r12
800025dc:	e0 8b 00 4c 	brhi	80002674 <sys_trim+0xec>
  }
}

/* Return true if segment contains a segment link */
static int has_segment_link(mstate m, msegmentptr ss) {
  msegmentptr sp = &m->seg;
800025e0:	ea c9 fe 48 	sub	r9,r5,-440
  for (;;) {
    if ((char*)sp >= ss->base && (char*)sp < ss->base + ss->size)
800025e4:	68 08       	ld.w	r8,r4[0x0]
800025e6:	f0 0c 00 0b 	add	r11,r8,r12
800025ea:	12 38       	cp.w	r8,r9
800025ec:	e0 8b 00 04 	brhi	800025f4 <sys_trim+0x6c>
800025f0:	16 39       	cp.w	r9,r11
800025f2:	c4 13       	brcs	80002674 <sys_trim+0xec>
      return 1;
    if ((sp = sp->next) == 0)
800025f4:	72 29       	ld.w	r9,r9[0x8]
800025f6:	58 09       	cp.w	r9,0
800025f8:	cf 91       	brne	800025ea <sys_trim+0x62>
800025fa:	c7 d9       	rjmp	800028f4 <sys_trim+0x36c>
              released = extra;
            }
          }
        }
        else if (HAVE_MORECORE) {
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
800025fc:	e0 6b ff fe 	mov	r11,65534
80002600:	ea 1b 7f ff 	orh	r11,0x7fff
80002604:	16 37       	cp.w	r7,r11
80002606:	e0 88 00 05 	brls	80002610 <sys_trim+0x88>
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
8000260a:	fc 17 80 00 	movh	r7,0x8000
8000260e:	06 17       	sub	r7,r3
          ACQUIRE_MORECORE_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
80002610:	30 0c       	mov	r12,0
80002612:	f0 1f 00 c0 	mcall	80002910 <sys_trim+0x388>
            if (old_br == sp->base + sp->size) {
80002616:	68 06       	ld.w	r6,r4[0x0]
80002618:	68 18       	ld.w	r8,r4[0x4]
8000261a:	10 06       	add	r6,r8
8000261c:	18 36       	cp.w	r6,r12
8000261e:	c2 b1       	brne	80002674 <sys_trim+0xec>
              char* rel_br = (char*)(CALL_MORECORE(-extra));
80002620:	ee 0c 11 00 	rsub	r12,r7,0
80002624:	f0 1f 00 bb 	mcall	80002910 <sys_trim+0x388>
80002628:	18 97       	mov	r7,r12
              char* new_br = (char*)(CALL_MORECORE(0));
8000262a:	30 0c       	mov	r12,0
8000262c:	f0 1f 00 b9 	mcall	80002910 <sys_trim+0x388>
              if (rel_br != CMFAIL && new_br < old_br)
80002630:	5b f7       	cp.w	r7,-1
80002632:	5f 19       	srne	r9
80002634:	18 36       	cp.w	r6,r12
80002636:	f9 b8 0b 01 	movhi	r8,1
8000263a:	f9 b8 08 00 	movls	r8,0
8000263e:	f3 e8 00 08 	and	r8,r9,r8
80002642:	c1 90       	breq	80002674 <sys_trim+0xec>
                released = old_br - new_br;
80002644:	18 16       	sub	r6,r12
80002646:	50 16       	stdsp	sp[0x4],r6
          }
          RELEASE_MORECORE_LOCK();
        }
      }

      if (released != 0) {
80002648:	40 19       	lddsp	r9,sp[0x4]
8000264a:	58 09       	cp.w	r9,0
8000264c:	c1 60       	breq	80002678 <sys_trim+0xf0>
        sp->size -= released;
8000264e:	68 18       	ld.w	r8,r4[0x4]
80002650:	12 18       	sub	r8,r9
80002652:	89 18       	st.w	r4[0x4],r8
        m->footprint -= released;
80002654:	ea f8 01 ac 	ld.w	r8,r5[428]
80002658:	12 18       	sub	r8,r9
8000265a:	eb 48 01 ac 	st.w	r5[428],r8
        init_top(m, m->top, m->topsize - released);
8000265e:	6a 3a       	ld.w	r10,r5[0xc]
80002660:	12 1a       	sub	r10,r9
80002662:	6a 6b       	ld.w	r11,r5[0x18]
80002664:	0a 9c       	mov	r12,r5
80002666:	f0 1f 00 ac 	mcall	80002914 <sys_trim+0x38c>
        check_top_chunk(m, m->top);
8000266a:	6a 6b       	ld.w	r11,r5[0x18]
8000266c:	0a 9c       	mov	r12,r5
8000266e:	f0 1f 00 ab 	mcall	80002918 <sys_trim+0x390>
80002672:	c0 38       	rjmp	80002678 <sys_trim+0xf0>
80002674:	30 08       	mov	r8,0
80002676:	50 18       	stdsp	sp[0x4],r8

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
80002678:	ea f7 01 c0 	ld.w	r7,r5[448]
  while (sp != 0) {
8000267c:	58 07       	cp.w	r7,0
8000267e:	e0 80 01 2b 	breq	800028d4 <sys_trim+0x34c>
/* -----------------------  system deallocation -------------------------- */

/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
80002682:	ea c3 fe 48 	sub	r3,r5,-440
80002686:	30 0b       	mov	r11,0
80002688:	50 0b       	stdsp	sp[0x0],r11
          /* unlink obsoleted record */
          sp = pred;
          sp->next = next;
        }
        else { /* back out if cannot unmap */
          insert_large_chunk(m, tp, psize);
8000268a:	16 90       	mov	r0,r11
8000268c:	0a 94       	mov	r4,r5
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
  while (sp != 0) {
    char* base = sp->base;
8000268e:	6e 0c       	ld.w	r12,r7[0x0]
    size_t size = sp->size;
80002690:	6e 15       	ld.w	r5,r7[0x4]
    msegmentptr next = sp->next;
80002692:	6e 26       	ld.w	r6,r7[0x8]
    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
80002694:	6e 38       	ld.w	r8,r7[0xc]
80002696:	e2 18 00 09 	andl	r8,0x9,COH
8000269a:	58 18       	cp.w	r8,1
8000269c:	e0 81 01 17 	brne	800028ca <sys_trim+0x342>
      mchunkptr p = align_as_chunk(base);
800026a0:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
800026a4:	c0 31       	brne	800026aa <sys_trim+0x122>
800026a6:	00 98       	mov	r8,r0
800026a8:	c0 58       	rjmp	800026b2 <sys_trim+0x12a>
800026aa:	f0 08 11 08 	rsub	r8,r8,8
800026ae:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800026b2:	f8 08 00 08 	add	r8,r12,r8
800026b6:	10 92       	mov	r2,r8
      size_t psize = chunksize(p);
800026b8:	70 11       	ld.w	r1,r8[0x4]
      /* Can unmap if first chunk holds entire segment and not pinned */
      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
800026ba:	02 99       	mov	r9,r1
800026bc:	e2 19 00 02 	andl	r9,0x2,COH
800026c0:	e0 81 01 05 	brne	800028ca <sys_trim+0x342>
    char* base = sp->base;
    size_t size = sp->size;
    msegmentptr next = sp->next;
    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
      mchunkptr p = align_as_chunk(base);
      size_t psize = chunksize(p);
800026c4:	e0 11 ff fc 	andl	r1,0xfffc
      /* Can unmap if first chunk holds entire segment and not pinned */
      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
800026c8:	02 08       	add	r8,r1
800026ca:	ea c9 00 28 	sub	r9,r5,40
800026ce:	f8 09 00 09 	add	r9,r12,r9
800026d2:	12 38       	cp.w	r8,r9
800026d4:	e0 83 00 fb 	brlo	800028ca <sys_trim+0x342>
        tchunkptr tp = (tchunkptr)p;
        assert(segment_holds(sp, (char*)sp));
        if (p == m->dv) {
800026d8:	68 58       	ld.w	r8,r4[0x14]
800026da:	10 32       	cp.w	r2,r8
800026dc:	c0 41       	brne	800026e4 <sys_trim+0x15c>
          m->dv = 0;
800026de:	89 50       	st.w	r4[0x14],r0
          m->dvsize = 0;
800026e0:	89 20       	st.w	r4[0x8],r0
800026e2:	c6 48       	rjmp	800027aa <sys_trim+0x222>
        }
        else {
          unlink_large_chunk(m, tp);
800026e4:	64 6b       	ld.w	r11,r2[0x18]
800026e6:	64 38       	ld.w	r8,r2[0xc]
800026e8:	10 32       	cp.w	r2,r8
800026ea:	c0 90       	breq	800026fc <sys_trim+0x174>
800026ec:	64 29       	ld.w	r9,r2[0x8]
800026ee:	68 4a       	ld.w	r10,r4[0x10]
800026f0:	12 3a       	cp.w	r10,r9
800026f2:	e0 8b 00 21 	brhi	80002734 <sys_trim+0x1ac>
800026f6:	93 38       	st.w	r9[0xc],r8
800026f8:	91 29       	st.w	r8[0x8],r9
800026fa:	c1 d8       	rjmp	80002734 <sys_trim+0x1ac>
800026fc:	64 58       	ld.w	r8,r2[0x14]
800026fe:	58 08       	cp.w	r8,0
80002700:	c0 40       	breq	80002708 <sys_trim+0x180>
80002702:	e4 ca ff ec 	sub	r10,r2,-20
80002706:	c0 a8       	rjmp	8000271a <sys_trim+0x192>
80002708:	64 48       	ld.w	r8,r2[0x10]
8000270a:	58 08       	cp.w	r8,0
8000270c:	c1 40       	breq	80002734 <sys_trim+0x1ac>
8000270e:	e4 ca ff f0 	sub	r10,r2,-16
80002712:	c0 48       	rjmp	8000271a <sys_trim+0x192>
80002714:	f0 ca ff ec 	sub	r10,r8,-20
80002718:	12 98       	mov	r8,r9
8000271a:	70 59       	ld.w	r9,r8[0x14]
8000271c:	58 09       	cp.w	r9,0
8000271e:	cf b1       	brne	80002714 <sys_trim+0x18c>
80002720:	70 49       	ld.w	r9,r8[0x10]
80002722:	58 09       	cp.w	r9,0
80002724:	c0 40       	breq	8000272c <sys_trim+0x1a4>
80002726:	f0 ca ff f0 	sub	r10,r8,-16
8000272a:	cf 7b       	rjmp	80002718 <sys_trim+0x190>
8000272c:	68 49       	ld.w	r9,r4[0x10]
8000272e:	14 39       	cp.w	r9,r10
80002730:	f5 f0 8a 00 	st.wls	r10[0x0],r0
80002734:	58 0b       	cp.w	r11,0
80002736:	c3 a0       	breq	800027aa <sys_trim+0x222>
80002738:	64 79       	ld.w	r9,r2[0x1c]
8000273a:	f2 ca ff b5 	sub	r10,r9,-75
8000273e:	e8 0a 03 2a 	ld.w	r10,r4[r10<<0x2]
80002742:	14 32       	cp.w	r2,r10
80002744:	c1 01       	brne	80002764 <sys_trim+0x1dc>
80002746:	2b 59       	sub	r9,-75
80002748:	e8 09 09 28 	st.w	r4[r9<<0x2],r8
8000274c:	58 08       	cp.w	r8,0
8000274e:	c1 71       	brne	8000277c <sys_trim+0x1f4>
80002750:	64 78       	ld.w	r8,r2[0x1c]
80002752:	30 19       	mov	r9,1
80002754:	f2 08 09 48 	lsl	r8,r9,r8
80002758:	5c d8       	com	r8
8000275a:	68 19       	ld.w	r9,r4[0x4]
8000275c:	f3 e8 00 08 	and	r8,r9,r8
80002760:	89 18       	st.w	r4[0x4],r8
80002762:	c2 48       	rjmp	800027aa <sys_trim+0x222>
80002764:	68 49       	ld.w	r9,r4[0x10]
80002766:	16 39       	cp.w	r9,r11
80002768:	e0 8b 00 08 	brhi	80002778 <sys_trim+0x1f0>
8000276c:	76 49       	ld.w	r9,r11[0x10]
8000276e:	12 32       	cp.w	r2,r9
80002770:	f7 f8 0a 04 	st.weq	r11[0x10],r8
80002774:	f7 f8 1a 05 	st.wne	r11[0x14],r8
80002778:	58 08       	cp.w	r8,0
8000277a:	c1 80       	breq	800027aa <sys_trim+0x222>
8000277c:	68 49       	ld.w	r9,r4[0x10]
8000277e:	10 39       	cp.w	r9,r8
80002780:	e0 8b 00 15 	brhi	800027aa <sys_trim+0x222>
80002784:	91 6b       	st.w	r8[0x18],r11
80002786:	64 49       	ld.w	r9,r2[0x10]
80002788:	58 09       	cp.w	r9,0
8000278a:	c0 70       	breq	80002798 <sys_trim+0x210>
8000278c:	68 4a       	ld.w	r10,r4[0x10]
8000278e:	12 3a       	cp.w	r10,r9
80002790:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80002794:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80002798:	64 59       	ld.w	r9,r2[0x14]
8000279a:	58 09       	cp.w	r9,0
8000279c:	c0 70       	breq	800027aa <sys_trim+0x222>
8000279e:	68 4a       	ld.w	r10,r4[0x10]
800027a0:	12 3a       	cp.w	r10,r9
800027a2:	f1 f9 8a 05 	st.wls	r8[0x14],r9
800027a6:	f3 f8 8a 06 	st.wls	r9[0x18],r8
        }
        if (CALL_MUNMAP(base, size) == 0) {
800027aa:	0a 9b       	mov	r11,r5
800027ac:	f0 1f 00 5c 	mcall	8000291c <sys_trim+0x394>
800027b0:	c0 b1       	brne	800027c6 <sys_trim+0x23e>
          released += size;
800027b2:	40 08       	lddsp	r8,sp[0x0]
800027b4:	0a 08       	add	r8,r5
800027b6:	50 08       	stdsp	sp[0x0],r8
          m->footprint -= size;
800027b8:	e8 f8 01 ac 	ld.w	r8,r4[428]
800027bc:	0a 18       	sub	r8,r5
800027be:	e9 48 01 ac 	st.w	r4[428],r8
          /* unlink obsoleted record */
          sp = pred;
          sp->next = next;
800027c2:	87 26       	st.w	r3[0x8],r6
800027c4:	c8 48       	rjmp	800028cc <sys_trim+0x344>
        }
        else { /* back out if cannot unmap */
          insert_large_chunk(m, tp, psize);
800027c6:	e2 08 16 08 	lsr	r8,r1,0x8
800027ca:	c0 31       	brne	800027d0 <sys_trim+0x248>
800027cc:	00 99       	mov	r9,r0
800027ce:	c2 d8       	rjmp	80002828 <sys_trim+0x2a0>
800027d0:	e0 48 ff ff 	cp.w	r8,65535
800027d4:	e0 88 00 04 	brls	800027dc <sys_trim+0x254>
800027d8:	31 f9       	mov	r9,31
800027da:	c2 78       	rjmp	80002828 <sys_trim+0x2a0>
800027dc:	f0 cb 01 00 	sub	r11,r8,256
800027e0:	b1 8b       	lsr	r11,0x10
800027e2:	e2 1b 00 08 	andl	r11,0x8,COH
800027e6:	f0 0b 09 48 	lsl	r8,r8,r11
800027ea:	f0 ca 10 00 	sub	r10,r8,4096
800027ee:	b1 8a       	lsr	r10,0x10
800027f0:	e2 1a 00 04 	andl	r10,0x4,COH
800027f4:	f0 0a 09 48 	lsl	r8,r8,r10
800027f8:	f0 c9 40 00 	sub	r9,r8,16384
800027fc:	b1 89       	lsr	r9,0x10
800027fe:	e2 19 00 02 	andl	r9,0x2,COH
80002802:	f0 09 09 48 	lsl	r8,r8,r9
80002806:	af 98       	lsr	r8,0xf
80002808:	f6 0b 11 0e 	rsub	r11,r11,14
8000280c:	f6 0a 01 0a 	sub	r10,r11,r10
80002810:	f4 09 01 09 	sub	r9,r10,r9
80002814:	f2 08 00 08 	add	r8,r9,r8
80002818:	f0 c9 ff f9 	sub	r9,r8,-7
8000281c:	e2 09 0a 49 	lsr	r9,r1,r9
80002820:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002824:	f2 08 00 19 	add	r9,r9,r8<<0x1
80002828:	85 79       	st.w	r2[0x1c],r9
8000282a:	85 50       	st.w	r2[0x14],r0
8000282c:	85 40       	st.w	r2[0x10],r0
8000282e:	68 18       	ld.w	r8,r4[0x4]
80002830:	30 1b       	mov	r11,1
80002832:	f6 09 09 4a 	lsl	r10,r11,r9
80002836:	f5 e8 00 0b 	and	r11,r10,r8
8000283a:	c0 e1       	brne	80002856 <sys_trim+0x2ce>
8000283c:	f5 e8 10 08 	or	r8,r10,r8
80002840:	89 18       	st.w	r4[0x4],r8
80002842:	2b 59       	sub	r9,-75
80002844:	e8 09 09 22 	st.w	r4[r9<<0x2],r2
80002848:	e8 09 00 29 	add	r9,r4,r9<<0x2
8000284c:	85 69       	st.w	r2[0x18],r9
8000284e:	85 32       	st.w	r2[0xc],r2
80002850:	85 22       	st.w	r2[0x8],r2
80002852:	0e 93       	mov	r3,r7
80002854:	c3 c8       	rjmp	800028cc <sys_trim+0x344>
80002856:	f2 c8 ff b5 	sub	r8,r9,-75
8000285a:	e8 08 03 28 	ld.w	r8,r4[r8<<0x2]
8000285e:	59 f9       	cp.w	r9,31
80002860:	c0 31       	brne	80002866 <sys_trim+0x2de>
80002862:	00 99       	mov	r9,r0
80002864:	c0 48       	rjmp	8000286c <sys_trim+0x2e4>
80002866:	a1 99       	lsr	r9,0x1
80002868:	f2 09 11 19 	rsub	r9,r9,25
8000286c:	e2 09 09 49 	lsl	r9,r1,r9
80002870:	70 1a       	ld.w	r10,r8[0x4]
80002872:	e0 1a ff fc 	andl	r10,0xfffc
80002876:	14 31       	cp.w	r1,r10
80002878:	c1 a0       	breq	800028ac <sys_trim+0x324>
8000287a:	f2 0b 16 1f 	lsr	r11,r9,0x1f
8000287e:	f6 ca ff fc 	sub	r10,r11,-4
80002882:	f0 0a 00 2c 	add	r12,r8,r10<<0x2
80002886:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000288a:	58 0a       	cp.w	r10,0
8000288c:	c0 40       	breq	80002894 <sys_trim+0x30c>
8000288e:	a1 79       	lsl	r9,0x1
80002890:	14 98       	mov	r8,r10
80002892:	ce fb       	rjmp	80002870 <sys_trim+0x2e8>
80002894:	68 49       	ld.w	r9,r4[0x10]
80002896:	18 39       	cp.w	r9,r12
80002898:	e0 8b 00 19 	brhi	800028ca <sys_trim+0x342>
8000289c:	2f cb       	sub	r11,-4
8000289e:	f0 0b 09 22 	st.w	r8[r11<<0x2],r2
800028a2:	85 68       	st.w	r2[0x18],r8
800028a4:	85 32       	st.w	r2[0xc],r2
800028a6:	85 22       	st.w	r2[0x8],r2
800028a8:	0e 93       	mov	r3,r7
800028aa:	c1 18       	rjmp	800028cc <sys_trim+0x344>
800028ac:	70 29       	ld.w	r9,r8[0x8]
800028ae:	68 4a       	ld.w	r10,r4[0x10]
800028b0:	10 3a       	cp.w	r10,r8
800028b2:	e0 8b 00 0c 	brhi	800028ca <sys_trim+0x342>
800028b6:	12 3a       	cp.w	r10,r9
800028b8:	e0 8b 00 09 	brhi	800028ca <sys_trim+0x342>
800028bc:	93 32       	st.w	r9[0xc],r2
800028be:	91 22       	st.w	r8[0x8],r2
800028c0:	85 29       	st.w	r2[0x8],r9
800028c2:	85 38       	st.w	r2[0xc],r8
800028c4:	85 60       	st.w	r2[0x18],r0
800028c6:	0e 93       	mov	r3,r7
800028c8:	c0 28       	rjmp	800028cc <sys_trim+0x344>
800028ca:	0e 93       	mov	r3,r7
/* Unmap and unlink any mmapped segments that don't contain used chunks */
static size_t release_unused_segments(mstate m) {
  size_t released = 0;
  msegmentptr pred = &m->seg;
  msegmentptr sp = pred->next;
  while (sp != 0) {
800028cc:	58 06       	cp.w	r6,0
800028ce:	c0 60       	breq	800028da <sys_trim+0x352>
800028d0:	0c 97       	mov	r7,r6
800028d2:	cd ea       	rjmp	8000268e <sys_trim+0x106>
800028d4:	30 09       	mov	r9,0
800028d6:	50 09       	stdsp	sp[0x0],r9
800028d8:	c0 28       	rjmp	800028dc <sys_trim+0x354>
800028da:	08 95       	mov	r5,r4
      }
    }

    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);
800028dc:	40 08       	lddsp	r8,sp[0x0]
800028de:	40 1b       	lddsp	r11,sp[0x4]
800028e0:	16 08       	add	r8,r11

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0)
800028e2:	c0 51       	brne	800028ec <sys_trim+0x364>
      m->trim_check = MAX_SIZE_T;
800028e4:	3f f9       	mov	r9,-1
800028e6:	8b 79       	st.w	r5[0x1c],r9
800028e8:	c0 28       	rjmp	800028ec <sys_trim+0x364>
800028ea:	30 08       	mov	r8,0
800028ec:	58 08       	cp.w	r8,0
  }

  return (released != 0)? 1 : 0;
}
800028ee:	5f 1c       	srne	r12
800028f0:	2f ed       	sub	sp,-8
800028f2:	d8 32       	popm	r0-r7,pc
          if (HAVE_MMAP &&
              sp->size >= extra &&
              !has_segment_link(m, sp)) { /* can't shrink if pinned */
            size_t newsize = sp->size - extra;
            /* Prefer mremap, fall back to munmap */
            if ((CALL_MREMAP(sp->base, sp->size, newsize, 0) != MFAIL) ||
800028f4:	0e 1c       	sub	r12,r7
800028f6:	0e 9b       	mov	r11,r7
800028f8:	f0 0c 00 0c 	add	r12,r8,r12
800028fc:	f0 1f 00 08 	mcall	8000291c <sys_trim+0x394>
80002900:	fe 91 fe ba 	brne	80002674 <sys_trim+0xec>
80002904:	50 17       	stdsp	sp[0x4],r7
80002906:	ca 1a       	rjmp	80002648 <sys_trim+0xc0>
80002908:	00 00       	add	r0,r0
8000290a:	07 0c       	ld.w	r12,r3++
8000290c:	80 00       	ld.sh	r0,r0[0x0]
8000290e:	24 d4       	sub	r4,77
80002910:	80 00       	ld.sh	r0,r0[0x0]
80002912:	3e fc       	mov	r12,-17
80002914:	80 00       	ld.sh	r0,r0[0x0]
80002916:	25 44       	sub	r4,84
80002918:	80 00       	ld.sh	r0,r0[0x0]
8000291a:	25 38       	sub	r8,83
8000291c:	80 00       	ld.sh	r0,r0[0x0]
8000291e:	3f 60       	mov	r0,-10

80002920 <tmalloc_small>:
  }
  return 0;
}

/* allocate a small request from the best fitting chunk in a treebin */
static void* tmalloc_small(mstate m, size_t nb) {
80002920:	eb cd 40 f8 	pushm	r3-r7,lr
  tchunkptr t, v;
  size_t rsize;
  bindex_t i;
  binmap_t leastbit = least_bit(m->treemap);
80002924:	78 18       	ld.w	r8,r12[0x4]
  compute_bit2idx(leastbit, i);
80002926:	f0 09 11 00 	rsub	r9,r8,0
8000292a:	10 69       	and	r9,r8
8000292c:	20 19       	sub	r9,1
8000292e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002932:	e2 1a 00 10 	andl	r10,0x10,COH
80002936:	f2 0a 0a 49 	lsr	r9,r9,r10
8000293a:	f2 08 16 05 	lsr	r8,r9,0x5
8000293e:	e2 18 00 08 	andl	r8,0x8,COH
80002942:	f0 0a 00 0e 	add	lr,r8,r10
80002946:	f2 08 0a 49 	lsr	r9,r9,r8
8000294a:	f2 0a 16 02 	lsr	r10,r9,0x2
8000294e:	e2 1a 00 04 	andl	r10,0x4,COH
80002952:	14 0e       	add	lr,r10
80002954:	f2 0a 0a 49 	lsr	r9,r9,r10
80002958:	f2 0a 16 01 	lsr	r10,r9,0x1
8000295c:	e2 1a 00 02 	andl	r10,0x2,COH
80002960:	14 0e       	add	lr,r10
80002962:	f2 0a 0a 49 	lsr	r9,r9,r10
80002966:	f1 d9 c0 21 	bfextu	r8,r9,0x1,0x1

  v = t = *treebin_at(m, i);
8000296a:	f2 08 0a 49 	lsr	r9,r9,r8
8000296e:	1c 08       	add	r8,lr
80002970:	12 08       	add	r8,r9
80002972:	2b 58       	sub	r8,-75
80002974:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
  rsize = chunksize(t) - nb;
80002978:	70 1e       	ld.w	lr,r8[0x4]
8000297a:	e0 1e ff fc 	andl	lr,0xfffc
8000297e:	16 1e       	sub	lr,r11
80002980:	10 9a       	mov	r10,r8

  while ((t = leftmost_child(t)) != 0) {
80002982:	c0 b8       	rjmp	80002998 <tmalloc_small+0x78>
80002984:	12 98       	mov	r8,r9
    size_t trem = chunksize(t) - nb;
80002986:	70 19       	ld.w	r9,r8[0x4]
80002988:	e0 19 ff fc 	andl	r9,0xfffc
8000298c:	16 19       	sub	r9,r11
    if (trem < rsize) {
8000298e:	12 3e       	cp.w	lr,r9
80002990:	f2 0e 17 b0 	movhi	lr,r9
80002994:	f0 0a 17 b0 	movhi	r10,r8
  compute_bit2idx(leastbit, i);

  v = t = *treebin_at(m, i);
  rsize = chunksize(t) - nb;

  while ((t = leftmost_child(t)) != 0) {
80002998:	70 49       	ld.w	r9,r8[0x10]
8000299a:	58 09       	cp.w	r9,0
8000299c:	cf 41       	brne	80002984 <tmalloc_small+0x64>
8000299e:	70 58       	ld.w	r8,r8[0x14]
800029a0:	58 08       	cp.w	r8,0
800029a2:	cf 21       	brne	80002986 <tmalloc_small+0x66>
      rsize = trem;
      v = t;
    }
  }

  if (RTCHECK(ok_address(m, v))) {
800029a4:	78 43       	ld.w	r3,r12[0x10]
800029a6:	14 33       	cp.w	r3,r10
800029a8:	e0 8b 00 a6 	brhi	80002af4 <tmalloc_small+0x1d4>
    mchunkptr r = chunk_plus_offset(v, nb);
800029ac:	14 94       	mov	r4,r10
800029ae:	f4 0b 00 05 	add	r5,r10,r11
    assert(chunksize(v) == rsize + nb);
    if (RTCHECK(ok_next(v, r))) {
800029b2:	0a 3a       	cp.w	r10,r5
800029b4:	e0 82 00 a0 	brhs	80002af4 <tmalloc_small+0x1d4>
      unlink_large_chunk(m, v);
800029b8:	74 66       	ld.w	r6,r10[0x18]
800029ba:	74 37       	ld.w	r7,r10[0xc]
800029bc:	14 37       	cp.w	r7,r10
800029be:	c0 c0       	breq	800029d6 <tmalloc_small+0xb6>
800029c0:	74 28       	ld.w	r8,r10[0x8]
800029c2:	10 33       	cp.w	r3,r8
800029c4:	ee 08 17 b0 	movhi	r8,r7
800029c8:	f1 f7 8a 03 	st.wls	r8[0xc],r7
800029cc:	ef f8 8a 02 	st.wls	r7[0x8],r8
800029d0:	ee 08 17 80 	movls	r8,r7
800029d4:	c1 c8       	rjmp	80002a0c <tmalloc_small+0xec>
800029d6:	6e 58       	ld.w	r8,r7[0x14]
800029d8:	58 08       	cp.w	r8,0
800029da:	c0 30       	breq	800029e0 <tmalloc_small+0xc0>
800029dc:	2e c7       	sub	r7,-20
800029de:	c0 98       	rjmp	800029f0 <tmalloc_small+0xd0>
800029e0:	6e 48       	ld.w	r8,r7[0x10]
800029e2:	58 08       	cp.w	r8,0
800029e4:	c1 40       	breq	80002a0c <tmalloc_small+0xec>
800029e6:	2f 07       	sub	r7,-16
800029e8:	c0 48       	rjmp	800029f0 <tmalloc_small+0xd0>
800029ea:	f0 c7 ff ec 	sub	r7,r8,-20
800029ee:	12 98       	mov	r8,r9
800029f0:	70 59       	ld.w	r9,r8[0x14]
800029f2:	58 09       	cp.w	r9,0
800029f4:	cf b1       	brne	800029ea <tmalloc_small+0xca>
800029f6:	70 49       	ld.w	r9,r8[0x10]
800029f8:	58 09       	cp.w	r9,0
800029fa:	c0 40       	breq	80002a02 <tmalloc_small+0xe2>
800029fc:	f0 c7 ff f0 	sub	r7,r8,-16
80002a00:	cf 7b       	rjmp	800029ee <tmalloc_small+0xce>
80002a02:	0e 33       	cp.w	r3,r7
80002a04:	f9 b9 08 00 	movls	r9,0
80002a08:	ef f9 8a 00 	st.wls	r7[0x0],r9
80002a0c:	58 06       	cp.w	r6,0
80002a0e:	c3 a0       	breq	80002a82 <tmalloc_small+0x162>
80002a10:	74 79       	ld.w	r9,r10[0x1c]
80002a12:	f2 c7 ff b5 	sub	r7,r9,-75
80002a16:	f8 07 03 27 	ld.w	r7,r12[r7<<0x2]
80002a1a:	14 37       	cp.w	r7,r10
80002a1c:	c1 01       	brne	80002a3c <tmalloc_small+0x11c>
80002a1e:	2b 59       	sub	r9,-75
80002a20:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80002a24:	58 08       	cp.w	r8,0
80002a26:	c1 71       	brne	80002a54 <tmalloc_small+0x134>
80002a28:	6e 78       	ld.w	r8,r7[0x1c]
80002a2a:	30 19       	mov	r9,1
80002a2c:	f2 08 09 48 	lsl	r8,r9,r8
80002a30:	5c d8       	com	r8
80002a32:	78 19       	ld.w	r9,r12[0x4]
80002a34:	f3 e8 00 08 	and	r8,r9,r8
80002a38:	99 18       	st.w	r12[0x4],r8
80002a3a:	c2 48       	rjmp	80002a82 <tmalloc_small+0x162>
80002a3c:	78 49       	ld.w	r9,r12[0x10]
80002a3e:	0c 39       	cp.w	r9,r6
80002a40:	e0 8b 00 08 	brhi	80002a50 <tmalloc_small+0x130>
80002a44:	6c 49       	ld.w	r9,r6[0x10]
80002a46:	14 39       	cp.w	r9,r10
80002a48:	ed f8 0a 04 	st.weq	r6[0x10],r8
80002a4c:	ed f8 1a 05 	st.wne	r6[0x14],r8
80002a50:	58 08       	cp.w	r8,0
80002a52:	c1 80       	breq	80002a82 <tmalloc_small+0x162>
80002a54:	78 49       	ld.w	r9,r12[0x10]
80002a56:	10 39       	cp.w	r9,r8
80002a58:	e0 8b 00 15 	brhi	80002a82 <tmalloc_small+0x162>
80002a5c:	91 66       	st.w	r8[0x18],r6
80002a5e:	74 49       	ld.w	r9,r10[0x10]
80002a60:	58 09       	cp.w	r9,0
80002a62:	c0 70       	breq	80002a70 <tmalloc_small+0x150>
80002a64:	78 47       	ld.w	r7,r12[0x10]
80002a66:	12 37       	cp.w	r7,r9
80002a68:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80002a6c:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80002a70:	74 59       	ld.w	r9,r10[0x14]
80002a72:	58 09       	cp.w	r9,0
80002a74:	c0 70       	breq	80002a82 <tmalloc_small+0x162>
80002a76:	78 47       	ld.w	r7,r12[0x10]
80002a78:	12 37       	cp.w	r7,r9
80002a7a:	f1 f9 8a 05 	st.wls	r8[0x14],r9
80002a7e:	f3 f8 8a 06 	st.wls	r9[0x18],r8
      if (rsize < MIN_CHUNK_SIZE)
80002a82:	58 fe       	cp.w	lr,15
80002a84:	e0 8b 00 0d 	brhi	80002a9e <tmalloc_small+0x17e>
        set_inuse_and_pinuse(m, v, (rsize + nb));
80002a88:	fc 0b 00 0b 	add	r11,lr,r11
80002a8c:	16 98       	mov	r8,r11
80002a8e:	e8 18 00 03 	orl	r8,0x3
80002a92:	95 18       	st.w	r10[0x4],r8
80002a94:	16 04       	add	r4,r11
80002a96:	68 18       	ld.w	r8,r4[0x4]
80002a98:	a1 a8       	sbr	r8,0x0
80002a9a:	89 18       	st.w	r4[0x4],r8
80002a9c:	c2 88       	rjmp	80002aec <tmalloc_small+0x1cc>
      else {
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
80002a9e:	e8 1b 00 03 	orl	r11,0x3
80002aa2:	95 1b       	st.w	r10[0x4],r11
        set_size_and_pinuse_of_free_chunk(r, rsize);
80002aa4:	1c 98       	mov	r8,lr
80002aa6:	a1 a8       	sbr	r8,0x0
80002aa8:	8b 18       	st.w	r5[0x4],r8
80002aaa:	ea 0e 09 0e 	st.w	r5[lr],lr
        replace_dv(m, r, rsize);
80002aae:	78 28       	ld.w	r8,r12[0x8]
80002ab0:	58 08       	cp.w	r8,0
80002ab2:	c1 b0       	breq	80002ae8 <tmalloc_small+0x1c8>
80002ab4:	78 59       	ld.w	r9,r12[0x14]
80002ab6:	a3 98       	lsr	r8,0x3
80002ab8:	f8 cb ff dc 	sub	r11,r12,-36
80002abc:	f6 08 00 3b 	add	r11,r11,r8<<0x3
80002ac0:	78 07       	ld.w	r7,r12[0x0]
80002ac2:	30 16       	mov	r6,1
80002ac4:	ec 08 09 48 	lsl	r8,r6,r8
80002ac8:	f1 e7 00 06 	and	r6,r8,r7
80002acc:	c0 51       	brne	80002ad6 <tmalloc_small+0x1b6>
80002ace:	0e 48       	or	r8,r7
80002ad0:	99 08       	st.w	r12[0x0],r8
80002ad2:	16 98       	mov	r8,r11
80002ad4:	c0 68       	rjmp	80002ae0 <tmalloc_small+0x1c0>
80002ad6:	76 28       	ld.w	r8,r11[0x8]
80002ad8:	78 47       	ld.w	r7,r12[0x10]
80002ada:	0e 38       	cp.w	r8,r7
80002adc:	f6 08 17 30 	movlo	r8,r11
80002ae0:	97 29       	st.w	r11[0x8],r9
80002ae2:	91 39       	st.w	r8[0xc],r9
80002ae4:	93 28       	st.w	r9[0x8],r8
80002ae6:	93 3b       	st.w	r9[0xc],r11
80002ae8:	99 2e       	st.w	r12[0x8],lr
80002aea:	99 55       	st.w	r12[0x14],r5
      }
      return chunk2mem(v);
80002aec:	f4 cc ff f8 	sub	r12,r10,-8
80002af0:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002af4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0

80002af8 <tmalloc_large>:
}

/* ---------------------------- malloc support --------------------------- */

/* allocate a large request from the best fitting chunk in a treebin */
static void* tmalloc_large(mstate m, size_t nb) {
80002af8:	eb cd 40 fc 	pushm	r2-r7,lr
  tchunkptr v = 0;
  size_t rsize = -nb; /* Unsigned negation */
80002afc:	f6 07 11 00 	rsub	r7,r11,0
  tchunkptr t;
  bindex_t idx;
  compute_tree_index(nb, idx);
80002b00:	f6 08 16 08 	lsr	r8,r11,0x8
80002b04:	c0 31       	brne	80002b0a <tmalloc_large+0x12>
80002b06:	30 03       	mov	r3,0
80002b08:	c2 d8       	rjmp	80002b62 <tmalloc_large+0x6a>
80002b0a:	e0 48 ff ff 	cp.w	r8,65535
80002b0e:	e0 88 00 04 	brls	80002b16 <tmalloc_large+0x1e>
80002b12:	31 f3       	mov	r3,31
80002b14:	c2 78       	rjmp	80002b62 <tmalloc_large+0x6a>
80002b16:	f0 ce 01 00 	sub	lr,r8,256
80002b1a:	b1 8e       	lsr	lr,0x10
80002b1c:	e2 1e 00 08 	andl	lr,0x8,COH
80002b20:	f0 0e 09 48 	lsl	r8,r8,lr
80002b24:	f0 ca 10 00 	sub	r10,r8,4096
80002b28:	b1 8a       	lsr	r10,0x10
80002b2a:	e2 1a 00 04 	andl	r10,0x4,COH
80002b2e:	f0 0a 09 48 	lsl	r8,r8,r10
80002b32:	f0 c9 40 00 	sub	r9,r8,16384
80002b36:	b1 89       	lsr	r9,0x10
80002b38:	e2 19 00 02 	andl	r9,0x2,COH
80002b3c:	f0 09 09 48 	lsl	r8,r8,r9
80002b40:	af 98       	lsr	r8,0xf
80002b42:	fc 0e 11 0e 	rsub	lr,lr,14
80002b46:	fc 0a 01 0a 	sub	r10,lr,r10
80002b4a:	f4 09 01 09 	sub	r9,r10,r9
80002b4e:	f2 08 00 08 	add	r8,r9,r8
80002b52:	f0 c3 ff f9 	sub	r3,r8,-7
80002b56:	f6 03 0a 43 	lsr	r3,r11,r3
80002b5a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80002b5e:	e6 08 00 13 	add	r3,r3,r8<<0x1

  if ((t = *treebin_at(m, idx)) != 0) {
80002b62:	e6 c8 ff b5 	sub	r8,r3,-75
80002b66:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002b6a:	58 08       	cp.w	r8,0
80002b6c:	c0 31       	brne	80002b72 <tmalloc_large+0x7a>
80002b6e:	30 04       	mov	r4,0
80002b70:	c3 88       	rjmp	80002be0 <tmalloc_large+0xe8>
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
80002b72:	59 f3       	cp.w	r3,31
80002b74:	c0 31       	brne	80002b7a <tmalloc_large+0x82>
80002b76:	30 0e       	mov	lr,0
80002b78:	c0 58       	rjmp	80002b82 <tmalloc_large+0x8a>
80002b7a:	e6 0e 16 01 	lsr	lr,r3,0x1
80002b7e:	fc 0e 11 19 	rsub	lr,lr,25
80002b82:	f6 0e 09 4e 	lsl	lr,r11,lr
80002b86:	30 06       	mov	r6,0
80002b88:	0c 94       	mov	r4,r6
        if ((rsize = trem) == 0)
          break;
      }
      rt = t->child[1];
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
      if (rt != 0 && rt != t)
80002b8a:	30 05       	mov	r5,0
    /* Traverse tree for this bin looking for node with size == nb */
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    for (;;) {
      tchunkptr rt;
      size_t trem = chunksize(t) - nb;
80002b8c:	70 19       	ld.w	r9,r8[0x4]
80002b8e:	e0 19 ff fc 	andl	r9,0xfffc
80002b92:	16 19       	sub	r9,r11
      if (trem < rsize) {
80002b94:	12 37       	cp.w	r7,r9
80002b96:	e0 88 00 09 	brls	80002ba8 <tmalloc_large+0xb0>
        v = t;
        if ((rsize = trem) == 0)
80002b9a:	58 09       	cp.w	r9,0
80002b9c:	c0 41       	brne	80002ba4 <tmalloc_large+0xac>
80002b9e:	12 97       	mov	r7,r9
80002ba0:	10 94       	mov	r4,r8
80002ba2:	c1 88       	rjmp	80002bd2 <tmalloc_large+0xda>
80002ba4:	12 97       	mov	r7,r9
80002ba6:	10 94       	mov	r4,r8
          break;
      }
      rt = t->child[1];
80002ba8:	70 59       	ld.w	r9,r8[0x14]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
80002baa:	fc 0a 16 1f 	lsr	r10,lr,0x1f
80002bae:	2f ca       	sub	r10,-4
80002bb0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
      if (rt != 0 && rt != t)
80002bb4:	58 09       	cp.w	r9,0
80002bb6:	5f 12       	srne	r2
80002bb8:	10 39       	cp.w	r9,r8
80002bba:	5f 1a       	srne	r10
80002bbc:	e5 ea 00 0a 	and	r10,r2,r10
80002bc0:	ea 0a 18 00 	cp.b	r10,r5
80002bc4:	f2 06 17 10 	movne	r6,r9
        rst = rt;
      if (t == 0) {
80002bc8:	58 08       	cp.w	r8,0
80002bca:	c0 30       	breq	80002bd0 <tmalloc_large+0xd8>
        t = rst; /* set t to least subtree holding sizes > nb */
        break;
      }
      sizebits <<= 1;
80002bcc:	a1 7e       	lsl	lr,0x1
    }
80002bce:	cd fb       	rjmp	80002b8c <tmalloc_large+0x94>
80002bd0:	0c 98       	mov	r8,r6
  }

  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
80002bd2:	58 08       	cp.w	r8,0
80002bd4:	5f 0a       	sreq	r10
80002bd6:	58 04       	cp.w	r4,0
80002bd8:	5f 09       	sreq	r9
80002bda:	f5 e9 00 09 	and	r9,r10,r9
80002bde:	c3 40       	breq	80002c46 <tmalloc_large+0x14e>
    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
80002be0:	30 29       	mov	r9,2
80002be2:	f2 03 09 43 	lsl	r3,r9,r3
80002be6:	e6 09 11 00 	rsub	r9,r3,0
80002bea:	f3 e3 10 03 	or	r3,r9,r3
80002bee:	78 19       	ld.w	r9,r12[0x4]
80002bf0:	12 63       	and	r3,r9
    if (leftbits != 0) {
80002bf2:	c2 a0       	breq	80002c46 <tmalloc_large+0x14e>
      bindex_t i;
      binmap_t leastbit = least_bit(leftbits);
      compute_bit2idx(leastbit, i);
80002bf4:	e6 0a 11 00 	rsub	r10,r3,0
80002bf8:	06 6a       	and	r10,r3
80002bfa:	20 1a       	sub	r10,1
80002bfc:	f4 09 16 0c 	lsr	r9,r10,0xc
80002c00:	e2 19 00 10 	andl	r9,0x10,COH
80002c04:	f4 09 0a 4a 	lsr	r10,r10,r9
80002c08:	f4 08 16 05 	lsr	r8,r10,0x5
80002c0c:	e2 18 00 08 	andl	r8,0x8,COH
80002c10:	f0 09 00 0e 	add	lr,r8,r9
80002c14:	f4 08 0a 4a 	lsr	r10,r10,r8
80002c18:	f4 08 16 02 	lsr	r8,r10,0x2
80002c1c:	e2 18 00 04 	andl	r8,0x4,COH
80002c20:	10 0e       	add	lr,r8
80002c22:	f4 08 0a 4a 	lsr	r10,r10,r8
80002c26:	f4 09 16 01 	lsr	r9,r10,0x1
80002c2a:	e2 19 00 02 	andl	r9,0x2,COH
80002c2e:	12 0e       	add	lr,r9
80002c30:	f4 09 0a 49 	lsr	r9,r10,r9
80002c34:	f1 d9 c0 21 	bfextu	r8,r9,0x1,0x1
      t = *treebin_at(m, i);
80002c38:	f2 08 0a 49 	lsr	r9,r9,r8
80002c3c:	1c 08       	add	r8,lr
80002c3e:	12 08       	add	r8,r9
80002c40:	2b 58       	sub	r8,-75
80002c42:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
80002c46:	58 08       	cp.w	r8,0
80002c48:	c0 31       	brne	80002c4e <tmalloc_large+0x156>
80002c4a:	c1 18       	rjmp	80002c6c <tmalloc_large+0x174>
80002c4c:	12 98       	mov	r8,r9
    size_t trem = chunksize(t) - nb;
80002c4e:	70 19       	ld.w	r9,r8[0x4]
80002c50:	e0 19 ff fc 	andl	r9,0xfffc
80002c54:	16 19       	sub	r9,r11
    if (trem < rsize) {
80002c56:	0e 39       	cp.w	r9,r7
80002c58:	f2 07 17 30 	movlo	r7,r9
80002c5c:	f0 04 17 30 	movlo	r4,r8
      rsize = trem;
      v = t;
    }
    t = leftmost_child(t);
80002c60:	70 49       	ld.w	r9,r8[0x10]
80002c62:	58 09       	cp.w	r9,0
80002c64:	cf 41       	brne	80002c4c <tmalloc_large+0x154>
80002c66:	70 58       	ld.w	r8,r8[0x14]
      compute_bit2idx(leastbit, i);
      t = *treebin_at(m, i);
    }
  }

  while (t != 0) { /* find smallest of tree or subtree */
80002c68:	58 08       	cp.w	r8,0
80002c6a:	cf 21       	brne	80002c4e <tmalloc_large+0x156>
    }
    t = leftmost_child(t);
  }

  /*  If dv is a better fit, return 0 so malloc will use it */
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
80002c6c:	58 04       	cp.w	r4,0
80002c6e:	e0 80 01 2f 	breq	80002ecc <tmalloc_large+0x3d4>
80002c72:	78 28       	ld.w	r8,r12[0x8]
80002c74:	16 18       	sub	r8,r11
80002c76:	0e 38       	cp.w	r8,r7
80002c78:	e0 88 01 2a 	brls	80002ecc <tmalloc_large+0x3d4>
    if (RTCHECK(ok_address(m, v))) { /* split */
80002c7c:	78 45       	ld.w	r5,r12[0x10]
80002c7e:	08 35       	cp.w	r5,r4
80002c80:	e0 8b 01 26 	brhi	80002ecc <tmalloc_large+0x3d4>
      mchunkptr r = chunk_plus_offset(v, nb);
80002c84:	08 93       	mov	r3,r4
80002c86:	e8 0b 00 06 	add	r6,r4,r11
      assert(chunksize(v) == rsize + nb);
      if (RTCHECK(ok_next(v, r))) {
80002c8a:	0c 34       	cp.w	r4,r6
80002c8c:	e0 82 01 20 	brhs	80002ecc <tmalloc_large+0x3d4>
        unlink_large_chunk(m, v);
80002c90:	68 6e       	ld.w	lr,r4[0x18]
80002c92:	68 3a       	ld.w	r10,r4[0xc]
80002c94:	08 3a       	cp.w	r10,r4
80002c96:	c0 c0       	breq	80002cae <tmalloc_large+0x1b6>
80002c98:	68 28       	ld.w	r8,r4[0x8]
80002c9a:	10 35       	cp.w	r5,r8
80002c9c:	f4 08 17 b0 	movhi	r8,r10
80002ca0:	f1 fa 8a 03 	st.wls	r8[0xc],r10
80002ca4:	f5 f8 8a 02 	st.wls	r10[0x8],r8
80002ca8:	f4 08 17 80 	movls	r8,r10
80002cac:	c1 c8       	rjmp	80002ce4 <tmalloc_large+0x1ec>
80002cae:	74 58       	ld.w	r8,r10[0x14]
80002cb0:	58 08       	cp.w	r8,0
80002cb2:	c0 30       	breq	80002cb8 <tmalloc_large+0x1c0>
80002cb4:	2e ca       	sub	r10,-20
80002cb6:	c0 98       	rjmp	80002cc8 <tmalloc_large+0x1d0>
80002cb8:	74 48       	ld.w	r8,r10[0x10]
80002cba:	58 08       	cp.w	r8,0
80002cbc:	c1 40       	breq	80002ce4 <tmalloc_large+0x1ec>
80002cbe:	2f 0a       	sub	r10,-16
80002cc0:	c0 48       	rjmp	80002cc8 <tmalloc_large+0x1d0>
80002cc2:	f0 ca ff ec 	sub	r10,r8,-20
80002cc6:	12 98       	mov	r8,r9
80002cc8:	70 59       	ld.w	r9,r8[0x14]
80002cca:	58 09       	cp.w	r9,0
80002ccc:	cf b1       	brne	80002cc2 <tmalloc_large+0x1ca>
80002cce:	70 49       	ld.w	r9,r8[0x10]
80002cd0:	58 09       	cp.w	r9,0
80002cd2:	c0 40       	breq	80002cda <tmalloc_large+0x1e2>
80002cd4:	f0 ca ff f0 	sub	r10,r8,-16
80002cd8:	cf 7b       	rjmp	80002cc6 <tmalloc_large+0x1ce>
80002cda:	14 35       	cp.w	r5,r10
80002cdc:	f9 b9 08 00 	movls	r9,0
80002ce0:	f5 f9 8a 00 	st.wls	r10[0x0],r9
80002ce4:	58 0e       	cp.w	lr,0
80002ce6:	c3 a0       	breq	80002d5a <tmalloc_large+0x262>
80002ce8:	68 7a       	ld.w	r10,r4[0x1c]
80002cea:	f4 c9 ff b5 	sub	r9,r10,-75
80002cee:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
80002cf2:	08 39       	cp.w	r9,r4
80002cf4:	c1 01       	brne	80002d14 <tmalloc_large+0x21c>
80002cf6:	2b 5a       	sub	r10,-75
80002cf8:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
80002cfc:	58 08       	cp.w	r8,0
80002cfe:	c1 71       	brne	80002d2c <tmalloc_large+0x234>
80002d00:	72 78       	ld.w	r8,r9[0x1c]
80002d02:	30 19       	mov	r9,1
80002d04:	f2 08 09 48 	lsl	r8,r9,r8
80002d08:	5c d8       	com	r8
80002d0a:	78 19       	ld.w	r9,r12[0x4]
80002d0c:	f3 e8 00 08 	and	r8,r9,r8
80002d10:	99 18       	st.w	r12[0x4],r8
80002d12:	c2 48       	rjmp	80002d5a <tmalloc_large+0x262>
80002d14:	78 49       	ld.w	r9,r12[0x10]
80002d16:	1c 39       	cp.w	r9,lr
80002d18:	e0 8b 00 08 	brhi	80002d28 <tmalloc_large+0x230>
80002d1c:	7c 49       	ld.w	r9,lr[0x10]
80002d1e:	08 39       	cp.w	r9,r4
80002d20:	fd f8 0a 04 	st.weq	lr[0x10],r8
80002d24:	fd f8 1a 05 	st.wne	lr[0x14],r8
80002d28:	58 08       	cp.w	r8,0
80002d2a:	c1 80       	breq	80002d5a <tmalloc_large+0x262>
80002d2c:	78 49       	ld.w	r9,r12[0x10]
80002d2e:	10 39       	cp.w	r9,r8
80002d30:	e0 8b 00 15 	brhi	80002d5a <tmalloc_large+0x262>
80002d34:	91 6e       	st.w	r8[0x18],lr
80002d36:	68 49       	ld.w	r9,r4[0x10]
80002d38:	58 09       	cp.w	r9,0
80002d3a:	c0 70       	breq	80002d48 <tmalloc_large+0x250>
80002d3c:	78 4a       	ld.w	r10,r12[0x10]
80002d3e:	12 3a       	cp.w	r10,r9
80002d40:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80002d44:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80002d48:	68 59       	ld.w	r9,r4[0x14]
80002d4a:	58 09       	cp.w	r9,0
80002d4c:	c0 70       	breq	80002d5a <tmalloc_large+0x262>
80002d4e:	78 4a       	ld.w	r10,r12[0x10]
80002d50:	12 3a       	cp.w	r10,r9
80002d52:	f1 f9 8a 05 	st.wls	r8[0x14],r9
80002d56:	f3 f8 8a 06 	st.wls	r9[0x18],r8
        if (rsize < MIN_CHUNK_SIZE)
80002d5a:	58 f7       	cp.w	r7,15
80002d5c:	e0 8b 00 0d 	brhi	80002d76 <tmalloc_large+0x27e>
          set_inuse_and_pinuse(m, v, (rsize + nb));
80002d60:	ee 0b 00 0b 	add	r11,r7,r11
80002d64:	16 98       	mov	r8,r11
80002d66:	e8 18 00 03 	orl	r8,0x3
80002d6a:	89 18       	st.w	r4[0x4],r8
80002d6c:	16 03       	add	r3,r11
80002d6e:	66 18       	ld.w	r8,r3[0x4]
80002d70:	a1 a8       	sbr	r8,0x0
80002d72:	87 18       	st.w	r3[0x4],r8
80002d74:	ca 88       	rjmp	80002ec4 <tmalloc_large+0x3cc>
        else {
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
80002d76:	e8 1b 00 03 	orl	r11,0x3
80002d7a:	89 1b       	st.w	r4[0x4],r11
          set_size_and_pinuse_of_free_chunk(r, rsize);
80002d7c:	0e 98       	mov	r8,r7
80002d7e:	a1 a8       	sbr	r8,0x0
80002d80:	8d 18       	st.w	r6[0x4],r8
80002d82:	ec 07 09 07 	st.w	r6[r7],r7
          insert_chunk(m, r, rsize);
80002d86:	ee 08 16 03 	lsr	r8,r7,0x3
80002d8a:	59 f8       	cp.w	r8,31
80002d8c:	e0 8b 00 1b 	brhi	80002dc2 <tmalloc_large+0x2ca>
80002d90:	f8 c9 ff dc 	sub	r9,r12,-36
80002d94:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002d98:	78 0a       	ld.w	r10,r12[0x0]
80002d9a:	30 1b       	mov	r11,1
80002d9c:	f6 08 09 48 	lsl	r8,r11,r8
80002da0:	f1 ea 00 0b 	and	r11,r8,r10
80002da4:	c0 51       	brne	80002dae <tmalloc_large+0x2b6>
80002da6:	14 48       	or	r8,r10
80002da8:	99 08       	st.w	r12[0x0],r8
80002daa:	12 98       	mov	r8,r9
80002dac:	c0 68       	rjmp	80002db8 <tmalloc_large+0x2c0>
80002dae:	72 28       	ld.w	r8,r9[0x8]
80002db0:	78 4a       	ld.w	r10,r12[0x10]
80002db2:	14 38       	cp.w	r8,r10
80002db4:	f2 08 17 30 	movlo	r8,r9
80002db8:	93 26       	st.w	r9[0x8],r6
80002dba:	91 36       	st.w	r8[0xc],r6
80002dbc:	8d 28       	st.w	r6[0x8],r8
80002dbe:	8d 39       	st.w	r6[0xc],r9
80002dc0:	c8 28       	rjmp	80002ec4 <tmalloc_large+0x3cc>
80002dc2:	0c 99       	mov	r9,r6
80002dc4:	ee 08 16 08 	lsr	r8,r7,0x8
80002dc8:	c0 31       	brne	80002dce <tmalloc_large+0x2d6>
80002dca:	30 0a       	mov	r10,0
80002dcc:	c2 d8       	rjmp	80002e26 <tmalloc_large+0x32e>
80002dce:	e0 48 ff ff 	cp.w	r8,65535
80002dd2:	e0 88 00 04 	brls	80002dda <tmalloc_large+0x2e2>
80002dd6:	31 fa       	mov	r10,31
80002dd8:	c2 78       	rjmp	80002e26 <tmalloc_large+0x32e>
80002dda:	f0 ce 01 00 	sub	lr,r8,256
80002dde:	b1 8e       	lsr	lr,0x10
80002de0:	e2 1e 00 08 	andl	lr,0x8,COH
80002de4:	f0 0e 09 48 	lsl	r8,r8,lr
80002de8:	f0 cb 10 00 	sub	r11,r8,4096
80002dec:	b1 8b       	lsr	r11,0x10
80002dee:	e2 1b 00 04 	andl	r11,0x4,COH
80002df2:	f0 0b 09 48 	lsl	r8,r8,r11
80002df6:	f0 ca 40 00 	sub	r10,r8,16384
80002dfa:	b1 8a       	lsr	r10,0x10
80002dfc:	e2 1a 00 02 	andl	r10,0x2,COH
80002e00:	f0 0a 09 48 	lsl	r8,r8,r10
80002e04:	af 98       	lsr	r8,0xf
80002e06:	fc 0e 11 0e 	rsub	lr,lr,14
80002e0a:	fc 0b 01 0b 	sub	r11,lr,r11
80002e0e:	f6 0a 01 0a 	sub	r10,r11,r10
80002e12:	f4 08 00 08 	add	r8,r10,r8
80002e16:	f0 ca ff f9 	sub	r10,r8,-7
80002e1a:	ee 0a 0a 4a 	lsr	r10,r7,r10
80002e1e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80002e22:	f4 08 00 1a 	add	r10,r10,r8<<0x1
80002e26:	93 7a       	st.w	r9[0x1c],r10
80002e28:	30 08       	mov	r8,0
80002e2a:	93 58       	st.w	r9[0x14],r8
80002e2c:	93 48       	st.w	r9[0x10],r8
80002e2e:	78 18       	ld.w	r8,r12[0x4]
80002e30:	30 1b       	mov	r11,1
80002e32:	f6 0a 09 4b 	lsl	r11,r11,r10
80002e36:	f7 e8 00 0e 	and	lr,r11,r8
80002e3a:	c0 d1       	brne	80002e54 <tmalloc_large+0x35c>
80002e3c:	f7 e8 10 08 	or	r8,r11,r8
80002e40:	99 18       	st.w	r12[0x4],r8
80002e42:	2b 5a       	sub	r10,-75
80002e44:	f8 0a 09 29 	st.w	r12[r10<<0x2],r9
80002e48:	f8 0a 00 2a 	add	r10,r12,r10<<0x2
80002e4c:	93 6a       	st.w	r9[0x18],r10
80002e4e:	93 39       	st.w	r9[0xc],r9
80002e50:	93 29       	st.w	r9[0x8],r9
80002e52:	c3 98       	rjmp	80002ec4 <tmalloc_large+0x3cc>
80002e54:	f4 c8 ff b5 	sub	r8,r10,-75
80002e58:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002e5c:	59 fa       	cp.w	r10,31
80002e5e:	c0 31       	brne	80002e64 <tmalloc_large+0x36c>
80002e60:	30 0b       	mov	r11,0
80002e62:	c0 48       	rjmp	80002e6a <tmalloc_large+0x372>
80002e64:	a1 9a       	lsr	r10,0x1
80002e66:	f4 0b 11 19 	rsub	r11,r10,25
80002e6a:	ee 0b 09 4b 	lsl	r11,r7,r11
80002e6e:	70 1a       	ld.w	r10,r8[0x4]
80002e70:	e0 1a ff fc 	andl	r10,0xfffc
80002e74:	0e 3a       	cp.w	r10,r7
80002e76:	c1 90       	breq	80002ea8 <tmalloc_large+0x3b0>
80002e78:	f6 0e 16 1f 	lsr	lr,r11,0x1f
80002e7c:	fc ca ff fc 	sub	r10,lr,-4
80002e80:	f0 0a 00 26 	add	r6,r8,r10<<0x2
80002e84:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80002e88:	58 0a       	cp.w	r10,0
80002e8a:	c0 40       	breq	80002e92 <tmalloc_large+0x39a>
80002e8c:	a1 7b       	lsl	r11,0x1
80002e8e:	14 98       	mov	r8,r10
80002e90:	ce fb       	rjmp	80002e6e <tmalloc_large+0x376>
80002e92:	78 4a       	ld.w	r10,r12[0x10]
80002e94:	0c 3a       	cp.w	r10,r6
80002e96:	e0 8b 00 17 	brhi	80002ec4 <tmalloc_large+0x3cc>
80002e9a:	2f ce       	sub	lr,-4
80002e9c:	f0 0e 09 29 	st.w	r8[lr<<0x2],r9
80002ea0:	93 68       	st.w	r9[0x18],r8
80002ea2:	93 39       	st.w	r9[0xc],r9
80002ea4:	93 29       	st.w	r9[0x8],r9
80002ea6:	c0 f8       	rjmp	80002ec4 <tmalloc_large+0x3cc>
80002ea8:	70 2a       	ld.w	r10,r8[0x8]
80002eaa:	78 4b       	ld.w	r11,r12[0x10]
80002eac:	10 3b       	cp.w	r11,r8
80002eae:	e0 8b 00 0b 	brhi	80002ec4 <tmalloc_large+0x3cc>
80002eb2:	14 3b       	cp.w	r11,r10
80002eb4:	e0 8b 00 08 	brhi	80002ec4 <tmalloc_large+0x3cc>
80002eb8:	95 39       	st.w	r10[0xc],r9
80002eba:	91 29       	st.w	r8[0x8],r9
80002ebc:	93 2a       	st.w	r9[0x8],r10
80002ebe:	93 38       	st.w	r9[0xc],r8
80002ec0:	30 08       	mov	r8,0
80002ec2:	93 68       	st.w	r9[0x18],r8
        }
        return chunk2mem(v);
80002ec4:	e8 cc ff f8 	sub	r12,r4,-8
80002ec8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002ecc:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002ed0 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
80002ed0:	eb cd 40 e0 	pushm	r5-r7,lr
80002ed4:	58 0c       	cp.w	r12,0
80002ed6:	e0 80 02 7d 	breq	800033d0 <free+0x500>
    mchunkptr p  = mem2chunk(mem);
80002eda:	20 8c       	sub	r12,8
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
80002edc:	fe f8 04 f8 	ld.w	r8,pc[1272]
80002ee0:	70 4b       	ld.w	r11,r8[0x10]
80002ee2:	18 3b       	cp.w	r11,r12
80002ee4:	e0 8b 02 76 	brhi	800033d0 <free+0x500>
80002ee8:	78 18       	ld.w	r8,r12[0x4]
80002eea:	10 99       	mov	r9,r8
80002eec:	e2 19 00 02 	andl	r9,0x2,COH
80002ef0:	e0 80 02 70 	breq	800033d0 <free+0x500>
        size_t psize = chunksize(p);
80002ef4:	10 97       	mov	r7,r8
80002ef6:	e0 17 ff fc 	andl	r7,0xfffc
        mchunkptr next = chunk_plus_offset(p, psize);
80002efa:	f8 07 00 0a 	add	r10,r12,r7
        if (!pinuse(p)) {
80002efe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f02:	e0 81 00 cd 	brne	8000309c <free+0x1cc>
          size_t prevsize = p->prev_foot;
80002f06:	78 08       	ld.w	r8,r12[0x0]
          if ((prevsize & IS_MMAPPED_BIT) != 0) {
80002f08:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80002f0c:	c1 30       	breq	80002f32 <free+0x62>
            prevsize &= ~IS_MMAPPED_BIT;
80002f0e:	a1 c8       	cbr	r8,0x0
            psize += prevsize + MMAP_FOOT_PAD;
80002f10:	10 07       	add	r7,r8
80002f12:	2f 07       	sub	r7,-16
            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
80002f14:	0e 9b       	mov	r11,r7
80002f16:	10 1c       	sub	r12,r8
80002f18:	f0 1f 01 30 	mcall	800033d8 <free+0x508>
80002f1c:	e0 81 02 5a 	brne	800033d0 <free+0x500>
              fm->footprint -= psize;
80002f20:	fe f8 04 b4 	ld.w	r8,pc[1204]
80002f24:	f0 f9 01 ac 	ld.w	r9,r8[428]
80002f28:	0e 19       	sub	r9,r7
80002f2a:	f1 49 01 ac 	st.w	r8[428],r9
80002f2e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
80002f32:	10 1c       	sub	r12,r8
            psize += prevsize;
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
80002f34:	18 3b       	cp.w	r11,r12
80002f36:	e0 8b 02 4d 	brhi	800033d0 <free+0x500>
              fm->footprint -= psize;
            goto postaction;
          }
          else {
            mchunkptr prev = chunk_minus_offset(p, prevsize);
            psize += prevsize;
80002f3a:	10 07       	add	r7,r8
            p = prev;
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
              if (p != fm->dv) {
80002f3c:	fe f9 04 98 	ld.w	r9,pc[1176]
80002f40:	72 59       	ld.w	r9,r9[0x14]
80002f42:	12 3c       	cp.w	r12,r9
80002f44:	e0 80 00 9a 	breq	80003078 <free+0x1a8>
                unlink_chunk(fm, p, prevsize);
80002f48:	a3 98       	lsr	r8,0x3
80002f4a:	59 f8       	cp.w	r8,31
80002f4c:	e0 8b 00 24 	brhi	80002f94 <free+0xc4>
80002f50:	78 29       	ld.w	r9,r12[0x8]
80002f52:	78 3e       	ld.w	lr,r12[0xc]
80002f54:	1c 39       	cp.w	r9,lr
80002f56:	c0 d1       	brne	80002f70 <free+0xa0>
80002f58:	fe f9 04 7c 	ld.w	r9,pc[1148]
80002f5c:	30 1b       	mov	r11,1
80002f5e:	f6 08 09 48 	lsl	r8,r11,r8
80002f62:	f0 0b 11 ff 	rsub	r11,r8,-1
80002f66:	72 08       	ld.w	r8,r9[0x0]
80002f68:	f7 e8 00 08 	and	r8,r11,r8
80002f6c:	93 08       	st.w	r9[0x0],r8
80002f6e:	c9 78       	rjmp	8000309c <free+0x1cc>
80002f70:	fe f6 04 64 	ld.w	r6,pc[1124]
80002f74:	2d c6       	sub	r6,-36
80002f76:	ec 08 00 38 	add	r8,r6,r8<<0x3
80002f7a:	10 39       	cp.w	r9,r8
80002f7c:	c0 40       	breq	80002f84 <free+0xb4>
80002f7e:	12 3b       	cp.w	r11,r9
80002f80:	e0 8b 00 8e 	brhi	8000309c <free+0x1cc>
80002f84:	10 3e       	cp.w	lr,r8
80002f86:	c0 40       	breq	80002f8e <free+0xbe>
80002f88:	1c 3b       	cp.w	r11,lr
80002f8a:	e0 8b 00 89 	brhi	8000309c <free+0x1cc>
80002f8e:	93 3e       	st.w	r9[0xc],lr
80002f90:	9d 29       	st.w	lr[0x8],r9
80002f92:	c8 58       	rjmp	8000309c <free+0x1cc>
80002f94:	18 96       	mov	r6,r12
80002f96:	78 65       	ld.w	r5,r12[0x18]
80002f98:	78 3e       	ld.w	lr,r12[0xc]
80002f9a:	18 3e       	cp.w	lr,r12
80002f9c:	c0 c0       	breq	80002fb4 <free+0xe4>
80002f9e:	78 28       	ld.w	r8,r12[0x8]
80002fa0:	10 3b       	cp.w	r11,r8
80002fa2:	fc 08 17 b0 	movhi	r8,lr
80002fa6:	f1 fe 8a 03 	st.wls	r8[0xc],lr
80002faa:	fd f8 8a 02 	st.wls	lr[0x8],r8
80002fae:	fc 08 17 80 	movls	r8,lr
80002fb2:	c1 c8       	rjmp	80002fea <free+0x11a>
80002fb4:	7c 58       	ld.w	r8,lr[0x14]
80002fb6:	58 08       	cp.w	r8,0
80002fb8:	c0 30       	breq	80002fbe <free+0xee>
80002fba:	2e ce       	sub	lr,-20
80002fbc:	c0 98       	rjmp	80002fce <free+0xfe>
80002fbe:	7c 48       	ld.w	r8,lr[0x10]
80002fc0:	58 08       	cp.w	r8,0
80002fc2:	c1 40       	breq	80002fea <free+0x11a>
80002fc4:	2f 0e       	sub	lr,-16
80002fc6:	c0 48       	rjmp	80002fce <free+0xfe>
80002fc8:	f0 ce ff ec 	sub	lr,r8,-20
80002fcc:	12 98       	mov	r8,r9
80002fce:	70 59       	ld.w	r9,r8[0x14]
80002fd0:	58 09       	cp.w	r9,0
80002fd2:	cf b1       	brne	80002fc8 <free+0xf8>
80002fd4:	70 49       	ld.w	r9,r8[0x10]
80002fd6:	58 09       	cp.w	r9,0
80002fd8:	c0 40       	breq	80002fe0 <free+0x110>
80002fda:	f0 ce ff f0 	sub	lr,r8,-16
80002fde:	cf 7b       	rjmp	80002fcc <free+0xfc>
80002fe0:	1c 3b       	cp.w	r11,lr
80002fe2:	f9 b9 08 00 	movls	r9,0
80002fe6:	fd f9 8a 00 	st.wls	lr[0x0],r9
80002fea:	58 05       	cp.w	r5,0
80002fec:	c5 80       	breq	8000309c <free+0x1cc>
80002fee:	6c 7b       	ld.w	r11,r6[0x1c]
80002ff0:	fe f9 03 e4 	ld.w	r9,pc[996]
80002ff4:	f2 c9 fe d4 	sub	r9,r9,-300
80002ff8:	f2 0b 00 29 	add	r9,r9,r11<<0x2
80002ffc:	72 0b       	ld.w	r11,r9[0x0]
80002ffe:	0c 3b       	cp.w	r11,r6
80003000:	c1 01       	brne	80003020 <free+0x150>
80003002:	93 08       	st.w	r9[0x0],r8
80003004:	58 08       	cp.w	r8,0
80003006:	c1 b1       	brne	8000303c <free+0x16c>
80003008:	fe f8 03 cc 	ld.w	r8,pc[972]
8000300c:	76 79       	ld.w	r9,r11[0x1c]
8000300e:	30 1b       	mov	r11,1
80003010:	f6 09 09 4b 	lsl	r11,r11,r9
80003014:	5c db       	com	r11
80003016:	70 19       	ld.w	r9,r8[0x4]
80003018:	f7 e9 00 09 	and	r9,r11,r9
8000301c:	91 19       	st.w	r8[0x4],r9
8000301e:	c3 f8       	rjmp	8000309c <free+0x1cc>
80003020:	fe f9 03 b4 	ld.w	r9,pc[948]
80003024:	72 49       	ld.w	r9,r9[0x10]
80003026:	0a 39       	cp.w	r9,r5
80003028:	e0 8b 00 08 	brhi	80003038 <free+0x168>
8000302c:	6a 49       	ld.w	r9,r5[0x10]
8000302e:	0c 39       	cp.w	r9,r6
80003030:	eb f8 0a 04 	st.weq	r5[0x10],r8
80003034:	eb f8 1a 05 	st.wne	r5[0x14],r8
80003038:	58 08       	cp.w	r8,0
8000303a:	c3 10       	breq	8000309c <free+0x1cc>
8000303c:	fe f9 03 98 	ld.w	r9,pc[920]
80003040:	72 49       	ld.w	r9,r9[0x10]
80003042:	10 39       	cp.w	r9,r8
80003044:	e0 8b 00 2c 	brhi	8000309c <free+0x1cc>
80003048:	91 65       	st.w	r8[0x18],r5
8000304a:	6c 49       	ld.w	r9,r6[0x10]
8000304c:	58 09       	cp.w	r9,0
8000304e:	c0 90       	breq	80003060 <free+0x190>
80003050:	fe fb 03 84 	ld.w	r11,pc[900]
80003054:	76 4b       	ld.w	r11,r11[0x10]
80003056:	12 3b       	cp.w	r11,r9
80003058:	f1 f9 8a 04 	st.wls	r8[0x10],r9
8000305c:	f3 f8 8a 06 	st.wls	r9[0x18],r8
80003060:	6c 59       	ld.w	r9,r6[0x14]
80003062:	58 09       	cp.w	r9,0
80003064:	c1 c0       	breq	8000309c <free+0x1cc>
80003066:	fe fb 03 6e 	ld.w	r11,pc[878]
8000306a:	76 4b       	ld.w	r11,r11[0x10]
8000306c:	12 3b       	cp.w	r11,r9
8000306e:	e0 8b 00 17 	brhi	8000309c <free+0x1cc>
80003072:	91 59       	st.w	r8[0x14],r9
80003074:	93 68       	st.w	r9[0x18],r8
80003076:	c1 38       	rjmp	8000309c <free+0x1cc>
              }
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
80003078:	74 18       	ld.w	r8,r10[0x4]
8000307a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000307e:	58 38       	cp.w	r8,3
80003080:	c0 e1       	brne	8000309c <free+0x1cc>
                fm->dvsize = psize;
80003082:	fe f8 03 52 	ld.w	r8,pc[850]
80003086:	91 27       	st.w	r8[0x8],r7
                set_free_with_pinuse(p, psize, next);
80003088:	74 18       	ld.w	r8,r10[0x4]
8000308a:	a1 c8       	cbr	r8,0x0
8000308c:	95 18       	st.w	r10[0x4],r8
8000308e:	0e 98       	mov	r8,r7
80003090:	a1 a8       	sbr	r8,0x0
80003092:	99 18       	st.w	r12[0x4],r8
80003094:	f8 07 09 07 	st.w	r12[r7],r7
                goto postaction;
80003098:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
8000309c:	14 3c       	cp.w	r12,r10
8000309e:	e0 82 01 99 	brhs	800033d0 <free+0x500>
800030a2:	74 18       	ld.w	r8,r10[0x4]
800030a4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800030a8:	e0 80 01 94 	breq	800033d0 <free+0x500>
          if (!cinuse(next)) {  /* consolidate forward */
800030ac:	10 99       	mov	r9,r8
800030ae:	e2 19 00 02 	andl	r9,0x2,COH
800030b2:	e0 81 00 e3 	brne	80003278 <free+0x3a8>
            if (next == fm->top) {
800030b6:	fe f9 03 1e 	ld.w	r9,pc[798]
800030ba:	72 69       	ld.w	r9,r9[0x18]
800030bc:	14 39       	cp.w	r9,r10
800030be:	c1 f1       	brne	800030fc <free+0x22c>
              size_t tsize = fm->topsize += psize;
800030c0:	fe f8 03 14 	ld.w	r8,pc[788]
800030c4:	70 39       	ld.w	r9,r8[0xc]
800030c6:	12 07       	add	r7,r9
800030c8:	91 37       	st.w	r8[0xc],r7
              fm->top = p;
800030ca:	91 6c       	st.w	r8[0x18],r12
              p->head = tsize | PINUSE_BIT;
800030cc:	0e 99       	mov	r9,r7
800030ce:	a1 a9       	sbr	r9,0x0
800030d0:	99 19       	st.w	r12[0x4],r9
              if (p == fm->dv) {
800030d2:	70 58       	ld.w	r8,r8[0x14]
800030d4:	18 38       	cp.w	r8,r12
800030d6:	c0 61       	brne	800030e2 <free+0x212>
                fm->dv = 0;
800030d8:	fe f8 02 fc 	ld.w	r8,pc[764]
800030dc:	30 09       	mov	r9,0
800030de:	91 59       	st.w	r8[0x14],r9
                fm->dvsize = 0;
800030e0:	91 29       	st.w	r8[0x8],r9
              }
              if (should_trim(fm, tsize))
800030e2:	fe f8 02 f2 	ld.w	r8,pc[754]
800030e6:	70 78       	ld.w	r8,r8[0x1c]
800030e8:	10 37       	cp.w	r7,r8
800030ea:	e0 88 01 73 	brls	800033d0 <free+0x500>
                sys_trim(fm, 0);
800030ee:	30 0b       	mov	r11,0
800030f0:	fe fc 02 e4 	ld.w	r12,pc[740]
800030f4:	f0 1f 00 ba 	mcall	800033dc <free+0x50c>
800030f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              goto postaction;
            }
            else if (next == fm->dv) {
800030fc:	fe f9 02 d8 	ld.w	r9,pc[728]
80003100:	72 59       	ld.w	r9,r9[0x14]
80003102:	14 39       	cp.w	r9,r10
80003104:	c0 e1       	brne	80003120 <free+0x250>
              size_t dsize = fm->dvsize += psize;
80003106:	fe f8 02 ce 	ld.w	r8,pc[718]
8000310a:	70 29       	ld.w	r9,r8[0x8]
8000310c:	12 07       	add	r7,r9
8000310e:	91 27       	st.w	r8[0x8],r7
              fm->dv = p;
80003110:	91 5c       	st.w	r8[0x14],r12
              set_size_and_pinuse_of_free_chunk(p, dsize);
80003112:	0e 98       	mov	r8,r7
80003114:	a1 a8       	sbr	r8,0x0
80003116:	99 18       	st.w	r12[0x4],r8
80003118:	f8 07 09 07 	st.w	r12[r7],r7
              goto postaction;
8000311c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            }
            else {
              size_t nsize = chunksize(next);
80003120:	e0 18 ff fc 	andl	r8,0xfffc
              psize += nsize;
80003124:	10 07       	add	r7,r8
              unlink_chunk(fm, next, nsize);
80003126:	a3 98       	lsr	r8,0x3
80003128:	59 f8       	cp.w	r8,31
8000312a:	e0 8b 00 2a 	brhi	8000317e <free+0x2ae>
8000312e:	74 29       	ld.w	r9,r10[0x8]
80003130:	74 3a       	ld.w	r10,r10[0xc]
80003132:	14 39       	cp.w	r9,r10
80003134:	c0 d1       	brne	8000314e <free+0x27e>
80003136:	fe f9 02 9e 	ld.w	r9,pc[670]
8000313a:	30 1a       	mov	r10,1
8000313c:	f4 08 09 48 	lsl	r8,r10,r8
80003140:	f0 0a 11 ff 	rsub	r10,r8,-1
80003144:	72 08       	ld.w	r8,r9[0x0]
80003146:	f5 e8 00 08 	and	r8,r10,r8
8000314a:	93 08       	st.w	r9[0x0],r8
8000314c:	c8 98       	rjmp	8000325e <free+0x38e>
8000314e:	fe fb 02 86 	ld.w	r11,pc[646]
80003152:	2d cb       	sub	r11,-36
80003154:	f6 08 00 38 	add	r8,r11,r8<<0x3
80003158:	10 39       	cp.w	r9,r8
8000315a:	c0 70       	breq	80003168 <free+0x298>
8000315c:	fe fb 02 78 	ld.w	r11,pc[632]
80003160:	76 4b       	ld.w	r11,r11[0x10]
80003162:	12 3b       	cp.w	r11,r9
80003164:	e0 8b 00 7d 	brhi	8000325e <free+0x38e>
80003168:	10 3a       	cp.w	r10,r8
8000316a:	c0 70       	breq	80003178 <free+0x2a8>
8000316c:	fe f8 02 68 	ld.w	r8,pc[616]
80003170:	70 48       	ld.w	r8,r8[0x10]
80003172:	14 38       	cp.w	r8,r10
80003174:	e0 8b 00 75 	brhi	8000325e <free+0x38e>
80003178:	93 3a       	st.w	r9[0xc],r10
8000317a:	95 29       	st.w	r10[0x8],r9
8000317c:	c7 18       	rjmp	8000325e <free+0x38e>
8000317e:	74 6e       	ld.w	lr,r10[0x18]
80003180:	74 3b       	ld.w	r11,r10[0xc]
80003182:	14 3b       	cp.w	r11,r10
80003184:	c0 f0       	breq	800031a2 <free+0x2d2>
80003186:	74 28       	ld.w	r8,r10[0x8]
80003188:	fe f9 02 4c 	ld.w	r9,pc[588]
8000318c:	72 49       	ld.w	r9,r9[0x10]
8000318e:	10 39       	cp.w	r9,r8
80003190:	f6 08 17 b0 	movhi	r8,r11
80003194:	f1 fb 8a 03 	st.wls	r8[0xc],r11
80003198:	f7 f8 8a 02 	st.wls	r11[0x8],r8
8000319c:	f6 08 17 80 	movls	r8,r11
800031a0:	c1 f8       	rjmp	800031de <free+0x30e>
800031a2:	76 58       	ld.w	r8,r11[0x14]
800031a4:	58 08       	cp.w	r8,0
800031a6:	c0 30       	breq	800031ac <free+0x2dc>
800031a8:	2e cb       	sub	r11,-20
800031aa:	c0 98       	rjmp	800031bc <free+0x2ec>
800031ac:	76 48       	ld.w	r8,r11[0x10]
800031ae:	58 08       	cp.w	r8,0
800031b0:	c1 70       	breq	800031de <free+0x30e>
800031b2:	2f 0b       	sub	r11,-16
800031b4:	c0 48       	rjmp	800031bc <free+0x2ec>
800031b6:	f0 cb ff ec 	sub	r11,r8,-20
800031ba:	12 98       	mov	r8,r9
800031bc:	70 59       	ld.w	r9,r8[0x14]
800031be:	58 09       	cp.w	r9,0
800031c0:	cf b1       	brne	800031b6 <free+0x2e6>
800031c2:	70 49       	ld.w	r9,r8[0x10]
800031c4:	58 09       	cp.w	r9,0
800031c6:	c0 40       	breq	800031ce <free+0x2fe>
800031c8:	f0 cb ff f0 	sub	r11,r8,-16
800031cc:	cf 7b       	rjmp	800031ba <free+0x2ea>
800031ce:	fe f9 02 06 	ld.w	r9,pc[518]
800031d2:	72 49       	ld.w	r9,r9[0x10]
800031d4:	16 39       	cp.w	r9,r11
800031d6:	f9 b9 08 00 	movls	r9,0
800031da:	f7 f9 8a 00 	st.wls	r11[0x0],r9
800031de:	58 0e       	cp.w	lr,0
800031e0:	c3 f0       	breq	8000325e <free+0x38e>
800031e2:	74 7b       	ld.w	r11,r10[0x1c]
800031e4:	4f c9       	lddpc	r9,800033d4 <free+0x504>
800031e6:	f2 c9 fe d4 	sub	r9,r9,-300
800031ea:	f2 0b 00 29 	add	r9,r9,r11<<0x2
800031ee:	72 0b       	ld.w	r11,r9[0x0]
800031f0:	14 3b       	cp.w	r11,r10
800031f2:	c0 f1       	brne	80003210 <free+0x340>
800031f4:	93 08       	st.w	r9[0x0],r8
800031f6:	58 08       	cp.w	r8,0
800031f8:	c1 91       	brne	8000322a <free+0x35a>
800031fa:	4f 78       	lddpc	r8,800033d4 <free+0x504>
800031fc:	76 79       	ld.w	r9,r11[0x1c]
800031fe:	30 1a       	mov	r10,1
80003200:	f4 09 09 4a 	lsl	r10,r10,r9
80003204:	5c da       	com	r10
80003206:	70 19       	ld.w	r9,r8[0x4]
80003208:	f5 e9 00 09 	and	r9,r10,r9
8000320c:	91 19       	st.w	r8[0x4],r9
8000320e:	c2 88       	rjmp	8000325e <free+0x38e>
80003210:	4f 19       	lddpc	r9,800033d4 <free+0x504>
80003212:	72 49       	ld.w	r9,r9[0x10]
80003214:	1c 39       	cp.w	r9,lr
80003216:	e0 8b 00 08 	brhi	80003226 <free+0x356>
8000321a:	7c 49       	ld.w	r9,lr[0x10]
8000321c:	14 39       	cp.w	r9,r10
8000321e:	fd f8 0a 04 	st.weq	lr[0x10],r8
80003222:	fd f8 1a 05 	st.wne	lr[0x14],r8
80003226:	58 08       	cp.w	r8,0
80003228:	c1 b0       	breq	8000325e <free+0x38e>
8000322a:	4e b9       	lddpc	r9,800033d4 <free+0x504>
8000322c:	72 49       	ld.w	r9,r9[0x10]
8000322e:	10 39       	cp.w	r9,r8
80003230:	e0 8b 00 17 	brhi	8000325e <free+0x38e>
80003234:	91 6e       	st.w	r8[0x18],lr
80003236:	74 49       	ld.w	r9,r10[0x10]
80003238:	58 09       	cp.w	r9,0
8000323a:	c0 80       	breq	8000324a <free+0x37a>
8000323c:	4e 6b       	lddpc	r11,800033d4 <free+0x504>
8000323e:	76 4b       	ld.w	r11,r11[0x10]
80003240:	12 3b       	cp.w	r11,r9
80003242:	f1 f9 8a 04 	st.wls	r8[0x10],r9
80003246:	f3 f8 8a 06 	st.wls	r9[0x18],r8
8000324a:	74 59       	ld.w	r9,r10[0x14]
8000324c:	58 09       	cp.w	r9,0
8000324e:	c0 80       	breq	8000325e <free+0x38e>
80003250:	4e 1a       	lddpc	r10,800033d4 <free+0x504>
80003252:	74 4a       	ld.w	r10,r10[0x10]
80003254:	12 3a       	cp.w	r10,r9
80003256:	f1 f9 8a 05 	st.wls	r8[0x14],r9
8000325a:	f3 f8 8a 06 	st.wls	r9[0x18],r8
              set_size_and_pinuse_of_free_chunk(p, psize);
8000325e:	0e 98       	mov	r8,r7
80003260:	a1 a8       	sbr	r8,0x0
80003262:	99 18       	st.w	r12[0x4],r8
80003264:	f8 07 09 07 	st.w	r12[r7],r7
              if (p == fm->dv) {
80003268:	4d b8       	lddpc	r8,800033d4 <free+0x504>
8000326a:	70 58       	ld.w	r8,r8[0x14]
8000326c:	18 38       	cp.w	r8,r12
8000326e:	c0 c1       	brne	80003286 <free+0x3b6>
                fm->dvsize = psize;
80003270:	4d 98       	lddpc	r8,800033d4 <free+0x504>
80003272:	91 27       	st.w	r8[0x8],r7
                goto postaction;
80003274:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
80003278:	a1 c8       	cbr	r8,0x0
8000327a:	95 18       	st.w	r10[0x4],r8
8000327c:	0e 98       	mov	r8,r7
8000327e:	a1 a8       	sbr	r8,0x0
80003280:	99 18       	st.w	r12[0x4],r8
80003282:	f8 07 09 07 	st.w	r12[r7],r7
          insert_chunk(fm, p, psize);
80003286:	ee 08 16 03 	lsr	r8,r7,0x3
8000328a:	59 f8       	cp.w	r8,31
8000328c:	e0 8b 00 1f 	brhi	800032ca <free+0x3fa>
80003290:	4d 1a       	lddpc	r10,800033d4 <free+0x504>
80003292:	f4 c9 ff dc 	sub	r9,r10,-36
80003296:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000329a:	74 0a       	ld.w	r10,r10[0x0]
8000329c:	30 1b       	mov	r11,1
8000329e:	f6 08 09 48 	lsl	r8,r11,r8
800032a2:	f1 ea 00 0b 	and	r11,r8,r10
800032a6:	c0 61       	brne	800032b2 <free+0x3e2>
800032a8:	14 48       	or	r8,r10
800032aa:	4c bb       	lddpc	r11,800033d4 <free+0x504>
800032ac:	97 08       	st.w	r11[0x0],r8
800032ae:	12 98       	mov	r8,r9
800032b0:	c0 78       	rjmp	800032be <free+0x3ee>
800032b2:	72 28       	ld.w	r8,r9[0x8]
800032b4:	4c 8a       	lddpc	r10,800033d4 <free+0x504>
800032b6:	74 4a       	ld.w	r10,r10[0x10]
800032b8:	14 38       	cp.w	r8,r10
800032ba:	f2 08 17 30 	movlo	r8,r9
800032be:	93 2c       	st.w	r9[0x8],r12
800032c0:	91 3c       	st.w	r8[0xc],r12
800032c2:	99 28       	st.w	r12[0x8],r8
800032c4:	99 39       	st.w	r12[0xc],r9
800032c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032ca:	ee 08 16 08 	lsr	r8,r7,0x8
800032ce:	c0 31       	brne	800032d4 <free+0x404>
800032d0:	30 09       	mov	r9,0
800032d2:	c2 d8       	rjmp	8000332c <free+0x45c>
800032d4:	e0 48 ff ff 	cp.w	r8,65535
800032d8:	e0 88 00 04 	brls	800032e0 <free+0x410>
800032dc:	31 f9       	mov	r9,31
800032de:	c2 78       	rjmp	8000332c <free+0x45c>
800032e0:	f0 ce 01 00 	sub	lr,r8,256
800032e4:	b1 8e       	lsr	lr,0x10
800032e6:	e2 1e 00 08 	andl	lr,0x8,COH
800032ea:	f0 0e 09 48 	lsl	r8,r8,lr
800032ee:	f0 cb 10 00 	sub	r11,r8,4096
800032f2:	b1 8b       	lsr	r11,0x10
800032f4:	e2 1b 00 04 	andl	r11,0x4,COH
800032f8:	f0 0b 09 48 	lsl	r8,r8,r11
800032fc:	f0 ca 40 00 	sub	r10,r8,16384
80003300:	b1 8a       	lsr	r10,0x10
80003302:	e2 1a 00 02 	andl	r10,0x2,COH
80003306:	f0 0a 09 48 	lsl	r8,r8,r10
8000330a:	af 98       	lsr	r8,0xf
8000330c:	fc 0e 11 0e 	rsub	lr,lr,14
80003310:	fc 0b 01 0b 	sub	r11,lr,r11
80003314:	f6 0a 01 0a 	sub	r10,r11,r10
80003318:	f4 08 00 08 	add	r8,r10,r8
8000331c:	f0 c9 ff f9 	sub	r9,r8,-7
80003320:	ee 09 0a 49 	lsr	r9,r7,r9
80003324:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003328:	f2 08 00 19 	add	r9,r9,r8<<0x1
8000332c:	4a a8       	lddpc	r8,800033d4 <free+0x504>
8000332e:	f0 cb fe d4 	sub	r11,r8,-300
80003332:	f6 09 00 2b 	add	r11,r11,r9<<0x2
80003336:	99 79       	st.w	r12[0x1c],r9
80003338:	30 0a       	mov	r10,0
8000333a:	99 5a       	st.w	r12[0x14],r10
8000333c:	99 4a       	st.w	r12[0x10],r10
8000333e:	70 18       	ld.w	r8,r8[0x4]
80003340:	30 1a       	mov	r10,1
80003342:	f4 09 09 4a 	lsl	r10,r10,r9
80003346:	f5 e8 00 0e 	and	lr,r10,r8
8000334a:	c0 b1       	brne	80003360 <free+0x490>
8000334c:	f5 e8 10 08 	or	r8,r10,r8
80003350:	4a 19       	lddpc	r9,800033d4 <free+0x504>
80003352:	93 18       	st.w	r9[0x4],r8
80003354:	97 0c       	st.w	r11[0x0],r12
80003356:	99 6b       	st.w	r12[0x18],r11
80003358:	99 3c       	st.w	r12[0xc],r12
8000335a:	99 2c       	st.w	r12[0x8],r12
8000335c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003360:	76 08       	ld.w	r8,r11[0x0]
80003362:	59 f9       	cp.w	r9,31
80003364:	c0 31       	brne	8000336a <free+0x49a>
80003366:	30 09       	mov	r9,0
80003368:	c0 48       	rjmp	80003370 <free+0x4a0>
8000336a:	a1 99       	lsr	r9,0x1
8000336c:	f2 09 11 19 	rsub	r9,r9,25
80003370:	ee 09 09 49 	lsl	r9,r7,r9
80003374:	70 1a       	ld.w	r10,r8[0x4]
80003376:	e0 1a ff fc 	andl	r10,0xfffc
8000337a:	0e 3a       	cp.w	r10,r7
8000337c:	c1 b0       	breq	800033b2 <free+0x4e2>
8000337e:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80003382:	f6 ca ff fc 	sub	r10,r11,-4
80003386:	f0 0a 00 2e 	add	lr,r8,r10<<0x2
8000338a:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000338e:	58 0a       	cp.w	r10,0
80003390:	c0 40       	breq	80003398 <free+0x4c8>
80003392:	a1 79       	lsl	r9,0x1
80003394:	14 98       	mov	r8,r10
80003396:	ce fb       	rjmp	80003374 <free+0x4a4>
80003398:	48 f9       	lddpc	r9,800033d4 <free+0x504>
8000339a:	72 49       	ld.w	r9,r9[0x10]
8000339c:	1c 39       	cp.w	r9,lr
8000339e:	e0 8b 00 19 	brhi	800033d0 <free+0x500>
800033a2:	2f cb       	sub	r11,-4
800033a4:	f0 0b 09 2c 	st.w	r8[r11<<0x2],r12
800033a8:	99 68       	st.w	r12[0x18],r8
800033aa:	99 3c       	st.w	r12[0xc],r12
800033ac:	99 2c       	st.w	r12[0x8],r12
800033ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800033b2:	70 29       	ld.w	r9,r8[0x8]
800033b4:	48 8a       	lddpc	r10,800033d4 <free+0x504>
800033b6:	74 4a       	ld.w	r10,r10[0x10]
800033b8:	10 3a       	cp.w	r10,r8
800033ba:	e0 8b 00 0b 	brhi	800033d0 <free+0x500>
800033be:	12 3a       	cp.w	r10,r9
800033c0:	e0 8b 00 08 	brhi	800033d0 <free+0x500>
800033c4:	93 3c       	st.w	r9[0xc],r12
800033c6:	91 2c       	st.w	r8[0x8],r12
800033c8:	99 29       	st.w	r12[0x8],r9
800033ca:	99 38       	st.w	r12[0xc],r8
800033cc:	30 08       	mov	r8,0
800033ce:	99 68       	st.w	r12[0x18],r8
800033d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800033d4:	00 00       	add	r0,r0
800033d6:	05 44       	ld.w	r4,--r2
800033d8:	80 00       	ld.sh	r0,r0[0x0]
800033da:	3f 60       	mov	r0,-10
800033dc:	80 00       	ld.sh	r0,r0[0x0]
800033de:	25 88       	sub	r8,88

800033e0 <sys_alloc>:
}

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
800033e0:	d4 31       	pushm	r0-r7,lr
800033e2:	20 3d       	sub	sp,12
800033e4:	18 97       	mov	r7,r12
800033e6:	16 95       	mov	r5,r11
  char* tbase = CMFAIL;
  size_t tsize = 0;
  flag_t mmap_flag = 0;

  init_mparams();
800033e8:	f0 1f 02 21 	mcall	80003c6c <sys_alloc+0x88c>

  /* Directly map large chunks */
  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
800033ec:	ee f8 01 b4 	ld.w	r8,r7[436]
800033f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033f4:	c4 70       	breq	80003482 <sys_alloc+0xa2>
800033f6:	fe f8 08 7a 	ld.w	r8,pc[2170]
800033fa:	70 38       	ld.w	r8,r8[0xc]
800033fc:	0a 38       	cp.w	r8,r5
800033fe:	e0 8b 00 42 	brhi	80003482 <sys_alloc+0xa2>
  the PINUSE bit so frees can be checked.
*/

/* Malloc using mmap */
static void* mmap_alloc(mstate m, size_t nb) {
  size_t mmsize = granularity_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
80003402:	fe f8 08 6e 	ld.w	r8,pc[2158]
80003406:	70 28       	ld.w	r8,r8[0x8]
80003408:	f0 c6 ff e1 	sub	r6,r8,-31
8000340c:	0a 06       	add	r6,r5
8000340e:	5c 38       	neg	r8
80003410:	10 66       	and	r6,r8
  if (mmsize > nb) {     /* Check for wrap around 0 */
80003412:	0c 35       	cp.w	r5,r6
80003414:	c3 72       	brcc	80003482 <sys_alloc+0xa2>
    char* mm = (char*)(DIRECT_MMAP(mmsize));
80003416:	30 0c       	mov	r12,0
80003418:	1a dc       	st.w	--sp,r12
8000341a:	3f f8       	mov	r8,-1
8000341c:	30 39       	mov	r9,3
8000341e:	12 9a       	mov	r10,r9
80003420:	0c 9b       	mov	r11,r6
80003422:	f0 1f 02 15 	mcall	80003c74 <sys_alloc+0x894>
    if (mm != CMFAIL) {
80003426:	2f fd       	sub	sp,-4
80003428:	5b fc       	cp.w	r12,-1
8000342a:	c2 c0       	breq	80003482 <sys_alloc+0xa2>
      size_t offset = align_offset(chunk2mem(mm));
8000342c:	f1 dc c0 03 	bfextu	r8,r12,0x0,0x3
80003430:	c0 31       	brne	80003436 <sys_alloc+0x56>
80003432:	30 09       	mov	r9,0
80003434:	c0 58       	rjmp	8000343e <sys_alloc+0x5e>
80003436:	f0 08 11 08 	rsub	r8,r8,8
8000343a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
      size_t psize = mmsize - offset - MMAP_FOOT_PAD;
8000343e:	ec ca 00 10 	sub	r10,r6,16
80003442:	12 1a       	sub	r10,r9
      mchunkptr p = (mchunkptr)(mm + offset);
80003444:	f8 09 00 08 	add	r8,r12,r9
      p->prev_foot = offset | IS_MMAPPED_BIT;
80003448:	a1 a9       	sbr	r9,0x0
8000344a:	91 09       	st.w	r8[0x0],r9
      (p)->head = (psize|CINUSE_BIT);
8000344c:	14 99       	mov	r9,r10
8000344e:	a1 b9       	sbr	r9,0x1
80003450:	91 19       	st.w	r8[0x4],r9
      mark_inuse_foot(m, p, psize);
      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
80003452:	f0 0a 00 09 	add	r9,r8,r10
80003456:	30 7a       	mov	r10,7
80003458:	93 1a       	st.w	r9[0x4],r10
      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
8000345a:	30 0a       	mov	r10,0
8000345c:	93 2a       	st.w	r9[0x8],r10

      if (mm < m->least_addr)
8000345e:	6e 49       	ld.w	r9,r7[0x10]
        m->least_addr = mm;
80003460:	12 3c       	cp.w	r12,r9
80003462:	ef fc 3a 04 	st.wcs	r7[0x10],r12
      if ((m->footprint += mmsize) > m->max_footprint)
80003466:	ee f9 01 ac 	ld.w	r9,r7[428]
8000346a:	12 06       	add	r6,r9
8000346c:	ef 46 01 ac 	st.w	r7[428],r6
80003470:	ee f9 01 b0 	ld.w	r9,r7[432]
        m->max_footprint = m->footprint;
80003474:	12 36       	cp.w	r6,r9
80003476:	ef f6 ba 6c 	st.whi	r7[0x1b0],r6
      assert(is_aligned(chunk2mem(p)));
      check_mmapped_chunk(m, p);
      return chunk2mem(p);
8000347a:	f0 cc ff f8 	sub	r12,r8,-8
  init_mparams();

  /* Directly map large chunks */
  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
    void* mem = mmap_alloc(m, nb);
    if (mem != 0)
8000347e:	e0 81 03 c9 	brne	80003c10 <sys_alloc+0x830>
       find space.
    3. A call to MORECORE that cannot usually contiguously extend memory.
       (disabled if not HAVE_MORECORE)
  */

  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
80003482:	ee f8 01 b4 	ld.w	r8,r7[436]
80003486:	e2 18 00 04 	andl	r8,0x4,COH
8000348a:	c7 e1       	brne	80003586 <sys_alloc+0x1a6>
    char* br = CMFAIL;
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
8000348c:	6e 6b       	ld.w	r11,r7[0x18]
8000348e:	58 0b       	cp.w	r11,0
80003490:	c0 60       	breq	8000349c <sys_alloc+0xbc>
80003492:	0e 9c       	mov	r12,r7
80003494:	f0 1f 01 f9 	mcall	80003c78 <sys_alloc+0x898>
80003498:	18 96       	mov	r6,r12
    size_t asize = 0;
    ACQUIRE_MORECORE_LOCK();

    if (ss == 0) {  /* First time through or recovery */
8000349a:	c2 c1       	brne	800034f2 <sys_alloc+0x112>
      char* base = (char*)CALL_MORECORE(0);
8000349c:	30 0c       	mov	r12,0
8000349e:	f0 1f 01 f8 	mcall	80003c7c <sys_alloc+0x89c>
800034a2:	18 96       	mov	r6,r12
      if (base != CMFAIL) {
800034a4:	5b fc       	cp.w	r12,-1
800034a6:	e0 80 03 b7 	breq	80003c14 <sys_alloc+0x834>
        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
800034aa:	fe f8 07 c6 	ld.w	r8,pc[1990]
800034ae:	70 29       	ld.w	r9,r8[0x8]
800034b0:	f2 c1 ff d7 	sub	r1,r9,-41
800034b4:	0a 01       	add	r1,r5
800034b6:	5c 39       	neg	r9
800034b8:	12 61       	and	r1,r9
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
800034ba:	70 18       	ld.w	r8,r8[0x4]
800034bc:	18 99       	mov	r9,r12
800034be:	f0 ca 00 01 	sub	r10,r8,1
800034c2:	f9 ea 00 0a 	and	r10,r12,r10
800034c6:	c0 70       	breq	800034d4 <sys_alloc+0xf4>
          asize += (page_align((size_t)base) - (size_t)base);
800034c8:	18 11       	sub	r1,r12
800034ca:	10 09       	add	r9,r8
800034cc:	5c 38       	neg	r8
800034ce:	f3 e8 00 08 	and	r8,r9,r8
800034d2:	10 01       	add	r1,r8
        /* Can't call MORECORE if size is negative when treated as signed */
        if (asize < HALF_MAX_SIZE_T &&
800034d4:	e0 6b ff fe 	mov	r11,65534
800034d8:	ea 1b 7f ff 	orh	r11,0x7fff
800034dc:	16 31       	cp.w	r1,r11
800034de:	e0 8b 03 9f 	brhi	80003c1c <sys_alloc+0x83c>
            (br = (char*)(CALL_MORECORE(asize))) == base) {
800034e2:	02 9c       	mov	r12,r1
800034e4:	f0 1f 01 e6 	mcall	80003c7c <sys_alloc+0x89c>
800034e8:	18 94       	mov	r4,r12
        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
        /* Adjust to end on a page boundary */
        if (!is_page_aligned(base))
          asize += (page_align((size_t)base) - (size_t)base);
        /* Can't call MORECORE if size is negative when treated as signed */
        if (asize < HALF_MAX_SIZE_T &&
800034ea:	0c 3c       	cp.w	r12,r6
800034ec:	c2 11       	brne	8000352e <sys_alloc+0x14e>
800034ee:	e0 8f 03 9a 	bral	80003c22 <sys_alloc+0x842>
        }
      }
    }
    else {
      /* Subtract out existing available top space from MORECORE request. */
      asize = granularity_align(nb - m->topsize + TOP_FOOT_SIZE + SIZE_T_ONE);
800034f2:	fe f8 07 7e 	ld.w	r8,pc[1918]
800034f6:	70 28       	ld.w	r8,r8[0x8]
800034f8:	f0 c1 ff d7 	sub	r1,r8,-41
800034fc:	6e 39       	ld.w	r9,r7[0xc]
800034fe:	12 11       	sub	r1,r9
80003500:	0a 01       	add	r1,r5
80003502:	5c 38       	neg	r8
80003504:	10 61       	and	r1,r8
      /* Use mem here only if it did continuously extend old space */
      if (asize < HALF_MAX_SIZE_T &&
80003506:	e0 6a ff fe 	mov	r10,65534
8000350a:	ea 1a 7f ff 	orh	r10,0x7fff
8000350e:	14 31       	cp.w	r1,r10
80003510:	e0 8b 03 86 	brhi	80003c1c <sys_alloc+0x83c>
          (br = (char*)(CALL_MORECORE(asize))) == ss->base+ss->size) {
80003514:	02 9c       	mov	r12,r1
80003516:	f0 1f 01 da 	mcall	80003c7c <sys_alloc+0x89c>
8000351a:	18 94       	mov	r4,r12
8000351c:	6c 09       	ld.w	r9,r6[0x0]
8000351e:	6c 18       	ld.w	r8,r6[0x4]
80003520:	f2 08 00 08 	add	r8,r9,r8
80003524:	10 3c       	cp.w	r12,r8
80003526:	c0 41       	brne	8000352e <sys_alloc+0x14e>
        tbase = br;
        tsize = asize;
      }
    }

    if (tbase == CMFAIL) {    /* Cope with partial failure */
80003528:	5b fc       	cp.w	r12,-1
8000352a:	e0 81 03 7c 	brne	80003c22 <sys_alloc+0x842>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
8000352e:	5b f4       	cp.w	r4,-1
80003530:	c2 60       	breq	8000357c <sys_alloc+0x19c>
        if (asize < HALF_MAX_SIZE_T &&
80003532:	e0 69 ff fe 	mov	r9,65534
80003536:	ea 19 7f ff 	orh	r9,0x7fff
8000353a:	12 31       	cp.w	r1,r9
8000353c:	e0 8b 03 73 	brhi	80003c22 <sys_alloc+0x842>
80003540:	ea c8 ff d7 	sub	r8,r5,-41
80003544:	02 38       	cp.w	r8,r1
80003546:	e0 88 03 6e 	brls	80003c22 <sys_alloc+0x842>
            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
8000354a:	fe f8 07 26 	ld.w	r8,pc[1830]
8000354e:	70 28       	ld.w	r8,r8[0x8]
}

/* -------------------------- System allocation -------------------------- */

/* Get memory from system using MORECORE or MMAP */
static void* sys_alloc(mstate m, size_t nb) {
80003550:	e2 03 11 00 	rsub	r3,r1,0

    if (tbase == CMFAIL) {    /* Cope with partial failure */
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
        if (asize < HALF_MAX_SIZE_T &&
            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
80003554:	f0 c6 ff d7 	sub	r6,r8,-41
80003558:	0a 06       	add	r6,r5
8000355a:	02 16       	sub	r6,r1
8000355c:	5c 38       	neg	r8
8000355e:	10 66       	and	r6,r8
          if (esize < HALF_MAX_SIZE_T) {
80003560:	12 36       	cp.w	r6,r9
80003562:	e0 8b 03 60 	brhi	80003c22 <sys_alloc+0x842>
            char* end = (char*)CALL_MORECORE(esize);
80003566:	0c 9c       	mov	r12,r6
80003568:	f0 1f 01 c5 	mcall	80003c7c <sys_alloc+0x89c>
            if (end != CMFAIL)
8000356c:	5b fc       	cp.w	r12,-1
8000356e:	c0 40       	breq	80003576 <sys_alloc+0x196>
              asize += esize;
80003570:	0c 01       	add	r1,r6
80003572:	e0 8f 03 58 	bral	80003c22 <sys_alloc+0x842>
            else {            /* Can't use; try to release */
            #if HAVE_MORECORE
              CALL_MORECORE(-asize);
80003576:	06 9c       	mov	r12,r3
80003578:	f0 1f 01 c1 	mcall	80003c7c <sys_alloc+0x89c>
      if (br != CMFAIL) {    /* Use the space we did get */
        tbase = br;
        tsize = asize;
      }
      else
        disable_contiguous(m); /* Don't try contiguous path in the future */
8000357c:	ee f8 01 b4 	ld.w	r8,r7[436]
80003580:	a3 a8       	sbr	r8,0x2
80003582:	ef 48 01 b4 	st.w	r7[436],r8
    RELEASE_MORECORE_LOCK();
  }

  if (HAVE_MMAP && tbase == CMFAIL) {  /* Try MMAP */
    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
    size_t rsize = granularity_align(req);
80003586:	fe f8 06 ea 	ld.w	r8,pc[1770]
8000358a:	70 28       	ld.w	r8,r8[0x8]
8000358c:	f0 c1 ff d7 	sub	r1,r8,-41
80003590:	0a 01       	add	r1,r5
80003592:	5c 38       	neg	r8
80003594:	10 61       	and	r1,r8
    if (rsize > nb) { /* Fail if wraps around zero */
80003596:	02 35       	cp.w	r5,r1
80003598:	e0 82 03 4a 	brhs	80003c2c <sys_alloc+0x84c>
      char* mp = (char*)(CALL_MMAP(rsize));
8000359c:	30 0c       	mov	r12,0
8000359e:	1a dc       	st.w	--sp,r12
800035a0:	3f f8       	mov	r8,-1
800035a2:	30 39       	mov	r9,3
800035a4:	12 9a       	mov	r10,r9
800035a6:	02 9b       	mov	r11,r1
800035a8:	f0 1f 01 b3 	mcall	80003c74 <sys_alloc+0x894>
      if (mp != CMFAIL) {
800035ac:	2f fd       	sub	sp,-4
800035ae:	5b fc       	cp.w	r12,-1
800035b0:	e0 80 03 3e 	breq	80003c2c <sys_alloc+0x84c>
800035b4:	18 96       	mov	r6,r12
800035b6:	30 18       	mov	r8,1
800035b8:	50 18       	stdsp	sp[0x4],r8
800035ba:	c1 e8       	rjmp	800035f6 <sys_alloc+0x216>
    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
    if (asize < HALF_MAX_SIZE_T) {
      char* br = CMFAIL;
      char* end = CMFAIL;
      ACQUIRE_MORECORE_LOCK();
      br = (char*)(CALL_MORECORE(asize));
800035bc:	f0 1f 01 b0 	mcall	80003c7c <sys_alloc+0x89c>
800035c0:	18 96       	mov	r6,r12
      end = (char*)(CALL_MORECORE(0));
800035c2:	30 0c       	mov	r12,0
800035c4:	f0 1f 01 ae 	mcall	80003c7c <sys_alloc+0x89c>
      RELEASE_MORECORE_LOCK();
      if (br != CMFAIL && end != CMFAIL && br < end) {
800035c8:	5b f6       	cp.w	r6,-1
800035ca:	5f 18       	srne	r8
800035cc:	5b fc       	cp.w	r12,-1
800035ce:	5f 19       	srne	r9
800035d0:	f1 e9 00 09 	and	r9,r8,r9
800035d4:	e0 80 03 1d 	breq	80003c0e <sys_alloc+0x82e>
800035d8:	18 36       	cp.w	r6,r12
800035da:	e0 82 03 1a 	brhs	80003c0e <sys_alloc+0x82e>
        size_t ssize = end - br;
800035de:	f8 06 01 01 	sub	r1,r12,r6
        if (ssize > nb + TOP_FOOT_SIZE) {
800035e2:	ea c9 ff d8 	sub	r9,r5,-40
800035e6:	12 31       	cp.w	r1,r9
800035e8:	e0 88 03 13 	brls	80003c0e <sys_alloc+0x82e>
        }
      }
    }
  }

  if (tbase != CMFAIL) {
800035ec:	58 08       	cp.w	r8,0
800035ee:	e0 80 03 10 	breq	80003c0e <sys_alloc+0x82e>
800035f2:	30 0b       	mov	r11,0
800035f4:	50 1b       	stdsp	sp[0x4],r11

    if ((m->footprint += tsize) > m->max_footprint)
800035f6:	ee f8 01 ac 	ld.w	r8,r7[428]
800035fa:	e2 08 00 08 	add	r8,r1,r8
800035fe:	ef 48 01 ac 	st.w	r7[428],r8
80003602:	ee f9 01 b0 	ld.w	r9,r7[432]
      m->max_footprint = m->footprint;
80003606:	12 38       	cp.w	r8,r9
80003608:	ef f8 ba 6c 	st.whi	r7[0x1b0],r8

    if (!is_initialized(m)) { /* first-time initialization */
8000360c:	6e 6c       	ld.w	r12,r7[0x18]
8000360e:	58 0c       	cp.w	r12,0
80003610:	c2 c1       	brne	80003668 <sys_alloc+0x288>
      m->seg.base = m->least_addr = tbase;
80003612:	8f 46       	st.w	r7[0x10],r6
80003614:	ef 46 01 b8 	st.w	r7[440],r6
      m->seg.size = tsize;
80003618:	ef 41 01 bc 	st.w	r7[444],r1
      m->seg.sflags = mmap_flag;
8000361c:	40 1a       	lddsp	r10,sp[0x4]
8000361e:	ef 4a 01 c4 	st.w	r7[452],r10
      m->magic = mparams.magic;
80003622:	fe f8 06 4e 	ld.w	r8,pc[1614]
80003626:	70 08       	ld.w	r8,r8[0x0]
80003628:	8f 88       	st.w	r7[0x20],r8
      init_bins(m);
8000362a:	0e 9c       	mov	r12,r7
8000362c:	f0 1f 01 95 	mcall	80003c80 <sys_alloc+0x8a0>
      if (is_global(m))
80003630:	fe f8 06 54 	ld.w	r8,pc[1620]
80003634:	10 37       	cp.w	r7,r8
80003636:	c0 91       	brne	80003648 <sys_alloc+0x268>
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
80003638:	e2 ca 00 28 	sub	r10,r1,40
8000363c:	0c 9b       	mov	r11,r6
8000363e:	10 9c       	mov	r12,r8
80003640:	f0 1f 01 92 	mcall	80003c88 <sys_alloc+0x8a8>
80003644:	e0 8f 02 d0 	bral	80003be4 <sys_alloc+0x804>
      else {
        /* Offset top by embedded malloc_state */
        mchunkptr mn = next_chunk(mem2chunk(m));
80003648:	ee fb ff fc 	ld.w	r11,r7[-4]
8000364c:	e0 1b ff fc 	andl	r11,0xfffc
80003650:	20 8b       	sub	r11,8
80003652:	ee 0b 00 0b 	add	r11,r7,r11
        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
80003656:	ec 01 00 0a 	add	r10,r6,r1
8000365a:	16 1a       	sub	r10,r11
8000365c:	22 8a       	sub	r10,40
8000365e:	0e 9c       	mov	r12,r7
80003660:	f0 1f 01 8a 	mcall	80003c88 <sys_alloc+0x8a8>
80003664:	e0 8f 02 c0 	bral	80003be4 <sys_alloc+0x804>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
80003668:	ee c9 fe 48 	sub	r9,r7,-440
      while (sp != 0 && tbase != sp->base + sp->size)
8000366c:	c2 e0       	breq	800036c8 <sys_alloc+0x2e8>
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
8000366e:	ee fa 01 b8 	ld.w	r10,r7[440]
80003672:	ee f8 01 bc 	ld.w	r8,r7[444]
80003676:	f4 08 00 08 	add	r8,r10,r8
8000367a:	10 36       	cp.w	r6,r8
8000367c:	e0 80 02 e8 	breq	80003c4c <sys_alloc+0x86c>
80003680:	12 98       	mov	r8,r9
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
80003682:	70 28       	ld.w	r8,r8[0x8]
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
80003684:	58 08       	cp.w	r8,0
80003686:	c2 10       	breq	800036c8 <sys_alloc+0x2e8>
80003688:	70 0b       	ld.w	r11,r8[0x0]
8000368a:	70 1a       	ld.w	r10,r8[0x4]
8000368c:	f6 0a 00 0a 	add	r10,r11,r10
80003690:	14 36       	cp.w	r6,r10
80003692:	cf 81       	brne	80003682 <sys_alloc+0x2a2>
80003694:	e0 8f 02 dd 	bral	80003c4e <sys_alloc+0x86e>
        sp = sp->next;
      if (sp != 0 &&
80003698:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000369c:	40 1b       	lddsp	r11,sp[0x4]
8000369e:	16 3a       	cp.w	r10,r11
800036a0:	c1 41       	brne	800036c8 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
800036a2:	70 0a       	ld.w	r10,r8[0x0]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
800036a4:	14 3c       	cp.w	r12,r10
800036a6:	c1 13       	brcs	800036c8 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
800036a8:	70 1b       	ld.w	r11,r8[0x4]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
800036aa:	16 0a       	add	r10,r11
800036ac:	14 3c       	cp.w	r12,r10
800036ae:	c0 d2       	brcc	800036c8 <sys_alloc+0x2e8>
          !is_extern_segment(sp) &&
          (sp->sflags & IS_MMAPPED_BIT) == mmap_flag &&
          segment_holds(sp, m->top)) { /* append */
        sp->size += tsize;
800036b0:	e2 0b 00 0b 	add	r11,r1,r11
800036b4:	91 1b       	st.w	r8[0x4],r11
        init_top(m, m->top, m->topsize + tsize);
800036b6:	6e 3a       	ld.w	r10,r7[0xc]
800036b8:	e2 0a 00 0a 	add	r10,r1,r10
800036bc:	6e 6b       	ld.w	r11,r7[0x18]
800036be:	0e 9c       	mov	r12,r7
800036c0:	f0 1f 01 72 	mcall	80003c88 <sys_alloc+0x8a8>
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
800036c4:	e0 8f 02 90 	bral	80003be4 <sys_alloc+0x804>
          segment_holds(sp, m->top)) { /* append */
        sp->size += tsize;
        init_top(m, m->top, m->topsize + tsize);
      }
      else {
        if (tbase < m->least_addr)
800036c8:	6e 48       	ld.w	r8,r7[0x10]
          m->least_addr = tbase;
800036ca:	0c 38       	cp.w	r8,r6
800036cc:	ef f6 ba 04 	st.whi	r7[0x10],r6
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
800036d0:	58 09       	cp.w	r9,0
800036d2:	e0 80 01 93 	breq	800039f8 <sys_alloc+0x618>
800036d6:	ec 01 00 0a 	add	r10,r6,r1
      }
    }

    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
800036da:	ee f8 01 b8 	ld.w	r8,r7[440]
800036de:	14 38       	cp.w	r8,r10
800036e0:	e0 80 02 bf 	breq	80003c5e <sys_alloc+0x87e>
      else {
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
800036e4:	72 29       	ld.w	r9,r9[0x8]
      }
      else {
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
800036e6:	58 09       	cp.w	r9,0
800036e8:	e0 80 01 88 	breq	800039f8 <sys_alloc+0x618>
800036ec:	72 08       	ld.w	r8,r9[0x0]
800036ee:	14 38       	cp.w	r8,r10
800036f0:	cf a1       	brne	800036e4 <sys_alloc+0x304>
800036f2:	e0 8f 02 b6 	bral	80003c5e <sys_alloc+0x87e>
          sp = sp->next;
        if (sp != 0 &&
800036f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036fa:	40 1a       	lddsp	r10,sp[0x4]
800036fc:	14 38       	cp.w	r8,r10
800036fe:	e0 81 01 7d 	brne	800039f8 <sys_alloc+0x618>
            !is_extern_segment(sp) &&
            (sp->sflags & IS_MMAPPED_BIT) == mmap_flag) {
          char* oldbase = sp->base;
80003702:	72 08       	ld.w	r8,r9[0x0]
          sp->base = tbase;
80003704:	93 06       	st.w	r9[0x0],r6
          sp->size += tsize;
80003706:	72 1a       	ld.w	r10,r9[0x4]
80003708:	f4 01 00 01 	add	r1,r10,r1
8000370c:	93 11       	st.w	r9[0x4],r1
#endif /* PROCEED_ON_ERROR */

/* Allocate chunk and prepend remainder with chunk in successor base. */
static void* prepend_alloc(mstate m, char* newbase, char* oldbase,
                           size_t nb) {
  mchunkptr p = align_as_chunk(newbase);
8000370e:	f3 d6 c0 03 	bfextu	r9,r6,0x0,0x3
80003712:	c0 50       	breq	8000371c <sys_alloc+0x33c>
80003714:	f2 09 11 08 	rsub	r9,r9,8
80003718:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
8000371c:	12 06       	add	r6,r9
  mchunkptr oldfirst = align_as_chunk(oldbase);
8000371e:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80003722:	c0 31       	brne	80003728 <sys_alloc+0x348>
80003724:	30 0a       	mov	r10,0
80003726:	c0 58       	rjmp	80003730 <sys_alloc+0x350>
80003728:	f2 0a 11 08 	rsub	r10,r9,8
8000372c:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003730:	f0 0a 00 0a 	add	r10,r8,r10
  size_t psize = (char*)oldfirst - (char*)p;
  mchunkptr q = chunk_plus_offset(p, nb);
80003734:	ec 05 00 0b 	add	r11,r6,r5
  size_t qsize = psize - nb;
80003738:	f4 06 01 09 	sub	r9,r10,r6
8000373c:	0a 19       	sub	r9,r5
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
8000373e:	e8 15 00 03 	orl	r5,0x3
80003742:	8d 15       	st.w	r6[0x4],r5
  assert((char*)oldfirst > (char*)q);
  assert(pinuse(oldfirst));
  assert(qsize >= MIN_CHUNK_SIZE);

  /* consolidate remainder with first chunk of old base */
  if (oldfirst == m->top) {
80003744:	6e 68       	ld.w	r8,r7[0x18]
80003746:	10 3a       	cp.w	r10,r8
80003748:	c0 b1       	brne	8000375e <sys_alloc+0x37e>
    size_t tsize = m->topsize += qsize;
8000374a:	6e 38       	ld.w	r8,r7[0xc]
8000374c:	10 09       	add	r9,r8
8000374e:	8f 39       	st.w	r7[0xc],r9
    m->top = q;
80003750:	8f 6b       	st.w	r7[0x18],r11
    q->head = tsize | PINUSE_BIT;
80003752:	a1 a9       	sbr	r9,0x0
80003754:	97 19       	st.w	r11[0x4],r9
    check_top_chunk(m, q);
80003756:	0e 9c       	mov	r12,r7
80003758:	f0 1f 01 4d 	mcall	80003c8c <sys_alloc+0x8ac>
8000375c:	c4 b9       	rjmp	800039f2 <sys_alloc+0x612>
  }
  else if (oldfirst == m->dv) {
8000375e:	6e 58       	ld.w	r8,r7[0x14]
80003760:	10 3a       	cp.w	r10,r8
80003762:	c0 b1       	brne	80003778 <sys_alloc+0x398>
    size_t dsize = m->dvsize += qsize;
80003764:	6e 28       	ld.w	r8,r7[0x8]
80003766:	10 09       	add	r9,r8
80003768:	8f 29       	st.w	r7[0x8],r9
    m->dv = q;
8000376a:	8f 5b       	st.w	r7[0x14],r11
    set_size_and_pinuse_of_free_chunk(q, dsize);
8000376c:	12 98       	mov	r8,r9
8000376e:	a1 a8       	sbr	r8,0x0
80003770:	97 18       	st.w	r11[0x4],r8
80003772:	f6 09 09 09 	st.w	r11[r9],r9
80003776:	c3 e9       	rjmp	800039f2 <sys_alloc+0x612>
  }
  else {
    if (!cinuse(oldfirst)) {
80003778:	74 18       	ld.w	r8,r10[0x4]
8000377a:	10 9c       	mov	r12,r8
8000377c:	e2 1c 00 02 	andl	r12,0x2,COH
80003780:	e0 81 00 92 	brne	800038a4 <sys_alloc+0x4c4>
      size_t nsize = chunksize(oldfirst);
80003784:	10 94       	mov	r4,r8
80003786:	e0 14 ff fc 	andl	r4,0xfffc
      unlink_chunk(m, oldfirst, nsize);
8000378a:	e8 08 16 03 	lsr	r8,r4,0x3
8000378e:	59 f8       	cp.w	r8,31
80003790:	e0 8b 00 22 	brhi	800037d4 <sys_alloc+0x3f4>
80003794:	74 2c       	ld.w	r12,r10[0x8]
80003796:	74 35       	ld.w	r5,r10[0xc]
80003798:	0a 3c       	cp.w	r12,r5
8000379a:	c0 a1       	brne	800037ae <sys_alloc+0x3ce>
8000379c:	30 1c       	mov	r12,1
8000379e:	f8 08 09 48 	lsl	r8,r12,r8
800037a2:	5c d8       	com	r8
800037a4:	6e 0c       	ld.w	r12,r7[0x0]
800037a6:	f9 e8 00 08 	and	r8,r12,r8
800037aa:	8f 08       	st.w	r7[0x0],r8
800037ac:	c7 a8       	rjmp	800038a0 <sys_alloc+0x4c0>
800037ae:	ee c3 ff dc 	sub	r3,r7,-36
800037b2:	e6 08 00 38 	add	r8,r3,r8<<0x3
800037b6:	10 3c       	cp.w	r12,r8
800037b8:	c0 50       	breq	800037c2 <sys_alloc+0x3e2>
800037ba:	6e 43       	ld.w	r3,r7[0x10]
800037bc:	18 33       	cp.w	r3,r12
800037be:	e0 8b 00 71 	brhi	800038a0 <sys_alloc+0x4c0>
800037c2:	10 35       	cp.w	r5,r8
800037c4:	c0 50       	breq	800037ce <sys_alloc+0x3ee>
800037c6:	6e 48       	ld.w	r8,r7[0x10]
800037c8:	0a 38       	cp.w	r8,r5
800037ca:	e0 8b 00 6b 	brhi	800038a0 <sys_alloc+0x4c0>
800037ce:	99 35       	st.w	r12[0xc],r5
800037d0:	8b 2c       	st.w	r5[0x8],r12
800037d2:	c6 78       	rjmp	800038a0 <sys_alloc+0x4c0>
800037d4:	14 93       	mov	r3,r10
800037d6:	74 62       	ld.w	r2,r10[0x18]
800037d8:	74 38       	ld.w	r8,r10[0xc]
800037da:	10 3a       	cp.w	r10,r8
800037dc:	c0 90       	breq	800037ee <sys_alloc+0x40e>
800037de:	74 2c       	ld.w	r12,r10[0x8]
800037e0:	6e 45       	ld.w	r5,r7[0x10]
800037e2:	18 35       	cp.w	r5,r12
800037e4:	e0 8b 00 23 	brhi	8000382a <sys_alloc+0x44a>
800037e8:	99 38       	st.w	r12[0xc],r8
800037ea:	91 2c       	st.w	r8[0x8],r12
800037ec:	c1 f8       	rjmp	8000382a <sys_alloc+0x44a>
800037ee:	74 58       	ld.w	r8,r10[0x14]
800037f0:	58 08       	cp.w	r8,0
800037f2:	c0 40       	breq	800037fa <sys_alloc+0x41a>
800037f4:	f4 c5 ff ec 	sub	r5,r10,-20
800037f8:	c0 a8       	rjmp	8000380c <sys_alloc+0x42c>
800037fa:	74 48       	ld.w	r8,r10[0x10]
800037fc:	58 08       	cp.w	r8,0
800037fe:	c1 60       	breq	8000382a <sys_alloc+0x44a>
80003800:	f4 c5 ff f0 	sub	r5,r10,-16
80003804:	c0 48       	rjmp	8000380c <sys_alloc+0x42c>
80003806:	f0 c5 ff ec 	sub	r5,r8,-20
8000380a:	18 98       	mov	r8,r12
8000380c:	70 5c       	ld.w	r12,r8[0x14]
8000380e:	58 0c       	cp.w	r12,0
80003810:	cf b1       	brne	80003806 <sys_alloc+0x426>
80003812:	70 4c       	ld.w	r12,r8[0x10]
80003814:	58 0c       	cp.w	r12,0
80003816:	c0 40       	breq	8000381e <sys_alloc+0x43e>
80003818:	f0 c5 ff f0 	sub	r5,r8,-16
8000381c:	cf 7b       	rjmp	8000380a <sys_alloc+0x42a>
8000381e:	6e 4c       	ld.w	r12,r7[0x10]
80003820:	0a 3c       	cp.w	r12,r5
80003822:	f9 bc 08 00 	movls	r12,0
80003826:	eb fc 8a 00 	st.wls	r5[0x0],r12
8000382a:	58 02       	cp.w	r2,0
8000382c:	c3 a0       	breq	800038a0 <sys_alloc+0x4c0>
8000382e:	66 7c       	ld.w	r12,r3[0x1c]
80003830:	f8 c5 ff b5 	sub	r5,r12,-75
80003834:	ee 05 03 25 	ld.w	r5,r7[r5<<0x2]
80003838:	0a 33       	cp.w	r3,r5
8000383a:	c1 01       	brne	8000385a <sys_alloc+0x47a>
8000383c:	2b 5c       	sub	r12,-75
8000383e:	ee 0c 09 28 	st.w	r7[r12<<0x2],r8
80003842:	58 08       	cp.w	r8,0
80003844:	c1 71       	brne	80003872 <sys_alloc+0x492>
80003846:	66 78       	ld.w	r8,r3[0x1c]
80003848:	30 1c       	mov	r12,1
8000384a:	f8 08 09 48 	lsl	r8,r12,r8
8000384e:	5c d8       	com	r8
80003850:	6e 1c       	ld.w	r12,r7[0x4]
80003852:	f9 e8 00 08 	and	r8,r12,r8
80003856:	8f 18       	st.w	r7[0x4],r8
80003858:	c2 48       	rjmp	800038a0 <sys_alloc+0x4c0>
8000385a:	6e 4c       	ld.w	r12,r7[0x10]
8000385c:	04 3c       	cp.w	r12,r2
8000385e:	e0 8b 00 08 	brhi	8000386e <sys_alloc+0x48e>
80003862:	64 4c       	ld.w	r12,r2[0x10]
80003864:	18 33       	cp.w	r3,r12
80003866:	e5 f8 0a 04 	st.weq	r2[0x10],r8
8000386a:	e5 f8 1a 05 	st.wne	r2[0x14],r8
8000386e:	58 08       	cp.w	r8,0
80003870:	c1 80       	breq	800038a0 <sys_alloc+0x4c0>
80003872:	6e 4c       	ld.w	r12,r7[0x10]
80003874:	10 3c       	cp.w	r12,r8
80003876:	e0 8b 00 15 	brhi	800038a0 <sys_alloc+0x4c0>
8000387a:	91 62       	st.w	r8[0x18],r2
8000387c:	66 4c       	ld.w	r12,r3[0x10]
8000387e:	58 0c       	cp.w	r12,0
80003880:	c0 70       	breq	8000388e <sys_alloc+0x4ae>
80003882:	6e 45       	ld.w	r5,r7[0x10]
80003884:	18 35       	cp.w	r5,r12
80003886:	f1 fc 8a 04 	st.wls	r8[0x10],r12
8000388a:	f9 f8 8a 06 	st.wls	r12[0x18],r8
8000388e:	66 5c       	ld.w	r12,r3[0x14]
80003890:	58 0c       	cp.w	r12,0
80003892:	c0 70       	breq	800038a0 <sys_alloc+0x4c0>
80003894:	6e 45       	ld.w	r5,r7[0x10]
80003896:	18 35       	cp.w	r5,r12
80003898:	f1 fc 8a 05 	st.wls	r8[0x14],r12
8000389c:	f9 f8 8a 06 	st.wls	r12[0x18],r8
      oldfirst = chunk_plus_offset(oldfirst, nsize);
800038a0:	08 0a       	add	r10,r4
      qsize += nsize;
800038a2:	08 09       	add	r9,r4
    }
    set_free_with_pinuse(q, qsize, oldfirst);
800038a4:	74 18       	ld.w	r8,r10[0x4]
800038a6:	a1 c8       	cbr	r8,0x0
800038a8:	95 18       	st.w	r10[0x4],r8
800038aa:	12 98       	mov	r8,r9
800038ac:	a1 a8       	sbr	r8,0x0
800038ae:	97 18       	st.w	r11[0x4],r8
800038b0:	f6 09 09 09 	st.w	r11[r9],r9
    insert_chunk(m, q, qsize);
800038b4:	f2 08 16 03 	lsr	r8,r9,0x3
800038b8:	59 f8       	cp.w	r8,31
800038ba:	e0 8b 00 1b 	brhi	800038f0 <sys_alloc+0x510>
800038be:	ee c9 ff dc 	sub	r9,r7,-36
800038c2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800038c6:	6e 0a       	ld.w	r10,r7[0x0]
800038c8:	30 1c       	mov	r12,1
800038ca:	f8 08 09 48 	lsl	r8,r12,r8
800038ce:	f1 ea 00 0c 	and	r12,r8,r10
800038d2:	c0 51       	brne	800038dc <sys_alloc+0x4fc>
800038d4:	14 48       	or	r8,r10
800038d6:	8f 08       	st.w	r7[0x0],r8
800038d8:	12 98       	mov	r8,r9
800038da:	c0 68       	rjmp	800038e6 <sys_alloc+0x506>
800038dc:	72 28       	ld.w	r8,r9[0x8]
800038de:	6e 4a       	ld.w	r10,r7[0x10]
800038e0:	14 38       	cp.w	r8,r10
800038e2:	f2 08 17 30 	movlo	r8,r9
800038e6:	93 2b       	st.w	r9[0x8],r11
800038e8:	91 3b       	st.w	r8[0xc],r11
800038ea:	97 28       	st.w	r11[0x8],r8
800038ec:	97 39       	st.w	r11[0xc],r9
800038ee:	c8 28       	rjmp	800039f2 <sys_alloc+0x612>
800038f0:	16 95       	mov	r5,r11
800038f2:	f2 08 16 08 	lsr	r8,r9,0x8
800038f6:	c0 31       	brne	800038fc <sys_alloc+0x51c>
800038f8:	30 0a       	mov	r10,0
800038fa:	c2 d8       	rjmp	80003954 <sys_alloc+0x574>
800038fc:	e0 48 ff ff 	cp.w	r8,65535
80003900:	e0 88 00 04 	brls	80003908 <sys_alloc+0x528>
80003904:	31 fa       	mov	r10,31
80003906:	c2 78       	rjmp	80003954 <sys_alloc+0x574>
80003908:	f0 cc 01 00 	sub	r12,r8,256
8000390c:	b1 8c       	lsr	r12,0x10
8000390e:	e2 1c 00 08 	andl	r12,0x8,COH
80003912:	f0 0c 09 48 	lsl	r8,r8,r12
80003916:	f0 cb 10 00 	sub	r11,r8,4096
8000391a:	b1 8b       	lsr	r11,0x10
8000391c:	e2 1b 00 04 	andl	r11,0x4,COH
80003920:	f0 0b 09 48 	lsl	r8,r8,r11
80003924:	f0 ca 40 00 	sub	r10,r8,16384
80003928:	b1 8a       	lsr	r10,0x10
8000392a:	e2 1a 00 02 	andl	r10,0x2,COH
8000392e:	f0 0a 09 48 	lsl	r8,r8,r10
80003932:	af 98       	lsr	r8,0xf
80003934:	f8 0c 11 0e 	rsub	r12,r12,14
80003938:	f8 0b 01 0b 	sub	r11,r12,r11
8000393c:	f6 0a 01 0a 	sub	r10,r11,r10
80003940:	f4 08 00 08 	add	r8,r10,r8
80003944:	f0 ca ff f9 	sub	r10,r8,-7
80003948:	f2 0a 0a 4a 	lsr	r10,r9,r10
8000394c:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80003950:	f4 08 00 1a 	add	r10,r10,r8<<0x1
80003954:	8b 7a       	st.w	r5[0x1c],r10
80003956:	30 08       	mov	r8,0
80003958:	8b 58       	st.w	r5[0x14],r8
8000395a:	8b 48       	st.w	r5[0x10],r8
8000395c:	6e 18       	ld.w	r8,r7[0x4]
8000395e:	30 1b       	mov	r11,1
80003960:	f6 0a 09 4b 	lsl	r11,r11,r10
80003964:	f7 e8 00 0c 	and	r12,r11,r8
80003968:	c0 d1       	brne	80003982 <sys_alloc+0x5a2>
8000396a:	f7 e8 10 08 	or	r8,r11,r8
8000396e:	8f 18       	st.w	r7[0x4],r8
80003970:	2b 5a       	sub	r10,-75
80003972:	ee 0a 09 25 	st.w	r7[r10<<0x2],r5
80003976:	ee 0a 00 2a 	add	r10,r7,r10<<0x2
8000397a:	8b 6a       	st.w	r5[0x18],r10
8000397c:	8b 35       	st.w	r5[0xc],r5
8000397e:	8b 25       	st.w	r5[0x8],r5
80003980:	c3 98       	rjmp	800039f2 <sys_alloc+0x612>
80003982:	f4 c8 ff b5 	sub	r8,r10,-75
80003986:	ee 08 03 28 	ld.w	r8,r7[r8<<0x2]
8000398a:	59 fa       	cp.w	r10,31
8000398c:	c0 31       	brne	80003992 <sys_alloc+0x5b2>
8000398e:	30 0b       	mov	r11,0
80003990:	c0 48       	rjmp	80003998 <sys_alloc+0x5b8>
80003992:	a1 9a       	lsr	r10,0x1
80003994:	f4 0b 11 19 	rsub	r11,r10,25
80003998:	f2 0b 09 4b 	lsl	r11,r9,r11
8000399c:	70 1a       	ld.w	r10,r8[0x4]
8000399e:	e0 1a ff fc 	andl	r10,0xfffc
800039a2:	14 39       	cp.w	r9,r10
800039a4:	c1 90       	breq	800039d6 <sys_alloc+0x5f6>
800039a6:	f6 0c 16 1f 	lsr	r12,r11,0x1f
800039aa:	f8 ca ff fc 	sub	r10,r12,-4
800039ae:	f0 0a 00 24 	add	r4,r8,r10<<0x2
800039b2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800039b6:	58 0a       	cp.w	r10,0
800039b8:	c0 40       	breq	800039c0 <sys_alloc+0x5e0>
800039ba:	a1 7b       	lsl	r11,0x1
800039bc:	14 98       	mov	r8,r10
800039be:	ce fb       	rjmp	8000399c <sys_alloc+0x5bc>
800039c0:	6e 49       	ld.w	r9,r7[0x10]
800039c2:	08 39       	cp.w	r9,r4
800039c4:	e0 8b 00 17 	brhi	800039f2 <sys_alloc+0x612>
800039c8:	2f cc       	sub	r12,-4
800039ca:	f0 0c 09 25 	st.w	r8[r12<<0x2],r5
800039ce:	8b 68       	st.w	r5[0x18],r8
800039d0:	8b 35       	st.w	r5[0xc],r5
800039d2:	8b 25       	st.w	r5[0x8],r5
800039d4:	c0 f8       	rjmp	800039f2 <sys_alloc+0x612>
800039d6:	70 29       	ld.w	r9,r8[0x8]
800039d8:	6e 4a       	ld.w	r10,r7[0x10]
800039da:	10 3a       	cp.w	r10,r8
800039dc:	e0 8b 00 0b 	brhi	800039f2 <sys_alloc+0x612>
800039e0:	12 3a       	cp.w	r10,r9
800039e2:	e0 8b 00 08 	brhi	800039f2 <sys_alloc+0x612>
800039e6:	93 35       	st.w	r9[0xc],r5
800039e8:	91 25       	st.w	r8[0x8],r5
800039ea:	8b 29       	st.w	r5[0x8],r9
800039ec:	8b 38       	st.w	r5[0xc],r8
800039ee:	30 08       	mov	r8,0
800039f0:	8b 68       	st.w	r5[0x18],r8
    check_free_chunk(m, q);
  }

  check_malloced_chunk(m, chunk2mem(p), nb);
800039f2:	ec cc ff f8 	sub	r12,r6,-8
            !is_extern_segment(sp) &&
            (sp->sflags & IS_MMAPPED_BIT) == mmap_flag) {
          char* oldbase = sp->base;
          sp->base = tbase;
          sp->size += tsize;
          return prepend_alloc(m, tbase, oldbase, nb);
800039f6:	c0 d9       	rjmp	80003c10 <sys_alloc+0x830>


/* Add a segment to hold a new noncontiguous region */
static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {
  /* Determine locations and sizes of segment, fenceposts, old top */
  char* old_top = (char*)m->top;
800039f8:	6e 60       	ld.w	r0,r7[0x18]
800039fa:	50 20       	stdsp	sp[0x8],r0
  msegmentptr oldsp = segment_holding(m, old_top);
800039fc:	00 9b       	mov	r11,r0
800039fe:	0e 9c       	mov	r12,r7
80003a00:	f0 1f 00 9e 	mcall	80003c78 <sys_alloc+0x898>
  char* old_end = oldsp->base + oldsp->size;
80003a04:	78 03       	ld.w	r3,r12[0x0]
80003a06:	78 18       	ld.w	r8,r12[0x4]
80003a08:	10 03       	add	r3,r8
  size_t ssize = pad_request(sizeof(struct malloc_segment));
  char* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
80003a0a:	e6 c9 00 2f 	sub	r9,r3,47
  size_t offset = align_offset(chunk2mem(rawsp));
80003a0e:	e6 c8 00 27 	sub	r8,r3,39
80003a12:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003a16:	c0 31       	brne	80003a1c <sys_alloc+0x63c>
80003a18:	30 02       	mov	r2,0
80003a1a:	c0 58       	rjmp	80003a24 <sys_alloc+0x644>
80003a1c:	f0 02 11 08 	rsub	r2,r8,8
80003a20:	e5 d2 c0 03 	bfextu	r2,r2,0x0,0x3
  char* asp = rawsp + offset;
80003a24:	f2 02 00 02 	add	r2,r9,r2
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
80003a28:	40 28       	lddsp	r8,sp[0x8]
80003a2a:	2f 08       	sub	r8,-16
80003a2c:	40 29       	lddsp	r9,sp[0x8]
80003a2e:	10 32       	cp.w	r2,r8
80003a30:	f2 02 17 30 	movlo	r2,r9
  mchunkptr sp = (mchunkptr)csp;
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
80003a34:	e4 c8 ff f8 	sub	r8,r2,-8
80003a38:	50 08       	stdsp	sp[0x0],r8
  mchunkptr tnext = chunk_plus_offset(sp, ssize);
80003a3a:	e4 c4 ff e8 	sub	r4,r2,-24
  mchunkptr p = tnext;
  int nfences = 0;

  /* reset top to new space */
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
80003a3e:	e2 ca 00 28 	sub	r10,r1,40
80003a42:	0c 9b       	mov	r11,r6
80003a44:	0e 9c       	mov	r12,r7
80003a46:	f0 1f 00 91 	mcall	80003c88 <sys_alloc+0x8a8>

  /* Set up segment record */
  assert(is_aligned(ss));
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
80003a4a:	31 b8       	mov	r8,27
80003a4c:	85 18       	st.w	r2[0x4],r8
  *ss = m->seg; /* Push current record */
80003a4e:	ee c8 fe 48 	sub	r8,r7,-440
80003a52:	70 09       	ld.w	r9,r8[0x0]
80003a54:	40 0b       	lddsp	r11,sp[0x0]
80003a56:	97 09       	st.w	r11[0x0],r9
80003a58:	70 19       	ld.w	r9,r8[0x4]
80003a5a:	97 19       	st.w	r11[0x4],r9
80003a5c:	70 29       	ld.w	r9,r8[0x8]
80003a5e:	97 29       	st.w	r11[0x8],r9
80003a60:	70 38       	ld.w	r8,r8[0xc]
80003a62:	97 38       	st.w	r11[0xc],r8
  m->seg.base = tbase;
80003a64:	ef 46 01 b8 	st.w	r7[440],r6
  m->seg.size = tsize;
80003a68:	ef 41 01 bc 	st.w	r7[444],r1
  m->seg.sflags = mmapped;
80003a6c:	40 1a       	lddsp	r10,sp[0x4]
80003a6e:	ef 4a 01 c4 	st.w	r7[452],r10
  m->seg.next = ss;
80003a72:	ef 4b 01 c0 	st.w	r7[448],r11

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
    p->head = FENCEPOST_HEAD;
80003a76:	30 79       	mov	r9,7
  m->seg.sflags = mmapped;
  m->seg.next = ss;

  /* Insert trailing fenceposts */
  for (;;) {
    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
80003a78:	2f c4       	sub	r4,-4
    p->head = FENCEPOST_HEAD;
80003a7a:	08 98       	mov	r8,r4
80003a7c:	10 a9       	st.w	r8++,r9
    ++nfences;
    if ((char*)(&(nextp->head)) < old_end)
80003a7e:	10 33       	cp.w	r3,r8
80003a80:	fe 9b ff fc 	brhi	80003a78 <sys_alloc+0x698>
      break;
  }
  assert(nfences >= 2);

  /* Insert the rest of old top into a bin as an ordinary free chunk */
  if (csp != old_top) {
80003a84:	40 29       	lddsp	r9,sp[0x8]
80003a86:	04 39       	cp.w	r9,r2
80003a88:	e0 80 00 aa 	breq	80003bdc <sys_alloc+0x7fc>
    mchunkptr q = (mchunkptr)old_top;
    size_t psize = csp - old_top;
80003a8c:	12 12       	sub	r2,r9
    mchunkptr tn = chunk_plus_offset(q, psize);
80003a8e:	e0 02 00 08 	add	r8,r0,r2
    set_free_with_pinuse(q, psize, tn);
80003a92:	70 19       	ld.w	r9,r8[0x4]
80003a94:	a1 c9       	cbr	r9,0x0
80003a96:	91 19       	st.w	r8[0x4],r9
80003a98:	04 99       	mov	r9,r2
80003a9a:	a1 a9       	sbr	r9,0x0
80003a9c:	81 19       	st.w	r0[0x4],r9
80003a9e:	91 02       	st.w	r8[0x0],r2
    insert_chunk(m, q, psize);
80003aa0:	e4 08 16 03 	lsr	r8,r2,0x3
80003aa4:	59 f8       	cp.w	r8,31
80003aa6:	e0 8b 00 1b 	brhi	80003adc <sys_alloc+0x6fc>
80003aaa:	ee c9 ff dc 	sub	r9,r7,-36
80003aae:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003ab2:	6e 0a       	ld.w	r10,r7[0x0]
80003ab4:	30 1b       	mov	r11,1
80003ab6:	f6 08 09 48 	lsl	r8,r11,r8
80003aba:	f1 ea 00 0b 	and	r11,r8,r10
80003abe:	c0 51       	brne	80003ac8 <sys_alloc+0x6e8>
80003ac0:	14 48       	or	r8,r10
80003ac2:	8f 08       	st.w	r7[0x0],r8
80003ac4:	12 98       	mov	r8,r9
80003ac6:	c0 68       	rjmp	80003ad2 <sys_alloc+0x6f2>
80003ac8:	72 28       	ld.w	r8,r9[0x8]
80003aca:	6e 4a       	ld.w	r10,r7[0x10]
80003acc:	14 38       	cp.w	r8,r10
80003ace:	f2 08 17 30 	movlo	r8,r9
80003ad2:	93 20       	st.w	r9[0x8],r0
80003ad4:	91 30       	st.w	r8[0xc],r0
80003ad6:	81 28       	st.w	r0[0x8],r8
80003ad8:	81 39       	st.w	r0[0xc],r9
80003ada:	c8 18       	rjmp	80003bdc <sys_alloc+0x7fc>
80003adc:	e4 08 16 08 	lsr	r8,r2,0x8
80003ae0:	c0 31       	brne	80003ae6 <sys_alloc+0x706>
80003ae2:	30 09       	mov	r9,0
80003ae4:	c2 d8       	rjmp	80003b3e <sys_alloc+0x75e>
80003ae6:	e0 48 ff ff 	cp.w	r8,65535
80003aea:	e0 88 00 04 	brls	80003af2 <sys_alloc+0x712>
80003aee:	31 f9       	mov	r9,31
80003af0:	c2 78       	rjmp	80003b3e <sys_alloc+0x75e>
80003af2:	f0 cb 01 00 	sub	r11,r8,256
80003af6:	b1 8b       	lsr	r11,0x10
80003af8:	e2 1b 00 08 	andl	r11,0x8,COH
80003afc:	f0 0b 09 48 	lsl	r8,r8,r11
80003b00:	f0 ca 10 00 	sub	r10,r8,4096
80003b04:	b1 8a       	lsr	r10,0x10
80003b06:	e2 1a 00 04 	andl	r10,0x4,COH
80003b0a:	f0 0a 09 48 	lsl	r8,r8,r10
80003b0e:	f0 c9 40 00 	sub	r9,r8,16384
80003b12:	b1 89       	lsr	r9,0x10
80003b14:	e2 19 00 02 	andl	r9,0x2,COH
80003b18:	f0 09 09 48 	lsl	r8,r8,r9
80003b1c:	af 98       	lsr	r8,0xf
80003b1e:	f6 0b 11 0e 	rsub	r11,r11,14
80003b22:	f6 0a 01 0a 	sub	r10,r11,r10
80003b26:	f4 09 01 09 	sub	r9,r10,r9
80003b2a:	f2 08 00 08 	add	r8,r9,r8
80003b2e:	f0 c9 ff f9 	sub	r9,r8,-7
80003b32:	e4 09 0a 49 	lsr	r9,r2,r9
80003b36:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003b3a:	f2 08 00 19 	add	r9,r9,r8<<0x1
80003b3e:	81 79       	st.w	r0[0x1c],r9
80003b40:	30 08       	mov	r8,0
80003b42:	81 58       	st.w	r0[0x14],r8
80003b44:	81 48       	st.w	r0[0x10],r8
80003b46:	6e 18       	ld.w	r8,r7[0x4]
80003b48:	30 1a       	mov	r10,1
80003b4a:	f4 09 09 4a 	lsl	r10,r10,r9
80003b4e:	f5 e8 00 0b 	and	r11,r10,r8
80003b52:	c0 d1       	brne	80003b6c <sys_alloc+0x78c>
80003b54:	f5 e8 10 08 	or	r8,r10,r8
80003b58:	8f 18       	st.w	r7[0x4],r8
80003b5a:	2b 59       	sub	r9,-75
80003b5c:	ee 09 09 20 	st.w	r7[r9<<0x2],r0
80003b60:	ee 09 00 29 	add	r9,r7,r9<<0x2
80003b64:	81 69       	st.w	r0[0x18],r9
80003b66:	81 30       	st.w	r0[0xc],r0
80003b68:	81 20       	st.w	r0[0x8],r0
80003b6a:	c3 98       	rjmp	80003bdc <sys_alloc+0x7fc>
80003b6c:	f2 c8 ff b5 	sub	r8,r9,-75
80003b70:	ee 08 03 28 	ld.w	r8,r7[r8<<0x2]
80003b74:	59 f9       	cp.w	r9,31
80003b76:	c0 31       	brne	80003b7c <sys_alloc+0x79c>
80003b78:	30 09       	mov	r9,0
80003b7a:	c0 48       	rjmp	80003b82 <sys_alloc+0x7a2>
80003b7c:	a1 99       	lsr	r9,0x1
80003b7e:	f2 09 11 19 	rsub	r9,r9,25
80003b82:	e4 09 09 49 	lsl	r9,r2,r9
80003b86:	70 1a       	ld.w	r10,r8[0x4]
80003b88:	e0 1a ff fc 	andl	r10,0xfffc
80003b8c:	14 32       	cp.w	r2,r10
80003b8e:	c1 90       	breq	80003bc0 <sys_alloc+0x7e0>
80003b90:	f2 0b 16 1f 	lsr	r11,r9,0x1f
80003b94:	f6 ca ff fc 	sub	r10,r11,-4
80003b98:	f0 0a 00 2c 	add	r12,r8,r10<<0x2
80003b9c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80003ba0:	58 0a       	cp.w	r10,0
80003ba2:	c0 40       	breq	80003baa <sys_alloc+0x7ca>
80003ba4:	a1 79       	lsl	r9,0x1
80003ba6:	14 98       	mov	r8,r10
80003ba8:	ce fb       	rjmp	80003b86 <sys_alloc+0x7a6>
80003baa:	6e 49       	ld.w	r9,r7[0x10]
80003bac:	18 39       	cp.w	r9,r12
80003bae:	e0 8b 00 17 	brhi	80003bdc <sys_alloc+0x7fc>
80003bb2:	2f cb       	sub	r11,-4
80003bb4:	f0 0b 09 20 	st.w	r8[r11<<0x2],r0
80003bb8:	81 68       	st.w	r0[0x18],r8
80003bba:	81 30       	st.w	r0[0xc],r0
80003bbc:	81 20       	st.w	r0[0x8],r0
80003bbe:	c0 f8       	rjmp	80003bdc <sys_alloc+0x7fc>
80003bc0:	70 29       	ld.w	r9,r8[0x8]
80003bc2:	6e 4a       	ld.w	r10,r7[0x10]
80003bc4:	10 3a       	cp.w	r10,r8
80003bc6:	e0 8b 00 0b 	brhi	80003bdc <sys_alloc+0x7fc>
80003bca:	12 3a       	cp.w	r10,r9
80003bcc:	e0 8b 00 08 	brhi	80003bdc <sys_alloc+0x7fc>
80003bd0:	93 30       	st.w	r9[0xc],r0
80003bd2:	91 20       	st.w	r8[0x8],r0
80003bd4:	81 29       	st.w	r0[0x8],r9
80003bd6:	81 38       	st.w	r0[0xc],r8
80003bd8:	30 08       	mov	r8,0
80003bda:	81 68       	st.w	r0[0x18],r8
  }

  check_top_chunk(m, m->top);
80003bdc:	6e 6b       	ld.w	r11,r7[0x18]
80003bde:	0e 9c       	mov	r12,r7
80003be0:	f0 1f 00 2b 	mcall	80003c8c <sys_alloc+0x8ac>
        else
          add_segment(m, tbase, tsize, mmap_flag);
      }
    }

    if (nb < m->topsize) { /* Allocate from new or extended top space */
80003be4:	6e 38       	ld.w	r8,r7[0xc]
80003be6:	10 35       	cp.w	r5,r8
80003be8:	c1 32       	brcc	80003c0e <sys_alloc+0x82e>
      size_t rsize = m->topsize -= nb;
80003bea:	0a 18       	sub	r8,r5
80003bec:	8f 38       	st.w	r7[0xc],r8
      mchunkptr p = m->top;
80003bee:	6e 66       	ld.w	r6,r7[0x18]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
80003bf0:	ec 05 00 09 	add	r9,r6,r5
80003bf4:	8f 69       	st.w	r7[0x18],r9
      r->head = rsize | PINUSE_BIT;
80003bf6:	a1 a8       	sbr	r8,0x0
80003bf8:	93 18       	st.w	r9[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
80003bfa:	e8 15 00 03 	orl	r5,0x3
80003bfe:	8d 15       	st.w	r6[0x4],r5
      check_top_chunk(m, m->top);
80003c00:	6e 6b       	ld.w	r11,r7[0x18]
80003c02:	0e 9c       	mov	r12,r7
80003c04:	f0 1f 00 22 	mcall	80003c8c <sys_alloc+0x8ac>
      check_malloced_chunk(m, chunk2mem(p), nb);
80003c08:	ec cc ff f8 	sub	r12,r6,-8
      return chunk2mem(p);
80003c0c:	c0 28       	rjmp	80003c10 <sys_alloc+0x830>
80003c0e:	30 0c       	mov	r12,0
    }
  }

  MALLOC_FAILURE_ACTION;
  return 0;
}
80003c10:	2f dd       	sub	sp,-12
80003c12:	d8 32       	popm	r0-r7,pc
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
      r->head = rsize | PINUSE_BIT;
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
      check_top_chunk(m, m->top);
      check_malloced_chunk(m, chunk2mem(p), nb);
      return chunk2mem(p);
80003c14:	30 01       	mov	r1,0
80003c16:	3f f4       	mov	r4,-1
80003c18:	fe 9f fc 8b 	bral	8000352e <sys_alloc+0x14e>
80003c1c:	3f f4       	mov	r4,-1
80003c1e:	fe 9f fc 88 	bral	8000352e <sys_alloc+0x14e>
80003c22:	08 96       	mov	r6,r4
80003c24:	30 08       	mov	r8,0
80003c26:	50 18       	stdsp	sp[0x4],r8
80003c28:	fe 9f fc e7 	bral	800035f6 <sys_alloc+0x216>
      }
    }
  }

  if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
80003c2c:	49 18       	lddpc	r8,80003c70 <sys_alloc+0x890>
80003c2e:	70 28       	ld.w	r8,r8[0x8]
80003c30:	f0 cc ff d7 	sub	r12,r8,-41
80003c34:	0a 0c       	add	r12,r5
80003c36:	5c 38       	neg	r8
80003c38:	10 6c       	and	r12,r8
    if (asize < HALF_MAX_SIZE_T) {
80003c3a:	e0 6b ff fe 	mov	r11,65534
80003c3e:	ea 1b 7f ff 	orh	r11,0x7fff
80003c42:	16 3c       	cp.w	r12,r11
80003c44:	fe 9b ff e5 	brhi	80003c0e <sys_alloc+0x82e>
80003c48:	fe 9f fc ba 	bral	800035bc <sys_alloc+0x1dc>
80003c4c:	12 98       	mov	r8,r9
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
          !is_extern_segment(sp) &&
80003c4e:	70 3a       	ld.w	r10,r8[0xc]
    else {
      /* Try to merge with an existing segment */
      msegmentptr sp = &m->seg;
      while (sp != 0 && tbase != sp->base + sp->size)
        sp = sp->next;
      if (sp != 0 &&
80003c50:	14 9b       	mov	r11,r10
80003c52:	e2 1b 00 08 	andl	r11,0x8,COH
80003c56:	fe 90 fd 21 	breq	80003698 <sys_alloc+0x2b8>
80003c5a:	fe 9f fd 37 	bral	800036c8 <sys_alloc+0x2e8>
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
        if (sp != 0 &&
            !is_extern_segment(sp) &&
80003c5e:	72 38       	ld.w	r8,r9[0xc]
        if (tbase < m->least_addr)
          m->least_addr = tbase;
        sp = &m->seg;
        while (sp != 0 && sp->base != tbase + tsize)
          sp = sp->next;
        if (sp != 0 &&
80003c60:	10 9a       	mov	r10,r8
80003c62:	e2 1a 00 08 	andl	r10,0x8,COH
80003c66:	fe 90 fd 48 	breq	800036f6 <sys_alloc+0x316>
80003c6a:	cc 7a       	rjmp	800039f8 <sys_alloc+0x618>
80003c6c:	80 00       	ld.sh	r0,r0[0x0]
80003c6e:	24 f0       	sub	r0,79
80003c70:	00 00       	add	r0,r0
80003c72:	07 0c       	ld.w	r12,r3++
80003c74:	80 00       	ld.sh	r0,r0[0x0]
80003c76:	3f 30       	mov	r0,-13
80003c78:	80 00       	ld.sh	r0,r0[0x0]
80003c7a:	24 d4       	sub	r4,77
80003c7c:	80 00       	ld.sh	r0,r0[0x0]
80003c7e:	3e fc       	mov	r12,-17
80003c80:	80 00       	ld.sh	r0,r0[0x0]
80003c82:	25 74       	sub	r4,87
80003c84:	00 00       	add	r0,r0
80003c86:	05 44       	ld.w	r4,--r2
80003c88:	80 00       	ld.sh	r0,r0[0x0]
80003c8a:	25 44       	sub	r4,84
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	25 38       	sub	r8,83

80003c90 <malloc>:
  */

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
80003c90:	eb cd 40 c0 	pushm	r6-r7,lr
80003c94:	e0 4c 00 f4 	cp.w	r12,244
80003c98:	e0 8b 00 cf 	brhi	80003e36 <malloc+0x1a6>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
80003c9c:	58 ac       	cp.w	r12,10
80003c9e:	e0 8b 00 04 	brhi	80003ca6 <malloc+0x16>
80003ca2:	31 07       	mov	r7,16
80003ca4:	c0 58       	rjmp	80003cae <malloc+0x1e>
80003ca6:	f8 c7 ff f5 	sub	r7,r12,-11
80003caa:	e0 17 ff f8 	andl	r7,0xfff8
      idx = small_index(nb);
80003cae:	ee 08 16 03 	lsr	r8,r7,0x3
      smallbits = gm->smallmap >> idx;
80003cb2:	fe f9 02 36 	ld.w	r9,pc[566]
80003cb6:	72 0c       	ld.w	r12,r9[0x0]
80003cb8:	10 9b       	mov	r11,r8
80003cba:	f8 08 0a 49 	lsr	r9,r12,r8

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
80003cbe:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
80003cc2:	c2 c0       	breq	80003d1a <malloc+0x8a>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
80003cc4:	ec 19 00 01 	eorl	r9,0x1
80003cc8:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003ccc:	f2 08 00 08 	add	r8,r9,r8
        b = smallbin_at(gm, idx);
80003cd0:	fe fa 02 18 	ld.w	r10,pc[536]
80003cd4:	2d ca       	sub	r10,-36
80003cd6:	f4 08 00 3a 	add	r10,r10,r8<<0x3
        p = b->fd;
80003cda:	74 26       	ld.w	r6,r10[0x8]
        assert(chunksize(p) == small_index2size(idx));
        unlink_first_small_chunk(gm, b, p, idx);
80003cdc:	6c 2b       	ld.w	r11,r6[0x8]
80003cde:	16 3a       	cp.w	r10,r11
80003ce0:	c0 a1       	brne	80003cf4 <malloc+0x64>
80003ce2:	30 19       	mov	r9,1
80003ce4:	f2 08 09 49 	lsl	r9,r9,r8
80003ce8:	5c d9       	com	r9
80003cea:	f3 ec 00 0c 	and	r12,r9,r12
80003cee:	4f f9       	lddpc	r9,80003ee8 <malloc+0x258>
80003cf0:	93 0c       	st.w	r9[0x0],r12
80003cf2:	c0 88       	rjmp	80003d02 <malloc+0x72>
80003cf4:	4f d9       	lddpc	r9,80003ee8 <malloc+0x258>
80003cf6:	72 49       	ld.w	r9,r9[0x10]
80003cf8:	16 39       	cp.w	r9,r11
80003cfa:	f5 fb 8a 02 	st.wls	r10[0x8],r11
80003cfe:	f7 fa 8a 03 	st.wls	r11[0xc],r10
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
80003d02:	a3 78       	lsl	r8,0x3
80003d04:	10 99       	mov	r9,r8
80003d06:	e8 19 00 03 	orl	r9,0x3
80003d0a:	8d 19       	st.w	r6[0x4],r9
80003d0c:	ec 08 00 08 	add	r8,r6,r8
80003d10:	70 19       	ld.w	r9,r8[0x4]
80003d12:	a1 a9       	sbr	r9,0x0
80003d14:	91 19       	st.w	r8[0x4],r9
        mem = chunk2mem(p);
80003d16:	2f 86       	sub	r6,-8
        check_malloced_chunk(gm, mem, nb);
        goto postaction;
80003d18:	ce 58       	rjmp	80003ee2 <malloc+0x252>
      }

      else if (nb > gm->dvsize) {
80003d1a:	4f 48       	lddpc	r8,80003ee8 <malloc+0x258>
80003d1c:	70 28       	ld.w	r8,r8[0x8]
80003d1e:	10 37       	cp.w	r7,r8
80003d20:	e0 88 00 a4 	brls	80003e68 <malloc+0x1d8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
80003d24:	58 09       	cp.w	r9,0
80003d26:	c7 d0       	breq	80003e20 <malloc+0x190>
          mchunkptr b, p, r;
          size_t rsize;
          bindex_t i;
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
80003d28:	30 28       	mov	r8,2
80003d2a:	f0 0b 09 48 	lsl	r8,r8,r11
80003d2e:	f0 0a 11 00 	rsub	r10,r8,0
80003d32:	f5 e8 10 08 	or	r8,r10,r8
80003d36:	f2 0b 09 49 	lsl	r9,r9,r11
80003d3a:	f1 e9 00 09 	and	r9,r8,r9
          binmap_t leastbit = least_bit(leftbits);
          compute_bit2idx(leastbit, i);
80003d3e:	f2 0a 11 00 	rsub	r10,r9,0
80003d42:	12 6a       	and	r10,r9
80003d44:	20 1a       	sub	r10,1
80003d46:	f4 09 16 0c 	lsr	r9,r10,0xc
80003d4a:	e2 19 00 10 	andl	r9,0x10,COH
80003d4e:	f4 09 0a 4a 	lsr	r10,r10,r9
80003d52:	f4 08 16 05 	lsr	r8,r10,0x5
80003d56:	e2 18 00 08 	andl	r8,0x8,COH
80003d5a:	f0 09 00 09 	add	r9,r8,r9
80003d5e:	f4 08 0a 4a 	lsr	r10,r10,r8
80003d62:	f4 08 16 02 	lsr	r8,r10,0x2
80003d66:	e2 18 00 04 	andl	r8,0x4,COH
80003d6a:	f2 08 00 0b 	add	r11,r9,r8
80003d6e:	f4 08 0a 4a 	lsr	r10,r10,r8
80003d72:	f4 09 16 01 	lsr	r9,r10,0x1
80003d76:	e2 19 00 02 	andl	r9,0x2,COH
80003d7a:	f6 09 00 08 	add	r8,r11,r9
80003d7e:	f4 09 0a 4a 	lsr	r10,r10,r9
80003d82:	f3 da c0 21 	bfextu	r9,r10,0x1,0x1
80003d86:	12 08       	add	r8,r9
80003d88:	f4 09 0a 49 	lsr	r9,r10,r9
80003d8c:	12 08       	add	r8,r9
          b = smallbin_at(gm, i);
80003d8e:	4d 7b       	lddpc	r11,80003ee8 <malloc+0x258>
80003d90:	2d cb       	sub	r11,-36
80003d92:	f6 08 00 39 	add	r9,r11,r8<<0x3
          p = b->fd;
80003d96:	72 26       	ld.w	r6,r9[0x8]
          assert(chunksize(p) == small_index2size(i));
          unlink_first_small_chunk(gm, b, p, i);
80003d98:	6c 2a       	ld.w	r10,r6[0x8]
80003d9a:	14 39       	cp.w	r9,r10
80003d9c:	c0 a1       	brne	80003db0 <malloc+0x120>
80003d9e:	30 19       	mov	r9,1
80003da0:	f2 08 09 49 	lsl	r9,r9,r8
80003da4:	5c d9       	com	r9
80003da6:	f3 ec 00 0c 	and	r12,r9,r12
80003daa:	4d 09       	lddpc	r9,80003ee8 <malloc+0x258>
80003dac:	93 0c       	st.w	r9[0x0],r12
80003dae:	c0 88       	rjmp	80003dbe <malloc+0x12e>
80003db0:	4c ec       	lddpc	r12,80003ee8 <malloc+0x258>
80003db2:	78 4c       	ld.w	r12,r12[0x10]
80003db4:	14 3c       	cp.w	r12,r10
80003db6:	f3 fa 8a 02 	st.wls	r9[0x8],r10
80003dba:	f5 f9 8a 03 	st.wls	r10[0xc],r9
          rsize = small_index2size(i) - nb;
80003dbe:	a3 78       	lsl	r8,0x3
80003dc0:	0e 18       	sub	r8,r7
          /* Fit here cannot be remainderless if 4byte sizes */
          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
            set_inuse_and_pinuse(gm, p, small_index2size(i));
          else {
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
80003dc2:	0e 99       	mov	r9,r7
80003dc4:	e8 19 00 03 	orl	r9,0x3
80003dc8:	8d 19       	st.w	r6[0x4],r9
            r = chunk_plus_offset(p, nb);
80003dca:	ec 07 00 07 	add	r7,r6,r7
            set_size_and_pinuse_of_free_chunk(r, rsize);
80003dce:	10 99       	mov	r9,r8
80003dd0:	a1 a9       	sbr	r9,0x0
80003dd2:	8f 19       	st.w	r7[0x4],r9
80003dd4:	ee 08 09 08 	st.w	r7[r8],r8
            replace_dv(gm, r, rsize);
80003dd8:	4c 49       	lddpc	r9,80003ee8 <malloc+0x258>
80003dda:	72 2a       	ld.w	r10,r9[0x8]
80003ddc:	58 0a       	cp.w	r10,0
80003dde:	c1 c0       	breq	80003e16 <malloc+0x186>
80003de0:	12 9c       	mov	r12,r9
80003de2:	72 59       	ld.w	r9,r9[0x14]
80003de4:	a3 9a       	lsr	r10,0x3
80003de6:	f6 0a 00 3b 	add	r11,r11,r10<<0x3
80003dea:	78 0c       	ld.w	r12,r12[0x0]
80003dec:	30 1e       	mov	lr,1
80003dee:	fc 0a 09 4a 	lsl	r10,lr,r10
80003df2:	f5 ec 00 0e 	and	lr,r10,r12
80003df6:	c0 61       	brne	80003e02 <malloc+0x172>
80003df8:	18 4a       	or	r10,r12
80003dfa:	4b ce       	lddpc	lr,80003ee8 <malloc+0x258>
80003dfc:	9d 0a       	st.w	lr[0x0],r10
80003dfe:	16 9a       	mov	r10,r11
80003e00:	c0 78       	rjmp	80003e0e <malloc+0x17e>
80003e02:	76 2a       	ld.w	r10,r11[0x8]
80003e04:	4b 9c       	lddpc	r12,80003ee8 <malloc+0x258>
80003e06:	78 4c       	ld.w	r12,r12[0x10]
80003e08:	18 3a       	cp.w	r10,r12
80003e0a:	f6 0a 17 30 	movlo	r10,r11
80003e0e:	97 29       	st.w	r11[0x8],r9
80003e10:	95 39       	st.w	r10[0xc],r9
80003e12:	93 2a       	st.w	r9[0x8],r10
80003e14:	93 3b       	st.w	r9[0xc],r11
80003e16:	4b 59       	lddpc	r9,80003ee8 <malloc+0x258>
80003e18:	93 28       	st.w	r9[0x8],r8
80003e1a:	93 57       	st.w	r9[0x14],r7
          }
          mem = chunk2mem(p);
80003e1c:	2f 86       	sub	r6,-8
          check_malloced_chunk(gm, mem, nb);
          goto postaction;
80003e1e:	c6 28       	rjmp	80003ee2 <malloc+0x252>
        }

        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
80003e20:	4b 28       	lddpc	r8,80003ee8 <malloc+0x258>
80003e22:	70 18       	ld.w	r8,r8[0x4]
80003e24:	58 08       	cp.w	r8,0
80003e26:	c4 40       	breq	80003eae <malloc+0x21e>
80003e28:	0e 9b       	mov	r11,r7
80003e2a:	4b 0c       	lddpc	r12,80003ee8 <malloc+0x258>
80003e2c:	f0 1f 00 30 	mcall	80003eec <malloc+0x25c>
80003e30:	18 96       	mov	r6,r12
80003e32:	c5 81       	brne	80003ee2 <malloc+0x252>
80003e34:	c1 58       	rjmp	80003e5e <malloc+0x1ce>
          check_malloced_chunk(gm, mem, nb);
          goto postaction;
        }
      }
    }
    else if (bytes >= MAX_REQUEST)
80003e36:	fe 5c ff bf 	cp.w	r12,-65
80003e3a:	e0 88 00 04 	brls	80003e42 <malloc+0x1b2>
80003e3e:	3f f7       	mov	r7,-1
80003e40:	c0 f8       	rjmp	80003e5e <malloc+0x1ce>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    else {
      nb = pad_request(bytes);
80003e42:	f8 c7 ff f5 	sub	r7,r12,-11
80003e46:	e0 17 ff f8 	andl	r7,0xfff8
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
80003e4a:	4a 88       	lddpc	r8,80003ee8 <malloc+0x258>
80003e4c:	70 18       	ld.w	r8,r8[0x4]
80003e4e:	58 08       	cp.w	r8,0
80003e50:	c0 70       	breq	80003e5e <malloc+0x1ce>
80003e52:	0e 9b       	mov	r11,r7
80003e54:	4a 5c       	lddpc	r12,80003ee8 <malloc+0x258>
80003e56:	f0 1f 00 27 	mcall	80003ef0 <malloc+0x260>
80003e5a:	18 96       	mov	r6,r12
80003e5c:	c4 31       	brne	80003ee2 <malloc+0x252>
        check_malloced_chunk(gm, mem, nb);
        goto postaction;
      }
    }

    if (nb <= gm->dvsize) {
80003e5e:	4a 38       	lddpc	r8,80003ee8 <malloc+0x258>
80003e60:	70 28       	ld.w	r8,r8[0x8]
80003e62:	10 37       	cp.w	r7,r8
80003e64:	e0 8b 00 25 	brhi	80003eae <malloc+0x21e>
      size_t rsize = gm->dvsize - nb;
80003e68:	f0 07 01 09 	sub	r9,r8,r7
      mchunkptr p = gm->dv;
80003e6c:	49 fa       	lddpc	r10,80003ee8 <malloc+0x258>
80003e6e:	74 56       	ld.w	r6,r10[0x14]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
80003e70:	58 f9       	cp.w	r9,15
80003e72:	e0 88 00 0f 	brls	80003e90 <malloc+0x200>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
80003e76:	ec 07 00 08 	add	r8,r6,r7
80003e7a:	95 58       	st.w	r10[0x14],r8
        gm->dvsize = rsize;
80003e7c:	95 29       	st.w	r10[0x8],r9
        set_size_and_pinuse_of_free_chunk(r, rsize);
80003e7e:	12 9a       	mov	r10,r9
80003e80:	a1 aa       	sbr	r10,0x0
80003e82:	91 1a       	st.w	r8[0x4],r10
80003e84:	f0 09 09 09 	st.w	r8[r9],r9
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
80003e88:	e8 17 00 03 	orl	r7,0x3
80003e8c:	8d 17       	st.w	r6[0x4],r7
80003e8e:	c0 e8       	rjmp	80003eaa <malloc+0x21a>
      }
      else { /* exhaust dv */
        size_t dvs = gm->dvsize;
        gm->dvsize = 0;
80003e90:	49 69       	lddpc	r9,80003ee8 <malloc+0x258>
80003e92:	30 0a       	mov	r10,0
80003e94:	93 2a       	st.w	r9[0x8],r10
        gm->dv = 0;
80003e96:	93 5a       	st.w	r9[0x14],r10
        set_inuse_and_pinuse(gm, p, dvs);
80003e98:	10 99       	mov	r9,r8
80003e9a:	e8 19 00 03 	orl	r9,0x3
80003e9e:	8d 19       	st.w	r6[0x4],r9
80003ea0:	ec 08 00 08 	add	r8,r6,r8
80003ea4:	70 19       	ld.w	r9,r8[0x4]
80003ea6:	a1 a9       	sbr	r9,0x0
80003ea8:	91 19       	st.w	r8[0x4],r9
      }
      mem = chunk2mem(p);
80003eaa:	2f 86       	sub	r6,-8
      check_malloced_chunk(gm, mem, nb);
      goto postaction;
80003eac:	c1 b8       	rjmp	80003ee2 <malloc+0x252>
    }

    else if (nb < gm->topsize) { /* Split top */
80003eae:	48 f8       	lddpc	r8,80003ee8 <malloc+0x258>
80003eb0:	70 38       	ld.w	r8,r8[0xc]
80003eb2:	10 37       	cp.w	r7,r8
80003eb4:	c1 22       	brcc	80003ed8 <malloc+0x248>
      size_t rsize = gm->topsize -= nb;
80003eb6:	0e 18       	sub	r8,r7
80003eb8:	48 cc       	lddpc	r12,80003ee8 <malloc+0x258>
80003eba:	99 38       	st.w	r12[0xc],r8
      mchunkptr p = gm->top;
80003ebc:	78 66       	ld.w	r6,r12[0x18]
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
80003ebe:	ec 07 00 09 	add	r9,r6,r7
80003ec2:	99 69       	st.w	r12[0x18],r9
      r->head = rsize | PINUSE_BIT;
80003ec4:	a1 a8       	sbr	r8,0x0
80003ec6:	93 18       	st.w	r9[0x4],r8
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
80003ec8:	e8 17 00 03 	orl	r7,0x3
80003ecc:	8d 17       	st.w	r6[0x4],r7
      mem = chunk2mem(p);
80003ece:	2f 86       	sub	r6,-8
      check_top_chunk(gm, gm->top);
80003ed0:	78 6b       	ld.w	r11,r12[0x18]
80003ed2:	f0 1f 00 09 	mcall	80003ef4 <malloc+0x264>
      check_malloced_chunk(gm, mem, nb);
      goto postaction;
80003ed6:	c0 68       	rjmp	80003ee2 <malloc+0x252>
    }

    mem = sys_alloc(gm, nb);
80003ed8:	0e 9b       	mov	r11,r7
80003eda:	48 4c       	lddpc	r12,80003ee8 <malloc+0x258>
80003edc:	f0 1f 00 07 	mcall	80003ef8 <malloc+0x268>
80003ee0:	18 96       	mov	r6,r12
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
80003ee2:	0c 9c       	mov	r12,r6
80003ee4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ee8:	00 00       	add	r0,r0
80003eea:	05 44       	ld.w	r4,--r2
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	29 20       	sub	r0,-110
80003ef0:	80 00       	ld.sh	r0,r0[0x0]
80003ef2:	2a f8       	sub	r8,-81
80003ef4:	80 00       	ld.sh	r0,r0[0x0]
80003ef6:	25 38       	sub	r8,83
80003ef8:	80 00       	ld.sh	r0,r0[0x0]
80003efa:	33 e0       	mov	r0,62

80003efc <dlmalloc_sbrk>:
static void *cur_heap_pos = 0;

void * dlmalloc_sbrk(int increment)
{
	//Initialize cur_heap_pos
	if ( cur_heap_pos == 0 )
80003efc:	48 a8       	lddpc	r8,80003f24 <dlmalloc_sbrk+0x28>
80003efe:	70 08       	ld.w	r8,r8[0x0]
80003f00:	58 08       	cp.w	r8,0
80003f02:	c0 41       	brne	80003f0a <dlmalloc_sbrk+0xe>
	 	cur_heap_pos = (void *) (HEAP_START);
80003f04:	48 99       	lddpc	r9,80003f28 <dlmalloc_sbrk+0x2c>
80003f06:	48 88       	lddpc	r8,80003f24 <dlmalloc_sbrk+0x28>
80003f08:	91 09       	st.w	r8[0x0],r9

	if ( ((void *)((char *)cur_heap_pos + increment)) <= (void *) HEAP_END ){
80003f0a:	48 78       	lddpc	r8,80003f24 <dlmalloc_sbrk+0x28>
80003f0c:	70 08       	ld.w	r8,r8[0x0]
80003f0e:	f0 0c 00 0c 	add	r12,r8,r12
80003f12:	48 79       	lddpc	r9,80003f2c <dlmalloc_sbrk+0x30>
80003f14:	12 3c       	cp.w	r12,r9
80003f16:	e0 88 00 04 	brls	80003f1e <dlmalloc_sbrk+0x22>
80003f1a:	3f f8       	mov	r8,-1
80003f1c:	c0 38       	rjmp	80003f22 <dlmalloc_sbrk+0x26>
		void *heap_pos = cur_heap_pos;
		cur_heap_pos = (void *)((char *)cur_heap_pos +increment);
80003f1e:	48 29       	lddpc	r9,80003f24 <dlmalloc_sbrk+0x28>
80003f20:	93 0c       	st.w	r9[0x0],r12
		fflush(stderr);
#endif
		//errno = ENOMEM;
		return (void *)-1;
	}
}
80003f22:	5e f8       	retal	r8
80003f24:	00 00       	add	r0,r0
80003f26:	07 24       	ld.uh	r4,r3++
80003f28:	00 00       	add	r0,r0
80003f2a:	09 48       	ld.w	r8,--r4
80003f2c:	00 00       	add	r0,r0
80003f2e:	f0 00       	*unknown*

80003f30 <mmap>:
 */
void *mmap(void *start, int length,
	int prot, int flags, int fd, int offset)
{
#ifndef ONLY_MSPACES
	if(length == 0)
80003f30:	58 0b       	cp.w	r11,0
80003f32:	c0 41       	brne	80003f3a <mmap+0xa>
	{
		cur_heap_pos = (void *) HEAP_START;
80003f34:	48 89       	lddpc	r9,80003f54 <mmap+0x24>
80003f36:	48 98       	lddpc	r8,80003f58 <mmap+0x28>
80003f38:	91 09       	st.w	r8[0x0],r9
	}

	if ( (cur_heap_pos + length) <= (void *) HEAP_END )
80003f3a:	48 88       	lddpc	r8,80003f58 <mmap+0x28>
80003f3c:	70 0c       	ld.w	r12,r8[0x0]
80003f3e:	f8 0b 00 0b 	add	r11,r12,r11
80003f42:	48 78       	lddpc	r8,80003f5c <mmap+0x2c>
80003f44:	10 3b       	cp.w	r11,r8
80003f46:	e0 88 00 03 	brls	80003f4c <mmap+0x1c>
80003f4a:	5e fe       	retal	-1
	{
		void *heap_pos = cur_heap_pos;
		cur_heap_pos += length;
80003f4c:	48 38       	lddpc	r8,80003f58 <mmap+0x28>
80003f4e:	91 0b       	st.w	r8[0x0],r11
	}
	return (void *) -1;
#else
	return MORECORE(length);
#endif
}
80003f50:	5e fc       	retal	r12
80003f52:	00 00       	add	r0,r0
80003f54:	00 00       	add	r0,r0
80003f56:	09 48       	ld.w	r8,--r4
80003f58:	00 00       	add	r0,r0
80003f5a:	07 24       	ld.uh	r4,r3++
80003f5c:	00 00       	add	r0,r0
80003f5e:	f0 00       	*unknown*

80003f60 <munmap>:

int munmap(void *start, int length)
{
#ifndef ONLY_MSPACES
	if( (cur_heap_pos - length) < HEAP_START)
80003f60:	48 58       	lddpc	r8,80003f74 <munmap+0x14>
80003f62:	70 08       	ld.w	r8,r8[0x0]
80003f64:	16 18       	sub	r8,r11
80003f66:	48 59       	lddpc	r9,80003f78 <munmap+0x18>
80003f68:	12 38       	cp.w	r8,r9
80003f6a:	c0 22       	brcc	80003f6e <munmap+0xe>
80003f6c:	5e fe       	retal	-1
	{
		return -1;
	}
	else
	{
		cur_heap_pos -= length;
80003f6e:	48 29       	lddpc	r9,80003f74 <munmap+0x14>
80003f70:	93 08       	st.w	r9[0x0],r8
80003f72:	5e fd       	retal	0
80003f74:	00 00       	add	r0,r0
80003f76:	07 24       	ld.uh	r4,r3++
80003f78:	00 00       	add	r0,r0
80003f7a:	09 48       	ld.w	r8,--r4

80003f7c <i2c_test_02>:

/*
 * Simples teste de envio (AVR -> CC) para verificacao do sistema de testes. (Result Fail)
 */
bool i2c_test_02()
{
80003f7c:	eb cd 40 f8 	pushm	r3-r7,lr
80003f80:	20 7d       	sub	sp,28
	print_dbg("\n\n==============================\nExecutando i2c teste 02...\n==============================\n");
80003f82:	4d 8b       	lddpc	r11,800040e0 <i2c_test_02+0x164>
80003f84:	fc 7c 14 00 	mov	r12,-191488
80003f88:	f0 1f 00 57 	mcall	800040e4 <i2c_test_02+0x168>
	
	uint8_t sendBuffer[5] = {0x03, 0xFF, 0xEF, 0x3F, 0x23};
80003f8c:	4d 79       	lddpc	r9,800040e8 <i2c_test_02+0x16c>
80003f8e:	fa c8 ff ec 	sub	r8,sp,-20
80003f92:	72 0a       	ld.w	r10,r9[0x0]
80003f94:	91 0a       	st.w	r8[0x0],r10
80003f96:	13 c9       	ld.ub	r9,r9[0x4]
80003f98:	b0 c9       	st.b	r8[0x4],r9
	int i, aux, testNumber = 2, paramsSize = 5;
	cmd_frame_t cmdFrame, ansFrame;
	bool result;
	
	cmdFrame = newEmptyTestCmdFrame(testNumber, paramsSize);
80003f9a:	fa c7 ff f6 	sub	r7,sp,-10
80003f9e:	30 5a       	mov	r10,5
80003fa0:	30 2b       	mov	r11,2
80003fa2:	0e 9c       	mov	r12,r7
80003fa4:	f0 1f 00 52 	mcall	800040ec <i2c_test_02+0x170>
80003fa8:	fb 15 00 10 	ld.uh	r5,sp[16]
80003fac:	fb 18 00 12 	ld.uh	r8,sp[18]
80003fb0:	f1 e5 11 05 	or	r5,r8,r5<<0x10
	cmdFrame.params[0] = 0x03;
80003fb4:	30 38       	mov	r8,3
80003fb6:	aa 88       	st.b	r5[0x0],r8
	cmdFrame.params[1] = 0xFF;
80003fb8:	3f f8       	mov	r8,-1
80003fba:	aa 98       	st.b	r5[0x1],r8
	cmdFrame.params[2] = 0xEF;
80003fbc:	3e f8       	mov	r8,-17
80003fbe:	aa a8       	st.b	r5[0x2],r8
	cmdFrame.params[3] = 0x3E; //Causara o Erro
80003fc0:	33 e8       	mov	r8,62
80003fc2:	aa b8       	st.b	r5[0x3],r8
	cmdFrame.params[4] = 0x23;
80003fc4:	32 38       	mov	r8,35
80003fc6:	aa c8       	st.b	r5[0x4],r8
	
	//Notifica o CC sobre a execucao do teste 01 e envia os dados auxiliares.
	sendTestCmdFrame(cmdFrame);
80003fc8:	ea 06 16 10 	lsr	r6,r5,0x10
80003fcc:	fb 56 00 10 	st.h	sp[16],r6
80003fd0:	fb 55 00 12 	st.h	sp[18],r5
80003fd4:	20 3d       	sub	sp,12
80003fd6:	30 a4       	mov	r4,10
80003fd8:	08 9a       	mov	r10,r4
80003fda:	0e 9b       	mov	r11,r7
80003fdc:	1a 9c       	mov	r12,sp
80003fde:	f0 1f 00 45 	mcall	800040f0 <i2c_test_02+0x174>
80003fe2:	f0 1f 00 45 	mcall	800040f4 <i2c_test_02+0x178>
	
	print_dbg("\n\nTest command sent: ");
80003fe6:	4c 5b       	lddpc	r11,800040f8 <i2c_test_02+0x17c>
80003fe8:	fc 7c 14 00 	mov	r12,-191488
80003fec:	f0 1f 00 3e 	mcall	800040e4 <i2c_test_02+0x168>
	printfCmd(cmdFrame);
80003ff0:	fb 56 00 1c 	st.h	sp[28],r6
80003ff4:	fb 55 00 1e 	st.h	sp[30],r5
80003ff8:	20 3d       	sub	sp,12
80003ffa:	08 9a       	mov	r10,r4
80003ffc:	0e 9b       	mov	r11,r7
80003ffe:	1a 9c       	mov	r12,sp
80004000:	f0 1f 00 3c 	mcall	800040f0 <i2c_test_02+0x174>
80004004:	f0 1f 00 3e 	mcall	800040fc <i2c_test_02+0x180>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004008:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000400c:	e0 6a 12 00 	mov	r10,4608
80004010:	ea 1a 00 7a 	orh	r10,0x7a
80004014:	f0 0a 00 0a 	add	r10,r8,r10
80004018:	2f ad       	sub	sp,-24
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000401a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000401e:	14 38       	cp.w	r8,r10
80004020:	e0 88 00 08 	brls	80004030 <i2c_test_02+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004024:	12 38       	cp.w	r8,r9
80004026:	fe 98 ff fa 	brls	8000401a <i2c_test_02+0x9e>
8000402a:	12 3a       	cp.w	r10,r9
8000402c:	c4 83       	brcs	800040bc <i2c_test_02+0x140>
8000402e:	cf 6b       	rjmp	8000401a <i2c_test_02+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004030:	12 38       	cp.w	r8,r9
80004032:	e0 8b 00 45 	brhi	800040bc <i2c_test_02+0x140>
80004036:	12 3a       	cp.w	r10,r9
80004038:	c4 23       	brcs	800040bc <i2c_test_02+0x140>
8000403a:	cf 0b       	rjmp	8000401a <i2c_test_02+0x9e>
}

/*
 * Simples teste de envio (AVR -> CC) para verificacao do sistema de testes. (Result Fail)
 */
bool i2c_test_02()
8000403c:	9a b9       	ld.uh	r9,sp[0x6]
8000403e:	9a c8       	ld.uh	r8,sp[0x8]
80004040:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80004044:	11 89       	ld.ub	r9,r8[0x0]
80004046:	3f f8       	mov	r8,-1
80004048:	f0 09 18 00 	cp.b	r9,r8
8000404c:	5f 13       	srne	r3
		if( ansFrame.params[0] == PARAM_TEST_FAIL )
			result = false;
		else
			result = true;
		
		print_dbg("\n\nTest answer received: ");
8000404e:	4a db       	lddpc	r11,80004100 <i2c_test_02+0x184>
80004050:	fc 7c 14 00 	mov	r12,-191488
80004054:	f0 1f 00 24 	mcall	800040e4 <i2c_test_02+0x168>
		printfCmd(ansFrame);
80004058:	20 3d       	sub	sp,12
8000405a:	fa c7 ff f4 	sub	r7,sp,-12
8000405e:	ee e8 00 00 	ld.d	r8,r7[0]
80004062:	fa e9 00 00 	st.d	sp[0],r8
80004066:	ef 38 00 08 	ld.ub	r8,r7[8]
8000406a:	fb 68 00 08 	st.b	sp[8],r8
8000406e:	ef 38 00 09 	ld.ub	r8,r7[9]
80004072:	fb 68 00 09 	st.b	sp[9],r8
80004076:	f0 1f 00 22 	mcall	800040fc <i2c_test_02+0x180>
		freeCmdFrame(ansFrame);
8000407a:	20 3d       	sub	sp,12
8000407c:	ee e8 00 00 	ld.d	r8,r7[0]
80004080:	fa e9 00 00 	st.d	sp[0],r8
80004084:	ef 38 00 08 	ld.ub	r8,r7[8]
80004088:	fb 68 00 08 	st.b	sp[8],r8
8000408c:	ef 38 00 09 	ld.ub	r8,r7[9]
80004090:	fb 68 00 09 	st.b	sp[9],r8
80004094:	f0 1f 00 1c 	mcall	80004104 <i2c_test_02+0x188>
80004098:	2f ad       	sub	sp,-24
	}
	
	if(result == true)
8000409a:	58 03       	cp.w	r3,0
8000409c:	c0 70       	breq	800040aa <i2c_test_02+0x12e>
		print_dbg( "\n\nPASS" );
8000409e:	49 bb       	lddpc	r11,80004108 <i2c_test_02+0x18c>
800040a0:	fc 7c 14 00 	mov	r12,-191488
800040a4:	f0 1f 00 10 	mcall	800040e4 <i2c_test_02+0x168>
800040a8:	c0 68       	rjmp	800040b4 <i2c_test_02+0x138>
	else
		print_dbg( "\n\nFAIL" );
800040aa:	49 9b       	lddpc	r11,8000410c <i2c_test_02+0x190>
800040ac:	fc 7c 14 00 	mov	r12,-191488
800040b0:	f0 1f 00 0d 	mcall	800040e4 <i2c_test_02+0x168>
	
	return result;
}
800040b4:	06 9c       	mov	r12,r3
800040b6:	2f 9d       	sub	sp,-28
800040b8:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	print_dbg("\n\nTest command sent: ");
	printfCmd(cmdFrame);

	//Espera o CC se preparar para o teste.
	delay_ms(CC_PREPARE_TO_TEST_DELAY);
	twim_write( TWI_MASTER, sendBuffer, paramsSize, CUBE_COMPUTER_ADDRESS, false );
800040bc:	30 08       	mov	r8,0
800040be:	30 59       	mov	r9,5
800040c0:	12 9a       	mov	r10,r9
800040c2:	fa cb ff ec 	sub	r11,sp,-20
800040c6:	fe 7c 38 00 	mov	r12,-51200
800040ca:	f0 1f 00 12 	mcall	80004110 <i2c_test_02+0x194>
	
	ansFrame = rcvTestCmdAnswer();
800040ce:	1a 9c       	mov	r12,sp
800040d0:	f0 1f 00 11 	mcall	80004114 <i2c_test_02+0x198>
	if(ansFrame.cmdCode != 0)
800040d4:	9a 89       	ld.uh	r9,sp[0x0]
800040d6:	30 08       	mov	r8,0
800040d8:	f0 09 19 00 	cp.h	r9,r8
800040dc:	cb 01       	brne	8000403c <i2c_test_02+0xc0>
800040de:	cd eb       	rjmp	8000409a <i2c_test_02+0x11e>
800040e0:	80 00       	ld.sh	r0,r0[0x0]
800040e2:	aa 38       	st.h	r5[0x6],r8
800040e4:	80 00       	ld.sh	r0,r0[0x0]
800040e6:	4b c0       	lddpc	r0,800041d4 <i2c_test_01+0xbc>
800040e8:	80 00       	ld.sh	r0,r0[0x0]
800040ea:	aa 00       	st.h	r5[0x0],r0
800040ec:	80 00       	ld.sh	r0,r0[0x0]
800040ee:	45 2c       	lddsp	r12,sp[0x148]
800040f0:	80 00       	ld.sh	r0,r0[0x0]
800040f2:	4e 24       	lddpc	r4,80004278 <i2c_test_01+0x160>
800040f4:	80 00       	ld.sh	r0,r0[0x0]
800040f6:	44 7c       	lddsp	r12,sp[0x11c]
800040f8:	80 00       	ld.sh	r0,r0[0x0]
800040fa:	aa 94       	st.b	r5[0x1],r4
800040fc:	80 00       	ld.sh	r0,r0[0x0]
800040fe:	47 34       	lddsp	r4,sp[0x1cc]
80004100:	80 00       	ld.sh	r0,r0[0x0]
80004102:	aa ac       	st.b	r5[0x2],r12
80004104:	80 00       	ld.sh	r0,r0[0x0]
80004106:	45 0c       	lddsp	r12,sp[0x140]
80004108:	80 00       	ld.sh	r0,r0[0x0]
8000410a:	aa c8       	st.b	r5[0x4],r8
8000410c:	80 00       	ld.sh	r0,r0[0x0]
8000410e:	aa d0       	st.b	r5[0x5],r0
80004110:	80 00       	ld.sh	r0,r0[0x0]
80004112:	21 78       	sub	r8,23
80004114:	80 00       	ld.sh	r0,r0[0x0]
80004116:	45 c4       	lddsp	r4,sp[0x170]

80004118 <i2c_test_01>:

/*
 * Simples teste de envio (AVR -> CC) para verificacao do sistema de testes. (Result Pass)
 */
bool i2c_test_01()
{
80004118:	eb cd 40 f8 	pushm	r3-r7,lr
8000411c:	20 7d       	sub	sp,28
	print_dbg("\n\n==============================\nExecutando i2c teste 01...\n==============================\n");
8000411e:	4d 8b       	lddpc	r11,8000427c <i2c_test_01+0x164>
80004120:	fc 7c 14 00 	mov	r12,-191488
80004124:	f0 1f 00 57 	mcall	80004280 <i2c_test_01+0x168>
	
	uint8_t sendBuffer[5] = {0x03, 0xFF, 0xEF, 0x3F, 0x23};
80004128:	4d 79       	lddpc	r9,80004284 <i2c_test_01+0x16c>
8000412a:	fa c8 ff ec 	sub	r8,sp,-20
8000412e:	72 0a       	ld.w	r10,r9[0x0]
80004130:	91 0a       	st.w	r8[0x0],r10
80004132:	13 c9       	ld.ub	r9,r9[0x4]
80004134:	b0 c9       	st.b	r8[0x4],r9
	int i, aux, testNumber = 1, paramsSize = 5;
	cmd_frame_t cmdFrame, ansFrame;
	bool result;
	
	cmdFrame = newEmptyTestCmdFrame(testNumber, paramsSize);
80004136:	fa c7 ff f6 	sub	r7,sp,-10
8000413a:	30 5a       	mov	r10,5
8000413c:	30 1b       	mov	r11,1
8000413e:	0e 9c       	mov	r12,r7
80004140:	f0 1f 00 52 	mcall	80004288 <i2c_test_01+0x170>
80004144:	fb 15 00 10 	ld.uh	r5,sp[16]
80004148:	fb 18 00 12 	ld.uh	r8,sp[18]
8000414c:	f1 e5 11 05 	or	r5,r8,r5<<0x10
	cmdFrame.params[0] = 0x03;
80004150:	30 38       	mov	r8,3
80004152:	aa 88       	st.b	r5[0x0],r8
	cmdFrame.params[1] = 0xFF;
80004154:	3f f8       	mov	r8,-1
80004156:	aa 98       	st.b	r5[0x1],r8
	cmdFrame.params[2] = 0xEF;
80004158:	3e f8       	mov	r8,-17
8000415a:	aa a8       	st.b	r5[0x2],r8
	cmdFrame.params[3] = 0x3F;
8000415c:	33 f8       	mov	r8,63
8000415e:	aa b8       	st.b	r5[0x3],r8
	cmdFrame.params[4] = 0x23;
80004160:	32 38       	mov	r8,35
80004162:	aa c8       	st.b	r5[0x4],r8
		
	//Notifica o CC sobre a execucao do teste 01 e envia os dados auxiliares.
	sendTestCmdFrame(cmdFrame);
80004164:	ea 06 16 10 	lsr	r6,r5,0x10
80004168:	fb 56 00 10 	st.h	sp[16],r6
8000416c:	fb 55 00 12 	st.h	sp[18],r5
80004170:	20 3d       	sub	sp,12
80004172:	30 a4       	mov	r4,10
80004174:	08 9a       	mov	r10,r4
80004176:	0e 9b       	mov	r11,r7
80004178:	1a 9c       	mov	r12,sp
8000417a:	f0 1f 00 45 	mcall	8000428c <i2c_test_01+0x174>
8000417e:	f0 1f 00 45 	mcall	80004290 <i2c_test_01+0x178>
	
	print_dbg("\n\nTest command sent: ");
80004182:	4c 5b       	lddpc	r11,80004294 <i2c_test_01+0x17c>
80004184:	fc 7c 14 00 	mov	r12,-191488
80004188:	f0 1f 00 3e 	mcall	80004280 <i2c_test_01+0x168>
	printfCmd(cmdFrame);
8000418c:	fb 56 00 1c 	st.h	sp[28],r6
80004190:	fb 55 00 1e 	st.h	sp[30],r5
80004194:	20 3d       	sub	sp,12
80004196:	08 9a       	mov	r10,r4
80004198:	0e 9b       	mov	r11,r7
8000419a:	1a 9c       	mov	r12,sp
8000419c:	f0 1f 00 3c 	mcall	8000428c <i2c_test_01+0x174>
800041a0:	f0 1f 00 3e 	mcall	80004298 <i2c_test_01+0x180>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800041a4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800041a8:	e0 6a 12 00 	mov	r10,4608
800041ac:	ea 1a 00 7a 	orh	r10,0x7a
800041b0:	f0 0a 00 0a 	add	r10,r8,r10
800041b4:	2f ad       	sub	sp,-24
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800041b6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800041ba:	14 38       	cp.w	r8,r10
800041bc:	e0 88 00 08 	brls	800041cc <i2c_test_01+0xb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800041c0:	12 38       	cp.w	r8,r9
800041c2:	fe 98 ff fa 	brls	800041b6 <i2c_test_01+0x9e>
800041c6:	12 3a       	cp.w	r10,r9
800041c8:	c4 83       	brcs	80004258 <i2c_test_01+0x140>
800041ca:	cf 6b       	rjmp	800041b6 <i2c_test_01+0x9e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800041cc:	12 38       	cp.w	r8,r9
800041ce:	e0 8b 00 45 	brhi	80004258 <i2c_test_01+0x140>
800041d2:	12 3a       	cp.w	r10,r9
800041d4:	c4 23       	brcs	80004258 <i2c_test_01+0x140>
800041d6:	cf 0b       	rjmp	800041b6 <i2c_test_01+0x9e>
}

/*
 * Simples teste de envio (AVR -> CC) para verificacao do sistema de testes. (Result Pass)
 */
bool i2c_test_01()
800041d8:	9a b9       	ld.uh	r9,sp[0x6]
800041da:	9a c8       	ld.uh	r8,sp[0x8]
800041dc:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800041e0:	11 89       	ld.ub	r9,r8[0x0]
800041e2:	3f f8       	mov	r8,-1
800041e4:	f0 09 18 00 	cp.b	r9,r8
800041e8:	5f 13       	srne	r3
		if( ansFrame.params[0] == PARAM_TEST_FAIL )
			result = false;
		else
			result = true;
		
		print_dbg("\n\nTest answer received: ");
800041ea:	4a db       	lddpc	r11,8000429c <i2c_test_01+0x184>
800041ec:	fc 7c 14 00 	mov	r12,-191488
800041f0:	f0 1f 00 24 	mcall	80004280 <i2c_test_01+0x168>
		printfCmd(ansFrame);
800041f4:	20 3d       	sub	sp,12
800041f6:	fa c7 ff f4 	sub	r7,sp,-12
800041fa:	ee e8 00 00 	ld.d	r8,r7[0]
800041fe:	fa e9 00 00 	st.d	sp[0],r8
80004202:	ef 38 00 08 	ld.ub	r8,r7[8]
80004206:	fb 68 00 08 	st.b	sp[8],r8
8000420a:	ef 38 00 09 	ld.ub	r8,r7[9]
8000420e:	fb 68 00 09 	st.b	sp[9],r8
80004212:	f0 1f 00 22 	mcall	80004298 <i2c_test_01+0x180>
		freeCmdFrame(ansFrame);
80004216:	20 3d       	sub	sp,12
80004218:	ee e8 00 00 	ld.d	r8,r7[0]
8000421c:	fa e9 00 00 	st.d	sp[0],r8
80004220:	ef 38 00 08 	ld.ub	r8,r7[8]
80004224:	fb 68 00 08 	st.b	sp[8],r8
80004228:	ef 38 00 09 	ld.ub	r8,r7[9]
8000422c:	fb 68 00 09 	st.b	sp[9],r8
80004230:	f0 1f 00 1c 	mcall	800042a0 <i2c_test_01+0x188>
80004234:	2f ad       	sub	sp,-24
	}
	
	if(result == true)
80004236:	58 03       	cp.w	r3,0
80004238:	c0 70       	breq	80004246 <i2c_test_01+0x12e>
		print_dbg( "\n\nPASS" );
8000423a:	49 bb       	lddpc	r11,800042a4 <i2c_test_01+0x18c>
8000423c:	fc 7c 14 00 	mov	r12,-191488
80004240:	f0 1f 00 10 	mcall	80004280 <i2c_test_01+0x168>
80004244:	c0 68       	rjmp	80004250 <i2c_test_01+0x138>
	else
		print_dbg( "\n\nFAIL" );
80004246:	49 9b       	lddpc	r11,800042a8 <i2c_test_01+0x190>
80004248:	fc 7c 14 00 	mov	r12,-191488
8000424c:	f0 1f 00 0d 	mcall	80004280 <i2c_test_01+0x168>
	
	return result;
}
80004250:	06 9c       	mov	r12,r3
80004252:	2f 9d       	sub	sp,-28
80004254:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	print_dbg("\n\nTest command sent: ");
	printfCmd(cmdFrame);

	//Espera o CC se preparar para o teste.
	delay_ms(CC_PREPARE_TO_TEST_DELAY);
	twim_write( TWI_MASTER, sendBuffer, paramsSize, CUBE_COMPUTER_ADDRESS, false );
80004258:	30 08       	mov	r8,0
8000425a:	30 59       	mov	r9,5
8000425c:	12 9a       	mov	r10,r9
8000425e:	fa cb ff ec 	sub	r11,sp,-20
80004262:	fe 7c 38 00 	mov	r12,-51200
80004266:	f0 1f 00 12 	mcall	800042ac <i2c_test_01+0x194>
	
	ansFrame = rcvTestCmdAnswer();
8000426a:	1a 9c       	mov	r12,sp
8000426c:	f0 1f 00 11 	mcall	800042b0 <i2c_test_01+0x198>
	if(ansFrame.cmdCode != 0)
80004270:	9a 89       	ld.uh	r9,sp[0x0]
80004272:	30 08       	mov	r8,0
80004274:	f0 09 19 00 	cp.h	r9,r8
80004278:	cb 01       	brne	800041d8 <i2c_test_01+0xc0>
8000427a:	cd eb       	rjmp	80004236 <i2c_test_01+0x11e>
8000427c:	80 00       	ld.sh	r0,r0[0x0]
8000427e:	aa d8       	st.b	r5[0x5],r8
80004280:	80 00       	ld.sh	r0,r0[0x0]
80004282:	4b c0       	lddpc	r0,80004370 <manage_command+0x1c>
80004284:	80 00       	ld.sh	r0,r0[0x0]
80004286:	aa 08       	st.h	r5[0x0],r8
80004288:	80 00       	ld.sh	r0,r0[0x0]
8000428a:	45 2c       	lddsp	r12,sp[0x148]
8000428c:	80 00       	ld.sh	r0,r0[0x0]
8000428e:	4e 24       	lddpc	r4,80004414 <start_terminal+0x38>
80004290:	80 00       	ld.sh	r0,r0[0x0]
80004292:	44 7c       	lddsp	r12,sp[0x11c]
80004294:	80 00       	ld.sh	r0,r0[0x0]
80004296:	aa 94       	st.b	r5[0x1],r4
80004298:	80 00       	ld.sh	r0,r0[0x0]
8000429a:	47 34       	lddsp	r4,sp[0x1cc]
8000429c:	80 00       	ld.sh	r0,r0[0x0]
8000429e:	aa ac       	st.b	r5[0x2],r12
800042a0:	80 00       	ld.sh	r0,r0[0x0]
800042a2:	45 0c       	lddsp	r12,sp[0x140]
800042a4:	80 00       	ld.sh	r0,r0[0x0]
800042a6:	aa c8       	st.b	r5[0x4],r8
800042a8:	80 00       	ld.sh	r0,r0[0x0]
800042aa:	aa d0       	st.b	r5[0x5],r0
800042ac:	80 00       	ld.sh	r0,r0[0x0]
800042ae:	21 78       	sub	r8,23
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	45 c4       	lddsp	r4,sp[0x170]

800042b4 <i2c_test_all>:
	
	gpio_tgl_gpio_pin(ITASAT_LED5);
}

void i2c_test_all()
{
800042b4:	d4 01       	pushm	lr
	i2c_test_01();
800042b6:	f0 1f 00 03 	mcall	800042c0 <i2c_test_all+0xc>
	i2c_test_02();
800042ba:	f0 1f 00 03 	mcall	800042c4 <i2c_test_all+0x10>
}
800042be:	d8 02       	popm	pc
800042c0:	80 00       	ld.sh	r0,r0[0x0]
800042c2:	41 18       	lddsp	r8,sp[0x44]
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	3f 7c       	mov	r12,-9

800042c8 <StopFunction>:
 * verificacao executa um comando toggle em um determino LED. Apos as verificacoes das flags, o programa "reseta" as mesmas para que sejam usadas na proxima transmissao.
 *
 * \return \ref void.
 */
void StopFunction()
{
800042c8:	d4 01       	pushm	lr
	const char* texto;
	
	gpio_tgl_gpio_pin(ITASAT_LED5);
800042ca:	30 dc       	mov	r12,13
800042cc:	f0 1f 00 02 	mcall	800042d4 <StopFunction+0xc>
}
800042d0:	d8 02       	popm	pc
800042d2:	00 00       	add	r0,r0
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	49 be       	lddpc	lr,80004340 <initI2CTestsInterface+0x44>

800042d8 <TxFunction>:
 * e envia o byte que ela retorna para ao Master. A funcao utiliza a flag \ref SentBytesCount para enviar o byte correto.
 *
 * \return Byte a ser enviado ao Master.
 */
uint8_t TxFunction()
{
800042d8:	d4 01       	pushm	lr
	const char* texto;
	
	gpio_tgl_gpio_pin(ITASAT_LED6);
800042da:	30 ec       	mov	r12,14
800042dc:	f0 1f 00 03 	mcall	800042e8 <TxFunction+0x10>
	
	return 0xaa;
}
800042e0:	e0 6c 00 aa 	mov	r12,170
800042e4:	d8 02       	popm	pc
800042e6:	00 00       	add	r0,r0
800042e8:	80 00       	ld.sh	r0,r0[0x0]
800042ea:	49 be       	lddpc	lr,80004354 <manage_command>

800042ec <RxFunction>:
 * \param ReceivedData Byte recebido na comunicacao
 *
 * \return \ref void.
 */
void RxFunction( uint8_t ReceivedData )
{
800042ec:	d4 01       	pushm	lr
	char* texto;
	gpio_tgl_gpio_pin(ITASAT_LED7);
800042ee:	30 fc       	mov	r12,15
800042f0:	f0 1f 00 02 	mcall	800042f8 <RxFunction+0xc>
	
// 	sprintf( texto, "\nByte %d recebido: 0x%x", bytes_count, ReceivedData);
// 	usart_write_line(DBG_UART, texto);
}
800042f4:	d8 02       	popm	pc
800042f6:	00 00       	add	r0,r0
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	49 be       	lddpc	lr,80004364 <manage_command+0x10>

800042fc <initI2CTestsInterface>:
	.tx = &TxFunction,
	.stop = &StopFunction
};

void initI2CTestsInterface()
{
800042fc:	d4 01       	pushm	lr
	gpio_enable_module_pin( TWIS0_1_TWD_PIN, TWIS0_1_TWD_FUNCTION );
800042fe:	30 0b       	mov	r11,0
80004300:	34 2c       	mov	r12,66
80004302:	f0 1f 00 0e 	mcall	80004338 <initI2CTestsInterface+0x3c>
	gpio_enable_module_pin( TWIS0_1_TWCK_PIN, TWIS0_1_TWCK_FUNCTION );
80004306:	30 0b       	mov	r11,0
80004308:	34 3c       	mov	r12,67
8000430a:	f0 1f 00 0c 	mcall	80004338 <initI2CTestsInterface+0x3c>
	
	if( STATUS_OK == twis_slave_init( TWI_SLAVE, &TWIS_OPTIONS, &TWIS_FUNCTIONS ))
8000430e:	48 ca       	lddpc	r10,8000433c <initI2CTestsInterface+0x40>
80004310:	48 cb       	lddpc	r11,80004340 <initI2CTestsInterface+0x44>
80004312:	fe 7c 40 00 	mov	r12,-49152
80004316:	f0 1f 00 0c 	mcall	80004344 <initI2CTestsInterface+0x48>
8000431a:	c0 41       	brne	80004322 <initI2CTestsInterface+0x26>
		gpio_set_pin_low( ITASAT_LED2 );
8000431c:	30 ac       	mov	r12,10
8000431e:	f0 1f 00 0b 	mcall	80004348 <initI2CTestsInterface+0x4c>

	if( STATUS_OK == twim_master_init( TWI_MASTER, &TWIM_OPTIONS ))
80004322:	48 bb       	lddpc	r11,8000434c <initI2CTestsInterface+0x50>
80004324:	fe 7c 38 00 	mov	r12,-51200
80004328:	f0 1f 00 0a 	mcall	80004350 <initI2CTestsInterface+0x54>
8000432c:	c0 41       	brne	80004334 <initI2CTestsInterface+0x38>
		gpio_set_pin_low( ITASAT_LED3 );
8000432e:	30 bc       	mov	r12,11
80004330:	f0 1f 00 06 	mcall	80004348 <initI2CTestsInterface+0x4c>
80004334:	d8 02       	popm	pc
80004336:	00 00       	add	r0,r0
80004338:	80 00       	ld.sh	r0,r0[0x0]
8000433a:	47 e4       	lddsp	r4,sp[0x1f8]
8000433c:	80 00       	ld.sh	r0,r0[0x0]
8000433e:	aa 1c       	st.h	r5[0x2],r12
80004340:	80 00       	ld.sh	r0,r0[0x0]
80004342:	aa 10       	st.h	r5[0x2],r0
80004344:	80 00       	ld.sh	r0,r0[0x0]
80004346:	24 0c       	sub	r12,64
80004348:	80 00       	ld.sh	r0,r0[0x0]
8000434a:	49 a8       	lddpc	r8,800043b0 <manage_command+0x5c>
8000434c:	80 00       	ld.sh	r0,r0[0x0]
8000434e:	aa 28       	st.h	r5[0x4],r8
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	22 48       	sub	r8,36

80004354 <manage_command>:
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED0 );
}

void manage_command()
{
80004354:	eb cd 40 80 	pushm	r7,lr
	char* string_aux;
	bool cmd_recognized = false;
	command_buffer[free_index] = '\0';
80004358:	49 6c       	lddpc	r12,800043b0 <manage_command+0x5c>
8000435a:	49 78       	lddpc	r8,800043b4 <manage_command+0x60>
8000435c:	70 08       	ld.w	r8,r8[0x0]
8000435e:	30 09       	mov	r9,0
80004360:	f8 08 0b 09 	st.b	r12[r8],r9
	
	if( strcmp( command_buffer, "i2c test all" ) == 0 )
80004364:	49 5b       	lddpc	r11,800043b8 <manage_command+0x64>
80004366:	f0 1f 00 16 	mcall	800043bc <manage_command+0x68>
8000436a:	c0 30       	breq	80004370 <manage_command+0x1c>
8000436c:	30 07       	mov	r7,0
8000436e:	c0 48       	rjmp	80004376 <manage_command+0x22>
	{
		i2c_test_all();
80004370:	f0 1f 00 14 	mcall	800043c0 <manage_command+0x6c>
80004374:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c test 1" ) == 0 )
80004376:	49 4b       	lddpc	r11,800043c4 <manage_command+0x70>
80004378:	48 ec       	lddpc	r12,800043b0 <manage_command+0x5c>
8000437a:	f0 1f 00 11 	mcall	800043bc <manage_command+0x68>
8000437e:	c0 41       	brne	80004386 <manage_command+0x32>
	{
		i2c_test_01();
80004380:	f0 1f 00 12 	mcall	800043c8 <manage_command+0x74>
80004384:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	if( strcmp( command_buffer, "i2c test 2" ) == 0 )
80004386:	49 2b       	lddpc	r11,800043cc <manage_command+0x78>
80004388:	48 ac       	lddpc	r12,800043b0 <manage_command+0x5c>
8000438a:	f0 1f 00 0d 	mcall	800043bc <manage_command+0x68>
8000438e:	c0 41       	brne	80004396 <manage_command+0x42>
	{
		i2c_test_02();
80004390:	f0 1f 00 10 	mcall	800043d0 <manage_command+0x7c>
80004394:	c0 88       	rjmp	800043a4 <manage_command+0x50>
		cmd_recognized = true;
	}
	
	if(!cmd_recognized)
80004396:	58 07       	cp.w	r7,0
80004398:	c0 61       	brne	800043a4 <manage_command+0x50>
		print_dbg("\n\nComando nao reconhecido!");
8000439a:	48 fb       	lddpc	r11,800043d4 <manage_command+0x80>
8000439c:	fc 7c 14 00 	mov	r12,-191488
800043a0:	f0 1f 00 0e 	mcall	800043d8 <manage_command+0x84>
	
	free_index = 0; //Simulate the reset of command_buffer
800043a4:	30 09       	mov	r9,0
800043a6:	48 48       	lddpc	r8,800043b4 <manage_command+0x60>
800043a8:	91 09       	st.w	r8[0x0],r9
}
800043aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800043ae:	00 00       	add	r0,r0
800043b0:	00 00       	add	r0,r0
800043b2:	07 28       	ld.uh	r8,r3++
800043b4:	00 00       	add	r0,r0
800043b6:	07 3c       	ld.ub	r12,r3++
800043b8:	80 00       	ld.sh	r0,r0[0x0]
800043ba:	ab 40       	asr	r0,0xa
800043bc:	80 00       	ld.sh	r0,r0[0x0]
800043be:	4f b4       	lddpc	r4,800045a8 <initTestsExecContrInterface+0x24>
800043c0:	80 00       	ld.sh	r0,r0[0x0]
800043c2:	42 b4       	lddsp	r4,sp[0xac]
800043c4:	80 00       	ld.sh	r0,r0[0x0]
800043c6:	ab 50       	asr	r0,0xb
800043c8:	80 00       	ld.sh	r0,r0[0x0]
800043ca:	41 18       	lddsp	r8,sp[0x44]
800043cc:	80 00       	ld.sh	r0,r0[0x0]
800043ce:	ab 5c       	asr	r12,0xb
800043d0:	80 00       	ld.sh	r0,r0[0x0]
800043d2:	3f 7c       	mov	r12,-9
800043d4:	80 00       	ld.sh	r0,r0[0x0]
800043d6:	ab 68       	lsl	r8,0xa
800043d8:	80 00       	ld.sh	r0,r0[0x0]
800043da:	4b c0       	lddpc	r0,800044c8 <sendTestCmdFrame+0x4c>

800043dc <start_terminal>:

void start_terminal()
{
800043dc:	d4 21       	pushm	r4-r7,lr
	int received_char;
	
	while(true)
	{
		if(free_index == 0)
800043de:	49 17       	lddpc	r7,80004420 <start_terminal+0x44>
			print_dbg("\n\n--> ");
800043e0:	49 14       	lddpc	r4,80004424 <start_terminal+0x48>
800043e2:	fc 76 14 00 	mov	r6,-191488
				break;
			case ENTER_CHAR:
				manage_command();
				break;
			default:
				command_buffer[free_index] = (char) received_char;
800043e6:	49 15       	lddpc	r5,80004428 <start_terminal+0x4c>
{
	int received_char;
	
	while(true)
	{
		if(free_index == 0)
800043e8:	6e 08       	ld.w	r8,r7[0x0]
800043ea:	58 08       	cp.w	r8,0
800043ec:	c0 51       	brne	800043f6 <start_terminal+0x1a>
			print_dbg("\n\n--> ");
800043ee:	08 9b       	mov	r11,r4
800043f0:	0c 9c       	mov	r12,r6
800043f2:	f0 1f 00 0f 	mcall	8000442c <start_terminal+0x50>
		
		received_char = usart_getchar( TERMINAL_UART );
800043f6:	0c 9c       	mov	r12,r6
800043f8:	f0 1f 00 0e 	mcall	80004430 <start_terminal+0x54>
	
		switch(received_char)
800043fc:	5b fc       	cp.w	r12,-1
800043fe:	cf 50       	breq	800043e8 <start_terminal+0xc>
80004400:	58 dc       	cp.w	r12,13
80004402:	c0 41       	brne	8000440a <start_terminal+0x2e>
		{
			case USART_FAILURE:
				//Tratar o ERRO
				break;
			case ENTER_CHAR:
				manage_command();
80004404:	f0 1f 00 0c 	mcall	80004434 <start_terminal+0x58>
				break;
80004408:	cf 0b       	rjmp	800043e8 <start_terminal+0xc>
			default:
				command_buffer[free_index] = (char) received_char;
8000440a:	6e 08       	ld.w	r8,r7[0x0]
8000440c:	ea 08 0b 0c 	st.b	r5[r8],r12
				free_index++;
80004410:	2f f8       	sub	r8,-1
80004412:	8f 08       	st.w	r7[0x0],r8
				usart_putchar( TERMINAL_UART, received_char ); //Echo in PC terminal.
80004414:	18 9b       	mov	r11,r12
80004416:	0c 9c       	mov	r12,r6
80004418:	f0 1f 00 08 	mcall	80004438 <start_terminal+0x5c>
8000441c:	ce 6b       	rjmp	800043e8 <start_terminal+0xc>
8000441e:	00 00       	add	r0,r0
80004420:	00 00       	add	r0,r0
80004422:	07 3c       	ld.ub	r12,r3++
80004424:	80 00       	ld.sh	r0,r0[0x0]
80004426:	ab 84       	lsr	r4,0xa
80004428:	00 00       	add	r0,r0
8000442a:	07 28       	ld.uh	r8,r3++
8000442c:	80 00       	ld.sh	r0,r0[0x0]
8000442e:	4b c0       	lddpc	r0,8000451c <freeCmdFrame+0x10>
80004430:	80 00       	ld.sh	r0,r0[0x0]
80004432:	4b 54       	lddpc	r4,80004504 <sendTestCmdFrame+0x88>
80004434:	80 00       	ld.sh	r0,r0[0x0]
80004436:	43 54       	lddsp	r4,sp[0xd4]
80004438:	80 00       	ld.sh	r0,r0[0x0]
8000443a:	4b 04       	lddpc	r4,800044f8 <sendTestCmdFrame+0x7c>

8000443c <initTerminalInterface>:
	.paritytype = USART_NO_PARITY,
	.stopbits = USART_1_STOPBIT
};

void initTerminalInterface()
{
8000443c:	d4 01       	pushm	lr
	gpio_enable_module_pin( USART1_1_TX_PIN, USART1_1_TX_FUNCTION );
8000443e:	30 0b       	mov	r11,0
80004440:	33 1c       	mov	r12,49
80004442:	f0 1f 00 0b 	mcall	8000446c <initTerminalInterface+0x30>
	gpio_enable_module_pin( USART1_1_RX_PIN, USART1_1_RX_FUNCTION );
80004446:	30 0b       	mov	r11,0
80004448:	33 0c       	mov	r12,48
8000444a:	f0 1f 00 09 	mcall	8000446c <initTerminalInterface+0x30>
	
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
8000444e:	e0 6a 24 00 	mov	r10,9216
80004452:	ea 1a 00 f4 	orh	r10,0xf4
80004456:	48 7b       	lddpc	r11,80004470 <initTerminalInterface+0x34>
80004458:	fc 7c 14 00 	mov	r12,-191488
8000445c:	f0 1f 00 06 	mcall	80004474 <initTerminalInterface+0x38>
80004460:	c0 41       	brne	80004468 <initTerminalInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED0 );
80004462:	30 8c       	mov	r12,8
80004464:	f0 1f 00 05 	mcall	80004478 <initTerminalInterface+0x3c>
80004468:	d8 02       	popm	pc
8000446a:	00 00       	add	r0,r0
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	47 e4       	lddsp	r4,sp[0x1f8]
80004470:	80 00       	ld.sh	r0,r0[0x0]
80004472:	ab 34       	mul	r4,r5
80004474:	80 00       	ld.sh	r0,r0[0x0]
80004476:	4c 10       	lddpc	r0,80004578 <newEmptyTestCmdFrame+0x4c>
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	49 a8       	lddpc	r8,800044e0 <sendTestCmdFrame+0x64>

8000447c <sendTestCmdFrame>:
	frame.paramSize = 0;
	frame.testNumber = 0;
}

void sendTestCmdFrame(cmd_frame_t frame)
{
8000447c:	eb cd 40 f8 	pushm	r3-r7,lr
80004480:	fa c4 ff e8 	sub	r4,sp,-24
80004484:	68 07       	ld.w	r7,r4[0x0]
80004486:	0e 96       	mov	r6,r7
80004488:	68 18       	ld.w	r8,r4[0x4]
8000448a:	f0 03 14 10 	asr	r3,r8,0x10
8000448e:	88 c5       	ld.uh	r5,r4[0x8]
80004490:	eb e8 11 05 	or	r5,r5,r8<<0x10
	int aux, i;
	cmd_frame_t anwser;
	
	/* Send cmdCode */
	aux = (frame.cmdCode>>8);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
80004494:	b1 87       	lsr	r7,0x10
80004496:	ee 0b 16 08 	lsr	r11,r7,0x8
8000449a:	fe 7c 28 00 	mov	r12,-55296
8000449e:	f0 1f 00 1b 	mcall	80004508 <sendTestCmdFrame+0x8c>
	aux = (frame.cmdCode&0x000000FF);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
800044a2:	f7 d7 c0 08 	bfextu	r11,r7,0x0,0x8
800044a6:	fe 7c 28 00 	mov	r12,-55296
800044aa:	f0 1f 00 18 	mcall	80004508 <sendTestCmdFrame+0x8c>
	
	/* Send testNumber */
	aux = (frame.testNumber>>8);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
800044ae:	5c 76       	castu.h	r6
800044b0:	ec 0b 16 08 	lsr	r11,r6,0x8
800044b4:	fe 7c 28 00 	mov	r12,-55296
800044b8:	f0 1f 00 14 	mcall	80004508 <sendTestCmdFrame+0x8c>
	aux = (frame.testNumber&0x000000FF);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
800044bc:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800044c0:	fe 7c 28 00 	mov	r12,-55296
800044c4:	f0 1f 00 11 	mcall	80004508 <sendTestCmdFrame+0x8c>
	
	/* Send paramSize */
	aux = (frame.paramSize>>8);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
800044c8:	ed d3 c0 10 	bfextu	r6,r3,0x0,0x10
800044cc:	ec 0b 16 08 	lsr	r11,r6,0x8
800044d0:	fe 7c 28 00 	mov	r12,-55296
800044d4:	f0 1f 00 0d 	mcall	80004508 <sendTestCmdFrame+0x8c>
	aux = (frame.paramSize&0x000000FF);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
800044d8:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800044dc:	fe 7c 28 00 	mov	r12,-55296
800044e0:	f0 1f 00 0a 	mcall	80004508 <sendTestCmdFrame+0x8c>
	
	/* Send params */ 
	for( i = 0; i < frame.paramSize; i++)
800044e4:	58 06       	cp.w	r6,0
800044e6:	e0 8a 00 0e 	brle	80004502 <sendTestCmdFrame+0x86>
800044ea:	30 07       	mov	r7,0
	{
		aux = frame.params[i];		
		usart_putchar( TESTS_EXEC_CTRL_UART, aux);
800044ec:	fe 74 28 00 	mov	r4,-55296
800044f0:	ea 07 07 0b 	ld.ub	r11,r5[r7]
800044f4:	08 9c       	mov	r12,r4
800044f6:	f0 1f 00 05 	mcall	80004508 <sendTestCmdFrame+0x8c>
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
	aux = (frame.paramSize&0x000000FF);
	usart_putchar( TESTS_EXEC_CTRL_UART, aux);
	
	/* Send params */ 
	for( i = 0; i < frame.paramSize; i++)
800044fa:	2f f7       	sub	r7,-1
800044fc:	0e 36       	cp.w	r6,r7
800044fe:	fe 99 ff f9 	brgt	800044f0 <sendTestCmdFrame+0x74>
80004502:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004506:	00 00       	add	r0,r0
80004508:	80 00       	ld.sh	r0,r0[0x0]
8000450a:	4b 04       	lddpc	r4,800045c8 <rcvTestCmdAnswer+0x4>

8000450c <freeCmdFrame>:
	
	return newFrame;
}

void freeCmdFrame(cmd_frame_t frame)
{
8000450c:	eb cd 40 10 	pushm	r4,lr
80004510:	fa c4 ff f8 	sub	r4,sp,-8
80004514:	68 18       	ld.w	r8,r4[0x4]
80004516:	88 cc       	ld.uh	r12,r4[0x8]
80004518:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
	if( frame.paramSize != 0 )
8000451c:	b1 88       	lsr	r8,0x10
8000451e:	c0 30       	breq	80004524 <freeCmdFrame+0x18>
		dlfree(frame.params);
80004520:	f0 1f 00 02 	mcall	80004528 <freeCmdFrame+0x1c>
80004524:	e3 cd 80 10 	ldm	sp++,r4,pc
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	2e d0       	sub	r0,-19

8000452c <newEmptyTestCmdFrame>:
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint16_t testNumber, uint16_t paramSize)
{
8000452c:	eb cd 40 e0 	pushm	r5-r7,lr
80004530:	18 97       	mov	r7,r12
80004532:	16 95       	mov	r5,r11
80004534:	14 96       	mov	r6,r10
	
	newFrame.cmdCode = 0x3C7E;
	newFrame.testNumber = testNumber;
	newFrame.paramSize = paramSize;
	
	if( paramSize != 0 )
80004536:	58 0a       	cp.w	r10,0
80004538:	c0 60       	breq	80004544 <newEmptyTestCmdFrame+0x18>
		newFrame.params = dlmalloc(paramSize);
8000453a:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
8000453e:	f0 1f 00 11 	mcall	80004580 <newEmptyTestCmdFrame+0x54>
80004542:	18 98       	mov	r8,r12
	
	return newFrame;
80004544:	f0 09 16 18 	lsr	r9,r8,0x18
80004548:	ae e9       	st.b	r7[0x6],r9
8000454a:	f0 09 16 10 	lsr	r9,r8,0x10
8000454e:	ae f9       	st.b	r7[0x7],r9
80004550:	f0 09 16 08 	lsr	r9,r8,0x8
80004554:	ef 69 00 08 	st.b	r7[8],r9
80004558:	ef 68 00 09 	st.b	r7[9],r8
8000455c:	5c 76       	castu.h	r6
8000455e:	ec 08 16 08 	lsr	r8,r6,0x8
80004562:	ae c8       	st.b	r7[0x4],r8
80004564:	ae d6       	st.b	r7[0x5],r6
80004566:	5c 75       	castu.h	r5
80004568:	ea 08 16 08 	lsr	r8,r5,0x8
8000456c:	ae a8       	st.b	r7[0x2],r8
8000456e:	ae b5       	st.b	r7[0x3],r5
80004570:	33 c8       	mov	r8,60
80004572:	ae 88       	st.b	r7[0x0],r8
80004574:	37 e8       	mov	r8,126
80004576:	ae 98       	st.b	r7[0x1],r8
}
80004578:	0e 9c       	mov	r12,r7
8000457a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000457e:	00 00       	add	r0,r0
80004580:	80 00       	ld.sh	r0,r0[0x0]
80004582:	3c 90       	mov	r0,-55

80004584 <initTestsExecContrInterface>:
		print_dbg(textAux);
	}
}

void initTestsExecContrInterface()
{
80004584:	d4 01       	pushm	lr
	gpio_enable_module_pin( USART0_1_TX_PIN, USART0_1_TX_FUNCTION );
80004586:	30 3b       	mov	r11,3
80004588:	35 0c       	mov	r12,80
8000458a:	f0 1f 00 0b 	mcall	800045b4 <initTestsExecContrInterface+0x30>
	gpio_enable_module_pin( USART0_1_RX_PIN, USART0_1_RX_FUNCTION );
8000458e:	30 3b       	mov	r11,3
80004590:	34 fc       	mov	r12,79
80004592:	f0 1f 00 09 	mcall	800045b4 <initTestsExecContrInterface+0x30>
	
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
80004596:	e0 6a 24 00 	mov	r10,9216
8000459a:	ea 1a 00 f4 	orh	r10,0xf4
8000459e:	48 7b       	lddpc	r11,800045b8 <initTestsExecContrInterface+0x34>
800045a0:	fe 7c 28 00 	mov	r12,-55296
800045a4:	f0 1f 00 06 	mcall	800045bc <initTestsExecContrInterface+0x38>
800045a8:	c0 41       	brne	800045b0 <initTestsExecContrInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED1 );
800045aa:	30 9c       	mov	r12,9
800045ac:	f0 1f 00 05 	mcall	800045c0 <initTestsExecContrInterface+0x3c>
800045b0:	d8 02       	popm	pc
800045b2:	00 00       	add	r0,r0
800045b4:	80 00       	ld.sh	r0,r0[0x0]
800045b6:	47 e4       	lddsp	r4,sp[0x1f8]
800045b8:	80 00       	ld.sh	r0,r0[0x0]
800045ba:	ab 8c       	lsr	r12,0xa
800045bc:	80 00       	ld.sh	r0,r0[0x0]
800045be:	4c 10       	lddpc	r0,800046c0 <rcvTestCmdAnswer+0xfc>
800045c0:	80 00       	ld.sh	r0,r0[0x0]
800045c2:	49 a8       	lddpc	r8,80004628 <rcvTestCmdAnswer+0x64>

800045c4 <rcvTestCmdAnswer>:
		usart_putchar( TESTS_EXEC_CTRL_UART, aux);
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
800045c4:	d4 31       	pushm	r0-r7,lr
800045c6:	20 7d       	sub	sp,28
800045c8:	18 93       	mov	r3,r12
800045ca:	30 09       	mov	r9,0
800045cc:	50 09       	stdsp	sp[0x0],r9
800045ce:	12 92       	mov	r2,r9
800045d0:	12 95       	mov	r5,r9
800045d2:	30 17       	mov	r7,1
	uint16_t c = 0, N = 0, testCaseNumber = 0;
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{		
		rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
800045d4:	fe 74 28 00 	mov	r4,-55296
			cmdAwsFrameRcv.paramSize = 0;
			cmdAwsFrameRcv.testNumber = 0;
			return cmdAwsFrameRcv;
		}

		switch( automataState )
800045d8:	30 26       	mov	r6,2
800045da:	30 30       	mov	r0,3
		usart_putchar( TESTS_EXEC_CTRL_UART, aux);
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
800045dc:	50 19       	stdsp	sp[0x4],r9
800045de:	c0 48       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>
800045e0:	30 02       	mov	r2,0
800045e2:	40 15       	lddsp	r5,sp[0x4]
800045e4:	30 17       	mov	r7,1
	uint16_t c = 0, N = 0, testCaseNumber = 0;
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{		
		rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
800045e6:	08 9c       	mov	r12,r4
800045e8:	f0 1f 00 50 	mcall	80004728 <rcvTestCmdAnswer+0x164>
		
		if(rcvByte == USART_TIMEOUT || rcvByte == USART_FAILURE)
800045ec:	5b fc       	cp.w	r12,-1
800045ee:	c1 71       	brne	8000461c <rcvTestCmdAnswer+0x58>
		{
			initTestsExecContrInterface(); /* Reinicia a interface */
800045f0:	f0 1f 00 4f 	mcall	8000472c <rcvTestCmdAnswer+0x168>
			cmdAwsFrameRcv.cmdCode = 0;
			cmdAwsFrameRcv.paramSize = 0;
			cmdAwsFrameRcv.testNumber = 0;
			return cmdAwsFrameRcv;
800045f4:	30 08       	mov	r8,0
800045f6:	e2 09 16 18 	lsr	r9,r1,0x18
800045fa:	a6 e9       	st.b	r3[0x6],r9
800045fc:	e2 09 16 10 	lsr	r9,r1,0x10
80004600:	a6 f9       	st.b	r3[0x7],r9
80004602:	e2 09 16 08 	lsr	r9,r1,0x8
80004606:	e7 69 00 08 	st.b	r3[8],r9
8000460a:	e7 61 00 09 	st.b	r3[9],r1
8000460e:	a6 a8       	st.b	r3[0x2],r8
80004610:	a6 b8       	st.b	r3[0x3],r8
80004612:	a6 c8       	st.b	r3[0x4],r8
80004614:	a6 d8       	st.b	r3[0x5],r8
80004616:	a6 88       	st.b	r3[0x0],r8
80004618:	a6 98       	st.b	r3[0x1],r8
8000461a:	c8 48       	rjmp	80004722 <rcvTestCmdAnswer+0x15e>
		}

		switch( automataState )
8000461c:	ec 07 18 00 	cp.b	r7,r6
80004620:	c1 50       	breq	8000464a <rcvTestCmdAnswer+0x86>
80004622:	e0 8b 00 07 	brhi	80004630 <rcvTestCmdAnswer+0x6c>
80004626:	30 18       	mov	r8,1
80004628:	f0 07 18 00 	cp.b	r7,r8
8000462c:	cd a1       	brne	800045e0 <rcvTestCmdAnswer+0x1c>
8000462e:	c0 98       	rjmp	80004640 <rcvTestCmdAnswer+0x7c>
80004630:	e0 07 18 00 	cp.b	r7,r0
80004634:	c1 20       	breq	80004658 <rcvTestCmdAnswer+0x94>
80004636:	30 48       	mov	r8,4
80004638:	f0 07 18 00 	cp.b	r7,r8
8000463c:	cd 21       	brne	800045e0 <rcvTestCmdAnswer+0x1c>
8000463e:	c4 58       	rjmp	800046c8 <rcvTestCmdAnswer+0x104>
		{
		case 1:
			if( rcvByte == 0xE7 )
80004640:	e0 4c 00 e7 	cp.w	r12,231
80004644:	f9 b7 00 02 	moveq	r7,2
80004648:	cc fb       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>
				automataState = 2;
			break;

		case 2:
			if( rcvByte == 0xC3 )
8000464a:	e0 4c 00 c3 	cp.w	r12,195
8000464e:	f9 b7 00 03 	moveq	r7,3
80004652:	f9 b7 01 01 	movne	r7,1
80004656:	cc 8b       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>
			else
				automataState = 1;
			break;

		case 3:
			switch( c )
80004658:	30 18       	mov	r8,1
8000465a:	f0 05 19 00 	cp.h	r5,r8
8000465e:	c1 00       	breq	8000467e <rcvTestCmdAnswer+0xba>
80004660:	c0 a3       	brcs	80004674 <rcvTestCmdAnswer+0xb0>
80004662:	30 29       	mov	r9,2
80004664:	f2 05 19 00 	cp.h	r5,r9
80004668:	c1 20       	breq	8000468c <rcvTestCmdAnswer+0xc8>
8000466a:	30 38       	mov	r8,3
8000466c:	f0 05 19 00 	cp.h	r5,r8
80004670:	cb b1       	brne	800045e6 <rcvTestCmdAnswer+0x22>
80004672:	c1 28       	rjmp	80004696 <rcvTestCmdAnswer+0xd2>
			{
			case 0:
				/* Recebendo o MSByte do testCaseNumber */
				testCaseNumber = (rcvByte<<8);
80004674:	a9 6c       	lsl	r12,0x8
80004676:	5c 8c       	casts.h	r12
80004678:	50 0c       	stdsp	sp[0x0],r12
8000467a:	30 15       	mov	r5,1
				c++;
				break;
8000467c:	cb 5b       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>

			case 1:
				/* Recebendo o LSByte do testCaseNumber */
				testCaseNumber |= rcvByte;
8000467e:	40 08       	lddsp	r8,sp[0x0]
80004680:	f1 ec 10 0c 	or	r12,r8,r12
80004684:	5c 8c       	casts.h	r12
80004686:	50 0c       	stdsp	sp[0x0],r12
80004688:	30 25       	mov	r5,2
				c++;
				break;
8000468a:	ca eb       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>

			case 2:
				/* Recebendo o MSByte do N */
				N = (rcvByte<<8);
8000468c:	a9 6c       	lsl	r12,0x8
8000468e:	e5 dc b0 10 	bfexts	r2,r12,0x0,0x10
80004692:	30 35       	mov	r5,3
				c++;
				break;
80004694:	ca 9b       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>

			case 3:
				/* Recebendo o LSByte do N e trocando de estado */
				N |= rcvByte;
80004696:	18 42       	or	r2,r12
80004698:	5c 82       	casts.h	r2
				automataState = 4;
				c = 0;
				
				/* Comando identificado, agora basta receber os parametros */
				cmdAwsFrameRcv = newEmptyTestCmdFrame( testCaseNumber, N );
8000469a:	f5 d2 c0 10 	bfextu	r10,r2,0x0,0x10
8000469e:	40 0b       	lddsp	r11,sp[0x0]
800046a0:	5c 7b       	castu.h	r11
800046a2:	fa cc ff ee 	sub	r12,sp,-18
800046a6:	f0 1f 00 23 	mcall	80004730 <rcvTestCmdAnswer+0x16c>
800046aa:	fb 11 00 18 	ld.uh	r1,sp[24]
800046ae:	fb 18 00 1a 	ld.uh	r8,sp[26]
800046b2:	f1 e1 11 01 	or	r1,r8,r1<<0x10
800046b6:	fb 09 00 14 	ld.sh	r9,sp[20]
800046ba:	50 39       	stdsp	sp[0xc],r9
800046bc:	fb 08 00 16 	ld.sh	r8,sp[22]
800046c0:	50 28       	stdsp	sp[0x8],r8
				 * problemas, pois o automato identifica apenas frames com o parametro 0xE7C3.
				 */
				cmdAwsFrameRcv.cmdCode = 0xE7C3;
				
				/* Caso nao irah ser recebido nenhum parametro o programa nao pode continuar aguardando*/
				if( N == 0)
800046c2:	58 02       	cp.w	r2,0
800046c4:	c0 f0       	breq	800046e2 <rcvTestCmdAnswer+0x11e>
800046c6:	c2 b8       	rjmp	8000471c <rcvTestCmdAnswer+0x158>
				break;
			}
			break;

			case 4:
				if( c < N )
800046c8:	ea 02 19 00 	cp.h	r2,r5
800046cc:	e0 88 00 08 	brls	800046dc <rcvTestCmdAnswer+0x118>
				{
					cmdAwsFrameRcv.params[c] = rcvByte;
800046d0:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
800046d4:	e2 08 0b 0c 	st.b	r1[r8],r12
					c++;
800046d8:	2f f5       	sub	r5,-1
800046da:	5c 85       	casts.h	r5
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == N )
800046dc:	e4 05 19 00 	cp.h	r5,r2
800046e0:	c8 31       	brne	800045e6 <rcvTestCmdAnswer+0x22>
				N = 0;
				break;
		}
	}
	
	return cmdAwsFrameRcv;
800046e2:	e2 08 16 18 	lsr	r8,r1,0x18
800046e6:	a6 e8       	st.b	r3[0x6],r8
800046e8:	e2 08 16 10 	lsr	r8,r1,0x10
800046ec:	a6 f8       	st.b	r3[0x7],r8
800046ee:	e2 08 16 08 	lsr	r8,r1,0x8
800046f2:	e7 68 00 08 	st.b	r3[8],r8
800046f6:	e7 61 00 09 	st.b	r3[9],r1
800046fa:	40 38       	lddsp	r8,sp[0xc]
800046fc:	5c 78       	castu.h	r8
800046fe:	f0 09 16 08 	lsr	r9,r8,0x8
80004702:	a6 a9       	st.b	r3[0x2],r9
80004704:	a6 b8       	st.b	r3[0x3],r8
80004706:	40 28       	lddsp	r8,sp[0x8]
80004708:	5c 78       	castu.h	r8
8000470a:	f0 09 16 08 	lsr	r9,r8,0x8
8000470e:	a6 c9       	st.b	r3[0x4],r9
80004710:	a6 d8       	st.b	r3[0x5],r8
80004712:	3e 78       	mov	r8,-25
80004714:	a6 88       	st.b	r3[0x0],r8
80004716:	3c 38       	mov	r8,-61
80004718:	a6 98       	st.b	r3[0x1],r8
8000471a:	c0 48       	rjmp	80004722 <rcvTestCmdAnswer+0x15e>
8000471c:	30 05       	mov	r5,0
8000471e:	30 47       	mov	r7,4
80004720:	c6 3b       	rjmp	800045e6 <rcvTestCmdAnswer+0x22>
80004722:	06 9c       	mov	r12,r3
80004724:	2f 9d       	sub	sp,-28
80004726:	d8 32       	popm	r0-r7,pc
80004728:	80 00       	ld.sh	r0,r0[0x0]
8000472a:	4b 80       	lddpc	r0,80004808 <gpio_enable_module_pin+0x24>
8000472c:	80 00       	ld.sh	r0,r0[0x0]
8000472e:	45 84       	lddsp	r4,sp[0x160]
80004730:	80 00       	ld.sh	r0,r0[0x0]
80004732:	45 2c       	lddsp	r12,sp[0x148]

80004734 <printfCmd>:
	.paritytype = USART_NO_PARITY,
	.stopbits = USART_1_STOPBIT
};

void printfCmd(cmd_frame_t frame)
{
80004734:	eb cd 40 fc 	pushm	r2-r7,lr
80004738:	fa c4 ff e4 	sub	r4,sp,-28
8000473c:	68 15       	ld.w	r5,r4[0x4]
8000473e:	88 c3       	ld.uh	r3,r4[0x8]
80004740:	e7 e5 11 03 	or	r3,r3,r5<<0x10
	int i;
	char* textAux;

	sprintf(textAux, "\nCmd code: 0x%x\nParam Size: %d\nTest Number: %d\nParams:", frame.cmdCode, frame.paramSize, frame.testNumber);
80004744:	b1 85       	lsr	r5,0x10
80004746:	68 08       	ld.w	r8,r4[0x0]
80004748:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000474c:	1a d9       	st.w	--sp,r9
8000474e:	1a d5       	st.w	--sp,r5
80004750:	b1 88       	lsr	r8,0x10
80004752:	1a d8       	st.w	--sp,r8
80004754:	49 3b       	lddpc	r11,800047a0 <printfCmd+0x6c>
80004756:	30 06       	mov	r6,0
80004758:	0c 9c       	mov	r12,r6
8000475a:	f0 1f 00 13 	mcall	800047a4 <printfCmd+0x70>
	print_dbg(textAux);
8000475e:	0c 9b       	mov	r11,r6
80004760:	fc 7c 14 00 	mov	r12,-191488
80004764:	f0 1f 00 11 	mcall	800047a8 <printfCmd+0x74>

	for( i = 0; i < frame.paramSize; i++)
80004768:	2f dd       	sub	sp,-12
8000476a:	58 05       	cp.w	r5,0
8000476c:	e0 8a 00 17 	brle	8000479a <printfCmd+0x66>
80004770:	0c 97       	mov	r7,r6
	{
		sprintf(textAux, " 0x%x ", frame.params[i]);
80004772:	48 f4       	lddpc	r4,800047ac <printfCmd+0x78>
		print_dbg(textAux);
80004774:	fc 72 14 00 	mov	r2,-191488
	sprintf(textAux, "\nCmd code: 0x%x\nParam Size: %d\nTest Number: %d\nParams:", frame.cmdCode, frame.paramSize, frame.testNumber);
	print_dbg(textAux);

	for( i = 0; i < frame.paramSize; i++)
	{
		sprintf(textAux, " 0x%x ", frame.params[i]);
80004778:	e6 07 07 08 	ld.ub	r8,r3[r7]
8000477c:	1a d8       	st.w	--sp,r8
8000477e:	08 9b       	mov	r11,r4
80004780:	30 06       	mov	r6,0
80004782:	0c 9c       	mov	r12,r6
80004784:	f0 1f 00 08 	mcall	800047a4 <printfCmd+0x70>
		print_dbg(textAux);
80004788:	0c 9b       	mov	r11,r6
8000478a:	04 9c       	mov	r12,r2
8000478c:	f0 1f 00 07 	mcall	800047a8 <printfCmd+0x74>
	char* textAux;

	sprintf(textAux, "\nCmd code: 0x%x\nParam Size: %d\nTest Number: %d\nParams:", frame.cmdCode, frame.paramSize, frame.testNumber);
	print_dbg(textAux);

	for( i = 0; i < frame.paramSize; i++)
80004790:	2f f7       	sub	r7,-1
80004792:	2f fd       	sub	sp,-4
80004794:	0e 35       	cp.w	r5,r7
80004796:	fe 99 ff f1 	brgt	80004778 <printfCmd+0x44>
8000479a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000479e:	00 00       	add	r0,r0
800047a0:	80 00       	ld.sh	r0,r0[0x0]
800047a2:	ab 98       	lsr	r8,0xb
800047a4:	80 00       	ld.sh	r0,r0[0x0]
800047a6:	4f 7c       	lddpc	r12,80004980 <gpio_configure_pin+0x108>
800047a8:	80 00       	ld.sh	r0,r0[0x0]
800047aa:	4b c0       	lddpc	r0,80004898 <gpio_configure_pin+0x20>
800047ac:	80 00       	ld.sh	r0,r0[0x0]
800047ae:	ab d0       	cbr	r0,0xb

800047b0 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800047b0:	fe 68 00 00 	mov	r8,-131072
800047b4:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800047b6:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800047ba:	91 09       	st.w	r8[0x0],r9
}
800047bc:	5e fc       	retal	r12
800047be:	d7 03       	nop

800047c0 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800047c0:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800047c2:	e0 68 8a 3f 	mov	r8,35391
800047c6:	ea 18 01 f7 	orh	r8,0x1f7
800047ca:	10 3c       	cp.w	r12,r8
800047cc:	e0 88 00 06 	brls	800047d8 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800047d0:	30 1c       	mov	r12,1
800047d2:	f0 1f 00 04 	mcall	800047e0 <flashc_set_bus_freq+0x20>
800047d6:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800047d8:	30 0c       	mov	r12,0
800047da:	f0 1f 00 02 	mcall	800047e0 <flashc_set_bus_freq+0x20>
800047de:	d8 02       	popm	pc
800047e0:	80 00       	ld.sh	r0,r0[0x0]
800047e2:	47 b0       	lddsp	r0,sp[0x1ec]

800047e4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800047e4:	f8 08 16 05 	lsr	r8,r12,0x5
800047e8:	a9 78       	lsl	r8,0x9
800047ea:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
800047ee:	58 7b       	cp.w	r11,7
800047f0:	e0 8b 00 05 	brhi	800047fa <gpio_enable_module_pin+0x16>
800047f4:	4a 09       	lddpc	r9,80004874 <gpio_enable_module_pin+0x90>
800047f6:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
800047fa:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800047fc:	30 19       	mov	r9,1
800047fe:	f2 0c 09 49 	lsl	r9,r9,r12
80004802:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004804:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004806:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004808:	c3 18       	rjmp	8000486a <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000480a:	30 19       	mov	r9,1
8000480c:	f2 0c 09 49 	lsl	r9,r9,r12
80004810:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004812:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004814:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004816:	c2 a8       	rjmp	8000486a <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004818:	30 19       	mov	r9,1
8000481a:	f2 0c 09 49 	lsl	r9,r9,r12
8000481e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004820:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004822:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004824:	c2 38       	rjmp	8000486a <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004826:	30 19       	mov	r9,1
80004828:	f2 0c 09 49 	lsl	r9,r9,r12
8000482c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000482e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004830:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004832:	c1 c8       	rjmp	8000486a <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004834:	30 19       	mov	r9,1
80004836:	f2 0c 09 49 	lsl	r9,r9,r12
8000483a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000483c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000483e:	91 d9       	st.w	r8[0x34],r9
		break;
80004840:	c1 58       	rjmp	8000486a <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004842:	30 19       	mov	r9,1
80004844:	f2 0c 09 49 	lsl	r9,r9,r12
80004848:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000484a:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000484c:	91 d9       	st.w	r8[0x34],r9
		break;
8000484e:	c0 e8       	rjmp	8000486a <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004850:	30 19       	mov	r9,1
80004852:	f2 0c 09 49 	lsl	r9,r9,r12
80004856:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004858:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000485a:	91 d9       	st.w	r8[0x34],r9
		break;
8000485c:	c0 78       	rjmp	8000486a <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000485e:	30 19       	mov	r9,1
80004860:	f2 0c 09 49 	lsl	r9,r9,r12
80004864:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004866:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80004868:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000486a:	30 19       	mov	r9,1
8000486c:	f2 0c 09 4c 	lsl	r12,r9,r12
80004870:	91 2c       	st.w	r8[0x8],r12
80004872:	5e fd       	retal	0
80004874:	80 00       	ld.sh	r0,r0[0x0]
80004876:	ab d8       	cbr	r8,0xb

80004878 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004878:	f8 08 16 05 	lsr	r8,r12,0x5
8000487c:	a9 78       	lsl	r8,0x9
8000487e:	e0 28 e0 00 	sub	r8,57344

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80004882:	16 99       	mov	r9,r11
80004884:	e2 19 00 08 	andl	r9,0x8,COH
80004888:	c0 70       	breq	80004896 <gpio_configure_pin+0x1e>
		gpio_port->pders = 1 << (pin & 0x1F);
8000488a:	30 19       	mov	r9,1
8000488c:	f2 0c 09 49 	lsl	r9,r9,r12
80004890:	f1 49 00 84 	st.w	r8[132],r9
80004894:	c0 68       	rjmp	800048a0 <gpio_configure_pin+0x28>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80004896:	30 19       	mov	r9,1
80004898:	f2 0c 09 49 	lsl	r9,r9,r12
8000489c:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
800048a0:	16 99       	mov	r9,r11
800048a2:	e2 19 00 04 	andl	r9,0x4,COH
800048a6:	c0 70       	breq	800048b4 <gpio_configure_pin+0x3c>
		gpio_port->puers = 1 << (pin & 0x1F);
800048a8:	30 19       	mov	r9,1
800048aa:	f2 0c 09 49 	lsl	r9,r9,r12
800048ae:	f1 49 00 74 	st.w	r8[116],r9
800048b2:	c0 68       	rjmp	800048be <gpio_configure_pin+0x46>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800048b4:	30 19       	mov	r9,1
800048b6:	f2 0c 09 49 	lsl	r9,r9,r12
800048ba:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
800048be:	16 99       	mov	r9,r11
800048c0:	e2 19 00 40 	andl	r9,0x40,COH
800048c4:	c0 70       	breq	800048d2 <gpio_configure_pin+0x5a>
		gpio_port->odmers = 1 << (pin & 0x1F);
800048c6:	30 19       	mov	r9,1
800048c8:	f2 0c 09 49 	lsl	r9,r9,r12
800048cc:	f1 49 00 e4 	st.w	r8[228],r9
800048d0:	c0 68       	rjmp	800048dc <gpio_configure_pin+0x64>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
800048d2:	30 19       	mov	r9,1
800048d4:	f2 0c 09 49 	lsl	r9,r9,r12
800048d8:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
800048dc:	16 99       	mov	r9,r11
800048de:	e2 19 00 10 	andl	r9,0x10,COH
800048e2:	c0 70       	breq	800048f0 <gpio_configure_pin+0x78>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
800048e4:	30 19       	mov	r9,1
800048e6:	f2 0c 09 49 	lsl	r9,r9,r12
800048ea:	f1 49 01 04 	st.w	r8[260],r9
800048ee:	c0 68       	rjmp	800048fa <gpio_configure_pin+0x82>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
800048f0:	30 19       	mov	r9,1
800048f2:	f2 0c 09 49 	lsl	r9,r9,r12
800048f6:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
800048fa:	16 99       	mov	r9,r11
800048fc:	e2 19 00 20 	andl	r9,0x20,COH
80004900:	c0 70       	breq	8000490e <gpio_configure_pin+0x96>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80004902:	30 19       	mov	r9,1
80004904:	f2 0c 09 49 	lsl	r9,r9,r12
80004908:	f1 49 01 14 	st.w	r8[276],r9
8000490c:	c0 68       	rjmp	80004918 <gpio_configure_pin+0xa0>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
8000490e:	30 19       	mov	r9,1
80004910:	f2 0c 09 49 	lsl	r9,r9,r12
80004914:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004918:	16 99       	mov	r9,r11
8000491a:	e2 19 00 80 	andl	r9,0x80,COH
8000491e:	c2 40       	breq	80004966 <gpio_configure_pin+0xee>
		if (flags & GPIO_BOTHEDGES) {
80004920:	16 99       	mov	r9,r11
80004922:	e2 19 01 80 	andl	r9,0x180,COH
80004926:	c0 90       	breq	80004938 <gpio_configure_pin+0xc0>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004928:	30 19       	mov	r9,1
8000492a:	f2 0c 09 49 	lsl	r9,r9,r12
8000492e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004932:	f1 49 00 b8 	st.w	r8[184],r9
80004936:	c1 88       	rjmp	80004966 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_RISING) {
80004938:	16 99       	mov	r9,r11
8000493a:	e2 19 02 80 	andl	r9,0x280,COH
8000493e:	c0 90       	breq	80004950 <gpio_configure_pin+0xd8>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80004940:	30 19       	mov	r9,1
80004942:	f2 0c 09 49 	lsl	r9,r9,r12
80004946:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000494a:	f1 49 00 b8 	st.w	r8[184],r9
8000494e:	c0 c8       	rjmp	80004966 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_FALLING) {
80004950:	16 99       	mov	r9,r11
80004952:	e2 19 03 80 	andl	r9,0x380,COH
80004956:	c0 80       	breq	80004966 <gpio_configure_pin+0xee>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004958:	30 19       	mov	r9,1
8000495a:	f2 0c 09 49 	lsl	r9,r9,r12
8000495e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004962:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004966:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000496a:	c1 50       	breq	80004994 <gpio_configure_pin+0x11c>
		if (flags & GPIO_INIT_HIGH) {
8000496c:	e2 1b 00 02 	andl	r11,0x2,COH
80004970:	c0 70       	breq	8000497e <gpio_configure_pin+0x106>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004972:	30 19       	mov	r9,1
80004974:	f2 0c 09 49 	lsl	r9,r9,r12
80004978:	f1 49 00 54 	st.w	r8[84],r9
8000497c:	c0 68       	rjmp	80004988 <gpio_configure_pin+0x110>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000497e:	30 19       	mov	r9,1
80004980:	f2 0c 09 49 	lsl	r9,r9,r12
80004984:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004988:	30 19       	mov	r9,1
8000498a:	f2 0c 09 49 	lsl	r9,r9,r12
8000498e:	f1 49 00 44 	st.w	r8[68],r9
80004992:	c0 68       	rjmp	8000499e <gpio_configure_pin+0x126>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004994:	30 19       	mov	r9,1
80004996:	f2 0c 09 49 	lsl	r9,r9,r12
8000499a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000499e:	30 19       	mov	r9,1
800049a0:	f2 0c 09 4c 	lsl	r12,r9,r12
800049a4:	91 1c       	st.w	r8[0x4],r12
}
800049a6:	5e fc       	retal	r12

800049a8 <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800049a8:	f8 08 16 05 	lsr	r8,r12,0x5
800049ac:	a9 78       	lsl	r8,0x9
800049ae:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800049b2:	30 19       	mov	r9,1
800049b4:	f2 0c 09 4c 	lsl	r12,r9,r12
800049b8:	f1 4c 00 58 	st.w	r8[88],r12
}
800049bc:	5e fc       	retal	r12

800049be <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800049be:	f8 08 16 05 	lsr	r8,r12,0x5
800049c2:	a9 78       	lsl	r8,0x9
800049c4:	e0 28 e0 00 	sub	r8,57344
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800049c8:	30 19       	mov	r9,1
800049ca:	f2 0c 09 4c 	lsl	r12,r9,r12
800049ce:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800049d2:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800049d6:	91 1c       	st.w	r8[0x4],r12
}
800049d8:	5e fc       	retal	r12
800049da:	d7 03       	nop

800049dc <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800049dc:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800049e0:	49 99       	lddpc	r9,80004a44 <INTC_register_interrupt+0x68>
800049e2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800049e6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800049ea:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800049ec:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800049f0:	58 0a       	cp.w	r10,0
800049f2:	c0 91       	brne	80004a04 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800049f4:	49 59       	lddpc	r9,80004a48 <INTC_register_interrupt+0x6c>
800049f6:	49 6a       	lddpc	r10,80004a4c <INTC_register_interrupt+0x70>
800049f8:	12 1a       	sub	r10,r9
800049fa:	fe 79 00 00 	mov	r9,-65536
800049fe:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004a02:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80004a04:	58 1a       	cp.w	r10,1
80004a06:	c0 a1       	brne	80004a1a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004a08:	49 09       	lddpc	r9,80004a48 <INTC_register_interrupt+0x6c>
80004a0a:	49 2a       	lddpc	r10,80004a50 <INTC_register_interrupt+0x74>
80004a0c:	12 1a       	sub	r10,r9
80004a0e:	bf aa       	sbr	r10,0x1e
80004a10:	fe 79 00 00 	mov	r9,-65536
80004a14:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004a18:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80004a1a:	58 2a       	cp.w	r10,2
80004a1c:	c0 a1       	brne	80004a30 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004a1e:	48 b9       	lddpc	r9,80004a48 <INTC_register_interrupt+0x6c>
80004a20:	48 da       	lddpc	r10,80004a54 <INTC_register_interrupt+0x78>
80004a22:	12 1a       	sub	r10,r9
80004a24:	bf ba       	sbr	r10,0x1f
80004a26:	fe 79 00 00 	mov	r9,-65536
80004a2a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004a2e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004a30:	48 69       	lddpc	r9,80004a48 <INTC_register_interrupt+0x6c>
80004a32:	48 aa       	lddpc	r10,80004a58 <INTC_register_interrupt+0x7c>
80004a34:	12 1a       	sub	r10,r9
80004a36:	ea 1a c0 00 	orh	r10,0xc000
80004a3a:	fe 79 00 00 	mov	r9,-65536
80004a3e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004a42:	5e fc       	retal	r12
80004a44:	80 00       	ld.sh	r0,r0[0x0]
80004a46:	ab f8       	*unknown*
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	a8 00       	st.h	r4[0x0],r0
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	a9 04       	ld.d	r4,r4
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	a9 12       	ld.d	r2,--r4
80004a54:	80 00       	ld.sh	r0,r0[0x0]
80004a56:	a9 20       	st.d	r4++,r0
80004a58:	80 00       	ld.sh	r0,r0[0x0]
80004a5a:	a9 2e       	st.d	r4++,lr

80004a5c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004a5c:	fe 78 00 00 	mov	r8,-65536
80004a60:	e0 69 00 83 	mov	r9,131
80004a64:	f2 0c 01 0c 	sub	r12,r9,r12
80004a68:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004a6c:	f2 ca ff c0 	sub	r10,r9,-64
80004a70:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004a74:	58 08       	cp.w	r8,0
80004a76:	c0 21       	brne	80004a7a <_get_interrupt_handler+0x1e>
80004a78:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004a7a:	f0 08 12 00 	clz	r8,r8
80004a7e:	48 5a       	lddpc	r10,80004a90 <_get_interrupt_handler+0x34>
80004a80:	f4 09 00 39 	add	r9,r10,r9<<0x3
80004a84:	f0 08 11 1f 	rsub	r8,r8,31
80004a88:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004a8a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004a8e:	5e fc       	retal	r12
80004a90:	80 00       	ld.sh	r0,r0[0x0]
80004a92:	ab f8       	*unknown*

80004a94 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80004a94:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80004a96:	f6 08 15 04 	lsl	r8,r11,0x4
80004a9a:	14 38       	cp.w	r8,r10
80004a9c:	f9 b8 08 10 	movls	r8,16
80004aa0:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004aa4:	f0 0b 02 4b 	mul	r11,r8,r11
80004aa8:	f6 09 16 01 	lsr	r9,r11,0x1
80004aac:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80004ab0:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80004ab4:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80004ab8:	f2 cb 00 01 	sub	r11,r9,1
80004abc:	e0 4b ff fe 	cp.w	r11,65534
80004ac0:	e0 88 00 03 	brls	80004ac6 <usart_set_async_baudrate+0x32>
80004ac4:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80004ac6:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004ac8:	e8 6e 00 00 	mov	lr,524288
80004acc:	59 08       	cp.w	r8,16
80004ace:	fc 08 17 10 	movne	r8,lr
80004ad2:	f9 b8 00 00 	moveq	r8,0
80004ad6:	e4 1b ff f7 	andh	r11,0xfff7
80004ada:	e0 1b fe cf 	andl	r11,0xfecf
80004ade:	16 48       	or	r8,r11
80004ae0:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80004ae2:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80004ae6:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80004aea:	99 89       	st.w	r12[0x20],r9
80004aec:	d8 0a       	popm	pc,r12=0

80004aee <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80004aee:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80004af0:	e2 18 00 02 	andl	r8,0x2,COH
80004af4:	c0 31       	brne	80004afa <usart_write_char+0xc>
80004af6:	30 2c       	mov	r12,2
80004af8:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80004afa:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80004afe:	99 7b       	st.w	r12[0x1c],r11
80004b00:	5e fd       	retal	0
80004b02:	d7 03       	nop

80004b04 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80004b04:	eb cd 40 e0 	pushm	r5-r7,lr
80004b08:	18 96       	mov	r6,r12
80004b0a:	16 95       	mov	r5,r11
80004b0c:	e0 67 27 0f 	mov	r7,9999
80004b10:	c0 68       	rjmp	80004b1c <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80004b12:	58 07       	cp.w	r7,0
80004b14:	c0 31       	brne	80004b1a <usart_putchar+0x16>
80004b16:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80004b1a:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80004b1c:	0a 9b       	mov	r11,r5
80004b1e:	0c 9c       	mov	r12,r6
80004b20:	f0 1f 00 03 	mcall	80004b2c <usart_putchar+0x28>
80004b24:	cf 71       	brne	80004b12 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80004b26:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004b2a:	00 00       	add	r0,r0
80004b2c:	80 00       	ld.sh	r0,r0[0x0]
80004b2e:	4a ee       	lddpc	lr,80004be4 <usart_reset>

80004b30 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80004b30:	78 58       	ld.w	r8,r12[0x14]
80004b32:	e2 18 00 e0 	andl	r8,0xe0,COH
80004b36:	c0 30       	breq	80004b3c <usart_read_char+0xc>
80004b38:	30 4c       	mov	r12,4
80004b3a:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80004b3c:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80004b3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b42:	c0 31       	brne	80004b48 <usart_read_char+0x18>
80004b44:	30 3c       	mov	r12,3
80004b46:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80004b48:	78 68       	ld.w	r8,r12[0x18]
80004b4a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004b4e:	97 08       	st.w	r11[0x0],r8
80004b50:	5e fd       	retal	0
80004b52:	d7 03       	nop

80004b54 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
80004b54:	eb cd 40 c0 	pushm	r6-r7,lr
80004b58:	20 1d       	sub	sp,4
80004b5a:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80004b5c:	1a 97       	mov	r7,sp
80004b5e:	1a 9b       	mov	r11,sp
80004b60:	0c 9c       	mov	r12,r6
80004b62:	f0 1f 00 07 	mcall	80004b7c <usart_getchar+0x28>
80004b66:	58 3c       	cp.w	r12,3
80004b68:	cf b0       	breq	80004b5e <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
80004b6a:	58 4c       	cp.w	r12,4
80004b6c:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
80004b70:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80004b74:	2f fd       	sub	sp,-4
80004b76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004b7a:	00 00       	add	r0,r0
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	4b 30       	lddpc	r0,80004c48 <usart_init_rs232+0x38>

80004b80 <usart_getchar_timeout>:

int usart_getchar_timeout(volatile avr32_usart_t *usart)
{
80004b80:	eb cd 40 e0 	pushm	r5-r7,lr
80004b84:	20 1d       	sub	sp,4
80004b86:	18 96       	mov	r6,r12
80004b88:	e0 67 96 80 	mov	r7,38528
80004b8c:	ea 17 00 98 	orh	r7,0x98
	int c, ret, timeout = 10000000;

	while ( ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY) && timeout > 0)
80004b90:	1a 95       	mov	r5,sp
80004b92:	c0 28       	rjmp	80004b96 <usart_getchar_timeout+0x16>
		timeout--;
80004b94:	20 17       	sub	r7,1

int usart_getchar_timeout(volatile avr32_usart_t *usart)
{
	int c, ret, timeout = 10000000;

	while ( ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY) && timeout > 0)
80004b96:	1a 9b       	mov	r11,sp
80004b98:	0c 9c       	mov	r12,r6
80004b9a:	f0 1f 00 09 	mcall	80004bbc <usart_getchar_timeout+0x3c>
80004b9e:	58 3c       	cp.w	r12,3
80004ba0:	c0 41       	brne	80004ba8 <usart_getchar_timeout+0x28>
80004ba2:	58 07       	cp.w	r7,0
80004ba4:	cf 81       	brne	80004b94 <usart_getchar_timeout+0x14>
80004ba6:	c0 38       	rjmp	80004bac <usart_getchar_timeout+0x2c>
		timeout--;

	if (ret == USART_RX_ERROR)
80004ba8:	58 4c       	cp.w	r12,4
80004baa:	c0 50       	breq	80004bb4 <usart_getchar_timeout+0x34>
		return USART_FAILURE;

	if(timeout == 0)
80004bac:	58 07       	cp.w	r7,0
80004bae:	c0 30       	breq	80004bb4 <usart_getchar_timeout+0x34>
		return USART_TIMEOUT;

	return c;
80004bb0:	40 0c       	lddsp	r12,sp[0x0]
80004bb2:	c0 28       	rjmp	80004bb6 <usart_getchar_timeout+0x36>
80004bb4:	3f fc       	mov	r12,-1
}
80004bb6:	2f fd       	sub	sp,-4
80004bb8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004bbc:	80 00       	ld.sh	r0,r0[0x0]
80004bbe:	4b 30       	lddpc	r0,80004c88 <usart_init_rs232+0x78>

80004bc0 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80004bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80004bc4:	18 96       	mov	r6,r12
80004bc6:	16 97       	mov	r7,r11
  while (*string != '\0')
80004bc8:	17 8b       	ld.ub	r11,r11[0x0]
80004bca:	58 0b       	cp.w	r11,0
80004bcc:	c0 80       	breq	80004bdc <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80004bce:	2f f7       	sub	r7,-1
80004bd0:	0c 9c       	mov	r12,r6
80004bd2:	f0 1f 00 04 	mcall	80004be0 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80004bd6:	0f 8b       	ld.ub	r11,r7[0x0]
80004bd8:	58 0b       	cp.w	r11,0
80004bda:	cf a1       	brne	80004bce <usart_write_line+0xe>
80004bdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004be0:	80 00       	ld.sh	r0,r0[0x0]
80004be2:	4b 04       	lddpc	r4,80004ca0 <usart_init_rs232+0x90>

80004be4 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80004be4:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80004be8:	e6 18 00 01 	andh	r8,0x1,COH
80004bec:	c0 71       	brne	80004bfa <usart_reset+0x16>
80004bee:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80004bf0:	3f f8       	mov	r8,-1
80004bf2:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80004bf4:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80004bf6:	d5 03       	csrf	0x10
80004bf8:	c0 48       	rjmp	80004c00 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
80004bfa:	3f f8       	mov	r8,-1
80004bfc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80004bfe:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80004c00:	30 08       	mov	r8,0
80004c02:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80004c04:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80004c06:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80004c08:	ea 68 61 0c 	mov	r8,680204
80004c0c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80004c0e:	5e fc       	retal	r12

80004c10 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80004c10:	eb cd 40 e0 	pushm	r5-r7,lr
80004c14:	18 96       	mov	r6,r12
80004c16:	16 97       	mov	r7,r11
80004c18:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004c1a:	f0 1f 00 2f 	mcall	80004cd4 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80004c1e:	58 07       	cp.w	r7,0
80004c20:	c5 80       	breq	80004cd0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80004c22:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004c24:	30 49       	mov	r9,4
80004c26:	f2 08 18 00 	cp.b	r8,r9
80004c2a:	e0 88 00 53 	brls	80004cd0 <usart_init_rs232+0xc0>
80004c2e:	30 99       	mov	r9,9
80004c30:	f2 08 18 00 	cp.b	r8,r9
80004c34:	e0 8b 00 4e 	brhi	80004cd0 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80004c38:	0f d9       	ld.ub	r9,r7[0x5]
80004c3a:	30 78       	mov	r8,7
80004c3c:	f0 09 18 00 	cp.b	r9,r8
80004c40:	e0 8b 00 48 	brhi	80004cd0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80004c44:	8e 39       	ld.sh	r9,r7[0x6]
80004c46:	e0 68 01 01 	mov	r8,257
80004c4a:	f0 09 19 00 	cp.h	r9,r8
80004c4e:	e0 8b 00 41 	brhi	80004cd0 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80004c52:	ef 39 00 08 	ld.ub	r9,r7[8]
80004c56:	30 38       	mov	r8,3
80004c58:	f0 09 18 00 	cp.b	r9,r8
80004c5c:	e0 8b 00 3a 	brhi	80004cd0 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80004c60:	0a 9a       	mov	r10,r5
80004c62:	6e 0b       	ld.w	r11,r7[0x0]
80004c64:	0c 9c       	mov	r12,r6
80004c66:	f0 1f 00 1d 	mcall	80004cd8 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004c6a:	58 1c       	cp.w	r12,1
80004c6c:	c3 20       	breq	80004cd0 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80004c6e:	0f c8       	ld.ub	r8,r7[0x4]
80004c70:	30 99       	mov	r9,9
80004c72:	f2 08 18 00 	cp.b	r8,r9
80004c76:	c0 51       	brne	80004c80 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80004c78:	6c 18       	ld.w	r8,r6[0x4]
80004c7a:	b1 b8       	sbr	r8,0x11
80004c7c:	8d 18       	st.w	r6[0x4],r8
80004c7e:	c0 68       	rjmp	80004c8a <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80004c80:	6c 19       	ld.w	r9,r6[0x4]
80004c82:	20 58       	sub	r8,5
80004c84:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80004c88:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80004c8a:	6c 19       	ld.w	r9,r6[0x4]
80004c8c:	ef 3a 00 08 	ld.ub	r10,r7[8]
80004c90:	0f d8       	ld.ub	r8,r7[0x5]
80004c92:	a9 78       	lsl	r8,0x9
80004c94:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80004c98:	12 48       	or	r8,r9
80004c9a:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80004c9c:	8e 38       	ld.sh	r8,r7[0x6]
80004c9e:	30 29       	mov	r9,2
80004ca0:	f2 08 19 00 	cp.h	r8,r9
80004ca4:	e0 88 00 09 	brls	80004cb6 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80004ca8:	6c 18       	ld.w	r8,r6[0x4]
80004caa:	ad b8       	sbr	r8,0xd
80004cac:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80004cae:	8e b8       	ld.uh	r8,r7[0x6]
80004cb0:	20 28       	sub	r8,2
80004cb2:	8d a8       	st.w	r6[0x28],r8
80004cb4:	c0 68       	rjmp	80004cc0 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80004cb6:	6c 19       	ld.w	r9,r6[0x4]
80004cb8:	5c 78       	castu.h	r8
80004cba:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80004cbe:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80004cc0:	6c 18       	ld.w	r8,r6[0x4]
80004cc2:	e0 18 ff f0 	andl	r8,0xfff0
80004cc6:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80004cc8:	35 08       	mov	r8,80
80004cca:	8d 08       	st.w	r6[0x0],r8
80004ccc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80004cd0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004cd4:	80 00       	ld.sh	r0,r0[0x0]
80004cd6:	4b e4       	lddpc	r4,80004dcc <general_initialize+0x38>
80004cd8:	80 00       	ld.sh	r0,r0[0x0]
80004cda:	4a 94       	lddpc	r4,80004d7c <sysclk_init+0x1c>

80004cdc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80004cdc:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80004ce0:	fe c0 a4 e0 	sub	r0,pc,-23328

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80004ce4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80004ce8:	d5 53       	csrf	0x15
  cp      r0, r1
80004cea:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80004cec:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80004cf0:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80004cf2:	c0 72       	brcc	80004d00 <idata_load_loop_end>
  cp      r0, r1
80004cf4:	fe c2 99 a4 	sub	r2,pc,-26204

80004cf8 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80004cf8:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80004cfa:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80004cfc:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80004cfe:	cf d3       	brcs	80004cf8 <idata_load_loop>

80004d00 <idata_load_loop_end>:
  mov     r2, 0
80004d00:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80004d04:	e0 61 09 48 	mov	r1,2376
  cp      r0, r1
  brlo    udata_clear_loop
80004d08:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80004d0a:	c0 62       	brcc	80004d16 <udata_clear_loop_end>
80004d0c:	30 02       	mov	r2,0
80004d0e:	30 03       	mov	r3,0

80004d10 <udata_clear_loop>:
80004d10:	a1 22       	st.d	r0++,r2
80004d12:	02 30       	cp.w	r0,r1
80004d14:	cf e3       	brcs	80004d10 <udata_clear_loop>

80004d16 <udata_clear_loop_end>:
80004d16:	fe cf ff 1a 	sub	pc,pc,-230
80004d1a:	d7 03       	nop

80004d1c <osc_priv_enable_osc0>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004d1c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004d20:	d3 03       	ssrf	0x10
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
80004d22:	fe 78 08 00 	mov	r8,-63488
80004d26:	32 4a       	mov	r10,36
80004d28:	ea 1a aa 00 	orh	r10,0xaa00
80004d2c:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
80004d2e:	e0 7a 0c 07 	mov	r10,68615
80004d32:	91 9a       	st.w	r8[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004d34:	12 98       	mov	r8,r9
80004d36:	e6 18 00 01 	andh	r8,0x1,COH
80004d3a:	c0 21       	brne	80004d3e <osc_priv_enable_osc0+0x22>
      cpu_irq_enable();
80004d3c:	d5 03       	csrf	0x10
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
80004d3e:	5e fc       	retal	r12

80004d40 <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004d40:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004d44:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80004d46:	fe 78 04 00 	mov	r8,-64512
80004d4a:	fc 1a aa 00 	movh	r10,0xaa00
80004d4e:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
80004d52:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004d54:	12 98       	mov	r8,r9
80004d56:	e6 18 00 01 	andh	r8,0x1,COH
80004d5a:	c0 21       	brne	80004d5e <sysclk_set_source+0x1e>
      cpu_irq_enable();
80004d5c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80004d5e:	5e fc       	retal	r12

80004d60 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80004d60:	d4 01       	pushm	lr
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80004d62:	f0 1f 00 0a 	mcall	80004d88 <sysclk_init+0x28>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80004d66:	fe 78 08 00 	mov	r8,-63488
80004d6a:	70 59       	ld.w	r9,r8[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80004d6c:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004d70:	cf d0       	breq	80004d6a <sysclk_init+0xa>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80004d72:	e0 6c 24 00 	mov	r12,9216
80004d76:	ea 1c 00 f4 	orh	r12,0xf4
80004d7a:	f0 1f 00 05 	mcall	80004d8c <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
80004d7e:	30 1c       	mov	r12,1
80004d80:	f0 1f 00 04 	mcall	80004d90 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80004d84:	d8 02       	popm	pc
80004d86:	00 00       	add	r0,r0
80004d88:	80 00       	ld.sh	r0,r0[0x0]
80004d8a:	4d 1c       	lddpc	r12,80004ecc <memcpy+0xa8>
80004d8c:	80 00       	ld.sh	r0,r0[0x0]
80004d8e:	47 c0       	lddsp	r0,sp[0x1f0]
80004d90:	80 00       	ld.sh	r0,r0[0x0]
80004d92:	4d 40       	lddpc	r0,80004ee0 <memcpy+0xbc>

80004d94 <general_initialize>:
	while(true)
		start_terminal();
}

void general_initialize()
{
80004d94:	d4 01       	pushm	lr
	sysclk_init();
80004d96:	f0 1f 00 15 	mcall	80004de8 <general_initialize+0x54>
	delay_init(CPU_HZ);
	
	gpio_configure_pin( ITASAT_LED0, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004d9a:	30 3b       	mov	r11,3
80004d9c:	30 8c       	mov	r12,8
80004d9e:	f0 1f 00 14 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED1, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004da2:	30 3b       	mov	r11,3
80004da4:	30 9c       	mov	r12,9
80004da6:	f0 1f 00 12 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED2, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004daa:	30 3b       	mov	r11,3
80004dac:	30 ac       	mov	r12,10
80004dae:	f0 1f 00 10 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED3, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004db2:	30 3b       	mov	r11,3
80004db4:	30 bc       	mov	r12,11
80004db6:	f0 1f 00 0e 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED4, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004dba:	30 3b       	mov	r11,3
80004dbc:	30 cc       	mov	r12,12
80004dbe:	f0 1f 00 0c 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED5, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004dc2:	30 3b       	mov	r11,3
80004dc4:	30 dc       	mov	r12,13
80004dc6:	f0 1f 00 0a 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED6, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004dca:	30 3b       	mov	r11,3
80004dcc:	30 ec       	mov	r12,14
80004dce:	f0 1f 00 08 	mcall	80004dec <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED7, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80004dd2:	30 3b       	mov	r11,3
80004dd4:	30 fc       	mov	r12,15
80004dd6:	f0 1f 00 06 	mcall	80004dec <general_initialize+0x58>
	
	initTerminalInterface();
80004dda:	f0 1f 00 06 	mcall	80004df0 <general_initialize+0x5c>
	initTestsExecContrInterface();
80004dde:	f0 1f 00 06 	mcall	80004df4 <general_initialize+0x60>
	initI2CTestsInterface();
80004de2:	f0 1f 00 06 	mcall	80004df8 <general_initialize+0x64>
}
80004de6:	d8 02       	popm	pc
80004de8:	80 00       	ld.sh	r0,r0[0x0]
80004dea:	4d 60       	lddpc	r0,80004f40 <memcpy+0x11c>
80004dec:	80 00       	ld.sh	r0,r0[0x0]
80004dee:	48 78       	lddpc	r8,80004e08 <main+0xc>
80004df0:	80 00       	ld.sh	r0,r0[0x0]
80004df2:	44 3c       	lddsp	r12,sp[0x10c]
80004df4:	80 00       	ld.sh	r0,r0[0x0]
80004df6:	45 84       	lddsp	r4,sp[0x160]
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	42 fc       	lddsp	r12,sp[0xbc]

80004dfc <main>:
#include <asf.h>
#include <itasat_pins_functions_stk600.h>
#include <tcc_test_controller.h>

int main (void)
{
80004dfc:	d4 01       	pushm	lr
	general_initialize();
80004dfe:	f0 1f 00 06 	mcall	80004e14 <main+0x18>
	
	print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
80004e02:	48 6b       	lddpc	r11,80004e18 <main+0x1c>
80004e04:	fc 7c 14 00 	mov	r12,-191488
80004e08:	f0 1f 00 05 	mcall	80004e1c <main+0x20>
	
	while(true)
		start_terminal();
80004e0c:	f0 1f 00 05 	mcall	80004e20 <main+0x24>
80004e10:	cf eb       	rjmp	80004e0c <main+0x10>
80004e12:	00 00       	add	r0,r0
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	4d 94       	lddpc	r4,80004f78 <memset+0xc>
80004e18:	80 00       	ld.sh	r0,r0[0x0]
80004e1a:	ad 70       	lsl	r0,0xd
80004e1c:	80 00       	ld.sh	r0,r0[0x0]
80004e1e:	4b c0       	lddpc	r0,80004f0c <memcpy+0xe8>
80004e20:	80 00       	ld.sh	r0,r0[0x0]
80004e22:	43 dc       	lddsp	r12,sp[0xf4]

80004e24 <memcpy>:
80004e24:	58 8a       	cp.w	r10,8
80004e26:	c2 f5       	brlt	80004e84 <memcpy+0x60>
80004e28:	f9 eb 10 09 	or	r9,r12,r11
80004e2c:	e2 19 00 03 	andl	r9,0x3,COH
80004e30:	e0 81 00 97 	brne	80004f5e <memcpy+0x13a>
80004e34:	e0 4a 00 20 	cp.w	r10,32
80004e38:	c3 b4       	brge	80004eae <memcpy+0x8a>
80004e3a:	f4 08 14 02 	asr	r8,r10,0x2
80004e3e:	f0 09 11 08 	rsub	r9,r8,8
80004e42:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004e46:	76 69       	ld.w	r9,r11[0x18]
80004e48:	99 69       	st.w	r12[0x18],r9
80004e4a:	76 59       	ld.w	r9,r11[0x14]
80004e4c:	99 59       	st.w	r12[0x14],r9
80004e4e:	76 49       	ld.w	r9,r11[0x10]
80004e50:	99 49       	st.w	r12[0x10],r9
80004e52:	76 39       	ld.w	r9,r11[0xc]
80004e54:	99 39       	st.w	r12[0xc],r9
80004e56:	76 29       	ld.w	r9,r11[0x8]
80004e58:	99 29       	st.w	r12[0x8],r9
80004e5a:	76 19       	ld.w	r9,r11[0x4]
80004e5c:	99 19       	st.w	r12[0x4],r9
80004e5e:	76 09       	ld.w	r9,r11[0x0]
80004e60:	99 09       	st.w	r12[0x0],r9
80004e62:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004e66:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004e6a:	e0 1a 00 03 	andl	r10,0x3
80004e6e:	f4 0a 11 04 	rsub	r10,r10,4
80004e72:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004e76:	17 a9       	ld.ub	r9,r11[0x2]
80004e78:	b0 a9       	st.b	r8[0x2],r9
80004e7a:	17 99       	ld.ub	r9,r11[0x1]
80004e7c:	b0 99       	st.b	r8[0x1],r9
80004e7e:	17 89       	ld.ub	r9,r11[0x0]
80004e80:	b0 89       	st.b	r8[0x0],r9
80004e82:	5e fc       	retal	r12
80004e84:	f4 0a 11 09 	rsub	r10,r10,9
80004e88:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004e8c:	17 f9       	ld.ub	r9,r11[0x7]
80004e8e:	b8 f9       	st.b	r12[0x7],r9
80004e90:	17 e9       	ld.ub	r9,r11[0x6]
80004e92:	b8 e9       	st.b	r12[0x6],r9
80004e94:	17 d9       	ld.ub	r9,r11[0x5]
80004e96:	b8 d9       	st.b	r12[0x5],r9
80004e98:	17 c9       	ld.ub	r9,r11[0x4]
80004e9a:	b8 c9       	st.b	r12[0x4],r9
80004e9c:	17 b9       	ld.ub	r9,r11[0x3]
80004e9e:	b8 b9       	st.b	r12[0x3],r9
80004ea0:	17 a9       	ld.ub	r9,r11[0x2]
80004ea2:	b8 a9       	st.b	r12[0x2],r9
80004ea4:	17 99       	ld.ub	r9,r11[0x1]
80004ea6:	b8 99       	st.b	r12[0x1],r9
80004ea8:	17 89       	ld.ub	r9,r11[0x0]
80004eaa:	b8 89       	st.b	r12[0x0],r9
80004eac:	5e fc       	retal	r12
80004eae:	eb cd 40 c0 	pushm	r6-r7,lr
80004eb2:	18 99       	mov	r9,r12
80004eb4:	22 0a       	sub	r10,32
80004eb6:	b7 07       	ld.d	r6,r11++
80004eb8:	b3 26       	st.d	r9++,r6
80004eba:	b7 07       	ld.d	r6,r11++
80004ebc:	b3 26       	st.d	r9++,r6
80004ebe:	b7 07       	ld.d	r6,r11++
80004ec0:	b3 26       	st.d	r9++,r6
80004ec2:	b7 07       	ld.d	r6,r11++
80004ec4:	b3 26       	st.d	r9++,r6
80004ec6:	22 0a       	sub	r10,32
80004ec8:	cf 74       	brge	80004eb6 <memcpy+0x92>
80004eca:	2f 0a       	sub	r10,-16
80004ecc:	c0 65       	brlt	80004ed8 <memcpy+0xb4>
80004ece:	b7 07       	ld.d	r6,r11++
80004ed0:	b3 26       	st.d	r9++,r6
80004ed2:	b7 07       	ld.d	r6,r11++
80004ed4:	b3 26       	st.d	r9++,r6
80004ed6:	21 0a       	sub	r10,16
80004ed8:	5c 3a       	neg	r10
80004eda:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004ede:	d7 03       	nop
80004ee0:	d7 03       	nop
80004ee2:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004ee6:	f3 66 00 0e 	st.b	r9[14],r6
80004eea:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004eee:	f3 66 00 0d 	st.b	r9[13],r6
80004ef2:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004ef6:	f3 66 00 0c 	st.b	r9[12],r6
80004efa:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004efe:	f3 66 00 0b 	st.b	r9[11],r6
80004f02:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004f06:	f3 66 00 0a 	st.b	r9[10],r6
80004f0a:	f7 36 00 09 	ld.ub	r6,r11[9]
80004f0e:	f3 66 00 09 	st.b	r9[9],r6
80004f12:	f7 36 00 08 	ld.ub	r6,r11[8]
80004f16:	f3 66 00 08 	st.b	r9[8],r6
80004f1a:	f7 36 00 07 	ld.ub	r6,r11[7]
80004f1e:	f3 66 00 07 	st.b	r9[7],r6
80004f22:	f7 36 00 06 	ld.ub	r6,r11[6]
80004f26:	f3 66 00 06 	st.b	r9[6],r6
80004f2a:	f7 36 00 05 	ld.ub	r6,r11[5]
80004f2e:	f3 66 00 05 	st.b	r9[5],r6
80004f32:	f7 36 00 04 	ld.ub	r6,r11[4]
80004f36:	f3 66 00 04 	st.b	r9[4],r6
80004f3a:	f7 36 00 03 	ld.ub	r6,r11[3]
80004f3e:	f3 66 00 03 	st.b	r9[3],r6
80004f42:	f7 36 00 02 	ld.ub	r6,r11[2]
80004f46:	f3 66 00 02 	st.b	r9[2],r6
80004f4a:	f7 36 00 01 	ld.ub	r6,r11[1]
80004f4e:	f3 66 00 01 	st.b	r9[1],r6
80004f52:	f7 36 00 00 	ld.ub	r6,r11[0]
80004f56:	f3 66 00 00 	st.b	r9[0],r6
80004f5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004f5e:	20 1a       	sub	r10,1
80004f60:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004f64:	f8 0a 0b 09 	st.b	r12[r10],r9
80004f68:	cf b1       	brne	80004f5e <memcpy+0x13a>
80004f6a:	5e fc       	retal	r12

80004f6c <memset>:
80004f6c:	18 98       	mov	r8,r12
80004f6e:	c0 38       	rjmp	80004f74 <memset+0x8>
80004f70:	10 cb       	st.b	r8++,r11
80004f72:	20 1a       	sub	r10,1
80004f74:	58 0a       	cp.w	r10,0
80004f76:	cf d1       	brne	80004f70 <memset+0x4>
80004f78:	5e fc       	retal	r12
80004f7a:	d7 03       	nop

80004f7c <sprintf>:
80004f7c:	d4 01       	pushm	lr
80004f7e:	21 7d       	sub	sp,92
80004f80:	e0 68 ff ff 	mov	r8,65535
80004f84:	ea 18 7f ff 	orh	r8,0x7fff
80004f88:	50 58       	stdsp	sp[0x14],r8
80004f8a:	50 28       	stdsp	sp[0x8],r8
80004f8c:	e0 68 02 08 	mov	r8,520
80004f90:	ba 68       	st.h	sp[0xc],r8
80004f92:	3f f8       	mov	r8,-1
80004f94:	ba 78       	st.h	sp[0xe],r8
80004f96:	e0 68 00 f8 	mov	r8,248
80004f9a:	50 4c       	stdsp	sp[0x10],r12
80004f9c:	16 9a       	mov	r10,r11
80004f9e:	50 0c       	stdsp	sp[0x0],r12
80004fa0:	fa c9 ff a0 	sub	r9,sp,-96
80004fa4:	70 0c       	ld.w	r12,r8[0x0]
80004fa6:	1a 9b       	mov	r11,sp
80004fa8:	cf 0d       	rcall	80005388 <_vfprintf_r>
80004faa:	30 09       	mov	r9,0
80004fac:	40 08       	lddsp	r8,sp[0x0]
80004fae:	b0 89       	st.b	r8[0x0],r9
80004fb0:	2e 9d       	sub	sp,-92
80004fb2:	d8 02       	popm	pc

80004fb4 <strcmp>:
80004fb4:	f9 eb 10 0a 	or	r10,r12,r11
80004fb8:	e2 1a 00 03 	andl	r10,0x3,COH
80004fbc:	c3 41       	brne	80005024 <strcmp+0x70>
80004fbe:	78 0a       	ld.w	r10,r12[0x0]
80004fc0:	76 09       	ld.w	r9,r11[0x0]
80004fc2:	5c ea       	tnbz	r10
80004fc4:	c1 70       	breq	80004ff2 <strcmp+0x3e>
80004fc6:	12 3a       	cp.w	r10,r9
80004fc8:	c1 51       	brne	80004ff2 <strcmp+0x3e>
80004fca:	78 1a       	ld.w	r10,r12[0x4]
80004fcc:	76 19       	ld.w	r9,r11[0x4]
80004fce:	5c ea       	tnbz	r10
80004fd0:	c1 10       	breq	80004ff2 <strcmp+0x3e>
80004fd2:	12 3a       	cp.w	r10,r9
80004fd4:	c0 f1       	brne	80004ff2 <strcmp+0x3e>
80004fd6:	78 2a       	ld.w	r10,r12[0x8]
80004fd8:	76 29       	ld.w	r9,r11[0x8]
80004fda:	5c ea       	tnbz	r10
80004fdc:	c0 b0       	breq	80004ff2 <strcmp+0x3e>
80004fde:	12 3a       	cp.w	r10,r9
80004fe0:	c0 91       	brne	80004ff2 <strcmp+0x3e>
80004fe2:	78 3a       	ld.w	r10,r12[0xc]
80004fe4:	76 39       	ld.w	r9,r11[0xc]
80004fe6:	5c ea       	tnbz	r10
80004fe8:	c0 50       	breq	80004ff2 <strcmp+0x3e>
80004fea:	2f 0c       	sub	r12,-16
80004fec:	2f 0b       	sub	r11,-16
80004fee:	12 3a       	cp.w	r10,r9
80004ff0:	ce 70       	breq	80004fbe <strcmp+0xa>
80004ff2:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
80004ff6:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
80004ffa:	5e 0c       	reteq	r12
80004ffc:	16 1c       	sub	r12,r11
80004ffe:	5e 1c       	retne	r12
80005000:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
80005004:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
80005008:	5e 0c       	reteq	r12
8000500a:	16 1c       	sub	r12,r11
8000500c:	5e 1c       	retne	r12
8000500e:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
80005012:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
80005016:	5e 0c       	reteq	r12
80005018:	16 1c       	sub	r12,r11
8000501a:	5e 1c       	retne	r12
8000501c:	5c 5a       	castu.b	r10
8000501e:	5c 59       	castu.b	r9
80005020:	12 1a       	sub	r10,r9
80005022:	5e fa       	retal	r10
80005024:	17 8a       	ld.ub	r10,r11[0x0]
80005026:	19 89       	ld.ub	r9,r12[0x0]
80005028:	58 0a       	cp.w	r10,0
8000502a:	5e 09       	reteq	r9
8000502c:	14 19       	sub	r9,r10
8000502e:	5e 19       	retne	r9
80005030:	17 9a       	ld.ub	r10,r11[0x1]
80005032:	19 99       	ld.ub	r9,r12[0x1]
80005034:	58 0a       	cp.w	r10,0
80005036:	5e 09       	reteq	r9
80005038:	14 19       	sub	r9,r10
8000503a:	5e 19       	retne	r9
8000503c:	17 aa       	ld.ub	r10,r11[0x2]
8000503e:	19 a9       	ld.ub	r9,r12[0x2]
80005040:	58 0a       	cp.w	r10,0
80005042:	5e 09       	reteq	r9
80005044:	14 19       	sub	r9,r10
80005046:	5e 19       	retne	r9
80005048:	17 ba       	ld.ub	r10,r11[0x3]
8000504a:	19 b9       	ld.ub	r9,r12[0x3]
8000504c:	58 0a       	cp.w	r10,0
8000504e:	5e 09       	reteq	r9
80005050:	14 19       	sub	r9,r10
80005052:	5e 19       	retne	r9
80005054:	2f cb       	sub	r11,-4
80005056:	2f cc       	sub	r12,-4
80005058:	ce 6b       	rjmp	80005024 <strcmp+0x70>
8000505a:	d7 03       	nop

8000505c <get_arg>:
8000505c:	d4 31       	pushm	r0-r7,lr
8000505e:	20 8d       	sub	sp,32
80005060:	fa c4 ff bc 	sub	r4,sp,-68
80005064:	50 4b       	stdsp	sp[0x10],r11
80005066:	68 2e       	ld.w	lr,r4[0x8]
80005068:	50 58       	stdsp	sp[0x14],r8
8000506a:	12 96       	mov	r6,r9
8000506c:	7c 0b       	ld.w	r11,lr[0x0]
8000506e:	70 05       	ld.w	r5,r8[0x0]
80005070:	50 6e       	stdsp	sp[0x18],lr
80005072:	58 0b       	cp.w	r11,0
80005074:	f4 0b 17 00 	moveq	r11,r10
80005078:	68 03       	ld.w	r3,r4[0x0]
8000507a:	68 11       	ld.w	r1,r4[0x4]
8000507c:	40 49       	lddsp	r9,sp[0x10]
8000507e:	30 08       	mov	r8,0
80005080:	c2 69       	rjmp	800052cc <get_arg+0x270>
80005082:	2f fb       	sub	r11,-1
80005084:	32 5c       	mov	r12,37
80005086:	17 8a       	ld.ub	r10,r11[0x0]
80005088:	f8 0a 18 00 	cp.b	r10,r12
8000508c:	5f 1e       	srne	lr
8000508e:	f0 0a 18 00 	cp.b	r10,r8
80005092:	5f 1c       	srne	r12
80005094:	fd ec 00 0c 	and	r12,lr,r12
80005098:	f0 0c 18 00 	cp.b	r12,r8
8000509c:	cf 31       	brne	80005082 <get_arg+0x26>
8000509e:	58 0a       	cp.w	r10,0
800050a0:	e0 80 01 23 	breq	800052e6 <get_arg+0x28a>
800050a4:	30 0c       	mov	r12,0
800050a6:	3f fa       	mov	r10,-1
800050a8:	18 90       	mov	r0,r12
800050aa:	50 3a       	stdsp	sp[0xc],r10
800050ac:	18 94       	mov	r4,r12
800050ae:	18 92       	mov	r2,r12
800050b0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800050b4:	16 97       	mov	r7,r11
800050b6:	50 7c       	stdsp	sp[0x1c],r12
800050b8:	fe cc a0 18 	sub	r12,pc,-24552
800050bc:	0f 3a       	ld.ub	r10,r7++
800050be:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800050c2:	40 7c       	lddsp	r12,sp[0x1c]
800050c4:	1c 0c       	add	r12,lr
800050c6:	fe ce a0 ee 	sub	lr,pc,-24338
800050ca:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800050ce:	20 1e       	sub	lr,1
800050d0:	50 0e       	stdsp	sp[0x0],lr
800050d2:	fe ce a1 66 	sub	lr,pc,-24218
800050d6:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800050da:	50 7c       	stdsp	sp[0x1c],r12
800050dc:	40 0c       	lddsp	r12,sp[0x0]
800050de:	58 7c       	cp.w	r12,7
800050e0:	e0 8b 00 ef 	brhi	800052be <get_arg+0x262>
800050e4:	fe ce a3 18 	sub	lr,pc,-23784
800050e8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800050ec:	36 8b       	mov	r11,104
800050ee:	f6 0a 18 00 	cp.b	r10,r11
800050f2:	e0 80 00 e6 	breq	800052be <get_arg+0x262>
800050f6:	37 1b       	mov	r11,113
800050f8:	f6 0a 18 00 	cp.b	r10,r11
800050fc:	c0 70       	breq	8000510a <get_arg+0xae>
800050fe:	34 cb       	mov	r11,76
80005100:	f6 0a 18 00 	cp.b	r10,r11
80005104:	c0 51       	brne	8000510e <get_arg+0xb2>
80005106:	a3 b4       	sbr	r4,0x3
80005108:	cd b8       	rjmp	800052be <get_arg+0x262>
8000510a:	a5 b4       	sbr	r4,0x5
8000510c:	cd 98       	rjmp	800052be <get_arg+0x262>
8000510e:	08 9a       	mov	r10,r4
80005110:	0e 9b       	mov	r11,r7
80005112:	a5 aa       	sbr	r10,0x4
80005114:	17 3c       	ld.ub	r12,r11++
80005116:	a5 b4       	sbr	r4,0x5
80005118:	36 ce       	mov	lr,108
8000511a:	fc 0c 18 00 	cp.b	r12,lr
8000511e:	e0 80 00 d1 	breq	800052c0 <get_arg+0x264>
80005122:	14 94       	mov	r4,r10
80005124:	cc d8       	rjmp	800052be <get_arg+0x262>
80005126:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000512a:	36 7c       	mov	r12,103
8000512c:	f8 0a 18 00 	cp.b	r10,r12
80005130:	e0 8b 00 27 	brhi	8000517e <get_arg+0x122>
80005134:	36 5b       	mov	r11,101
80005136:	f6 0a 18 00 	cp.b	r10,r11
8000513a:	c4 82       	brcc	800051ca <get_arg+0x16e>
8000513c:	34 fb       	mov	r11,79
8000513e:	f6 0a 18 00 	cp.b	r10,r11
80005142:	c4 80       	breq	800051d2 <get_arg+0x176>
80005144:	e0 8b 00 0c 	brhi	8000515c <get_arg+0x100>
80005148:	34 5b       	mov	r11,69
8000514a:	f6 0a 18 00 	cp.b	r10,r11
8000514e:	c3 e0       	breq	800051ca <get_arg+0x16e>
80005150:	34 7b       	mov	r11,71
80005152:	f6 0a 18 00 	cp.b	r10,r11
80005156:	c3 a0       	breq	800051ca <get_arg+0x16e>
80005158:	34 4b       	mov	r11,68
8000515a:	c0 88       	rjmp	8000516a <get_arg+0x10e>
8000515c:	35 8b       	mov	r11,88
8000515e:	f6 0a 18 00 	cp.b	r10,r11
80005162:	c2 c0       	breq	800051ba <get_arg+0x15e>
80005164:	e0 8b 00 07 	brhi	80005172 <get_arg+0x116>
80005168:	35 5b       	mov	r11,85
8000516a:	f6 0a 18 00 	cp.b	r10,r11
8000516e:	c3 51       	brne	800051d8 <get_arg+0x17c>
80005170:	c3 18       	rjmp	800051d2 <get_arg+0x176>
80005172:	36 3b       	mov	r11,99
80005174:	f6 0a 18 00 	cp.b	r10,r11
80005178:	c2 f0       	breq	800051d6 <get_arg+0x17a>
8000517a:	36 4b       	mov	r11,100
8000517c:	c0 e8       	rjmp	80005198 <get_arg+0x13c>
8000517e:	37 0b       	mov	r11,112
80005180:	f6 0a 18 00 	cp.b	r10,r11
80005184:	c2 50       	breq	800051ce <get_arg+0x172>
80005186:	e0 8b 00 0d 	brhi	800051a0 <get_arg+0x144>
8000518a:	36 eb       	mov	r11,110
8000518c:	f6 0a 18 00 	cp.b	r10,r11
80005190:	c1 f0       	breq	800051ce <get_arg+0x172>
80005192:	e0 8b 00 14 	brhi	800051ba <get_arg+0x15e>
80005196:	36 9b       	mov	r11,105
80005198:	f6 0a 18 00 	cp.b	r10,r11
8000519c:	c1 e1       	brne	800051d8 <get_arg+0x17c>
8000519e:	c0 e8       	rjmp	800051ba <get_arg+0x15e>
800051a0:	37 5b       	mov	r11,117
800051a2:	f6 0a 18 00 	cp.b	r10,r11
800051a6:	c0 a0       	breq	800051ba <get_arg+0x15e>
800051a8:	37 8b       	mov	r11,120
800051aa:	f6 0a 18 00 	cp.b	r10,r11
800051ae:	c0 60       	breq	800051ba <get_arg+0x15e>
800051b0:	37 3b       	mov	r11,115
800051b2:	f6 0a 18 00 	cp.b	r10,r11
800051b6:	c1 11       	brne	800051d8 <get_arg+0x17c>
800051b8:	c0 b8       	rjmp	800051ce <get_arg+0x172>
800051ba:	ed b4 00 04 	bld	r4,0x4
800051be:	c0 a0       	breq	800051d2 <get_arg+0x176>
800051c0:	ed b4 00 05 	bld	r4,0x5
800051c4:	c0 91       	brne	800051d6 <get_arg+0x17a>
800051c6:	30 20       	mov	r0,2
800051c8:	c0 88       	rjmp	800051d8 <get_arg+0x17c>
800051ca:	30 40       	mov	r0,4
800051cc:	c0 68       	rjmp	800051d8 <get_arg+0x17c>
800051ce:	30 30       	mov	r0,3
800051d0:	c0 48       	rjmp	800051d8 <get_arg+0x17c>
800051d2:	30 10       	mov	r0,1
800051d4:	c0 28       	rjmp	800051d8 <get_arg+0x17c>
800051d6:	30 00       	mov	r0,0
800051d8:	40 3b       	lddsp	r11,sp[0xc]
800051da:	5b fb       	cp.w	r11,-1
800051dc:	c0 40       	breq	800051e4 <get_arg+0x188>
800051de:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800051e2:	c6 e8       	rjmp	800052be <get_arg+0x262>
800051e4:	58 60       	cp.w	r0,6
800051e6:	e0 8b 00 6c 	brhi	800052be <get_arg+0x262>
800051ea:	6c 0a       	ld.w	r10,r6[0x0]
800051ec:	ea cc ff ff 	sub	r12,r5,-1
800051f0:	fe ce a4 04 	sub	lr,pc,-23548
800051f4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800051f8:	f4 cb ff f8 	sub	r11,r10,-8
800051fc:	8d 0b       	st.w	r6[0x0],r11
800051fe:	f4 ea 00 00 	ld.d	r10,r10[0]
80005202:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005206:	c0 f8       	rjmp	80005224 <get_arg+0x1c8>
80005208:	f4 cb ff fc 	sub	r11,r10,-4
8000520c:	8d 0b       	st.w	r6[0x0],r11
8000520e:	74 0a       	ld.w	r10,r10[0x0]
80005210:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005214:	c0 88       	rjmp	80005224 <get_arg+0x1c8>
80005216:	f4 cb ff f8 	sub	r11,r10,-8
8000521a:	8d 0b       	st.w	r6[0x0],r11
8000521c:	f4 ea 00 00 	ld.d	r10,r10[0]
80005220:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005224:	0e 9b       	mov	r11,r7
80005226:	18 95       	mov	r5,r12
80005228:	c4 c8       	rjmp	800052c0 <get_arg+0x264>
8000522a:	62 0a       	ld.w	r10,r1[0x0]
8000522c:	5b fa       	cp.w	r10,-1
8000522e:	c0 a1       	brne	80005242 <get_arg+0x1e6>
80005230:	50 19       	stdsp	sp[0x4],r9
80005232:	50 28       	stdsp	sp[0x8],r8
80005234:	e0 6a 00 80 	mov	r10,128
80005238:	30 0b       	mov	r11,0
8000523a:	02 9c       	mov	r12,r1
8000523c:	c9 8e       	rcall	80004f6c <memset>
8000523e:	40 28       	lddsp	r8,sp[0x8]
80005240:	40 19       	lddsp	r9,sp[0x4]
80005242:	e4 cc 00 01 	sub	r12,r2,1
80005246:	0e 9b       	mov	r11,r7
80005248:	50 3c       	stdsp	sp[0xc],r12
8000524a:	f2 0c 0c 49 	max	r9,r9,r12
8000524e:	c3 98       	rjmp	800052c0 <get_arg+0x264>
80005250:	62 0a       	ld.w	r10,r1[0x0]
80005252:	5b fa       	cp.w	r10,-1
80005254:	c0 a1       	brne	80005268 <get_arg+0x20c>
80005256:	50 19       	stdsp	sp[0x4],r9
80005258:	50 28       	stdsp	sp[0x8],r8
8000525a:	e0 6a 00 80 	mov	r10,128
8000525e:	30 0b       	mov	r11,0
80005260:	02 9c       	mov	r12,r1
80005262:	c8 5e       	rcall	80004f6c <memset>
80005264:	40 28       	lddsp	r8,sp[0x8]
80005266:	40 19       	lddsp	r9,sp[0x4]
80005268:	20 12       	sub	r2,1
8000526a:	30 0a       	mov	r10,0
8000526c:	0e 9b       	mov	r11,r7
8000526e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80005272:	f2 02 0c 49 	max	r9,r9,r2
80005276:	c2 58       	rjmp	800052c0 <get_arg+0x264>
80005278:	16 97       	mov	r7,r11
8000527a:	6c 0a       	ld.w	r10,r6[0x0]
8000527c:	f4 cb ff fc 	sub	r11,r10,-4
80005280:	8d 0b       	st.w	r6[0x0],r11
80005282:	74 0a       	ld.w	r10,r10[0x0]
80005284:	0e 9b       	mov	r11,r7
80005286:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000528a:	2f f5       	sub	r5,-1
8000528c:	c1 a8       	rjmp	800052c0 <get_arg+0x264>
8000528e:	f4 c2 00 30 	sub	r2,r10,48
80005292:	c0 68       	rjmp	8000529e <get_arg+0x242>
80005294:	e4 02 00 22 	add	r2,r2,r2<<0x2
80005298:	2f f7       	sub	r7,-1
8000529a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000529e:	0f 8a       	ld.ub	r10,r7[0x0]
800052a0:	58 0a       	cp.w	r10,0
800052a2:	c0 e0       	breq	800052be <get_arg+0x262>
800052a4:	23 0a       	sub	r10,48
800052a6:	58 9a       	cp.w	r10,9
800052a8:	fe 98 ff f6 	brls	80005294 <get_arg+0x238>
800052ac:	c0 98       	rjmp	800052be <get_arg+0x262>
800052ae:	2f f7       	sub	r7,-1
800052b0:	0f 8a       	ld.ub	r10,r7[0x0]
800052b2:	58 0a       	cp.w	r10,0
800052b4:	c0 50       	breq	800052be <get_arg+0x262>
800052b6:	23 0a       	sub	r10,48
800052b8:	58 9a       	cp.w	r10,9
800052ba:	fe 98 ff fa 	brls	800052ae <get_arg+0x252>
800052be:	0e 9b       	mov	r11,r7
800052c0:	40 7c       	lddsp	r12,sp[0x1c]
800052c2:	30 ba       	mov	r10,11
800052c4:	f4 0c 18 00 	cp.b	r12,r10
800052c8:	fe 91 fe f4 	brne	800050b0 <get_arg+0x54>
800052cc:	40 42       	lddsp	r2,sp[0x10]
800052ce:	17 8c       	ld.ub	r12,r11[0x0]
800052d0:	0a 32       	cp.w	r2,r5
800052d2:	5f 4a       	srge	r10
800052d4:	f0 0c 18 00 	cp.b	r12,r8
800052d8:	5f 1c       	srne	r12
800052da:	f9 ea 00 0a 	and	r10,r12,r10
800052de:	f0 0a 18 00 	cp.b	r10,r8
800052e2:	fe 91 fe d1 	brne	80005084 <get_arg+0x28>
800052e6:	30 08       	mov	r8,0
800052e8:	40 4e       	lddsp	lr,sp[0x10]
800052ea:	17 8a       	ld.ub	r10,r11[0x0]
800052ec:	e2 05 00 21 	add	r1,r1,r5<<0x2
800052f0:	f0 0a 18 00 	cp.b	r10,r8
800052f4:	fc 09 17 10 	movne	r9,lr
800052f8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800052fc:	06 9e       	mov	lr,r3
800052fe:	c2 a8       	rjmp	80005352 <get_arg+0x2f6>
80005300:	62 0a       	ld.w	r10,r1[0x0]
80005302:	58 3a       	cp.w	r10,3
80005304:	c1 e0       	breq	80005340 <get_arg+0x2e4>
80005306:	e0 89 00 07 	brgt	80005314 <get_arg+0x2b8>
8000530a:	58 1a       	cp.w	r10,1
8000530c:	c1 a0       	breq	80005340 <get_arg+0x2e4>
8000530e:	58 2a       	cp.w	r10,2
80005310:	c1 81       	brne	80005340 <get_arg+0x2e4>
80005312:	c0 58       	rjmp	8000531c <get_arg+0x2c0>
80005314:	58 5a       	cp.w	r10,5
80005316:	c0 c0       	breq	8000532e <get_arg+0x2d2>
80005318:	c0 b5       	brlt	8000532e <get_arg+0x2d2>
8000531a:	c1 38       	rjmp	80005340 <get_arg+0x2e4>
8000531c:	6c 0a       	ld.w	r10,r6[0x0]
8000531e:	f4 cc ff f8 	sub	r12,r10,-8
80005322:	8d 0c       	st.w	r6[0x0],r12
80005324:	f4 e2 00 00 	ld.d	r2,r10[0]
80005328:	f0 e3 00 00 	st.d	r8[0],r2
8000532c:	c1 08       	rjmp	8000534c <get_arg+0x2f0>
8000532e:	6c 0a       	ld.w	r10,r6[0x0]
80005330:	f4 cc ff f8 	sub	r12,r10,-8
80005334:	8d 0c       	st.w	r6[0x0],r12
80005336:	f4 e2 00 00 	ld.d	r2,r10[0]
8000533a:	f0 e3 00 00 	st.d	r8[0],r2
8000533e:	c0 78       	rjmp	8000534c <get_arg+0x2f0>
80005340:	6c 0a       	ld.w	r10,r6[0x0]
80005342:	f4 cc ff fc 	sub	r12,r10,-4
80005346:	8d 0c       	st.w	r6[0x0],r12
80005348:	74 0a       	ld.w	r10,r10[0x0]
8000534a:	91 0a       	st.w	r8[0x0],r10
8000534c:	2f f5       	sub	r5,-1
8000534e:	2f 88       	sub	r8,-8
80005350:	2f c1       	sub	r1,-4
80005352:	12 35       	cp.w	r5,r9
80005354:	fe 9a ff d6 	brle	80005300 <get_arg+0x2a4>
80005358:	1c 93       	mov	r3,lr
8000535a:	40 52       	lddsp	r2,sp[0x14]
8000535c:	40 6e       	lddsp	lr,sp[0x18]
8000535e:	85 05       	st.w	r2[0x0],r5
80005360:	9d 0b       	st.w	lr[0x0],r11
80005362:	40 4b       	lddsp	r11,sp[0x10]
80005364:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80005368:	2f 8d       	sub	sp,-32
8000536a:	d8 32       	popm	r0-r7,pc

8000536c <__sprint_r>:
8000536c:	d4 21       	pushm	r4-r7,lr
8000536e:	14 97       	mov	r7,r10
80005370:	74 28       	ld.w	r8,r10[0x8]
80005372:	58 08       	cp.w	r8,0
80005374:	c0 41       	brne	8000537c <__sprint_r+0x10>
80005376:	95 18       	st.w	r10[0x4],r8
80005378:	10 9c       	mov	r12,r8
8000537a:	d8 22       	popm	r4-r7,pc
8000537c:	e0 a0 18 b4 	rcall	800084e4 <__sfvwrite_r>
80005380:	30 08       	mov	r8,0
80005382:	8f 18       	st.w	r7[0x4],r8
80005384:	8f 28       	st.w	r7[0x8],r8
80005386:	d8 22       	popm	r4-r7,pc

80005388 <_vfprintf_r>:
80005388:	d4 31       	pushm	r0-r7,lr
8000538a:	fa cd 06 bc 	sub	sp,sp,1724
8000538e:	51 09       	stdsp	sp[0x40],r9
80005390:	16 91       	mov	r1,r11
80005392:	14 97       	mov	r7,r10
80005394:	18 95       	mov	r5,r12
80005396:	e0 a0 1a 1d 	rcall	800087d0 <_localeconv_r>
8000539a:	78 0c       	ld.w	r12,r12[0x0]
8000539c:	50 cc       	stdsp	sp[0x30],r12
8000539e:	58 05       	cp.w	r5,0
800053a0:	c0 70       	breq	800053ae <_vfprintf_r+0x26>
800053a2:	6a 68       	ld.w	r8,r5[0x18]
800053a4:	58 08       	cp.w	r8,0
800053a6:	c0 41       	brne	800053ae <_vfprintf_r+0x26>
800053a8:	0a 9c       	mov	r12,r5
800053aa:	e0 a0 17 3d 	rcall	80008224 <__sinit>
800053ae:	fe c8 a1 fe 	sub	r8,pc,-24066
800053b2:	10 31       	cp.w	r1,r8
800053b4:	c0 31       	brne	800053ba <_vfprintf_r+0x32>
800053b6:	6a 01       	ld.w	r1,r5[0x0]
800053b8:	c0 c8       	rjmp	800053d0 <_vfprintf_r+0x48>
800053ba:	fe c8 a1 ea 	sub	r8,pc,-24086
800053be:	10 31       	cp.w	r1,r8
800053c0:	c0 31       	brne	800053c6 <_vfprintf_r+0x3e>
800053c2:	6a 11       	ld.w	r1,r5[0x4]
800053c4:	c0 68       	rjmp	800053d0 <_vfprintf_r+0x48>
800053c6:	fe c8 a1 d6 	sub	r8,pc,-24106
800053ca:	10 31       	cp.w	r1,r8
800053cc:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800053d0:	82 68       	ld.sh	r8,r1[0xc]
800053d2:	ed b8 00 03 	bld	r8,0x3
800053d6:	c0 41       	brne	800053de <_vfprintf_r+0x56>
800053d8:	62 48       	ld.w	r8,r1[0x10]
800053da:	58 08       	cp.w	r8,0
800053dc:	c0 71       	brne	800053ea <_vfprintf_r+0x62>
800053de:	02 9b       	mov	r11,r1
800053e0:	0a 9c       	mov	r12,r5
800053e2:	e0 a0 0f 5d 	rcall	8000729c <__swsetup_r>
800053e6:	e0 81 0f 54 	brne	8000728e <_vfprintf_r+0x1f06>
800053ea:	82 68       	ld.sh	r8,r1[0xc]
800053ec:	10 99       	mov	r9,r8
800053ee:	e2 19 00 1a 	andl	r9,0x1a,COH
800053f2:	58 a9       	cp.w	r9,10
800053f4:	c3 c1       	brne	8000546c <_vfprintf_r+0xe4>
800053f6:	82 79       	ld.sh	r9,r1[0xe]
800053f8:	30 0a       	mov	r10,0
800053fa:	f4 09 19 00 	cp.h	r9,r10
800053fe:	c3 75       	brlt	8000546c <_vfprintf_r+0xe4>
80005400:	a1 d8       	cbr	r8,0x1
80005402:	fb 58 05 d0 	st.h	sp[1488],r8
80005406:	62 88       	ld.w	r8,r1[0x20]
80005408:	fb 48 05 e4 	st.w	sp[1508],r8
8000540c:	62 a8       	ld.w	r8,r1[0x28]
8000540e:	fb 48 05 ec 	st.w	sp[1516],r8
80005412:	fa c8 ff bc 	sub	r8,sp,-68
80005416:	fb 48 05 d4 	st.w	sp[1492],r8
8000541a:	fb 48 05 c4 	st.w	sp[1476],r8
8000541e:	e0 68 04 00 	mov	r8,1024
80005422:	fb 48 05 d8 	st.w	sp[1496],r8
80005426:	fb 48 05 cc 	st.w	sp[1484],r8
8000542a:	30 08       	mov	r8,0
8000542c:	fb 59 05 d2 	st.h	sp[1490],r9
80005430:	0e 9a       	mov	r10,r7
80005432:	41 09       	lddsp	r9,sp[0x40]
80005434:	fa c7 fa 3c 	sub	r7,sp,-1476
80005438:	fb 48 05 dc 	st.w	sp[1500],r8
8000543c:	0a 9c       	mov	r12,r5
8000543e:	0e 9b       	mov	r11,r7
80005440:	ca 4f       	rcall	80005388 <_vfprintf_r>
80005442:	50 bc       	stdsp	sp[0x2c],r12
80005444:	c0 95       	brlt	80005456 <_vfprintf_r+0xce>
80005446:	0e 9b       	mov	r11,r7
80005448:	0a 9c       	mov	r12,r5
8000544a:	e0 a0 16 15 	rcall	80008074 <_fflush_r>
8000544e:	40 be       	lddsp	lr,sp[0x2c]
80005450:	f9 be 01 ff 	movne	lr,-1
80005454:	50 be       	stdsp	sp[0x2c],lr
80005456:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000545a:	ed b8 00 06 	bld	r8,0x6
8000545e:	e0 81 0f 1a 	brne	80007292 <_vfprintf_r+0x1f0a>
80005462:	82 68       	ld.sh	r8,r1[0xc]
80005464:	a7 a8       	sbr	r8,0x6
80005466:	a2 68       	st.h	r1[0xc],r8
80005468:	e0 8f 0f 15 	bral	80007292 <_vfprintf_r+0x1f0a>
8000546c:	30 08       	mov	r8,0
8000546e:	fb 48 06 b4 	st.w	sp[1716],r8
80005472:	fb 48 06 90 	st.w	sp[1680],r8
80005476:	fb 48 06 8c 	st.w	sp[1676],r8
8000547a:	fb 48 06 b0 	st.w	sp[1712],r8
8000547e:	30 08       	mov	r8,0
80005480:	30 09       	mov	r9,0
80005482:	50 a7       	stdsp	sp[0x28],r7
80005484:	50 78       	stdsp	sp[0x1c],r8
80005486:	fa c3 f9 e0 	sub	r3,sp,-1568
8000548a:	3f f8       	mov	r8,-1
8000548c:	50 59       	stdsp	sp[0x14],r9
8000548e:	fb 43 06 88 	st.w	sp[1672],r3
80005492:	fb 48 05 44 	st.w	sp[1348],r8
80005496:	12 9c       	mov	r12,r9
80005498:	50 69       	stdsp	sp[0x18],r9
8000549a:	50 d9       	stdsp	sp[0x34],r9
8000549c:	50 e9       	stdsp	sp[0x38],r9
8000549e:	50 b9       	stdsp	sp[0x2c],r9
800054a0:	12 97       	mov	r7,r9
800054a2:	0a 94       	mov	r4,r5
800054a4:	40 a2       	lddsp	r2,sp[0x28]
800054a6:	32 5a       	mov	r10,37
800054a8:	30 08       	mov	r8,0
800054aa:	c0 28       	rjmp	800054ae <_vfprintf_r+0x126>
800054ac:	2f f2       	sub	r2,-1
800054ae:	05 89       	ld.ub	r9,r2[0x0]
800054b0:	f0 09 18 00 	cp.b	r9,r8
800054b4:	5f 1b       	srne	r11
800054b6:	f4 09 18 00 	cp.b	r9,r10
800054ba:	5f 19       	srne	r9
800054bc:	f3 eb 00 0b 	and	r11,r9,r11
800054c0:	f0 0b 18 00 	cp.b	r11,r8
800054c4:	cf 41       	brne	800054ac <_vfprintf_r+0x124>
800054c6:	40 ab       	lddsp	r11,sp[0x28]
800054c8:	e4 0b 01 06 	sub	r6,r2,r11
800054cc:	c1 e0       	breq	80005508 <_vfprintf_r+0x180>
800054ce:	fa f8 06 90 	ld.w	r8,sp[1680]
800054d2:	0c 08       	add	r8,r6
800054d4:	87 0b       	st.w	r3[0x0],r11
800054d6:	fb 48 06 90 	st.w	sp[1680],r8
800054da:	87 16       	st.w	r3[0x4],r6
800054dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054e0:	2f f8       	sub	r8,-1
800054e2:	fb 48 06 8c 	st.w	sp[1676],r8
800054e6:	58 78       	cp.w	r8,7
800054e8:	e0 89 00 04 	brgt	800054f0 <_vfprintf_r+0x168>
800054ec:	2f 83       	sub	r3,-8
800054ee:	c0 a8       	rjmp	80005502 <_vfprintf_r+0x17a>
800054f0:	fa ca f9 78 	sub	r10,sp,-1672
800054f4:	02 9b       	mov	r11,r1
800054f6:	08 9c       	mov	r12,r4
800054f8:	c3 af       	rcall	8000536c <__sprint_r>
800054fa:	e0 81 0e c6 	brne	80007286 <_vfprintf_r+0x1efe>
800054fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80005502:	40 ba       	lddsp	r10,sp[0x2c]
80005504:	0c 0a       	add	r10,r6
80005506:	50 ba       	stdsp	sp[0x2c],r10
80005508:	05 89       	ld.ub	r9,r2[0x0]
8000550a:	30 08       	mov	r8,0
8000550c:	f0 09 18 00 	cp.b	r9,r8
80005510:	e0 80 0e aa 	breq	80007264 <_vfprintf_r+0x1edc>
80005514:	30 09       	mov	r9,0
80005516:	fb 68 06 bb 	st.b	sp[1723],r8
8000551a:	0e 96       	mov	r6,r7
8000551c:	e4 c8 ff ff 	sub	r8,r2,-1
80005520:	3f fe       	mov	lr,-1
80005522:	50 93       	stdsp	sp[0x24],r3
80005524:	50 41       	stdsp	sp[0x10],r1
80005526:	0e 93       	mov	r3,r7
80005528:	04 91       	mov	r1,r2
8000552a:	50 89       	stdsp	sp[0x20],r9
8000552c:	50 a8       	stdsp	sp[0x28],r8
8000552e:	50 2e       	stdsp	sp[0x8],lr
80005530:	50 39       	stdsp	sp[0xc],r9
80005532:	12 95       	mov	r5,r9
80005534:	12 90       	mov	r0,r9
80005536:	10 97       	mov	r7,r8
80005538:	08 92       	mov	r2,r4
8000553a:	c0 78       	rjmp	80005548 <_vfprintf_r+0x1c0>
8000553c:	3f fc       	mov	r12,-1
8000553e:	08 97       	mov	r7,r4
80005540:	50 2c       	stdsp	sp[0x8],r12
80005542:	c0 38       	rjmp	80005548 <_vfprintf_r+0x1c0>
80005544:	30 0b       	mov	r11,0
80005546:	50 3b       	stdsp	sp[0xc],r11
80005548:	0f 38       	ld.ub	r8,r7++
8000554a:	c0 28       	rjmp	8000554e <_vfprintf_r+0x1c6>
8000554c:	12 90       	mov	r0,r9
8000554e:	f0 c9 00 20 	sub	r9,r8,32
80005552:	e0 49 00 58 	cp.w	r9,88
80005556:	e0 8b 0a 30 	brhi	800069b6 <_vfprintf_r+0x162e>
8000555a:	fe ca a7 52 	sub	r10,pc,-22702
8000555e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80005562:	50 a7       	stdsp	sp[0x28],r7
80005564:	50 80       	stdsp	sp[0x20],r0
80005566:	0c 97       	mov	r7,r6
80005568:	04 94       	mov	r4,r2
8000556a:	06 96       	mov	r6,r3
8000556c:	02 92       	mov	r2,r1
8000556e:	fe c9 a5 2a 	sub	r9,pc,-23254
80005572:	40 93       	lddsp	r3,sp[0x24]
80005574:	10 90       	mov	r0,r8
80005576:	40 41       	lddsp	r1,sp[0x10]
80005578:	50 d9       	stdsp	sp[0x34],r9
8000557a:	e0 8f 08 8e 	bral	80006696 <_vfprintf_r+0x130e>
8000557e:	30 08       	mov	r8,0
80005580:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80005584:	f0 09 18 00 	cp.b	r9,r8
80005588:	ce 01       	brne	80005548 <_vfprintf_r+0x1c0>
8000558a:	32 08       	mov	r8,32
8000558c:	c6 e8       	rjmp	80005668 <_vfprintf_r+0x2e0>
8000558e:	a1 a5       	sbr	r5,0x0
80005590:	cd cb       	rjmp	80005548 <_vfprintf_r+0x1c0>
80005592:	0f 89       	ld.ub	r9,r7[0x0]
80005594:	f2 c8 00 30 	sub	r8,r9,48
80005598:	58 98       	cp.w	r8,9
8000559a:	e0 8b 00 1d 	brhi	800055d4 <_vfprintf_r+0x24c>
8000559e:	ee c8 ff ff 	sub	r8,r7,-1
800055a2:	30 0b       	mov	r11,0
800055a4:	23 09       	sub	r9,48
800055a6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800055aa:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800055ae:	11 39       	ld.ub	r9,r8++
800055b0:	f2 ca 00 30 	sub	r10,r9,48
800055b4:	58 9a       	cp.w	r10,9
800055b6:	fe 98 ff f7 	brls	800055a4 <_vfprintf_r+0x21c>
800055ba:	e0 49 00 24 	cp.w	r9,36
800055be:	cc 31       	brne	80005544 <_vfprintf_r+0x1bc>
800055c0:	e0 4b 00 20 	cp.w	r11,32
800055c4:	e0 89 0e 60 	brgt	80007284 <_vfprintf_r+0x1efc>
800055c8:	20 1b       	sub	r11,1
800055ca:	fa f9 06 b4 	ld.w	r9,sp[1716]
800055ce:	12 3b       	cp.w	r11,r9
800055d0:	c0 95       	brlt	800055e2 <_vfprintf_r+0x25a>
800055d2:	c1 08       	rjmp	800055f2 <_vfprintf_r+0x26a>
800055d4:	fa f9 06 b4 	ld.w	r9,sp[1716]
800055d8:	ec ca ff ff 	sub	r10,r6,-1
800055dc:	12 36       	cp.w	r6,r9
800055de:	c1 f5       	brlt	8000561c <_vfprintf_r+0x294>
800055e0:	c2 68       	rjmp	8000562c <_vfprintf_r+0x2a4>
800055e2:	fa ce f9 44 	sub	lr,sp,-1724
800055e6:	10 97       	mov	r7,r8
800055e8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800055ec:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800055f0:	c3 58       	rjmp	8000565a <_vfprintf_r+0x2d2>
800055f2:	10 97       	mov	r7,r8
800055f4:	fa c8 f9 50 	sub	r8,sp,-1712
800055f8:	1a d8       	st.w	--sp,r8
800055fa:	fa c8 fa b8 	sub	r8,sp,-1352
800055fe:	1a d8       	st.w	--sp,r8
80005600:	fa c8 fb b4 	sub	r8,sp,-1100
80005604:	02 9a       	mov	r10,r1
80005606:	1a d8       	st.w	--sp,r8
80005608:	04 9c       	mov	r12,r2
8000560a:	fa c8 f9 40 	sub	r8,sp,-1728
8000560e:	fa c9 ff b4 	sub	r9,sp,-76
80005612:	fe b0 fd 25 	rcall	8000505c <get_arg>
80005616:	2f dd       	sub	sp,-12
80005618:	78 00       	ld.w	r0,r12[0x0]
8000561a:	c2 08       	rjmp	8000565a <_vfprintf_r+0x2d2>
8000561c:	fa cc f9 44 	sub	r12,sp,-1724
80005620:	14 96       	mov	r6,r10
80005622:	f8 03 00 38 	add	r8,r12,r3<<0x3
80005626:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000562a:	c1 88       	rjmp	8000565a <_vfprintf_r+0x2d2>
8000562c:	41 08       	lddsp	r8,sp[0x40]
8000562e:	59 f9       	cp.w	r9,31
80005630:	e0 89 00 11 	brgt	80005652 <_vfprintf_r+0x2ca>
80005634:	f0 cb ff fc 	sub	r11,r8,-4
80005638:	51 0b       	stdsp	sp[0x40],r11
8000563a:	70 00       	ld.w	r0,r8[0x0]
8000563c:	fa cb f9 44 	sub	r11,sp,-1724
80005640:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005644:	f1 40 fd 88 	st.w	r8[-632],r0
80005648:	2f f9       	sub	r9,-1
8000564a:	14 96       	mov	r6,r10
8000564c:	fb 49 06 b4 	st.w	sp[1716],r9
80005650:	c0 58       	rjmp	8000565a <_vfprintf_r+0x2d2>
80005652:	70 00       	ld.w	r0,r8[0x0]
80005654:	14 96       	mov	r6,r10
80005656:	2f c8       	sub	r8,-4
80005658:	51 08       	stdsp	sp[0x40],r8
8000565a:	58 00       	cp.w	r0,0
8000565c:	fe 94 ff 76 	brge	80005548 <_vfprintf_r+0x1c0>
80005660:	5c 30       	neg	r0
80005662:	a3 a5       	sbr	r5,0x2
80005664:	c7 2b       	rjmp	80005548 <_vfprintf_r+0x1c0>
80005666:	32 b8       	mov	r8,43
80005668:	fb 68 06 bb 	st.b	sp[1723],r8
8000566c:	c6 eb       	rjmp	80005548 <_vfprintf_r+0x1c0>
8000566e:	0f 38       	ld.ub	r8,r7++
80005670:	e0 48 00 2a 	cp.w	r8,42
80005674:	c0 30       	breq	8000567a <_vfprintf_r+0x2f2>
80005676:	30 09       	mov	r9,0
80005678:	c7 98       	rjmp	8000576a <_vfprintf_r+0x3e2>
8000567a:	0f 88       	ld.ub	r8,r7[0x0]
8000567c:	f0 c9 00 30 	sub	r9,r8,48
80005680:	58 99       	cp.w	r9,9
80005682:	e0 8b 00 1f 	brhi	800056c0 <_vfprintf_r+0x338>
80005686:	ee c4 ff ff 	sub	r4,r7,-1
8000568a:	30 0b       	mov	r11,0
8000568c:	23 08       	sub	r8,48
8000568e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005692:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005696:	09 38       	ld.ub	r8,r4++
80005698:	f0 c9 00 30 	sub	r9,r8,48
8000569c:	58 99       	cp.w	r9,9
8000569e:	fe 98 ff f7 	brls	8000568c <_vfprintf_r+0x304>
800056a2:	e0 48 00 24 	cp.w	r8,36
800056a6:	fe 91 ff 4f 	brne	80005544 <_vfprintf_r+0x1bc>
800056aa:	e0 4b 00 20 	cp.w	r11,32
800056ae:	e0 89 0d eb 	brgt	80007284 <_vfprintf_r+0x1efc>
800056b2:	20 1b       	sub	r11,1
800056b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056b8:	10 3b       	cp.w	r11,r8
800056ba:	c0 a5       	brlt	800056ce <_vfprintf_r+0x346>
800056bc:	c1 18       	rjmp	800056de <_vfprintf_r+0x356>
800056be:	d7 03       	nop
800056c0:	fa fa 06 b4 	ld.w	r10,sp[1716]
800056c4:	ec c9 ff ff 	sub	r9,r6,-1
800056c8:	14 36       	cp.w	r6,r10
800056ca:	c1 f5       	brlt	80005708 <_vfprintf_r+0x380>
800056cc:	c2 88       	rjmp	8000571c <_vfprintf_r+0x394>
800056ce:	fa ca f9 44 	sub	r10,sp,-1724
800056d2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800056d6:	f6 fb fd 88 	ld.w	r11,r11[-632]
800056da:	50 2b       	stdsp	sp[0x8],r11
800056dc:	c3 c8       	rjmp	80005754 <_vfprintf_r+0x3cc>
800056de:	fa c8 f9 50 	sub	r8,sp,-1712
800056e2:	1a d8       	st.w	--sp,r8
800056e4:	fa c8 fa b8 	sub	r8,sp,-1352
800056e8:	1a d8       	st.w	--sp,r8
800056ea:	fa c8 fb b4 	sub	r8,sp,-1100
800056ee:	02 9a       	mov	r10,r1
800056f0:	1a d8       	st.w	--sp,r8
800056f2:	04 9c       	mov	r12,r2
800056f4:	fa c8 f9 40 	sub	r8,sp,-1728
800056f8:	fa c9 ff b4 	sub	r9,sp,-76
800056fc:	fe b0 fc b0 	rcall	8000505c <get_arg>
80005700:	2f dd       	sub	sp,-12
80005702:	78 0c       	ld.w	r12,r12[0x0]
80005704:	50 2c       	stdsp	sp[0x8],r12
80005706:	c2 78       	rjmp	80005754 <_vfprintf_r+0x3cc>
80005708:	12 96       	mov	r6,r9
8000570a:	0e 94       	mov	r4,r7
8000570c:	fa c9 f9 44 	sub	r9,sp,-1724
80005710:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005714:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80005718:	50 28       	stdsp	sp[0x8],r8
8000571a:	c1 d8       	rjmp	80005754 <_vfprintf_r+0x3cc>
8000571c:	41 08       	lddsp	r8,sp[0x40]
8000571e:	59 fa       	cp.w	r10,31
80005720:	e0 89 00 14 	brgt	80005748 <_vfprintf_r+0x3c0>
80005724:	f0 cb ff fc 	sub	r11,r8,-4
80005728:	70 08       	ld.w	r8,r8[0x0]
8000572a:	51 0b       	stdsp	sp[0x40],r11
8000572c:	50 28       	stdsp	sp[0x8],r8
8000572e:	fa c6 f9 44 	sub	r6,sp,-1724
80005732:	40 2e       	lddsp	lr,sp[0x8]
80005734:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005738:	f1 4e fd 88 	st.w	r8[-632],lr
8000573c:	2f fa       	sub	r10,-1
8000573e:	0e 94       	mov	r4,r7
80005740:	fb 4a 06 b4 	st.w	sp[1716],r10
80005744:	12 96       	mov	r6,r9
80005746:	c0 78       	rjmp	80005754 <_vfprintf_r+0x3cc>
80005748:	70 0c       	ld.w	r12,r8[0x0]
8000574a:	0e 94       	mov	r4,r7
8000574c:	2f c8       	sub	r8,-4
8000574e:	50 2c       	stdsp	sp[0x8],r12
80005750:	12 96       	mov	r6,r9
80005752:	51 08       	stdsp	sp[0x40],r8
80005754:	40 2b       	lddsp	r11,sp[0x8]
80005756:	58 0b       	cp.w	r11,0
80005758:	fe 95 fe f2 	brlt	8000553c <_vfprintf_r+0x1b4>
8000575c:	08 97       	mov	r7,r4
8000575e:	cf 5a       	rjmp	80005548 <_vfprintf_r+0x1c0>
80005760:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005764:	0f 38       	ld.ub	r8,r7++
80005766:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000576a:	f0 ca 00 30 	sub	r10,r8,48
8000576e:	58 9a       	cp.w	r10,9
80005770:	fe 98 ff f8 	brls	80005760 <_vfprintf_r+0x3d8>
80005774:	3f fa       	mov	r10,-1
80005776:	f2 0a 0c 49 	max	r9,r9,r10
8000577a:	50 29       	stdsp	sp[0x8],r9
8000577c:	ce 9a       	rjmp	8000554e <_vfprintf_r+0x1c6>
8000577e:	a7 b5       	sbr	r5,0x7
80005780:	ce 4a       	rjmp	80005548 <_vfprintf_r+0x1c0>
80005782:	30 09       	mov	r9,0
80005784:	23 08       	sub	r8,48
80005786:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000578a:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000578e:	0f 38       	ld.ub	r8,r7++
80005790:	f0 ca 00 30 	sub	r10,r8,48
80005794:	58 9a       	cp.w	r10,9
80005796:	fe 98 ff f7 	brls	80005784 <_vfprintf_r+0x3fc>
8000579a:	e0 48 00 24 	cp.w	r8,36
8000579e:	fe 91 fe d7 	brne	8000554c <_vfprintf_r+0x1c4>
800057a2:	e0 49 00 20 	cp.w	r9,32
800057a6:	e0 89 0d 6f 	brgt	80007284 <_vfprintf_r+0x1efc>
800057aa:	f2 c3 00 01 	sub	r3,r9,1
800057ae:	30 19       	mov	r9,1
800057b0:	50 39       	stdsp	sp[0xc],r9
800057b2:	cc ba       	rjmp	80005548 <_vfprintf_r+0x1c0>
800057b4:	a3 b5       	sbr	r5,0x3
800057b6:	cc 9a       	rjmp	80005548 <_vfprintf_r+0x1c0>
800057b8:	a7 a5       	sbr	r5,0x6
800057ba:	cc 7a       	rjmp	80005548 <_vfprintf_r+0x1c0>
800057bc:	0a 98       	mov	r8,r5
800057be:	a5 b5       	sbr	r5,0x5
800057c0:	a5 a8       	sbr	r8,0x4
800057c2:	0f 89       	ld.ub	r9,r7[0x0]
800057c4:	36 ce       	mov	lr,108
800057c6:	fc 09 18 00 	cp.b	r9,lr
800057ca:	f7 b7 00 ff 	subeq	r7,-1
800057ce:	f0 05 17 10 	movne	r5,r8
800057d2:	cb ba       	rjmp	80005548 <_vfprintf_r+0x1c0>
800057d4:	a5 b5       	sbr	r5,0x5
800057d6:	cb 9a       	rjmp	80005548 <_vfprintf_r+0x1c0>
800057d8:	50 a7       	stdsp	sp[0x28],r7
800057da:	50 80       	stdsp	sp[0x20],r0
800057dc:	0c 97       	mov	r7,r6
800057de:	10 90       	mov	r0,r8
800057e0:	06 96       	mov	r6,r3
800057e2:	04 94       	mov	r4,r2
800057e4:	40 93       	lddsp	r3,sp[0x24]
800057e6:	02 92       	mov	r2,r1
800057e8:	0e 99       	mov	r9,r7
800057ea:	40 41       	lddsp	r1,sp[0x10]
800057ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800057f0:	40 3c       	lddsp	r12,sp[0xc]
800057f2:	58 0c       	cp.w	r12,0
800057f4:	c1 d0       	breq	8000582e <_vfprintf_r+0x4a6>
800057f6:	10 36       	cp.w	r6,r8
800057f8:	c0 64       	brge	80005804 <_vfprintf_r+0x47c>
800057fa:	fa cb f9 44 	sub	r11,sp,-1724
800057fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005802:	c1 d8       	rjmp	8000583c <_vfprintf_r+0x4b4>
80005804:	fa c8 f9 50 	sub	r8,sp,-1712
80005808:	1a d8       	st.w	--sp,r8
8000580a:	fa c8 fa b8 	sub	r8,sp,-1352
8000580e:	1a d8       	st.w	--sp,r8
80005810:	fa c8 fb b4 	sub	r8,sp,-1100
80005814:	1a d8       	st.w	--sp,r8
80005816:	fa c8 f9 40 	sub	r8,sp,-1728
8000581a:	fa c9 ff b4 	sub	r9,sp,-76
8000581e:	04 9a       	mov	r10,r2
80005820:	0c 9b       	mov	r11,r6
80005822:	08 9c       	mov	r12,r4
80005824:	fe b0 fc 1c 	rcall	8000505c <get_arg>
80005828:	2f dd       	sub	sp,-12
8000582a:	19 b8       	ld.ub	r8,r12[0x3]
8000582c:	c2 28       	rjmp	80005870 <_vfprintf_r+0x4e8>
8000582e:	2f f7       	sub	r7,-1
80005830:	10 39       	cp.w	r9,r8
80005832:	c0 84       	brge	80005842 <_vfprintf_r+0x4ba>
80005834:	fa ca f9 44 	sub	r10,sp,-1724
80005838:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000583c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005840:	c1 88       	rjmp	80005870 <_vfprintf_r+0x4e8>
80005842:	41 09       	lddsp	r9,sp[0x40]
80005844:	59 f8       	cp.w	r8,31
80005846:	e0 89 00 12 	brgt	8000586a <_vfprintf_r+0x4e2>
8000584a:	f2 ca ff fc 	sub	r10,r9,-4
8000584e:	51 0a       	stdsp	sp[0x40],r10
80005850:	72 09       	ld.w	r9,r9[0x0]
80005852:	fa c6 f9 44 	sub	r6,sp,-1724
80005856:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000585a:	2f f8       	sub	r8,-1
8000585c:	f5 49 fd 88 	st.w	r10[-632],r9
80005860:	fb 48 06 b4 	st.w	sp[1716],r8
80005864:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80005868:	c0 48       	rjmp	80005870 <_vfprintf_r+0x4e8>
8000586a:	13 b8       	ld.ub	r8,r9[0x3]
8000586c:	2f c9       	sub	r9,-4
8000586e:	51 09       	stdsp	sp[0x40],r9
80005870:	fb 68 06 60 	st.b	sp[1632],r8
80005874:	30 0e       	mov	lr,0
80005876:	30 08       	mov	r8,0
80005878:	30 12       	mov	r2,1
8000587a:	fb 68 06 bb 	st.b	sp[1723],r8
8000587e:	50 2e       	stdsp	sp[0x8],lr
80005880:	e0 8f 08 ad 	bral	800069da <_vfprintf_r+0x1652>
80005884:	50 a7       	stdsp	sp[0x28],r7
80005886:	50 80       	stdsp	sp[0x20],r0
80005888:	0c 97       	mov	r7,r6
8000588a:	04 94       	mov	r4,r2
8000588c:	06 96       	mov	r6,r3
8000588e:	02 92       	mov	r2,r1
80005890:	40 93       	lddsp	r3,sp[0x24]
80005892:	10 90       	mov	r0,r8
80005894:	40 41       	lddsp	r1,sp[0x10]
80005896:	a5 a5       	sbr	r5,0x4
80005898:	c0 a8       	rjmp	800058ac <_vfprintf_r+0x524>
8000589a:	50 a7       	stdsp	sp[0x28],r7
8000589c:	50 80       	stdsp	sp[0x20],r0
8000589e:	0c 97       	mov	r7,r6
800058a0:	04 94       	mov	r4,r2
800058a2:	06 96       	mov	r6,r3
800058a4:	02 92       	mov	r2,r1
800058a6:	40 93       	lddsp	r3,sp[0x24]
800058a8:	10 90       	mov	r0,r8
800058aa:	40 41       	lddsp	r1,sp[0x10]
800058ac:	ed b5 00 05 	bld	r5,0x5
800058b0:	c5 11       	brne	80005952 <_vfprintf_r+0x5ca>
800058b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800058b6:	40 3c       	lddsp	r12,sp[0xc]
800058b8:	58 0c       	cp.w	r12,0
800058ba:	c1 e0       	breq	800058f6 <_vfprintf_r+0x56e>
800058bc:	10 36       	cp.w	r6,r8
800058be:	c0 64       	brge	800058ca <_vfprintf_r+0x542>
800058c0:	fa cb f9 44 	sub	r11,sp,-1724
800058c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800058c8:	c2 08       	rjmp	80005908 <_vfprintf_r+0x580>
800058ca:	fa c8 f9 50 	sub	r8,sp,-1712
800058ce:	1a d8       	st.w	--sp,r8
800058d0:	fa c8 fa b8 	sub	r8,sp,-1352
800058d4:	0c 9b       	mov	r11,r6
800058d6:	1a d8       	st.w	--sp,r8
800058d8:	fa c8 fb b4 	sub	r8,sp,-1100
800058dc:	1a d8       	st.w	--sp,r8
800058de:	fa c9 ff b4 	sub	r9,sp,-76
800058e2:	fa c8 f9 40 	sub	r8,sp,-1728
800058e6:	04 9a       	mov	r10,r2
800058e8:	08 9c       	mov	r12,r4
800058ea:	fe b0 fb b9 	rcall	8000505c <get_arg>
800058ee:	2f dd       	sub	sp,-12
800058f0:	78 1b       	ld.w	r11,r12[0x4]
800058f2:	78 09       	ld.w	r9,r12[0x0]
800058f4:	c2 b8       	rjmp	8000594a <_vfprintf_r+0x5c2>
800058f6:	ee ca ff ff 	sub	r10,r7,-1
800058fa:	10 37       	cp.w	r7,r8
800058fc:	c0 b4       	brge	80005912 <_vfprintf_r+0x58a>
800058fe:	fa c9 f9 44 	sub	r9,sp,-1724
80005902:	14 97       	mov	r7,r10
80005904:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005908:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000590c:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005910:	c1 d8       	rjmp	8000594a <_vfprintf_r+0x5c2>
80005912:	41 09       	lddsp	r9,sp[0x40]
80005914:	59 f8       	cp.w	r8,31
80005916:	e0 89 00 14 	brgt	8000593e <_vfprintf_r+0x5b6>
8000591a:	f2 cb ff f8 	sub	r11,r9,-8
8000591e:	51 0b       	stdsp	sp[0x40],r11
80005920:	fa c6 f9 44 	sub	r6,sp,-1724
80005924:	72 1b       	ld.w	r11,r9[0x4]
80005926:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000592a:	72 09       	ld.w	r9,r9[0x0]
8000592c:	f9 4b fd 8c 	st.w	r12[-628],r11
80005930:	f9 49 fd 88 	st.w	r12[-632],r9
80005934:	2f f8       	sub	r8,-1
80005936:	14 97       	mov	r7,r10
80005938:	fb 48 06 b4 	st.w	sp[1716],r8
8000593c:	c0 78       	rjmp	8000594a <_vfprintf_r+0x5c2>
8000593e:	f2 c8 ff f8 	sub	r8,r9,-8
80005942:	72 1b       	ld.w	r11,r9[0x4]
80005944:	14 97       	mov	r7,r10
80005946:	51 08       	stdsp	sp[0x40],r8
80005948:	72 09       	ld.w	r9,r9[0x0]
8000594a:	16 98       	mov	r8,r11
8000594c:	fa e9 00 00 	st.d	sp[0],r8
80005950:	ca e8       	rjmp	80005aac <_vfprintf_r+0x724>
80005952:	ed b5 00 04 	bld	r5,0x4
80005956:	c1 71       	brne	80005984 <_vfprintf_r+0x5fc>
80005958:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000595c:	40 3e       	lddsp	lr,sp[0xc]
8000595e:	58 0e       	cp.w	lr,0
80005960:	c0 80       	breq	80005970 <_vfprintf_r+0x5e8>
80005962:	10 36       	cp.w	r6,r8
80005964:	c6 94       	brge	80005a36 <_vfprintf_r+0x6ae>
80005966:	fa cc f9 44 	sub	r12,sp,-1724
8000596a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000596e:	c8 28       	rjmp	80005a72 <_vfprintf_r+0x6ea>
80005970:	ee ca ff ff 	sub	r10,r7,-1
80005974:	10 37       	cp.w	r7,r8
80005976:	e0 84 00 81 	brge	80005a78 <_vfprintf_r+0x6f0>
8000597a:	fa cb f9 44 	sub	r11,sp,-1724
8000597e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005982:	c7 78       	rjmp	80005a70 <_vfprintf_r+0x6e8>
80005984:	ed b5 00 06 	bld	r5,0x6
80005988:	c4 b1       	brne	80005a1e <_vfprintf_r+0x696>
8000598a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000598e:	40 3c       	lddsp	r12,sp[0xc]
80005990:	58 0c       	cp.w	r12,0
80005992:	c1 d0       	breq	800059cc <_vfprintf_r+0x644>
80005994:	10 36       	cp.w	r6,r8
80005996:	c0 64       	brge	800059a2 <_vfprintf_r+0x61a>
80005998:	fa cb f9 44 	sub	r11,sp,-1724
8000599c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059a0:	c1 f8       	rjmp	800059de <_vfprintf_r+0x656>
800059a2:	fa c8 f9 50 	sub	r8,sp,-1712
800059a6:	1a d8       	st.w	--sp,r8
800059a8:	fa c8 fa b8 	sub	r8,sp,-1352
800059ac:	1a d8       	st.w	--sp,r8
800059ae:	fa c8 fb b4 	sub	r8,sp,-1100
800059b2:	1a d8       	st.w	--sp,r8
800059b4:	fa c8 f9 40 	sub	r8,sp,-1728
800059b8:	fa c9 ff b4 	sub	r9,sp,-76
800059bc:	04 9a       	mov	r10,r2
800059be:	0c 9b       	mov	r11,r6
800059c0:	08 9c       	mov	r12,r4
800059c2:	fe b0 fb 4d 	rcall	8000505c <get_arg>
800059c6:	2f dd       	sub	sp,-12
800059c8:	98 18       	ld.sh	r8,r12[0x2]
800059ca:	c2 68       	rjmp	80005a16 <_vfprintf_r+0x68e>
800059cc:	ee ca ff ff 	sub	r10,r7,-1
800059d0:	10 37       	cp.w	r7,r8
800059d2:	c0 94       	brge	800059e4 <_vfprintf_r+0x65c>
800059d4:	fa c9 f9 44 	sub	r9,sp,-1724
800059d8:	14 97       	mov	r7,r10
800059da:	f2 06 00 36 	add	r6,r9,r6<<0x3
800059de:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800059e2:	c1 a8       	rjmp	80005a16 <_vfprintf_r+0x68e>
800059e4:	41 09       	lddsp	r9,sp[0x40]
800059e6:	59 f8       	cp.w	r8,31
800059e8:	e0 89 00 13 	brgt	80005a0e <_vfprintf_r+0x686>
800059ec:	f2 cb ff fc 	sub	r11,r9,-4
800059f0:	51 0b       	stdsp	sp[0x40],r11
800059f2:	72 09       	ld.w	r9,r9[0x0]
800059f4:	fa c6 f9 44 	sub	r6,sp,-1724
800059f8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800059fc:	2f f8       	sub	r8,-1
800059fe:	f7 49 fd 88 	st.w	r11[-632],r9
80005a02:	fb 48 06 b4 	st.w	sp[1716],r8
80005a06:	14 97       	mov	r7,r10
80005a08:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005a0c:	c0 58       	rjmp	80005a16 <_vfprintf_r+0x68e>
80005a0e:	92 18       	ld.sh	r8,r9[0x2]
80005a10:	14 97       	mov	r7,r10
80005a12:	2f c9       	sub	r9,-4
80005a14:	51 09       	stdsp	sp[0x40],r9
80005a16:	50 18       	stdsp	sp[0x4],r8
80005a18:	bf 58       	asr	r8,0x1f
80005a1a:	50 08       	stdsp	sp[0x0],r8
80005a1c:	c4 88       	rjmp	80005aac <_vfprintf_r+0x724>
80005a1e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a22:	40 3c       	lddsp	r12,sp[0xc]
80005a24:	58 0c       	cp.w	r12,0
80005a26:	c1 d0       	breq	80005a60 <_vfprintf_r+0x6d8>
80005a28:	10 36       	cp.w	r6,r8
80005a2a:	c0 64       	brge	80005a36 <_vfprintf_r+0x6ae>
80005a2c:	fa cb f9 44 	sub	r11,sp,-1724
80005a30:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a34:	c1 f8       	rjmp	80005a72 <_vfprintf_r+0x6ea>
80005a36:	fa c8 f9 50 	sub	r8,sp,-1712
80005a3a:	1a d8       	st.w	--sp,r8
80005a3c:	fa c8 fa b8 	sub	r8,sp,-1352
80005a40:	0c 9b       	mov	r11,r6
80005a42:	1a d8       	st.w	--sp,r8
80005a44:	fa c8 fb b4 	sub	r8,sp,-1100
80005a48:	04 9a       	mov	r10,r2
80005a4a:	1a d8       	st.w	--sp,r8
80005a4c:	08 9c       	mov	r12,r4
80005a4e:	fa c8 f9 40 	sub	r8,sp,-1728
80005a52:	fa c9 ff b4 	sub	r9,sp,-76
80005a56:	fe b0 fb 03 	rcall	8000505c <get_arg>
80005a5a:	2f dd       	sub	sp,-12
80005a5c:	78 0b       	ld.w	r11,r12[0x0]
80005a5e:	c2 48       	rjmp	80005aa6 <_vfprintf_r+0x71e>
80005a60:	ee ca ff ff 	sub	r10,r7,-1
80005a64:	10 37       	cp.w	r7,r8
80005a66:	c0 94       	brge	80005a78 <_vfprintf_r+0x6f0>
80005a68:	fa c9 f9 44 	sub	r9,sp,-1724
80005a6c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a70:	14 97       	mov	r7,r10
80005a72:	ec fb fd 88 	ld.w	r11,r6[-632]
80005a76:	c1 88       	rjmp	80005aa6 <_vfprintf_r+0x71e>
80005a78:	41 09       	lddsp	r9,sp[0x40]
80005a7a:	59 f8       	cp.w	r8,31
80005a7c:	e0 89 00 11 	brgt	80005a9e <_vfprintf_r+0x716>
80005a80:	f2 cb ff fc 	sub	r11,r9,-4
80005a84:	51 0b       	stdsp	sp[0x40],r11
80005a86:	fa c6 f9 44 	sub	r6,sp,-1724
80005a8a:	72 0b       	ld.w	r11,r9[0x0]
80005a8c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005a90:	f3 4b fd 88 	st.w	r9[-632],r11
80005a94:	2f f8       	sub	r8,-1
80005a96:	14 97       	mov	r7,r10
80005a98:	fb 48 06 b4 	st.w	sp[1716],r8
80005a9c:	c0 58       	rjmp	80005aa6 <_vfprintf_r+0x71e>
80005a9e:	72 0b       	ld.w	r11,r9[0x0]
80005aa0:	14 97       	mov	r7,r10
80005aa2:	2f c9       	sub	r9,-4
80005aa4:	51 09       	stdsp	sp[0x40],r9
80005aa6:	50 1b       	stdsp	sp[0x4],r11
80005aa8:	bf 5b       	asr	r11,0x1f
80005aaa:	50 0b       	stdsp	sp[0x0],r11
80005aac:	fa ea 00 00 	ld.d	r10,sp[0]
80005ab0:	58 0a       	cp.w	r10,0
80005ab2:	5c 2b       	cpc	r11
80005ab4:	c0 e4       	brge	80005ad0 <_vfprintf_r+0x748>
80005ab6:	30 08       	mov	r8,0
80005ab8:	fa ea 00 00 	ld.d	r10,sp[0]
80005abc:	30 09       	mov	r9,0
80005abe:	f0 0a 01 0a 	sub	r10,r8,r10
80005ac2:	f2 0b 01 4b 	sbc	r11,r9,r11
80005ac6:	32 d8       	mov	r8,45
80005ac8:	fa eb 00 00 	st.d	sp[0],r10
80005acc:	fb 68 06 bb 	st.b	sp[1723],r8
80005ad0:	30 18       	mov	r8,1
80005ad2:	e0 8f 06 fa 	bral	800068c6 <_vfprintf_r+0x153e>
80005ad6:	50 a7       	stdsp	sp[0x28],r7
80005ad8:	50 80       	stdsp	sp[0x20],r0
80005ada:	0c 97       	mov	r7,r6
80005adc:	04 94       	mov	r4,r2
80005ade:	06 96       	mov	r6,r3
80005ae0:	02 92       	mov	r2,r1
80005ae2:	40 93       	lddsp	r3,sp[0x24]
80005ae4:	10 90       	mov	r0,r8
80005ae6:	40 41       	lddsp	r1,sp[0x10]
80005ae8:	0e 99       	mov	r9,r7
80005aea:	ed b5 00 03 	bld	r5,0x3
80005aee:	c4 11       	brne	80005b70 <_vfprintf_r+0x7e8>
80005af0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005af4:	40 3a       	lddsp	r10,sp[0xc]
80005af6:	58 0a       	cp.w	r10,0
80005af8:	c1 90       	breq	80005b2a <_vfprintf_r+0x7a2>
80005afa:	10 36       	cp.w	r6,r8
80005afc:	c6 45       	brlt	80005bc4 <_vfprintf_r+0x83c>
80005afe:	fa c8 f9 50 	sub	r8,sp,-1712
80005b02:	1a d8       	st.w	--sp,r8
80005b04:	fa c8 fa b8 	sub	r8,sp,-1352
80005b08:	1a d8       	st.w	--sp,r8
80005b0a:	fa c8 fb b4 	sub	r8,sp,-1100
80005b0e:	0c 9b       	mov	r11,r6
80005b10:	1a d8       	st.w	--sp,r8
80005b12:	04 9a       	mov	r10,r2
80005b14:	fa c8 f9 40 	sub	r8,sp,-1728
80005b18:	fa c9 ff b4 	sub	r9,sp,-76
80005b1c:	08 9c       	mov	r12,r4
80005b1e:	fe b0 fa 9f 	rcall	8000505c <get_arg>
80005b22:	2f dd       	sub	sp,-12
80005b24:	78 16       	ld.w	r6,r12[0x4]
80005b26:	50 76       	stdsp	sp[0x1c],r6
80005b28:	c4 88       	rjmp	80005bb8 <_vfprintf_r+0x830>
80005b2a:	2f f7       	sub	r7,-1
80005b2c:	10 39       	cp.w	r9,r8
80005b2e:	c0 c4       	brge	80005b46 <_vfprintf_r+0x7be>
80005b30:	fa ce f9 44 	sub	lr,sp,-1724
80005b34:	fc 06 00 36 	add	r6,lr,r6<<0x3
80005b38:	ec fc fd 8c 	ld.w	r12,r6[-628]
80005b3c:	50 7c       	stdsp	sp[0x1c],r12
80005b3e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005b42:	50 56       	stdsp	sp[0x14],r6
80005b44:	c6 68       	rjmp	80005c10 <_vfprintf_r+0x888>
80005b46:	41 09       	lddsp	r9,sp[0x40]
80005b48:	59 f8       	cp.w	r8,31
80005b4a:	e0 89 00 10 	brgt	80005b6a <_vfprintf_r+0x7e2>
80005b4e:	f2 ca ff f8 	sub	r10,r9,-8
80005b52:	72 1b       	ld.w	r11,r9[0x4]
80005b54:	51 0a       	stdsp	sp[0x40],r10
80005b56:	72 09       	ld.w	r9,r9[0x0]
80005b58:	fa ca f9 44 	sub	r10,sp,-1724
80005b5c:	50 7b       	stdsp	sp[0x1c],r11
80005b5e:	50 59       	stdsp	sp[0x14],r9
80005b60:	f4 08 00 39 	add	r9,r10,r8<<0x3
80005b64:	40 5b       	lddsp	r11,sp[0x14]
80005b66:	40 7a       	lddsp	r10,sp[0x1c]
80005b68:	c4 78       	rjmp	80005bf6 <_vfprintf_r+0x86e>
80005b6a:	72 18       	ld.w	r8,r9[0x4]
80005b6c:	50 78       	stdsp	sp[0x1c],r8
80005b6e:	c4 c8       	rjmp	80005c06 <_vfprintf_r+0x87e>
80005b70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b74:	40 3e       	lddsp	lr,sp[0xc]
80005b76:	58 0e       	cp.w	lr,0
80005b78:	c2 30       	breq	80005bbe <_vfprintf_r+0x836>
80005b7a:	10 36       	cp.w	r6,r8
80005b7c:	c0 94       	brge	80005b8e <_vfprintf_r+0x806>
80005b7e:	fa cc f9 44 	sub	r12,sp,-1724
80005b82:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005b86:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005b8a:	50 7b       	stdsp	sp[0x1c],r11
80005b8c:	cd 9b       	rjmp	80005b3e <_vfprintf_r+0x7b6>
80005b8e:	fa c8 f9 50 	sub	r8,sp,-1712
80005b92:	1a d8       	st.w	--sp,r8
80005b94:	fa c8 fa b8 	sub	r8,sp,-1352
80005b98:	04 9a       	mov	r10,r2
80005b9a:	1a d8       	st.w	--sp,r8
80005b9c:	fa c8 fb b4 	sub	r8,sp,-1100
80005ba0:	0c 9b       	mov	r11,r6
80005ba2:	1a d8       	st.w	--sp,r8
80005ba4:	08 9c       	mov	r12,r4
80005ba6:	fa c8 f9 40 	sub	r8,sp,-1728
80005baa:	fa c9 ff b4 	sub	r9,sp,-76
80005bae:	fe b0 fa 57 	rcall	8000505c <get_arg>
80005bb2:	2f dd       	sub	sp,-12
80005bb4:	78 1a       	ld.w	r10,r12[0x4]
80005bb6:	50 7a       	stdsp	sp[0x1c],r10
80005bb8:	78 0c       	ld.w	r12,r12[0x0]
80005bba:	50 5c       	stdsp	sp[0x14],r12
80005bbc:	c2 a8       	rjmp	80005c10 <_vfprintf_r+0x888>
80005bbe:	2f f7       	sub	r7,-1
80005bc0:	10 39       	cp.w	r9,r8
80005bc2:	c0 94       	brge	80005bd4 <_vfprintf_r+0x84c>
80005bc4:	fa c9 f9 44 	sub	r9,sp,-1724
80005bc8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005bcc:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80005bd0:	50 78       	stdsp	sp[0x1c],r8
80005bd2:	cb 6b       	rjmp	80005b3e <_vfprintf_r+0x7b6>
80005bd4:	41 09       	lddsp	r9,sp[0x40]
80005bd6:	59 f8       	cp.w	r8,31
80005bd8:	e0 89 00 15 	brgt	80005c02 <_vfprintf_r+0x87a>
80005bdc:	f2 ca ff f8 	sub	r10,r9,-8
80005be0:	72 16       	ld.w	r6,r9[0x4]
80005be2:	72 09       	ld.w	r9,r9[0x0]
80005be4:	51 0a       	stdsp	sp[0x40],r10
80005be6:	50 59       	stdsp	sp[0x14],r9
80005be8:	fa ce f9 44 	sub	lr,sp,-1724
80005bec:	50 76       	stdsp	sp[0x1c],r6
80005bee:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005bf2:	40 5b       	lddsp	r11,sp[0x14]
80005bf4:	0c 9a       	mov	r10,r6
80005bf6:	f2 eb fd 88 	st.d	r9[-632],r10
80005bfa:	2f f8       	sub	r8,-1
80005bfc:	fb 48 06 b4 	st.w	sp[1716],r8
80005c00:	c0 88       	rjmp	80005c10 <_vfprintf_r+0x888>
80005c02:	72 1c       	ld.w	r12,r9[0x4]
80005c04:	50 7c       	stdsp	sp[0x1c],r12
80005c06:	f2 c8 ff f8 	sub	r8,r9,-8
80005c0a:	51 08       	stdsp	sp[0x40],r8
80005c0c:	72 09       	ld.w	r9,r9[0x0]
80005c0e:	50 59       	stdsp	sp[0x14],r9
80005c10:	40 5b       	lddsp	r11,sp[0x14]
80005c12:	40 7a       	lddsp	r10,sp[0x1c]
80005c14:	e0 a0 1c ce 	rcall	800095b0 <__isinfd>
80005c18:	18 96       	mov	r6,r12
80005c1a:	c1 70       	breq	80005c48 <_vfprintf_r+0x8c0>
80005c1c:	30 08       	mov	r8,0
80005c1e:	30 09       	mov	r9,0
80005c20:	40 5b       	lddsp	r11,sp[0x14]
80005c22:	40 7a       	lddsp	r10,sp[0x1c]
80005c24:	e0 a0 21 bc 	rcall	80009f9c <__avr32_f64_cmp_lt>
80005c28:	c0 40       	breq	80005c30 <_vfprintf_r+0x8a8>
80005c2a:	32 d8       	mov	r8,45
80005c2c:	fb 68 06 bb 	st.b	sp[1723],r8
80005c30:	fe c8 ab d8 	sub	r8,pc,-21544
80005c34:	fe c6 ab d8 	sub	r6,pc,-21544
80005c38:	a7 d5       	cbr	r5,0x7
80005c3a:	e0 40 00 47 	cp.w	r0,71
80005c3e:	f0 06 17 a0 	movle	r6,r8
80005c42:	30 32       	mov	r2,3
80005c44:	e0 8f 06 ce 	bral	800069e0 <_vfprintf_r+0x1658>
80005c48:	40 5b       	lddsp	r11,sp[0x14]
80005c4a:	40 7a       	lddsp	r10,sp[0x1c]
80005c4c:	e0 a0 1c c7 	rcall	800095da <__isnand>
80005c50:	c0 e0       	breq	80005c6c <_vfprintf_r+0x8e4>
80005c52:	50 26       	stdsp	sp[0x8],r6
80005c54:	fe c8 ab f4 	sub	r8,pc,-21516
80005c58:	fe c6 ab f4 	sub	r6,pc,-21516
80005c5c:	a7 d5       	cbr	r5,0x7
80005c5e:	e0 40 00 47 	cp.w	r0,71
80005c62:	f0 06 17 a0 	movle	r6,r8
80005c66:	30 32       	mov	r2,3
80005c68:	e0 8f 06 c2 	bral	800069ec <_vfprintf_r+0x1664>
80005c6c:	40 2a       	lddsp	r10,sp[0x8]
80005c6e:	5b fa       	cp.w	r10,-1
80005c70:	c0 41       	brne	80005c78 <_vfprintf_r+0x8f0>
80005c72:	30 69       	mov	r9,6
80005c74:	50 29       	stdsp	sp[0x8],r9
80005c76:	c1 18       	rjmp	80005c98 <_vfprintf_r+0x910>
80005c78:	e0 40 00 47 	cp.w	r0,71
80005c7c:	5f 09       	sreq	r9
80005c7e:	e0 40 00 67 	cp.w	r0,103
80005c82:	5f 08       	sreq	r8
80005c84:	f3 e8 10 08 	or	r8,r9,r8
80005c88:	f8 08 18 00 	cp.b	r8,r12
80005c8c:	c0 60       	breq	80005c98 <_vfprintf_r+0x910>
80005c8e:	40 28       	lddsp	r8,sp[0x8]
80005c90:	58 08       	cp.w	r8,0
80005c92:	f9 b8 00 01 	moveq	r8,1
80005c96:	50 28       	stdsp	sp[0x8],r8
80005c98:	40 78       	lddsp	r8,sp[0x1c]
80005c9a:	40 59       	lddsp	r9,sp[0x14]
80005c9c:	fa e9 06 94 	st.d	sp[1684],r8
80005ca0:	a9 a5       	sbr	r5,0x8
80005ca2:	fa f8 06 94 	ld.w	r8,sp[1684]
80005ca6:	58 08       	cp.w	r8,0
80005ca8:	c0 65       	brlt	80005cb4 <_vfprintf_r+0x92c>
80005caa:	40 5e       	lddsp	lr,sp[0x14]
80005cac:	30 0c       	mov	r12,0
80005cae:	50 6e       	stdsp	sp[0x18],lr
80005cb0:	50 9c       	stdsp	sp[0x24],r12
80005cb2:	c0 78       	rjmp	80005cc0 <_vfprintf_r+0x938>
80005cb4:	40 5b       	lddsp	r11,sp[0x14]
80005cb6:	32 da       	mov	r10,45
80005cb8:	ee 1b 80 00 	eorh	r11,0x8000
80005cbc:	50 9a       	stdsp	sp[0x24],r10
80005cbe:	50 6b       	stdsp	sp[0x18],r11
80005cc0:	e0 40 00 46 	cp.w	r0,70
80005cc4:	5f 09       	sreq	r9
80005cc6:	e0 40 00 66 	cp.w	r0,102
80005cca:	5f 08       	sreq	r8
80005ccc:	f3 e8 10 08 	or	r8,r9,r8
80005cd0:	50 48       	stdsp	sp[0x10],r8
80005cd2:	c0 40       	breq	80005cda <_vfprintf_r+0x952>
80005cd4:	40 22       	lddsp	r2,sp[0x8]
80005cd6:	30 39       	mov	r9,3
80005cd8:	c1 08       	rjmp	80005cf8 <_vfprintf_r+0x970>
80005cda:	e0 40 00 45 	cp.w	r0,69
80005cde:	5f 09       	sreq	r9
80005ce0:	e0 40 00 65 	cp.w	r0,101
80005ce4:	5f 08       	sreq	r8
80005ce6:	40 22       	lddsp	r2,sp[0x8]
80005ce8:	10 49       	or	r9,r8
80005cea:	2f f2       	sub	r2,-1
80005cec:	40 46       	lddsp	r6,sp[0x10]
80005cee:	ec 09 18 00 	cp.b	r9,r6
80005cf2:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80005cf6:	30 29       	mov	r9,2
80005cf8:	fa c8 f9 5c 	sub	r8,sp,-1700
80005cfc:	1a d8       	st.w	--sp,r8
80005cfe:	fa c8 f9 54 	sub	r8,sp,-1708
80005d02:	1a d8       	st.w	--sp,r8
80005d04:	fa c8 f9 4c 	sub	r8,sp,-1716
80005d08:	08 9c       	mov	r12,r4
80005d0a:	1a d8       	st.w	--sp,r8
80005d0c:	04 98       	mov	r8,r2
80005d0e:	40 9b       	lddsp	r11,sp[0x24]
80005d10:	40 aa       	lddsp	r10,sp[0x28]
80005d12:	e0 a0 0b c3 	rcall	80007498 <_dtoa_r>
80005d16:	e0 40 00 47 	cp.w	r0,71
80005d1a:	5f 19       	srne	r9
80005d1c:	e0 40 00 67 	cp.w	r0,103
80005d20:	5f 18       	srne	r8
80005d22:	18 96       	mov	r6,r12
80005d24:	2f dd       	sub	sp,-12
80005d26:	f3 e8 00 08 	and	r8,r9,r8
80005d2a:	c0 41       	brne	80005d32 <_vfprintf_r+0x9aa>
80005d2c:	ed b5 00 00 	bld	r5,0x0
80005d30:	c3 01       	brne	80005d90 <_vfprintf_r+0xa08>
80005d32:	ec 02 00 0e 	add	lr,r6,r2
80005d36:	50 3e       	stdsp	sp[0xc],lr
80005d38:	40 4c       	lddsp	r12,sp[0x10]
80005d3a:	58 0c       	cp.w	r12,0
80005d3c:	c1 50       	breq	80005d66 <_vfprintf_r+0x9de>
80005d3e:	0d 89       	ld.ub	r9,r6[0x0]
80005d40:	33 08       	mov	r8,48
80005d42:	f0 09 18 00 	cp.b	r9,r8
80005d46:	c0 b1       	brne	80005d5c <_vfprintf_r+0x9d4>
80005d48:	30 08       	mov	r8,0
80005d4a:	30 09       	mov	r9,0
80005d4c:	40 6b       	lddsp	r11,sp[0x18]
80005d4e:	40 7a       	lddsp	r10,sp[0x1c]
80005d50:	e0 a0 20 df 	rcall	80009f0e <__avr32_f64_cmp_eq>
80005d54:	fb b2 00 01 	rsubeq	r2,1
80005d58:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80005d5c:	40 3b       	lddsp	r11,sp[0xc]
80005d5e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005d62:	10 0b       	add	r11,r8
80005d64:	50 3b       	stdsp	sp[0xc],r11
80005d66:	40 6b       	lddsp	r11,sp[0x18]
80005d68:	30 08       	mov	r8,0
80005d6a:	30 09       	mov	r9,0
80005d6c:	40 7a       	lddsp	r10,sp[0x1c]
80005d6e:	e0 a0 20 d0 	rcall	80009f0e <__avr32_f64_cmp_eq>
80005d72:	c0 90       	breq	80005d84 <_vfprintf_r+0x9fc>
80005d74:	40 3a       	lddsp	r10,sp[0xc]
80005d76:	fb 4a 06 a4 	st.w	sp[1700],r10
80005d7a:	c0 58       	rjmp	80005d84 <_vfprintf_r+0x9fc>
80005d7c:	10 c9       	st.b	r8++,r9
80005d7e:	fb 48 06 a4 	st.w	sp[1700],r8
80005d82:	c0 28       	rjmp	80005d86 <_vfprintf_r+0x9fe>
80005d84:	33 09       	mov	r9,48
80005d86:	fa f8 06 a4 	ld.w	r8,sp[1700]
80005d8a:	40 3e       	lddsp	lr,sp[0xc]
80005d8c:	1c 38       	cp.w	r8,lr
80005d8e:	cf 73       	brcs	80005d7c <_vfprintf_r+0x9f4>
80005d90:	e0 40 00 47 	cp.w	r0,71
80005d94:	5f 09       	sreq	r9
80005d96:	e0 40 00 67 	cp.w	r0,103
80005d9a:	5f 08       	sreq	r8
80005d9c:	f3 e8 10 08 	or	r8,r9,r8
80005da0:	fa f9 06 a4 	ld.w	r9,sp[1700]
80005da4:	0c 19       	sub	r9,r6
80005da6:	50 69       	stdsp	sp[0x18],r9
80005da8:	58 08       	cp.w	r8,0
80005daa:	c0 b0       	breq	80005dc0 <_vfprintf_r+0xa38>
80005dac:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005db0:	5b d8       	cp.w	r8,-3
80005db2:	c0 55       	brlt	80005dbc <_vfprintf_r+0xa34>
80005db4:	40 2c       	lddsp	r12,sp[0x8]
80005db6:	18 38       	cp.w	r8,r12
80005db8:	e0 8a 00 6a 	brle	80005e8c <_vfprintf_r+0xb04>
80005dbc:	20 20       	sub	r0,2
80005dbe:	c0 58       	rjmp	80005dc8 <_vfprintf_r+0xa40>
80005dc0:	e0 40 00 65 	cp.w	r0,101
80005dc4:	e0 89 00 46 	brgt	80005e50 <_vfprintf_r+0xac8>
80005dc8:	fa fb 06 ac 	ld.w	r11,sp[1708]
80005dcc:	fb 60 06 9c 	st.b	sp[1692],r0
80005dd0:	20 1b       	sub	r11,1
80005dd2:	fb 4b 06 ac 	st.w	sp[1708],r11
80005dd6:	c0 47       	brpl	80005dde <_vfprintf_r+0xa56>
80005dd8:	5c 3b       	neg	r11
80005dda:	32 d8       	mov	r8,45
80005ddc:	c0 28       	rjmp	80005de0 <_vfprintf_r+0xa58>
80005dde:	32 b8       	mov	r8,43
80005de0:	fb 68 06 9d 	st.b	sp[1693],r8
80005de4:	58 9b       	cp.w	r11,9
80005de6:	e0 8a 00 1d 	brle	80005e20 <_vfprintf_r+0xa98>
80005dea:	fa c9 fa 35 	sub	r9,sp,-1483
80005dee:	30 aa       	mov	r10,10
80005df0:	12 98       	mov	r8,r9
80005df2:	0e 9c       	mov	r12,r7
80005df4:	0c 92       	mov	r2,r6
80005df6:	f6 0a 0c 06 	divs	r6,r11,r10
80005dfa:	0e 9b       	mov	r11,r7
80005dfc:	2d 0b       	sub	r11,-48
80005dfe:	10 fb       	st.b	--r8,r11
80005e00:	0c 9b       	mov	r11,r6
80005e02:	58 96       	cp.w	r6,9
80005e04:	fe 99 ff f9 	brgt	80005df6 <_vfprintf_r+0xa6e>
80005e08:	2d 0b       	sub	r11,-48
80005e0a:	18 97       	mov	r7,r12
80005e0c:	04 96       	mov	r6,r2
80005e0e:	10 fb       	st.b	--r8,r11
80005e10:	fa ca f9 62 	sub	r10,sp,-1694
80005e14:	c0 38       	rjmp	80005e1a <_vfprintf_r+0xa92>
80005e16:	11 3b       	ld.ub	r11,r8++
80005e18:	14 cb       	st.b	r10++,r11
80005e1a:	12 38       	cp.w	r8,r9
80005e1c:	cf d3       	brcs	80005e16 <_vfprintf_r+0xa8e>
80005e1e:	c0 98       	rjmp	80005e30 <_vfprintf_r+0xaa8>
80005e20:	2d 0b       	sub	r11,-48
80005e22:	33 08       	mov	r8,48
80005e24:	fb 6b 06 9f 	st.b	sp[1695],r11
80005e28:	fb 68 06 9e 	st.b	sp[1694],r8
80005e2c:	fa ca f9 60 	sub	r10,sp,-1696
80005e30:	fa c8 f9 64 	sub	r8,sp,-1692
80005e34:	f4 08 01 08 	sub	r8,r10,r8
80005e38:	50 e8       	stdsp	sp[0x38],r8
80005e3a:	10 92       	mov	r2,r8
80005e3c:	40 6b       	lddsp	r11,sp[0x18]
80005e3e:	16 02       	add	r2,r11
80005e40:	58 1b       	cp.w	r11,1
80005e42:	e0 89 00 05 	brgt	80005e4c <_vfprintf_r+0xac4>
80005e46:	ed b5 00 00 	bld	r5,0x0
80005e4a:	c3 51       	brne	80005eb4 <_vfprintf_r+0xb2c>
80005e4c:	2f f2       	sub	r2,-1
80005e4e:	c3 38       	rjmp	80005eb4 <_vfprintf_r+0xb2c>
80005e50:	e0 40 00 66 	cp.w	r0,102
80005e54:	c1 c1       	brne	80005e8c <_vfprintf_r+0xb04>
80005e56:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005e5a:	58 02       	cp.w	r2,0
80005e5c:	e0 8a 00 0c 	brle	80005e74 <_vfprintf_r+0xaec>
80005e60:	40 2a       	lddsp	r10,sp[0x8]
80005e62:	58 0a       	cp.w	r10,0
80005e64:	c0 41       	brne	80005e6c <_vfprintf_r+0xae4>
80005e66:	ed b5 00 00 	bld	r5,0x0
80005e6a:	c2 51       	brne	80005eb4 <_vfprintf_r+0xb2c>
80005e6c:	2f f2       	sub	r2,-1
80005e6e:	40 29       	lddsp	r9,sp[0x8]
80005e70:	12 02       	add	r2,r9
80005e72:	c0 b8       	rjmp	80005e88 <_vfprintf_r+0xb00>
80005e74:	40 28       	lddsp	r8,sp[0x8]
80005e76:	58 08       	cp.w	r8,0
80005e78:	c0 61       	brne	80005e84 <_vfprintf_r+0xafc>
80005e7a:	ed b5 00 00 	bld	r5,0x0
80005e7e:	c0 30       	breq	80005e84 <_vfprintf_r+0xafc>
80005e80:	30 12       	mov	r2,1
80005e82:	c1 98       	rjmp	80005eb4 <_vfprintf_r+0xb2c>
80005e84:	40 22       	lddsp	r2,sp[0x8]
80005e86:	2f e2       	sub	r2,-2
80005e88:	36 60       	mov	r0,102
80005e8a:	c1 58       	rjmp	80005eb4 <_vfprintf_r+0xb2c>
80005e8c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005e90:	40 6e       	lddsp	lr,sp[0x18]
80005e92:	1c 32       	cp.w	r2,lr
80005e94:	c0 65       	brlt	80005ea0 <_vfprintf_r+0xb18>
80005e96:	ed b5 00 00 	bld	r5,0x0
80005e9a:	f7 b2 00 ff 	subeq	r2,-1
80005e9e:	c0 a8       	rjmp	80005eb2 <_vfprintf_r+0xb2a>
80005ea0:	e4 08 11 02 	rsub	r8,r2,2
80005ea4:	40 6c       	lddsp	r12,sp[0x18]
80005ea6:	58 02       	cp.w	r2,0
80005ea8:	f0 02 17 a0 	movle	r2,r8
80005eac:	f9 b2 09 01 	movgt	r2,1
80005eb0:	18 02       	add	r2,r12
80005eb2:	36 70       	mov	r0,103
80005eb4:	40 9b       	lddsp	r11,sp[0x24]
80005eb6:	58 0b       	cp.w	r11,0
80005eb8:	e0 80 05 94 	breq	800069e0 <_vfprintf_r+0x1658>
80005ebc:	32 d8       	mov	r8,45
80005ebe:	fb 68 06 bb 	st.b	sp[1723],r8
80005ec2:	e0 8f 05 93 	bral	800069e8 <_vfprintf_r+0x1660>
80005ec6:	50 a7       	stdsp	sp[0x28],r7
80005ec8:	04 94       	mov	r4,r2
80005eca:	0c 97       	mov	r7,r6
80005ecc:	02 92       	mov	r2,r1
80005ece:	06 96       	mov	r6,r3
80005ed0:	40 41       	lddsp	r1,sp[0x10]
80005ed2:	40 93       	lddsp	r3,sp[0x24]
80005ed4:	0e 99       	mov	r9,r7
80005ed6:	ed b5 00 05 	bld	r5,0x5
80005eda:	c4 81       	brne	80005f6a <_vfprintf_r+0xbe2>
80005edc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005ee0:	40 3e       	lddsp	lr,sp[0xc]
80005ee2:	58 0e       	cp.w	lr,0
80005ee4:	c1 d0       	breq	80005f1e <_vfprintf_r+0xb96>
80005ee6:	10 36       	cp.w	r6,r8
80005ee8:	c0 64       	brge	80005ef4 <_vfprintf_r+0xb6c>
80005eea:	fa cc f9 44 	sub	r12,sp,-1724
80005eee:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005ef2:	c1 d8       	rjmp	80005f2c <_vfprintf_r+0xba4>
80005ef4:	fa c8 f9 50 	sub	r8,sp,-1712
80005ef8:	1a d8       	st.w	--sp,r8
80005efa:	fa c8 fa b8 	sub	r8,sp,-1352
80005efe:	04 9a       	mov	r10,r2
80005f00:	1a d8       	st.w	--sp,r8
80005f02:	fa c8 fb b4 	sub	r8,sp,-1100
80005f06:	0c 9b       	mov	r11,r6
80005f08:	1a d8       	st.w	--sp,r8
80005f0a:	08 9c       	mov	r12,r4
80005f0c:	fa c8 f9 40 	sub	r8,sp,-1728
80005f10:	fa c9 ff b4 	sub	r9,sp,-76
80005f14:	fe b0 f8 a4 	rcall	8000505c <get_arg>
80005f18:	2f dd       	sub	sp,-12
80005f1a:	78 0a       	ld.w	r10,r12[0x0]
80005f1c:	c2 08       	rjmp	80005f5c <_vfprintf_r+0xbd4>
80005f1e:	2f f7       	sub	r7,-1
80005f20:	10 39       	cp.w	r9,r8
80005f22:	c0 84       	brge	80005f32 <_vfprintf_r+0xbaa>
80005f24:	fa cb f9 44 	sub	r11,sp,-1724
80005f28:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005f2c:	ec fa fd 88 	ld.w	r10,r6[-632]
80005f30:	c1 68       	rjmp	80005f5c <_vfprintf_r+0xbd4>
80005f32:	41 09       	lddsp	r9,sp[0x40]
80005f34:	59 f8       	cp.w	r8,31
80005f36:	e0 89 00 10 	brgt	80005f56 <_vfprintf_r+0xbce>
80005f3a:	f2 ca ff fc 	sub	r10,r9,-4
80005f3e:	51 0a       	stdsp	sp[0x40],r10
80005f40:	fa c6 f9 44 	sub	r6,sp,-1724
80005f44:	72 0a       	ld.w	r10,r9[0x0]
80005f46:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005f4a:	f3 4a fd 88 	st.w	r9[-632],r10
80005f4e:	2f f8       	sub	r8,-1
80005f50:	fb 48 06 b4 	st.w	sp[1716],r8
80005f54:	c0 48       	rjmp	80005f5c <_vfprintf_r+0xbd4>
80005f56:	72 0a       	ld.w	r10,r9[0x0]
80005f58:	2f c9       	sub	r9,-4
80005f5a:	51 09       	stdsp	sp[0x40],r9
80005f5c:	40 be       	lddsp	lr,sp[0x2c]
80005f5e:	1c 98       	mov	r8,lr
80005f60:	95 1e       	st.w	r10[0x4],lr
80005f62:	bf 58       	asr	r8,0x1f
80005f64:	95 08       	st.w	r10[0x0],r8
80005f66:	fe 9f fa 9f 	bral	800054a4 <_vfprintf_r+0x11c>
80005f6a:	ed b5 00 04 	bld	r5,0x4
80005f6e:	c4 80       	breq	80005ffe <_vfprintf_r+0xc76>
80005f70:	e2 15 00 40 	andl	r5,0x40,COH
80005f74:	c4 50       	breq	80005ffe <_vfprintf_r+0xc76>
80005f76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f7a:	40 3c       	lddsp	r12,sp[0xc]
80005f7c:	58 0c       	cp.w	r12,0
80005f7e:	c1 d0       	breq	80005fb8 <_vfprintf_r+0xc30>
80005f80:	10 36       	cp.w	r6,r8
80005f82:	c0 64       	brge	80005f8e <_vfprintf_r+0xc06>
80005f84:	fa cb f9 44 	sub	r11,sp,-1724
80005f88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005f8c:	c1 d8       	rjmp	80005fc6 <_vfprintf_r+0xc3e>
80005f8e:	fa c8 f9 50 	sub	r8,sp,-1712
80005f92:	1a d8       	st.w	--sp,r8
80005f94:	fa c8 fa b8 	sub	r8,sp,-1352
80005f98:	04 9a       	mov	r10,r2
80005f9a:	1a d8       	st.w	--sp,r8
80005f9c:	fa c8 fb b4 	sub	r8,sp,-1100
80005fa0:	0c 9b       	mov	r11,r6
80005fa2:	1a d8       	st.w	--sp,r8
80005fa4:	08 9c       	mov	r12,r4
80005fa6:	fa c8 f9 40 	sub	r8,sp,-1728
80005faa:	fa c9 ff b4 	sub	r9,sp,-76
80005fae:	fe b0 f8 57 	rcall	8000505c <get_arg>
80005fb2:	2f dd       	sub	sp,-12
80005fb4:	78 0a       	ld.w	r10,r12[0x0]
80005fb6:	c2 08       	rjmp	80005ff6 <_vfprintf_r+0xc6e>
80005fb8:	2f f7       	sub	r7,-1
80005fba:	10 39       	cp.w	r9,r8
80005fbc:	c0 84       	brge	80005fcc <_vfprintf_r+0xc44>
80005fbe:	fa ca f9 44 	sub	r10,sp,-1724
80005fc2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005fc6:	ec fa fd 88 	ld.w	r10,r6[-632]
80005fca:	c1 68       	rjmp	80005ff6 <_vfprintf_r+0xc6e>
80005fcc:	41 09       	lddsp	r9,sp[0x40]
80005fce:	59 f8       	cp.w	r8,31
80005fd0:	e0 89 00 10 	brgt	80005ff0 <_vfprintf_r+0xc68>
80005fd4:	f2 ca ff fc 	sub	r10,r9,-4
80005fd8:	51 0a       	stdsp	sp[0x40],r10
80005fda:	fa c6 f9 44 	sub	r6,sp,-1724
80005fde:	72 0a       	ld.w	r10,r9[0x0]
80005fe0:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005fe4:	f3 4a fd 88 	st.w	r9[-632],r10
80005fe8:	2f f8       	sub	r8,-1
80005fea:	fb 48 06 b4 	st.w	sp[1716],r8
80005fee:	c0 48       	rjmp	80005ff6 <_vfprintf_r+0xc6e>
80005ff0:	72 0a       	ld.w	r10,r9[0x0]
80005ff2:	2f c9       	sub	r9,-4
80005ff4:	51 09       	stdsp	sp[0x40],r9
80005ff6:	40 be       	lddsp	lr,sp[0x2c]
80005ff8:	b4 0e       	st.h	r10[0x0],lr
80005ffa:	fe 9f fa 55 	bral	800054a4 <_vfprintf_r+0x11c>
80005ffe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006002:	40 3c       	lddsp	r12,sp[0xc]
80006004:	58 0c       	cp.w	r12,0
80006006:	c1 d0       	breq	80006040 <_vfprintf_r+0xcb8>
80006008:	10 36       	cp.w	r6,r8
8000600a:	c0 64       	brge	80006016 <_vfprintf_r+0xc8e>
8000600c:	fa cb f9 44 	sub	r11,sp,-1724
80006010:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006014:	c1 d8       	rjmp	8000604e <_vfprintf_r+0xcc6>
80006016:	fa c8 f9 50 	sub	r8,sp,-1712
8000601a:	1a d8       	st.w	--sp,r8
8000601c:	fa c8 fa b8 	sub	r8,sp,-1352
80006020:	04 9a       	mov	r10,r2
80006022:	1a d8       	st.w	--sp,r8
80006024:	fa c8 fb b4 	sub	r8,sp,-1100
80006028:	0c 9b       	mov	r11,r6
8000602a:	1a d8       	st.w	--sp,r8
8000602c:	08 9c       	mov	r12,r4
8000602e:	fa c8 f9 40 	sub	r8,sp,-1728
80006032:	fa c9 ff b4 	sub	r9,sp,-76
80006036:	fe b0 f8 13 	rcall	8000505c <get_arg>
8000603a:	2f dd       	sub	sp,-12
8000603c:	78 0a       	ld.w	r10,r12[0x0]
8000603e:	c2 08       	rjmp	8000607e <_vfprintf_r+0xcf6>
80006040:	2f f7       	sub	r7,-1
80006042:	10 39       	cp.w	r9,r8
80006044:	c0 84       	brge	80006054 <_vfprintf_r+0xccc>
80006046:	fa ca f9 44 	sub	r10,sp,-1724
8000604a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000604e:	ec fa fd 88 	ld.w	r10,r6[-632]
80006052:	c1 68       	rjmp	8000607e <_vfprintf_r+0xcf6>
80006054:	41 09       	lddsp	r9,sp[0x40]
80006056:	59 f8       	cp.w	r8,31
80006058:	e0 89 00 10 	brgt	80006078 <_vfprintf_r+0xcf0>
8000605c:	f2 ca ff fc 	sub	r10,r9,-4
80006060:	51 0a       	stdsp	sp[0x40],r10
80006062:	fa c6 f9 44 	sub	r6,sp,-1724
80006066:	72 0a       	ld.w	r10,r9[0x0]
80006068:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000606c:	f3 4a fd 88 	st.w	r9[-632],r10
80006070:	2f f8       	sub	r8,-1
80006072:	fb 48 06 b4 	st.w	sp[1716],r8
80006076:	c0 48       	rjmp	8000607e <_vfprintf_r+0xcf6>
80006078:	72 0a       	ld.w	r10,r9[0x0]
8000607a:	2f c9       	sub	r9,-4
8000607c:	51 09       	stdsp	sp[0x40],r9
8000607e:	40 be       	lddsp	lr,sp[0x2c]
80006080:	95 0e       	st.w	r10[0x0],lr
80006082:	fe 9f fa 11 	bral	800054a4 <_vfprintf_r+0x11c>
80006086:	50 a7       	stdsp	sp[0x28],r7
80006088:	50 80       	stdsp	sp[0x20],r0
8000608a:	0c 97       	mov	r7,r6
8000608c:	04 94       	mov	r4,r2
8000608e:	06 96       	mov	r6,r3
80006090:	02 92       	mov	r2,r1
80006092:	40 93       	lddsp	r3,sp[0x24]
80006094:	10 90       	mov	r0,r8
80006096:	40 41       	lddsp	r1,sp[0x10]
80006098:	a5 a5       	sbr	r5,0x4
8000609a:	c0 a8       	rjmp	800060ae <_vfprintf_r+0xd26>
8000609c:	50 a7       	stdsp	sp[0x28],r7
8000609e:	50 80       	stdsp	sp[0x20],r0
800060a0:	0c 97       	mov	r7,r6
800060a2:	04 94       	mov	r4,r2
800060a4:	06 96       	mov	r6,r3
800060a6:	02 92       	mov	r2,r1
800060a8:	40 93       	lddsp	r3,sp[0x24]
800060aa:	10 90       	mov	r0,r8
800060ac:	40 41       	lddsp	r1,sp[0x10]
800060ae:	ed b5 00 05 	bld	r5,0x5
800060b2:	c5 d1       	brne	8000616c <_vfprintf_r+0xde4>
800060b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800060b8:	40 3c       	lddsp	r12,sp[0xc]
800060ba:	58 0c       	cp.w	r12,0
800060bc:	c2 60       	breq	80006108 <_vfprintf_r+0xd80>
800060be:	10 36       	cp.w	r6,r8
800060c0:	c0 a4       	brge	800060d4 <_vfprintf_r+0xd4c>
800060c2:	fa cb f9 44 	sub	r11,sp,-1724
800060c6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800060ca:	ec e8 fd 88 	ld.d	r8,r6[-632]
800060ce:	fa e9 00 00 	st.d	sp[0],r8
800060d2:	c1 88       	rjmp	80006102 <_vfprintf_r+0xd7a>
800060d4:	fa c8 f9 50 	sub	r8,sp,-1712
800060d8:	1a d8       	st.w	--sp,r8
800060da:	fa c8 fa b8 	sub	r8,sp,-1352
800060de:	04 9a       	mov	r10,r2
800060e0:	1a d8       	st.w	--sp,r8
800060e2:	0c 9b       	mov	r11,r6
800060e4:	fa c8 fb b4 	sub	r8,sp,-1100
800060e8:	08 9c       	mov	r12,r4
800060ea:	1a d8       	st.w	--sp,r8
800060ec:	fa c8 f9 40 	sub	r8,sp,-1728
800060f0:	fa c9 ff b4 	sub	r9,sp,-76
800060f4:	fe b0 f7 b4 	rcall	8000505c <get_arg>
800060f8:	2f dd       	sub	sp,-12
800060fa:	f8 ea 00 00 	ld.d	r10,r12[0]
800060fe:	fa eb 00 00 	st.d	sp[0],r10
80006102:	30 08       	mov	r8,0
80006104:	e0 8f 03 de 	bral	800068c0 <_vfprintf_r+0x1538>
80006108:	ee ca ff ff 	sub	r10,r7,-1
8000610c:	10 37       	cp.w	r7,r8
8000610e:	c0 b4       	brge	80006124 <_vfprintf_r+0xd9c>
80006110:	fa c9 f9 44 	sub	r9,sp,-1724
80006114:	14 97       	mov	r7,r10
80006116:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000611a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000611e:	fa eb 00 00 	st.d	sp[0],r10
80006122:	c1 88       	rjmp	80006152 <_vfprintf_r+0xdca>
80006124:	41 09       	lddsp	r9,sp[0x40]
80006126:	59 f8       	cp.w	r8,31
80006128:	e0 89 00 18 	brgt	80006158 <_vfprintf_r+0xdd0>
8000612c:	f2 e6 00 00 	ld.d	r6,r9[0]
80006130:	f2 cb ff f8 	sub	r11,r9,-8
80006134:	fa e7 00 00 	st.d	sp[0],r6
80006138:	51 0b       	stdsp	sp[0x40],r11
8000613a:	fa c6 f9 44 	sub	r6,sp,-1724
8000613e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006142:	fa e6 00 00 	ld.d	r6,sp[0]
80006146:	f2 e7 fd 88 	st.d	r9[-632],r6
8000614a:	2f f8       	sub	r8,-1
8000614c:	14 97       	mov	r7,r10
8000614e:	fb 48 06 b4 	st.w	sp[1716],r8
80006152:	40 38       	lddsp	r8,sp[0xc]
80006154:	e0 8f 03 b6 	bral	800068c0 <_vfprintf_r+0x1538>
80006158:	f2 e6 00 00 	ld.d	r6,r9[0]
8000615c:	40 38       	lddsp	r8,sp[0xc]
8000615e:	fa e7 00 00 	st.d	sp[0],r6
80006162:	2f 89       	sub	r9,-8
80006164:	14 97       	mov	r7,r10
80006166:	51 09       	stdsp	sp[0x40],r9
80006168:	e0 8f 03 ac 	bral	800068c0 <_vfprintf_r+0x1538>
8000616c:	ed b5 00 04 	bld	r5,0x4
80006170:	c1 61       	brne	8000619c <_vfprintf_r+0xe14>
80006172:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006176:	40 3e       	lddsp	lr,sp[0xc]
80006178:	58 0e       	cp.w	lr,0
8000617a:	c0 80       	breq	8000618a <_vfprintf_r+0xe02>
8000617c:	10 36       	cp.w	r6,r8
8000617e:	c6 74       	brge	8000624c <_vfprintf_r+0xec4>
80006180:	fa cc f9 44 	sub	r12,sp,-1724
80006184:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006188:	c8 08       	rjmp	80006288 <_vfprintf_r+0xf00>
8000618a:	ee ca ff ff 	sub	r10,r7,-1
8000618e:	10 37       	cp.w	r7,r8
80006190:	c7 f4       	brge	8000628e <_vfprintf_r+0xf06>
80006192:	fa cb f9 44 	sub	r11,sp,-1724
80006196:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000619a:	c7 68       	rjmp	80006286 <_vfprintf_r+0xefe>
8000619c:	ed b5 00 06 	bld	r5,0x6
800061a0:	c4 a1       	brne	80006234 <_vfprintf_r+0xeac>
800061a2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800061a6:	40 3c       	lddsp	r12,sp[0xc]
800061a8:	58 0c       	cp.w	r12,0
800061aa:	c1 d0       	breq	800061e4 <_vfprintf_r+0xe5c>
800061ac:	10 36       	cp.w	r6,r8
800061ae:	c0 64       	brge	800061ba <_vfprintf_r+0xe32>
800061b0:	fa cb f9 44 	sub	r11,sp,-1724
800061b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800061b8:	c1 f8       	rjmp	800061f6 <_vfprintf_r+0xe6e>
800061ba:	fa c8 f9 50 	sub	r8,sp,-1712
800061be:	1a d8       	st.w	--sp,r8
800061c0:	fa c8 fa b8 	sub	r8,sp,-1352
800061c4:	1a d8       	st.w	--sp,r8
800061c6:	fa c8 fb b4 	sub	r8,sp,-1100
800061ca:	1a d8       	st.w	--sp,r8
800061cc:	fa c8 f9 40 	sub	r8,sp,-1728
800061d0:	fa c9 ff b4 	sub	r9,sp,-76
800061d4:	04 9a       	mov	r10,r2
800061d6:	0c 9b       	mov	r11,r6
800061d8:	08 9c       	mov	r12,r4
800061da:	fe b0 f7 41 	rcall	8000505c <get_arg>
800061de:	2f dd       	sub	sp,-12
800061e0:	98 18       	ld.sh	r8,r12[0x2]
800061e2:	c2 68       	rjmp	8000622e <_vfprintf_r+0xea6>
800061e4:	ee ca ff ff 	sub	r10,r7,-1
800061e8:	10 37       	cp.w	r7,r8
800061ea:	c0 94       	brge	800061fc <_vfprintf_r+0xe74>
800061ec:	fa c9 f9 44 	sub	r9,sp,-1724
800061f0:	14 97       	mov	r7,r10
800061f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800061f6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800061fa:	c1 a8       	rjmp	8000622e <_vfprintf_r+0xea6>
800061fc:	41 09       	lddsp	r9,sp[0x40]
800061fe:	59 f8       	cp.w	r8,31
80006200:	e0 89 00 13 	brgt	80006226 <_vfprintf_r+0xe9e>
80006204:	f2 cb ff fc 	sub	r11,r9,-4
80006208:	51 0b       	stdsp	sp[0x40],r11
8000620a:	72 09       	ld.w	r9,r9[0x0]
8000620c:	fa c6 f9 44 	sub	r6,sp,-1724
80006210:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006214:	2f f8       	sub	r8,-1
80006216:	f7 49 fd 88 	st.w	r11[-632],r9
8000621a:	fb 48 06 b4 	st.w	sp[1716],r8
8000621e:	14 97       	mov	r7,r10
80006220:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006224:	c0 58       	rjmp	8000622e <_vfprintf_r+0xea6>
80006226:	92 18       	ld.sh	r8,r9[0x2]
80006228:	14 97       	mov	r7,r10
8000622a:	2f c9       	sub	r9,-4
8000622c:	51 09       	stdsp	sp[0x40],r9
8000622e:	5c 78       	castu.h	r8
80006230:	50 18       	stdsp	sp[0x4],r8
80006232:	c4 68       	rjmp	800062be <_vfprintf_r+0xf36>
80006234:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006238:	40 3c       	lddsp	r12,sp[0xc]
8000623a:	58 0c       	cp.w	r12,0
8000623c:	c1 d0       	breq	80006276 <_vfprintf_r+0xeee>
8000623e:	10 36       	cp.w	r6,r8
80006240:	c0 64       	brge	8000624c <_vfprintf_r+0xec4>
80006242:	fa cb f9 44 	sub	r11,sp,-1724
80006246:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000624a:	c1 f8       	rjmp	80006288 <_vfprintf_r+0xf00>
8000624c:	fa c8 f9 50 	sub	r8,sp,-1712
80006250:	1a d8       	st.w	--sp,r8
80006252:	fa c8 fa b8 	sub	r8,sp,-1352
80006256:	0c 9b       	mov	r11,r6
80006258:	1a d8       	st.w	--sp,r8
8000625a:	fa c8 fb b4 	sub	r8,sp,-1100
8000625e:	04 9a       	mov	r10,r2
80006260:	1a d8       	st.w	--sp,r8
80006262:	08 9c       	mov	r12,r4
80006264:	fa c8 f9 40 	sub	r8,sp,-1728
80006268:	fa c9 ff b4 	sub	r9,sp,-76
8000626c:	fe b0 f6 f8 	rcall	8000505c <get_arg>
80006270:	2f dd       	sub	sp,-12
80006272:	78 0b       	ld.w	r11,r12[0x0]
80006274:	c2 48       	rjmp	800062bc <_vfprintf_r+0xf34>
80006276:	ee ca ff ff 	sub	r10,r7,-1
8000627a:	10 37       	cp.w	r7,r8
8000627c:	c0 94       	brge	8000628e <_vfprintf_r+0xf06>
8000627e:	fa c9 f9 44 	sub	r9,sp,-1724
80006282:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006286:	14 97       	mov	r7,r10
80006288:	ec fb fd 88 	ld.w	r11,r6[-632]
8000628c:	c1 88       	rjmp	800062bc <_vfprintf_r+0xf34>
8000628e:	41 09       	lddsp	r9,sp[0x40]
80006290:	59 f8       	cp.w	r8,31
80006292:	e0 89 00 11 	brgt	800062b4 <_vfprintf_r+0xf2c>
80006296:	f2 cb ff fc 	sub	r11,r9,-4
8000629a:	51 0b       	stdsp	sp[0x40],r11
8000629c:	fa c6 f9 44 	sub	r6,sp,-1724
800062a0:	72 0b       	ld.w	r11,r9[0x0]
800062a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800062a6:	f3 4b fd 88 	st.w	r9[-632],r11
800062aa:	2f f8       	sub	r8,-1
800062ac:	14 97       	mov	r7,r10
800062ae:	fb 48 06 b4 	st.w	sp[1716],r8
800062b2:	c0 58       	rjmp	800062bc <_vfprintf_r+0xf34>
800062b4:	72 0b       	ld.w	r11,r9[0x0]
800062b6:	14 97       	mov	r7,r10
800062b8:	2f c9       	sub	r9,-4
800062ba:	51 09       	stdsp	sp[0x40],r9
800062bc:	50 1b       	stdsp	sp[0x4],r11
800062be:	30 0e       	mov	lr,0
800062c0:	50 0e       	stdsp	sp[0x0],lr
800062c2:	1c 98       	mov	r8,lr
800062c4:	e0 8f 02 fe 	bral	800068c0 <_vfprintf_r+0x1538>
800062c8:	50 a7       	stdsp	sp[0x28],r7
800062ca:	50 80       	stdsp	sp[0x20],r0
800062cc:	0c 97       	mov	r7,r6
800062ce:	04 94       	mov	r4,r2
800062d0:	06 96       	mov	r6,r3
800062d2:	02 92       	mov	r2,r1
800062d4:	40 93       	lddsp	r3,sp[0x24]
800062d6:	40 41       	lddsp	r1,sp[0x10]
800062d8:	0e 99       	mov	r9,r7
800062da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800062de:	40 3c       	lddsp	r12,sp[0xc]
800062e0:	58 0c       	cp.w	r12,0
800062e2:	c1 d0       	breq	8000631c <_vfprintf_r+0xf94>
800062e4:	10 36       	cp.w	r6,r8
800062e6:	c0 64       	brge	800062f2 <_vfprintf_r+0xf6a>
800062e8:	fa cb f9 44 	sub	r11,sp,-1724
800062ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800062f0:	c1 d8       	rjmp	8000632a <_vfprintf_r+0xfa2>
800062f2:	fa c8 f9 50 	sub	r8,sp,-1712
800062f6:	1a d8       	st.w	--sp,r8
800062f8:	fa c8 fa b8 	sub	r8,sp,-1352
800062fc:	1a d8       	st.w	--sp,r8
800062fe:	fa c8 fb b4 	sub	r8,sp,-1100
80006302:	1a d8       	st.w	--sp,r8
80006304:	fa c9 ff b4 	sub	r9,sp,-76
80006308:	fa c8 f9 40 	sub	r8,sp,-1728
8000630c:	04 9a       	mov	r10,r2
8000630e:	0c 9b       	mov	r11,r6
80006310:	08 9c       	mov	r12,r4
80006312:	fe b0 f6 a5 	rcall	8000505c <get_arg>
80006316:	2f dd       	sub	sp,-12
80006318:	78 09       	ld.w	r9,r12[0x0]
8000631a:	c2 18       	rjmp	8000635c <_vfprintf_r+0xfd4>
8000631c:	2f f7       	sub	r7,-1
8000631e:	10 39       	cp.w	r9,r8
80006320:	c0 84       	brge	80006330 <_vfprintf_r+0xfa8>
80006322:	fa ca f9 44 	sub	r10,sp,-1724
80006326:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000632a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000632e:	c1 78       	rjmp	8000635c <_vfprintf_r+0xfd4>
80006330:	41 09       	lddsp	r9,sp[0x40]
80006332:	59 f8       	cp.w	r8,31
80006334:	e0 89 00 10 	brgt	80006354 <_vfprintf_r+0xfcc>
80006338:	f2 ca ff fc 	sub	r10,r9,-4
8000633c:	51 0a       	stdsp	sp[0x40],r10
8000633e:	fa c6 f9 44 	sub	r6,sp,-1724
80006342:	72 09       	ld.w	r9,r9[0x0]
80006344:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006348:	f5 49 fd 88 	st.w	r10[-632],r9
8000634c:	2f f8       	sub	r8,-1
8000634e:	fb 48 06 b4 	st.w	sp[1716],r8
80006352:	c0 58       	rjmp	8000635c <_vfprintf_r+0xfd4>
80006354:	f2 c8 ff fc 	sub	r8,r9,-4
80006358:	51 08       	stdsp	sp[0x40],r8
8000635a:	72 09       	ld.w	r9,r9[0x0]
8000635c:	33 08       	mov	r8,48
8000635e:	fb 68 06 b8 	st.b	sp[1720],r8
80006362:	37 88       	mov	r8,120
80006364:	30 0e       	mov	lr,0
80006366:	fb 68 06 b9 	st.b	sp[1721],r8
8000636a:	fe cc b3 02 	sub	r12,pc,-19710
8000636e:	50 19       	stdsp	sp[0x4],r9
80006370:	a1 b5       	sbr	r5,0x1
80006372:	50 0e       	stdsp	sp[0x0],lr
80006374:	50 dc       	stdsp	sp[0x34],r12
80006376:	30 28       	mov	r8,2
80006378:	37 80       	mov	r0,120
8000637a:	e0 8f 02 a3 	bral	800068c0 <_vfprintf_r+0x1538>
8000637e:	50 a7       	stdsp	sp[0x28],r7
80006380:	50 80       	stdsp	sp[0x20],r0
80006382:	10 90       	mov	r0,r8
80006384:	30 08       	mov	r8,0
80006386:	fb 68 06 bb 	st.b	sp[1723],r8
8000638a:	0c 97       	mov	r7,r6
8000638c:	04 94       	mov	r4,r2
8000638e:	06 96       	mov	r6,r3
80006390:	02 92       	mov	r2,r1
80006392:	40 93       	lddsp	r3,sp[0x24]
80006394:	40 41       	lddsp	r1,sp[0x10]
80006396:	0e 99       	mov	r9,r7
80006398:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000639c:	40 3b       	lddsp	r11,sp[0xc]
8000639e:	58 0b       	cp.w	r11,0
800063a0:	c1 d0       	breq	800063da <_vfprintf_r+0x1052>
800063a2:	10 36       	cp.w	r6,r8
800063a4:	c0 64       	brge	800063b0 <_vfprintf_r+0x1028>
800063a6:	fa ca f9 44 	sub	r10,sp,-1724
800063aa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800063ae:	c1 d8       	rjmp	800063e8 <_vfprintf_r+0x1060>
800063b0:	fa c8 f9 50 	sub	r8,sp,-1712
800063b4:	1a d8       	st.w	--sp,r8
800063b6:	fa c8 fa b8 	sub	r8,sp,-1352
800063ba:	1a d8       	st.w	--sp,r8
800063bc:	fa c8 fb b4 	sub	r8,sp,-1100
800063c0:	0c 9b       	mov	r11,r6
800063c2:	1a d8       	st.w	--sp,r8
800063c4:	04 9a       	mov	r10,r2
800063c6:	fa c8 f9 40 	sub	r8,sp,-1728
800063ca:	fa c9 ff b4 	sub	r9,sp,-76
800063ce:	08 9c       	mov	r12,r4
800063d0:	fe b0 f6 46 	rcall	8000505c <get_arg>
800063d4:	2f dd       	sub	sp,-12
800063d6:	78 06       	ld.w	r6,r12[0x0]
800063d8:	c2 08       	rjmp	80006418 <_vfprintf_r+0x1090>
800063da:	2f f7       	sub	r7,-1
800063dc:	10 39       	cp.w	r9,r8
800063de:	c0 84       	brge	800063ee <_vfprintf_r+0x1066>
800063e0:	fa c9 f9 44 	sub	r9,sp,-1724
800063e4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800063e8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800063ec:	c1 68       	rjmp	80006418 <_vfprintf_r+0x1090>
800063ee:	41 09       	lddsp	r9,sp[0x40]
800063f0:	59 f8       	cp.w	r8,31
800063f2:	e0 89 00 10 	brgt	80006412 <_vfprintf_r+0x108a>
800063f6:	f2 ca ff fc 	sub	r10,r9,-4
800063fa:	51 0a       	stdsp	sp[0x40],r10
800063fc:	72 06       	ld.w	r6,r9[0x0]
800063fe:	fa ce f9 44 	sub	lr,sp,-1724
80006402:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006406:	f3 46 fd 88 	st.w	r9[-632],r6
8000640a:	2f f8       	sub	r8,-1
8000640c:	fb 48 06 b4 	st.w	sp[1716],r8
80006410:	c0 48       	rjmp	80006418 <_vfprintf_r+0x1090>
80006412:	72 06       	ld.w	r6,r9[0x0]
80006414:	2f c9       	sub	r9,-4
80006416:	51 09       	stdsp	sp[0x40],r9
80006418:	40 2c       	lddsp	r12,sp[0x8]
8000641a:	58 0c       	cp.w	r12,0
8000641c:	c1 05       	brlt	8000643c <_vfprintf_r+0x10b4>
8000641e:	18 9a       	mov	r10,r12
80006420:	30 0b       	mov	r11,0
80006422:	0c 9c       	mov	r12,r6
80006424:	e0 a0 14 50 	rcall	80008cc4 <memchr>
80006428:	e0 80 02 df 	breq	800069e6 <_vfprintf_r+0x165e>
8000642c:	f8 06 01 02 	sub	r2,r12,r6
80006430:	40 2b       	lddsp	r11,sp[0x8]
80006432:	16 32       	cp.w	r2,r11
80006434:	e0 89 02 d9 	brgt	800069e6 <_vfprintf_r+0x165e>
80006438:	e0 8f 02 d4 	bral	800069e0 <_vfprintf_r+0x1658>
8000643c:	30 0a       	mov	r10,0
8000643e:	0c 9c       	mov	r12,r6
80006440:	50 2a       	stdsp	sp[0x8],r10
80006442:	e0 a0 19 23 	rcall	80009688 <strlen>
80006446:	18 92       	mov	r2,r12
80006448:	e0 8f 02 d2 	bral	800069ec <_vfprintf_r+0x1664>
8000644c:	50 a7       	stdsp	sp[0x28],r7
8000644e:	50 80       	stdsp	sp[0x20],r0
80006450:	0c 97       	mov	r7,r6
80006452:	04 94       	mov	r4,r2
80006454:	06 96       	mov	r6,r3
80006456:	02 92       	mov	r2,r1
80006458:	40 93       	lddsp	r3,sp[0x24]
8000645a:	10 90       	mov	r0,r8
8000645c:	40 41       	lddsp	r1,sp[0x10]
8000645e:	a5 a5       	sbr	r5,0x4
80006460:	c0 a8       	rjmp	80006474 <_vfprintf_r+0x10ec>
80006462:	50 a7       	stdsp	sp[0x28],r7
80006464:	50 80       	stdsp	sp[0x20],r0
80006466:	0c 97       	mov	r7,r6
80006468:	04 94       	mov	r4,r2
8000646a:	06 96       	mov	r6,r3
8000646c:	02 92       	mov	r2,r1
8000646e:	40 93       	lddsp	r3,sp[0x24]
80006470:	10 90       	mov	r0,r8
80006472:	40 41       	lddsp	r1,sp[0x10]
80006474:	ed b5 00 05 	bld	r5,0x5
80006478:	c5 61       	brne	80006524 <_vfprintf_r+0x119c>
8000647a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000647e:	40 39       	lddsp	r9,sp[0xc]
80006480:	58 09       	cp.w	r9,0
80006482:	c2 10       	breq	800064c4 <_vfprintf_r+0x113c>
80006484:	10 36       	cp.w	r6,r8
80006486:	c0 74       	brge	80006494 <_vfprintf_r+0x110c>
80006488:	fa c8 f9 44 	sub	r8,sp,-1724
8000648c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006490:	c2 38       	rjmp	800064d6 <_vfprintf_r+0x114e>
80006492:	d7 03       	nop
80006494:	fa c8 f9 50 	sub	r8,sp,-1712
80006498:	1a d8       	st.w	--sp,r8
8000649a:	fa c8 fa b8 	sub	r8,sp,-1352
8000649e:	1a d8       	st.w	--sp,r8
800064a0:	fa c8 fb b4 	sub	r8,sp,-1100
800064a4:	1a d8       	st.w	--sp,r8
800064a6:	fa c8 f9 40 	sub	r8,sp,-1728
800064aa:	fa c9 ff b4 	sub	r9,sp,-76
800064ae:	04 9a       	mov	r10,r2
800064b0:	0c 9b       	mov	r11,r6
800064b2:	08 9c       	mov	r12,r4
800064b4:	fe b0 f5 d4 	rcall	8000505c <get_arg>
800064b8:	2f dd       	sub	sp,-12
800064ba:	f8 e8 00 00 	ld.d	r8,r12[0]
800064be:	fa e9 00 00 	st.d	sp[0],r8
800064c2:	c2 e8       	rjmp	8000651e <_vfprintf_r+0x1196>
800064c4:	ee ca ff ff 	sub	r10,r7,-1
800064c8:	10 37       	cp.w	r7,r8
800064ca:	c0 b4       	brge	800064e0 <_vfprintf_r+0x1158>
800064cc:	fa c8 f9 44 	sub	r8,sp,-1724
800064d0:	14 97       	mov	r7,r10
800064d2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800064d6:	ec ea fd 88 	ld.d	r10,r6[-632]
800064da:	fa eb 00 00 	st.d	sp[0],r10
800064de:	c2 08       	rjmp	8000651e <_vfprintf_r+0x1196>
800064e0:	41 09       	lddsp	r9,sp[0x40]
800064e2:	59 f8       	cp.w	r8,31
800064e4:	e0 89 00 16 	brgt	80006510 <_vfprintf_r+0x1188>
800064e8:	f2 e6 00 00 	ld.d	r6,r9[0]
800064ec:	f2 cb ff f8 	sub	r11,r9,-8
800064f0:	fa e7 00 00 	st.d	sp[0],r6
800064f4:	51 0b       	stdsp	sp[0x40],r11
800064f6:	fa c6 f9 44 	sub	r6,sp,-1724
800064fa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800064fe:	fa e6 00 00 	ld.d	r6,sp[0]
80006502:	f2 e7 fd 88 	st.d	r9[-632],r6
80006506:	2f f8       	sub	r8,-1
80006508:	14 97       	mov	r7,r10
8000650a:	fb 48 06 b4 	st.w	sp[1716],r8
8000650e:	c0 88       	rjmp	8000651e <_vfprintf_r+0x1196>
80006510:	f2 e6 00 00 	ld.d	r6,r9[0]
80006514:	2f 89       	sub	r9,-8
80006516:	fa e7 00 00 	st.d	sp[0],r6
8000651a:	51 09       	stdsp	sp[0x40],r9
8000651c:	14 97       	mov	r7,r10
8000651e:	30 18       	mov	r8,1
80006520:	e0 8f 01 d0 	bral	800068c0 <_vfprintf_r+0x1538>
80006524:	ed b5 00 04 	bld	r5,0x4
80006528:	c1 61       	brne	80006554 <_vfprintf_r+0x11cc>
8000652a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000652e:	40 3e       	lddsp	lr,sp[0xc]
80006530:	58 0e       	cp.w	lr,0
80006532:	c0 80       	breq	80006542 <_vfprintf_r+0x11ba>
80006534:	10 36       	cp.w	r6,r8
80006536:	c6 74       	brge	80006604 <_vfprintf_r+0x127c>
80006538:	fa cc f9 44 	sub	r12,sp,-1724
8000653c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006540:	c8 08       	rjmp	80006640 <_vfprintf_r+0x12b8>
80006542:	ee ca ff ff 	sub	r10,r7,-1
80006546:	10 37       	cp.w	r7,r8
80006548:	c7 f4       	brge	80006646 <_vfprintf_r+0x12be>
8000654a:	fa cb f9 44 	sub	r11,sp,-1724
8000654e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006552:	c7 68       	rjmp	8000663e <_vfprintf_r+0x12b6>
80006554:	ed b5 00 06 	bld	r5,0x6
80006558:	c4 a1       	brne	800065ec <_vfprintf_r+0x1264>
8000655a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000655e:	40 3c       	lddsp	r12,sp[0xc]
80006560:	58 0c       	cp.w	r12,0
80006562:	c1 d0       	breq	8000659c <_vfprintf_r+0x1214>
80006564:	10 36       	cp.w	r6,r8
80006566:	c0 64       	brge	80006572 <_vfprintf_r+0x11ea>
80006568:	fa cb f9 44 	sub	r11,sp,-1724
8000656c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006570:	c1 f8       	rjmp	800065ae <_vfprintf_r+0x1226>
80006572:	fa c8 f9 50 	sub	r8,sp,-1712
80006576:	1a d8       	st.w	--sp,r8
80006578:	fa c8 fa b8 	sub	r8,sp,-1352
8000657c:	1a d8       	st.w	--sp,r8
8000657e:	fa c8 fb b4 	sub	r8,sp,-1100
80006582:	1a d8       	st.w	--sp,r8
80006584:	fa c8 f9 40 	sub	r8,sp,-1728
80006588:	fa c9 ff b4 	sub	r9,sp,-76
8000658c:	04 9a       	mov	r10,r2
8000658e:	0c 9b       	mov	r11,r6
80006590:	08 9c       	mov	r12,r4
80006592:	fe b0 f5 65 	rcall	8000505c <get_arg>
80006596:	2f dd       	sub	sp,-12
80006598:	98 18       	ld.sh	r8,r12[0x2]
8000659a:	c2 68       	rjmp	800065e6 <_vfprintf_r+0x125e>
8000659c:	ee ca ff ff 	sub	r10,r7,-1
800065a0:	10 37       	cp.w	r7,r8
800065a2:	c0 94       	brge	800065b4 <_vfprintf_r+0x122c>
800065a4:	fa c9 f9 44 	sub	r9,sp,-1724
800065a8:	14 97       	mov	r7,r10
800065aa:	f2 06 00 36 	add	r6,r9,r6<<0x3
800065ae:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800065b2:	c1 a8       	rjmp	800065e6 <_vfprintf_r+0x125e>
800065b4:	41 09       	lddsp	r9,sp[0x40]
800065b6:	59 f8       	cp.w	r8,31
800065b8:	e0 89 00 13 	brgt	800065de <_vfprintf_r+0x1256>
800065bc:	f2 cb ff fc 	sub	r11,r9,-4
800065c0:	51 0b       	stdsp	sp[0x40],r11
800065c2:	72 09       	ld.w	r9,r9[0x0]
800065c4:	fa c6 f9 44 	sub	r6,sp,-1724
800065c8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800065cc:	2f f8       	sub	r8,-1
800065ce:	f7 49 fd 88 	st.w	r11[-632],r9
800065d2:	fb 48 06 b4 	st.w	sp[1716],r8
800065d6:	14 97       	mov	r7,r10
800065d8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800065dc:	c0 58       	rjmp	800065e6 <_vfprintf_r+0x125e>
800065de:	92 18       	ld.sh	r8,r9[0x2]
800065e0:	14 97       	mov	r7,r10
800065e2:	2f c9       	sub	r9,-4
800065e4:	51 09       	stdsp	sp[0x40],r9
800065e6:	5c 78       	castu.h	r8
800065e8:	50 18       	stdsp	sp[0x4],r8
800065ea:	c4 68       	rjmp	80006676 <_vfprintf_r+0x12ee>
800065ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065f0:	40 3c       	lddsp	r12,sp[0xc]
800065f2:	58 0c       	cp.w	r12,0
800065f4:	c1 d0       	breq	8000662e <_vfprintf_r+0x12a6>
800065f6:	10 36       	cp.w	r6,r8
800065f8:	c0 64       	brge	80006604 <_vfprintf_r+0x127c>
800065fa:	fa cb f9 44 	sub	r11,sp,-1724
800065fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006602:	c1 f8       	rjmp	80006640 <_vfprintf_r+0x12b8>
80006604:	fa c8 f9 50 	sub	r8,sp,-1712
80006608:	1a d8       	st.w	--sp,r8
8000660a:	fa c8 fa b8 	sub	r8,sp,-1352
8000660e:	0c 9b       	mov	r11,r6
80006610:	1a d8       	st.w	--sp,r8
80006612:	fa c8 fb b4 	sub	r8,sp,-1100
80006616:	04 9a       	mov	r10,r2
80006618:	1a d8       	st.w	--sp,r8
8000661a:	08 9c       	mov	r12,r4
8000661c:	fa c8 f9 40 	sub	r8,sp,-1728
80006620:	fa c9 ff b4 	sub	r9,sp,-76
80006624:	fe b0 f5 1c 	rcall	8000505c <get_arg>
80006628:	2f dd       	sub	sp,-12
8000662a:	78 0b       	ld.w	r11,r12[0x0]
8000662c:	c2 48       	rjmp	80006674 <_vfprintf_r+0x12ec>
8000662e:	ee ca ff ff 	sub	r10,r7,-1
80006632:	10 37       	cp.w	r7,r8
80006634:	c0 94       	brge	80006646 <_vfprintf_r+0x12be>
80006636:	fa c9 f9 44 	sub	r9,sp,-1724
8000663a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000663e:	14 97       	mov	r7,r10
80006640:	ec fb fd 88 	ld.w	r11,r6[-632]
80006644:	c1 88       	rjmp	80006674 <_vfprintf_r+0x12ec>
80006646:	41 09       	lddsp	r9,sp[0x40]
80006648:	59 f8       	cp.w	r8,31
8000664a:	e0 89 00 11 	brgt	8000666c <_vfprintf_r+0x12e4>
8000664e:	f2 cb ff fc 	sub	r11,r9,-4
80006652:	51 0b       	stdsp	sp[0x40],r11
80006654:	fa c6 f9 44 	sub	r6,sp,-1724
80006658:	72 0b       	ld.w	r11,r9[0x0]
8000665a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000665e:	f3 4b fd 88 	st.w	r9[-632],r11
80006662:	2f f8       	sub	r8,-1
80006664:	14 97       	mov	r7,r10
80006666:	fb 48 06 b4 	st.w	sp[1716],r8
8000666a:	c0 58       	rjmp	80006674 <_vfprintf_r+0x12ec>
8000666c:	72 0b       	ld.w	r11,r9[0x0]
8000666e:	14 97       	mov	r7,r10
80006670:	2f c9       	sub	r9,-4
80006672:	51 09       	stdsp	sp[0x40],r9
80006674:	50 1b       	stdsp	sp[0x4],r11
80006676:	30 0e       	mov	lr,0
80006678:	30 18       	mov	r8,1
8000667a:	50 0e       	stdsp	sp[0x0],lr
8000667c:	c2 29       	rjmp	800068c0 <_vfprintf_r+0x1538>
8000667e:	50 a7       	stdsp	sp[0x28],r7
80006680:	50 80       	stdsp	sp[0x20],r0
80006682:	0c 97       	mov	r7,r6
80006684:	04 94       	mov	r4,r2
80006686:	06 96       	mov	r6,r3
80006688:	02 92       	mov	r2,r1
8000668a:	fe cc b6 22 	sub	r12,pc,-18910
8000668e:	40 93       	lddsp	r3,sp[0x24]
80006690:	10 90       	mov	r0,r8
80006692:	40 41       	lddsp	r1,sp[0x10]
80006694:	50 dc       	stdsp	sp[0x34],r12
80006696:	ed b5 00 05 	bld	r5,0x5
8000669a:	c5 51       	brne	80006744 <_vfprintf_r+0x13bc>
8000669c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800066a0:	40 3b       	lddsp	r11,sp[0xc]
800066a2:	58 0b       	cp.w	r11,0
800066a4:	c2 20       	breq	800066e8 <_vfprintf_r+0x1360>
800066a6:	10 36       	cp.w	r6,r8
800066a8:	c0 a4       	brge	800066bc <_vfprintf_r+0x1334>
800066aa:	fa ca f9 44 	sub	r10,sp,-1724
800066ae:	f4 06 00 36 	add	r6,r10,r6<<0x3
800066b2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800066b6:	fa e9 00 00 	st.d	sp[0],r8
800066ba:	cf 28       	rjmp	8000689e <_vfprintf_r+0x1516>
800066bc:	fa c8 f9 50 	sub	r8,sp,-1712
800066c0:	1a d8       	st.w	--sp,r8
800066c2:	fa c8 fa b8 	sub	r8,sp,-1352
800066c6:	04 9a       	mov	r10,r2
800066c8:	1a d8       	st.w	--sp,r8
800066ca:	0c 9b       	mov	r11,r6
800066cc:	fa c8 fb b4 	sub	r8,sp,-1100
800066d0:	08 9c       	mov	r12,r4
800066d2:	1a d8       	st.w	--sp,r8
800066d4:	fa c8 f9 40 	sub	r8,sp,-1728
800066d8:	fa c9 ff b4 	sub	r9,sp,-76
800066dc:	fe b0 f4 c0 	rcall	8000505c <get_arg>
800066e0:	2f dd       	sub	sp,-12
800066e2:	f8 ea 00 00 	ld.d	r10,r12[0]
800066e6:	c0 c8       	rjmp	800066fe <_vfprintf_r+0x1376>
800066e8:	ee ca ff ff 	sub	r10,r7,-1
800066ec:	10 37       	cp.w	r7,r8
800066ee:	c0 b4       	brge	80006704 <_vfprintf_r+0x137c>
800066f0:	fa c9 f9 44 	sub	r9,sp,-1724
800066f4:	14 97       	mov	r7,r10
800066f6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800066fa:	ec ea fd 88 	ld.d	r10,r6[-632]
800066fe:	fa eb 00 00 	st.d	sp[0],r10
80006702:	cc e8       	rjmp	8000689e <_vfprintf_r+0x1516>
80006704:	41 09       	lddsp	r9,sp[0x40]
80006706:	59 f8       	cp.w	r8,31
80006708:	e0 89 00 16 	brgt	80006734 <_vfprintf_r+0x13ac>
8000670c:	f2 e6 00 00 	ld.d	r6,r9[0]
80006710:	f2 cb ff f8 	sub	r11,r9,-8
80006714:	fa e7 00 00 	st.d	sp[0],r6
80006718:	51 0b       	stdsp	sp[0x40],r11
8000671a:	fa c6 f9 44 	sub	r6,sp,-1724
8000671e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006722:	fa e6 00 00 	ld.d	r6,sp[0]
80006726:	f2 e7 fd 88 	st.d	r9[-632],r6
8000672a:	2f f8       	sub	r8,-1
8000672c:	14 97       	mov	r7,r10
8000672e:	fb 48 06 b4 	st.w	sp[1716],r8
80006732:	cb 68       	rjmp	8000689e <_vfprintf_r+0x1516>
80006734:	f2 e6 00 00 	ld.d	r6,r9[0]
80006738:	2f 89       	sub	r9,-8
8000673a:	fa e7 00 00 	st.d	sp[0],r6
8000673e:	51 09       	stdsp	sp[0x40],r9
80006740:	14 97       	mov	r7,r10
80006742:	ca e8       	rjmp	8000689e <_vfprintf_r+0x1516>
80006744:	ed b5 00 04 	bld	r5,0x4
80006748:	c1 71       	brne	80006776 <_vfprintf_r+0x13ee>
8000674a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000674e:	40 3e       	lddsp	lr,sp[0xc]
80006750:	58 0e       	cp.w	lr,0
80006752:	c0 80       	breq	80006762 <_vfprintf_r+0x13da>
80006754:	10 36       	cp.w	r6,r8
80006756:	c6 94       	brge	80006828 <_vfprintf_r+0x14a0>
80006758:	fa cc f9 44 	sub	r12,sp,-1724
8000675c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006760:	c8 28       	rjmp	80006864 <_vfprintf_r+0x14dc>
80006762:	ee ca ff ff 	sub	r10,r7,-1
80006766:	10 37       	cp.w	r7,r8
80006768:	e0 84 00 81 	brge	8000686a <_vfprintf_r+0x14e2>
8000676c:	fa cb f9 44 	sub	r11,sp,-1724
80006770:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006774:	c7 78       	rjmp	80006862 <_vfprintf_r+0x14da>
80006776:	ed b5 00 06 	bld	r5,0x6
8000677a:	c4 b1       	brne	80006810 <_vfprintf_r+0x1488>
8000677c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006780:	40 3c       	lddsp	r12,sp[0xc]
80006782:	58 0c       	cp.w	r12,0
80006784:	c1 d0       	breq	800067be <_vfprintf_r+0x1436>
80006786:	10 36       	cp.w	r6,r8
80006788:	c0 64       	brge	80006794 <_vfprintf_r+0x140c>
8000678a:	fa cb f9 44 	sub	r11,sp,-1724
8000678e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006792:	c1 f8       	rjmp	800067d0 <_vfprintf_r+0x1448>
80006794:	fa c8 f9 50 	sub	r8,sp,-1712
80006798:	1a d8       	st.w	--sp,r8
8000679a:	fa c8 fa b8 	sub	r8,sp,-1352
8000679e:	1a d8       	st.w	--sp,r8
800067a0:	fa c8 fb b4 	sub	r8,sp,-1100
800067a4:	1a d8       	st.w	--sp,r8
800067a6:	fa c8 f9 40 	sub	r8,sp,-1728
800067aa:	fa c9 ff b4 	sub	r9,sp,-76
800067ae:	04 9a       	mov	r10,r2
800067b0:	0c 9b       	mov	r11,r6
800067b2:	08 9c       	mov	r12,r4
800067b4:	fe b0 f4 54 	rcall	8000505c <get_arg>
800067b8:	2f dd       	sub	sp,-12
800067ba:	98 18       	ld.sh	r8,r12[0x2]
800067bc:	c2 78       	rjmp	8000680a <_vfprintf_r+0x1482>
800067be:	ee ca ff ff 	sub	r10,r7,-1
800067c2:	10 37       	cp.w	r7,r8
800067c4:	c0 a4       	brge	800067d8 <_vfprintf_r+0x1450>
800067c6:	fa c9 f9 44 	sub	r9,sp,-1724
800067ca:	14 97       	mov	r7,r10
800067cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800067d0:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800067d4:	c1 b8       	rjmp	8000680a <_vfprintf_r+0x1482>
800067d6:	d7 03       	nop
800067d8:	41 09       	lddsp	r9,sp[0x40]
800067da:	59 f8       	cp.w	r8,31
800067dc:	e0 89 00 13 	brgt	80006802 <_vfprintf_r+0x147a>
800067e0:	f2 cb ff fc 	sub	r11,r9,-4
800067e4:	51 0b       	stdsp	sp[0x40],r11
800067e6:	72 09       	ld.w	r9,r9[0x0]
800067e8:	fa c6 f9 44 	sub	r6,sp,-1724
800067ec:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800067f0:	2f f8       	sub	r8,-1
800067f2:	f7 49 fd 88 	st.w	r11[-632],r9
800067f6:	fb 48 06 b4 	st.w	sp[1716],r8
800067fa:	14 97       	mov	r7,r10
800067fc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006800:	c0 58       	rjmp	8000680a <_vfprintf_r+0x1482>
80006802:	92 18       	ld.sh	r8,r9[0x2]
80006804:	14 97       	mov	r7,r10
80006806:	2f c9       	sub	r9,-4
80006808:	51 09       	stdsp	sp[0x40],r9
8000680a:	5c 78       	castu.h	r8
8000680c:	50 18       	stdsp	sp[0x4],r8
8000680e:	c4 68       	rjmp	8000689a <_vfprintf_r+0x1512>
80006810:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006814:	40 3c       	lddsp	r12,sp[0xc]
80006816:	58 0c       	cp.w	r12,0
80006818:	c1 d0       	breq	80006852 <_vfprintf_r+0x14ca>
8000681a:	10 36       	cp.w	r6,r8
8000681c:	c0 64       	brge	80006828 <_vfprintf_r+0x14a0>
8000681e:	fa cb f9 44 	sub	r11,sp,-1724
80006822:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006826:	c1 f8       	rjmp	80006864 <_vfprintf_r+0x14dc>
80006828:	fa c8 f9 50 	sub	r8,sp,-1712
8000682c:	1a d8       	st.w	--sp,r8
8000682e:	fa c8 fa b8 	sub	r8,sp,-1352
80006832:	0c 9b       	mov	r11,r6
80006834:	1a d8       	st.w	--sp,r8
80006836:	fa c8 fb b4 	sub	r8,sp,-1100
8000683a:	04 9a       	mov	r10,r2
8000683c:	1a d8       	st.w	--sp,r8
8000683e:	08 9c       	mov	r12,r4
80006840:	fa c8 f9 40 	sub	r8,sp,-1728
80006844:	fa c9 ff b4 	sub	r9,sp,-76
80006848:	fe b0 f4 0a 	rcall	8000505c <get_arg>
8000684c:	2f dd       	sub	sp,-12
8000684e:	78 0b       	ld.w	r11,r12[0x0]
80006850:	c2 48       	rjmp	80006898 <_vfprintf_r+0x1510>
80006852:	ee ca ff ff 	sub	r10,r7,-1
80006856:	10 37       	cp.w	r7,r8
80006858:	c0 94       	brge	8000686a <_vfprintf_r+0x14e2>
8000685a:	fa c9 f9 44 	sub	r9,sp,-1724
8000685e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006862:	14 97       	mov	r7,r10
80006864:	ec fb fd 88 	ld.w	r11,r6[-632]
80006868:	c1 88       	rjmp	80006898 <_vfprintf_r+0x1510>
8000686a:	41 09       	lddsp	r9,sp[0x40]
8000686c:	59 f8       	cp.w	r8,31
8000686e:	e0 89 00 11 	brgt	80006890 <_vfprintf_r+0x1508>
80006872:	f2 cb ff fc 	sub	r11,r9,-4
80006876:	51 0b       	stdsp	sp[0x40],r11
80006878:	fa c6 f9 44 	sub	r6,sp,-1724
8000687c:	72 0b       	ld.w	r11,r9[0x0]
8000687e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006882:	f3 4b fd 88 	st.w	r9[-632],r11
80006886:	2f f8       	sub	r8,-1
80006888:	14 97       	mov	r7,r10
8000688a:	fb 48 06 b4 	st.w	sp[1716],r8
8000688e:	c0 58       	rjmp	80006898 <_vfprintf_r+0x1510>
80006890:	72 0b       	ld.w	r11,r9[0x0]
80006892:	14 97       	mov	r7,r10
80006894:	2f c9       	sub	r9,-4
80006896:	51 09       	stdsp	sp[0x40],r9
80006898:	50 1b       	stdsp	sp[0x4],r11
8000689a:	30 0e       	mov	lr,0
8000689c:	50 0e       	stdsp	sp[0x0],lr
8000689e:	40 08       	lddsp	r8,sp[0x0]
800068a0:	40 1c       	lddsp	r12,sp[0x4]
800068a2:	18 48       	or	r8,r12
800068a4:	5f 19       	srne	r9
800068a6:	0a 98       	mov	r8,r5
800068a8:	eb e9 00 09 	and	r9,r5,r9
800068ac:	a1 b8       	sbr	r8,0x1
800068ae:	58 09       	cp.w	r9,0
800068b0:	c0 70       	breq	800068be <_vfprintf_r+0x1536>
800068b2:	10 95       	mov	r5,r8
800068b4:	fb 60 06 b9 	st.b	sp[1721],r0
800068b8:	33 08       	mov	r8,48
800068ba:	fb 68 06 b8 	st.b	sp[1720],r8
800068be:	30 28       	mov	r8,2
800068c0:	30 09       	mov	r9,0
800068c2:	fb 69 06 bb 	st.b	sp[1723],r9
800068c6:	0a 99       	mov	r9,r5
800068c8:	a7 d9       	cbr	r9,0x7
800068ca:	40 2b       	lddsp	r11,sp[0x8]
800068cc:	40 16       	lddsp	r6,sp[0x4]
800068ce:	58 0b       	cp.w	r11,0
800068d0:	5f 1a       	srne	r10
800068d2:	f2 05 17 40 	movge	r5,r9
800068d6:	fa c2 f9 78 	sub	r2,sp,-1672
800068da:	40 09       	lddsp	r9,sp[0x0]
800068dc:	0c 49       	or	r9,r6
800068de:	5f 19       	srne	r9
800068e0:	f5 e9 10 09 	or	r9,r10,r9
800068e4:	c5 c0       	breq	8000699c <_vfprintf_r+0x1614>
800068e6:	30 19       	mov	r9,1
800068e8:	f2 08 18 00 	cp.b	r8,r9
800068ec:	c0 60       	breq	800068f8 <_vfprintf_r+0x1570>
800068ee:	30 29       	mov	r9,2
800068f0:	f2 08 18 00 	cp.b	r8,r9
800068f4:	c0 41       	brne	800068fc <_vfprintf_r+0x1574>
800068f6:	c3 c8       	rjmp	8000696e <_vfprintf_r+0x15e6>
800068f8:	04 96       	mov	r6,r2
800068fa:	c3 08       	rjmp	8000695a <_vfprintf_r+0x15d2>
800068fc:	04 96       	mov	r6,r2
800068fe:	fa e8 00 00 	ld.d	r8,sp[0]
80006902:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006906:	2d 0a       	sub	r10,-48
80006908:	0c fa       	st.b	--r6,r10
8000690a:	f0 0b 16 03 	lsr	r11,r8,0x3
8000690e:	f2 0c 16 03 	lsr	r12,r9,0x3
80006912:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80006916:	18 99       	mov	r9,r12
80006918:	16 98       	mov	r8,r11
8000691a:	58 08       	cp.w	r8,0
8000691c:	5c 29       	cpc	r9
8000691e:	cf 21       	brne	80006902 <_vfprintf_r+0x157a>
80006920:	fa e9 00 00 	st.d	sp[0],r8
80006924:	ed b5 00 00 	bld	r5,0x0
80006928:	c4 51       	brne	800069b2 <_vfprintf_r+0x162a>
8000692a:	33 09       	mov	r9,48
8000692c:	f2 0a 18 00 	cp.b	r10,r9
80006930:	c4 10       	breq	800069b2 <_vfprintf_r+0x162a>
80006932:	0c f9       	st.b	--r6,r9
80006934:	c3 f8       	rjmp	800069b2 <_vfprintf_r+0x162a>
80006936:	fa ea 00 00 	ld.d	r10,sp[0]
8000693a:	30 a8       	mov	r8,10
8000693c:	30 09       	mov	r9,0
8000693e:	e0 a0 1e 21 	rcall	8000a580 <__avr32_umod64>
80006942:	30 a8       	mov	r8,10
80006944:	2d 0a       	sub	r10,-48
80006946:	30 09       	mov	r9,0
80006948:	ac 8a       	st.b	r6[0x0],r10
8000694a:	fa ea 00 00 	ld.d	r10,sp[0]
8000694e:	e0 a0 1c e7 	rcall	8000a31c <__avr32_udiv64>
80006952:	16 99       	mov	r9,r11
80006954:	14 98       	mov	r8,r10
80006956:	fa e9 00 00 	st.d	sp[0],r8
8000695a:	20 16       	sub	r6,1
8000695c:	fa ea 00 00 	ld.d	r10,sp[0]
80006960:	58 9a       	cp.w	r10,9
80006962:	5c 2b       	cpc	r11
80006964:	fe 9b ff e9 	brhi	80006936 <_vfprintf_r+0x15ae>
80006968:	1b f8       	ld.ub	r8,sp[0x7]
8000696a:	2d 08       	sub	r8,-48
8000696c:	c2 08       	rjmp	800069ac <_vfprintf_r+0x1624>
8000696e:	04 96       	mov	r6,r2
80006970:	fa e8 00 00 	ld.d	r8,sp[0]
80006974:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006978:	40 de       	lddsp	lr,sp[0x34]
8000697a:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000697e:	0c fa       	st.b	--r6,r10
80006980:	f2 0b 16 04 	lsr	r11,r9,0x4
80006984:	f0 0a 16 04 	lsr	r10,r8,0x4
80006988:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000698c:	16 99       	mov	r9,r11
8000698e:	14 98       	mov	r8,r10
80006990:	58 08       	cp.w	r8,0
80006992:	5c 29       	cpc	r9
80006994:	cf 01       	brne	80006974 <_vfprintf_r+0x15ec>
80006996:	fa e9 00 00 	st.d	sp[0],r8
8000699a:	c0 c8       	rjmp	800069b2 <_vfprintf_r+0x162a>
8000699c:	58 08       	cp.w	r8,0
8000699e:	c0 91       	brne	800069b0 <_vfprintf_r+0x1628>
800069a0:	ed b5 00 00 	bld	r5,0x0
800069a4:	c0 61       	brne	800069b0 <_vfprintf_r+0x1628>
800069a6:	fa c6 f9 79 	sub	r6,sp,-1671
800069aa:	33 08       	mov	r8,48
800069ac:	ac 88       	st.b	r6[0x0],r8
800069ae:	c0 28       	rjmp	800069b2 <_vfprintf_r+0x162a>
800069b0:	04 96       	mov	r6,r2
800069b2:	0c 12       	sub	r2,r6
800069b4:	c1 c8       	rjmp	800069ec <_vfprintf_r+0x1664>
800069b6:	50 a7       	stdsp	sp[0x28],r7
800069b8:	50 80       	stdsp	sp[0x20],r0
800069ba:	40 93       	lddsp	r3,sp[0x24]
800069bc:	0c 97       	mov	r7,r6
800069be:	10 90       	mov	r0,r8
800069c0:	04 94       	mov	r4,r2
800069c2:	40 41       	lddsp	r1,sp[0x10]
800069c4:	58 08       	cp.w	r8,0
800069c6:	e0 80 04 4f 	breq	80007264 <_vfprintf_r+0x1edc>
800069ca:	fb 68 06 60 	st.b	sp[1632],r8
800069ce:	30 0c       	mov	r12,0
800069d0:	30 08       	mov	r8,0
800069d2:	30 12       	mov	r2,1
800069d4:	fb 68 06 bb 	st.b	sp[1723],r8
800069d8:	50 2c       	stdsp	sp[0x8],r12
800069da:	fa c6 f9 a0 	sub	r6,sp,-1632
800069de:	c0 78       	rjmp	800069ec <_vfprintf_r+0x1664>
800069e0:	30 0b       	mov	r11,0
800069e2:	50 2b       	stdsp	sp[0x8],r11
800069e4:	c0 48       	rjmp	800069ec <_vfprintf_r+0x1664>
800069e6:	40 22       	lddsp	r2,sp[0x8]
800069e8:	30 0a       	mov	r10,0
800069ea:	50 2a       	stdsp	sp[0x8],r10
800069ec:	40 29       	lddsp	r9,sp[0x8]
800069ee:	e4 09 0c 49 	max	r9,r2,r9
800069f2:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800069f6:	50 39       	stdsp	sp[0xc],r9
800069f8:	0a 9e       	mov	lr,r5
800069fa:	30 09       	mov	r9,0
800069fc:	e2 1e 00 02 	andl	lr,0x2,COH
80006a00:	f2 08 18 00 	cp.b	r8,r9
80006a04:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80006a08:	f7 b8 01 ff 	subne	r8,-1
80006a0c:	fb f8 1a 03 	st.wne	sp[0xc],r8
80006a10:	0a 9b       	mov	r11,r5
80006a12:	58 0e       	cp.w	lr,0
80006a14:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80006a18:	f7 bc 01 fe 	subne	r12,-2
80006a1c:	fb fc 1a 03 	st.wne	sp[0xc],r12
80006a20:	e2 1b 00 84 	andl	r11,0x84,COH
80006a24:	50 fe       	stdsp	sp[0x3c],lr
80006a26:	50 9b       	stdsp	sp[0x24],r11
80006a28:	c4 71       	brne	80006ab6 <_vfprintf_r+0x172e>
80006a2a:	40 8a       	lddsp	r10,sp[0x20]
80006a2c:	40 39       	lddsp	r9,sp[0xc]
80006a2e:	12 1a       	sub	r10,r9
80006a30:	50 4a       	stdsp	sp[0x10],r10
80006a32:	58 0a       	cp.w	r10,0
80006a34:	e0 89 00 20 	brgt	80006a74 <_vfprintf_r+0x16ec>
80006a38:	c3 f8       	rjmp	80006ab6 <_vfprintf_r+0x172e>
80006a3a:	2f 09       	sub	r9,-16
80006a3c:	2f f8       	sub	r8,-1
80006a3e:	fe ce b9 be 	sub	lr,pc,-17986
80006a42:	31 0c       	mov	r12,16
80006a44:	fb 49 06 90 	st.w	sp[1680],r9
80006a48:	87 0e       	st.w	r3[0x0],lr
80006a4a:	87 1c       	st.w	r3[0x4],r12
80006a4c:	fb 48 06 8c 	st.w	sp[1676],r8
80006a50:	58 78       	cp.w	r8,7
80006a52:	e0 89 00 04 	brgt	80006a5a <_vfprintf_r+0x16d2>
80006a56:	2f 83       	sub	r3,-8
80006a58:	c0 b8       	rjmp	80006a6e <_vfprintf_r+0x16e6>
80006a5a:	fa ca f9 78 	sub	r10,sp,-1672
80006a5e:	02 9b       	mov	r11,r1
80006a60:	08 9c       	mov	r12,r4
80006a62:	fe b0 f4 85 	rcall	8000536c <__sprint_r>
80006a66:	e0 81 04 10 	brne	80007286 <_vfprintf_r+0x1efe>
80006a6a:	fa c3 f9 e0 	sub	r3,sp,-1568
80006a6e:	40 4b       	lddsp	r11,sp[0x10]
80006a70:	21 0b       	sub	r11,16
80006a72:	50 4b       	stdsp	sp[0x10],r11
80006a74:	fa f9 06 90 	ld.w	r9,sp[1680]
80006a78:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006a7c:	fe ca b9 fc 	sub	r10,pc,-17924
80006a80:	40 4e       	lddsp	lr,sp[0x10]
80006a82:	59 0e       	cp.w	lr,16
80006a84:	fe 99 ff db 	brgt	80006a3a <_vfprintf_r+0x16b2>
80006a88:	1c 09       	add	r9,lr
80006a8a:	2f f8       	sub	r8,-1
80006a8c:	87 0a       	st.w	r3[0x0],r10
80006a8e:	fb 49 06 90 	st.w	sp[1680],r9
80006a92:	87 1e       	st.w	r3[0x4],lr
80006a94:	fb 48 06 8c 	st.w	sp[1676],r8
80006a98:	58 78       	cp.w	r8,7
80006a9a:	e0 89 00 04 	brgt	80006aa2 <_vfprintf_r+0x171a>
80006a9e:	2f 83       	sub	r3,-8
80006aa0:	c0 b8       	rjmp	80006ab6 <_vfprintf_r+0x172e>
80006aa2:	fa ca f9 78 	sub	r10,sp,-1672
80006aa6:	02 9b       	mov	r11,r1
80006aa8:	08 9c       	mov	r12,r4
80006aaa:	fe b0 f4 61 	rcall	8000536c <__sprint_r>
80006aae:	e0 81 03 ec 	brne	80007286 <_vfprintf_r+0x1efe>
80006ab2:	fa c3 f9 e0 	sub	r3,sp,-1568
80006ab6:	30 09       	mov	r9,0
80006ab8:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006abc:	f2 08 18 00 	cp.b	r8,r9
80006ac0:	c1 f0       	breq	80006afe <_vfprintf_r+0x1776>
80006ac2:	fa f8 06 90 	ld.w	r8,sp[1680]
80006ac6:	fa c9 f9 45 	sub	r9,sp,-1723
80006aca:	2f f8       	sub	r8,-1
80006acc:	87 09       	st.w	r3[0x0],r9
80006ace:	fb 48 06 90 	st.w	sp[1680],r8
80006ad2:	30 19       	mov	r9,1
80006ad4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006ad8:	87 19       	st.w	r3[0x4],r9
80006ada:	2f f8       	sub	r8,-1
80006adc:	fb 48 06 8c 	st.w	sp[1676],r8
80006ae0:	58 78       	cp.w	r8,7
80006ae2:	e0 89 00 04 	brgt	80006aea <_vfprintf_r+0x1762>
80006ae6:	2f 83       	sub	r3,-8
80006ae8:	c0 b8       	rjmp	80006afe <_vfprintf_r+0x1776>
80006aea:	fa ca f9 78 	sub	r10,sp,-1672
80006aee:	02 9b       	mov	r11,r1
80006af0:	08 9c       	mov	r12,r4
80006af2:	fe b0 f4 3d 	rcall	8000536c <__sprint_r>
80006af6:	e0 81 03 c8 	brne	80007286 <_vfprintf_r+0x1efe>
80006afa:	fa c3 f9 e0 	sub	r3,sp,-1568
80006afe:	40 fc       	lddsp	r12,sp[0x3c]
80006b00:	58 0c       	cp.w	r12,0
80006b02:	c1 f0       	breq	80006b40 <_vfprintf_r+0x17b8>
80006b04:	fa f8 06 90 	ld.w	r8,sp[1680]
80006b08:	fa c9 f9 48 	sub	r9,sp,-1720
80006b0c:	2f e8       	sub	r8,-2
80006b0e:	87 09       	st.w	r3[0x0],r9
80006b10:	fb 48 06 90 	st.w	sp[1680],r8
80006b14:	30 29       	mov	r9,2
80006b16:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006b1a:	87 19       	st.w	r3[0x4],r9
80006b1c:	2f f8       	sub	r8,-1
80006b1e:	fb 48 06 8c 	st.w	sp[1676],r8
80006b22:	58 78       	cp.w	r8,7
80006b24:	e0 89 00 04 	brgt	80006b2c <_vfprintf_r+0x17a4>
80006b28:	2f 83       	sub	r3,-8
80006b2a:	c0 b8       	rjmp	80006b40 <_vfprintf_r+0x17b8>
80006b2c:	fa ca f9 78 	sub	r10,sp,-1672
80006b30:	02 9b       	mov	r11,r1
80006b32:	08 9c       	mov	r12,r4
80006b34:	fe b0 f4 1c 	rcall	8000536c <__sprint_r>
80006b38:	e0 81 03 a7 	brne	80007286 <_vfprintf_r+0x1efe>
80006b3c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006b40:	40 9b       	lddsp	r11,sp[0x24]
80006b42:	e0 4b 00 80 	cp.w	r11,128
80006b46:	c4 71       	brne	80006bd4 <_vfprintf_r+0x184c>
80006b48:	40 8a       	lddsp	r10,sp[0x20]
80006b4a:	40 39       	lddsp	r9,sp[0xc]
80006b4c:	12 1a       	sub	r10,r9
80006b4e:	50 4a       	stdsp	sp[0x10],r10
80006b50:	58 0a       	cp.w	r10,0
80006b52:	e0 89 00 20 	brgt	80006b92 <_vfprintf_r+0x180a>
80006b56:	c3 f8       	rjmp	80006bd4 <_vfprintf_r+0x184c>
80006b58:	2f 09       	sub	r9,-16
80006b5a:	2f f8       	sub	r8,-1
80006b5c:	fe ce ba cc 	sub	lr,pc,-17716
80006b60:	31 0c       	mov	r12,16
80006b62:	fb 49 06 90 	st.w	sp[1680],r9
80006b66:	87 0e       	st.w	r3[0x0],lr
80006b68:	87 1c       	st.w	r3[0x4],r12
80006b6a:	fb 48 06 8c 	st.w	sp[1676],r8
80006b6e:	58 78       	cp.w	r8,7
80006b70:	e0 89 00 04 	brgt	80006b78 <_vfprintf_r+0x17f0>
80006b74:	2f 83       	sub	r3,-8
80006b76:	c0 b8       	rjmp	80006b8c <_vfprintf_r+0x1804>
80006b78:	fa ca f9 78 	sub	r10,sp,-1672
80006b7c:	02 9b       	mov	r11,r1
80006b7e:	08 9c       	mov	r12,r4
80006b80:	fe b0 f3 f6 	rcall	8000536c <__sprint_r>
80006b84:	e0 81 03 81 	brne	80007286 <_vfprintf_r+0x1efe>
80006b88:	fa c3 f9 e0 	sub	r3,sp,-1568
80006b8c:	40 4b       	lddsp	r11,sp[0x10]
80006b8e:	21 0b       	sub	r11,16
80006b90:	50 4b       	stdsp	sp[0x10],r11
80006b92:	fa f9 06 90 	ld.w	r9,sp[1680]
80006b96:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006b9a:	fe ca bb 0a 	sub	r10,pc,-17654
80006b9e:	40 4e       	lddsp	lr,sp[0x10]
80006ba0:	59 0e       	cp.w	lr,16
80006ba2:	fe 99 ff db 	brgt	80006b58 <_vfprintf_r+0x17d0>
80006ba6:	1c 09       	add	r9,lr
80006ba8:	2f f8       	sub	r8,-1
80006baa:	87 0a       	st.w	r3[0x0],r10
80006bac:	fb 49 06 90 	st.w	sp[1680],r9
80006bb0:	87 1e       	st.w	r3[0x4],lr
80006bb2:	fb 48 06 8c 	st.w	sp[1676],r8
80006bb6:	58 78       	cp.w	r8,7
80006bb8:	e0 89 00 04 	brgt	80006bc0 <_vfprintf_r+0x1838>
80006bbc:	2f 83       	sub	r3,-8
80006bbe:	c0 b8       	rjmp	80006bd4 <_vfprintf_r+0x184c>
80006bc0:	fa ca f9 78 	sub	r10,sp,-1672
80006bc4:	02 9b       	mov	r11,r1
80006bc6:	08 9c       	mov	r12,r4
80006bc8:	fe b0 f3 d2 	rcall	8000536c <__sprint_r>
80006bcc:	e0 81 03 5d 	brne	80007286 <_vfprintf_r+0x1efe>
80006bd0:	fa c3 f9 e0 	sub	r3,sp,-1568
80006bd4:	40 2c       	lddsp	r12,sp[0x8]
80006bd6:	04 1c       	sub	r12,r2
80006bd8:	50 2c       	stdsp	sp[0x8],r12
80006bda:	58 0c       	cp.w	r12,0
80006bdc:	e0 89 00 20 	brgt	80006c1c <_vfprintf_r+0x1894>
80006be0:	c3 f8       	rjmp	80006c5e <_vfprintf_r+0x18d6>
80006be2:	2f 09       	sub	r9,-16
80006be4:	2f f8       	sub	r8,-1
80006be6:	fe cb bb 56 	sub	r11,pc,-17578
80006bea:	31 0a       	mov	r10,16
80006bec:	fb 49 06 90 	st.w	sp[1680],r9
80006bf0:	87 0b       	st.w	r3[0x0],r11
80006bf2:	87 1a       	st.w	r3[0x4],r10
80006bf4:	fb 48 06 8c 	st.w	sp[1676],r8
80006bf8:	58 78       	cp.w	r8,7
80006bfa:	e0 89 00 04 	brgt	80006c02 <_vfprintf_r+0x187a>
80006bfe:	2f 83       	sub	r3,-8
80006c00:	c0 b8       	rjmp	80006c16 <_vfprintf_r+0x188e>
80006c02:	fa ca f9 78 	sub	r10,sp,-1672
80006c06:	02 9b       	mov	r11,r1
80006c08:	08 9c       	mov	r12,r4
80006c0a:	fe b0 f3 b1 	rcall	8000536c <__sprint_r>
80006c0e:	e0 81 03 3c 	brne	80007286 <_vfprintf_r+0x1efe>
80006c12:	fa c3 f9 e0 	sub	r3,sp,-1568
80006c16:	40 29       	lddsp	r9,sp[0x8]
80006c18:	21 09       	sub	r9,16
80006c1a:	50 29       	stdsp	sp[0x8],r9
80006c1c:	fa f9 06 90 	ld.w	r9,sp[1680]
80006c20:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006c24:	fe ca bb 94 	sub	r10,pc,-17516
80006c28:	40 2e       	lddsp	lr,sp[0x8]
80006c2a:	59 0e       	cp.w	lr,16
80006c2c:	fe 99 ff db 	brgt	80006be2 <_vfprintf_r+0x185a>
80006c30:	1c 09       	add	r9,lr
80006c32:	2f f8       	sub	r8,-1
80006c34:	87 0a       	st.w	r3[0x0],r10
80006c36:	fb 49 06 90 	st.w	sp[1680],r9
80006c3a:	87 1e       	st.w	r3[0x4],lr
80006c3c:	fb 48 06 8c 	st.w	sp[1676],r8
80006c40:	58 78       	cp.w	r8,7
80006c42:	e0 89 00 04 	brgt	80006c4a <_vfprintf_r+0x18c2>
80006c46:	2f 83       	sub	r3,-8
80006c48:	c0 b8       	rjmp	80006c5e <_vfprintf_r+0x18d6>
80006c4a:	fa ca f9 78 	sub	r10,sp,-1672
80006c4e:	02 9b       	mov	r11,r1
80006c50:	08 9c       	mov	r12,r4
80006c52:	fe b0 f3 8d 	rcall	8000536c <__sprint_r>
80006c56:	e0 81 03 18 	brne	80007286 <_vfprintf_r+0x1efe>
80006c5a:	fa c3 f9 e0 	sub	r3,sp,-1568
80006c5e:	ed b5 00 08 	bld	r5,0x8
80006c62:	c0 b0       	breq	80006c78 <_vfprintf_r+0x18f0>
80006c64:	fa f8 06 90 	ld.w	r8,sp[1680]
80006c68:	87 12       	st.w	r3[0x4],r2
80006c6a:	87 06       	st.w	r3[0x0],r6
80006c6c:	f0 02 00 02 	add	r2,r8,r2
80006c70:	fb 42 06 90 	st.w	sp[1680],r2
80006c74:	e0 8f 01 d4 	bral	8000701c <_vfprintf_r+0x1c94>
80006c78:	e0 40 00 65 	cp.w	r0,101
80006c7c:	e0 8a 01 d6 	brle	80007028 <_vfprintf_r+0x1ca0>
80006c80:	30 08       	mov	r8,0
80006c82:	30 09       	mov	r9,0
80006c84:	40 5b       	lddsp	r11,sp[0x14]
80006c86:	40 7a       	lddsp	r10,sp[0x1c]
80006c88:	e0 a0 19 43 	rcall	80009f0e <__avr32_f64_cmp_eq>
80006c8c:	c7 90       	breq	80006d7e <_vfprintf_r+0x19f6>
80006c8e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006c92:	fe c9 bc 16 	sub	r9,pc,-17386
80006c96:	2f f8       	sub	r8,-1
80006c98:	87 09       	st.w	r3[0x0],r9
80006c9a:	fb 48 06 90 	st.w	sp[1680],r8
80006c9e:	30 19       	mov	r9,1
80006ca0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006ca4:	87 19       	st.w	r3[0x4],r9
80006ca6:	2f f8       	sub	r8,-1
80006ca8:	fb 48 06 8c 	st.w	sp[1676],r8
80006cac:	58 78       	cp.w	r8,7
80006cae:	e0 89 00 05 	brgt	80006cb8 <_vfprintf_r+0x1930>
80006cb2:	2f 83       	sub	r3,-8
80006cb4:	c0 c8       	rjmp	80006ccc <_vfprintf_r+0x1944>
80006cb6:	d7 03       	nop
80006cb8:	fa ca f9 78 	sub	r10,sp,-1672
80006cbc:	02 9b       	mov	r11,r1
80006cbe:	08 9c       	mov	r12,r4
80006cc0:	fe b0 f3 56 	rcall	8000536c <__sprint_r>
80006cc4:	e0 81 02 e1 	brne	80007286 <_vfprintf_r+0x1efe>
80006cc8:	fa c3 f9 e0 	sub	r3,sp,-1568
80006ccc:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006cd0:	40 6c       	lddsp	r12,sp[0x18]
80006cd2:	18 38       	cp.w	r8,r12
80006cd4:	c0 55       	brlt	80006cde <_vfprintf_r+0x1956>
80006cd6:	ed b5 00 00 	bld	r5,0x0
80006cda:	e0 81 02 6b 	brne	800071b0 <_vfprintf_r+0x1e28>
80006cde:	fa f8 06 90 	ld.w	r8,sp[1680]
80006ce2:	2f f8       	sub	r8,-1
80006ce4:	40 cb       	lddsp	r11,sp[0x30]
80006ce6:	fb 48 06 90 	st.w	sp[1680],r8
80006cea:	30 19       	mov	r9,1
80006cec:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006cf0:	87 0b       	st.w	r3[0x0],r11
80006cf2:	2f f8       	sub	r8,-1
80006cf4:	87 19       	st.w	r3[0x4],r9
80006cf6:	fb 48 06 8c 	st.w	sp[1676],r8
80006cfa:	58 78       	cp.w	r8,7
80006cfc:	e0 89 00 04 	brgt	80006d04 <_vfprintf_r+0x197c>
80006d00:	2f 83       	sub	r3,-8
80006d02:	c0 b8       	rjmp	80006d18 <_vfprintf_r+0x1990>
80006d04:	fa ca f9 78 	sub	r10,sp,-1672
80006d08:	02 9b       	mov	r11,r1
80006d0a:	08 9c       	mov	r12,r4
80006d0c:	fe b0 f3 30 	rcall	8000536c <__sprint_r>
80006d10:	e0 81 02 bb 	brne	80007286 <_vfprintf_r+0x1efe>
80006d14:	fa c3 f9 e0 	sub	r3,sp,-1568
80006d18:	40 66       	lddsp	r6,sp[0x18]
80006d1a:	20 16       	sub	r6,1
80006d1c:	58 06       	cp.w	r6,0
80006d1e:	e0 89 00 1d 	brgt	80006d58 <_vfprintf_r+0x19d0>
80006d22:	e0 8f 02 47 	bral	800071b0 <_vfprintf_r+0x1e28>
80006d26:	2f 09       	sub	r9,-16
80006d28:	2f f8       	sub	r8,-1
80006d2a:	fb 49 06 90 	st.w	sp[1680],r9
80006d2e:	87 02       	st.w	r3[0x0],r2
80006d30:	87 10       	st.w	r3[0x4],r0
80006d32:	fb 48 06 8c 	st.w	sp[1676],r8
80006d36:	58 78       	cp.w	r8,7
80006d38:	e0 89 00 04 	brgt	80006d40 <_vfprintf_r+0x19b8>
80006d3c:	2f 83       	sub	r3,-8
80006d3e:	c0 b8       	rjmp	80006d54 <_vfprintf_r+0x19cc>
80006d40:	fa ca f9 78 	sub	r10,sp,-1672
80006d44:	02 9b       	mov	r11,r1
80006d46:	08 9c       	mov	r12,r4
80006d48:	fe b0 f3 12 	rcall	8000536c <__sprint_r>
80006d4c:	e0 81 02 9d 	brne	80007286 <_vfprintf_r+0x1efe>
80006d50:	fa c3 f9 e0 	sub	r3,sp,-1568
80006d54:	21 06       	sub	r6,16
80006d56:	c0 48       	rjmp	80006d5e <_vfprintf_r+0x19d6>
80006d58:	fe c2 bc c8 	sub	r2,pc,-17208
80006d5c:	31 00       	mov	r0,16
80006d5e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006d62:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006d66:	fe ca bc d6 	sub	r10,pc,-17194
80006d6a:	59 06       	cp.w	r6,16
80006d6c:	fe 99 ff dd 	brgt	80006d26 <_vfprintf_r+0x199e>
80006d70:	0c 09       	add	r9,r6
80006d72:	87 0a       	st.w	r3[0x0],r10
80006d74:	fb 49 06 90 	st.w	sp[1680],r9
80006d78:	2f f8       	sub	r8,-1
80006d7a:	87 16       	st.w	r3[0x4],r6
80006d7c:	c5 39       	rjmp	80007022 <_vfprintf_r+0x1c9a>
80006d7e:	fa fa 06 ac 	ld.w	r10,sp[1708]
80006d82:	58 0a       	cp.w	r10,0
80006d84:	e0 89 00 92 	brgt	80006ea8 <_vfprintf_r+0x1b20>
80006d88:	fa f8 06 90 	ld.w	r8,sp[1680]
80006d8c:	fe c9 bd 10 	sub	r9,pc,-17136
80006d90:	2f f8       	sub	r8,-1
80006d92:	87 09       	st.w	r3[0x0],r9
80006d94:	fb 48 06 90 	st.w	sp[1680],r8
80006d98:	30 19       	mov	r9,1
80006d9a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006d9e:	87 19       	st.w	r3[0x4],r9
80006da0:	2f f8       	sub	r8,-1
80006da2:	fb 48 06 8c 	st.w	sp[1676],r8
80006da6:	58 78       	cp.w	r8,7
80006da8:	e0 89 00 04 	brgt	80006db0 <_vfprintf_r+0x1a28>
80006dac:	2f 83       	sub	r3,-8
80006dae:	c0 b8       	rjmp	80006dc4 <_vfprintf_r+0x1a3c>
80006db0:	fa ca f9 78 	sub	r10,sp,-1672
80006db4:	02 9b       	mov	r11,r1
80006db6:	08 9c       	mov	r12,r4
80006db8:	fe b0 f2 da 	rcall	8000536c <__sprint_r>
80006dbc:	e0 81 02 65 	brne	80007286 <_vfprintf_r+0x1efe>
80006dc0:	fa c3 f9 e0 	sub	r3,sp,-1568
80006dc4:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006dc8:	58 08       	cp.w	r8,0
80006dca:	c0 81       	brne	80006dda <_vfprintf_r+0x1a52>
80006dcc:	40 6a       	lddsp	r10,sp[0x18]
80006dce:	58 0a       	cp.w	r10,0
80006dd0:	c0 51       	brne	80006dda <_vfprintf_r+0x1a52>
80006dd2:	ed b5 00 00 	bld	r5,0x0
80006dd6:	e0 81 01 ed 	brne	800071b0 <_vfprintf_r+0x1e28>
80006dda:	40 c9       	lddsp	r9,sp[0x30]
80006ddc:	fa f8 06 90 	ld.w	r8,sp[1680]
80006de0:	2f f8       	sub	r8,-1
80006de2:	87 09       	st.w	r3[0x0],r9
80006de4:	fb 48 06 90 	st.w	sp[1680],r8
80006de8:	30 19       	mov	r9,1
80006dea:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006dee:	87 19       	st.w	r3[0x4],r9
80006df0:	2f f8       	sub	r8,-1
80006df2:	fb 48 06 8c 	st.w	sp[1676],r8
80006df6:	58 78       	cp.w	r8,7
80006df8:	e0 89 00 04 	brgt	80006e00 <_vfprintf_r+0x1a78>
80006dfc:	2f 83       	sub	r3,-8
80006dfe:	c0 b8       	rjmp	80006e14 <_vfprintf_r+0x1a8c>
80006e00:	fa ca f9 78 	sub	r10,sp,-1672
80006e04:	02 9b       	mov	r11,r1
80006e06:	08 9c       	mov	r12,r4
80006e08:	fe b0 f2 b2 	rcall	8000536c <__sprint_r>
80006e0c:	e0 81 02 3d 	brne	80007286 <_vfprintf_r+0x1efe>
80006e10:	fa c3 f9 e0 	sub	r3,sp,-1568
80006e14:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006e18:	5c 32       	neg	r2
80006e1a:	58 02       	cp.w	r2,0
80006e1c:	e0 89 00 1d 	brgt	80006e56 <_vfprintf_r+0x1ace>
80006e20:	c3 d8       	rjmp	80006e9a <_vfprintf_r+0x1b12>
80006e22:	2f 09       	sub	r9,-16
80006e24:	2f f8       	sub	r8,-1
80006e26:	31 0e       	mov	lr,16
80006e28:	fb 49 06 90 	st.w	sp[1680],r9
80006e2c:	87 00       	st.w	r3[0x0],r0
80006e2e:	87 1e       	st.w	r3[0x4],lr
80006e30:	fb 48 06 8c 	st.w	sp[1676],r8
80006e34:	58 78       	cp.w	r8,7
80006e36:	e0 89 00 04 	brgt	80006e3e <_vfprintf_r+0x1ab6>
80006e3a:	2f 83       	sub	r3,-8
80006e3c:	c0 b8       	rjmp	80006e52 <_vfprintf_r+0x1aca>
80006e3e:	fa ca f9 78 	sub	r10,sp,-1672
80006e42:	02 9b       	mov	r11,r1
80006e44:	08 9c       	mov	r12,r4
80006e46:	fe b0 f2 93 	rcall	8000536c <__sprint_r>
80006e4a:	e0 81 02 1e 	brne	80007286 <_vfprintf_r+0x1efe>
80006e4e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006e52:	21 02       	sub	r2,16
80006e54:	c0 38       	rjmp	80006e5a <_vfprintf_r+0x1ad2>
80006e56:	fe c0 bd c6 	sub	r0,pc,-16954
80006e5a:	fa f9 06 90 	ld.w	r9,sp[1680]
80006e5e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006e62:	fe ca bd d2 	sub	r10,pc,-16942
80006e66:	59 02       	cp.w	r2,16
80006e68:	fe 99 ff dd 	brgt	80006e22 <_vfprintf_r+0x1a9a>
80006e6c:	04 09       	add	r9,r2
80006e6e:	2f f8       	sub	r8,-1
80006e70:	87 0a       	st.w	r3[0x0],r10
80006e72:	fb 49 06 90 	st.w	sp[1680],r9
80006e76:	87 12       	st.w	r3[0x4],r2
80006e78:	fb 48 06 8c 	st.w	sp[1676],r8
80006e7c:	58 78       	cp.w	r8,7
80006e7e:	e0 89 00 04 	brgt	80006e86 <_vfprintf_r+0x1afe>
80006e82:	2f 83       	sub	r3,-8
80006e84:	c0 b8       	rjmp	80006e9a <_vfprintf_r+0x1b12>
80006e86:	fa ca f9 78 	sub	r10,sp,-1672
80006e8a:	02 9b       	mov	r11,r1
80006e8c:	08 9c       	mov	r12,r4
80006e8e:	fe b0 f2 6f 	rcall	8000536c <__sprint_r>
80006e92:	e0 81 01 fa 	brne	80007286 <_vfprintf_r+0x1efe>
80006e96:	fa c3 f9 e0 	sub	r3,sp,-1568
80006e9a:	40 6c       	lddsp	r12,sp[0x18]
80006e9c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006ea0:	87 06       	st.w	r3[0x0],r6
80006ea2:	87 1c       	st.w	r3[0x4],r12
80006ea4:	18 08       	add	r8,r12
80006ea6:	cb 98       	rjmp	80007018 <_vfprintf_r+0x1c90>
80006ea8:	fa f9 06 90 	ld.w	r9,sp[1680]
80006eac:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006eb0:	40 6b       	lddsp	r11,sp[0x18]
80006eb2:	16 3a       	cp.w	r10,r11
80006eb4:	c6 f5       	brlt	80006f92 <_vfprintf_r+0x1c0a>
80006eb6:	16 09       	add	r9,r11
80006eb8:	2f f8       	sub	r8,-1
80006eba:	87 06       	st.w	r3[0x0],r6
80006ebc:	fb 49 06 90 	st.w	sp[1680],r9
80006ec0:	87 1b       	st.w	r3[0x4],r11
80006ec2:	fb 48 06 8c 	st.w	sp[1676],r8
80006ec6:	58 78       	cp.w	r8,7
80006ec8:	e0 89 00 04 	brgt	80006ed0 <_vfprintf_r+0x1b48>
80006ecc:	2f 83       	sub	r3,-8
80006ece:	c0 b8       	rjmp	80006ee4 <_vfprintf_r+0x1b5c>
80006ed0:	fa ca f9 78 	sub	r10,sp,-1672
80006ed4:	02 9b       	mov	r11,r1
80006ed6:	08 9c       	mov	r12,r4
80006ed8:	fe b0 f2 4a 	rcall	8000536c <__sprint_r>
80006edc:	e0 81 01 d5 	brne	80007286 <_vfprintf_r+0x1efe>
80006ee0:	fa c3 f9 e0 	sub	r3,sp,-1568
80006ee4:	fa f6 06 ac 	ld.w	r6,sp[1708]
80006ee8:	40 6a       	lddsp	r10,sp[0x18]
80006eea:	14 16       	sub	r6,r10
80006eec:	58 06       	cp.w	r6,0
80006eee:	e0 89 00 1c 	brgt	80006f26 <_vfprintf_r+0x1b9e>
80006ef2:	c3 d8       	rjmp	80006f6c <_vfprintf_r+0x1be4>
80006ef4:	2f 09       	sub	r9,-16
80006ef6:	2f f8       	sub	r8,-1
80006ef8:	fb 49 06 90 	st.w	sp[1680],r9
80006efc:	87 02       	st.w	r3[0x0],r2
80006efe:	87 10       	st.w	r3[0x4],r0
80006f00:	fb 48 06 8c 	st.w	sp[1676],r8
80006f04:	58 78       	cp.w	r8,7
80006f06:	e0 89 00 04 	brgt	80006f0e <_vfprintf_r+0x1b86>
80006f0a:	2f 83       	sub	r3,-8
80006f0c:	c0 b8       	rjmp	80006f22 <_vfprintf_r+0x1b9a>
80006f0e:	fa ca f9 78 	sub	r10,sp,-1672
80006f12:	02 9b       	mov	r11,r1
80006f14:	08 9c       	mov	r12,r4
80006f16:	fe b0 f2 2b 	rcall	8000536c <__sprint_r>
80006f1a:	e0 81 01 b6 	brne	80007286 <_vfprintf_r+0x1efe>
80006f1e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006f22:	21 06       	sub	r6,16
80006f24:	c0 48       	rjmp	80006f2c <_vfprintf_r+0x1ba4>
80006f26:	fe c2 be 96 	sub	r2,pc,-16746
80006f2a:	31 00       	mov	r0,16
80006f2c:	fa f9 06 90 	ld.w	r9,sp[1680]
80006f30:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006f34:	fe ca be a4 	sub	r10,pc,-16732
80006f38:	59 06       	cp.w	r6,16
80006f3a:	fe 99 ff dd 	brgt	80006ef4 <_vfprintf_r+0x1b6c>
80006f3e:	0c 09       	add	r9,r6
80006f40:	2f f8       	sub	r8,-1
80006f42:	87 0a       	st.w	r3[0x0],r10
80006f44:	fb 49 06 90 	st.w	sp[1680],r9
80006f48:	87 16       	st.w	r3[0x4],r6
80006f4a:	fb 48 06 8c 	st.w	sp[1676],r8
80006f4e:	58 78       	cp.w	r8,7
80006f50:	e0 89 00 04 	brgt	80006f58 <_vfprintf_r+0x1bd0>
80006f54:	2f 83       	sub	r3,-8
80006f56:	c0 b8       	rjmp	80006f6c <_vfprintf_r+0x1be4>
80006f58:	fa ca f9 78 	sub	r10,sp,-1672
80006f5c:	02 9b       	mov	r11,r1
80006f5e:	08 9c       	mov	r12,r4
80006f60:	fe b0 f2 06 	rcall	8000536c <__sprint_r>
80006f64:	e0 81 01 91 	brne	80007286 <_vfprintf_r+0x1efe>
80006f68:	fa c3 f9 e0 	sub	r3,sp,-1568
80006f6c:	ed b5 00 00 	bld	r5,0x0
80006f70:	e0 81 01 20 	brne	800071b0 <_vfprintf_r+0x1e28>
80006f74:	40 c9       	lddsp	r9,sp[0x30]
80006f76:	fa f8 06 90 	ld.w	r8,sp[1680]
80006f7a:	2f f8       	sub	r8,-1
80006f7c:	87 09       	st.w	r3[0x0],r9
80006f7e:	fb 48 06 90 	st.w	sp[1680],r8
80006f82:	30 19       	mov	r9,1
80006f84:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006f88:	87 19       	st.w	r3[0x4],r9
80006f8a:	2f f8       	sub	r8,-1
80006f8c:	fb 48 06 8c 	st.w	sp[1676],r8
80006f90:	c0 29       	rjmp	80007194 <_vfprintf_r+0x1e0c>
80006f92:	14 09       	add	r9,r10
80006f94:	2f f8       	sub	r8,-1
80006f96:	fb 49 06 90 	st.w	sp[1680],r9
80006f9a:	87 06       	st.w	r3[0x0],r6
80006f9c:	87 1a       	st.w	r3[0x4],r10
80006f9e:	fb 48 06 8c 	st.w	sp[1676],r8
80006fa2:	58 78       	cp.w	r8,7
80006fa4:	e0 89 00 04 	brgt	80006fac <_vfprintf_r+0x1c24>
80006fa8:	2f 83       	sub	r3,-8
80006faa:	c0 b8       	rjmp	80006fc0 <_vfprintf_r+0x1c38>
80006fac:	fa ca f9 78 	sub	r10,sp,-1672
80006fb0:	02 9b       	mov	r11,r1
80006fb2:	08 9c       	mov	r12,r4
80006fb4:	fe b0 f1 dc 	rcall	8000536c <__sprint_r>
80006fb8:	e0 81 01 67 	brne	80007286 <_vfprintf_r+0x1efe>
80006fbc:	fa c3 f9 e0 	sub	r3,sp,-1568
80006fc0:	40 c8       	lddsp	r8,sp[0x30]
80006fc2:	87 08       	st.w	r3[0x0],r8
80006fc4:	fa f8 06 90 	ld.w	r8,sp[1680]
80006fc8:	2f f8       	sub	r8,-1
80006fca:	30 19       	mov	r9,1
80006fcc:	fb 48 06 90 	st.w	sp[1680],r8
80006fd0:	87 19       	st.w	r3[0x4],r9
80006fd2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006fd6:	2f f8       	sub	r8,-1
80006fd8:	fb 48 06 8c 	st.w	sp[1676],r8
80006fdc:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006fe0:	58 78       	cp.w	r8,7
80006fe2:	e0 89 00 04 	brgt	80006fea <_vfprintf_r+0x1c62>
80006fe6:	2f 83       	sub	r3,-8
80006fe8:	c0 b8       	rjmp	80006ffe <_vfprintf_r+0x1c76>
80006fea:	fa ca f9 78 	sub	r10,sp,-1672
80006fee:	02 9b       	mov	r11,r1
80006ff0:	08 9c       	mov	r12,r4
80006ff2:	fe b0 f1 bd 	rcall	8000536c <__sprint_r>
80006ff6:	e0 81 01 48 	brne	80007286 <_vfprintf_r+0x1efe>
80006ffa:	fa c3 f9 e0 	sub	r3,sp,-1568
80006ffe:	04 06       	add	r6,r2
80007000:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007004:	87 06       	st.w	r3[0x0],r6
80007006:	fa f9 06 90 	ld.w	r9,sp[1680]
8000700a:	40 66       	lddsp	r6,sp[0x18]
8000700c:	40 6e       	lddsp	lr,sp[0x18]
8000700e:	10 16       	sub	r6,r8
80007010:	f2 08 01 08 	sub	r8,r9,r8
80007014:	87 16       	st.w	r3[0x4],r6
80007016:	1c 08       	add	r8,lr
80007018:	fb 48 06 90 	st.w	sp[1680],r8
8000701c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007020:	2f f8       	sub	r8,-1
80007022:	fb 48 06 8c 	st.w	sp[1676],r8
80007026:	cb 78       	rjmp	80007194 <_vfprintf_r+0x1e0c>
80007028:	40 6c       	lddsp	r12,sp[0x18]
8000702a:	58 1c       	cp.w	r12,1
8000702c:	e0 89 00 06 	brgt	80007038 <_vfprintf_r+0x1cb0>
80007030:	ed b5 00 00 	bld	r5,0x0
80007034:	e0 81 00 85 	brne	8000713e <_vfprintf_r+0x1db6>
80007038:	fa f8 06 90 	ld.w	r8,sp[1680]
8000703c:	2f f8       	sub	r8,-1
8000703e:	30 19       	mov	r9,1
80007040:	fb 48 06 90 	st.w	sp[1680],r8
80007044:	87 06       	st.w	r3[0x0],r6
80007046:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000704a:	87 19       	st.w	r3[0x4],r9
8000704c:	2f f8       	sub	r8,-1
8000704e:	fb 48 06 8c 	st.w	sp[1676],r8
80007052:	58 78       	cp.w	r8,7
80007054:	e0 89 00 04 	brgt	8000705c <_vfprintf_r+0x1cd4>
80007058:	2f 83       	sub	r3,-8
8000705a:	c0 b8       	rjmp	80007070 <_vfprintf_r+0x1ce8>
8000705c:	fa ca f9 78 	sub	r10,sp,-1672
80007060:	02 9b       	mov	r11,r1
80007062:	08 9c       	mov	r12,r4
80007064:	fe b0 f1 84 	rcall	8000536c <__sprint_r>
80007068:	e0 81 01 0f 	brne	80007286 <_vfprintf_r+0x1efe>
8000706c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007070:	fa f8 06 90 	ld.w	r8,sp[1680]
80007074:	2f f8       	sub	r8,-1
80007076:	40 cb       	lddsp	r11,sp[0x30]
80007078:	fb 48 06 90 	st.w	sp[1680],r8
8000707c:	30 19       	mov	r9,1
8000707e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007082:	87 0b       	st.w	r3[0x0],r11
80007084:	2f f8       	sub	r8,-1
80007086:	87 19       	st.w	r3[0x4],r9
80007088:	fb 48 06 8c 	st.w	sp[1676],r8
8000708c:	58 78       	cp.w	r8,7
8000708e:	e0 89 00 05 	brgt	80007098 <_vfprintf_r+0x1d10>
80007092:	2f 83       	sub	r3,-8
80007094:	c0 c8       	rjmp	800070ac <_vfprintf_r+0x1d24>
80007096:	d7 03       	nop
80007098:	fa ca f9 78 	sub	r10,sp,-1672
8000709c:	02 9b       	mov	r11,r1
8000709e:	08 9c       	mov	r12,r4
800070a0:	fe b0 f1 66 	rcall	8000536c <__sprint_r>
800070a4:	e0 81 00 f1 	brne	80007286 <_vfprintf_r+0x1efe>
800070a8:	fa c3 f9 e0 	sub	r3,sp,-1568
800070ac:	30 08       	mov	r8,0
800070ae:	30 09       	mov	r9,0
800070b0:	40 5b       	lddsp	r11,sp[0x14]
800070b2:	40 7a       	lddsp	r10,sp[0x1c]
800070b4:	e0 a0 17 2d 	rcall	80009f0e <__avr32_f64_cmp_eq>
800070b8:	40 68       	lddsp	r8,sp[0x18]
800070ba:	20 18       	sub	r8,1
800070bc:	58 0c       	cp.w	r12,0
800070be:	c0 d1       	brne	800070d8 <_vfprintf_r+0x1d50>
800070c0:	2f f6       	sub	r6,-1
800070c2:	87 18       	st.w	r3[0x4],r8
800070c4:	87 06       	st.w	r3[0x0],r6
800070c6:	fa f6 06 90 	ld.w	r6,sp[1680]
800070ca:	10 06       	add	r6,r8
800070cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800070d0:	fb 46 06 90 	st.w	sp[1680],r6
800070d4:	2f f8       	sub	r8,-1
800070d6:	c3 18       	rjmp	80007138 <_vfprintf_r+0x1db0>
800070d8:	10 96       	mov	r6,r8
800070da:	58 08       	cp.w	r8,0
800070dc:	e0 89 00 1c 	brgt	80007114 <_vfprintf_r+0x1d8c>
800070e0:	c4 b8       	rjmp	80007176 <_vfprintf_r+0x1dee>
800070e2:	2f 09       	sub	r9,-16
800070e4:	2f f8       	sub	r8,-1
800070e6:	fb 49 06 90 	st.w	sp[1680],r9
800070ea:	87 02       	st.w	r3[0x0],r2
800070ec:	87 10       	st.w	r3[0x4],r0
800070ee:	fb 48 06 8c 	st.w	sp[1676],r8
800070f2:	58 78       	cp.w	r8,7
800070f4:	e0 89 00 04 	brgt	800070fc <_vfprintf_r+0x1d74>
800070f8:	2f 83       	sub	r3,-8
800070fa:	c0 b8       	rjmp	80007110 <_vfprintf_r+0x1d88>
800070fc:	fa ca f9 78 	sub	r10,sp,-1672
80007100:	02 9b       	mov	r11,r1
80007102:	08 9c       	mov	r12,r4
80007104:	fe b0 f1 34 	rcall	8000536c <__sprint_r>
80007108:	e0 81 00 bf 	brne	80007286 <_vfprintf_r+0x1efe>
8000710c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007110:	21 06       	sub	r6,16
80007112:	c0 48       	rjmp	8000711a <_vfprintf_r+0x1d92>
80007114:	fe c2 c0 84 	sub	r2,pc,-16252
80007118:	31 00       	mov	r0,16
8000711a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000711e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007122:	fe ca c0 92 	sub	r10,pc,-16238
80007126:	59 06       	cp.w	r6,16
80007128:	fe 99 ff dd 	brgt	800070e2 <_vfprintf_r+0x1d5a>
8000712c:	0c 09       	add	r9,r6
8000712e:	87 0a       	st.w	r3[0x0],r10
80007130:	fb 49 06 90 	st.w	sp[1680],r9
80007134:	2f f8       	sub	r8,-1
80007136:	87 16       	st.w	r3[0x4],r6
80007138:	fb 48 06 8c 	st.w	sp[1676],r8
8000713c:	c0 e8       	rjmp	80007158 <_vfprintf_r+0x1dd0>
8000713e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007142:	2f f8       	sub	r8,-1
80007144:	30 19       	mov	r9,1
80007146:	fb 48 06 90 	st.w	sp[1680],r8
8000714a:	87 06       	st.w	r3[0x0],r6
8000714c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007150:	87 19       	st.w	r3[0x4],r9
80007152:	2f f8       	sub	r8,-1
80007154:	fb 48 06 8c 	st.w	sp[1676],r8
80007158:	58 78       	cp.w	r8,7
8000715a:	e0 89 00 04 	brgt	80007162 <_vfprintf_r+0x1dda>
8000715e:	2f 83       	sub	r3,-8
80007160:	c0 b8       	rjmp	80007176 <_vfprintf_r+0x1dee>
80007162:	fa ca f9 78 	sub	r10,sp,-1672
80007166:	02 9b       	mov	r11,r1
80007168:	08 9c       	mov	r12,r4
8000716a:	fe b0 f1 01 	rcall	8000536c <__sprint_r>
8000716e:	e0 81 00 8c 	brne	80007286 <_vfprintf_r+0x1efe>
80007172:	fa c3 f9 e0 	sub	r3,sp,-1568
80007176:	40 ea       	lddsp	r10,sp[0x38]
80007178:	fa f8 06 90 	ld.w	r8,sp[1680]
8000717c:	14 08       	add	r8,r10
8000717e:	fa c9 f9 64 	sub	r9,sp,-1692
80007182:	fb 48 06 90 	st.w	sp[1680],r8
80007186:	87 1a       	st.w	r3[0x4],r10
80007188:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000718c:	87 09       	st.w	r3[0x0],r9
8000718e:	2f f8       	sub	r8,-1
80007190:	fb 48 06 8c 	st.w	sp[1676],r8
80007194:	58 78       	cp.w	r8,7
80007196:	e0 89 00 04 	brgt	8000719e <_vfprintf_r+0x1e16>
8000719a:	2f 83       	sub	r3,-8
8000719c:	c0 a8       	rjmp	800071b0 <_vfprintf_r+0x1e28>
8000719e:	fa ca f9 78 	sub	r10,sp,-1672
800071a2:	02 9b       	mov	r11,r1
800071a4:	08 9c       	mov	r12,r4
800071a6:	fe b0 f0 e3 	rcall	8000536c <__sprint_r>
800071aa:	c6 e1       	brne	80007286 <_vfprintf_r+0x1efe>
800071ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800071b0:	e2 15 00 04 	andl	r5,0x4,COH
800071b4:	c3 f0       	breq	80007232 <_vfprintf_r+0x1eaa>
800071b6:	40 86       	lddsp	r6,sp[0x20]
800071b8:	40 39       	lddsp	r9,sp[0xc]
800071ba:	12 16       	sub	r6,r9
800071bc:	58 06       	cp.w	r6,0
800071be:	e0 89 00 1a 	brgt	800071f2 <_vfprintf_r+0x1e6a>
800071c2:	c3 88       	rjmp	80007232 <_vfprintf_r+0x1eaa>
800071c4:	2f 09       	sub	r9,-16
800071c6:	2f f8       	sub	r8,-1
800071c8:	fb 49 06 90 	st.w	sp[1680],r9
800071cc:	87 05       	st.w	r3[0x0],r5
800071ce:	87 12       	st.w	r3[0x4],r2
800071d0:	fb 48 06 8c 	st.w	sp[1676],r8
800071d4:	58 78       	cp.w	r8,7
800071d6:	e0 89 00 04 	brgt	800071de <_vfprintf_r+0x1e56>
800071da:	2f 83       	sub	r3,-8
800071dc:	c0 98       	rjmp	800071ee <_vfprintf_r+0x1e66>
800071de:	00 9a       	mov	r10,r0
800071e0:	02 9b       	mov	r11,r1
800071e2:	08 9c       	mov	r12,r4
800071e4:	fe b0 f0 c4 	rcall	8000536c <__sprint_r>
800071e8:	c4 f1       	brne	80007286 <_vfprintf_r+0x1efe>
800071ea:	fa c3 f9 e0 	sub	r3,sp,-1568
800071ee:	21 06       	sub	r6,16
800071f0:	c0 68       	rjmp	800071fc <_vfprintf_r+0x1e74>
800071f2:	fe c5 c1 72 	sub	r5,pc,-16014
800071f6:	31 02       	mov	r2,16
800071f8:	fa c0 f9 78 	sub	r0,sp,-1672
800071fc:	fa f9 06 90 	ld.w	r9,sp[1680]
80007200:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007204:	fe ca c1 84 	sub	r10,pc,-15996
80007208:	59 06       	cp.w	r6,16
8000720a:	fe 99 ff dd 	brgt	800071c4 <_vfprintf_r+0x1e3c>
8000720e:	0c 09       	add	r9,r6
80007210:	2f f8       	sub	r8,-1
80007212:	87 0a       	st.w	r3[0x0],r10
80007214:	87 16       	st.w	r3[0x4],r6
80007216:	fb 49 06 90 	st.w	sp[1680],r9
8000721a:	fb 48 06 8c 	st.w	sp[1676],r8
8000721e:	58 78       	cp.w	r8,7
80007220:	e0 8a 00 09 	brle	80007232 <_vfprintf_r+0x1eaa>
80007224:	fa ca f9 78 	sub	r10,sp,-1672
80007228:	02 9b       	mov	r11,r1
8000722a:	08 9c       	mov	r12,r4
8000722c:	fe b0 f0 a0 	rcall	8000536c <__sprint_r>
80007230:	c2 b1       	brne	80007286 <_vfprintf_r+0x1efe>
80007232:	40 bc       	lddsp	r12,sp[0x2c]
80007234:	40 36       	lddsp	r6,sp[0xc]
80007236:	40 8e       	lddsp	lr,sp[0x20]
80007238:	ec 0e 0c 48 	max	r8,r6,lr
8000723c:	10 0c       	add	r12,r8
8000723e:	50 bc       	stdsp	sp[0x2c],r12
80007240:	fa f8 06 90 	ld.w	r8,sp[1680]
80007244:	58 08       	cp.w	r8,0
80007246:	c0 80       	breq	80007256 <_vfprintf_r+0x1ece>
80007248:	fa ca f9 78 	sub	r10,sp,-1672
8000724c:	02 9b       	mov	r11,r1
8000724e:	08 9c       	mov	r12,r4
80007250:	fe b0 f0 8e 	rcall	8000536c <__sprint_r>
80007254:	c1 91       	brne	80007286 <_vfprintf_r+0x1efe>
80007256:	30 0b       	mov	r11,0
80007258:	fa c3 f9 e0 	sub	r3,sp,-1568
8000725c:	fb 4b 06 8c 	st.w	sp[1676],r11
80007260:	fe 9f f1 22 	bral	800054a4 <_vfprintf_r+0x11c>
80007264:	08 95       	mov	r5,r4
80007266:	fa f8 06 90 	ld.w	r8,sp[1680]
8000726a:	58 08       	cp.w	r8,0
8000726c:	c0 80       	breq	8000727c <_vfprintf_r+0x1ef4>
8000726e:	08 9c       	mov	r12,r4
80007270:	fa ca f9 78 	sub	r10,sp,-1672
80007274:	02 9b       	mov	r11,r1
80007276:	fe b0 f0 7b 	rcall	8000536c <__sprint_r>
8000727a:	c0 61       	brne	80007286 <_vfprintf_r+0x1efe>
8000727c:	30 08       	mov	r8,0
8000727e:	fb 48 06 8c 	st.w	sp[1676],r8
80007282:	c0 28       	rjmp	80007286 <_vfprintf_r+0x1efe>
80007284:	40 41       	lddsp	r1,sp[0x10]
80007286:	82 68       	ld.sh	r8,r1[0xc]
80007288:	ed b8 00 06 	bld	r8,0x6
8000728c:	c0 31       	brne	80007292 <_vfprintf_r+0x1f0a>
8000728e:	3f fa       	mov	r10,-1
80007290:	50 ba       	stdsp	sp[0x2c],r10
80007292:	40 bc       	lddsp	r12,sp[0x2c]
80007294:	fe 3d f9 44 	sub	sp,-1724
80007298:	d8 32       	popm	r0-r7,pc
8000729a:	d7 03       	nop

8000729c <__swsetup_r>:
8000729c:	d4 21       	pushm	r4-r7,lr
8000729e:	e0 68 00 f8 	mov	r8,248
800072a2:	18 96       	mov	r6,r12
800072a4:	16 97       	mov	r7,r11
800072a6:	70 0c       	ld.w	r12,r8[0x0]
800072a8:	58 0c       	cp.w	r12,0
800072aa:	c0 60       	breq	800072b6 <__swsetup_r+0x1a>
800072ac:	78 68       	ld.w	r8,r12[0x18]
800072ae:	58 08       	cp.w	r8,0
800072b0:	c0 31       	brne	800072b6 <__swsetup_r+0x1a>
800072b2:	e0 a0 07 b9 	rcall	80008224 <__sinit>
800072b6:	fe c8 c1 06 	sub	r8,pc,-16122
800072ba:	10 37       	cp.w	r7,r8
800072bc:	c0 61       	brne	800072c8 <__swsetup_r+0x2c>
800072be:	e0 68 00 f8 	mov	r8,248
800072c2:	70 08       	ld.w	r8,r8[0x0]
800072c4:	70 07       	ld.w	r7,r8[0x0]
800072c6:	c1 28       	rjmp	800072ea <__swsetup_r+0x4e>
800072c8:	fe c8 c0 f8 	sub	r8,pc,-16136
800072cc:	10 37       	cp.w	r7,r8
800072ce:	c0 61       	brne	800072da <__swsetup_r+0x3e>
800072d0:	e0 68 00 f8 	mov	r8,248
800072d4:	70 08       	ld.w	r8,r8[0x0]
800072d6:	70 17       	ld.w	r7,r8[0x4]
800072d8:	c0 98       	rjmp	800072ea <__swsetup_r+0x4e>
800072da:	fe c8 c0 ea 	sub	r8,pc,-16150
800072de:	10 37       	cp.w	r7,r8
800072e0:	c0 51       	brne	800072ea <__swsetup_r+0x4e>
800072e2:	e0 68 00 f8 	mov	r8,248
800072e6:	70 08       	ld.w	r8,r8[0x0]
800072e8:	70 27       	ld.w	r7,r8[0x8]
800072ea:	8e 68       	ld.sh	r8,r7[0xc]
800072ec:	ed b8 00 03 	bld	r8,0x3
800072f0:	c1 e0       	breq	8000732c <__swsetup_r+0x90>
800072f2:	ed b8 00 04 	bld	r8,0x4
800072f6:	c3 e1       	brne	80007372 <__swsetup_r+0xd6>
800072f8:	ed b8 00 02 	bld	r8,0x2
800072fc:	c1 51       	brne	80007326 <__swsetup_r+0x8a>
800072fe:	6e db       	ld.w	r11,r7[0x34]
80007300:	58 0b       	cp.w	r11,0
80007302:	c0 a0       	breq	80007316 <__swsetup_r+0x7a>
80007304:	ee c8 ff bc 	sub	r8,r7,-68
80007308:	10 3b       	cp.w	r11,r8
8000730a:	c0 40       	breq	80007312 <__swsetup_r+0x76>
8000730c:	0c 9c       	mov	r12,r6
8000730e:	e0 a0 08 25 	rcall	80008358 <_free_r>
80007312:	30 08       	mov	r8,0
80007314:	8f d8       	st.w	r7[0x34],r8
80007316:	8e 68       	ld.sh	r8,r7[0xc]
80007318:	e0 18 ff db 	andl	r8,0xffdb
8000731c:	ae 68       	st.h	r7[0xc],r8
8000731e:	30 08       	mov	r8,0
80007320:	8f 18       	st.w	r7[0x4],r8
80007322:	6e 48       	ld.w	r8,r7[0x10]
80007324:	8f 08       	st.w	r7[0x0],r8
80007326:	8e 68       	ld.sh	r8,r7[0xc]
80007328:	a3 b8       	sbr	r8,0x3
8000732a:	ae 68       	st.h	r7[0xc],r8
8000732c:	6e 48       	ld.w	r8,r7[0x10]
8000732e:	58 08       	cp.w	r8,0
80007330:	c0 b1       	brne	80007346 <__swsetup_r+0xaa>
80007332:	8e 68       	ld.sh	r8,r7[0xc]
80007334:	e2 18 02 80 	andl	r8,0x280,COH
80007338:	e0 48 02 00 	cp.w	r8,512
8000733c:	c0 50       	breq	80007346 <__swsetup_r+0xaa>
8000733e:	0c 9c       	mov	r12,r6
80007340:	0e 9b       	mov	r11,r7
80007342:	e0 a0 0a 4b 	rcall	800087d8 <__smakebuf_r>
80007346:	8e 69       	ld.sh	r9,r7[0xc]
80007348:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000734c:	c0 70       	breq	8000735a <__swsetup_r+0xbe>
8000734e:	30 08       	mov	r8,0
80007350:	8f 28       	st.w	r7[0x8],r8
80007352:	6e 58       	ld.w	r8,r7[0x14]
80007354:	5c 38       	neg	r8
80007356:	8f 68       	st.w	r7[0x18],r8
80007358:	c0 68       	rjmp	80007364 <__swsetup_r+0xc8>
8000735a:	ed b9 00 01 	bld	r9,0x1
8000735e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80007362:	8f 28       	st.w	r7[0x8],r8
80007364:	6e 48       	ld.w	r8,r7[0x10]
80007366:	58 08       	cp.w	r8,0
80007368:	c0 61       	brne	80007374 <__swsetup_r+0xd8>
8000736a:	8e 68       	ld.sh	r8,r7[0xc]
8000736c:	ed b8 00 07 	bld	r8,0x7
80007370:	c0 21       	brne	80007374 <__swsetup_r+0xd8>
80007372:	dc 2a       	popm	r4-r7,pc,r12=-1
80007374:	d8 2a       	popm	r4-r7,pc,r12=0
80007376:	d7 03       	nop

80007378 <quorem>:
80007378:	d4 31       	pushm	r0-r7,lr
8000737a:	20 2d       	sub	sp,8
8000737c:	18 97       	mov	r7,r12
8000737e:	78 48       	ld.w	r8,r12[0x10]
80007380:	76 46       	ld.w	r6,r11[0x10]
80007382:	0c 38       	cp.w	r8,r6
80007384:	c0 34       	brge	8000738a <quorem+0x12>
80007386:	30 0c       	mov	r12,0
80007388:	c8 58       	rjmp	80007492 <quorem+0x11a>
8000738a:	ec c2 ff fc 	sub	r2,r6,-4
8000738e:	f6 c3 ff ec 	sub	r3,r11,-20
80007392:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80007396:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000739a:	2f f9       	sub	r9,-1
8000739c:	20 16       	sub	r6,1
8000739e:	f8 09 0d 08 	divu	r8,r12,r9
800073a2:	f6 02 00 22 	add	r2,r11,r2<<0x2
800073a6:	ee c4 ff ec 	sub	r4,r7,-20
800073aa:	10 95       	mov	r5,r8
800073ac:	58 08       	cp.w	r8,0
800073ae:	c4 10       	breq	80007430 <quorem+0xb8>
800073b0:	30 09       	mov	r9,0
800073b2:	06 9a       	mov	r10,r3
800073b4:	08 98       	mov	r8,r4
800073b6:	12 91       	mov	r1,r9
800073b8:	50 0b       	stdsp	sp[0x0],r11
800073ba:	70 0e       	ld.w	lr,r8[0x0]
800073bc:	b1 8e       	lsr	lr,0x10
800073be:	50 1e       	stdsp	sp[0x4],lr
800073c0:	15 0e       	ld.w	lr,r10++
800073c2:	fc 00 16 10 	lsr	r0,lr,0x10
800073c6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800073ca:	ea 0e 03 41 	mac	r1,r5,lr
800073ce:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800073d2:	b1 81       	lsr	r1,0x10
800073d4:	40 1b       	lddsp	r11,sp[0x4]
800073d6:	ea 00 02 40 	mul	r0,r5,r0
800073da:	e2 00 00 00 	add	r0,r1,r0
800073de:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800073e2:	02 1b       	sub	r11,r1
800073e4:	50 1b       	stdsp	sp[0x4],r11
800073e6:	70 0b       	ld.w	r11,r8[0x0]
800073e8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800073ec:	02 09       	add	r9,r1
800073ee:	f2 0e 01 0e 	sub	lr,r9,lr
800073f2:	b0 1e       	st.h	r8[0x2],lr
800073f4:	fc 09 14 10 	asr	r9,lr,0x10
800073f8:	40 1e       	lddsp	lr,sp[0x4]
800073fa:	fc 09 00 09 	add	r9,lr,r9
800073fe:	b0 09       	st.h	r8[0x0],r9
80007400:	e0 01 16 10 	lsr	r1,r0,0x10
80007404:	2f c8       	sub	r8,-4
80007406:	b1 49       	asr	r9,0x10
80007408:	04 3a       	cp.w	r10,r2
8000740a:	fe 98 ff d8 	brls	800073ba <quorem+0x42>
8000740e:	40 0b       	lddsp	r11,sp[0x0]
80007410:	58 0c       	cp.w	r12,0
80007412:	c0 f1       	brne	80007430 <quorem+0xb8>
80007414:	ec c8 ff fb 	sub	r8,r6,-5
80007418:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000741c:	c0 28       	rjmp	80007420 <quorem+0xa8>
8000741e:	20 16       	sub	r6,1
80007420:	20 48       	sub	r8,4
80007422:	08 38       	cp.w	r8,r4
80007424:	e0 88 00 05 	brls	8000742e <quorem+0xb6>
80007428:	70 09       	ld.w	r9,r8[0x0]
8000742a:	58 09       	cp.w	r9,0
8000742c:	cf 90       	breq	8000741e <quorem+0xa6>
8000742e:	8f 46       	st.w	r7[0x10],r6
80007430:	0e 9c       	mov	r12,r7
80007432:	e0 a0 0c ec 	rcall	80008e0a <__mcmp>
80007436:	c2 d5       	brlt	80007490 <quorem+0x118>
80007438:	2f f5       	sub	r5,-1
8000743a:	08 98       	mov	r8,r4
8000743c:	30 09       	mov	r9,0
8000743e:	07 0b       	ld.w	r11,r3++
80007440:	f6 0a 16 10 	lsr	r10,r11,0x10
80007444:	70 0c       	ld.w	r12,r8[0x0]
80007446:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000744a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000744e:	14 1e       	sub	lr,r10
80007450:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007454:	16 1a       	sub	r10,r11
80007456:	12 0a       	add	r10,r9
80007458:	b0 1a       	st.h	r8[0x2],r10
8000745a:	b1 4a       	asr	r10,0x10
8000745c:	fc 0a 00 09 	add	r9,lr,r10
80007460:	b0 09       	st.h	r8[0x0],r9
80007462:	2f c8       	sub	r8,-4
80007464:	b1 49       	asr	r9,0x10
80007466:	04 33       	cp.w	r3,r2
80007468:	fe 98 ff eb 	brls	8000743e <quorem+0xc6>
8000746c:	ec c8 ff fb 	sub	r8,r6,-5
80007470:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007474:	58 09       	cp.w	r9,0
80007476:	c0 d1       	brne	80007490 <quorem+0x118>
80007478:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000747c:	c0 28       	rjmp	80007480 <quorem+0x108>
8000747e:	20 16       	sub	r6,1
80007480:	20 48       	sub	r8,4
80007482:	08 38       	cp.w	r8,r4
80007484:	e0 88 00 05 	brls	8000748e <quorem+0x116>
80007488:	70 09       	ld.w	r9,r8[0x0]
8000748a:	58 09       	cp.w	r9,0
8000748c:	cf 90       	breq	8000747e <quorem+0x106>
8000748e:	8f 46       	st.w	r7[0x10],r6
80007490:	0a 9c       	mov	r12,r5
80007492:	2f ed       	sub	sp,-8
80007494:	d8 32       	popm	r0-r7,pc
80007496:	d7 03       	nop

80007498 <_dtoa_r>:
80007498:	d4 31       	pushm	r0-r7,lr
8000749a:	21 ad       	sub	sp,104
8000749c:	fa c4 ff 74 	sub	r4,sp,-140
800074a0:	18 97       	mov	r7,r12
800074a2:	16 95       	mov	r5,r11
800074a4:	68 2c       	ld.w	r12,r4[0x8]
800074a6:	50 c9       	stdsp	sp[0x30],r9
800074a8:	68 16       	ld.w	r6,r4[0x4]
800074aa:	68 09       	ld.w	r9,r4[0x0]
800074ac:	50 e8       	stdsp	sp[0x38],r8
800074ae:	14 94       	mov	r4,r10
800074b0:	51 2c       	stdsp	sp[0x48],r12
800074b2:	fa e5 00 08 	st.d	sp[8],r4
800074b6:	51 59       	stdsp	sp[0x54],r9
800074b8:	6e 95       	ld.w	r5,r7[0x24]
800074ba:	58 05       	cp.w	r5,0
800074bc:	c0 91       	brne	800074ce <_dtoa_r+0x36>
800074be:	31 0c       	mov	r12,16
800074c0:	fe b0 e3 e8 	rcall	80003c90 <malloc>
800074c4:	99 35       	st.w	r12[0xc],r5
800074c6:	8f 9c       	st.w	r7[0x24],r12
800074c8:	99 15       	st.w	r12[0x4],r5
800074ca:	99 25       	st.w	r12[0x8],r5
800074cc:	99 05       	st.w	r12[0x0],r5
800074ce:	6e 99       	ld.w	r9,r7[0x24]
800074d0:	72 08       	ld.w	r8,r9[0x0]
800074d2:	58 08       	cp.w	r8,0
800074d4:	c0 f0       	breq	800074f2 <_dtoa_r+0x5a>
800074d6:	72 1a       	ld.w	r10,r9[0x4]
800074d8:	91 1a       	st.w	r8[0x4],r10
800074da:	30 1a       	mov	r10,1
800074dc:	72 19       	ld.w	r9,r9[0x4]
800074de:	f4 09 09 49 	lsl	r9,r10,r9
800074e2:	10 9b       	mov	r11,r8
800074e4:	91 29       	st.w	r8[0x8],r9
800074e6:	0e 9c       	mov	r12,r7
800074e8:	e0 a0 0c aa 	rcall	80008e3c <_Bfree>
800074ec:	6e 98       	ld.w	r8,r7[0x24]
800074ee:	30 09       	mov	r9,0
800074f0:	91 09       	st.w	r8[0x0],r9
800074f2:	40 28       	lddsp	r8,sp[0x8]
800074f4:	10 94       	mov	r4,r8
800074f6:	58 08       	cp.w	r8,0
800074f8:	c0 64       	brge	80007504 <_dtoa_r+0x6c>
800074fa:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800074fe:	50 28       	stdsp	sp[0x8],r8
80007500:	30 18       	mov	r8,1
80007502:	c0 28       	rjmp	80007506 <_dtoa_r+0x6e>
80007504:	30 08       	mov	r8,0
80007506:	8d 08       	st.w	r6[0x0],r8
80007508:	fc 1c 7f f0 	movh	r12,0x7ff0
8000750c:	40 26       	lddsp	r6,sp[0x8]
8000750e:	0c 98       	mov	r8,r6
80007510:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007514:	18 38       	cp.w	r8,r12
80007516:	c2 01       	brne	80007556 <_dtoa_r+0xbe>
80007518:	e0 68 27 0f 	mov	r8,9999
8000751c:	41 5b       	lddsp	r11,sp[0x54]
8000751e:	97 08       	st.w	r11[0x0],r8
80007520:	40 3a       	lddsp	r10,sp[0xc]
80007522:	58 0a       	cp.w	r10,0
80007524:	c0 71       	brne	80007532 <_dtoa_r+0x9a>
80007526:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000752a:	c0 41       	brne	80007532 <_dtoa_r+0x9a>
8000752c:	fe cc c3 8c 	sub	r12,pc,-15476
80007530:	c0 38       	rjmp	80007536 <_dtoa_r+0x9e>
80007532:	fe cc c3 86 	sub	r12,pc,-15482
80007536:	41 29       	lddsp	r9,sp[0x48]
80007538:	58 09       	cp.w	r9,0
8000753a:	e0 80 05 9a 	breq	8000806e <_dtoa_r+0xbd6>
8000753e:	f8 c8 ff fd 	sub	r8,r12,-3
80007542:	f8 c9 ff f8 	sub	r9,r12,-8
80007546:	11 8b       	ld.ub	r11,r8[0x0]
80007548:	30 0a       	mov	r10,0
8000754a:	41 25       	lddsp	r5,sp[0x48]
8000754c:	f4 0b 18 00 	cp.b	r11,r10
80007550:	f2 08 17 10 	movne	r8,r9
80007554:	c1 68       	rjmp	80007580 <_dtoa_r+0xe8>
80007556:	fa ea 00 08 	ld.d	r10,sp[8]
8000755a:	30 08       	mov	r8,0
8000755c:	fa eb 00 3c 	st.d	sp[60],r10
80007560:	30 09       	mov	r9,0
80007562:	e0 a0 14 d6 	rcall	80009f0e <__avr32_f64_cmp_eq>
80007566:	c1 00       	breq	80007586 <_dtoa_r+0xee>
80007568:	30 18       	mov	r8,1
8000756a:	41 5a       	lddsp	r10,sp[0x54]
8000756c:	95 08       	st.w	r10[0x0],r8
8000756e:	fe cc c4 f2 	sub	r12,pc,-15118
80007572:	41 29       	lddsp	r9,sp[0x48]
80007574:	f8 08 00 08 	add	r8,r12,r8
80007578:	58 09       	cp.w	r9,0
8000757a:	e0 80 05 7a 	breq	8000806e <_dtoa_r+0xbd6>
8000757e:	12 95       	mov	r5,r9
80007580:	8b 08       	st.w	r5[0x0],r8
80007582:	e0 8f 05 76 	bral	8000806e <_dtoa_r+0xbd6>
80007586:	fa c8 ff 9c 	sub	r8,sp,-100
8000758a:	fa c9 ff a0 	sub	r9,sp,-96
8000758e:	fa ea 00 3c 	ld.d	r10,sp[60]
80007592:	0e 9c       	mov	r12,r7
80007594:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80007598:	e0 a0 0c a4 	rcall	80008ee0 <__d2b>
8000759c:	18 93       	mov	r3,r12
8000759e:	58 05       	cp.w	r5,0
800075a0:	c0 d0       	breq	800075ba <_dtoa_r+0x122>
800075a2:	fa ea 00 3c 	ld.d	r10,sp[60]
800075a6:	30 04       	mov	r4,0
800075a8:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800075ac:	ea c5 03 ff 	sub	r5,r5,1023
800075b0:	10 9b       	mov	r11,r8
800075b2:	51 74       	stdsp	sp[0x5c],r4
800075b4:	ea 1b 3f f0 	orh	r11,0x3ff0
800075b8:	c2 58       	rjmp	80007602 <_dtoa_r+0x16a>
800075ba:	41 88       	lddsp	r8,sp[0x60]
800075bc:	41 9c       	lddsp	r12,sp[0x64]
800075be:	10 0c       	add	r12,r8
800075c0:	f8 c5 fb ce 	sub	r5,r12,-1074
800075c4:	e0 45 00 20 	cp.w	r5,32
800075c8:	e0 8a 00 0e 	brle	800075e4 <_dtoa_r+0x14c>
800075cc:	f8 cc fb ee 	sub	r12,r12,-1042
800075d0:	40 3b       	lddsp	r11,sp[0xc]
800075d2:	ea 08 11 40 	rsub	r8,r5,64
800075d6:	f6 0c 0a 4c 	lsr	r12,r11,r12
800075da:	ec 08 09 46 	lsl	r6,r6,r8
800075de:	0c 4c       	or	r12,r6
800075e0:	c0 78       	rjmp	800075ee <_dtoa_r+0x156>
800075e2:	d7 03       	nop
800075e4:	ea 0c 11 20 	rsub	r12,r5,32
800075e8:	40 3a       	lddsp	r10,sp[0xc]
800075ea:	f4 0c 09 4c 	lsl	r12,r10,r12
800075ee:	e0 a0 14 1c 	rcall	80009e26 <__avr32_u32_to_f64>
800075f2:	fc 18 fe 10 	movh	r8,0xfe10
800075f6:	30 19       	mov	r9,1
800075f8:	ea c5 04 33 	sub	r5,r5,1075
800075fc:	f0 0b 00 0b 	add	r11,r8,r11
80007600:	51 79       	stdsp	sp[0x5c],r9
80007602:	30 08       	mov	r8,0
80007604:	fc 19 3f f8 	movh	r9,0x3ff8
80007608:	e0 a0 12 a4 	rcall	80009b50 <__avr32_f64_sub>
8000760c:	e0 68 43 61 	mov	r8,17249
80007610:	ea 18 63 6f 	orh	r8,0x636f
80007614:	e0 69 87 a7 	mov	r9,34727
80007618:	ea 19 3f d2 	orh	r9,0x3fd2
8000761c:	e0 a0 11 ae 	rcall	80009978 <__avr32_f64_mul>
80007620:	e0 68 c8 b3 	mov	r8,51379
80007624:	ea 18 8b 60 	orh	r8,0x8b60
80007628:	e0 69 8a 28 	mov	r9,35368
8000762c:	ea 19 3f c6 	orh	r9,0x3fc6
80007630:	e0 a0 13 5e 	rcall	80009cec <__avr32_f64_add>
80007634:	0a 9c       	mov	r12,r5
80007636:	14 90       	mov	r0,r10
80007638:	16 91       	mov	r1,r11
8000763a:	e0 a0 13 fa 	rcall	80009e2e <__avr32_s32_to_f64>
8000763e:	e0 68 79 fb 	mov	r8,31227
80007642:	ea 18 50 9f 	orh	r8,0x509f
80007646:	e0 69 44 13 	mov	r9,17427
8000764a:	ea 19 3f d3 	orh	r9,0x3fd3
8000764e:	e0 a0 11 95 	rcall	80009978 <__avr32_f64_mul>
80007652:	14 98       	mov	r8,r10
80007654:	16 99       	mov	r9,r11
80007656:	00 9a       	mov	r10,r0
80007658:	02 9b       	mov	r11,r1
8000765a:	e0 a0 13 49 	rcall	80009cec <__avr32_f64_add>
8000765e:	14 90       	mov	r0,r10
80007660:	16 91       	mov	r1,r11
80007662:	e0 a0 13 cf 	rcall	80009e00 <__avr32_f64_to_s32>
80007666:	30 08       	mov	r8,0
80007668:	18 96       	mov	r6,r12
8000766a:	30 09       	mov	r9,0
8000766c:	00 9a       	mov	r10,r0
8000766e:	02 9b       	mov	r11,r1
80007670:	e0 a0 14 96 	rcall	80009f9c <__avr32_f64_cmp_lt>
80007674:	c0 c0       	breq	8000768c <_dtoa_r+0x1f4>
80007676:	0c 9c       	mov	r12,r6
80007678:	e0 a0 13 db 	rcall	80009e2e <__avr32_s32_to_f64>
8000767c:	14 98       	mov	r8,r10
8000767e:	16 99       	mov	r9,r11
80007680:	00 9a       	mov	r10,r0
80007682:	02 9b       	mov	r11,r1
80007684:	e0 a0 14 45 	rcall	80009f0e <__avr32_f64_cmp_eq>
80007688:	f7 b6 00 01 	subeq	r6,1
8000768c:	59 66       	cp.w	r6,22
8000768e:	e0 88 00 05 	brls	80007698 <_dtoa_r+0x200>
80007692:	30 18       	mov	r8,1
80007694:	51 48       	stdsp	sp[0x50],r8
80007696:	c1 38       	rjmp	800076bc <_dtoa_r+0x224>
80007698:	fe c8 c4 3c 	sub	r8,pc,-15300
8000769c:	fa ea 00 3c 	ld.d	r10,sp[60]
800076a0:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800076a4:	e0 a0 14 7c 	rcall	80009f9c <__avr32_f64_cmp_lt>
800076a8:	f9 b4 00 00 	moveq	r4,0
800076ac:	fb f4 0a 14 	st.weq	sp[0x50],r4
800076b0:	f7 b6 01 01 	subne	r6,1
800076b4:	f9 bc 01 00 	movne	r12,0
800076b8:	fb fc 1a 14 	st.wne	sp[0x50],r12
800076bc:	41 90       	lddsp	r0,sp[0x64]
800076be:	20 10       	sub	r0,1
800076c0:	0a 10       	sub	r0,r5
800076c2:	c0 46       	brmi	800076ca <_dtoa_r+0x232>
800076c4:	50 40       	stdsp	sp[0x10],r0
800076c6:	30 00       	mov	r0,0
800076c8:	c0 48       	rjmp	800076d0 <_dtoa_r+0x238>
800076ca:	30 0b       	mov	r11,0
800076cc:	5c 30       	neg	r0
800076ce:	50 4b       	stdsp	sp[0x10],r11
800076d0:	ec 02 11 00 	rsub	r2,r6,0
800076d4:	58 06       	cp.w	r6,0
800076d6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800076da:	f5 d6 e4 0a 	addge	r10,r10,r6
800076de:	fb fa 4a 04 	st.wge	sp[0x10],r10
800076e2:	fb f6 4a 11 	st.wge	sp[0x44],r6
800076e6:	f9 b2 04 00 	movge	r2,0
800076ea:	e1 d6 e5 10 	sublt	r0,r0,r6
800076ee:	f9 b9 05 00 	movlt	r9,0
800076f2:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800076f6:	40 c8       	lddsp	r8,sp[0x30]
800076f8:	58 98       	cp.w	r8,9
800076fa:	e0 8b 00 20 	brhi	8000773a <_dtoa_r+0x2a2>
800076fe:	58 58       	cp.w	r8,5
80007700:	f9 b4 0a 01 	movle	r4,1
80007704:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80007708:	f7 b5 09 04 	subgt	r5,4
8000770c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007710:	f9 b4 09 00 	movgt	r4,0
80007714:	40 cc       	lddsp	r12,sp[0x30]
80007716:	58 3c       	cp.w	r12,3
80007718:	c2 d0       	breq	80007772 <_dtoa_r+0x2da>
8000771a:	e0 89 00 05 	brgt	80007724 <_dtoa_r+0x28c>
8000771e:	58 2c       	cp.w	r12,2
80007720:	c1 01       	brne	80007740 <_dtoa_r+0x2a8>
80007722:	c1 88       	rjmp	80007752 <_dtoa_r+0x2ba>
80007724:	40 cb       	lddsp	r11,sp[0x30]
80007726:	58 4b       	cp.w	r11,4
80007728:	c0 60       	breq	80007734 <_dtoa_r+0x29c>
8000772a:	58 5b       	cp.w	r11,5
8000772c:	c0 a1       	brne	80007740 <_dtoa_r+0x2a8>
8000772e:	30 1a       	mov	r10,1
80007730:	50 da       	stdsp	sp[0x34],r10
80007732:	c2 28       	rjmp	80007776 <_dtoa_r+0x2de>
80007734:	30 19       	mov	r9,1
80007736:	50 d9       	stdsp	sp[0x34],r9
80007738:	c0 f8       	rjmp	80007756 <_dtoa_r+0x2be>
8000773a:	30 08       	mov	r8,0
8000773c:	30 14       	mov	r4,1
8000773e:	50 c8       	stdsp	sp[0x30],r8
80007740:	3f f5       	mov	r5,-1
80007742:	30 1c       	mov	r12,1
80007744:	30 0b       	mov	r11,0
80007746:	50 95       	stdsp	sp[0x24],r5
80007748:	50 dc       	stdsp	sp[0x34],r12
8000774a:	0a 91       	mov	r1,r5
8000774c:	31 28       	mov	r8,18
8000774e:	50 eb       	stdsp	sp[0x38],r11
80007750:	c2 08       	rjmp	80007790 <_dtoa_r+0x2f8>
80007752:	30 0a       	mov	r10,0
80007754:	50 da       	stdsp	sp[0x34],r10
80007756:	40 e9       	lddsp	r9,sp[0x38]
80007758:	58 09       	cp.w	r9,0
8000775a:	e0 89 00 07 	brgt	80007768 <_dtoa_r+0x2d0>
8000775e:	30 18       	mov	r8,1
80007760:	50 98       	stdsp	sp[0x24],r8
80007762:	10 91       	mov	r1,r8
80007764:	50 e8       	stdsp	sp[0x38],r8
80007766:	c1 58       	rjmp	80007790 <_dtoa_r+0x2f8>
80007768:	40 e5       	lddsp	r5,sp[0x38]
8000776a:	50 95       	stdsp	sp[0x24],r5
8000776c:	0a 91       	mov	r1,r5
8000776e:	0a 98       	mov	r8,r5
80007770:	c1 08       	rjmp	80007790 <_dtoa_r+0x2f8>
80007772:	30 0c       	mov	r12,0
80007774:	50 dc       	stdsp	sp[0x34],r12
80007776:	40 eb       	lddsp	r11,sp[0x38]
80007778:	ec 0b 00 0b 	add	r11,r6,r11
8000777c:	50 9b       	stdsp	sp[0x24],r11
8000777e:	16 98       	mov	r8,r11
80007780:	2f f8       	sub	r8,-1
80007782:	58 08       	cp.w	r8,0
80007784:	e0 89 00 05 	brgt	8000778e <_dtoa_r+0x2f6>
80007788:	10 91       	mov	r1,r8
8000778a:	30 18       	mov	r8,1
8000778c:	c0 28       	rjmp	80007790 <_dtoa_r+0x2f8>
8000778e:	10 91       	mov	r1,r8
80007790:	30 09       	mov	r9,0
80007792:	6e 9a       	ld.w	r10,r7[0x24]
80007794:	95 19       	st.w	r10[0x4],r9
80007796:	30 49       	mov	r9,4
80007798:	c0 68       	rjmp	800077a4 <_dtoa_r+0x30c>
8000779a:	d7 03       	nop
8000779c:	6a 1a       	ld.w	r10,r5[0x4]
8000779e:	a1 79       	lsl	r9,0x1
800077a0:	2f fa       	sub	r10,-1
800077a2:	8b 1a       	st.w	r5[0x4],r10
800077a4:	6e 95       	ld.w	r5,r7[0x24]
800077a6:	f2 ca ff ec 	sub	r10,r9,-20
800077aa:	10 3a       	cp.w	r10,r8
800077ac:	fe 98 ff f8 	brls	8000779c <_dtoa_r+0x304>
800077b0:	6a 1b       	ld.w	r11,r5[0x4]
800077b2:	0e 9c       	mov	r12,r7
800077b4:	e0 a0 0b 5e 	rcall	80008e70 <_Balloc>
800077b8:	58 e1       	cp.w	r1,14
800077ba:	5f 88       	srls	r8
800077bc:	8b 0c       	st.w	r5[0x0],r12
800077be:	f1 e4 00 04 	and	r4,r8,r4
800077c2:	6e 98       	ld.w	r8,r7[0x24]
800077c4:	70 08       	ld.w	r8,r8[0x0]
800077c6:	50 88       	stdsp	sp[0x20],r8
800077c8:	e0 80 01 82 	breq	80007acc <_dtoa_r+0x634>
800077cc:	58 06       	cp.w	r6,0
800077ce:	e0 8a 00 43 	brle	80007854 <_dtoa_r+0x3bc>
800077d2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800077d6:	fe c8 c5 7a 	sub	r8,pc,-14982
800077da:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800077de:	fa e5 00 18 	st.d	sp[24],r4
800077e2:	ec 04 14 04 	asr	r4,r6,0x4
800077e6:	ed b4 00 04 	bld	r4,0x4
800077ea:	c0 30       	breq	800077f0 <_dtoa_r+0x358>
800077ec:	30 25       	mov	r5,2
800077ee:	c1 08       	rjmp	8000780e <_dtoa_r+0x376>
800077f0:	fe c8 c4 cc 	sub	r8,pc,-15156
800077f4:	f0 e8 00 20 	ld.d	r8,r8[32]
800077f8:	fa ea 00 3c 	ld.d	r10,sp[60]
800077fc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80007800:	e0 a0 14 02 	rcall	8000a004 <__avr32_f64_div>
80007804:	30 35       	mov	r5,3
80007806:	14 98       	mov	r8,r10
80007808:	16 99       	mov	r9,r11
8000780a:	fa e9 00 08 	st.d	sp[8],r8
8000780e:	fe cc c4 ea 	sub	r12,pc,-15126
80007812:	50 a3       	stdsp	sp[0x28],r3
80007814:	0c 93       	mov	r3,r6
80007816:	18 96       	mov	r6,r12
80007818:	c0 f8       	rjmp	80007836 <_dtoa_r+0x39e>
8000781a:	fa ea 00 18 	ld.d	r10,sp[24]
8000781e:	ed b4 00 00 	bld	r4,0x0
80007822:	c0 81       	brne	80007832 <_dtoa_r+0x39a>
80007824:	ec e8 00 00 	ld.d	r8,r6[0]
80007828:	2f f5       	sub	r5,-1
8000782a:	e0 a0 10 a7 	rcall	80009978 <__avr32_f64_mul>
8000782e:	fa eb 00 18 	st.d	sp[24],r10
80007832:	a1 54       	asr	r4,0x1
80007834:	2f 86       	sub	r6,-8
80007836:	58 04       	cp.w	r4,0
80007838:	cf 11       	brne	8000781a <_dtoa_r+0x382>
8000783a:	fa e8 00 18 	ld.d	r8,sp[24]
8000783e:	fa ea 00 08 	ld.d	r10,sp[8]
80007842:	06 96       	mov	r6,r3
80007844:	e0 a0 13 e0 	rcall	8000a004 <__avr32_f64_div>
80007848:	40 a3       	lddsp	r3,sp[0x28]
8000784a:	14 98       	mov	r8,r10
8000784c:	16 99       	mov	r9,r11
8000784e:	fa e9 00 08 	st.d	sp[8],r8
80007852:	c2 f8       	rjmp	800078b0 <_dtoa_r+0x418>
80007854:	ec 08 11 00 	rsub	r8,r6,0
80007858:	c0 31       	brne	8000785e <_dtoa_r+0x3c6>
8000785a:	30 25       	mov	r5,2
8000785c:	c2 a8       	rjmp	800078b0 <_dtoa_r+0x418>
8000785e:	fe cc c5 3a 	sub	r12,pc,-15046
80007862:	f0 04 14 04 	asr	r4,r8,0x4
80007866:	50 1c       	stdsp	sp[0x4],r12
80007868:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000786c:	fe c9 c6 10 	sub	r9,pc,-14832
80007870:	fa ea 00 3c 	ld.d	r10,sp[60]
80007874:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007878:	e0 a0 10 80 	rcall	80009978 <__avr32_f64_mul>
8000787c:	40 1c       	lddsp	r12,sp[0x4]
8000787e:	50 63       	stdsp	sp[0x18],r3
80007880:	30 25       	mov	r5,2
80007882:	0c 93       	mov	r3,r6
80007884:	fa eb 00 08 	st.d	sp[8],r10
80007888:	18 96       	mov	r6,r12
8000788a:	c0 f8       	rjmp	800078a8 <_dtoa_r+0x410>
8000788c:	fa ea 00 08 	ld.d	r10,sp[8]
80007890:	ed b4 00 00 	bld	r4,0x0
80007894:	c0 81       	brne	800078a4 <_dtoa_r+0x40c>
80007896:	ec e8 00 00 	ld.d	r8,r6[0]
8000789a:	2f f5       	sub	r5,-1
8000789c:	e0 a0 10 6e 	rcall	80009978 <__avr32_f64_mul>
800078a0:	fa eb 00 08 	st.d	sp[8],r10
800078a4:	a1 54       	asr	r4,0x1
800078a6:	2f 86       	sub	r6,-8
800078a8:	58 04       	cp.w	r4,0
800078aa:	cf 11       	brne	8000788c <_dtoa_r+0x3f4>
800078ac:	06 96       	mov	r6,r3
800078ae:	40 63       	lddsp	r3,sp[0x18]
800078b0:	41 4a       	lddsp	r10,sp[0x50]
800078b2:	58 0a       	cp.w	r10,0
800078b4:	c2 a0       	breq	80007908 <_dtoa_r+0x470>
800078b6:	fa e8 00 08 	ld.d	r8,sp[8]
800078ba:	58 01       	cp.w	r1,0
800078bc:	5f 94       	srgt	r4
800078be:	fa e9 00 18 	st.d	sp[24],r8
800078c2:	30 08       	mov	r8,0
800078c4:	fc 19 3f f0 	movh	r9,0x3ff0
800078c8:	fa ea 00 18 	ld.d	r10,sp[24]
800078cc:	e0 a0 13 68 	rcall	80009f9c <__avr32_f64_cmp_lt>
800078d0:	f9 bc 00 00 	moveq	r12,0
800078d4:	f9 bc 01 01 	movne	r12,1
800078d8:	e9 ec 00 0c 	and	r12,r4,r12
800078dc:	c1 60       	breq	80007908 <_dtoa_r+0x470>
800078de:	40 98       	lddsp	r8,sp[0x24]
800078e0:	58 08       	cp.w	r8,0
800078e2:	e0 8a 00 f1 	brle	80007ac4 <_dtoa_r+0x62c>
800078e6:	30 08       	mov	r8,0
800078e8:	fc 19 40 24 	movh	r9,0x4024
800078ec:	ec c4 00 01 	sub	r4,r6,1
800078f0:	fa ea 00 18 	ld.d	r10,sp[24]
800078f4:	2f f5       	sub	r5,-1
800078f6:	50 64       	stdsp	sp[0x18],r4
800078f8:	e0 a0 10 40 	rcall	80009978 <__avr32_f64_mul>
800078fc:	40 94       	lddsp	r4,sp[0x24]
800078fe:	14 98       	mov	r8,r10
80007900:	16 99       	mov	r9,r11
80007902:	fa e9 00 08 	st.d	sp[8],r8
80007906:	c0 38       	rjmp	8000790c <_dtoa_r+0x474>
80007908:	50 66       	stdsp	sp[0x18],r6
8000790a:	02 94       	mov	r4,r1
8000790c:	0a 9c       	mov	r12,r5
8000790e:	e0 a0 12 90 	rcall	80009e2e <__avr32_s32_to_f64>
80007912:	fa e8 00 08 	ld.d	r8,sp[8]
80007916:	e0 a0 10 31 	rcall	80009978 <__avr32_f64_mul>
8000791a:	30 08       	mov	r8,0
8000791c:	fc 19 40 1c 	movh	r9,0x401c
80007920:	e0 a0 11 e6 	rcall	80009cec <__avr32_f64_add>
80007924:	14 98       	mov	r8,r10
80007926:	16 99       	mov	r9,r11
80007928:	fa e9 00 28 	st.d	sp[40],r8
8000792c:	fc 18 fc c0 	movh	r8,0xfcc0
80007930:	40 a5       	lddsp	r5,sp[0x28]
80007932:	10 05       	add	r5,r8
80007934:	50 a5       	stdsp	sp[0x28],r5
80007936:	58 04       	cp.w	r4,0
80007938:	c2 11       	brne	8000797a <_dtoa_r+0x4e2>
8000793a:	fa ea 00 08 	ld.d	r10,sp[8]
8000793e:	30 08       	mov	r8,0
80007940:	fc 19 40 14 	movh	r9,0x4014
80007944:	e0 a0 11 06 	rcall	80009b50 <__avr32_f64_sub>
80007948:	40 bc       	lddsp	r12,sp[0x2c]
8000794a:	fa eb 00 08 	st.d	sp[8],r10
8000794e:	14 98       	mov	r8,r10
80007950:	16 99       	mov	r9,r11
80007952:	18 9a       	mov	r10,r12
80007954:	0a 9b       	mov	r11,r5
80007956:	e0 a0 13 23 	rcall	80009f9c <__avr32_f64_cmp_lt>
8000795a:	e0 81 02 54 	brne	80007e02 <_dtoa_r+0x96a>
8000795e:	0a 98       	mov	r8,r5
80007960:	40 b9       	lddsp	r9,sp[0x2c]
80007962:	ee 18 80 00 	eorh	r8,0x8000
80007966:	fa ea 00 08 	ld.d	r10,sp[8]
8000796a:	10 95       	mov	r5,r8
8000796c:	12 98       	mov	r8,r9
8000796e:	0a 99       	mov	r9,r5
80007970:	e0 a0 13 16 	rcall	80009f9c <__avr32_f64_cmp_lt>
80007974:	e0 81 02 3e 	brne	80007df0 <_dtoa_r+0x958>
80007978:	ca 68       	rjmp	80007ac4 <_dtoa_r+0x62c>
8000797a:	fe c9 c7 1e 	sub	r9,pc,-14562
8000797e:	e8 c8 00 01 	sub	r8,r4,1
80007982:	40 d5       	lddsp	r5,sp[0x34]
80007984:	58 05       	cp.w	r5,0
80007986:	c4 f0       	breq	80007a24 <_dtoa_r+0x58c>
80007988:	30 0c       	mov	r12,0
8000798a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000798e:	51 3c       	stdsp	sp[0x4c],r12
80007990:	30 0a       	mov	r10,0
80007992:	fc 1b 3f e0 	movh	r11,0x3fe0
80007996:	e0 a0 13 37 	rcall	8000a004 <__avr32_f64_div>
8000799a:	fa e8 00 28 	ld.d	r8,sp[40]
8000799e:	40 85       	lddsp	r5,sp[0x20]
800079a0:	e0 a0 10 d8 	rcall	80009b50 <__avr32_f64_sub>
800079a4:	fa eb 00 28 	st.d	sp[40],r10
800079a8:	fa ea 00 08 	ld.d	r10,sp[8]
800079ac:	e0 a0 12 2a 	rcall	80009e00 <__avr32_f64_to_s32>
800079b0:	51 6c       	stdsp	sp[0x58],r12
800079b2:	e0 a0 12 3e 	rcall	80009e2e <__avr32_s32_to_f64>
800079b6:	14 98       	mov	r8,r10
800079b8:	16 99       	mov	r9,r11
800079ba:	fa ea 00 08 	ld.d	r10,sp[8]
800079be:	e0 a0 10 c9 	rcall	80009b50 <__avr32_f64_sub>
800079c2:	fa eb 00 08 	st.d	sp[8],r10
800079c6:	41 68       	lddsp	r8,sp[0x58]
800079c8:	2d 08       	sub	r8,-48
800079ca:	0a c8       	st.b	r5++,r8
800079cc:	41 39       	lddsp	r9,sp[0x4c]
800079ce:	2f f9       	sub	r9,-1
800079d0:	51 39       	stdsp	sp[0x4c],r9
800079d2:	fa e8 00 28 	ld.d	r8,sp[40]
800079d6:	e0 a0 12 e3 	rcall	80009f9c <__avr32_f64_cmp_lt>
800079da:	e0 81 03 39 	brne	8000804c <_dtoa_r+0xbb4>
800079de:	fa e8 00 08 	ld.d	r8,sp[8]
800079e2:	30 0a       	mov	r10,0
800079e4:	fc 1b 3f f0 	movh	r11,0x3ff0
800079e8:	e0 a0 10 b4 	rcall	80009b50 <__avr32_f64_sub>
800079ec:	fa e8 00 28 	ld.d	r8,sp[40]
800079f0:	e0 a0 12 d6 	rcall	80009f9c <__avr32_f64_cmp_lt>
800079f4:	fa ea 00 28 	ld.d	r10,sp[40]
800079f8:	30 08       	mov	r8,0
800079fa:	fc 19 40 24 	movh	r9,0x4024
800079fe:	e0 81 00 da 	brne	80007bb2 <_dtoa_r+0x71a>
80007a02:	41 3c       	lddsp	r12,sp[0x4c]
80007a04:	08 3c       	cp.w	r12,r4
80007a06:	c5 f4       	brge	80007ac4 <_dtoa_r+0x62c>
80007a08:	e0 a0 0f b8 	rcall	80009978 <__avr32_f64_mul>
80007a0c:	30 08       	mov	r8,0
80007a0e:	fa eb 00 28 	st.d	sp[40],r10
80007a12:	fc 19 40 24 	movh	r9,0x4024
80007a16:	fa ea 00 08 	ld.d	r10,sp[8]
80007a1a:	e0 a0 0f af 	rcall	80009978 <__avr32_f64_mul>
80007a1e:	fa eb 00 08 	st.d	sp[8],r10
80007a22:	cc 3b       	rjmp	800079a8 <_dtoa_r+0x510>
80007a24:	40 85       	lddsp	r5,sp[0x20]
80007a26:	08 05       	add	r5,r4
80007a28:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80007a2c:	51 35       	stdsp	sp[0x4c],r5
80007a2e:	fa e8 00 28 	ld.d	r8,sp[40]
80007a32:	40 85       	lddsp	r5,sp[0x20]
80007a34:	e0 a0 0f a2 	rcall	80009978 <__avr32_f64_mul>
80007a38:	fa eb 00 28 	st.d	sp[40],r10
80007a3c:	fa ea 00 08 	ld.d	r10,sp[8]
80007a40:	e0 a0 11 e0 	rcall	80009e00 <__avr32_f64_to_s32>
80007a44:	51 6c       	stdsp	sp[0x58],r12
80007a46:	e0 a0 11 f4 	rcall	80009e2e <__avr32_s32_to_f64>
80007a4a:	14 98       	mov	r8,r10
80007a4c:	16 99       	mov	r9,r11
80007a4e:	fa ea 00 08 	ld.d	r10,sp[8]
80007a52:	e0 a0 10 7f 	rcall	80009b50 <__avr32_f64_sub>
80007a56:	fa eb 00 08 	st.d	sp[8],r10
80007a5a:	41 68       	lddsp	r8,sp[0x58]
80007a5c:	2d 08       	sub	r8,-48
80007a5e:	0a c8       	st.b	r5++,r8
80007a60:	41 3c       	lddsp	r12,sp[0x4c]
80007a62:	18 35       	cp.w	r5,r12
80007a64:	c2 81       	brne	80007ab4 <_dtoa_r+0x61c>
80007a66:	30 08       	mov	r8,0
80007a68:	fc 19 3f e0 	movh	r9,0x3fe0
80007a6c:	fa ea 00 28 	ld.d	r10,sp[40]
80007a70:	e0 a0 11 3e 	rcall	80009cec <__avr32_f64_add>
80007a74:	40 85       	lddsp	r5,sp[0x20]
80007a76:	fa e8 00 08 	ld.d	r8,sp[8]
80007a7a:	08 05       	add	r5,r4
80007a7c:	e0 a0 12 90 	rcall	80009f9c <__avr32_f64_cmp_lt>
80007a80:	e0 81 00 99 	brne	80007bb2 <_dtoa_r+0x71a>
80007a84:	fa e8 00 28 	ld.d	r8,sp[40]
80007a88:	30 0a       	mov	r10,0
80007a8a:	fc 1b 3f e0 	movh	r11,0x3fe0
80007a8e:	e0 a0 10 61 	rcall	80009b50 <__avr32_f64_sub>
80007a92:	14 98       	mov	r8,r10
80007a94:	16 99       	mov	r9,r11
80007a96:	fa ea 00 08 	ld.d	r10,sp[8]
80007a9a:	e0 a0 12 81 	rcall	80009f9c <__avr32_f64_cmp_lt>
80007a9e:	c1 30       	breq	80007ac4 <_dtoa_r+0x62c>
80007aa0:	33 09       	mov	r9,48
80007aa2:	0a 98       	mov	r8,r5
80007aa4:	11 7a       	ld.ub	r10,--r8
80007aa6:	f2 0a 18 00 	cp.b	r10,r9
80007aaa:	e0 81 02 d1 	brne	8000804c <_dtoa_r+0xbb4>
80007aae:	10 95       	mov	r5,r8
80007ab0:	cf 9b       	rjmp	80007aa2 <_dtoa_r+0x60a>
80007ab2:	d7 03       	nop
80007ab4:	30 08       	mov	r8,0
80007ab6:	fc 19 40 24 	movh	r9,0x4024
80007aba:	e0 a0 0f 5f 	rcall	80009978 <__avr32_f64_mul>
80007abe:	fa eb 00 08 	st.d	sp[8],r10
80007ac2:	cb db       	rjmp	80007a3c <_dtoa_r+0x5a4>
80007ac4:	fa ea 00 3c 	ld.d	r10,sp[60]
80007ac8:	fa eb 00 08 	st.d	sp[8],r10
80007acc:	58 e6       	cp.w	r6,14
80007ace:	5f ab       	srle	r11
80007ad0:	41 8a       	lddsp	r10,sp[0x60]
80007ad2:	30 08       	mov	r8,0
80007ad4:	f4 09 11 ff 	rsub	r9,r10,-1
80007ad8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80007adc:	f0 09 18 00 	cp.b	r9,r8
80007ae0:	e0 80 00 82 	breq	80007be4 <_dtoa_r+0x74c>
80007ae4:	40 ea       	lddsp	r10,sp[0x38]
80007ae6:	58 01       	cp.w	r1,0
80007ae8:	5f a9       	srle	r9
80007aea:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80007aee:	fe ca c8 92 	sub	r10,pc,-14190
80007af2:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80007af6:	fa e5 00 10 	st.d	sp[16],r4
80007afa:	f0 09 18 00 	cp.b	r9,r8
80007afe:	c1 40       	breq	80007b26 <_dtoa_r+0x68e>
80007b00:	58 01       	cp.w	r1,0
80007b02:	e0 81 01 77 	brne	80007df0 <_dtoa_r+0x958>
80007b06:	30 08       	mov	r8,0
80007b08:	fc 19 40 14 	movh	r9,0x4014
80007b0c:	08 9a       	mov	r10,r4
80007b0e:	0a 9b       	mov	r11,r5
80007b10:	e0 a0 0f 34 	rcall	80009978 <__avr32_f64_mul>
80007b14:	fa e8 00 08 	ld.d	r8,sp[8]
80007b18:	e0 a0 12 0e 	rcall	80009f34 <__avr32_f64_cmp_ge>
80007b1c:	e0 81 01 6a 	brne	80007df0 <_dtoa_r+0x958>
80007b20:	02 92       	mov	r2,r1
80007b22:	e0 8f 01 72 	bral	80007e06 <_dtoa_r+0x96e>
80007b26:	40 85       	lddsp	r5,sp[0x20]
80007b28:	30 14       	mov	r4,1
80007b2a:	fa e8 00 10 	ld.d	r8,sp[16]
80007b2e:	fa ea 00 08 	ld.d	r10,sp[8]
80007b32:	e0 a0 12 69 	rcall	8000a004 <__avr32_f64_div>
80007b36:	e0 a0 11 65 	rcall	80009e00 <__avr32_f64_to_s32>
80007b3a:	18 92       	mov	r2,r12
80007b3c:	e0 a0 11 79 	rcall	80009e2e <__avr32_s32_to_f64>
80007b40:	fa e8 00 10 	ld.d	r8,sp[16]
80007b44:	e0 a0 0f 1a 	rcall	80009978 <__avr32_f64_mul>
80007b48:	14 98       	mov	r8,r10
80007b4a:	16 99       	mov	r9,r11
80007b4c:	fa ea 00 08 	ld.d	r10,sp[8]
80007b50:	e0 a0 10 00 	rcall	80009b50 <__avr32_f64_sub>
80007b54:	fa eb 00 08 	st.d	sp[8],r10
80007b58:	e4 c8 ff d0 	sub	r8,r2,-48
80007b5c:	0a c8       	st.b	r5++,r8
80007b5e:	fc 19 40 24 	movh	r9,0x4024
80007b62:	30 08       	mov	r8,0
80007b64:	02 34       	cp.w	r4,r1
80007b66:	c3 31       	brne	80007bcc <_dtoa_r+0x734>
80007b68:	fa e8 00 08 	ld.d	r8,sp[8]
80007b6c:	e0 a0 10 c0 	rcall	80009cec <__avr32_f64_add>
80007b70:	16 91       	mov	r1,r11
80007b72:	14 90       	mov	r0,r10
80007b74:	14 98       	mov	r8,r10
80007b76:	02 99       	mov	r9,r1
80007b78:	fa ea 00 10 	ld.d	r10,sp[16]
80007b7c:	e0 a0 12 10 	rcall	80009f9c <__avr32_f64_cmp_lt>
80007b80:	c1 a1       	brne	80007bb4 <_dtoa_r+0x71c>
80007b82:	fa e8 00 10 	ld.d	r8,sp[16]
80007b86:	00 9a       	mov	r10,r0
80007b88:	02 9b       	mov	r11,r1
80007b8a:	e0 a0 11 c2 	rcall	80009f0e <__avr32_f64_cmp_eq>
80007b8e:	e0 80 02 5e 	breq	8000804a <_dtoa_r+0xbb2>
80007b92:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80007b96:	c0 f1       	brne	80007bb4 <_dtoa_r+0x71c>
80007b98:	e0 8f 02 59 	bral	8000804a <_dtoa_r+0xbb2>
80007b9c:	40 8a       	lddsp	r10,sp[0x20]
80007b9e:	14 38       	cp.w	r8,r10
80007ba0:	c0 30       	breq	80007ba6 <_dtoa_r+0x70e>
80007ba2:	10 95       	mov	r5,r8
80007ba4:	c0 98       	rjmp	80007bb6 <_dtoa_r+0x71e>
80007ba6:	33 08       	mov	r8,48
80007ba8:	40 89       	lddsp	r9,sp[0x20]
80007baa:	2f f6       	sub	r6,-1
80007bac:	b2 88       	st.b	r9[0x0],r8
80007bae:	40 88       	lddsp	r8,sp[0x20]
80007bb0:	c0 88       	rjmp	80007bc0 <_dtoa_r+0x728>
80007bb2:	40 66       	lddsp	r6,sp[0x18]
80007bb4:	33 99       	mov	r9,57
80007bb6:	0a 98       	mov	r8,r5
80007bb8:	11 7a       	ld.ub	r10,--r8
80007bba:	f2 0a 18 00 	cp.b	r10,r9
80007bbe:	ce f0       	breq	80007b9c <_dtoa_r+0x704>
80007bc0:	50 66       	stdsp	sp[0x18],r6
80007bc2:	11 89       	ld.ub	r9,r8[0x0]
80007bc4:	2f f9       	sub	r9,-1
80007bc6:	b0 89       	st.b	r8[0x0],r9
80007bc8:	e0 8f 02 42 	bral	8000804c <_dtoa_r+0xbb4>
80007bcc:	e0 a0 0e d6 	rcall	80009978 <__avr32_f64_mul>
80007bd0:	2f f4       	sub	r4,-1
80007bd2:	fa eb 00 08 	st.d	sp[8],r10
80007bd6:	30 08       	mov	r8,0
80007bd8:	30 09       	mov	r9,0
80007bda:	e0 a0 11 9a 	rcall	80009f0e <__avr32_f64_cmp_eq>
80007bde:	ca 60       	breq	80007b2a <_dtoa_r+0x692>
80007be0:	e0 8f 02 35 	bral	8000804a <_dtoa_r+0xbb2>
80007be4:	40 d8       	lddsp	r8,sp[0x34]
80007be6:	58 08       	cp.w	r8,0
80007be8:	c0 51       	brne	80007bf2 <_dtoa_r+0x75a>
80007bea:	04 98       	mov	r8,r2
80007bec:	00 95       	mov	r5,r0
80007bee:	40 d4       	lddsp	r4,sp[0x34]
80007bf0:	c3 78       	rjmp	80007c5e <_dtoa_r+0x7c6>
80007bf2:	40 c5       	lddsp	r5,sp[0x30]
80007bf4:	58 15       	cp.w	r5,1
80007bf6:	e0 89 00 0f 	brgt	80007c14 <_dtoa_r+0x77c>
80007bfa:	41 74       	lddsp	r4,sp[0x5c]
80007bfc:	58 04       	cp.w	r4,0
80007bfe:	c0 40       	breq	80007c06 <_dtoa_r+0x76e>
80007c00:	f4 c9 fb cd 	sub	r9,r10,-1075
80007c04:	c0 48       	rjmp	80007c0c <_dtoa_r+0x774>
80007c06:	41 99       	lddsp	r9,sp[0x64]
80007c08:	f2 09 11 36 	rsub	r9,r9,54
80007c0c:	04 98       	mov	r8,r2
80007c0e:	00 95       	mov	r5,r0
80007c10:	c1 c8       	rjmp	80007c48 <_dtoa_r+0x7b0>
80007c12:	d7 03       	nop
80007c14:	e2 c8 00 01 	sub	r8,r1,1
80007c18:	58 01       	cp.w	r1,0
80007c1a:	e0 05 17 40 	movge	r5,r0
80007c1e:	e2 09 17 40 	movge	r9,r1
80007c22:	e1 d1 e5 15 	sublt	r5,r0,r1
80007c26:	f9 b9 05 00 	movlt	r9,0
80007c2a:	10 32       	cp.w	r2,r8
80007c2c:	e5 d8 e4 18 	subge	r8,r2,r8
80007c30:	f1 d2 e5 18 	sublt	r8,r8,r2
80007c34:	e5 d8 e5 02 	addlt	r2,r2,r8
80007c38:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80007c3c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80007c40:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80007c44:	f9 b8 05 00 	movlt	r8,0
80007c48:	40 4b       	lddsp	r11,sp[0x10]
80007c4a:	12 0b       	add	r11,r9
80007c4c:	50 08       	stdsp	sp[0x0],r8
80007c4e:	50 4b       	stdsp	sp[0x10],r11
80007c50:	12 00       	add	r0,r9
80007c52:	30 1b       	mov	r11,1
80007c54:	0e 9c       	mov	r12,r7
80007c56:	e0 a0 0a c1 	rcall	800091d8 <__i2b>
80007c5a:	40 08       	lddsp	r8,sp[0x0]
80007c5c:	18 94       	mov	r4,r12
80007c5e:	40 4a       	lddsp	r10,sp[0x10]
80007c60:	58 05       	cp.w	r5,0
80007c62:	5f 99       	srgt	r9
80007c64:	58 0a       	cp.w	r10,0
80007c66:	5f 9a       	srgt	r10
80007c68:	f5 e9 00 09 	and	r9,r10,r9
80007c6c:	c0 80       	breq	80007c7c <_dtoa_r+0x7e4>
80007c6e:	40 4c       	lddsp	r12,sp[0x10]
80007c70:	f8 05 0d 49 	min	r9,r12,r5
80007c74:	12 1c       	sub	r12,r9
80007c76:	12 10       	sub	r0,r9
80007c78:	50 4c       	stdsp	sp[0x10],r12
80007c7a:	12 15       	sub	r5,r9
80007c7c:	58 02       	cp.w	r2,0
80007c7e:	e0 8a 00 27 	brle	80007ccc <_dtoa_r+0x834>
80007c82:	40 db       	lddsp	r11,sp[0x34]
80007c84:	58 0b       	cp.w	r11,0
80007c86:	c1 d0       	breq	80007cc0 <_dtoa_r+0x828>
80007c88:	58 08       	cp.w	r8,0
80007c8a:	e0 8a 00 17 	brle	80007cb8 <_dtoa_r+0x820>
80007c8e:	10 9a       	mov	r10,r8
80007c90:	50 08       	stdsp	sp[0x0],r8
80007c92:	08 9b       	mov	r11,r4
80007c94:	0e 9c       	mov	r12,r7
80007c96:	e0 a0 0a e7 	rcall	80009264 <__pow5mult>
80007c9a:	06 9a       	mov	r10,r3
80007c9c:	18 9b       	mov	r11,r12
80007c9e:	18 94       	mov	r4,r12
80007ca0:	0e 9c       	mov	r12,r7
80007ca2:	e0 a0 0a 1b 	rcall	800090d8 <__multiply>
80007ca6:	18 99       	mov	r9,r12
80007ca8:	06 9b       	mov	r11,r3
80007caa:	50 19       	stdsp	sp[0x4],r9
80007cac:	0e 9c       	mov	r12,r7
80007cae:	e0 a0 08 c7 	rcall	80008e3c <_Bfree>
80007cb2:	40 19       	lddsp	r9,sp[0x4]
80007cb4:	40 08       	lddsp	r8,sp[0x0]
80007cb6:	12 93       	mov	r3,r9
80007cb8:	e4 08 01 0a 	sub	r10,r2,r8
80007cbc:	c0 80       	breq	80007ccc <_dtoa_r+0x834>
80007cbe:	c0 28       	rjmp	80007cc2 <_dtoa_r+0x82a>
80007cc0:	04 9a       	mov	r10,r2
80007cc2:	06 9b       	mov	r11,r3
80007cc4:	0e 9c       	mov	r12,r7
80007cc6:	e0 a0 0a cf 	rcall	80009264 <__pow5mult>
80007cca:	18 93       	mov	r3,r12
80007ccc:	30 1b       	mov	r11,1
80007cce:	0e 9c       	mov	r12,r7
80007cd0:	e0 a0 0a 84 	rcall	800091d8 <__i2b>
80007cd4:	41 1a       	lddsp	r10,sp[0x44]
80007cd6:	18 92       	mov	r2,r12
80007cd8:	58 0a       	cp.w	r10,0
80007cda:	e0 8a 00 07 	brle	80007ce8 <_dtoa_r+0x850>
80007cde:	18 9b       	mov	r11,r12
80007ce0:	0e 9c       	mov	r12,r7
80007ce2:	e0 a0 0a c1 	rcall	80009264 <__pow5mult>
80007ce6:	18 92       	mov	r2,r12
80007ce8:	40 c9       	lddsp	r9,sp[0x30]
80007cea:	58 19       	cp.w	r9,1
80007cec:	e0 89 00 14 	brgt	80007d14 <_dtoa_r+0x87c>
80007cf0:	40 38       	lddsp	r8,sp[0xc]
80007cf2:	58 08       	cp.w	r8,0
80007cf4:	c1 01       	brne	80007d14 <_dtoa_r+0x87c>
80007cf6:	40 29       	lddsp	r9,sp[0x8]
80007cf8:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80007cfc:	c0 c1       	brne	80007d14 <_dtoa_r+0x87c>
80007cfe:	12 98       	mov	r8,r9
80007d00:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007d04:	c0 80       	breq	80007d14 <_dtoa_r+0x87c>
80007d06:	40 4c       	lddsp	r12,sp[0x10]
80007d08:	30 1b       	mov	r11,1
80007d0a:	2f fc       	sub	r12,-1
80007d0c:	2f f0       	sub	r0,-1
80007d0e:	50 4c       	stdsp	sp[0x10],r12
80007d10:	50 6b       	stdsp	sp[0x18],r11
80007d12:	c0 38       	rjmp	80007d18 <_dtoa_r+0x880>
80007d14:	30 0a       	mov	r10,0
80007d16:	50 6a       	stdsp	sp[0x18],r10
80007d18:	41 19       	lddsp	r9,sp[0x44]
80007d1a:	58 09       	cp.w	r9,0
80007d1c:	c0 31       	brne	80007d22 <_dtoa_r+0x88a>
80007d1e:	30 1c       	mov	r12,1
80007d20:	c0 98       	rjmp	80007d32 <_dtoa_r+0x89a>
80007d22:	64 48       	ld.w	r8,r2[0x10]
80007d24:	2f c8       	sub	r8,-4
80007d26:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80007d2a:	e0 a0 07 f9 	rcall	80008d1c <__hi0bits>
80007d2e:	f8 0c 11 20 	rsub	r12,r12,32
80007d32:	40 4b       	lddsp	r11,sp[0x10]
80007d34:	f8 0b 00 08 	add	r8,r12,r11
80007d38:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007d3c:	c0 c0       	breq	80007d54 <_dtoa_r+0x8bc>
80007d3e:	f0 08 11 20 	rsub	r8,r8,32
80007d42:	58 48       	cp.w	r8,4
80007d44:	e0 8a 00 06 	brle	80007d50 <_dtoa_r+0x8b8>
80007d48:	20 48       	sub	r8,4
80007d4a:	10 0b       	add	r11,r8
80007d4c:	50 4b       	stdsp	sp[0x10],r11
80007d4e:	c0 78       	rjmp	80007d5c <_dtoa_r+0x8c4>
80007d50:	58 48       	cp.w	r8,4
80007d52:	c0 70       	breq	80007d60 <_dtoa_r+0x8c8>
80007d54:	40 4a       	lddsp	r10,sp[0x10]
80007d56:	2e 48       	sub	r8,-28
80007d58:	10 0a       	add	r10,r8
80007d5a:	50 4a       	stdsp	sp[0x10],r10
80007d5c:	10 00       	add	r0,r8
80007d5e:	10 05       	add	r5,r8
80007d60:	58 00       	cp.w	r0,0
80007d62:	e0 8a 00 08 	brle	80007d72 <_dtoa_r+0x8da>
80007d66:	06 9b       	mov	r11,r3
80007d68:	00 9a       	mov	r10,r0
80007d6a:	0e 9c       	mov	r12,r7
80007d6c:	e0 a0 09 72 	rcall	80009050 <__lshift>
80007d70:	18 93       	mov	r3,r12
80007d72:	40 49       	lddsp	r9,sp[0x10]
80007d74:	58 09       	cp.w	r9,0
80007d76:	e0 8a 00 08 	brle	80007d86 <_dtoa_r+0x8ee>
80007d7a:	04 9b       	mov	r11,r2
80007d7c:	12 9a       	mov	r10,r9
80007d7e:	0e 9c       	mov	r12,r7
80007d80:	e0 a0 09 68 	rcall	80009050 <__lshift>
80007d84:	18 92       	mov	r2,r12
80007d86:	41 48       	lddsp	r8,sp[0x50]
80007d88:	58 08       	cp.w	r8,0
80007d8a:	c1 b0       	breq	80007dc0 <_dtoa_r+0x928>
80007d8c:	04 9b       	mov	r11,r2
80007d8e:	06 9c       	mov	r12,r3
80007d90:	e0 a0 08 3d 	rcall	80008e0a <__mcmp>
80007d94:	c1 64       	brge	80007dc0 <_dtoa_r+0x928>
80007d96:	06 9b       	mov	r11,r3
80007d98:	30 09       	mov	r9,0
80007d9a:	30 aa       	mov	r10,10
80007d9c:	0e 9c       	mov	r12,r7
80007d9e:	e0 a0 0a 25 	rcall	800091e8 <__multadd>
80007da2:	20 16       	sub	r6,1
80007da4:	18 93       	mov	r3,r12
80007da6:	40 dc       	lddsp	r12,sp[0x34]
80007da8:	58 0c       	cp.w	r12,0
80007daa:	c0 31       	brne	80007db0 <_dtoa_r+0x918>
80007dac:	40 91       	lddsp	r1,sp[0x24]
80007dae:	c0 98       	rjmp	80007dc0 <_dtoa_r+0x928>
80007db0:	08 9b       	mov	r11,r4
80007db2:	40 91       	lddsp	r1,sp[0x24]
80007db4:	30 09       	mov	r9,0
80007db6:	30 aa       	mov	r10,10
80007db8:	0e 9c       	mov	r12,r7
80007dba:	e0 a0 0a 17 	rcall	800091e8 <__multadd>
80007dbe:	18 94       	mov	r4,r12
80007dc0:	58 01       	cp.w	r1,0
80007dc2:	5f a9       	srle	r9
80007dc4:	40 cb       	lddsp	r11,sp[0x30]
80007dc6:	58 2b       	cp.w	r11,2
80007dc8:	5f 98       	srgt	r8
80007dca:	f3 e8 00 08 	and	r8,r9,r8
80007dce:	c2 50       	breq	80007e18 <_dtoa_r+0x980>
80007dd0:	58 01       	cp.w	r1,0
80007dd2:	c1 11       	brne	80007df4 <_dtoa_r+0x95c>
80007dd4:	04 9b       	mov	r11,r2
80007dd6:	02 99       	mov	r9,r1
80007dd8:	30 5a       	mov	r10,5
80007dda:	0e 9c       	mov	r12,r7
80007ddc:	e0 a0 0a 06 	rcall	800091e8 <__multadd>
80007de0:	18 92       	mov	r2,r12
80007de2:	18 9b       	mov	r11,r12
80007de4:	06 9c       	mov	r12,r3
80007de6:	e0 a0 08 12 	rcall	80008e0a <__mcmp>
80007dea:	e0 89 00 0f 	brgt	80007e08 <_dtoa_r+0x970>
80007dee:	c0 38       	rjmp	80007df4 <_dtoa_r+0x95c>
80007df0:	30 02       	mov	r2,0
80007df2:	04 94       	mov	r4,r2
80007df4:	40 ea       	lddsp	r10,sp[0x38]
80007df6:	30 09       	mov	r9,0
80007df8:	5c da       	com	r10
80007dfa:	40 85       	lddsp	r5,sp[0x20]
80007dfc:	50 6a       	stdsp	sp[0x18],r10
80007dfe:	50 49       	stdsp	sp[0x10],r9
80007e00:	c0 f9       	rjmp	8000801e <_dtoa_r+0xb86>
80007e02:	08 92       	mov	r2,r4
80007e04:	40 66       	lddsp	r6,sp[0x18]
80007e06:	04 94       	mov	r4,r2
80007e08:	2f f6       	sub	r6,-1
80007e0a:	50 66       	stdsp	sp[0x18],r6
80007e0c:	33 18       	mov	r8,49
80007e0e:	40 85       	lddsp	r5,sp[0x20]
80007e10:	0a c8       	st.b	r5++,r8
80007e12:	30 08       	mov	r8,0
80007e14:	50 48       	stdsp	sp[0x10],r8
80007e16:	c0 49       	rjmp	8000801e <_dtoa_r+0xb86>
80007e18:	40 dc       	lddsp	r12,sp[0x34]
80007e1a:	58 0c       	cp.w	r12,0
80007e1c:	e0 80 00 b5 	breq	80007f86 <_dtoa_r+0xaee>
80007e20:	58 05       	cp.w	r5,0
80007e22:	e0 8a 00 08 	brle	80007e32 <_dtoa_r+0x99a>
80007e26:	08 9b       	mov	r11,r4
80007e28:	0a 9a       	mov	r10,r5
80007e2a:	0e 9c       	mov	r12,r7
80007e2c:	e0 a0 09 12 	rcall	80009050 <__lshift>
80007e30:	18 94       	mov	r4,r12
80007e32:	40 6b       	lddsp	r11,sp[0x18]
80007e34:	58 0b       	cp.w	r11,0
80007e36:	c0 31       	brne	80007e3c <_dtoa_r+0x9a4>
80007e38:	08 9c       	mov	r12,r4
80007e3a:	c1 38       	rjmp	80007e60 <_dtoa_r+0x9c8>
80007e3c:	68 1b       	ld.w	r11,r4[0x4]
80007e3e:	0e 9c       	mov	r12,r7
80007e40:	e0 a0 08 18 	rcall	80008e70 <_Balloc>
80007e44:	68 4a       	ld.w	r10,r4[0x10]
80007e46:	18 95       	mov	r5,r12
80007e48:	e8 cb ff f4 	sub	r11,r4,-12
80007e4c:	2f ea       	sub	r10,-2
80007e4e:	2f 4c       	sub	r12,-12
80007e50:	a3 6a       	lsl	r10,0x2
80007e52:	fe b0 e7 e9 	rcall	80004e24 <memcpy>
80007e56:	0a 9b       	mov	r11,r5
80007e58:	30 1a       	mov	r10,1
80007e5a:	0e 9c       	mov	r12,r7
80007e5c:	e0 a0 08 fa 	rcall	80009050 <__lshift>
80007e60:	50 44       	stdsp	sp[0x10],r4
80007e62:	40 3a       	lddsp	r10,sp[0xc]
80007e64:	30 19       	mov	r9,1
80007e66:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80007e6a:	18 94       	mov	r4,r12
80007e6c:	50 da       	stdsp	sp[0x34],r10
80007e6e:	40 85       	lddsp	r5,sp[0x20]
80007e70:	50 99       	stdsp	sp[0x24],r9
80007e72:	50 26       	stdsp	sp[0x8],r6
80007e74:	50 e1       	stdsp	sp[0x38],r1
80007e76:	04 9b       	mov	r11,r2
80007e78:	06 9c       	mov	r12,r3
80007e7a:	fe b0 fa 7f 	rcall	80007378 <quorem>
80007e7e:	40 4b       	lddsp	r11,sp[0x10]
80007e80:	f8 c0 ff d0 	sub	r0,r12,-48
80007e84:	06 9c       	mov	r12,r3
80007e86:	e0 a0 07 c2 	rcall	80008e0a <__mcmp>
80007e8a:	08 9a       	mov	r10,r4
80007e8c:	50 6c       	stdsp	sp[0x18],r12
80007e8e:	04 9b       	mov	r11,r2
80007e90:	0e 9c       	mov	r12,r7
80007e92:	e0 a0 08 77 	rcall	80008f80 <__mdiff>
80007e96:	18 91       	mov	r1,r12
80007e98:	78 38       	ld.w	r8,r12[0xc]
80007e9a:	58 08       	cp.w	r8,0
80007e9c:	c0 30       	breq	80007ea2 <_dtoa_r+0xa0a>
80007e9e:	30 16       	mov	r6,1
80007ea0:	c0 68       	rjmp	80007eac <_dtoa_r+0xa14>
80007ea2:	18 9b       	mov	r11,r12
80007ea4:	06 9c       	mov	r12,r3
80007ea6:	e0 a0 07 b2 	rcall	80008e0a <__mcmp>
80007eaa:	18 96       	mov	r6,r12
80007eac:	0e 9c       	mov	r12,r7
80007eae:	02 9b       	mov	r11,r1
80007eb0:	e0 a0 07 c6 	rcall	80008e3c <_Bfree>
80007eb4:	40 cc       	lddsp	r12,sp[0x30]
80007eb6:	ed ec 10 08 	or	r8,r6,r12
80007eba:	c0 d1       	brne	80007ed4 <_dtoa_r+0xa3c>
80007ebc:	40 db       	lddsp	r11,sp[0x34]
80007ebe:	58 0b       	cp.w	r11,0
80007ec0:	c0 a1       	brne	80007ed4 <_dtoa_r+0xa3c>
80007ec2:	40 26       	lddsp	r6,sp[0x8]
80007ec4:	e0 40 00 39 	cp.w	r0,57
80007ec8:	c3 00       	breq	80007f28 <_dtoa_r+0xa90>
80007eca:	40 6a       	lddsp	r10,sp[0x18]
80007ecc:	58 0a       	cp.w	r10,0
80007ece:	e0 89 00 24 	brgt	80007f16 <_dtoa_r+0xa7e>
80007ed2:	c2 f8       	rjmp	80007f30 <_dtoa_r+0xa98>
80007ed4:	40 69       	lddsp	r9,sp[0x18]
80007ed6:	58 09       	cp.w	r9,0
80007ed8:	c0 85       	brlt	80007ee8 <_dtoa_r+0xa50>
80007eda:	12 98       	mov	r8,r9
80007edc:	40 cc       	lddsp	r12,sp[0x30]
80007ede:	18 48       	or	r8,r12
80007ee0:	c1 d1       	brne	80007f1a <_dtoa_r+0xa82>
80007ee2:	40 db       	lddsp	r11,sp[0x34]
80007ee4:	58 0b       	cp.w	r11,0
80007ee6:	c1 a1       	brne	80007f1a <_dtoa_r+0xa82>
80007ee8:	0c 99       	mov	r9,r6
80007eea:	40 26       	lddsp	r6,sp[0x8]
80007eec:	58 09       	cp.w	r9,0
80007eee:	e0 8a 00 21 	brle	80007f30 <_dtoa_r+0xa98>
80007ef2:	06 9b       	mov	r11,r3
80007ef4:	30 1a       	mov	r10,1
80007ef6:	0e 9c       	mov	r12,r7
80007ef8:	e0 a0 08 ac 	rcall	80009050 <__lshift>
80007efc:	04 9b       	mov	r11,r2
80007efe:	18 93       	mov	r3,r12
80007f00:	e0 a0 07 85 	rcall	80008e0a <__mcmp>
80007f04:	e0 89 00 06 	brgt	80007f10 <_dtoa_r+0xa78>
80007f08:	c1 41       	brne	80007f30 <_dtoa_r+0xa98>
80007f0a:	ed b0 00 00 	bld	r0,0x0
80007f0e:	c1 11       	brne	80007f30 <_dtoa_r+0xa98>
80007f10:	e0 40 00 39 	cp.w	r0,57
80007f14:	c0 a0       	breq	80007f28 <_dtoa_r+0xa90>
80007f16:	2f f0       	sub	r0,-1
80007f18:	c0 c8       	rjmp	80007f30 <_dtoa_r+0xa98>
80007f1a:	58 06       	cp.w	r6,0
80007f1c:	e0 8a 00 0c 	brle	80007f34 <_dtoa_r+0xa9c>
80007f20:	40 26       	lddsp	r6,sp[0x8]
80007f22:	e0 40 00 39 	cp.w	r0,57
80007f26:	c0 41       	brne	80007f2e <_dtoa_r+0xa96>
80007f28:	33 98       	mov	r8,57
80007f2a:	0a c8       	st.b	r5++,r8
80007f2c:	c6 78       	rjmp	80007ffa <_dtoa_r+0xb62>
80007f2e:	2f f0       	sub	r0,-1
80007f30:	0a c0       	st.b	r5++,r0
80007f32:	c7 58       	rjmp	8000801c <_dtoa_r+0xb84>
80007f34:	0a c0       	st.b	r5++,r0
80007f36:	40 9a       	lddsp	r10,sp[0x24]
80007f38:	40 e9       	lddsp	r9,sp[0x38]
80007f3a:	12 3a       	cp.w	r10,r9
80007f3c:	c4 30       	breq	80007fc2 <_dtoa_r+0xb2a>
80007f3e:	06 9b       	mov	r11,r3
80007f40:	30 09       	mov	r9,0
80007f42:	30 aa       	mov	r10,10
80007f44:	0e 9c       	mov	r12,r7
80007f46:	e0 a0 09 51 	rcall	800091e8 <__multadd>
80007f4a:	40 48       	lddsp	r8,sp[0x10]
80007f4c:	18 93       	mov	r3,r12
80007f4e:	08 38       	cp.w	r8,r4
80007f50:	c0 91       	brne	80007f62 <_dtoa_r+0xaca>
80007f52:	10 9b       	mov	r11,r8
80007f54:	30 09       	mov	r9,0
80007f56:	30 aa       	mov	r10,10
80007f58:	0e 9c       	mov	r12,r7
80007f5a:	e0 a0 09 47 	rcall	800091e8 <__multadd>
80007f5e:	50 4c       	stdsp	sp[0x10],r12
80007f60:	c0 e8       	rjmp	80007f7c <_dtoa_r+0xae4>
80007f62:	40 4b       	lddsp	r11,sp[0x10]
80007f64:	30 09       	mov	r9,0
80007f66:	30 aa       	mov	r10,10
80007f68:	0e 9c       	mov	r12,r7
80007f6a:	e0 a0 09 3f 	rcall	800091e8 <__multadd>
80007f6e:	08 9b       	mov	r11,r4
80007f70:	50 4c       	stdsp	sp[0x10],r12
80007f72:	30 09       	mov	r9,0
80007f74:	30 aa       	mov	r10,10
80007f76:	0e 9c       	mov	r12,r7
80007f78:	e0 a0 09 38 	rcall	800091e8 <__multadd>
80007f7c:	18 94       	mov	r4,r12
80007f7e:	40 9c       	lddsp	r12,sp[0x24]
80007f80:	2f fc       	sub	r12,-1
80007f82:	50 9c       	stdsp	sp[0x24],r12
80007f84:	c7 9b       	rjmp	80007e76 <_dtoa_r+0x9de>
80007f86:	30 18       	mov	r8,1
80007f88:	06 90       	mov	r0,r3
80007f8a:	40 85       	lddsp	r5,sp[0x20]
80007f8c:	08 93       	mov	r3,r4
80007f8e:	0c 94       	mov	r4,r6
80007f90:	10 96       	mov	r6,r8
80007f92:	04 9b       	mov	r11,r2
80007f94:	00 9c       	mov	r12,r0
80007f96:	fe b0 f9 f1 	rcall	80007378 <quorem>
80007f9a:	2d 0c       	sub	r12,-48
80007f9c:	0a cc       	st.b	r5++,r12
80007f9e:	02 36       	cp.w	r6,r1
80007fa0:	c0 a4       	brge	80007fb4 <_dtoa_r+0xb1c>
80007fa2:	00 9b       	mov	r11,r0
80007fa4:	30 09       	mov	r9,0
80007fa6:	30 aa       	mov	r10,10
80007fa8:	0e 9c       	mov	r12,r7
80007faa:	2f f6       	sub	r6,-1
80007fac:	e0 a0 09 1e 	rcall	800091e8 <__multadd>
80007fb0:	18 90       	mov	r0,r12
80007fb2:	cf 0b       	rjmp	80007f92 <_dtoa_r+0xafa>
80007fb4:	08 96       	mov	r6,r4
80007fb6:	30 0b       	mov	r11,0
80007fb8:	06 94       	mov	r4,r3
80007fba:	50 4b       	stdsp	sp[0x10],r11
80007fbc:	00 93       	mov	r3,r0
80007fbe:	18 90       	mov	r0,r12
80007fc0:	c0 28       	rjmp	80007fc4 <_dtoa_r+0xb2c>
80007fc2:	40 26       	lddsp	r6,sp[0x8]
80007fc4:	06 9b       	mov	r11,r3
80007fc6:	30 1a       	mov	r10,1
80007fc8:	0e 9c       	mov	r12,r7
80007fca:	e0 a0 08 43 	rcall	80009050 <__lshift>
80007fce:	04 9b       	mov	r11,r2
80007fd0:	18 93       	mov	r3,r12
80007fd2:	e0 a0 07 1c 	rcall	80008e0a <__mcmp>
80007fd6:	e0 89 00 12 	brgt	80007ffa <_dtoa_r+0xb62>
80007fda:	c1 b1       	brne	80008010 <_dtoa_r+0xb78>
80007fdc:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80007fe0:	c0 d1       	brne	80007ffa <_dtoa_r+0xb62>
80007fe2:	c1 78       	rjmp	80008010 <_dtoa_r+0xb78>
80007fe4:	40 89       	lddsp	r9,sp[0x20]
80007fe6:	12 38       	cp.w	r8,r9
80007fe8:	c0 30       	breq	80007fee <_dtoa_r+0xb56>
80007fea:	10 95       	mov	r5,r8
80007fec:	c0 88       	rjmp	80007ffc <_dtoa_r+0xb64>
80007fee:	2f f6       	sub	r6,-1
80007ff0:	50 66       	stdsp	sp[0x18],r6
80007ff2:	33 18       	mov	r8,49
80007ff4:	40 8c       	lddsp	r12,sp[0x20]
80007ff6:	b8 88       	st.b	r12[0x0],r8
80007ff8:	c1 38       	rjmp	8000801e <_dtoa_r+0xb86>
80007ffa:	33 9a       	mov	r10,57
80007ffc:	0a 98       	mov	r8,r5
80007ffe:	11 79       	ld.ub	r9,--r8
80008000:	f4 09 18 00 	cp.b	r9,r10
80008004:	cf 00       	breq	80007fe4 <_dtoa_r+0xb4c>
80008006:	2f f9       	sub	r9,-1
80008008:	b0 89       	st.b	r8[0x0],r9
8000800a:	c0 98       	rjmp	8000801c <_dtoa_r+0xb84>
8000800c:	10 95       	mov	r5,r8
8000800e:	c0 28       	rjmp	80008012 <_dtoa_r+0xb7a>
80008010:	33 09       	mov	r9,48
80008012:	0a 98       	mov	r8,r5
80008014:	11 7a       	ld.ub	r10,--r8
80008016:	f2 0a 18 00 	cp.b	r10,r9
8000801a:	cf 90       	breq	8000800c <_dtoa_r+0xb74>
8000801c:	50 66       	stdsp	sp[0x18],r6
8000801e:	04 9b       	mov	r11,r2
80008020:	0e 9c       	mov	r12,r7
80008022:	e0 a0 07 0d 	rcall	80008e3c <_Bfree>
80008026:	58 04       	cp.w	r4,0
80008028:	c1 20       	breq	8000804c <_dtoa_r+0xbb4>
8000802a:	40 4b       	lddsp	r11,sp[0x10]
8000802c:	08 3b       	cp.w	r11,r4
8000802e:	5f 19       	srne	r9
80008030:	58 0b       	cp.w	r11,0
80008032:	5f 18       	srne	r8
80008034:	f3 e8 00 08 	and	r8,r9,r8
80008038:	c0 40       	breq	80008040 <_dtoa_r+0xba8>
8000803a:	0e 9c       	mov	r12,r7
8000803c:	e0 a0 07 00 	rcall	80008e3c <_Bfree>
80008040:	08 9b       	mov	r11,r4
80008042:	0e 9c       	mov	r12,r7
80008044:	e0 a0 06 fc 	rcall	80008e3c <_Bfree>
80008048:	c0 28       	rjmp	8000804c <_dtoa_r+0xbb4>
8000804a:	50 66       	stdsp	sp[0x18],r6
8000804c:	0e 9c       	mov	r12,r7
8000804e:	06 9b       	mov	r11,r3
80008050:	e0 a0 06 f6 	rcall	80008e3c <_Bfree>
80008054:	30 08       	mov	r8,0
80008056:	aa 88       	st.b	r5[0x0],r8
80008058:	40 68       	lddsp	r8,sp[0x18]
8000805a:	41 5a       	lddsp	r10,sp[0x54]
8000805c:	2f f8       	sub	r8,-1
8000805e:	41 29       	lddsp	r9,sp[0x48]
80008060:	95 08       	st.w	r10[0x0],r8
80008062:	40 8c       	lddsp	r12,sp[0x20]
80008064:	58 09       	cp.w	r9,0
80008066:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000806a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000806e:	2e 6d       	sub	sp,-104
80008070:	d8 32       	popm	r0-r7,pc
80008072:	d7 03       	nop

80008074 <_fflush_r>:
80008074:	d4 21       	pushm	r4-r7,lr
80008076:	16 97       	mov	r7,r11
80008078:	18 96       	mov	r6,r12
8000807a:	76 48       	ld.w	r8,r11[0x10]
8000807c:	58 08       	cp.w	r8,0
8000807e:	c7 f0       	breq	8000817c <_fflush_r+0x108>
80008080:	58 0c       	cp.w	r12,0
80008082:	c0 50       	breq	8000808c <_fflush_r+0x18>
80008084:	78 68       	ld.w	r8,r12[0x18]
80008086:	58 08       	cp.w	r8,0
80008088:	c0 21       	brne	8000808c <_fflush_r+0x18>
8000808a:	cc dc       	rcall	80008224 <__sinit>
8000808c:	fe c8 ce dc 	sub	r8,pc,-12580
80008090:	10 37       	cp.w	r7,r8
80008092:	c0 31       	brne	80008098 <_fflush_r+0x24>
80008094:	6c 07       	ld.w	r7,r6[0x0]
80008096:	c0 c8       	rjmp	800080ae <_fflush_r+0x3a>
80008098:	fe c8 ce c8 	sub	r8,pc,-12600
8000809c:	10 37       	cp.w	r7,r8
8000809e:	c0 31       	brne	800080a4 <_fflush_r+0x30>
800080a0:	6c 17       	ld.w	r7,r6[0x4]
800080a2:	c0 68       	rjmp	800080ae <_fflush_r+0x3a>
800080a4:	fe c8 ce b4 	sub	r8,pc,-12620
800080a8:	10 37       	cp.w	r7,r8
800080aa:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800080ae:	8e 6a       	ld.sh	r10,r7[0xc]
800080b0:	14 98       	mov	r8,r10
800080b2:	ed ba 00 03 	bld	r10,0x3
800080b6:	c4 20       	breq	8000813a <_fflush_r+0xc6>
800080b8:	ab ba       	sbr	r10,0xb
800080ba:	ae 6a       	st.h	r7[0xc],r10
800080bc:	6e 18       	ld.w	r8,r7[0x4]
800080be:	58 08       	cp.w	r8,0
800080c0:	e0 89 00 06 	brgt	800080cc <_fflush_r+0x58>
800080c4:	6f 08       	ld.w	r8,r7[0x40]
800080c6:	58 08       	cp.w	r8,0
800080c8:	e0 8a 00 5a 	brle	8000817c <_fflush_r+0x108>
800080cc:	6e b8       	ld.w	r8,r7[0x2c]
800080ce:	58 08       	cp.w	r8,0
800080d0:	c5 60       	breq	8000817c <_fflush_r+0x108>
800080d2:	e2 1a 10 00 	andl	r10,0x1000,COH
800080d6:	c0 30       	breq	800080dc <_fflush_r+0x68>
800080d8:	6f 55       	ld.w	r5,r7[0x54]
800080da:	c0 f8       	rjmp	800080f8 <_fflush_r+0x84>
800080dc:	30 19       	mov	r9,1
800080de:	6e 8b       	ld.w	r11,r7[0x20]
800080e0:	0c 9c       	mov	r12,r6
800080e2:	5d 18       	icall	r8
800080e4:	18 95       	mov	r5,r12
800080e6:	5b fc       	cp.w	r12,-1
800080e8:	c0 81       	brne	800080f8 <_fflush_r+0x84>
800080ea:	6c 38       	ld.w	r8,r6[0xc]
800080ec:	59 d8       	cp.w	r8,29
800080ee:	c4 70       	breq	8000817c <_fflush_r+0x108>
800080f0:	8e 68       	ld.sh	r8,r7[0xc]
800080f2:	a7 a8       	sbr	r8,0x6
800080f4:	ae 68       	st.h	r7[0xc],r8
800080f6:	d8 22       	popm	r4-r7,pc
800080f8:	8e 68       	ld.sh	r8,r7[0xc]
800080fa:	ed b8 00 02 	bld	r8,0x2
800080fe:	c0 91       	brne	80008110 <_fflush_r+0x9c>
80008100:	6e 18       	ld.w	r8,r7[0x4]
80008102:	10 15       	sub	r5,r8
80008104:	6e d8       	ld.w	r8,r7[0x34]
80008106:	58 08       	cp.w	r8,0
80008108:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000810c:	eb d8 e1 15 	subne	r5,r5,r8
80008110:	6e b8       	ld.w	r8,r7[0x2c]
80008112:	0c 9c       	mov	r12,r6
80008114:	30 09       	mov	r9,0
80008116:	0a 9a       	mov	r10,r5
80008118:	6e 8b       	ld.w	r11,r7[0x20]
8000811a:	5d 18       	icall	r8
8000811c:	8e 68       	ld.sh	r8,r7[0xc]
8000811e:	0a 3c       	cp.w	r12,r5
80008120:	c2 61       	brne	8000816c <_fflush_r+0xf8>
80008122:	ab d8       	cbr	r8,0xb
80008124:	30 0c       	mov	r12,0
80008126:	6e 49       	ld.w	r9,r7[0x10]
80008128:	ae 68       	st.h	r7[0xc],r8
8000812a:	8f 1c       	st.w	r7[0x4],r12
8000812c:	8f 09       	st.w	r7[0x0],r9
8000812e:	ed b8 00 0c 	bld	r8,0xc
80008132:	c2 51       	brne	8000817c <_fflush_r+0x108>
80008134:	ef 45 00 54 	st.w	r7[84],r5
80008138:	d8 22       	popm	r4-r7,pc
8000813a:	6e 45       	ld.w	r5,r7[0x10]
8000813c:	58 05       	cp.w	r5,0
8000813e:	c1 f0       	breq	8000817c <_fflush_r+0x108>
80008140:	6e 04       	ld.w	r4,r7[0x0]
80008142:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80008146:	8f 05       	st.w	r7[0x0],r5
80008148:	f9 b8 01 00 	movne	r8,0
8000814c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008150:	0a 14       	sub	r4,r5
80008152:	8f 28       	st.w	r7[0x8],r8
80008154:	c1 18       	rjmp	80008176 <_fflush_r+0x102>
80008156:	08 99       	mov	r9,r4
80008158:	0a 9a       	mov	r10,r5
8000815a:	6e a8       	ld.w	r8,r7[0x28]
8000815c:	6e 8b       	ld.w	r11,r7[0x20]
8000815e:	0c 9c       	mov	r12,r6
80008160:	5d 18       	icall	r8
80008162:	18 14       	sub	r4,r12
80008164:	58 0c       	cp.w	r12,0
80008166:	e0 89 00 07 	brgt	80008174 <_fflush_r+0x100>
8000816a:	8e 68       	ld.sh	r8,r7[0xc]
8000816c:	a7 a8       	sbr	r8,0x6
8000816e:	3f fc       	mov	r12,-1
80008170:	ae 68       	st.h	r7[0xc],r8
80008172:	d8 22       	popm	r4-r7,pc
80008174:	18 05       	add	r5,r12
80008176:	58 04       	cp.w	r4,0
80008178:	fe 99 ff ef 	brgt	80008156 <_fflush_r+0xe2>
8000817c:	d8 2a       	popm	r4-r7,pc,r12=0
8000817e:	d7 03       	nop

80008180 <__sfp_lock_acquire>:
80008180:	5e fc       	retal	r12

80008182 <__sfp_lock_release>:
80008182:	5e fc       	retal	r12

80008184 <_cleanup_r>:
80008184:	d4 01       	pushm	lr
80008186:	fe cb e8 8a 	sub	r11,pc,-6006
8000818a:	e0 a0 02 fd 	rcall	80008784 <_fwalk>
8000818e:	d8 02       	popm	pc

80008190 <__sfmoreglue>:
80008190:	d4 21       	pushm	r4-r7,lr
80008192:	16 95       	mov	r5,r11
80008194:	f6 06 10 5c 	mul	r6,r11,92
80008198:	ec cb ff f4 	sub	r11,r6,-12
8000819c:	e0 a0 03 7c 	rcall	80008894 <_malloc_r>
800081a0:	18 97       	mov	r7,r12
800081a2:	c0 90       	breq	800081b4 <__sfmoreglue+0x24>
800081a4:	99 15       	st.w	r12[0x4],r5
800081a6:	30 0b       	mov	r11,0
800081a8:	2f 4c       	sub	r12,-12
800081aa:	0c 9a       	mov	r10,r6
800081ac:	8f 2c       	st.w	r7[0x8],r12
800081ae:	8f 0b       	st.w	r7[0x0],r11
800081b0:	fe b0 e6 de 	rcall	80004f6c <memset>
800081b4:	0e 9c       	mov	r12,r7
800081b6:	d8 22       	popm	r4-r7,pc

800081b8 <__sfp>:
800081b8:	d4 21       	pushm	r4-r7,lr
800081ba:	fe c8 d3 f2 	sub	r8,pc,-11278
800081be:	18 96       	mov	r6,r12
800081c0:	70 07       	ld.w	r7,r8[0x0]
800081c2:	6e 68       	ld.w	r8,r7[0x18]
800081c4:	58 08       	cp.w	r8,0
800081c6:	c0 31       	brne	800081cc <__sfp+0x14>
800081c8:	0e 9c       	mov	r12,r7
800081ca:	c2 dc       	rcall	80008224 <__sinit>
800081cc:	ee c7 ff 28 	sub	r7,r7,-216
800081d0:	30 05       	mov	r5,0
800081d2:	6e 2c       	ld.w	r12,r7[0x8]
800081d4:	6e 18       	ld.w	r8,r7[0x4]
800081d6:	c0 68       	rjmp	800081e2 <__sfp+0x2a>
800081d8:	98 69       	ld.sh	r9,r12[0xc]
800081da:	ea 09 19 00 	cp.h	r9,r5
800081de:	c1 10       	breq	80008200 <__sfp+0x48>
800081e0:	2a 4c       	sub	r12,-92
800081e2:	20 18       	sub	r8,1
800081e4:	cf a7       	brpl	800081d8 <__sfp+0x20>
800081e6:	6e 08       	ld.w	r8,r7[0x0]
800081e8:	58 08       	cp.w	r8,0
800081ea:	c0 61       	brne	800081f6 <__sfp+0x3e>
800081ec:	30 4b       	mov	r11,4
800081ee:	0c 9c       	mov	r12,r6
800081f0:	cd 0f       	rcall	80008190 <__sfmoreglue>
800081f2:	8f 0c       	st.w	r7[0x0],r12
800081f4:	c0 30       	breq	800081fa <__sfp+0x42>
800081f6:	6e 07       	ld.w	r7,r7[0x0]
800081f8:	ce db       	rjmp	800081d2 <__sfp+0x1a>
800081fa:	30 c8       	mov	r8,12
800081fc:	8d 38       	st.w	r6[0xc],r8
800081fe:	d8 22       	popm	r4-r7,pc
80008200:	30 08       	mov	r8,0
80008202:	f9 48 00 4c 	st.w	r12[76],r8
80008206:	99 08       	st.w	r12[0x0],r8
80008208:	99 28       	st.w	r12[0x8],r8
8000820a:	99 18       	st.w	r12[0x4],r8
8000820c:	99 48       	st.w	r12[0x10],r8
8000820e:	99 58       	st.w	r12[0x14],r8
80008210:	99 68       	st.w	r12[0x18],r8
80008212:	99 d8       	st.w	r12[0x34],r8
80008214:	99 e8       	st.w	r12[0x38],r8
80008216:	f9 48 00 48 	st.w	r12[72],r8
8000821a:	3f f8       	mov	r8,-1
8000821c:	b8 78       	st.h	r12[0xe],r8
8000821e:	30 18       	mov	r8,1
80008220:	b8 68       	st.h	r12[0xc],r8
80008222:	d8 22       	popm	r4-r7,pc

80008224 <__sinit>:
80008224:	d4 21       	pushm	r4-r7,lr
80008226:	18 96       	mov	r6,r12
80008228:	78 67       	ld.w	r7,r12[0x18]
8000822a:	58 07       	cp.w	r7,0
8000822c:	c4 91       	brne	800082be <__sinit+0x9a>
8000822e:	fe c8 00 aa 	sub	r8,pc,170
80008232:	30 15       	mov	r5,1
80008234:	99 a8       	st.w	r12[0x28],r8
80008236:	f9 47 00 d8 	st.w	r12[216],r7
8000823a:	f9 47 00 dc 	st.w	r12[220],r7
8000823e:	f9 47 00 e0 	st.w	r12[224],r7
80008242:	99 65       	st.w	r12[0x18],r5
80008244:	cb af       	rcall	800081b8 <__sfp>
80008246:	8d 0c       	st.w	r6[0x0],r12
80008248:	0c 9c       	mov	r12,r6
8000824a:	cb 7f       	rcall	800081b8 <__sfp>
8000824c:	8d 1c       	st.w	r6[0x4],r12
8000824e:	0c 9c       	mov	r12,r6
80008250:	cb 4f       	rcall	800081b8 <__sfp>
80008252:	6c 09       	ld.w	r9,r6[0x0]
80008254:	30 48       	mov	r8,4
80008256:	93 07       	st.w	r9[0x0],r7
80008258:	b2 68       	st.h	r9[0xc],r8
8000825a:	93 17       	st.w	r9[0x4],r7
8000825c:	93 27       	st.w	r9[0x8],r7
8000825e:	6c 18       	ld.w	r8,r6[0x4]
80008260:	b2 77       	st.h	r9[0xe],r7
80008262:	93 47       	st.w	r9[0x10],r7
80008264:	93 57       	st.w	r9[0x14],r7
80008266:	93 67       	st.w	r9[0x18],r7
80008268:	93 89       	st.w	r9[0x20],r9
8000826a:	91 07       	st.w	r8[0x0],r7
8000826c:	91 17       	st.w	r8[0x4],r7
8000826e:	91 27       	st.w	r8[0x8],r7
80008270:	fe ce ec 04 	sub	lr,pc,-5116
80008274:	fe cb ec 34 	sub	r11,pc,-5068
80008278:	93 9e       	st.w	r9[0x24],lr
8000827a:	93 ab       	st.w	r9[0x28],r11
8000827c:	fe ca ec 5c 	sub	r10,pc,-5028
80008280:	fe c4 ec 68 	sub	r4,pc,-5016
80008284:	93 ba       	st.w	r9[0x2c],r10
80008286:	93 c4       	st.w	r9[0x30],r4
80008288:	30 99       	mov	r9,9
8000828a:	b0 69       	st.h	r8[0xc],r9
8000828c:	b0 75       	st.h	r8[0xe],r5
8000828e:	91 c4       	st.w	r8[0x30],r4
80008290:	91 47       	st.w	r8[0x10],r7
80008292:	91 57       	st.w	r8[0x14],r7
80008294:	91 67       	st.w	r8[0x18],r7
80008296:	91 88       	st.w	r8[0x20],r8
80008298:	91 9e       	st.w	r8[0x24],lr
8000829a:	91 ab       	st.w	r8[0x28],r11
8000829c:	91 ba       	st.w	r8[0x2c],r10
8000829e:	8d 2c       	st.w	r6[0x8],r12
800082a0:	31 28       	mov	r8,18
800082a2:	99 07       	st.w	r12[0x0],r7
800082a4:	b8 68       	st.h	r12[0xc],r8
800082a6:	99 17       	st.w	r12[0x4],r7
800082a8:	99 27       	st.w	r12[0x8],r7
800082aa:	30 28       	mov	r8,2
800082ac:	b8 78       	st.h	r12[0xe],r8
800082ae:	99 c4       	st.w	r12[0x30],r4
800082b0:	99 67       	st.w	r12[0x18],r7
800082b2:	99 9e       	st.w	r12[0x24],lr
800082b4:	99 ab       	st.w	r12[0x28],r11
800082b6:	99 ba       	st.w	r12[0x2c],r10
800082b8:	99 47       	st.w	r12[0x10],r7
800082ba:	99 57       	st.w	r12[0x14],r7
800082bc:	99 8c       	st.w	r12[0x20],r12
800082be:	d8 22       	popm	r4-r7,pc

800082c0 <_malloc_trim_r>:
800082c0:	d4 21       	pushm	r4-r7,lr
800082c2:	16 95       	mov	r5,r11
800082c4:	18 97       	mov	r7,r12
800082c6:	e0 a0 05 29 	rcall	80008d18 <__malloc_lock>
800082ca:	e0 64 00 fc 	mov	r4,252
800082ce:	68 28       	ld.w	r8,r4[0x8]
800082d0:	70 16       	ld.w	r6,r8[0x4]
800082d2:	e0 16 ff fc 	andl	r6,0xfffc
800082d6:	ec c8 ff 91 	sub	r8,r6,-111
800082da:	f0 05 01 05 	sub	r5,r8,r5
800082de:	e0 15 ff 80 	andl	r5,0xff80
800082e2:	ea c5 00 80 	sub	r5,r5,128
800082e6:	e0 45 00 7f 	cp.w	r5,127
800082ea:	e0 8a 00 25 	brle	80008334 <_malloc_trim_r+0x74>
800082ee:	30 0b       	mov	r11,0
800082f0:	0e 9c       	mov	r12,r7
800082f2:	e0 a0 09 83 	rcall	800095f8 <_sbrk_r>
800082f6:	68 28       	ld.w	r8,r4[0x8]
800082f8:	0c 08       	add	r8,r6
800082fa:	10 3c       	cp.w	r12,r8
800082fc:	c1 c1       	brne	80008334 <_malloc_trim_r+0x74>
800082fe:	ea 0b 11 00 	rsub	r11,r5,0
80008302:	0e 9c       	mov	r12,r7
80008304:	e0 a0 09 7a 	rcall	800095f8 <_sbrk_r>
80008308:	5b fc       	cp.w	r12,-1
8000830a:	c1 91       	brne	8000833c <_malloc_trim_r+0x7c>
8000830c:	30 0b       	mov	r11,0
8000830e:	0e 9c       	mov	r12,r7
80008310:	e0 a0 09 74 	rcall	800095f8 <_sbrk_r>
80008314:	68 28       	ld.w	r8,r4[0x8]
80008316:	f8 08 01 09 	sub	r9,r12,r8
8000831a:	58 f9       	cp.w	r9,15
8000831c:	e0 8a 00 0c 	brle	80008334 <_malloc_trim_r+0x74>
80008320:	a1 a9       	sbr	r9,0x0
80008322:	91 19       	st.w	r8[0x4],r9
80008324:	e0 68 05 08 	mov	r8,1288
80008328:	70 09       	ld.w	r9,r8[0x0]
8000832a:	e0 68 09 14 	mov	r8,2324
8000832e:	f8 09 01 09 	sub	r9,r12,r9
80008332:	91 09       	st.w	r8[0x0],r9
80008334:	0e 9c       	mov	r12,r7
80008336:	e0 a0 04 f2 	rcall	80008d1a <__malloc_unlock>
8000833a:	d8 2a       	popm	r4-r7,pc,r12=0
8000833c:	68 28       	ld.w	r8,r4[0x8]
8000833e:	0a 16       	sub	r6,r5
80008340:	a1 a6       	sbr	r6,0x0
80008342:	91 16       	st.w	r8[0x4],r6
80008344:	e0 68 09 14 	mov	r8,2324
80008348:	70 09       	ld.w	r9,r8[0x0]
8000834a:	0a 19       	sub	r9,r5
8000834c:	0e 9c       	mov	r12,r7
8000834e:	91 09       	st.w	r8[0x0],r9
80008350:	e0 a0 04 e5 	rcall	80008d1a <__malloc_unlock>
80008354:	da 2a       	popm	r4-r7,pc,r12=1
80008356:	d7 03       	nop

80008358 <_free_r>:
80008358:	d4 21       	pushm	r4-r7,lr
8000835a:	16 96       	mov	r6,r11
8000835c:	18 97       	mov	r7,r12
8000835e:	58 0b       	cp.w	r11,0
80008360:	e0 80 00 c0 	breq	800084e0 <_free_r+0x188>
80008364:	e0 a0 04 da 	rcall	80008d18 <__malloc_lock>
80008368:	20 86       	sub	r6,8
8000836a:	e0 6a 00 fc 	mov	r10,252
8000836e:	6c 18       	ld.w	r8,r6[0x4]
80008370:	74 2e       	ld.w	lr,r10[0x8]
80008372:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80008376:	a1 c8       	cbr	r8,0x0
80008378:	ec 08 00 09 	add	r9,r6,r8
8000837c:	72 1b       	ld.w	r11,r9[0x4]
8000837e:	e0 1b ff fc 	andl	r11,0xfffc
80008382:	1c 39       	cp.w	r9,lr
80008384:	c1 e1       	brne	800083c0 <_free_r+0x68>
80008386:	f6 08 00 08 	add	r8,r11,r8
8000838a:	58 0c       	cp.w	r12,0
8000838c:	c0 81       	brne	8000839c <_free_r+0x44>
8000838e:	6c 09       	ld.w	r9,r6[0x0]
80008390:	12 16       	sub	r6,r9
80008392:	12 08       	add	r8,r9
80008394:	6c 3b       	ld.w	r11,r6[0xc]
80008396:	6c 29       	ld.w	r9,r6[0x8]
80008398:	97 29       	st.w	r11[0x8],r9
8000839a:	93 3b       	st.w	r9[0xc],r11
8000839c:	10 99       	mov	r9,r8
8000839e:	95 26       	st.w	r10[0x8],r6
800083a0:	a1 a9       	sbr	r9,0x0
800083a2:	8d 19       	st.w	r6[0x4],r9
800083a4:	e0 69 05 04 	mov	r9,1284
800083a8:	72 09       	ld.w	r9,r9[0x0]
800083aa:	12 38       	cp.w	r8,r9
800083ac:	c0 63       	brcs	800083b8 <_free_r+0x60>
800083ae:	e0 68 09 10 	mov	r8,2320
800083b2:	0e 9c       	mov	r12,r7
800083b4:	70 0b       	ld.w	r11,r8[0x0]
800083b6:	c8 5f       	rcall	800082c0 <_malloc_trim_r>
800083b8:	0e 9c       	mov	r12,r7
800083ba:	e0 a0 04 b0 	rcall	80008d1a <__malloc_unlock>
800083be:	d8 22       	popm	r4-r7,pc
800083c0:	93 1b       	st.w	r9[0x4],r11
800083c2:	58 0c       	cp.w	r12,0
800083c4:	c0 30       	breq	800083ca <_free_r+0x72>
800083c6:	30 0c       	mov	r12,0
800083c8:	c1 08       	rjmp	800083e8 <_free_r+0x90>
800083ca:	6c 0e       	ld.w	lr,r6[0x0]
800083cc:	f4 c5 ff f8 	sub	r5,r10,-8
800083d0:	1c 16       	sub	r6,lr
800083d2:	1c 08       	add	r8,lr
800083d4:	6c 2e       	ld.w	lr,r6[0x8]
800083d6:	0a 3e       	cp.w	lr,r5
800083d8:	f9 bc 00 01 	moveq	r12,1
800083dc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800083e0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800083e4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800083e8:	f2 0b 00 0e 	add	lr,r9,r11
800083ec:	7c 1e       	ld.w	lr,lr[0x4]
800083ee:	ed be 00 00 	bld	lr,0x0
800083f2:	c1 40       	breq	8000841a <_free_r+0xc2>
800083f4:	16 08       	add	r8,r11
800083f6:	58 0c       	cp.w	r12,0
800083f8:	c0 d1       	brne	80008412 <_free_r+0xba>
800083fa:	e0 6e 00 fc 	mov	lr,252
800083fe:	72 2b       	ld.w	r11,r9[0x8]
80008400:	2f 8e       	sub	lr,-8
80008402:	1c 3b       	cp.w	r11,lr
80008404:	c0 71       	brne	80008412 <_free_r+0xba>
80008406:	97 36       	st.w	r11[0xc],r6
80008408:	97 26       	st.w	r11[0x8],r6
8000840a:	8d 2b       	st.w	r6[0x8],r11
8000840c:	8d 3b       	st.w	r6[0xc],r11
8000840e:	30 1c       	mov	r12,1
80008410:	c0 58       	rjmp	8000841a <_free_r+0xc2>
80008412:	72 2b       	ld.w	r11,r9[0x8]
80008414:	72 39       	ld.w	r9,r9[0xc]
80008416:	93 2b       	st.w	r9[0x8],r11
80008418:	97 39       	st.w	r11[0xc],r9
8000841a:	10 99       	mov	r9,r8
8000841c:	ec 08 09 08 	st.w	r6[r8],r8
80008420:	a1 a9       	sbr	r9,0x0
80008422:	8d 19       	st.w	r6[0x4],r9
80008424:	58 0c       	cp.w	r12,0
80008426:	c5 a1       	brne	800084da <_free_r+0x182>
80008428:	e0 48 01 ff 	cp.w	r8,511
8000842c:	e0 8b 00 13 	brhi	80008452 <_free_r+0xfa>
80008430:	a3 98       	lsr	r8,0x3
80008432:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008436:	72 2b       	ld.w	r11,r9[0x8]
80008438:	8d 39       	st.w	r6[0xc],r9
8000843a:	8d 2b       	st.w	r6[0x8],r11
8000843c:	97 36       	st.w	r11[0xc],r6
8000843e:	93 26       	st.w	r9[0x8],r6
80008440:	a3 48       	asr	r8,0x2
80008442:	74 19       	ld.w	r9,r10[0x4]
80008444:	30 1b       	mov	r11,1
80008446:	f6 08 09 48 	lsl	r8,r11,r8
8000844a:	f3 e8 10 08 	or	r8,r9,r8
8000844e:	95 18       	st.w	r10[0x4],r8
80008450:	c4 58       	rjmp	800084da <_free_r+0x182>
80008452:	f0 0b 16 09 	lsr	r11,r8,0x9
80008456:	58 4b       	cp.w	r11,4
80008458:	e0 8b 00 06 	brhi	80008464 <_free_r+0x10c>
8000845c:	f0 0b 16 06 	lsr	r11,r8,0x6
80008460:	2c 8b       	sub	r11,-56
80008462:	c2 08       	rjmp	800084a2 <_free_r+0x14a>
80008464:	59 4b       	cp.w	r11,20
80008466:	e0 8b 00 04 	brhi	8000846e <_free_r+0x116>
8000846a:	2a 5b       	sub	r11,-91
8000846c:	c1 b8       	rjmp	800084a2 <_free_r+0x14a>
8000846e:	e0 4b 00 54 	cp.w	r11,84
80008472:	e0 8b 00 06 	brhi	8000847e <_free_r+0x126>
80008476:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000847a:	29 2b       	sub	r11,-110
8000847c:	c1 38       	rjmp	800084a2 <_free_r+0x14a>
8000847e:	e0 4b 01 54 	cp.w	r11,340
80008482:	e0 8b 00 06 	brhi	8000848e <_free_r+0x136>
80008486:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000848a:	28 9b       	sub	r11,-119
8000848c:	c0 b8       	rjmp	800084a2 <_free_r+0x14a>
8000848e:	e0 4b 05 54 	cp.w	r11,1364
80008492:	e0 88 00 05 	brls	8000849c <_free_r+0x144>
80008496:	37 eb       	mov	r11,126
80008498:	c0 58       	rjmp	800084a2 <_free_r+0x14a>
8000849a:	d7 03       	nop
8000849c:	f0 0b 16 12 	lsr	r11,r8,0x12
800084a0:	28 4b       	sub	r11,-124
800084a2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800084a6:	78 29       	ld.w	r9,r12[0x8]
800084a8:	18 39       	cp.w	r9,r12
800084aa:	c0 e1       	brne	800084c6 <_free_r+0x16e>
800084ac:	74 18       	ld.w	r8,r10[0x4]
800084ae:	a3 4b       	asr	r11,0x2
800084b0:	30 1c       	mov	r12,1
800084b2:	f8 0b 09 4b 	lsl	r11,r12,r11
800084b6:	f1 eb 10 0b 	or	r11,r8,r11
800084ba:	12 98       	mov	r8,r9
800084bc:	95 1b       	st.w	r10[0x4],r11
800084be:	c0 a8       	rjmp	800084d2 <_free_r+0x17a>
800084c0:	72 29       	ld.w	r9,r9[0x8]
800084c2:	18 39       	cp.w	r9,r12
800084c4:	c0 60       	breq	800084d0 <_free_r+0x178>
800084c6:	72 1a       	ld.w	r10,r9[0x4]
800084c8:	e0 1a ff fc 	andl	r10,0xfffc
800084cc:	14 38       	cp.w	r8,r10
800084ce:	cf 93       	brcs	800084c0 <_free_r+0x168>
800084d0:	72 38       	ld.w	r8,r9[0xc]
800084d2:	8d 38       	st.w	r6[0xc],r8
800084d4:	8d 29       	st.w	r6[0x8],r9
800084d6:	93 36       	st.w	r9[0xc],r6
800084d8:	91 26       	st.w	r8[0x8],r6
800084da:	0e 9c       	mov	r12,r7
800084dc:	e0 a0 04 1f 	rcall	80008d1a <__malloc_unlock>
800084e0:	d8 22       	popm	r4-r7,pc
800084e2:	d7 03       	nop

800084e4 <__sfvwrite_r>:
800084e4:	d4 31       	pushm	r0-r7,lr
800084e6:	20 3d       	sub	sp,12
800084e8:	14 94       	mov	r4,r10
800084ea:	18 95       	mov	r5,r12
800084ec:	16 97       	mov	r7,r11
800084ee:	74 28       	ld.w	r8,r10[0x8]
800084f0:	58 08       	cp.w	r8,0
800084f2:	e0 80 01 45 	breq	8000877c <__sfvwrite_r+0x298>
800084f6:	96 68       	ld.sh	r8,r11[0xc]
800084f8:	ed b8 00 03 	bld	r8,0x3
800084fc:	c0 41       	brne	80008504 <__sfvwrite_r+0x20>
800084fe:	76 48       	ld.w	r8,r11[0x10]
80008500:	58 08       	cp.w	r8,0
80008502:	c0 c1       	brne	8000851a <__sfvwrite_r+0x36>
80008504:	0e 9b       	mov	r11,r7
80008506:	0a 9c       	mov	r12,r5
80008508:	fe b0 f6 ca 	rcall	8000729c <__swsetup_r>
8000850c:	c0 70       	breq	8000851a <__sfvwrite_r+0x36>
8000850e:	8e 68       	ld.sh	r8,r7[0xc]
80008510:	a7 a8       	sbr	r8,0x6
80008512:	ae 68       	st.h	r7[0xc],r8
80008514:	30 98       	mov	r8,9
80008516:	8b 38       	st.w	r5[0xc],r8
80008518:	c3 09       	rjmp	80008778 <__sfvwrite_r+0x294>
8000851a:	8e 63       	ld.sh	r3,r7[0xc]
8000851c:	68 00       	ld.w	r0,r4[0x0]
8000851e:	06 96       	mov	r6,r3
80008520:	e2 16 00 02 	andl	r6,0x2,COH
80008524:	c2 10       	breq	80008566 <__sfvwrite_r+0x82>
80008526:	30 03       	mov	r3,0
80008528:	e0 62 04 00 	mov	r2,1024
8000852c:	06 96       	mov	r6,r3
8000852e:	c0 48       	rjmp	80008536 <__sfvwrite_r+0x52>
80008530:	60 03       	ld.w	r3,r0[0x0]
80008532:	60 16       	ld.w	r6,r0[0x4]
80008534:	2f 80       	sub	r0,-8
80008536:	58 06       	cp.w	r6,0
80008538:	cf c0       	breq	80008530 <__sfvwrite_r+0x4c>
8000853a:	e0 46 04 00 	cp.w	r6,1024
8000853e:	ec 09 17 80 	movls	r9,r6
80008542:	e4 09 17 b0 	movhi	r9,r2
80008546:	06 9a       	mov	r10,r3
80008548:	6e a8       	ld.w	r8,r7[0x28]
8000854a:	6e 8b       	ld.w	r11,r7[0x20]
8000854c:	0a 9c       	mov	r12,r5
8000854e:	5d 18       	icall	r8
80008550:	18 16       	sub	r6,r12
80008552:	58 0c       	cp.w	r12,0
80008554:	e0 8a 01 0f 	brle	80008772 <__sfvwrite_r+0x28e>
80008558:	68 28       	ld.w	r8,r4[0x8]
8000855a:	18 18       	sub	r8,r12
8000855c:	89 28       	st.w	r4[0x8],r8
8000855e:	e0 80 01 0f 	breq	8000877c <__sfvwrite_r+0x298>
80008562:	18 03       	add	r3,r12
80008564:	ce 9b       	rjmp	80008536 <__sfvwrite_r+0x52>
80008566:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000856a:	c0 70       	breq	80008578 <__sfvwrite_r+0x94>
8000856c:	50 06       	stdsp	sp[0x0],r6
8000856e:	0c 93       	mov	r3,r6
80008570:	0c 91       	mov	r1,r6
80008572:	50 15       	stdsp	sp[0x4],r5
80008574:	08 92       	mov	r2,r4
80008576:	c9 e8       	rjmp	800086b2 <__sfvwrite_r+0x1ce>
80008578:	06 96       	mov	r6,r3
8000857a:	08 91       	mov	r1,r4
8000857c:	c0 48       	rjmp	80008584 <__sfvwrite_r+0xa0>
8000857e:	60 03       	ld.w	r3,r0[0x0]
80008580:	60 16       	ld.w	r6,r0[0x4]
80008582:	2f 80       	sub	r0,-8
80008584:	58 06       	cp.w	r6,0
80008586:	cf c0       	breq	8000857e <__sfvwrite_r+0x9a>
80008588:	8e 68       	ld.sh	r8,r7[0xc]
8000858a:	6e 24       	ld.w	r4,r7[0x8]
8000858c:	10 99       	mov	r9,r8
8000858e:	e2 19 02 00 	andl	r9,0x200,COH
80008592:	c5 50       	breq	8000863c <__sfvwrite_r+0x158>
80008594:	08 36       	cp.w	r6,r4
80008596:	c4 33       	brcs	8000861c <__sfvwrite_r+0x138>
80008598:	10 99       	mov	r9,r8
8000859a:	e2 19 04 80 	andl	r9,0x480,COH
8000859e:	c3 f0       	breq	8000861c <__sfvwrite_r+0x138>
800085a0:	6e 4b       	ld.w	r11,r7[0x10]
800085a2:	6e 09       	ld.w	r9,r7[0x0]
800085a4:	16 19       	sub	r9,r11
800085a6:	50 09       	stdsp	sp[0x0],r9
800085a8:	6e 59       	ld.w	r9,r7[0x14]
800085aa:	10 9c       	mov	r12,r8
800085ac:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800085b0:	30 28       	mov	r8,2
800085b2:	f4 08 0c 08 	divs	r8,r10,r8
800085b6:	fa e9 00 04 	st.d	sp[4],r8
800085ba:	10 94       	mov	r4,r8
800085bc:	40 09       	lddsp	r9,sp[0x0]
800085be:	e2 1c 04 00 	andl	r12,0x400,COH
800085c2:	2f f9       	sub	r9,-1
800085c4:	0c 09       	add	r9,r6
800085c6:	12 38       	cp.w	r8,r9
800085c8:	f2 04 17 30 	movlo	r4,r9
800085cc:	58 0c       	cp.w	r12,0
800085ce:	c1 00       	breq	800085ee <__sfvwrite_r+0x10a>
800085d0:	08 9b       	mov	r11,r4
800085d2:	0a 9c       	mov	r12,r5
800085d4:	c6 0d       	rcall	80008894 <_malloc_r>
800085d6:	18 92       	mov	r2,r12
800085d8:	c1 40       	breq	80008600 <__sfvwrite_r+0x11c>
800085da:	40 0a       	lddsp	r10,sp[0x0]
800085dc:	6e 4b       	ld.w	r11,r7[0x10]
800085de:	fe b0 e4 23 	rcall	80004e24 <memcpy>
800085e2:	8e 68       	ld.sh	r8,r7[0xc]
800085e4:	e0 18 fb 7f 	andl	r8,0xfb7f
800085e8:	a7 b8       	sbr	r8,0x7
800085ea:	ae 68       	st.h	r7[0xc],r8
800085ec:	c0 d8       	rjmp	80008606 <__sfvwrite_r+0x122>
800085ee:	08 9a       	mov	r10,r4
800085f0:	0a 9c       	mov	r12,r5
800085f2:	e0 a0 06 7f 	rcall	800092f0 <_realloc_r>
800085f6:	18 92       	mov	r2,r12
800085f8:	c0 71       	brne	80008606 <__sfvwrite_r+0x122>
800085fa:	6e 4b       	ld.w	r11,r7[0x10]
800085fc:	0a 9c       	mov	r12,r5
800085fe:	ca de       	rcall	80008358 <_free_r>
80008600:	30 c8       	mov	r8,12
80008602:	8b 38       	st.w	r5[0xc],r8
80008604:	cb 78       	rjmp	80008772 <__sfvwrite_r+0x28e>
80008606:	40 0a       	lddsp	r10,sp[0x0]
80008608:	40 09       	lddsp	r9,sp[0x0]
8000860a:	e8 0a 01 0a 	sub	r10,r4,r10
8000860e:	e4 09 00 08 	add	r8,r2,r9
80008612:	8f 54       	st.w	r7[0x14],r4
80008614:	8f 2a       	st.w	r7[0x8],r10
80008616:	8f 08       	st.w	r7[0x0],r8
80008618:	8f 42       	st.w	r7[0x10],r2
8000861a:	0c 94       	mov	r4,r6
8000861c:	08 36       	cp.w	r6,r4
8000861e:	ec 04 17 30 	movlo	r4,r6
80008622:	06 9b       	mov	r11,r3
80008624:	08 9a       	mov	r10,r4
80008626:	6e 0c       	ld.w	r12,r7[0x0]
80008628:	e0 a0 03 59 	rcall	80008cda <memmove>
8000862c:	6e 08       	ld.w	r8,r7[0x0]
8000862e:	08 08       	add	r8,r4
80008630:	8f 08       	st.w	r7[0x0],r8
80008632:	6e 28       	ld.w	r8,r7[0x8]
80008634:	08 18       	sub	r8,r4
80008636:	0c 94       	mov	r4,r6
80008638:	8f 28       	st.w	r7[0x8],r8
8000863a:	c3 08       	rjmp	8000869a <__sfvwrite_r+0x1b6>
8000863c:	08 36       	cp.w	r6,r4
8000863e:	5f ba       	srhi	r10
80008640:	6e 0c       	ld.w	r12,r7[0x0]
80008642:	6e 48       	ld.w	r8,r7[0x10]
80008644:	10 3c       	cp.w	r12,r8
80008646:	5f b8       	srhi	r8
80008648:	f5 e8 00 08 	and	r8,r10,r8
8000864c:	f2 08 18 00 	cp.b	r8,r9
80008650:	c0 e0       	breq	8000866c <__sfvwrite_r+0x188>
80008652:	06 9b       	mov	r11,r3
80008654:	08 9a       	mov	r10,r4
80008656:	e0 a0 03 42 	rcall	80008cda <memmove>
8000865a:	6e 08       	ld.w	r8,r7[0x0]
8000865c:	08 08       	add	r8,r4
8000865e:	0e 9b       	mov	r11,r7
80008660:	8f 08       	st.w	r7[0x0],r8
80008662:	0a 9c       	mov	r12,r5
80008664:	fe b0 fd 08 	rcall	80008074 <_fflush_r>
80008668:	c1 90       	breq	8000869a <__sfvwrite_r+0x1b6>
8000866a:	c8 48       	rjmp	80008772 <__sfvwrite_r+0x28e>
8000866c:	6e 59       	ld.w	r9,r7[0x14]
8000866e:	12 36       	cp.w	r6,r9
80008670:	c0 a3       	brcs	80008684 <__sfvwrite_r+0x1a0>
80008672:	6e a8       	ld.w	r8,r7[0x28]
80008674:	06 9a       	mov	r10,r3
80008676:	6e 8b       	ld.w	r11,r7[0x20]
80008678:	0a 9c       	mov	r12,r5
8000867a:	5d 18       	icall	r8
8000867c:	18 94       	mov	r4,r12
8000867e:	e0 89 00 0e 	brgt	8000869a <__sfvwrite_r+0x1b6>
80008682:	c7 88       	rjmp	80008772 <__sfvwrite_r+0x28e>
80008684:	0c 9a       	mov	r10,r6
80008686:	06 9b       	mov	r11,r3
80008688:	e0 a0 03 29 	rcall	80008cda <memmove>
8000868c:	6e 08       	ld.w	r8,r7[0x0]
8000868e:	0c 08       	add	r8,r6
80008690:	0c 94       	mov	r4,r6
80008692:	8f 08       	st.w	r7[0x0],r8
80008694:	6e 28       	ld.w	r8,r7[0x8]
80008696:	0c 18       	sub	r8,r6
80008698:	8f 28       	st.w	r7[0x8],r8
8000869a:	62 28       	ld.w	r8,r1[0x8]
8000869c:	08 18       	sub	r8,r4
8000869e:	83 28       	st.w	r1[0x8],r8
800086a0:	c6 e0       	breq	8000877c <__sfvwrite_r+0x298>
800086a2:	08 16       	sub	r6,r4
800086a4:	08 03       	add	r3,r4
800086a6:	c6 fb       	rjmp	80008584 <__sfvwrite_r+0xa0>
800086a8:	60 03       	ld.w	r3,r0[0x0]
800086aa:	60 11       	ld.w	r1,r0[0x4]
800086ac:	30 08       	mov	r8,0
800086ae:	2f 80       	sub	r0,-8
800086b0:	50 08       	stdsp	sp[0x0],r8
800086b2:	58 01       	cp.w	r1,0
800086b4:	cf a0       	breq	800086a8 <__sfvwrite_r+0x1c4>
800086b6:	40 0a       	lddsp	r10,sp[0x0]
800086b8:	58 0a       	cp.w	r10,0
800086ba:	c1 51       	brne	800086e4 <__sfvwrite_r+0x200>
800086bc:	e2 c6 ff ff 	sub	r6,r1,-1
800086c0:	02 9a       	mov	r10,r1
800086c2:	30 ab       	mov	r11,10
800086c4:	06 9c       	mov	r12,r3
800086c6:	e0 a0 02 ff 	rcall	80008cc4 <memchr>
800086ca:	f8 c8 ff ff 	sub	r8,r12,-1
800086ce:	58 0c       	cp.w	r12,0
800086d0:	f1 d3 e1 16 	subne	r6,r8,r3
800086d4:	f9 b9 01 01 	movne	r9,1
800086d8:	fb f9 1a 00 	st.wne	sp[0x0],r9
800086dc:	f9 b8 00 01 	moveq	r8,1
800086e0:	fb f8 0a 00 	st.weq	sp[0x0],r8
800086e4:	02 36       	cp.w	r6,r1
800086e6:	ec 04 17 80 	movls	r4,r6
800086ea:	e2 04 17 b0 	movhi	r4,r1
800086ee:	6e 59       	ld.w	r9,r7[0x14]
800086f0:	6e 25       	ld.w	r5,r7[0x8]
800086f2:	f2 05 00 05 	add	r5,r9,r5
800086f6:	0a 34       	cp.w	r4,r5
800086f8:	5f 9a       	srgt	r10
800086fa:	6e 0c       	ld.w	r12,r7[0x0]
800086fc:	6e 48       	ld.w	r8,r7[0x10]
800086fe:	10 3c       	cp.w	r12,r8
80008700:	5f b8       	srhi	r8
80008702:	f5 e8 00 08 	and	r8,r10,r8
80008706:	30 0a       	mov	r10,0
80008708:	f4 08 18 00 	cp.b	r8,r10
8000870c:	c0 e0       	breq	80008728 <__sfvwrite_r+0x244>
8000870e:	06 9b       	mov	r11,r3
80008710:	0a 9a       	mov	r10,r5
80008712:	e0 a0 02 e4 	rcall	80008cda <memmove>
80008716:	6e 08       	ld.w	r8,r7[0x0]
80008718:	0a 08       	add	r8,r5
8000871a:	0e 9b       	mov	r11,r7
8000871c:	8f 08       	st.w	r7[0x0],r8
8000871e:	40 1c       	lddsp	r12,sp[0x4]
80008720:	fe b0 fc aa 	rcall	80008074 <_fflush_r>
80008724:	c1 80       	breq	80008754 <__sfvwrite_r+0x270>
80008726:	c2 68       	rjmp	80008772 <__sfvwrite_r+0x28e>
80008728:	12 34       	cp.w	r4,r9
8000872a:	c0 a5       	brlt	8000873e <__sfvwrite_r+0x25a>
8000872c:	6e a8       	ld.w	r8,r7[0x28]
8000872e:	06 9a       	mov	r10,r3
80008730:	6e 8b       	ld.w	r11,r7[0x20]
80008732:	40 1c       	lddsp	r12,sp[0x4]
80008734:	5d 18       	icall	r8
80008736:	18 95       	mov	r5,r12
80008738:	e0 89 00 0e 	brgt	80008754 <__sfvwrite_r+0x270>
8000873c:	c1 b8       	rjmp	80008772 <__sfvwrite_r+0x28e>
8000873e:	08 9a       	mov	r10,r4
80008740:	06 9b       	mov	r11,r3
80008742:	e0 a0 02 cc 	rcall	80008cda <memmove>
80008746:	6e 08       	ld.w	r8,r7[0x0]
80008748:	08 08       	add	r8,r4
8000874a:	08 95       	mov	r5,r4
8000874c:	8f 08       	st.w	r7[0x0],r8
8000874e:	6e 28       	ld.w	r8,r7[0x8]
80008750:	08 18       	sub	r8,r4
80008752:	8f 28       	st.w	r7[0x8],r8
80008754:	0a 16       	sub	r6,r5
80008756:	c0 71       	brne	80008764 <__sfvwrite_r+0x280>
80008758:	0e 9b       	mov	r11,r7
8000875a:	40 1c       	lddsp	r12,sp[0x4]
8000875c:	fe b0 fc 8c 	rcall	80008074 <_fflush_r>
80008760:	c0 91       	brne	80008772 <__sfvwrite_r+0x28e>
80008762:	50 06       	stdsp	sp[0x0],r6
80008764:	64 28       	ld.w	r8,r2[0x8]
80008766:	0a 18       	sub	r8,r5
80008768:	85 28       	st.w	r2[0x8],r8
8000876a:	c0 90       	breq	8000877c <__sfvwrite_r+0x298>
8000876c:	0a 11       	sub	r1,r5
8000876e:	0a 03       	add	r3,r5
80008770:	ca 1b       	rjmp	800086b2 <__sfvwrite_r+0x1ce>
80008772:	8e 68       	ld.sh	r8,r7[0xc]
80008774:	a7 a8       	sbr	r8,0x6
80008776:	ae 68       	st.h	r7[0xc],r8
80008778:	3f fc       	mov	r12,-1
8000877a:	c0 28       	rjmp	8000877e <__sfvwrite_r+0x29a>
8000877c:	30 0c       	mov	r12,0
8000877e:	2f dd       	sub	sp,-12
80008780:	d8 32       	popm	r0-r7,pc
80008782:	d7 03       	nop

80008784 <_fwalk>:
80008784:	d4 31       	pushm	r0-r7,lr
80008786:	30 05       	mov	r5,0
80008788:	16 91       	mov	r1,r11
8000878a:	f8 c7 ff 28 	sub	r7,r12,-216
8000878e:	0a 92       	mov	r2,r5
80008790:	fe b0 fc f8 	rcall	80008180 <__sfp_lock_acquire>
80008794:	3f f3       	mov	r3,-1
80008796:	c1 68       	rjmp	800087c2 <_fwalk+0x3e>
80008798:	6e 26       	ld.w	r6,r7[0x8]
8000879a:	6e 14       	ld.w	r4,r7[0x4]
8000879c:	2f 46       	sub	r6,-12
8000879e:	c0 c8       	rjmp	800087b6 <_fwalk+0x32>
800087a0:	8c 08       	ld.sh	r8,r6[0x0]
800087a2:	e4 08 19 00 	cp.h	r8,r2
800087a6:	c0 70       	breq	800087b4 <_fwalk+0x30>
800087a8:	8c 18       	ld.sh	r8,r6[0x2]
800087aa:	e6 08 19 00 	cp.h	r8,r3
800087ae:	c0 30       	breq	800087b4 <_fwalk+0x30>
800087b0:	5d 11       	icall	r1
800087b2:	18 45       	or	r5,r12
800087b4:	2a 46       	sub	r6,-92
800087b6:	20 14       	sub	r4,1
800087b8:	ec cc 00 0c 	sub	r12,r6,12
800087bc:	58 04       	cp.w	r4,0
800087be:	cf 14       	brge	800087a0 <_fwalk+0x1c>
800087c0:	6e 07       	ld.w	r7,r7[0x0]
800087c2:	58 07       	cp.w	r7,0
800087c4:	ce a1       	brne	80008798 <_fwalk+0x14>
800087c6:	fe b0 fc de 	rcall	80008182 <__sfp_lock_release>
800087ca:	0a 9c       	mov	r12,r5
800087cc:	d8 32       	popm	r0-r7,pc
800087ce:	d7 03       	nop

800087d0 <_localeconv_r>:
800087d0:	fe cc d5 c0 	sub	r12,pc,-10816
800087d4:	5e fc       	retal	r12
800087d6:	d7 03       	nop

800087d8 <__smakebuf_r>:
800087d8:	d4 21       	pushm	r4-r7,lr
800087da:	20 fd       	sub	sp,60
800087dc:	96 68       	ld.sh	r8,r11[0xc]
800087de:	16 97       	mov	r7,r11
800087e0:	18 96       	mov	r6,r12
800087e2:	e2 18 00 02 	andl	r8,0x2,COH
800087e6:	c3 c1       	brne	8000885e <__smakebuf_r+0x86>
800087e8:	96 7b       	ld.sh	r11,r11[0xe]
800087ea:	f0 0b 19 00 	cp.h	r11,r8
800087ee:	c0 55       	brlt	800087f8 <__smakebuf_r+0x20>
800087f0:	1a 9a       	mov	r10,sp
800087f2:	e0 a0 08 8d 	rcall	8000990c <_fstat_r>
800087f6:	c0 f4       	brge	80008814 <__smakebuf_r+0x3c>
800087f8:	8e 65       	ld.sh	r5,r7[0xc]
800087fa:	0a 98       	mov	r8,r5
800087fc:	ab b8       	sbr	r8,0xb
800087fe:	e2 15 00 80 	andl	r5,0x80,COH
80008802:	ae 68       	st.h	r7[0xc],r8
80008804:	30 04       	mov	r4,0
80008806:	e0 68 04 00 	mov	r8,1024
8000880a:	f9 b5 01 40 	movne	r5,64
8000880e:	f0 05 17 00 	moveq	r5,r8
80008812:	c1 c8       	rjmp	8000884a <__smakebuf_r+0x72>
80008814:	40 18       	lddsp	r8,sp[0x4]
80008816:	e2 18 f0 00 	andl	r8,0xf000,COH
8000881a:	e0 48 20 00 	cp.w	r8,8192
8000881e:	5f 04       	sreq	r4
80008820:	e0 48 80 00 	cp.w	r8,32768
80008824:	c0 e1       	brne	80008840 <__smakebuf_r+0x68>
80008826:	6e b9       	ld.w	r9,r7[0x2c]
80008828:	fe c8 f2 08 	sub	r8,pc,-3576
8000882c:	10 39       	cp.w	r9,r8
8000882e:	c0 91       	brne	80008840 <__smakebuf_r+0x68>
80008830:	8e 68       	ld.sh	r8,r7[0xc]
80008832:	e0 65 04 00 	mov	r5,1024
80008836:	ab a8       	sbr	r8,0xa
80008838:	ef 45 00 50 	st.w	r7[80],r5
8000883c:	ae 68       	st.h	r7[0xc],r8
8000883e:	c0 68       	rjmp	8000884a <__smakebuf_r+0x72>
80008840:	8e 68       	ld.sh	r8,r7[0xc]
80008842:	e0 65 04 00 	mov	r5,1024
80008846:	ab b8       	sbr	r8,0xb
80008848:	ae 68       	st.h	r7[0xc],r8
8000884a:	0a 9b       	mov	r11,r5
8000884c:	0c 9c       	mov	r12,r6
8000884e:	c2 3c       	rcall	80008894 <_malloc_r>
80008850:	8e 68       	ld.sh	r8,r7[0xc]
80008852:	c0 d1       	brne	8000886c <__smakebuf_r+0x94>
80008854:	ed b8 00 09 	bld	r8,0x9
80008858:	c1 b0       	breq	8000888e <__smakebuf_r+0xb6>
8000885a:	a1 b8       	sbr	r8,0x1
8000885c:	ae 68       	st.h	r7[0xc],r8
8000885e:	ee c8 ff b9 	sub	r8,r7,-71
80008862:	8f 48       	st.w	r7[0x10],r8
80008864:	8f 08       	st.w	r7[0x0],r8
80008866:	30 18       	mov	r8,1
80008868:	8f 58       	st.w	r7[0x14],r8
8000886a:	c1 28       	rjmp	8000888e <__smakebuf_r+0xb6>
8000886c:	a7 b8       	sbr	r8,0x7
8000886e:	8f 4c       	st.w	r7[0x10],r12
80008870:	ae 68       	st.h	r7[0xc],r8
80008872:	8f 55       	st.w	r7[0x14],r5
80008874:	fe c8 06 f0 	sub	r8,pc,1776
80008878:	8f 0c       	st.w	r7[0x0],r12
8000887a:	8d a8       	st.w	r6[0x28],r8
8000887c:	58 04       	cp.w	r4,0
8000887e:	c0 80       	breq	8000888e <__smakebuf_r+0xb6>
80008880:	8e 7c       	ld.sh	r12,r7[0xe]
80008882:	e0 a0 07 37 	rcall	800096f0 <isatty>
80008886:	c0 40       	breq	8000888e <__smakebuf_r+0xb6>
80008888:	8e 68       	ld.sh	r8,r7[0xc]
8000888a:	a1 a8       	sbr	r8,0x0
8000888c:	ae 68       	st.h	r7[0xc],r8
8000888e:	2f 1d       	sub	sp,-60
80008890:	d8 22       	popm	r4-r7,pc
80008892:	d7 03       	nop

80008894 <_malloc_r>:
80008894:	d4 31       	pushm	r0-r7,lr
80008896:	f6 c8 ff f5 	sub	r8,r11,-11
8000889a:	18 95       	mov	r5,r12
8000889c:	10 97       	mov	r7,r8
8000889e:	e0 17 ff f8 	andl	r7,0xfff8
800088a2:	59 68       	cp.w	r8,22
800088a4:	f9 b7 08 10 	movls	r7,16
800088a8:	16 37       	cp.w	r7,r11
800088aa:	5f 38       	srlo	r8
800088ac:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800088b0:	c0 50       	breq	800088ba <_malloc_r+0x26>
800088b2:	30 c8       	mov	r8,12
800088b4:	99 38       	st.w	r12[0xc],r8
800088b6:	e0 8f 01 f7 	bral	80008ca4 <_malloc_r+0x410>
800088ba:	e0 a0 02 2f 	rcall	80008d18 <__malloc_lock>
800088be:	e0 47 01 f7 	cp.w	r7,503
800088c2:	e0 8b 00 1d 	brhi	800088fc <_malloc_r+0x68>
800088c6:	ee 03 16 03 	lsr	r3,r7,0x3
800088ca:	e0 68 00 fc 	mov	r8,252
800088ce:	f0 03 00 38 	add	r8,r8,r3<<0x3
800088d2:	70 36       	ld.w	r6,r8[0xc]
800088d4:	10 36       	cp.w	r6,r8
800088d6:	c0 61       	brne	800088e2 <_malloc_r+0x4e>
800088d8:	ec c8 ff f8 	sub	r8,r6,-8
800088dc:	70 36       	ld.w	r6,r8[0xc]
800088de:	10 36       	cp.w	r6,r8
800088e0:	c0 c0       	breq	800088f8 <_malloc_r+0x64>
800088e2:	6c 18       	ld.w	r8,r6[0x4]
800088e4:	e0 18 ff fc 	andl	r8,0xfffc
800088e8:	6c 3a       	ld.w	r10,r6[0xc]
800088ea:	ec 08 00 09 	add	r9,r6,r8
800088ee:	0a 9c       	mov	r12,r5
800088f0:	6c 28       	ld.w	r8,r6[0x8]
800088f2:	95 28       	st.w	r10[0x8],r8
800088f4:	91 3a       	st.w	r8[0xc],r10
800088f6:	c4 78       	rjmp	80008984 <_malloc_r+0xf0>
800088f8:	2f e3       	sub	r3,-2
800088fa:	c4 d8       	rjmp	80008994 <_malloc_r+0x100>
800088fc:	ee 03 16 09 	lsr	r3,r7,0x9
80008900:	c0 41       	brne	80008908 <_malloc_r+0x74>
80008902:	ee 03 16 03 	lsr	r3,r7,0x3
80008906:	c2 68       	rjmp	80008952 <_malloc_r+0xbe>
80008908:	58 43       	cp.w	r3,4
8000890a:	e0 8b 00 06 	brhi	80008916 <_malloc_r+0x82>
8000890e:	ee 03 16 06 	lsr	r3,r7,0x6
80008912:	2c 83       	sub	r3,-56
80008914:	c1 f8       	rjmp	80008952 <_malloc_r+0xbe>
80008916:	59 43       	cp.w	r3,20
80008918:	e0 8b 00 04 	brhi	80008920 <_malloc_r+0x8c>
8000891c:	2a 53       	sub	r3,-91
8000891e:	c1 a8       	rjmp	80008952 <_malloc_r+0xbe>
80008920:	e0 43 00 54 	cp.w	r3,84
80008924:	e0 8b 00 06 	brhi	80008930 <_malloc_r+0x9c>
80008928:	ee 03 16 0c 	lsr	r3,r7,0xc
8000892c:	29 23       	sub	r3,-110
8000892e:	c1 28       	rjmp	80008952 <_malloc_r+0xbe>
80008930:	e0 43 01 54 	cp.w	r3,340
80008934:	e0 8b 00 06 	brhi	80008940 <_malloc_r+0xac>
80008938:	ee 03 16 0f 	lsr	r3,r7,0xf
8000893c:	28 93       	sub	r3,-119
8000893e:	c0 a8       	rjmp	80008952 <_malloc_r+0xbe>
80008940:	e0 43 05 54 	cp.w	r3,1364
80008944:	e0 88 00 04 	brls	8000894c <_malloc_r+0xb8>
80008948:	37 e3       	mov	r3,126
8000894a:	c0 48       	rjmp	80008952 <_malloc_r+0xbe>
8000894c:	ee 03 16 12 	lsr	r3,r7,0x12
80008950:	28 43       	sub	r3,-124
80008952:	e0 6a 00 fc 	mov	r10,252
80008956:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000895a:	74 36       	ld.w	r6,r10[0xc]
8000895c:	c1 98       	rjmp	8000898e <_malloc_r+0xfa>
8000895e:	6c 19       	ld.w	r9,r6[0x4]
80008960:	e0 19 ff fc 	andl	r9,0xfffc
80008964:	f2 07 01 0b 	sub	r11,r9,r7
80008968:	58 fb       	cp.w	r11,15
8000896a:	e0 8a 00 04 	brle	80008972 <_malloc_r+0xde>
8000896e:	20 13       	sub	r3,1
80008970:	c1 18       	rjmp	80008992 <_malloc_r+0xfe>
80008972:	6c 38       	ld.w	r8,r6[0xc]
80008974:	58 0b       	cp.w	r11,0
80008976:	c0 b5       	brlt	8000898c <_malloc_r+0xf8>
80008978:	6c 2a       	ld.w	r10,r6[0x8]
8000897a:	ec 09 00 09 	add	r9,r6,r9
8000897e:	0a 9c       	mov	r12,r5
80008980:	91 2a       	st.w	r8[0x8],r10
80008982:	95 38       	st.w	r10[0xc],r8
80008984:	72 18       	ld.w	r8,r9[0x4]
80008986:	a1 a8       	sbr	r8,0x0
80008988:	93 18       	st.w	r9[0x4],r8
8000898a:	cb c8       	rjmp	80008b02 <_malloc_r+0x26e>
8000898c:	10 96       	mov	r6,r8
8000898e:	14 36       	cp.w	r6,r10
80008990:	ce 71       	brne	8000895e <_malloc_r+0xca>
80008992:	2f f3       	sub	r3,-1
80008994:	e0 6a 00 fc 	mov	r10,252
80008998:	f4 cc ff f8 	sub	r12,r10,-8
8000899c:	78 26       	ld.w	r6,r12[0x8]
8000899e:	18 36       	cp.w	r6,r12
800089a0:	c6 c0       	breq	80008a78 <_malloc_r+0x1e4>
800089a2:	6c 19       	ld.w	r9,r6[0x4]
800089a4:	e0 19 ff fc 	andl	r9,0xfffc
800089a8:	f2 07 01 08 	sub	r8,r9,r7
800089ac:	58 f8       	cp.w	r8,15
800089ae:	e0 89 00 8f 	brgt	80008acc <_malloc_r+0x238>
800089b2:	99 3c       	st.w	r12[0xc],r12
800089b4:	99 2c       	st.w	r12[0x8],r12
800089b6:	58 08       	cp.w	r8,0
800089b8:	c0 55       	brlt	800089c2 <_malloc_r+0x12e>
800089ba:	ec 09 00 09 	add	r9,r6,r9
800089be:	0a 9c       	mov	r12,r5
800089c0:	ce 2b       	rjmp	80008984 <_malloc_r+0xf0>
800089c2:	e0 49 01 ff 	cp.w	r9,511
800089c6:	e0 8b 00 13 	brhi	800089ec <_malloc_r+0x158>
800089ca:	a3 99       	lsr	r9,0x3
800089cc:	f4 09 00 38 	add	r8,r10,r9<<0x3
800089d0:	70 2b       	ld.w	r11,r8[0x8]
800089d2:	8d 38       	st.w	r6[0xc],r8
800089d4:	8d 2b       	st.w	r6[0x8],r11
800089d6:	97 36       	st.w	r11[0xc],r6
800089d8:	91 26       	st.w	r8[0x8],r6
800089da:	a3 49       	asr	r9,0x2
800089dc:	74 18       	ld.w	r8,r10[0x4]
800089de:	30 1b       	mov	r11,1
800089e0:	f6 09 09 49 	lsl	r9,r11,r9
800089e4:	f1 e9 10 09 	or	r9,r8,r9
800089e8:	95 19       	st.w	r10[0x4],r9
800089ea:	c4 78       	rjmp	80008a78 <_malloc_r+0x1e4>
800089ec:	f2 0a 16 09 	lsr	r10,r9,0x9
800089f0:	58 4a       	cp.w	r10,4
800089f2:	e0 8b 00 07 	brhi	80008a00 <_malloc_r+0x16c>
800089f6:	f2 0a 16 06 	lsr	r10,r9,0x6
800089fa:	2c 8a       	sub	r10,-56
800089fc:	c2 08       	rjmp	80008a3c <_malloc_r+0x1a8>
800089fe:	d7 03       	nop
80008a00:	59 4a       	cp.w	r10,20
80008a02:	e0 8b 00 04 	brhi	80008a0a <_malloc_r+0x176>
80008a06:	2a 5a       	sub	r10,-91
80008a08:	c1 a8       	rjmp	80008a3c <_malloc_r+0x1a8>
80008a0a:	e0 4a 00 54 	cp.w	r10,84
80008a0e:	e0 8b 00 06 	brhi	80008a1a <_malloc_r+0x186>
80008a12:	f2 0a 16 0c 	lsr	r10,r9,0xc
80008a16:	29 2a       	sub	r10,-110
80008a18:	c1 28       	rjmp	80008a3c <_malloc_r+0x1a8>
80008a1a:	e0 4a 01 54 	cp.w	r10,340
80008a1e:	e0 8b 00 06 	brhi	80008a2a <_malloc_r+0x196>
80008a22:	f2 0a 16 0f 	lsr	r10,r9,0xf
80008a26:	28 9a       	sub	r10,-119
80008a28:	c0 a8       	rjmp	80008a3c <_malloc_r+0x1a8>
80008a2a:	e0 4a 05 54 	cp.w	r10,1364
80008a2e:	e0 88 00 04 	brls	80008a36 <_malloc_r+0x1a2>
80008a32:	37 ea       	mov	r10,126
80008a34:	c0 48       	rjmp	80008a3c <_malloc_r+0x1a8>
80008a36:	f2 0a 16 12 	lsr	r10,r9,0x12
80008a3a:	28 4a       	sub	r10,-124
80008a3c:	e0 6b 00 fc 	mov	r11,252
80008a40:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80008a44:	68 28       	ld.w	r8,r4[0x8]
80008a46:	08 38       	cp.w	r8,r4
80008a48:	c0 e1       	brne	80008a64 <_malloc_r+0x1d0>
80008a4a:	76 19       	ld.w	r9,r11[0x4]
80008a4c:	a3 4a       	asr	r10,0x2
80008a4e:	30 1e       	mov	lr,1
80008a50:	fc 0a 09 4a 	lsl	r10,lr,r10
80008a54:	f3 ea 10 0a 	or	r10,r9,r10
80008a58:	10 99       	mov	r9,r8
80008a5a:	97 1a       	st.w	r11[0x4],r10
80008a5c:	c0 a8       	rjmp	80008a70 <_malloc_r+0x1dc>
80008a5e:	70 28       	ld.w	r8,r8[0x8]
80008a60:	08 38       	cp.w	r8,r4
80008a62:	c0 60       	breq	80008a6e <_malloc_r+0x1da>
80008a64:	70 1a       	ld.w	r10,r8[0x4]
80008a66:	e0 1a ff fc 	andl	r10,0xfffc
80008a6a:	14 39       	cp.w	r9,r10
80008a6c:	cf 93       	brcs	80008a5e <_malloc_r+0x1ca>
80008a6e:	70 39       	ld.w	r9,r8[0xc]
80008a70:	8d 39       	st.w	r6[0xc],r9
80008a72:	8d 28       	st.w	r6[0x8],r8
80008a74:	91 36       	st.w	r8[0xc],r6
80008a76:	93 26       	st.w	r9[0x8],r6
80008a78:	e6 08 14 02 	asr	r8,r3,0x2
80008a7c:	30 1b       	mov	r11,1
80008a7e:	e0 64 00 fc 	mov	r4,252
80008a82:	f6 08 09 4b 	lsl	r11,r11,r8
80008a86:	68 18       	ld.w	r8,r4[0x4]
80008a88:	10 3b       	cp.w	r11,r8
80008a8a:	e0 8b 00 69 	brhi	80008b5c <_malloc_r+0x2c8>
80008a8e:	f7 e8 00 09 	and	r9,r11,r8
80008a92:	c0 b1       	brne	80008aa8 <_malloc_r+0x214>
80008a94:	e0 13 ff fc 	andl	r3,0xfffc
80008a98:	a1 7b       	lsl	r11,0x1
80008a9a:	2f c3       	sub	r3,-4
80008a9c:	c0 38       	rjmp	80008aa2 <_malloc_r+0x20e>
80008a9e:	2f c3       	sub	r3,-4
80008aa0:	a1 7b       	lsl	r11,0x1
80008aa2:	f7 e8 00 09 	and	r9,r11,r8
80008aa6:	cf c0       	breq	80008a9e <_malloc_r+0x20a>
80008aa8:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80008aac:	06 92       	mov	r2,r3
80008aae:	1c 91       	mov	r1,lr
80008ab0:	62 36       	ld.w	r6,r1[0xc]
80008ab2:	c2 d8       	rjmp	80008b0c <_malloc_r+0x278>
80008ab4:	6c 1a       	ld.w	r10,r6[0x4]
80008ab6:	e0 1a ff fc 	andl	r10,0xfffc
80008aba:	f4 07 01 08 	sub	r8,r10,r7
80008abe:	58 f8       	cp.w	r8,15
80008ac0:	e0 8a 00 15 	brle	80008aea <_malloc_r+0x256>
80008ac4:	6c 3a       	ld.w	r10,r6[0xc]
80008ac6:	6c 29       	ld.w	r9,r6[0x8]
80008ac8:	95 29       	st.w	r10[0x8],r9
80008aca:	93 3a       	st.w	r9[0xc],r10
80008acc:	0e 99       	mov	r9,r7
80008ace:	ec 07 00 07 	add	r7,r6,r7
80008ad2:	a1 a9       	sbr	r9,0x0
80008ad4:	99 37       	st.w	r12[0xc],r7
80008ad6:	99 27       	st.w	r12[0x8],r7
80008ad8:	8d 19       	st.w	r6[0x4],r9
80008ada:	ee 08 09 08 	st.w	r7[r8],r8
80008ade:	8f 2c       	st.w	r7[0x8],r12
80008ae0:	8f 3c       	st.w	r7[0xc],r12
80008ae2:	a1 a8       	sbr	r8,0x0
80008ae4:	0a 9c       	mov	r12,r5
80008ae6:	8f 18       	st.w	r7[0x4],r8
80008ae8:	c0 d8       	rjmp	80008b02 <_malloc_r+0x26e>
80008aea:	6c 39       	ld.w	r9,r6[0xc]
80008aec:	58 08       	cp.w	r8,0
80008aee:	c0 e5       	brlt	80008b0a <_malloc_r+0x276>
80008af0:	ec 0a 00 0a 	add	r10,r6,r10
80008af4:	74 18       	ld.w	r8,r10[0x4]
80008af6:	a1 a8       	sbr	r8,0x0
80008af8:	0a 9c       	mov	r12,r5
80008afa:	95 18       	st.w	r10[0x4],r8
80008afc:	6c 28       	ld.w	r8,r6[0x8]
80008afe:	93 28       	st.w	r9[0x8],r8
80008b00:	91 39       	st.w	r8[0xc],r9
80008b02:	c0 cd       	rcall	80008d1a <__malloc_unlock>
80008b04:	ec cc ff f8 	sub	r12,r6,-8
80008b08:	d8 32       	popm	r0-r7,pc
80008b0a:	12 96       	mov	r6,r9
80008b0c:	02 36       	cp.w	r6,r1
80008b0e:	cd 31       	brne	80008ab4 <_malloc_r+0x220>
80008b10:	2f f2       	sub	r2,-1
80008b12:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80008b16:	c0 30       	breq	80008b1c <_malloc_r+0x288>
80008b18:	2f 81       	sub	r1,-8
80008b1a:	cc bb       	rjmp	80008ab0 <_malloc_r+0x21c>
80008b1c:	1c 98       	mov	r8,lr
80008b1e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80008b22:	c0 81       	brne	80008b32 <_malloc_r+0x29e>
80008b24:	68 19       	ld.w	r9,r4[0x4]
80008b26:	f6 08 11 ff 	rsub	r8,r11,-1
80008b2a:	f3 e8 00 08 	and	r8,r9,r8
80008b2e:	89 18       	st.w	r4[0x4],r8
80008b30:	c0 78       	rjmp	80008b3e <_malloc_r+0x2aa>
80008b32:	f0 c9 00 08 	sub	r9,r8,8
80008b36:	20 13       	sub	r3,1
80008b38:	70 08       	ld.w	r8,r8[0x0]
80008b3a:	12 38       	cp.w	r8,r9
80008b3c:	cf 10       	breq	80008b1e <_malloc_r+0x28a>
80008b3e:	a1 7b       	lsl	r11,0x1
80008b40:	68 18       	ld.w	r8,r4[0x4]
80008b42:	10 3b       	cp.w	r11,r8
80008b44:	e0 8b 00 0c 	brhi	80008b5c <_malloc_r+0x2c8>
80008b48:	58 0b       	cp.w	r11,0
80008b4a:	c0 90       	breq	80008b5c <_malloc_r+0x2c8>
80008b4c:	04 93       	mov	r3,r2
80008b4e:	c0 38       	rjmp	80008b54 <_malloc_r+0x2c0>
80008b50:	2f c3       	sub	r3,-4
80008b52:	a1 7b       	lsl	r11,0x1
80008b54:	f7 e8 00 09 	and	r9,r11,r8
80008b58:	ca 81       	brne	80008aa8 <_malloc_r+0x214>
80008b5a:	cf bb       	rjmp	80008b50 <_malloc_r+0x2bc>
80008b5c:	68 23       	ld.w	r3,r4[0x8]
80008b5e:	66 12       	ld.w	r2,r3[0x4]
80008b60:	e0 12 ff fc 	andl	r2,0xfffc
80008b64:	0e 32       	cp.w	r2,r7
80008b66:	5f 39       	srlo	r9
80008b68:	e4 07 01 08 	sub	r8,r2,r7
80008b6c:	58 f8       	cp.w	r8,15
80008b6e:	5f aa       	srle	r10
80008b70:	f5 e9 10 09 	or	r9,r10,r9
80008b74:	e0 80 00 9a 	breq	80008ca8 <_malloc_r+0x414>
80008b78:	e0 68 09 10 	mov	r8,2320
80008b7c:	70 01       	ld.w	r1,r8[0x0]
80008b7e:	e0 68 05 08 	mov	r8,1288
80008b82:	2f 01       	sub	r1,-16
80008b84:	70 08       	ld.w	r8,r8[0x0]
80008b86:	0e 01       	add	r1,r7
80008b88:	5b f8       	cp.w	r8,-1
80008b8a:	c0 40       	breq	80008b92 <_malloc_r+0x2fe>
80008b8c:	28 11       	sub	r1,-127
80008b8e:	e0 11 ff 80 	andl	r1,0xff80
80008b92:	02 9b       	mov	r11,r1
80008b94:	0a 9c       	mov	r12,r5
80008b96:	e0 a0 05 31 	rcall	800095f8 <_sbrk_r>
80008b9a:	18 96       	mov	r6,r12
80008b9c:	5b fc       	cp.w	r12,-1
80008b9e:	c7 50       	breq	80008c88 <_malloc_r+0x3f4>
80008ba0:	e6 02 00 08 	add	r8,r3,r2
80008ba4:	10 3c       	cp.w	r12,r8
80008ba6:	c0 32       	brcc	80008bac <_malloc_r+0x318>
80008ba8:	08 33       	cp.w	r3,r4
80008baa:	c6 f1       	brne	80008c88 <_malloc_r+0x3f4>
80008bac:	e0 6a 09 14 	mov	r10,2324
80008bb0:	74 09       	ld.w	r9,r10[0x0]
80008bb2:	e2 09 00 09 	add	r9,r1,r9
80008bb6:	95 09       	st.w	r10[0x0],r9
80008bb8:	10 36       	cp.w	r6,r8
80008bba:	c0 a1       	brne	80008bce <_malloc_r+0x33a>
80008bbc:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80008bc0:	c0 71       	brne	80008bce <_malloc_r+0x33a>
80008bc2:	e2 02 00 02 	add	r2,r1,r2
80008bc6:	68 28       	ld.w	r8,r4[0x8]
80008bc8:	a1 a2       	sbr	r2,0x0
80008bca:	91 12       	st.w	r8[0x4],r2
80008bcc:	c4 f8       	rjmp	80008c6a <_malloc_r+0x3d6>
80008bce:	e0 6a 05 08 	mov	r10,1288
80008bd2:	74 0b       	ld.w	r11,r10[0x0]
80008bd4:	5b fb       	cp.w	r11,-1
80008bd6:	c0 31       	brne	80008bdc <_malloc_r+0x348>
80008bd8:	95 06       	st.w	r10[0x0],r6
80008bda:	c0 78       	rjmp	80008be8 <_malloc_r+0x354>
80008bdc:	ec 09 00 09 	add	r9,r6,r9
80008be0:	e0 6a 09 14 	mov	r10,2324
80008be4:	10 19       	sub	r9,r8
80008be6:	95 09       	st.w	r10[0x0],r9
80008be8:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80008bec:	f0 09 11 08 	rsub	r9,r8,8
80008bf0:	58 08       	cp.w	r8,0
80008bf2:	f2 08 17 10 	movne	r8,r9
80008bf6:	ed d8 e1 06 	addne	r6,r6,r8
80008bfa:	28 08       	sub	r8,-128
80008bfc:	ec 01 00 01 	add	r1,r6,r1
80008c00:	0a 9c       	mov	r12,r5
80008c02:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80008c06:	f0 01 01 01 	sub	r1,r8,r1
80008c0a:	02 9b       	mov	r11,r1
80008c0c:	e0 a0 04 f6 	rcall	800095f8 <_sbrk_r>
80008c10:	e0 68 09 14 	mov	r8,2324
80008c14:	5b fc       	cp.w	r12,-1
80008c16:	ec 0c 17 00 	moveq	r12,r6
80008c1a:	f9 b1 00 00 	moveq	r1,0
80008c1e:	70 09       	ld.w	r9,r8[0x0]
80008c20:	0c 1c       	sub	r12,r6
80008c22:	89 26       	st.w	r4[0x8],r6
80008c24:	02 0c       	add	r12,r1
80008c26:	12 01       	add	r1,r9
80008c28:	a1 ac       	sbr	r12,0x0
80008c2a:	91 01       	st.w	r8[0x0],r1
80008c2c:	8d 1c       	st.w	r6[0x4],r12
80008c2e:	08 33       	cp.w	r3,r4
80008c30:	c1 d0       	breq	80008c6a <_malloc_r+0x3d6>
80008c32:	58 f2       	cp.w	r2,15
80008c34:	e0 8b 00 05 	brhi	80008c3e <_malloc_r+0x3aa>
80008c38:	30 18       	mov	r8,1
80008c3a:	8d 18       	st.w	r6[0x4],r8
80008c3c:	c2 68       	rjmp	80008c88 <_malloc_r+0x3f4>
80008c3e:	30 59       	mov	r9,5
80008c40:	20 c2       	sub	r2,12
80008c42:	e0 12 ff f8 	andl	r2,0xfff8
80008c46:	e6 02 00 08 	add	r8,r3,r2
80008c4a:	91 29       	st.w	r8[0x8],r9
80008c4c:	91 19       	st.w	r8[0x4],r9
80008c4e:	66 18       	ld.w	r8,r3[0x4]
80008c50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008c54:	e5 e8 10 08 	or	r8,r2,r8
80008c58:	87 18       	st.w	r3[0x4],r8
80008c5a:	58 f2       	cp.w	r2,15
80008c5c:	e0 88 00 07 	brls	80008c6a <_malloc_r+0x3d6>
80008c60:	e6 cb ff f8 	sub	r11,r3,-8
80008c64:	0a 9c       	mov	r12,r5
80008c66:	fe b0 fb 79 	rcall	80008358 <_free_r>
80008c6a:	e0 69 09 0c 	mov	r9,2316
80008c6e:	72 0a       	ld.w	r10,r9[0x0]
80008c70:	e0 68 09 14 	mov	r8,2324
80008c74:	70 08       	ld.w	r8,r8[0x0]
80008c76:	14 38       	cp.w	r8,r10
80008c78:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80008c7c:	e0 69 09 08 	mov	r9,2312
80008c80:	72 0a       	ld.w	r10,r9[0x0]
80008c82:	14 38       	cp.w	r8,r10
80008c84:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80008c88:	68 28       	ld.w	r8,r4[0x8]
80008c8a:	70 18       	ld.w	r8,r8[0x4]
80008c8c:	e0 18 ff fc 	andl	r8,0xfffc
80008c90:	0e 38       	cp.w	r8,r7
80008c92:	5f 39       	srlo	r9
80008c94:	0e 18       	sub	r8,r7
80008c96:	58 f8       	cp.w	r8,15
80008c98:	5f aa       	srle	r10
80008c9a:	f5 e9 10 09 	or	r9,r10,r9
80008c9e:	c0 50       	breq	80008ca8 <_malloc_r+0x414>
80008ca0:	0a 9c       	mov	r12,r5
80008ca2:	c3 cc       	rcall	80008d1a <__malloc_unlock>
80008ca4:	d8 3a       	popm	r0-r7,pc,r12=0
80008ca6:	d7 03       	nop
80008ca8:	68 26       	ld.w	r6,r4[0x8]
80008caa:	a1 a8       	sbr	r8,0x0
80008cac:	0e 99       	mov	r9,r7
80008cae:	a1 a9       	sbr	r9,0x0
80008cb0:	8d 19       	st.w	r6[0x4],r9
80008cb2:	ec 07 00 07 	add	r7,r6,r7
80008cb6:	0a 9c       	mov	r12,r5
80008cb8:	89 27       	st.w	r4[0x8],r7
80008cba:	8f 18       	st.w	r7[0x4],r8
80008cbc:	c2 fc       	rcall	80008d1a <__malloc_unlock>
80008cbe:	ec cc ff f8 	sub	r12,r6,-8
80008cc2:	d8 32       	popm	r0-r7,pc

80008cc4 <memchr>:
80008cc4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80008cc8:	c0 68       	rjmp	80008cd4 <memchr+0x10>
80008cca:	20 1a       	sub	r10,1
80008ccc:	19 88       	ld.ub	r8,r12[0x0]
80008cce:	16 38       	cp.w	r8,r11
80008cd0:	5e 0c       	reteq	r12
80008cd2:	2f fc       	sub	r12,-1
80008cd4:	58 0a       	cp.w	r10,0
80008cd6:	cf a1       	brne	80008cca <memchr+0x6>
80008cd8:	5e fa       	retal	r10

80008cda <memmove>:
80008cda:	d4 01       	pushm	lr
80008cdc:	18 3b       	cp.w	r11,r12
80008cde:	c1 92       	brcc	80008d10 <memmove+0x36>
80008ce0:	f6 0a 00 09 	add	r9,r11,r10
80008ce4:	12 3c       	cp.w	r12,r9
80008ce6:	c1 52       	brcc	80008d10 <memmove+0x36>
80008ce8:	f8 0a 00 0b 	add	r11,r12,r10
80008cec:	30 08       	mov	r8,0
80008cee:	c0 68       	rjmp	80008cfa <memmove+0x20>
80008cf0:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80008cf4:	20 1a       	sub	r10,1
80008cf6:	f6 08 0b 0e 	st.b	r11[r8],lr
80008cfa:	20 18       	sub	r8,1
80008cfc:	58 0a       	cp.w	r10,0
80008cfe:	cf 91       	brne	80008cf0 <memmove+0x16>
80008d00:	d8 02       	popm	pc
80008d02:	f6 08 07 09 	ld.ub	r9,r11[r8]
80008d06:	20 1a       	sub	r10,1
80008d08:	f8 08 0b 09 	st.b	r12[r8],r9
80008d0c:	2f f8       	sub	r8,-1
80008d0e:	c0 28       	rjmp	80008d12 <memmove+0x38>
80008d10:	30 08       	mov	r8,0
80008d12:	58 0a       	cp.w	r10,0
80008d14:	cf 71       	brne	80008d02 <memmove+0x28>
80008d16:	d8 02       	popm	pc

80008d18 <__malloc_lock>:
80008d18:	5e fc       	retal	r12

80008d1a <__malloc_unlock>:
80008d1a:	5e fc       	retal	r12

80008d1c <__hi0bits>:
80008d1c:	18 98       	mov	r8,r12
80008d1e:	e0 1c 00 00 	andl	r12,0x0
80008d22:	f0 09 15 10 	lsl	r9,r8,0x10
80008d26:	58 0c       	cp.w	r12,0
80008d28:	f2 08 17 00 	moveq	r8,r9
80008d2c:	f9 bc 00 10 	moveq	r12,16
80008d30:	f9 bc 01 00 	movne	r12,0
80008d34:	10 9a       	mov	r10,r8
80008d36:	f0 09 15 08 	lsl	r9,r8,0x8
80008d3a:	e6 1a ff 00 	andh	r10,0xff00,COH
80008d3e:	f7 bc 00 f8 	subeq	r12,-8
80008d42:	f2 08 17 00 	moveq	r8,r9
80008d46:	10 9a       	mov	r10,r8
80008d48:	f0 09 15 04 	lsl	r9,r8,0x4
80008d4c:	e6 1a f0 00 	andh	r10,0xf000,COH
80008d50:	f7 bc 00 fc 	subeq	r12,-4
80008d54:	f2 08 17 00 	moveq	r8,r9
80008d58:	10 9a       	mov	r10,r8
80008d5a:	f0 09 15 02 	lsl	r9,r8,0x2
80008d5e:	e6 1a c0 00 	andh	r10,0xc000,COH
80008d62:	f7 bc 00 fe 	subeq	r12,-2
80008d66:	f2 08 17 00 	moveq	r8,r9
80008d6a:	58 08       	cp.w	r8,0
80008d6c:	5e 5c       	retlt	r12
80008d6e:	ed b8 00 1e 	bld	r8,0x1e
80008d72:	f9 bc 01 20 	movne	r12,32
80008d76:	f7 bc 00 ff 	subeq	r12,-1
80008d7a:	5e fc       	retal	r12

80008d7c <__lo0bits>:
80008d7c:	18 99       	mov	r9,r12
80008d7e:	78 08       	ld.w	r8,r12[0x0]
80008d80:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80008d84:	c1 50       	breq	80008dae <__lo0bits+0x32>
80008d86:	ed b8 00 00 	bld	r8,0x0
80008d8a:	c0 21       	brne	80008d8e <__lo0bits+0x12>
80008d8c:	5e fd       	retal	0
80008d8e:	10 9b       	mov	r11,r8
80008d90:	f0 0a 16 01 	lsr	r10,r8,0x1
80008d94:	e2 1b 00 02 	andl	r11,0x2,COH
80008d98:	a3 88       	lsr	r8,0x2
80008d9a:	58 0b       	cp.w	r11,0
80008d9c:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008da0:	f9 bc 01 01 	movne	r12,1
80008da4:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80008da8:	f9 bc 00 02 	moveq	r12,2
80008dac:	5e fc       	retal	r12
80008dae:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008db2:	f0 0b 16 10 	lsr	r11,r8,0x10
80008db6:	58 0a       	cp.w	r10,0
80008db8:	f6 08 17 00 	moveq	r8,r11
80008dbc:	f9 bc 00 10 	moveq	r12,16
80008dc0:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80008dc4:	f0 0a 16 08 	lsr	r10,r8,0x8
80008dc8:	58 0b       	cp.w	r11,0
80008dca:	f7 bc 00 f8 	subeq	r12,-8
80008dce:	f4 08 17 00 	moveq	r8,r10
80008dd2:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80008dd6:	f0 0a 16 04 	lsr	r10,r8,0x4
80008dda:	58 0b       	cp.w	r11,0
80008ddc:	f7 bc 00 fc 	subeq	r12,-4
80008de0:	f4 08 17 00 	moveq	r8,r10
80008de4:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80008de8:	f0 0a 16 02 	lsr	r10,r8,0x2
80008dec:	58 0b       	cp.w	r11,0
80008dee:	f7 bc 00 fe 	subeq	r12,-2
80008df2:	f4 08 17 00 	moveq	r8,r10
80008df6:	ed b8 00 00 	bld	r8,0x0
80008dfa:	c0 60       	breq	80008e06 <__lo0bits+0x8a>
80008dfc:	a1 98       	lsr	r8,0x1
80008dfe:	c0 31       	brne	80008e04 <__lo0bits+0x88>
80008e00:	32 0c       	mov	r12,32
80008e02:	5e fc       	retal	r12
80008e04:	2f fc       	sub	r12,-1
80008e06:	93 08       	st.w	r9[0x0],r8
80008e08:	5e fc       	retal	r12

80008e0a <__mcmp>:
80008e0a:	d4 01       	pushm	lr
80008e0c:	18 98       	mov	r8,r12
80008e0e:	76 49       	ld.w	r9,r11[0x10]
80008e10:	78 4c       	ld.w	r12,r12[0x10]
80008e12:	12 1c       	sub	r12,r9
80008e14:	c1 31       	brne	80008e3a <__mcmp+0x30>
80008e16:	2f b9       	sub	r9,-5
80008e18:	a3 69       	lsl	r9,0x2
80008e1a:	12 0b       	add	r11,r9
80008e1c:	f0 09 00 09 	add	r9,r8,r9
80008e20:	2e c8       	sub	r8,-20
80008e22:	13 4e       	ld.w	lr,--r9
80008e24:	17 4a       	ld.w	r10,--r11
80008e26:	14 3e       	cp.w	lr,r10
80008e28:	c0 60       	breq	80008e34 <__mcmp+0x2a>
80008e2a:	f9 bc 03 ff 	movlo	r12,-1
80008e2e:	f9 bc 02 01 	movhs	r12,1
80008e32:	d8 02       	popm	pc
80008e34:	10 39       	cp.w	r9,r8
80008e36:	fe 9b ff f6 	brhi	80008e22 <__mcmp+0x18>
80008e3a:	d8 02       	popm	pc

80008e3c <_Bfree>:
80008e3c:	d4 21       	pushm	r4-r7,lr
80008e3e:	18 97       	mov	r7,r12
80008e40:	16 95       	mov	r5,r11
80008e42:	78 96       	ld.w	r6,r12[0x24]
80008e44:	58 06       	cp.w	r6,0
80008e46:	c0 91       	brne	80008e58 <_Bfree+0x1c>
80008e48:	31 0c       	mov	r12,16
80008e4a:	fe b0 d7 23 	rcall	80003c90 <malloc>
80008e4e:	99 36       	st.w	r12[0xc],r6
80008e50:	8f 9c       	st.w	r7[0x24],r12
80008e52:	99 16       	st.w	r12[0x4],r6
80008e54:	99 26       	st.w	r12[0x8],r6
80008e56:	99 06       	st.w	r12[0x0],r6
80008e58:	58 05       	cp.w	r5,0
80008e5a:	c0 90       	breq	80008e6c <_Bfree+0x30>
80008e5c:	6a 19       	ld.w	r9,r5[0x4]
80008e5e:	6e 98       	ld.w	r8,r7[0x24]
80008e60:	70 38       	ld.w	r8,r8[0xc]
80008e62:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80008e66:	8b 0a       	st.w	r5[0x0],r10
80008e68:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008e6c:	d8 22       	popm	r4-r7,pc
80008e6e:	d7 03       	nop

80008e70 <_Balloc>:
80008e70:	d4 21       	pushm	r4-r7,lr
80008e72:	18 97       	mov	r7,r12
80008e74:	16 96       	mov	r6,r11
80008e76:	78 95       	ld.w	r5,r12[0x24]
80008e78:	58 05       	cp.w	r5,0
80008e7a:	c0 91       	brne	80008e8c <_Balloc+0x1c>
80008e7c:	31 0c       	mov	r12,16
80008e7e:	fe b0 d7 09 	rcall	80003c90 <malloc>
80008e82:	99 35       	st.w	r12[0xc],r5
80008e84:	8f 9c       	st.w	r7[0x24],r12
80008e86:	99 15       	st.w	r12[0x4],r5
80008e88:	99 25       	st.w	r12[0x8],r5
80008e8a:	99 05       	st.w	r12[0x0],r5
80008e8c:	6e 95       	ld.w	r5,r7[0x24]
80008e8e:	6a 38       	ld.w	r8,r5[0xc]
80008e90:	58 08       	cp.w	r8,0
80008e92:	c0 b1       	brne	80008ea8 <_Balloc+0x38>
80008e94:	31 0a       	mov	r10,16
80008e96:	30 4b       	mov	r11,4
80008e98:	0e 9c       	mov	r12,r7
80008e9a:	e0 a0 04 93 	rcall	800097c0 <_calloc_r>
80008e9e:	8b 3c       	st.w	r5[0xc],r12
80008ea0:	6e 98       	ld.w	r8,r7[0x24]
80008ea2:	70 3c       	ld.w	r12,r8[0xc]
80008ea4:	58 0c       	cp.w	r12,0
80008ea6:	c1 b0       	breq	80008edc <_Balloc+0x6c>
80008ea8:	6e 98       	ld.w	r8,r7[0x24]
80008eaa:	70 38       	ld.w	r8,r8[0xc]
80008eac:	f0 06 00 28 	add	r8,r8,r6<<0x2
80008eb0:	70 0c       	ld.w	r12,r8[0x0]
80008eb2:	58 0c       	cp.w	r12,0
80008eb4:	c0 40       	breq	80008ebc <_Balloc+0x4c>
80008eb6:	78 09       	ld.w	r9,r12[0x0]
80008eb8:	91 09       	st.w	r8[0x0],r9
80008eba:	c0 e8       	rjmp	80008ed6 <_Balloc+0x66>
80008ebc:	0e 9c       	mov	r12,r7
80008ebe:	30 17       	mov	r7,1
80008ec0:	0e 9b       	mov	r11,r7
80008ec2:	ee 06 09 47 	lsl	r7,r7,r6
80008ec6:	ee ca ff fb 	sub	r10,r7,-5
80008eca:	a3 6a       	lsl	r10,0x2
80008ecc:	e0 a0 04 7a 	rcall	800097c0 <_calloc_r>
80008ed0:	c0 60       	breq	80008edc <_Balloc+0x6c>
80008ed2:	99 16       	st.w	r12[0x4],r6
80008ed4:	99 27       	st.w	r12[0x8],r7
80008ed6:	30 08       	mov	r8,0
80008ed8:	99 38       	st.w	r12[0xc],r8
80008eda:	99 48       	st.w	r12[0x10],r8
80008edc:	d8 22       	popm	r4-r7,pc
80008ede:	d7 03       	nop

80008ee0 <__d2b>:
80008ee0:	d4 31       	pushm	r0-r7,lr
80008ee2:	20 2d       	sub	sp,8
80008ee4:	16 93       	mov	r3,r11
80008ee6:	12 96       	mov	r6,r9
80008ee8:	10 95       	mov	r5,r8
80008eea:	14 92       	mov	r2,r10
80008eec:	30 1b       	mov	r11,1
80008eee:	cc 1f       	rcall	80008e70 <_Balloc>
80008ef0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80008ef4:	50 09       	stdsp	sp[0x0],r9
80008ef6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80008efa:	b5 a9       	sbr	r9,0x14
80008efc:	f0 01 16 14 	lsr	r1,r8,0x14
80008f00:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008f04:	18 94       	mov	r4,r12
80008f06:	58 02       	cp.w	r2,0
80008f08:	c1 d0       	breq	80008f42 <__d2b+0x62>
80008f0a:	fa cc ff f8 	sub	r12,sp,-8
80008f0e:	18 d2       	st.w	--r12,r2
80008f10:	c3 6f       	rcall	80008d7c <__lo0bits>
80008f12:	40 18       	lddsp	r8,sp[0x4]
80008f14:	c0 d0       	breq	80008f2e <__d2b+0x4e>
80008f16:	40 09       	lddsp	r9,sp[0x0]
80008f18:	f8 0a 11 20 	rsub	r10,r12,32
80008f1c:	f2 0a 09 4a 	lsl	r10,r9,r10
80008f20:	f5 e8 10 08 	or	r8,r10,r8
80008f24:	89 58       	st.w	r4[0x14],r8
80008f26:	f2 0c 0a 49 	lsr	r9,r9,r12
80008f2a:	50 09       	stdsp	sp[0x0],r9
80008f2c:	c0 28       	rjmp	80008f30 <__d2b+0x50>
80008f2e:	89 58       	st.w	r4[0x14],r8
80008f30:	40 08       	lddsp	r8,sp[0x0]
80008f32:	58 08       	cp.w	r8,0
80008f34:	f9 b3 01 02 	movne	r3,2
80008f38:	f9 b3 00 01 	moveq	r3,1
80008f3c:	89 68       	st.w	r4[0x18],r8
80008f3e:	89 43       	st.w	r4[0x10],r3
80008f40:	c0 88       	rjmp	80008f50 <__d2b+0x70>
80008f42:	1a 9c       	mov	r12,sp
80008f44:	c1 cf       	rcall	80008d7c <__lo0bits>
80008f46:	30 13       	mov	r3,1
80008f48:	40 08       	lddsp	r8,sp[0x0]
80008f4a:	2e 0c       	sub	r12,-32
80008f4c:	89 43       	st.w	r4[0x10],r3
80008f4e:	89 58       	st.w	r4[0x14],r8
80008f50:	58 01       	cp.w	r1,0
80008f52:	c0 90       	breq	80008f64 <__d2b+0x84>
80008f54:	e2 c1 04 33 	sub	r1,r1,1075
80008f58:	18 01       	add	r1,r12
80008f5a:	8d 01       	st.w	r6[0x0],r1
80008f5c:	f8 0c 11 35 	rsub	r12,r12,53
80008f60:	8b 0c       	st.w	r5[0x0],r12
80008f62:	c0 c8       	rjmp	80008f7a <__d2b+0x9a>
80008f64:	e6 c8 ff fc 	sub	r8,r3,-4
80008f68:	f8 cc 04 32 	sub	r12,r12,1074
80008f6c:	a5 73       	lsl	r3,0x5
80008f6e:	8d 0c       	st.w	r6[0x0],r12
80008f70:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80008f74:	cd 4e       	rcall	80008d1c <__hi0bits>
80008f76:	18 13       	sub	r3,r12
80008f78:	8b 03       	st.w	r5[0x0],r3
80008f7a:	08 9c       	mov	r12,r4
80008f7c:	2f ed       	sub	sp,-8
80008f7e:	d8 32       	popm	r0-r7,pc

80008f80 <__mdiff>:
80008f80:	d4 31       	pushm	r0-r7,lr
80008f82:	74 48       	ld.w	r8,r10[0x10]
80008f84:	76 45       	ld.w	r5,r11[0x10]
80008f86:	16 97       	mov	r7,r11
80008f88:	14 96       	mov	r6,r10
80008f8a:	10 15       	sub	r5,r8
80008f8c:	c1 31       	brne	80008fb2 <__mdiff+0x32>
80008f8e:	2f b8       	sub	r8,-5
80008f90:	ee ce ff ec 	sub	lr,r7,-20
80008f94:	a3 68       	lsl	r8,0x2
80008f96:	f4 08 00 0b 	add	r11,r10,r8
80008f9a:	ee 08 00 08 	add	r8,r7,r8
80008f9e:	11 4a       	ld.w	r10,--r8
80008fa0:	17 49       	ld.w	r9,--r11
80008fa2:	12 3a       	cp.w	r10,r9
80008fa4:	c0 30       	breq	80008faa <__mdiff+0x2a>
80008fa6:	c0 e2       	brcc	80008fc2 <__mdiff+0x42>
80008fa8:	c0 78       	rjmp	80008fb6 <__mdiff+0x36>
80008faa:	1c 38       	cp.w	r8,lr
80008fac:	fe 9b ff f9 	brhi	80008f9e <__mdiff+0x1e>
80008fb0:	c4 98       	rjmp	80009042 <__mdiff+0xc2>
80008fb2:	58 05       	cp.w	r5,0
80008fb4:	c0 64       	brge	80008fc0 <__mdiff+0x40>
80008fb6:	0e 98       	mov	r8,r7
80008fb8:	30 15       	mov	r5,1
80008fba:	0c 97       	mov	r7,r6
80008fbc:	10 96       	mov	r6,r8
80008fbe:	c0 28       	rjmp	80008fc2 <__mdiff+0x42>
80008fc0:	30 05       	mov	r5,0
80008fc2:	6e 1b       	ld.w	r11,r7[0x4]
80008fc4:	c5 6f       	rcall	80008e70 <_Balloc>
80008fc6:	6e 49       	ld.w	r9,r7[0x10]
80008fc8:	6c 44       	ld.w	r4,r6[0x10]
80008fca:	99 35       	st.w	r12[0xc],r5
80008fcc:	2f b4       	sub	r4,-5
80008fce:	f2 c5 ff fb 	sub	r5,r9,-5
80008fd2:	ec 04 00 24 	add	r4,r6,r4<<0x2
80008fd6:	ee 05 00 25 	add	r5,r7,r5<<0x2
80008fda:	2e c6       	sub	r6,-20
80008fdc:	2e c7       	sub	r7,-20
80008fde:	f8 c8 ff ec 	sub	r8,r12,-20
80008fe2:	30 0a       	mov	r10,0
80008fe4:	0f 0e       	ld.w	lr,r7++
80008fe6:	0d 0b       	ld.w	r11,r6++
80008fe8:	fc 02 16 10 	lsr	r2,lr,0x10
80008fec:	f6 03 16 10 	lsr	r3,r11,0x10
80008ff0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008ff4:	e4 03 01 03 	sub	r3,r2,r3
80008ff8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008ffc:	fc 0b 01 0b 	sub	r11,lr,r11
80009000:	f6 0a 00 0a 	add	r10,r11,r10
80009004:	b0 1a       	st.h	r8[0x2],r10
80009006:	b1 4a       	asr	r10,0x10
80009008:	e6 0a 00 0a 	add	r10,r3,r10
8000900c:	b0 0a       	st.h	r8[0x0],r10
8000900e:	2f c8       	sub	r8,-4
80009010:	b1 4a       	asr	r10,0x10
80009012:	08 36       	cp.w	r6,r4
80009014:	ce 83       	brcs	80008fe4 <__mdiff+0x64>
80009016:	c0 d8       	rjmp	80009030 <__mdiff+0xb0>
80009018:	0f 0b       	ld.w	r11,r7++
8000901a:	f6 0e 16 10 	lsr	lr,r11,0x10
8000901e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009022:	16 0a       	add	r10,r11
80009024:	b0 1a       	st.h	r8[0x2],r10
80009026:	b1 4a       	asr	r10,0x10
80009028:	1c 0a       	add	r10,lr
8000902a:	b0 0a       	st.h	r8[0x0],r10
8000902c:	2f c8       	sub	r8,-4
8000902e:	b1 4a       	asr	r10,0x10
80009030:	0a 37       	cp.w	r7,r5
80009032:	cf 33       	brcs	80009018 <__mdiff+0x98>
80009034:	c0 28       	rjmp	80009038 <__mdiff+0xb8>
80009036:	20 19       	sub	r9,1
80009038:	11 4a       	ld.w	r10,--r8
8000903a:	58 0a       	cp.w	r10,0
8000903c:	cf d0       	breq	80009036 <__mdiff+0xb6>
8000903e:	99 49       	st.w	r12[0x10],r9
80009040:	d8 32       	popm	r0-r7,pc
80009042:	30 0b       	mov	r11,0
80009044:	c1 6f       	rcall	80008e70 <_Balloc>
80009046:	30 18       	mov	r8,1
80009048:	99 48       	st.w	r12[0x10],r8
8000904a:	30 08       	mov	r8,0
8000904c:	99 58       	st.w	r12[0x14],r8
8000904e:	d8 32       	popm	r0-r7,pc

80009050 <__lshift>:
80009050:	d4 31       	pushm	r0-r7,lr
80009052:	16 97       	mov	r7,r11
80009054:	76 46       	ld.w	r6,r11[0x10]
80009056:	f4 02 14 05 	asr	r2,r10,0x5
8000905a:	2f f6       	sub	r6,-1
8000905c:	14 93       	mov	r3,r10
8000905e:	18 94       	mov	r4,r12
80009060:	04 06       	add	r6,r2
80009062:	76 1b       	ld.w	r11,r11[0x4]
80009064:	6e 28       	ld.w	r8,r7[0x8]
80009066:	c0 38       	rjmp	8000906c <__lshift+0x1c>
80009068:	2f fb       	sub	r11,-1
8000906a:	a1 78       	lsl	r8,0x1
8000906c:	10 36       	cp.w	r6,r8
8000906e:	fe 99 ff fd 	brgt	80009068 <__lshift+0x18>
80009072:	08 9c       	mov	r12,r4
80009074:	cf ee       	rcall	80008e70 <_Balloc>
80009076:	30 09       	mov	r9,0
80009078:	18 95       	mov	r5,r12
8000907a:	f8 c8 ff ec 	sub	r8,r12,-20
8000907e:	12 9a       	mov	r10,r9
80009080:	c0 38       	rjmp	80009086 <__lshift+0x36>
80009082:	10 aa       	st.w	r8++,r10
80009084:	2f f9       	sub	r9,-1
80009086:	04 39       	cp.w	r9,r2
80009088:	cf d5       	brlt	80009082 <__lshift+0x32>
8000908a:	6e 4b       	ld.w	r11,r7[0x10]
8000908c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80009090:	2f bb       	sub	r11,-5
80009092:	ee c9 ff ec 	sub	r9,r7,-20
80009096:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000909a:	58 03       	cp.w	r3,0
8000909c:	c1 30       	breq	800090c2 <__lshift+0x72>
8000909e:	e6 0c 11 20 	rsub	r12,r3,32
800090a2:	30 0a       	mov	r10,0
800090a4:	72 02       	ld.w	r2,r9[0x0]
800090a6:	e4 03 09 42 	lsl	r2,r2,r3
800090aa:	04 4a       	or	r10,r2
800090ac:	10 aa       	st.w	r8++,r10
800090ae:	13 0a       	ld.w	r10,r9++
800090b0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800090b4:	16 39       	cp.w	r9,r11
800090b6:	cf 73       	brcs	800090a4 <__lshift+0x54>
800090b8:	91 0a       	st.w	r8[0x0],r10
800090ba:	58 0a       	cp.w	r10,0
800090bc:	c0 70       	breq	800090ca <__lshift+0x7a>
800090be:	2f f6       	sub	r6,-1
800090c0:	c0 58       	rjmp	800090ca <__lshift+0x7a>
800090c2:	13 0a       	ld.w	r10,r9++
800090c4:	10 aa       	st.w	r8++,r10
800090c6:	16 39       	cp.w	r9,r11
800090c8:	cf d3       	brcs	800090c2 <__lshift+0x72>
800090ca:	08 9c       	mov	r12,r4
800090cc:	20 16       	sub	r6,1
800090ce:	0e 9b       	mov	r11,r7
800090d0:	8b 46       	st.w	r5[0x10],r6
800090d2:	cb 5e       	rcall	80008e3c <_Bfree>
800090d4:	0a 9c       	mov	r12,r5
800090d6:	d8 32       	popm	r0-r7,pc

800090d8 <__multiply>:
800090d8:	d4 31       	pushm	r0-r7,lr
800090da:	20 2d       	sub	sp,8
800090dc:	76 49       	ld.w	r9,r11[0x10]
800090de:	74 48       	ld.w	r8,r10[0x10]
800090e0:	16 96       	mov	r6,r11
800090e2:	14 95       	mov	r5,r10
800090e4:	10 39       	cp.w	r9,r8
800090e6:	ec 08 17 50 	movlt	r8,r6
800090ea:	ea 06 17 50 	movlt	r6,r5
800090ee:	f0 05 17 50 	movlt	r5,r8
800090f2:	6c 28       	ld.w	r8,r6[0x8]
800090f4:	76 43       	ld.w	r3,r11[0x10]
800090f6:	74 42       	ld.w	r2,r10[0x10]
800090f8:	76 1b       	ld.w	r11,r11[0x4]
800090fa:	e4 03 00 07 	add	r7,r2,r3
800090fe:	10 37       	cp.w	r7,r8
80009100:	f7 bb 09 ff 	subgt	r11,-1
80009104:	cb 6e       	rcall	80008e70 <_Balloc>
80009106:	ee c4 ff fb 	sub	r4,r7,-5
8000910a:	f8 c9 ff ec 	sub	r9,r12,-20
8000910e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80009112:	30 0a       	mov	r10,0
80009114:	12 98       	mov	r8,r9
80009116:	c0 28       	rjmp	8000911a <__multiply+0x42>
80009118:	10 aa       	st.w	r8++,r10
8000911a:	08 38       	cp.w	r8,r4
8000911c:	cf e3       	brcs	80009118 <__multiply+0x40>
8000911e:	2f b3       	sub	r3,-5
80009120:	2f b2       	sub	r2,-5
80009122:	ec 03 00 23 	add	r3,r6,r3<<0x2
80009126:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000912a:	ec cb ff ec 	sub	r11,r6,-20
8000912e:	50 12       	stdsp	sp[0x4],r2
80009130:	ea ca ff ec 	sub	r10,r5,-20
80009134:	c4 48       	rjmp	800091bc <__multiply+0xe4>
80009136:	94 95       	ld.uh	r5,r10[0x2]
80009138:	58 05       	cp.w	r5,0
8000913a:	c2 00       	breq	8000917a <__multiply+0xa2>
8000913c:	12 98       	mov	r8,r9
8000913e:	16 96       	mov	r6,r11
80009140:	30 0e       	mov	lr,0
80009142:	50 09       	stdsp	sp[0x0],r9
80009144:	0d 02       	ld.w	r2,r6++
80009146:	e4 00 16 10 	lsr	r0,r2,0x10
8000914a:	70 01       	ld.w	r1,r8[0x0]
8000914c:	70 09       	ld.w	r9,r8[0x0]
8000914e:	b1 81       	lsr	r1,0x10
80009150:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80009154:	e0 05 03 41 	mac	r1,r0,r5
80009158:	ab 32       	mul	r2,r5
8000915a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000915e:	00 02       	add	r2,r0
80009160:	e4 0e 00 0e 	add	lr,r2,lr
80009164:	b0 1e       	st.h	r8[0x2],lr
80009166:	b1 8e       	lsr	lr,0x10
80009168:	1c 01       	add	r1,lr
8000916a:	b0 01       	st.h	r8[0x0],r1
8000916c:	e2 0e 16 10 	lsr	lr,r1,0x10
80009170:	2f c8       	sub	r8,-4
80009172:	06 36       	cp.w	r6,r3
80009174:	ce 83       	brcs	80009144 <__multiply+0x6c>
80009176:	40 09       	lddsp	r9,sp[0x0]
80009178:	91 0e       	st.w	r8[0x0],lr
8000917a:	94 86       	ld.uh	r6,r10[0x0]
8000917c:	58 06       	cp.w	r6,0
8000917e:	c1 d0       	breq	800091b8 <__multiply+0xe0>
80009180:	72 02       	ld.w	r2,r9[0x0]
80009182:	12 98       	mov	r8,r9
80009184:	16 9e       	mov	lr,r11
80009186:	30 05       	mov	r5,0
80009188:	b0 12       	st.h	r8[0x2],r2
8000918a:	1d 01       	ld.w	r1,lr++
8000918c:	90 82       	ld.uh	r2,r8[0x0]
8000918e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80009192:	ad 30       	mul	r0,r6
80009194:	e0 02 00 02 	add	r2,r0,r2
80009198:	e4 05 00 05 	add	r5,r2,r5
8000919c:	b0 05       	st.h	r8[0x0],r5
8000919e:	b1 85       	lsr	r5,0x10
800091a0:	b1 81       	lsr	r1,0x10
800091a2:	2f c8       	sub	r8,-4
800091a4:	ad 31       	mul	r1,r6
800091a6:	90 92       	ld.uh	r2,r8[0x2]
800091a8:	e2 02 00 02 	add	r2,r1,r2
800091ac:	0a 02       	add	r2,r5
800091ae:	e4 05 16 10 	lsr	r5,r2,0x10
800091b2:	06 3e       	cp.w	lr,r3
800091b4:	ce a3       	brcs	80009188 <__multiply+0xb0>
800091b6:	91 02       	st.w	r8[0x0],r2
800091b8:	2f ca       	sub	r10,-4
800091ba:	2f c9       	sub	r9,-4
800091bc:	40 18       	lddsp	r8,sp[0x4]
800091be:	10 3a       	cp.w	r10,r8
800091c0:	cb b3       	brcs	80009136 <__multiply+0x5e>
800091c2:	c0 28       	rjmp	800091c6 <__multiply+0xee>
800091c4:	20 17       	sub	r7,1
800091c6:	58 07       	cp.w	r7,0
800091c8:	e0 8a 00 05 	brle	800091d2 <__multiply+0xfa>
800091cc:	09 48       	ld.w	r8,--r4
800091ce:	58 08       	cp.w	r8,0
800091d0:	cf a0       	breq	800091c4 <__multiply+0xec>
800091d2:	99 47       	st.w	r12[0x10],r7
800091d4:	2f ed       	sub	sp,-8
800091d6:	d8 32       	popm	r0-r7,pc

800091d8 <__i2b>:
800091d8:	d4 21       	pushm	r4-r7,lr
800091da:	16 97       	mov	r7,r11
800091dc:	30 1b       	mov	r11,1
800091de:	c4 9e       	rcall	80008e70 <_Balloc>
800091e0:	30 19       	mov	r9,1
800091e2:	99 57       	st.w	r12[0x14],r7
800091e4:	99 49       	st.w	r12[0x10],r9
800091e6:	d8 22       	popm	r4-r7,pc

800091e8 <__multadd>:
800091e8:	d4 31       	pushm	r0-r7,lr
800091ea:	30 08       	mov	r8,0
800091ec:	12 95       	mov	r5,r9
800091ee:	16 97       	mov	r7,r11
800091f0:	18 96       	mov	r6,r12
800091f2:	76 44       	ld.w	r4,r11[0x10]
800091f4:	f6 c9 ff ec 	sub	r9,r11,-20
800091f8:	72 0b       	ld.w	r11,r9[0x0]
800091fa:	f6 0c 16 10 	lsr	r12,r11,0x10
800091fe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009202:	f4 0c 02 4c 	mul	r12,r10,r12
80009206:	f4 0b 03 45 	mac	r5,r10,r11
8000920a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000920e:	b1 85       	lsr	r5,0x10
80009210:	18 05       	add	r5,r12
80009212:	ea 0c 15 10 	lsl	r12,r5,0x10
80009216:	f8 0b 00 0b 	add	r11,r12,r11
8000921a:	12 ab       	st.w	r9++,r11
8000921c:	2f f8       	sub	r8,-1
8000921e:	b1 85       	lsr	r5,0x10
80009220:	08 38       	cp.w	r8,r4
80009222:	ce b5       	brlt	800091f8 <__multadd+0x10>
80009224:	58 05       	cp.w	r5,0
80009226:	c1 c0       	breq	8000925e <__multadd+0x76>
80009228:	6e 28       	ld.w	r8,r7[0x8]
8000922a:	10 34       	cp.w	r4,r8
8000922c:	c1 35       	brlt	80009252 <__multadd+0x6a>
8000922e:	6e 1b       	ld.w	r11,r7[0x4]
80009230:	0c 9c       	mov	r12,r6
80009232:	2f fb       	sub	r11,-1
80009234:	c1 ee       	rcall	80008e70 <_Balloc>
80009236:	6e 4a       	ld.w	r10,r7[0x10]
80009238:	ee cb ff f4 	sub	r11,r7,-12
8000923c:	18 93       	mov	r3,r12
8000923e:	2f ea       	sub	r10,-2
80009240:	2f 4c       	sub	r12,-12
80009242:	a3 6a       	lsl	r10,0x2
80009244:	fe b0 dd f0 	rcall	80004e24 <memcpy>
80009248:	0e 9b       	mov	r11,r7
8000924a:	0c 9c       	mov	r12,r6
8000924c:	fe b0 fd f8 	rcall	80008e3c <_Bfree>
80009250:	06 97       	mov	r7,r3
80009252:	e8 c8 ff ff 	sub	r8,r4,-1
80009256:	2f b4       	sub	r4,-5
80009258:	8f 48       	st.w	r7[0x10],r8
8000925a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000925e:	0e 9c       	mov	r12,r7
80009260:	d8 32       	popm	r0-r7,pc
80009262:	d7 03       	nop

80009264 <__pow5mult>:
80009264:	d4 31       	pushm	r0-r7,lr
80009266:	14 96       	mov	r6,r10
80009268:	18 97       	mov	r7,r12
8000926a:	16 94       	mov	r4,r11
8000926c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80009270:	c0 90       	breq	80009282 <__pow5mult+0x1e>
80009272:	20 18       	sub	r8,1
80009274:	fe c9 e0 24 	sub	r9,pc,-8156
80009278:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000927c:	30 09       	mov	r9,0
8000927e:	cb 5f       	rcall	800091e8 <__multadd>
80009280:	18 94       	mov	r4,r12
80009282:	a3 46       	asr	r6,0x2
80009284:	c3 40       	breq	800092ec <__pow5mult+0x88>
80009286:	6e 95       	ld.w	r5,r7[0x24]
80009288:	58 05       	cp.w	r5,0
8000928a:	c0 91       	brne	8000929c <__pow5mult+0x38>
8000928c:	31 0c       	mov	r12,16
8000928e:	fe b0 d5 01 	rcall	80003c90 <malloc>
80009292:	99 35       	st.w	r12[0xc],r5
80009294:	8f 9c       	st.w	r7[0x24],r12
80009296:	99 15       	st.w	r12[0x4],r5
80009298:	99 25       	st.w	r12[0x8],r5
8000929a:	99 05       	st.w	r12[0x0],r5
8000929c:	6e 93       	ld.w	r3,r7[0x24]
8000929e:	66 25       	ld.w	r5,r3[0x8]
800092a0:	58 05       	cp.w	r5,0
800092a2:	c0 c1       	brne	800092ba <__pow5mult+0x56>
800092a4:	e0 6b 02 71 	mov	r11,625
800092a8:	0e 9c       	mov	r12,r7
800092aa:	c9 7f       	rcall	800091d8 <__i2b>
800092ac:	87 2c       	st.w	r3[0x8],r12
800092ae:	30 08       	mov	r8,0
800092b0:	18 95       	mov	r5,r12
800092b2:	99 08       	st.w	r12[0x0],r8
800092b4:	c0 38       	rjmp	800092ba <__pow5mult+0x56>
800092b6:	06 9c       	mov	r12,r3
800092b8:	18 95       	mov	r5,r12
800092ba:	ed b6 00 00 	bld	r6,0x0
800092be:	c0 b1       	brne	800092d4 <__pow5mult+0x70>
800092c0:	08 9b       	mov	r11,r4
800092c2:	0a 9a       	mov	r10,r5
800092c4:	0e 9c       	mov	r12,r7
800092c6:	c0 9f       	rcall	800090d8 <__multiply>
800092c8:	08 9b       	mov	r11,r4
800092ca:	18 93       	mov	r3,r12
800092cc:	0e 9c       	mov	r12,r7
800092ce:	06 94       	mov	r4,r3
800092d0:	fe b0 fd b6 	rcall	80008e3c <_Bfree>
800092d4:	a1 56       	asr	r6,0x1
800092d6:	c0 b0       	breq	800092ec <__pow5mult+0x88>
800092d8:	6a 03       	ld.w	r3,r5[0x0]
800092da:	58 03       	cp.w	r3,0
800092dc:	ce d1       	brne	800092b6 <__pow5mult+0x52>
800092de:	0a 9a       	mov	r10,r5
800092e0:	0a 9b       	mov	r11,r5
800092e2:	0e 9c       	mov	r12,r7
800092e4:	cf ae       	rcall	800090d8 <__multiply>
800092e6:	8b 0c       	st.w	r5[0x0],r12
800092e8:	99 03       	st.w	r12[0x0],r3
800092ea:	ce 7b       	rjmp	800092b8 <__pow5mult+0x54>
800092ec:	08 9c       	mov	r12,r4
800092ee:	d8 32       	popm	r0-r7,pc

800092f0 <_realloc_r>:
800092f0:	d4 31       	pushm	r0-r7,lr
800092f2:	20 1d       	sub	sp,4
800092f4:	16 94       	mov	r4,r11
800092f6:	18 92       	mov	r2,r12
800092f8:	14 9b       	mov	r11,r10
800092fa:	58 04       	cp.w	r4,0
800092fc:	c0 51       	brne	80009306 <_realloc_r+0x16>
800092fe:	fe b0 fa cb 	rcall	80008894 <_malloc_r>
80009302:	18 95       	mov	r5,r12
80009304:	c5 39       	rjmp	800095aa <_realloc_r+0x2ba>
80009306:	50 0a       	stdsp	sp[0x0],r10
80009308:	fe b0 fd 08 	rcall	80008d18 <__malloc_lock>
8000930c:	40 0b       	lddsp	r11,sp[0x0]
8000930e:	f6 c8 ff f5 	sub	r8,r11,-11
80009312:	e8 c1 00 08 	sub	r1,r4,8
80009316:	10 96       	mov	r6,r8
80009318:	62 1c       	ld.w	r12,r1[0x4]
8000931a:	e0 16 ff f8 	andl	r6,0xfff8
8000931e:	59 68       	cp.w	r8,22
80009320:	f9 b6 08 10 	movls	r6,16
80009324:	16 36       	cp.w	r6,r11
80009326:	5f 38       	srlo	r8
80009328:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000932c:	c0 50       	breq	80009336 <_realloc_r+0x46>
8000932e:	30 c8       	mov	r8,12
80009330:	30 05       	mov	r5,0
80009332:	85 38       	st.w	r2[0xc],r8
80009334:	c3 b9       	rjmp	800095aa <_realloc_r+0x2ba>
80009336:	18 90       	mov	r0,r12
80009338:	e0 10 ff fc 	andl	r0,0xfffc
8000933c:	0c 30       	cp.w	r0,r6
8000933e:	e0 84 01 0b 	brge	80009554 <_realloc_r+0x264>
80009342:	e0 68 00 fc 	mov	r8,252
80009346:	e2 00 00 09 	add	r9,r1,r0
8000934a:	70 25       	ld.w	r5,r8[0x8]
8000934c:	0a 39       	cp.w	r9,r5
8000934e:	c0 90       	breq	80009360 <_realloc_r+0x70>
80009350:	72 1a       	ld.w	r10,r9[0x4]
80009352:	a1 ca       	cbr	r10,0x0
80009354:	f2 0a 00 0a 	add	r10,r9,r10
80009358:	74 1a       	ld.w	r10,r10[0x4]
8000935a:	ed ba 00 00 	bld	r10,0x0
8000935e:	c2 20       	breq	800093a2 <_realloc_r+0xb2>
80009360:	72 1a       	ld.w	r10,r9[0x4]
80009362:	e0 1a ff fc 	andl	r10,0xfffc
80009366:	f4 00 00 03 	add	r3,r10,r0
8000936a:	0a 39       	cp.w	r9,r5
8000936c:	c1 31       	brne	80009392 <_realloc_r+0xa2>
8000936e:	ec c7 ff f0 	sub	r7,r6,-16
80009372:	0e 33       	cp.w	r3,r7
80009374:	c1 95       	brlt	800093a6 <_realloc_r+0xb6>
80009376:	e2 06 00 09 	add	r9,r1,r6
8000937a:	0c 13       	sub	r3,r6
8000937c:	a1 a3       	sbr	r3,0x0
8000937e:	93 13       	st.w	r9[0x4],r3
80009380:	91 29       	st.w	r8[0x8],r9
80009382:	04 9c       	mov	r12,r2
80009384:	62 18       	ld.w	r8,r1[0x4]
80009386:	08 95       	mov	r5,r4
80009388:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000938c:	10 46       	or	r6,r8
8000938e:	83 16       	st.w	r1[0x4],r6
80009390:	c0 b9       	rjmp	800095a6 <_realloc_r+0x2b6>
80009392:	0c 33       	cp.w	r3,r6
80009394:	c0 95       	brlt	800093a6 <_realloc_r+0xb6>
80009396:	72 28       	ld.w	r8,r9[0x8]
80009398:	02 97       	mov	r7,r1
8000939a:	72 39       	ld.w	r9,r9[0xc]
8000939c:	93 28       	st.w	r9[0x8],r8
8000939e:	91 39       	st.w	r8[0xc],r9
800093a0:	cd c8       	rjmp	80009558 <_realloc_r+0x268>
800093a2:	30 0a       	mov	r10,0
800093a4:	14 99       	mov	r9,r10
800093a6:	ed bc 00 00 	bld	r12,0x0
800093aa:	e0 80 00 95 	breq	800094d4 <_realloc_r+0x1e4>
800093ae:	62 07       	ld.w	r7,r1[0x0]
800093b0:	e2 07 01 07 	sub	r7,r1,r7
800093b4:	6e 1c       	ld.w	r12,r7[0x4]
800093b6:	e0 1c ff fc 	andl	r12,0xfffc
800093ba:	58 09       	cp.w	r9,0
800093bc:	c5 60       	breq	80009468 <_realloc_r+0x178>
800093be:	f8 00 00 03 	add	r3,r12,r0
800093c2:	0a 39       	cp.w	r9,r5
800093c4:	c4 81       	brne	80009454 <_realloc_r+0x164>
800093c6:	14 03       	add	r3,r10
800093c8:	ec c9 ff f0 	sub	r9,r6,-16
800093cc:	12 33       	cp.w	r3,r9
800093ce:	c4 d5       	brlt	80009468 <_realloc_r+0x178>
800093d0:	6e 3a       	ld.w	r10,r7[0xc]
800093d2:	6e 29       	ld.w	r9,r7[0x8]
800093d4:	95 29       	st.w	r10[0x8],r9
800093d6:	93 3a       	st.w	r9[0xc],r10
800093d8:	ee c5 ff f8 	sub	r5,r7,-8
800093dc:	e0 ca 00 04 	sub	r10,r0,4
800093e0:	e0 4a 00 24 	cp.w	r10,36
800093e4:	e0 8b 00 25 	brhi	8000942e <_realloc_r+0x13e>
800093e8:	0a 99       	mov	r9,r5
800093ea:	59 3a       	cp.w	r10,19
800093ec:	e0 88 00 1a 	brls	80009420 <_realloc_r+0x130>
800093f0:	09 09       	ld.w	r9,r4++
800093f2:	8b 09       	st.w	r5[0x0],r9
800093f4:	09 09       	ld.w	r9,r4++
800093f6:	8f 39       	st.w	r7[0xc],r9
800093f8:	ee c9 ff f0 	sub	r9,r7,-16
800093fc:	59 ba       	cp.w	r10,27
800093fe:	e0 88 00 11 	brls	80009420 <_realloc_r+0x130>
80009402:	09 0b       	ld.w	r11,r4++
80009404:	93 0b       	st.w	r9[0x0],r11
80009406:	09 09       	ld.w	r9,r4++
80009408:	8f 59       	st.w	r7[0x14],r9
8000940a:	ee c9 ff e8 	sub	r9,r7,-24
8000940e:	e0 4a 00 24 	cp.w	r10,36
80009412:	c0 71       	brne	80009420 <_realloc_r+0x130>
80009414:	09 0a       	ld.w	r10,r4++
80009416:	93 0a       	st.w	r9[0x0],r10
80009418:	ee c9 ff e0 	sub	r9,r7,-32
8000941c:	09 0a       	ld.w	r10,r4++
8000941e:	8f 7a       	st.w	r7[0x1c],r10
80009420:	09 0a       	ld.w	r10,r4++
80009422:	12 aa       	st.w	r9++,r10
80009424:	68 0a       	ld.w	r10,r4[0x0]
80009426:	93 0a       	st.w	r9[0x0],r10
80009428:	68 1a       	ld.w	r10,r4[0x4]
8000942a:	93 1a       	st.w	r9[0x4],r10
8000942c:	c0 78       	rjmp	8000943a <_realloc_r+0x14a>
8000942e:	50 08       	stdsp	sp[0x0],r8
80009430:	08 9b       	mov	r11,r4
80009432:	0a 9c       	mov	r12,r5
80009434:	fe b0 fc 53 	rcall	80008cda <memmove>
80009438:	40 08       	lddsp	r8,sp[0x0]
8000943a:	ee 06 00 09 	add	r9,r7,r6
8000943e:	0c 13       	sub	r3,r6
80009440:	a1 a3       	sbr	r3,0x0
80009442:	93 13       	st.w	r9[0x4],r3
80009444:	91 29       	st.w	r8[0x8],r9
80009446:	04 9c       	mov	r12,r2
80009448:	6e 18       	ld.w	r8,r7[0x4]
8000944a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000944e:	10 46       	or	r6,r8
80009450:	8f 16       	st.w	r7[0x4],r6
80009452:	ca a8       	rjmp	800095a6 <_realloc_r+0x2b6>
80009454:	14 03       	add	r3,r10
80009456:	0c 33       	cp.w	r3,r6
80009458:	c0 85       	brlt	80009468 <_realloc_r+0x178>
8000945a:	72 28       	ld.w	r8,r9[0x8]
8000945c:	72 39       	ld.w	r9,r9[0xc]
8000945e:	93 28       	st.w	r9[0x8],r8
80009460:	91 39       	st.w	r8[0xc],r9
80009462:	6e 28       	ld.w	r8,r7[0x8]
80009464:	6e 39       	ld.w	r9,r7[0xc]
80009466:	c0 78       	rjmp	80009474 <_realloc_r+0x184>
80009468:	f8 00 00 03 	add	r3,r12,r0
8000946c:	0c 33       	cp.w	r3,r6
8000946e:	c3 35       	brlt	800094d4 <_realloc_r+0x1e4>
80009470:	6e 39       	ld.w	r9,r7[0xc]
80009472:	6e 28       	ld.w	r8,r7[0x8]
80009474:	93 28       	st.w	r9[0x8],r8
80009476:	91 39       	st.w	r8[0xc],r9
80009478:	e0 ca 00 04 	sub	r10,r0,4
8000947c:	ee cc ff f8 	sub	r12,r7,-8
80009480:	e0 4a 00 24 	cp.w	r10,36
80009484:	e0 8b 00 24 	brhi	800094cc <_realloc_r+0x1dc>
80009488:	59 3a       	cp.w	r10,19
8000948a:	e0 88 00 1a 	brls	800094be <_realloc_r+0x1ce>
8000948e:	09 08       	ld.w	r8,r4++
80009490:	99 08       	st.w	r12[0x0],r8
80009492:	09 08       	ld.w	r8,r4++
80009494:	8f 38       	st.w	r7[0xc],r8
80009496:	ee cc ff f0 	sub	r12,r7,-16
8000949a:	59 ba       	cp.w	r10,27
8000949c:	e0 88 00 11 	brls	800094be <_realloc_r+0x1ce>
800094a0:	09 08       	ld.w	r8,r4++
800094a2:	99 08       	st.w	r12[0x0],r8
800094a4:	09 08       	ld.w	r8,r4++
800094a6:	8f 58       	st.w	r7[0x14],r8
800094a8:	ee cc ff e8 	sub	r12,r7,-24
800094ac:	e0 4a 00 24 	cp.w	r10,36
800094b0:	c0 71       	brne	800094be <_realloc_r+0x1ce>
800094b2:	09 08       	ld.w	r8,r4++
800094b4:	99 08       	st.w	r12[0x0],r8
800094b6:	ee cc ff e0 	sub	r12,r7,-32
800094ba:	09 08       	ld.w	r8,r4++
800094bc:	8f 78       	st.w	r7[0x1c],r8
800094be:	09 08       	ld.w	r8,r4++
800094c0:	18 a8       	st.w	r12++,r8
800094c2:	68 08       	ld.w	r8,r4[0x0]
800094c4:	99 08       	st.w	r12[0x0],r8
800094c6:	68 18       	ld.w	r8,r4[0x4]
800094c8:	99 18       	st.w	r12[0x4],r8
800094ca:	c4 78       	rjmp	80009558 <_realloc_r+0x268>
800094cc:	08 9b       	mov	r11,r4
800094ce:	fe b0 fc 06 	rcall	80008cda <memmove>
800094d2:	c4 38       	rjmp	80009558 <_realloc_r+0x268>
800094d4:	04 9c       	mov	r12,r2
800094d6:	fe b0 f9 df 	rcall	80008894 <_malloc_r>
800094da:	18 95       	mov	r5,r12
800094dc:	c3 a0       	breq	80009550 <_realloc_r+0x260>
800094de:	62 18       	ld.w	r8,r1[0x4]
800094e0:	f8 c9 00 08 	sub	r9,r12,8
800094e4:	a1 c8       	cbr	r8,0x0
800094e6:	e2 08 00 08 	add	r8,r1,r8
800094ea:	10 39       	cp.w	r9,r8
800094ec:	c0 71       	brne	800094fa <_realloc_r+0x20a>
800094ee:	72 13       	ld.w	r3,r9[0x4]
800094f0:	02 97       	mov	r7,r1
800094f2:	e0 13 ff fc 	andl	r3,0xfffc
800094f6:	00 03       	add	r3,r0
800094f8:	c3 08       	rjmp	80009558 <_realloc_r+0x268>
800094fa:	e0 ca 00 04 	sub	r10,r0,4
800094fe:	e0 4a 00 24 	cp.w	r10,36
80009502:	e0 8b 00 20 	brhi	80009542 <_realloc_r+0x252>
80009506:	08 99       	mov	r9,r4
80009508:	18 98       	mov	r8,r12
8000950a:	59 3a       	cp.w	r10,19
8000950c:	e0 88 00 14 	brls	80009534 <_realloc_r+0x244>
80009510:	13 0b       	ld.w	r11,r9++
80009512:	10 ab       	st.w	r8++,r11
80009514:	13 0b       	ld.w	r11,r9++
80009516:	10 ab       	st.w	r8++,r11
80009518:	59 ba       	cp.w	r10,27
8000951a:	e0 88 00 0d 	brls	80009534 <_realloc_r+0x244>
8000951e:	13 0b       	ld.w	r11,r9++
80009520:	10 ab       	st.w	r8++,r11
80009522:	13 0b       	ld.w	r11,r9++
80009524:	10 ab       	st.w	r8++,r11
80009526:	e0 4a 00 24 	cp.w	r10,36
8000952a:	c0 51       	brne	80009534 <_realloc_r+0x244>
8000952c:	13 0a       	ld.w	r10,r9++
8000952e:	10 aa       	st.w	r8++,r10
80009530:	13 0a       	ld.w	r10,r9++
80009532:	10 aa       	st.w	r8++,r10
80009534:	13 0a       	ld.w	r10,r9++
80009536:	10 aa       	st.w	r8++,r10
80009538:	72 0a       	ld.w	r10,r9[0x0]
8000953a:	91 0a       	st.w	r8[0x0],r10
8000953c:	72 19       	ld.w	r9,r9[0x4]
8000953e:	91 19       	st.w	r8[0x4],r9
80009540:	c0 48       	rjmp	80009548 <_realloc_r+0x258>
80009542:	08 9b       	mov	r11,r4
80009544:	fe b0 fb cb 	rcall	80008cda <memmove>
80009548:	08 9b       	mov	r11,r4
8000954a:	04 9c       	mov	r12,r2
8000954c:	fe b0 f7 06 	rcall	80008358 <_free_r>
80009550:	04 9c       	mov	r12,r2
80009552:	c2 a8       	rjmp	800095a6 <_realloc_r+0x2b6>
80009554:	00 93       	mov	r3,r0
80009556:	02 97       	mov	r7,r1
80009558:	e6 06 01 09 	sub	r9,r3,r6
8000955c:	6e 18       	ld.w	r8,r7[0x4]
8000955e:	58 f9       	cp.w	r9,15
80009560:	e0 88 00 16 	brls	8000958c <_realloc_r+0x29c>
80009564:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009568:	ed e8 10 08 	or	r8,r6,r8
8000956c:	8f 18       	st.w	r7[0x4],r8
8000956e:	12 98       	mov	r8,r9
80009570:	a1 a8       	sbr	r8,0x0
80009572:	ee 06 00 0b 	add	r11,r7,r6
80009576:	f6 09 00 09 	add	r9,r11,r9
8000957a:	97 18       	st.w	r11[0x4],r8
8000957c:	72 18       	ld.w	r8,r9[0x4]
8000957e:	a1 a8       	sbr	r8,0x0
80009580:	2f 8b       	sub	r11,-8
80009582:	93 18       	st.w	r9[0x4],r8
80009584:	04 9c       	mov	r12,r2
80009586:	fe b0 f6 e9 	rcall	80008358 <_free_r>
8000958a:	c0 b8       	rjmp	800095a0 <_realloc_r+0x2b0>
8000958c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009590:	e7 e8 10 08 	or	r8,r3,r8
80009594:	8f 18       	st.w	r7[0x4],r8
80009596:	ee 03 00 03 	add	r3,r7,r3
8000959a:	66 18       	ld.w	r8,r3[0x4]
8000959c:	a1 a8       	sbr	r8,0x0
8000959e:	87 18       	st.w	r3[0x4],r8
800095a0:	04 9c       	mov	r12,r2
800095a2:	ee c5 ff f8 	sub	r5,r7,-8
800095a6:	fe b0 fb ba 	rcall	80008d1a <__malloc_unlock>
800095aa:	0a 9c       	mov	r12,r5
800095ac:	2f fd       	sub	sp,-4
800095ae:	d8 32       	popm	r0-r7,pc

800095b0 <__isinfd>:
800095b0:	14 98       	mov	r8,r10
800095b2:	fc 19 7f f0 	movh	r9,0x7ff0
800095b6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800095ba:	f0 0b 11 00 	rsub	r11,r8,0
800095be:	f7 e8 10 08 	or	r8,r11,r8
800095c2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800095c6:	f2 08 01 08 	sub	r8,r9,r8
800095ca:	f0 0c 11 00 	rsub	r12,r8,0
800095ce:	f9 e8 10 08 	or	r8,r12,r8
800095d2:	f0 0c 14 1f 	asr	r12,r8,0x1f
800095d6:	2f fc       	sub	r12,-1
800095d8:	5e fc       	retal	r12

800095da <__isnand>:
800095da:	14 98       	mov	r8,r10
800095dc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800095e0:	f0 0c 11 00 	rsub	r12,r8,0
800095e4:	10 4c       	or	r12,r8
800095e6:	fc 18 7f f0 	movh	r8,0x7ff0
800095ea:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800095ee:	f0 0c 01 0c 	sub	r12,r8,r12
800095f2:	bf 9c       	lsr	r12,0x1f
800095f4:	5e fc       	retal	r12
800095f6:	d7 03       	nop

800095f8 <_sbrk_r>:
800095f8:	d4 21       	pushm	r4-r7,lr
800095fa:	30 08       	mov	r8,0
800095fc:	18 97       	mov	r7,r12
800095fe:	e0 66 09 40 	mov	r6,2368
80009602:	16 9c       	mov	r12,r11
80009604:	8d 08       	st.w	r6[0x0],r8
80009606:	ca fc       	rcall	80009764 <_sbrk>
80009608:	5b fc       	cp.w	r12,-1
8000960a:	c0 51       	brne	80009614 <_sbrk_r+0x1c>
8000960c:	6c 08       	ld.w	r8,r6[0x0]
8000960e:	58 08       	cp.w	r8,0
80009610:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009614:	d8 22       	popm	r4-r7,pc
80009616:	d7 03       	nop

80009618 <__sclose>:
80009618:	d4 01       	pushm	lr
8000961a:	96 7b       	ld.sh	r11,r11[0xe]
8000961c:	cf ec       	rcall	80009818 <_close_r>
8000961e:	d8 02       	popm	pc

80009620 <__sseek>:
80009620:	d4 21       	pushm	r4-r7,lr
80009622:	16 97       	mov	r7,r11
80009624:	96 7b       	ld.sh	r11,r11[0xe]
80009626:	c8 5d       	rcall	80009930 <_lseek_r>
80009628:	8e 68       	ld.sh	r8,r7[0xc]
8000962a:	10 99       	mov	r9,r8
8000962c:	ad c8       	cbr	r8,0xc
8000962e:	ad a9       	sbr	r9,0xc
80009630:	5b fc       	cp.w	r12,-1
80009632:	ef f8 0c 06 	st.heq	r7[0xc],r8
80009636:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000963a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000963e:	d8 22       	popm	r4-r7,pc

80009640 <__swrite>:
80009640:	d4 21       	pushm	r4-r7,lr
80009642:	96 68       	ld.sh	r8,r11[0xc]
80009644:	16 97       	mov	r7,r11
80009646:	14 95       	mov	r5,r10
80009648:	12 94       	mov	r4,r9
8000964a:	e2 18 01 00 	andl	r8,0x100,COH
8000964e:	18 96       	mov	r6,r12
80009650:	c0 50       	breq	8000965a <__swrite+0x1a>
80009652:	30 29       	mov	r9,2
80009654:	30 0a       	mov	r10,0
80009656:	96 7b       	ld.sh	r11,r11[0xe]
80009658:	c6 cd       	rcall	80009930 <_lseek_r>
8000965a:	8e 68       	ld.sh	r8,r7[0xc]
8000965c:	ad c8       	cbr	r8,0xc
8000965e:	08 99       	mov	r9,r4
80009660:	0a 9a       	mov	r10,r5
80009662:	8e 7b       	ld.sh	r11,r7[0xe]
80009664:	0c 9c       	mov	r12,r6
80009666:	ae 68       	st.h	r7[0xc],r8
80009668:	c9 ac       	rcall	8000979c <_write_r>
8000966a:	d8 22       	popm	r4-r7,pc

8000966c <__sread>:
8000966c:	d4 21       	pushm	r4-r7,lr
8000966e:	16 97       	mov	r7,r11
80009670:	96 7b       	ld.sh	r11,r11[0xe]
80009672:	c7 1d       	rcall	80009954 <_read_r>
80009674:	c0 65       	brlt	80009680 <__sread+0x14>
80009676:	6f 58       	ld.w	r8,r7[0x54]
80009678:	18 08       	add	r8,r12
8000967a:	ef 48 00 54 	st.w	r7[84],r8
8000967e:	d8 22       	popm	r4-r7,pc
80009680:	8e 68       	ld.sh	r8,r7[0xc]
80009682:	ad c8       	cbr	r8,0xc
80009684:	ae 68       	st.h	r7[0xc],r8
80009686:	d8 22       	popm	r4-r7,pc

80009688 <strlen>:
80009688:	30 09       	mov	r9,0
8000968a:	18 98       	mov	r8,r12
8000968c:	c0 28       	rjmp	80009690 <strlen+0x8>
8000968e:	2f f8       	sub	r8,-1
80009690:	11 8a       	ld.ub	r10,r8[0x0]
80009692:	f2 0a 18 00 	cp.b	r10,r9
80009696:	cf c1       	brne	8000968e <strlen+0x6>
80009698:	f0 0c 01 0c 	sub	r12,r8,r12
8000969c:	5e fc       	retal	r12
8000969e:	d7 03       	nop

800096a0 <_close>:
800096a0:	30 28       	mov	r8,2
800096a2:	d6 73       	breakpoint
800096a4:	3f fc       	mov	r12,-1
800096a6:	35 8b       	mov	r11,88
800096a8:	58 0c       	cp.w	r12,0
800096aa:	5e 4c       	retge	r12
800096ac:	e0 6a 09 40 	mov	r10,2368
800096b0:	95 0b       	st.w	r10[0x0],r11
800096b2:	5e fc       	retal	r12

800096b4 <_lseek>:
800096b4:	30 58       	mov	r8,5
800096b6:	d6 73       	breakpoint
800096b8:	3f fc       	mov	r12,-1
800096ba:	35 8b       	mov	r11,88
800096bc:	58 0c       	cp.w	r12,0
800096be:	5e 4c       	retge	r12
800096c0:	e0 6a 09 40 	mov	r10,2368
800096c4:	95 0b       	st.w	r10[0x0],r11
800096c6:	5e fc       	retal	r12

800096c8 <_read>:
800096c8:	30 38       	mov	r8,3
800096ca:	d6 73       	breakpoint
800096cc:	3f fc       	mov	r12,-1
800096ce:	35 8b       	mov	r11,88
800096d0:	58 0c       	cp.w	r12,0
800096d2:	5e 4c       	retge	r12
800096d4:	e0 6a 09 40 	mov	r10,2368
800096d8:	95 0b       	st.w	r10[0x0],r11
800096da:	5e fc       	retal	r12

800096dc <_write>:
800096dc:	30 48       	mov	r8,4
800096de:	d6 73       	breakpoint
800096e0:	3f fc       	mov	r12,-1
800096e2:	35 8b       	mov	r11,88
800096e4:	58 0c       	cp.w	r12,0
800096e6:	5e 4c       	retge	r12
800096e8:	e0 6a 09 40 	mov	r10,2368
800096ec:	95 0b       	st.w	r10[0x0],r11
800096ee:	5e fc       	retal	r12

800096f0 <isatty>:
800096f0:	30 b8       	mov	r8,11
800096f2:	d6 73       	breakpoint
800096f4:	3f fc       	mov	r12,-1
800096f6:	35 8b       	mov	r11,88
800096f8:	58 0c       	cp.w	r12,0
800096fa:	5e 4c       	retge	r12
800096fc:	e0 6a 09 40 	mov	r10,2368
80009700:	95 0b       	st.w	r10[0x0],r11
80009702:	5e fc       	retal	r12

80009704 <_fstat_host>:
80009704:	30 98       	mov	r8,9
80009706:	d6 73       	breakpoint
80009708:	3f fc       	mov	r12,-1
8000970a:	35 8b       	mov	r11,88
8000970c:	58 0c       	cp.w	r12,0
8000970e:	5e 4c       	retge	r12
80009710:	e0 6a 09 40 	mov	r10,2368
80009714:	95 0b       	st.w	r10[0x0],r11
80009716:	5e fc       	retal	r12

80009718 <_fstat>:
80009718:	d4 21       	pushm	r4-r7,lr
8000971a:	21 0d       	sub	sp,64
8000971c:	16 97       	mov	r7,r11
8000971e:	1a 9b       	mov	r11,sp
80009720:	cf 2f       	rcall	80009704 <_fstat_host>
80009722:	c0 34       	brge	80009728 <_fstat+0x10>
80009724:	3f fc       	mov	r12,-1
80009726:	c1 c8       	rjmp	8000975e <_fstat+0x46>
80009728:	40 08       	lddsp	r8,sp[0x0]
8000972a:	ae 08       	st.h	r7[0x0],r8
8000972c:	40 18       	lddsp	r8,sp[0x4]
8000972e:	ae 18       	st.h	r7[0x2],r8
80009730:	40 28       	lddsp	r8,sp[0x8]
80009732:	8f 18       	st.w	r7[0x4],r8
80009734:	40 38       	lddsp	r8,sp[0xc]
80009736:	ae 48       	st.h	r7[0x8],r8
80009738:	40 48       	lddsp	r8,sp[0x10]
8000973a:	ae 58       	st.h	r7[0xa],r8
8000973c:	40 58       	lddsp	r8,sp[0x14]
8000973e:	ae 68       	st.h	r7[0xc],r8
80009740:	40 68       	lddsp	r8,sp[0x18]
80009742:	ae 78       	st.h	r7[0xe],r8
80009744:	40 88       	lddsp	r8,sp[0x20]
80009746:	8f 48       	st.w	r7[0x10],r8
80009748:	40 a8       	lddsp	r8,sp[0x28]
8000974a:	8f b8       	st.w	r7[0x2c],r8
8000974c:	40 c8       	lddsp	r8,sp[0x30]
8000974e:	8f c8       	st.w	r7[0x30],r8
80009750:	40 d8       	lddsp	r8,sp[0x34]
80009752:	8f 58       	st.w	r7[0x14],r8
80009754:	40 e8       	lddsp	r8,sp[0x38]
80009756:	30 0c       	mov	r12,0
80009758:	8f 78       	st.w	r7[0x1c],r8
8000975a:	40 f8       	lddsp	r8,sp[0x3c]
8000975c:	8f 98       	st.w	r7[0x24],r8
8000975e:	2f 0d       	sub	sp,-64
80009760:	d8 22       	popm	r4-r7,pc
80009762:	d7 03       	nop

80009764 <_sbrk>:
80009764:	d4 01       	pushm	lr
80009766:	e0 68 09 3c 	mov	r8,2364
8000976a:	70 09       	ld.w	r9,r8[0x0]
8000976c:	58 09       	cp.w	r9,0
8000976e:	c0 41       	brne	80009776 <_sbrk+0x12>
80009770:	e0 69 09 48 	mov	r9,2376
80009774:	91 09       	st.w	r8[0x0],r9
80009776:	e0 69 09 3c 	mov	r9,2364
8000977a:	e0 6a f0 00 	mov	r10,61440
8000977e:	72 08       	ld.w	r8,r9[0x0]
80009780:	f0 0c 00 0c 	add	r12,r8,r12
80009784:	14 3c       	cp.w	r12,r10
80009786:	e0 8b 00 04 	brhi	8000978e <_sbrk+0x2a>
8000978a:	93 0c       	st.w	r9[0x0],r12
8000978c:	c0 58       	rjmp	80009796 <_sbrk+0x32>
8000978e:	c5 5c       	rcall	80009838 <__errno>
80009790:	30 c8       	mov	r8,12
80009792:	99 08       	st.w	r12[0x0],r8
80009794:	3f f8       	mov	r8,-1
80009796:	10 9c       	mov	r12,r8
80009798:	d8 02       	popm	pc
8000979a:	d7 03       	nop

8000979c <_write_r>:
8000979c:	d4 21       	pushm	r4-r7,lr
8000979e:	16 98       	mov	r8,r11
800097a0:	18 97       	mov	r7,r12
800097a2:	10 9c       	mov	r12,r8
800097a4:	30 08       	mov	r8,0
800097a6:	14 9b       	mov	r11,r10
800097a8:	e0 66 09 40 	mov	r6,2368
800097ac:	12 9a       	mov	r10,r9
800097ae:	8d 08       	st.w	r6[0x0],r8
800097b0:	c9 6f       	rcall	800096dc <_write>
800097b2:	5b fc       	cp.w	r12,-1
800097b4:	c0 51       	brne	800097be <_write_r+0x22>
800097b6:	6c 08       	ld.w	r8,r6[0x0]
800097b8:	58 08       	cp.w	r8,0
800097ba:	ef f8 1a 03 	st.wne	r7[0xc],r8
800097be:	d8 22       	popm	r4-r7,pc

800097c0 <_calloc_r>:
800097c0:	d4 21       	pushm	r4-r7,lr
800097c2:	f4 0b 02 4b 	mul	r11,r10,r11
800097c6:	fe b0 f8 67 	rcall	80008894 <_malloc_r>
800097ca:	18 97       	mov	r7,r12
800097cc:	c2 30       	breq	80009812 <_calloc_r+0x52>
800097ce:	f8 fa ff fc 	ld.w	r10,r12[-4]
800097d2:	e0 1a ff fc 	andl	r10,0xfffc
800097d6:	20 4a       	sub	r10,4
800097d8:	e0 4a 00 24 	cp.w	r10,36
800097dc:	e0 8b 00 18 	brhi	8000980c <_calloc_r+0x4c>
800097e0:	18 98       	mov	r8,r12
800097e2:	59 3a       	cp.w	r10,19
800097e4:	e0 88 00 0f 	brls	80009802 <_calloc_r+0x42>
800097e8:	30 09       	mov	r9,0
800097ea:	10 a9       	st.w	r8++,r9
800097ec:	10 a9       	st.w	r8++,r9
800097ee:	59 ba       	cp.w	r10,27
800097f0:	e0 88 00 09 	brls	80009802 <_calloc_r+0x42>
800097f4:	10 a9       	st.w	r8++,r9
800097f6:	10 a9       	st.w	r8++,r9
800097f8:	e0 4a 00 24 	cp.w	r10,36
800097fc:	c0 31       	brne	80009802 <_calloc_r+0x42>
800097fe:	10 a9       	st.w	r8++,r9
80009800:	10 a9       	st.w	r8++,r9
80009802:	30 09       	mov	r9,0
80009804:	10 a9       	st.w	r8++,r9
80009806:	91 19       	st.w	r8[0x4],r9
80009808:	91 09       	st.w	r8[0x0],r9
8000980a:	c0 48       	rjmp	80009812 <_calloc_r+0x52>
8000980c:	30 0b       	mov	r11,0
8000980e:	fe b0 db af 	rcall	80004f6c <memset>
80009812:	0e 9c       	mov	r12,r7
80009814:	d8 22       	popm	r4-r7,pc
80009816:	d7 03       	nop

80009818 <_close_r>:
80009818:	d4 21       	pushm	r4-r7,lr
8000981a:	30 08       	mov	r8,0
8000981c:	18 97       	mov	r7,r12
8000981e:	e0 66 09 40 	mov	r6,2368
80009822:	16 9c       	mov	r12,r11
80009824:	8d 08       	st.w	r6[0x0],r8
80009826:	c3 df       	rcall	800096a0 <_close>
80009828:	5b fc       	cp.w	r12,-1
8000982a:	c0 51       	brne	80009834 <_close_r+0x1c>
8000982c:	6c 08       	ld.w	r8,r6[0x0]
8000982e:	58 08       	cp.w	r8,0
80009830:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009834:	d8 22       	popm	r4-r7,pc
80009836:	d7 03       	nop

80009838 <__errno>:
80009838:	e0 68 00 f8 	mov	r8,248
8000983c:	70 0c       	ld.w	r12,r8[0x0]
8000983e:	2f 4c       	sub	r12,-12
80009840:	5e fc       	retal	r12
80009842:	d7 03       	nop

80009844 <_fclose_r>:
80009844:	d4 21       	pushm	r4-r7,lr
80009846:	18 96       	mov	r6,r12
80009848:	16 97       	mov	r7,r11
8000984a:	58 0b       	cp.w	r11,0
8000984c:	c0 31       	brne	80009852 <_fclose_r+0xe>
8000984e:	16 95       	mov	r5,r11
80009850:	c5 38       	rjmp	800098f6 <_fclose_r+0xb2>
80009852:	fe b0 f4 97 	rcall	80008180 <__sfp_lock_acquire>
80009856:	58 06       	cp.w	r6,0
80009858:	c0 70       	breq	80009866 <_fclose_r+0x22>
8000985a:	6c 68       	ld.w	r8,r6[0x18]
8000985c:	58 08       	cp.w	r8,0
8000985e:	c0 41       	brne	80009866 <_fclose_r+0x22>
80009860:	0c 9c       	mov	r12,r6
80009862:	fe b0 f4 e1 	rcall	80008224 <__sinit>
80009866:	fe c8 e6 b6 	sub	r8,pc,-6474
8000986a:	10 37       	cp.w	r7,r8
8000986c:	c0 31       	brne	80009872 <_fclose_r+0x2e>
8000986e:	6c 07       	ld.w	r7,r6[0x0]
80009870:	c0 c8       	rjmp	80009888 <_fclose_r+0x44>
80009872:	fe c8 e6 a2 	sub	r8,pc,-6494
80009876:	10 37       	cp.w	r7,r8
80009878:	c0 31       	brne	8000987e <_fclose_r+0x3a>
8000987a:	6c 17       	ld.w	r7,r6[0x4]
8000987c:	c0 68       	rjmp	80009888 <_fclose_r+0x44>
8000987e:	fe c8 e6 8e 	sub	r8,pc,-6514
80009882:	10 37       	cp.w	r7,r8
80009884:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80009888:	8e 69       	ld.sh	r9,r7[0xc]
8000988a:	30 08       	mov	r8,0
8000988c:	f0 09 19 00 	cp.h	r9,r8
80009890:	c0 51       	brne	8000989a <_fclose_r+0x56>
80009892:	fe b0 f4 78 	rcall	80008182 <__sfp_lock_release>
80009896:	30 05       	mov	r5,0
80009898:	c2 f8       	rjmp	800098f6 <_fclose_r+0xb2>
8000989a:	0e 9b       	mov	r11,r7
8000989c:	0c 9c       	mov	r12,r6
8000989e:	fe b0 f3 eb 	rcall	80008074 <_fflush_r>
800098a2:	6e c8       	ld.w	r8,r7[0x30]
800098a4:	18 95       	mov	r5,r12
800098a6:	58 08       	cp.w	r8,0
800098a8:	c0 60       	breq	800098b4 <_fclose_r+0x70>
800098aa:	6e 8b       	ld.w	r11,r7[0x20]
800098ac:	0c 9c       	mov	r12,r6
800098ae:	5d 18       	icall	r8
800098b0:	f9 b5 05 ff 	movlt	r5,-1
800098b4:	8e 68       	ld.sh	r8,r7[0xc]
800098b6:	ed b8 00 07 	bld	r8,0x7
800098ba:	c0 51       	brne	800098c4 <_fclose_r+0x80>
800098bc:	6e 4b       	ld.w	r11,r7[0x10]
800098be:	0c 9c       	mov	r12,r6
800098c0:	fe b0 f5 4c 	rcall	80008358 <_free_r>
800098c4:	6e db       	ld.w	r11,r7[0x34]
800098c6:	58 0b       	cp.w	r11,0
800098c8:	c0 a0       	breq	800098dc <_fclose_r+0x98>
800098ca:	ee c8 ff bc 	sub	r8,r7,-68
800098ce:	10 3b       	cp.w	r11,r8
800098d0:	c0 40       	breq	800098d8 <_fclose_r+0x94>
800098d2:	0c 9c       	mov	r12,r6
800098d4:	fe b0 f5 42 	rcall	80008358 <_free_r>
800098d8:	30 08       	mov	r8,0
800098da:	8f d8       	st.w	r7[0x34],r8
800098dc:	6f 2b       	ld.w	r11,r7[0x48]
800098de:	58 0b       	cp.w	r11,0
800098e0:	c0 70       	breq	800098ee <_fclose_r+0xaa>
800098e2:	0c 9c       	mov	r12,r6
800098e4:	fe b0 f5 3a 	rcall	80008358 <_free_r>
800098e8:	30 08       	mov	r8,0
800098ea:	ef 48 00 48 	st.w	r7[72],r8
800098ee:	30 08       	mov	r8,0
800098f0:	ae 68       	st.h	r7[0xc],r8
800098f2:	fe b0 f4 48 	rcall	80008182 <__sfp_lock_release>
800098f6:	0a 9c       	mov	r12,r5
800098f8:	d8 22       	popm	r4-r7,pc
800098fa:	d7 03       	nop

800098fc <fclose>:
800098fc:	d4 01       	pushm	lr
800098fe:	e0 68 00 f8 	mov	r8,248
80009902:	18 9b       	mov	r11,r12
80009904:	70 0c       	ld.w	r12,r8[0x0]
80009906:	c9 ff       	rcall	80009844 <_fclose_r>
80009908:	d8 02       	popm	pc
8000990a:	d7 03       	nop

8000990c <_fstat_r>:
8000990c:	d4 21       	pushm	r4-r7,lr
8000990e:	16 98       	mov	r8,r11
80009910:	18 97       	mov	r7,r12
80009912:	10 9c       	mov	r12,r8
80009914:	30 08       	mov	r8,0
80009916:	e0 66 09 40 	mov	r6,2368
8000991a:	14 9b       	mov	r11,r10
8000991c:	8d 08       	st.w	r6[0x0],r8
8000991e:	cf de       	rcall	80009718 <_fstat>
80009920:	5b fc       	cp.w	r12,-1
80009922:	c0 51       	brne	8000992c <_fstat_r+0x20>
80009924:	6c 08       	ld.w	r8,r6[0x0]
80009926:	58 08       	cp.w	r8,0
80009928:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000992c:	d8 22       	popm	r4-r7,pc
8000992e:	d7 03       	nop

80009930 <_lseek_r>:
80009930:	d4 21       	pushm	r4-r7,lr
80009932:	16 98       	mov	r8,r11
80009934:	18 97       	mov	r7,r12
80009936:	10 9c       	mov	r12,r8
80009938:	30 08       	mov	r8,0
8000993a:	14 9b       	mov	r11,r10
8000993c:	e0 66 09 40 	mov	r6,2368
80009940:	12 9a       	mov	r10,r9
80009942:	8d 08       	st.w	r6[0x0],r8
80009944:	cb 8e       	rcall	800096b4 <_lseek>
80009946:	5b fc       	cp.w	r12,-1
80009948:	c0 51       	brne	80009952 <_lseek_r+0x22>
8000994a:	6c 08       	ld.w	r8,r6[0x0]
8000994c:	58 08       	cp.w	r8,0
8000994e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009952:	d8 22       	popm	r4-r7,pc

80009954 <_read_r>:
80009954:	d4 21       	pushm	r4-r7,lr
80009956:	16 98       	mov	r8,r11
80009958:	18 97       	mov	r7,r12
8000995a:	10 9c       	mov	r12,r8
8000995c:	30 08       	mov	r8,0
8000995e:	14 9b       	mov	r11,r10
80009960:	e0 66 09 40 	mov	r6,2368
80009964:	12 9a       	mov	r10,r9
80009966:	8d 08       	st.w	r6[0x0],r8
80009968:	cb 0e       	rcall	800096c8 <_read>
8000996a:	5b fc       	cp.w	r12,-1
8000996c:	c0 51       	brne	80009976 <_read_r+0x22>
8000996e:	6c 08       	ld.w	r8,r6[0x0]
80009970:	58 08       	cp.w	r8,0
80009972:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009976:	d8 22       	popm	r4-r7,pc

80009978 <__avr32_f64_mul>:
80009978:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000997c:	e0 80 00 dc 	breq	80009b34 <__avr32_f64_mul_op1_zero>
80009980:	d4 21       	pushm	r4-r7,lr
80009982:	f7 e9 20 0e 	eor	lr,r11,r9
80009986:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000998a:	30 15       	mov	r5,1
8000998c:	c4 30       	breq	80009a12 <__avr32_f64_mul_op1_subnormal>
8000998e:	ab 6b       	lsl	r11,0xa
80009990:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009994:	ab 6a       	lsl	r10,0xa
80009996:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000999a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000999e:	c5 c0       	breq	80009a56 <__avr32_f64_mul_op2_subnormal>
800099a0:	a1 78       	lsl	r8,0x1
800099a2:	5c f9       	rol	r9
800099a4:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800099a8:	e0 47 07 ff 	cp.w	r7,2047
800099ac:	c7 70       	breq	80009a9a <__avr32_f64_mul_op_nan_or_inf>
800099ae:	e0 46 07 ff 	cp.w	r6,2047
800099b2:	c7 40       	breq	80009a9a <__avr32_f64_mul_op_nan_or_inf>
800099b4:	ee 06 00 0c 	add	r12,r7,r6
800099b8:	e0 2c 03 fe 	sub	r12,1022
800099bc:	f6 08 06 44 	mulu.d	r4,r11,r8
800099c0:	f4 09 07 44 	macu.d	r4,r10,r9
800099c4:	f4 08 06 46 	mulu.d	r6,r10,r8
800099c8:	f6 09 06 4a 	mulu.d	r10,r11,r9
800099cc:	08 07       	add	r7,r4
800099ce:	f4 05 00 4a 	adc	r10,r10,r5
800099d2:	5c 0b       	acr	r11
800099d4:	ed bb 00 14 	bld	r11,0x14
800099d8:	c0 50       	breq	800099e2 <__avr32_f64_mul+0x6a>
800099da:	a1 77       	lsl	r7,0x1
800099dc:	5c fa       	rol	r10
800099de:	5c fb       	rol	r11
800099e0:	20 1c       	sub	r12,1
800099e2:	58 0c       	cp.w	r12,0
800099e4:	e0 8a 00 6f 	brle	80009ac2 <__avr32_f64_mul_res_subnormal>
800099e8:	e0 4c 07 ff 	cp.w	r12,2047
800099ec:	e0 84 00 9c 	brge	80009b24 <__avr32_f64_mul_res_inf>
800099f0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800099f4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800099f8:	ef e6 12 17 	or	r7,r7,r6>>0x1
800099fc:	ee 17 80 00 	eorh	r7,0x8000
80009a00:	f1 b7 04 20 	satu	r7,0x1
80009a04:	0e 0a       	add	r10,r7
80009a06:	5c 0b       	acr	r11
80009a08:	ed be 00 1f 	bld	lr,0x1f
80009a0c:	ef bb 00 1f 	bst	r11,0x1f
80009a10:	d8 22       	popm	r4-r7,pc

80009a12 <__avr32_f64_mul_op1_subnormal>:
80009a12:	e4 1b 00 0f 	andh	r11,0xf
80009a16:	f4 0c 12 00 	clz	r12,r10
80009a1a:	f6 06 12 00 	clz	r6,r11
80009a1e:	f7 bc 03 e1 	sublo	r12,-31
80009a22:	f8 06 17 30 	movlo	r6,r12
80009a26:	f7 b6 02 01 	subhs	r6,1
80009a2a:	e0 46 00 20 	cp.w	r6,32
80009a2e:	c0 d4       	brge	80009a48 <__avr32_f64_mul_op1_subnormal+0x36>
80009a30:	ec 0c 11 20 	rsub	r12,r6,32
80009a34:	f6 06 09 4b 	lsl	r11,r11,r6
80009a38:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009a3c:	18 4b       	or	r11,r12
80009a3e:	f4 06 09 4a 	lsl	r10,r10,r6
80009a42:	20 b6       	sub	r6,11
80009a44:	0c 17       	sub	r7,r6
80009a46:	ca ab       	rjmp	8000999a <__avr32_f64_mul+0x22>
80009a48:	f4 06 09 4b 	lsl	r11,r10,r6
80009a4c:	c6 40       	breq	80009b14 <__avr32_f64_mul_res_zero>
80009a4e:	30 0a       	mov	r10,0
80009a50:	20 b6       	sub	r6,11
80009a52:	0c 17       	sub	r7,r6
80009a54:	ca 3b       	rjmp	8000999a <__avr32_f64_mul+0x22>

80009a56 <__avr32_f64_mul_op2_subnormal>:
80009a56:	e4 19 00 0f 	andh	r9,0xf
80009a5a:	f0 0c 12 00 	clz	r12,r8
80009a5e:	f2 05 12 00 	clz	r5,r9
80009a62:	f7 bc 03 ea 	sublo	r12,-22
80009a66:	f8 05 17 30 	movlo	r5,r12
80009a6a:	f7 b5 02 0a 	subhs	r5,10
80009a6e:	e0 45 00 20 	cp.w	r5,32
80009a72:	c0 d4       	brge	80009a8c <__avr32_f64_mul_op2_subnormal+0x36>
80009a74:	ea 0c 11 20 	rsub	r12,r5,32
80009a78:	f2 05 09 49 	lsl	r9,r9,r5
80009a7c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80009a80:	18 49       	or	r9,r12
80009a82:	f0 05 09 48 	lsl	r8,r8,r5
80009a86:	20 25       	sub	r5,2
80009a88:	0a 16       	sub	r6,r5
80009a8a:	c8 fb       	rjmp	800099a8 <__avr32_f64_mul+0x30>
80009a8c:	f0 05 09 49 	lsl	r9,r8,r5
80009a90:	c4 20       	breq	80009b14 <__avr32_f64_mul_res_zero>
80009a92:	30 08       	mov	r8,0
80009a94:	20 25       	sub	r5,2
80009a96:	0a 16       	sub	r6,r5
80009a98:	c8 8b       	rjmp	800099a8 <__avr32_f64_mul+0x30>

80009a9a <__avr32_f64_mul_op_nan_or_inf>:
80009a9a:	e4 19 00 0f 	andh	r9,0xf
80009a9e:	e4 1b 00 0f 	andh	r11,0xf
80009aa2:	14 4b       	or	r11,r10
80009aa4:	10 49       	or	r9,r8
80009aa6:	e0 47 07 ff 	cp.w	r7,2047
80009aaa:	c0 91       	brne	80009abc <__avr32_f64_mul_op1_not_naninf>
80009aac:	58 0b       	cp.w	r11,0
80009aae:	c3 81       	brne	80009b1e <__avr32_f64_mul_res_nan>
80009ab0:	e0 46 07 ff 	cp.w	r6,2047
80009ab4:	c3 81       	brne	80009b24 <__avr32_f64_mul_res_inf>
80009ab6:	58 09       	cp.w	r9,0
80009ab8:	c3 60       	breq	80009b24 <__avr32_f64_mul_res_inf>
80009aba:	c3 28       	rjmp	80009b1e <__avr32_f64_mul_res_nan>

80009abc <__avr32_f64_mul_op1_not_naninf>:
80009abc:	58 09       	cp.w	r9,0
80009abe:	c3 30       	breq	80009b24 <__avr32_f64_mul_res_inf>
80009ac0:	c2 f8       	rjmp	80009b1e <__avr32_f64_mul_res_nan>

80009ac2 <__avr32_f64_mul_res_subnormal>:
80009ac2:	5c 3c       	neg	r12
80009ac4:	2f fc       	sub	r12,-1
80009ac6:	f1 bc 04 c0 	satu	r12,0x6
80009aca:	e0 4c 00 20 	cp.w	r12,32
80009ace:	c1 14       	brge	80009af0 <__avr32_f64_mul_res_subnormal+0x2e>
80009ad0:	f8 08 11 20 	rsub	r8,r12,32
80009ad4:	0e 46       	or	r6,r7
80009ad6:	ee 0c 0a 47 	lsr	r7,r7,r12
80009ada:	f4 08 09 49 	lsl	r9,r10,r8
80009ade:	12 47       	or	r7,r9
80009ae0:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009ae4:	f6 08 09 49 	lsl	r9,r11,r8
80009ae8:	12 4a       	or	r10,r9
80009aea:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009aee:	c8 3b       	rjmp	800099f4 <__avr32_f64_mul+0x7c>
80009af0:	f8 08 11 20 	rsub	r8,r12,32
80009af4:	f9 b9 00 00 	moveq	r9,0
80009af8:	c0 30       	breq	80009afe <__avr32_f64_mul_res_subnormal+0x3c>
80009afa:	f6 08 09 49 	lsl	r9,r11,r8
80009afe:	0e 46       	or	r6,r7
80009b00:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009b04:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009b08:	f3 ea 10 07 	or	r7,r9,r10
80009b0c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80009b10:	30 0b       	mov	r11,0
80009b12:	c7 1b       	rjmp	800099f4 <__avr32_f64_mul+0x7c>

80009b14 <__avr32_f64_mul_res_zero>:
80009b14:	1c 9b       	mov	r11,lr
80009b16:	e6 1b 80 00 	andh	r11,0x8000,COH
80009b1a:	30 0a       	mov	r10,0
80009b1c:	d8 22       	popm	r4-r7,pc

80009b1e <__avr32_f64_mul_res_nan>:
80009b1e:	3f fb       	mov	r11,-1
80009b20:	3f fa       	mov	r10,-1
80009b22:	d8 22       	popm	r4-r7,pc

80009b24 <__avr32_f64_mul_res_inf>:
80009b24:	f0 6b 00 00 	mov	r11,-1048576
80009b28:	ed be 00 1f 	bld	lr,0x1f
80009b2c:	ef bb 00 1f 	bst	r11,0x1f
80009b30:	30 0a       	mov	r10,0
80009b32:	d8 22       	popm	r4-r7,pc

80009b34 <__avr32_f64_mul_op1_zero>:
80009b34:	f7 e9 20 0b 	eor	r11,r11,r9
80009b38:	e6 1b 80 00 	andh	r11,0x8000,COH
80009b3c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009b40:	e0 4c 07 ff 	cp.w	r12,2047
80009b44:	5e 1c       	retne	r12
80009b46:	3f fa       	mov	r10,-1
80009b48:	3f fb       	mov	r11,-1
80009b4a:	5e fc       	retal	r12

80009b4c <__avr32_f64_sub_from_add>:
80009b4c:	ee 19 80 00 	eorh	r9,0x8000

80009b50 <__avr32_f64_sub>:
80009b50:	f7 e9 20 0c 	eor	r12,r11,r9
80009b54:	e0 86 00 ca 	brmi	80009ce8 <__avr32_f64_add_from_sub>
80009b58:	eb cd 40 e0 	pushm	r5-r7,lr
80009b5c:	16 9c       	mov	r12,r11
80009b5e:	e6 1c 80 00 	andh	r12,0x8000,COH
80009b62:	bf db       	cbr	r11,0x1f
80009b64:	bf d9       	cbr	r9,0x1f
80009b66:	10 3a       	cp.w	r10,r8
80009b68:	f2 0b 13 00 	cpc	r11,r9
80009b6c:	c0 92       	brcc	80009b7e <__avr32_f64_sub+0x2e>
80009b6e:	16 97       	mov	r7,r11
80009b70:	12 9b       	mov	r11,r9
80009b72:	0e 99       	mov	r9,r7
80009b74:	14 97       	mov	r7,r10
80009b76:	10 9a       	mov	r10,r8
80009b78:	0e 98       	mov	r8,r7
80009b7a:	ee 1c 80 00 	eorh	r12,0x8000
80009b7e:	f6 07 16 14 	lsr	r7,r11,0x14
80009b82:	ab 7b       	lsl	r11,0xb
80009b84:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009b88:	ab 7a       	lsl	r10,0xb
80009b8a:	bf bb       	sbr	r11,0x1f
80009b8c:	f2 06 16 14 	lsr	r6,r9,0x14
80009b90:	c4 40       	breq	80009c18 <__avr32_f64_sub_opL_subnormal>
80009b92:	ab 79       	lsl	r9,0xb
80009b94:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009b98:	ab 78       	lsl	r8,0xb
80009b9a:	bf b9       	sbr	r9,0x1f

80009b9c <__avr32_f64_sub_opL_subnormal_done>:
80009b9c:	e0 47 07 ff 	cp.w	r7,2047
80009ba0:	c4 f0       	breq	80009c3e <__avr32_f64_sub_opH_nan_or_inf>
80009ba2:	0e 26       	rsub	r6,r7
80009ba4:	c1 20       	breq	80009bc8 <__avr32_f64_sub_shift_done>
80009ba6:	ec 05 11 20 	rsub	r5,r6,32
80009baa:	e0 46 00 20 	cp.w	r6,32
80009bae:	c7 c2       	brcc	80009ca6 <__avr32_f64_sub_longshift>
80009bb0:	f0 05 09 4e 	lsl	lr,r8,r5
80009bb4:	f2 05 09 45 	lsl	r5,r9,r5
80009bb8:	f0 06 0a 48 	lsr	r8,r8,r6
80009bbc:	f2 06 0a 49 	lsr	r9,r9,r6
80009bc0:	0a 48       	or	r8,r5
80009bc2:	58 0e       	cp.w	lr,0
80009bc4:	5f 1e       	srne	lr
80009bc6:	1c 48       	or	r8,lr

80009bc8 <__avr32_f64_sub_shift_done>:
80009bc8:	10 1a       	sub	r10,r8
80009bca:	f6 09 01 4b 	sbc	r11,r11,r9
80009bce:	f6 06 12 00 	clz	r6,r11
80009bd2:	c0 e0       	breq	80009bee <__avr32_f64_sub_longnormalize_done>
80009bd4:	c7 83       	brcs	80009cc4 <__avr32_f64_sub_longnormalize>
80009bd6:	ec 0e 11 20 	rsub	lr,r6,32
80009bda:	f6 06 09 4b 	lsl	r11,r11,r6
80009bde:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009be2:	1c 4b       	or	r11,lr
80009be4:	f4 06 09 4a 	lsl	r10,r10,r6
80009be8:	0c 17       	sub	r7,r6
80009bea:	e0 8a 00 39 	brle	80009c5c <__avr32_f64_sub_subnormal_result>

80009bee <__avr32_f64_sub_longnormalize_done>:
80009bee:	f4 09 15 15 	lsl	r9,r10,0x15
80009bf2:	ab 9a       	lsr	r10,0xb
80009bf4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009bf8:	ab 9b       	lsr	r11,0xb
80009bfa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009bfe:	18 4b       	or	r11,r12

80009c00 <__avr32_f64_sub_round>:
80009c00:	fc 17 80 00 	movh	r7,0x8000
80009c04:	ed ba 00 00 	bld	r10,0x0
80009c08:	f7 b7 01 ff 	subne	r7,-1
80009c0c:	0e 39       	cp.w	r9,r7
80009c0e:	5f 29       	srhs	r9
80009c10:	12 0a       	add	r10,r9
80009c12:	5c 0b       	acr	r11
80009c14:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009c18 <__avr32_f64_sub_opL_subnormal>:
80009c18:	ab 79       	lsl	r9,0xb
80009c1a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009c1e:	ab 78       	lsl	r8,0xb
80009c20:	f3 e8 10 0e 	or	lr,r9,r8
80009c24:	f9 b6 01 01 	movne	r6,1
80009c28:	ee 0e 11 00 	rsub	lr,r7,0
80009c2c:	f9 b7 00 01 	moveq	r7,1
80009c30:	ef bb 00 1f 	bst	r11,0x1f
80009c34:	f7 ea 10 0e 	or	lr,r11,r10
80009c38:	f9 b7 00 00 	moveq	r7,0
80009c3c:	cb 0b       	rjmp	80009b9c <__avr32_f64_sub_opL_subnormal_done>

80009c3e <__avr32_f64_sub_opH_nan_or_inf>:
80009c3e:	bf db       	cbr	r11,0x1f
80009c40:	f7 ea 10 0e 	or	lr,r11,r10
80009c44:	c0 81       	brne	80009c54 <__avr32_f64_sub_return_nan>
80009c46:	e0 46 07 ff 	cp.w	r6,2047
80009c4a:	c0 50       	breq	80009c54 <__avr32_f64_sub_return_nan>
80009c4c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009c50:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009c54 <__avr32_f64_sub_return_nan>:
80009c54:	3f fa       	mov	r10,-1
80009c56:	3f fb       	mov	r11,-1
80009c58:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009c5c <__avr32_f64_sub_subnormal_result>:
80009c5c:	5c 37       	neg	r7
80009c5e:	2f f7       	sub	r7,-1
80009c60:	f1 b7 04 c0 	satu	r7,0x6
80009c64:	e0 47 00 20 	cp.w	r7,32
80009c68:	c1 14       	brge	80009c8a <__avr32_f64_sub_subnormal_result+0x2e>
80009c6a:	ee 08 11 20 	rsub	r8,r7,32
80009c6e:	f4 08 09 49 	lsl	r9,r10,r8
80009c72:	5f 16       	srne	r6
80009c74:	f4 07 0a 4a 	lsr	r10,r10,r7
80009c78:	0c 4a       	or	r10,r6
80009c7a:	f6 08 09 49 	lsl	r9,r11,r8
80009c7e:	f5 e9 10 0a 	or	r10,r10,r9
80009c82:	f4 07 0a 4b 	lsr	r11,r10,r7
80009c86:	30 07       	mov	r7,0
80009c88:	cb 3b       	rjmp	80009bee <__avr32_f64_sub_longnormalize_done>
80009c8a:	ee 08 11 40 	rsub	r8,r7,64
80009c8e:	f6 08 09 49 	lsl	r9,r11,r8
80009c92:	14 49       	or	r9,r10
80009c94:	5f 16       	srne	r6
80009c96:	f6 07 0a 4a 	lsr	r10,r11,r7
80009c9a:	0c 4a       	or	r10,r6
80009c9c:	30 0b       	mov	r11,0
80009c9e:	30 07       	mov	r7,0
80009ca0:	ca 7b       	rjmp	80009bee <__avr32_f64_sub_longnormalize_done>
80009ca2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009ca6 <__avr32_f64_sub_longshift>:
80009ca6:	f1 b6 04 c0 	satu	r6,0x6
80009caa:	f0 0e 17 00 	moveq	lr,r8
80009cae:	c0 40       	breq	80009cb6 <__avr32_f64_sub_longshift+0x10>
80009cb0:	f2 05 09 4e 	lsl	lr,r9,r5
80009cb4:	10 4e       	or	lr,r8
80009cb6:	f2 06 0a 48 	lsr	r8,r9,r6
80009cba:	30 09       	mov	r9,0
80009cbc:	58 0e       	cp.w	lr,0
80009cbe:	5f 1e       	srne	lr
80009cc0:	1c 48       	or	r8,lr
80009cc2:	c8 3b       	rjmp	80009bc8 <__avr32_f64_sub_shift_done>

80009cc4 <__avr32_f64_sub_longnormalize>:
80009cc4:	f4 06 12 00 	clz	r6,r10
80009cc8:	f9 b7 03 00 	movlo	r7,0
80009ccc:	f9 b6 03 00 	movlo	r6,0
80009cd0:	f9 bc 03 00 	movlo	r12,0
80009cd4:	f7 b6 02 e0 	subhs	r6,-32
80009cd8:	f4 06 09 4b 	lsl	r11,r10,r6
80009cdc:	30 0a       	mov	r10,0
80009cde:	0c 17       	sub	r7,r6
80009ce0:	fe 9a ff be 	brle	80009c5c <__avr32_f64_sub_subnormal_result>
80009ce4:	c8 5b       	rjmp	80009bee <__avr32_f64_sub_longnormalize_done>
80009ce6:	d7 03       	nop

80009ce8 <__avr32_f64_add_from_sub>:
80009ce8:	ee 19 80 00 	eorh	r9,0x8000

80009cec <__avr32_f64_add>:
80009cec:	f7 e9 20 0c 	eor	r12,r11,r9
80009cf0:	fe 96 ff 2e 	brmi	80009b4c <__avr32_f64_sub_from_add>
80009cf4:	eb cd 40 e0 	pushm	r5-r7,lr
80009cf8:	16 9c       	mov	r12,r11
80009cfa:	e6 1c 80 00 	andh	r12,0x8000,COH
80009cfe:	bf db       	cbr	r11,0x1f
80009d00:	bf d9       	cbr	r9,0x1f
80009d02:	12 3b       	cp.w	r11,r9
80009d04:	c0 72       	brcc	80009d12 <__avr32_f64_add+0x26>
80009d06:	16 97       	mov	r7,r11
80009d08:	12 9b       	mov	r11,r9
80009d0a:	0e 99       	mov	r9,r7
80009d0c:	14 97       	mov	r7,r10
80009d0e:	10 9a       	mov	r10,r8
80009d10:	0e 98       	mov	r8,r7
80009d12:	30 0e       	mov	lr,0
80009d14:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009d18:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009d1c:	b5 ab       	sbr	r11,0x14
80009d1e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009d22:	c6 20       	breq	80009de6 <__avr32_f64_add_op2_subnormal>
80009d24:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80009d28:	b5 a9       	sbr	r9,0x14
80009d2a:	e0 47 07 ff 	cp.w	r7,2047
80009d2e:	c2 80       	breq	80009d7e <__avr32_f64_add_opH_nan_or_inf>
80009d30:	0e 26       	rsub	r6,r7
80009d32:	c1 20       	breq	80009d56 <__avr32_f64_add_shift_done>
80009d34:	e0 46 00 36 	cp.w	r6,54
80009d38:	c1 52       	brcc	80009d62 <__avr32_f64_add_res_of_done>
80009d3a:	ec 05 11 20 	rsub	r5,r6,32
80009d3e:	e0 46 00 20 	cp.w	r6,32
80009d42:	c3 52       	brcc	80009dac <__avr32_f64_add_longshift>
80009d44:	f0 05 09 4e 	lsl	lr,r8,r5
80009d48:	f2 05 09 45 	lsl	r5,r9,r5
80009d4c:	f0 06 0a 48 	lsr	r8,r8,r6
80009d50:	f2 06 0a 49 	lsr	r9,r9,r6
80009d54:	0a 48       	or	r8,r5

80009d56 <__avr32_f64_add_shift_done>:
80009d56:	10 0a       	add	r10,r8
80009d58:	f6 09 00 4b 	adc	r11,r11,r9
80009d5c:	ed bb 00 15 	bld	r11,0x15
80009d60:	c3 40       	breq	80009dc8 <__avr32_f64_add_res_of>

80009d62 <__avr32_f64_add_res_of_done>:
80009d62:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009d66:	18 4b       	or	r11,r12

80009d68 <__avr32_f64_add_round>:
80009d68:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009d6c:	18 4e       	or	lr,r12
80009d6e:	ee 1e 80 00 	eorh	lr,0x8000
80009d72:	f1 be 04 20 	satu	lr,0x1
80009d76:	1c 0a       	add	r10,lr
80009d78:	5c 0b       	acr	r11
80009d7a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009d7e <__avr32_f64_add_opH_nan_or_inf>:
80009d7e:	b5 cb       	cbr	r11,0x14
80009d80:	f7 ea 10 0e 	or	lr,r11,r10
80009d84:	c1 01       	brne	80009da4 <__avr32_f64_add_return_nan>
80009d86:	e0 46 07 ff 	cp.w	r6,2047
80009d8a:	c0 30       	breq	80009d90 <__avr32_f64_add_opL_nan_or_inf>
80009d8c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009d90 <__avr32_f64_add_opL_nan_or_inf>:
80009d90:	b5 c9       	cbr	r9,0x14
80009d92:	f3 e8 10 0e 	or	lr,r9,r8
80009d96:	c0 71       	brne	80009da4 <__avr32_f64_add_return_nan>
80009d98:	30 0a       	mov	r10,0
80009d9a:	fc 1b 7f f0 	movh	r11,0x7ff0
80009d9e:	18 4b       	or	r11,r12
80009da0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009da4 <__avr32_f64_add_return_nan>:
80009da4:	3f fa       	mov	r10,-1
80009da6:	3f fb       	mov	r11,-1
80009da8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009dac <__avr32_f64_add_longshift>:
80009dac:	f1 b6 04 c0 	satu	r6,0x6
80009db0:	f0 0e 17 00 	moveq	lr,r8
80009db4:	c0 60       	breq	80009dc0 <__avr32_f64_add_longshift+0x14>
80009db6:	f2 05 09 4e 	lsl	lr,r9,r5
80009dba:	58 08       	cp.w	r8,0
80009dbc:	5f 18       	srne	r8
80009dbe:	10 4e       	or	lr,r8
80009dc0:	f2 06 0a 48 	lsr	r8,r9,r6
80009dc4:	30 09       	mov	r9,0
80009dc6:	cc 8b       	rjmp	80009d56 <__avr32_f64_add_shift_done>

80009dc8 <__avr32_f64_add_res_of>:
80009dc8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009dcc:	a1 9b       	lsr	r11,0x1
80009dce:	5d 0a       	ror	r10
80009dd0:	5d 0e       	ror	lr
80009dd2:	2f f7       	sub	r7,-1
80009dd4:	e0 47 07 ff 	cp.w	r7,2047
80009dd8:	f9 ba 00 00 	moveq	r10,0
80009ddc:	f9 bb 00 00 	moveq	r11,0
80009de0:	f9 be 00 00 	moveq	lr,0
80009de4:	cb fb       	rjmp	80009d62 <__avr32_f64_add_res_of_done>

80009de6 <__avr32_f64_add_op2_subnormal>:
80009de6:	30 16       	mov	r6,1
80009de8:	58 07       	cp.w	r7,0
80009dea:	ca 01       	brne	80009d2a <__avr32_f64_add+0x3e>
80009dec:	b5 cb       	cbr	r11,0x14
80009dee:	10 0a       	add	r10,r8
80009df0:	f6 09 00 4b 	adc	r11,r11,r9
80009df4:	18 4b       	or	r11,r12
80009df6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80009dfa:	d7 03       	nop

80009dfc <__avr32_f64_to_u32>:
80009dfc:	58 0b       	cp.w	r11,0
80009dfe:	5e 6d       	retmi	0

80009e00 <__avr32_f64_to_s32>:
80009e00:	f6 0c 15 01 	lsl	r12,r11,0x1
80009e04:	b5 9c       	lsr	r12,0x15
80009e06:	e0 2c 03 ff 	sub	r12,1023
80009e0a:	5e 3d       	retlo	0
80009e0c:	f8 0c 11 1f 	rsub	r12,r12,31
80009e10:	16 99       	mov	r9,r11
80009e12:	ab 7b       	lsl	r11,0xb
80009e14:	bf bb       	sbr	r11,0x1f
80009e16:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009e1a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009e1e:	a1 79       	lsl	r9,0x1
80009e20:	5e 2b       	reths	r11
80009e22:	5c 3b       	neg	r11
80009e24:	5e fb       	retal	r11

80009e26 <__avr32_u32_to_f64>:
80009e26:	f8 cb 00 00 	sub	r11,r12,0
80009e2a:	30 0c       	mov	r12,0
80009e2c:	c0 38       	rjmp	80009e32 <__avr32_s32_to_f64+0x4>

80009e2e <__avr32_s32_to_f64>:
80009e2e:	18 9b       	mov	r11,r12
80009e30:	5c 4b       	abs	r11
80009e32:	30 0a       	mov	r10,0
80009e34:	5e 0b       	reteq	r11
80009e36:	d4 01       	pushm	lr
80009e38:	e0 69 04 1e 	mov	r9,1054
80009e3c:	f6 08 12 00 	clz	r8,r11
80009e40:	c1 70       	breq	80009e6e <__avr32_s32_to_f64+0x40>
80009e42:	c0 c3       	brcs	80009e5a <__avr32_s32_to_f64+0x2c>
80009e44:	f0 0e 11 20 	rsub	lr,r8,32
80009e48:	f6 08 09 4b 	lsl	r11,r11,r8
80009e4c:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009e50:	1c 4b       	or	r11,lr
80009e52:	f4 08 09 4a 	lsl	r10,r10,r8
80009e56:	10 19       	sub	r9,r8
80009e58:	c0 b8       	rjmp	80009e6e <__avr32_s32_to_f64+0x40>
80009e5a:	f4 08 12 00 	clz	r8,r10
80009e5e:	f9 b8 03 00 	movlo	r8,0
80009e62:	f7 b8 02 e0 	subhs	r8,-32
80009e66:	f4 08 09 4b 	lsl	r11,r10,r8
80009e6a:	30 0a       	mov	r10,0
80009e6c:	10 19       	sub	r9,r8
80009e6e:	58 09       	cp.w	r9,0
80009e70:	e0 89 00 30 	brgt	80009ed0 <__avr32_s32_to_f64+0xa2>
80009e74:	5c 39       	neg	r9
80009e76:	2f f9       	sub	r9,-1
80009e78:	e0 49 00 36 	cp.w	r9,54
80009e7c:	c0 43       	brcs	80009e84 <__avr32_s32_to_f64+0x56>
80009e7e:	30 0b       	mov	r11,0
80009e80:	30 0a       	mov	r10,0
80009e82:	c2 68       	rjmp	80009ece <__avr32_s32_to_f64+0xa0>
80009e84:	2f 69       	sub	r9,-10
80009e86:	f2 08 11 20 	rsub	r8,r9,32
80009e8a:	e0 49 00 20 	cp.w	r9,32
80009e8e:	c0 b2       	brcc	80009ea4 <__avr32_s32_to_f64+0x76>
80009e90:	f4 08 09 4e 	lsl	lr,r10,r8
80009e94:	f6 08 09 48 	lsl	r8,r11,r8
80009e98:	f4 09 0a 4a 	lsr	r10,r10,r9
80009e9c:	f6 09 0a 4b 	lsr	r11,r11,r9
80009ea0:	10 4b       	or	r11,r8
80009ea2:	c0 88       	rjmp	80009eb2 <__avr32_s32_to_f64+0x84>
80009ea4:	f6 08 09 4e 	lsl	lr,r11,r8
80009ea8:	14 4e       	or	lr,r10
80009eaa:	16 9a       	mov	r10,r11
80009eac:	30 0b       	mov	r11,0
80009eae:	f4 09 0a 4a 	lsr	r10,r10,r9
80009eb2:	ed ba 00 00 	bld	r10,0x0
80009eb6:	c0 92       	brcc	80009ec8 <__avr32_s32_to_f64+0x9a>
80009eb8:	1c 7e       	tst	lr,lr
80009eba:	c0 41       	brne	80009ec2 <__avr32_s32_to_f64+0x94>
80009ebc:	ed ba 00 01 	bld	r10,0x1
80009ec0:	c0 42       	brcc	80009ec8 <__avr32_s32_to_f64+0x9a>
80009ec2:	2f fa       	sub	r10,-1
80009ec4:	f7 bb 02 ff 	subhs	r11,-1
80009ec8:	5c fc       	rol	r12
80009eca:	5d 0b       	ror	r11
80009ecc:	5d 0a       	ror	r10
80009ece:	d8 02       	popm	pc
80009ed0:	e0 68 03 ff 	mov	r8,1023
80009ed4:	ed ba 00 0b 	bld	r10,0xb
80009ed8:	f7 b8 00 ff 	subeq	r8,-1
80009edc:	10 0a       	add	r10,r8
80009ede:	5c 0b       	acr	r11
80009ee0:	f7 b9 03 fe 	sublo	r9,-2
80009ee4:	e0 49 07 ff 	cp.w	r9,2047
80009ee8:	c0 55       	brlt	80009ef2 <__avr32_s32_to_f64+0xc4>
80009eea:	30 0a       	mov	r10,0
80009eec:	fc 1b ff e0 	movh	r11,0xffe0
80009ef0:	c0 c8       	rjmp	80009f08 <__floatsidf_return_op1>
80009ef2:	ed bb 00 1f 	bld	r11,0x1f
80009ef6:	f7 b9 01 01 	subne	r9,1
80009efa:	ab 9a       	lsr	r10,0xb
80009efc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009f00:	a1 7b       	lsl	r11,0x1
80009f02:	ab 9b       	lsr	r11,0xb
80009f04:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80009f08 <__floatsidf_return_op1>:
80009f08:	a1 7c       	lsl	r12,0x1
80009f0a:	5d 0b       	ror	r11
80009f0c:	d8 02       	popm	pc

80009f0e <__avr32_f64_cmp_eq>:
80009f0e:	10 3a       	cp.w	r10,r8
80009f10:	f2 0b 13 00 	cpc	r11,r9
80009f14:	c0 80       	breq	80009f24 <__avr32_f64_cmp_eq+0x16>
80009f16:	a1 7b       	lsl	r11,0x1
80009f18:	a1 79       	lsl	r9,0x1
80009f1a:	14 4b       	or	r11,r10
80009f1c:	12 4b       	or	r11,r9
80009f1e:	10 4b       	or	r11,r8
80009f20:	5e 0f       	reteq	1
80009f22:	5e fd       	retal	0
80009f24:	a1 7b       	lsl	r11,0x1
80009f26:	fc 1c ff e0 	movh	r12,0xffe0
80009f2a:	58 0a       	cp.w	r10,0
80009f2c:	f8 0b 13 00 	cpc	r11,r12
80009f30:	5e 8f       	retls	1
80009f32:	5e fd       	retal	0

80009f34 <__avr32_f64_cmp_ge>:
80009f34:	1a de       	st.w	--sp,lr
80009f36:	1a d7       	st.w	--sp,r7
80009f38:	a1 7b       	lsl	r11,0x1
80009f3a:	5f 3c       	srlo	r12
80009f3c:	a1 79       	lsl	r9,0x1
80009f3e:	5f 37       	srlo	r7
80009f40:	5c fc       	rol	r12
80009f42:	fc 1e ff e0 	movh	lr,0xffe0
80009f46:	58 0a       	cp.w	r10,0
80009f48:	fc 0b 13 00 	cpc	r11,lr
80009f4c:	e0 8b 00 1d 	brhi	80009f86 <__avr32_f64_cmp_ge+0x52>
80009f50:	58 08       	cp.w	r8,0
80009f52:	fc 09 13 00 	cpc	r9,lr
80009f56:	e0 8b 00 18 	brhi	80009f86 <__avr32_f64_cmp_ge+0x52>
80009f5a:	58 0b       	cp.w	r11,0
80009f5c:	f5 ba 00 00 	subfeq	r10,0
80009f60:	c1 50       	breq	80009f8a <__avr32_f64_cmp_ge+0x56>
80009f62:	1b 07       	ld.w	r7,sp++
80009f64:	1b 0e       	ld.w	lr,sp++
80009f66:	58 3c       	cp.w	r12,3
80009f68:	c0 a0       	breq	80009f7c <__avr32_f64_cmp_ge+0x48>
80009f6a:	58 1c       	cp.w	r12,1
80009f6c:	c0 33       	brcs	80009f72 <__avr32_f64_cmp_ge+0x3e>
80009f6e:	5e 0f       	reteq	1
80009f70:	5e 1d       	retne	0
80009f72:	10 3a       	cp.w	r10,r8
80009f74:	f2 0b 13 00 	cpc	r11,r9
80009f78:	5e 2f       	reths	1
80009f7a:	5e 3d       	retlo	0
80009f7c:	14 38       	cp.w	r8,r10
80009f7e:	f6 09 13 00 	cpc	r9,r11
80009f82:	5e 2f       	reths	1
80009f84:	5e 3d       	retlo	0
80009f86:	1b 07       	ld.w	r7,sp++
80009f88:	d8 0a       	popm	pc,r12=0
80009f8a:	58 17       	cp.w	r7,1
80009f8c:	5f 0c       	sreq	r12
80009f8e:	58 09       	cp.w	r9,0
80009f90:	f5 b8 00 00 	subfeq	r8,0
80009f94:	1b 07       	ld.w	r7,sp++
80009f96:	1b 0e       	ld.w	lr,sp++
80009f98:	5e 0f       	reteq	1
80009f9a:	5e fc       	retal	r12

80009f9c <__avr32_f64_cmp_lt>:
80009f9c:	1a de       	st.w	--sp,lr
80009f9e:	1a d7       	st.w	--sp,r7
80009fa0:	a1 7b       	lsl	r11,0x1
80009fa2:	5f 3c       	srlo	r12
80009fa4:	a1 79       	lsl	r9,0x1
80009fa6:	5f 37       	srlo	r7
80009fa8:	5c fc       	rol	r12
80009faa:	fc 1e ff e0 	movh	lr,0xffe0
80009fae:	58 0a       	cp.w	r10,0
80009fb0:	fc 0b 13 00 	cpc	r11,lr
80009fb4:	e0 8b 00 1d 	brhi	80009fee <__avr32_f64_cmp_lt+0x52>
80009fb8:	58 08       	cp.w	r8,0
80009fba:	fc 09 13 00 	cpc	r9,lr
80009fbe:	e0 8b 00 18 	brhi	80009fee <__avr32_f64_cmp_lt+0x52>
80009fc2:	58 0b       	cp.w	r11,0
80009fc4:	f5 ba 00 00 	subfeq	r10,0
80009fc8:	c1 50       	breq	80009ff2 <__avr32_f64_cmp_lt+0x56>
80009fca:	1b 07       	ld.w	r7,sp++
80009fcc:	1b 0e       	ld.w	lr,sp++
80009fce:	58 3c       	cp.w	r12,3
80009fd0:	c0 a0       	breq	80009fe4 <__avr32_f64_cmp_lt+0x48>
80009fd2:	58 1c       	cp.w	r12,1
80009fd4:	c0 33       	brcs	80009fda <__avr32_f64_cmp_lt+0x3e>
80009fd6:	5e 0d       	reteq	0
80009fd8:	5e 1f       	retne	1
80009fda:	10 3a       	cp.w	r10,r8
80009fdc:	f2 0b 13 00 	cpc	r11,r9
80009fe0:	5e 2d       	reths	0
80009fe2:	5e 3f       	retlo	1
80009fe4:	14 38       	cp.w	r8,r10
80009fe6:	f6 09 13 00 	cpc	r9,r11
80009fea:	5e 2d       	reths	0
80009fec:	5e 3f       	retlo	1
80009fee:	1b 07       	ld.w	r7,sp++
80009ff0:	d8 0a       	popm	pc,r12=0
80009ff2:	58 17       	cp.w	r7,1
80009ff4:	5f 1c       	srne	r12
80009ff6:	58 09       	cp.w	r9,0
80009ff8:	f5 b8 00 00 	subfeq	r8,0
80009ffc:	1b 07       	ld.w	r7,sp++
80009ffe:	1b 0e       	ld.w	lr,sp++
8000a000:	5e 0d       	reteq	0
8000a002:	5e fc       	retal	r12

8000a004 <__avr32_f64_div>:
8000a004:	eb cd 40 ff 	pushm	r0-r7,lr
8000a008:	f7 e9 20 0e 	eor	lr,r11,r9
8000a00c:	f6 07 16 14 	lsr	r7,r11,0x14
8000a010:	a9 7b       	lsl	r11,0x9
8000a012:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000a016:	a9 7a       	lsl	r10,0x9
8000a018:	bd bb       	sbr	r11,0x1d
8000a01a:	e4 1b 3f ff 	andh	r11,0x3fff
8000a01e:	ab d7       	cbr	r7,0xb
8000a020:	e0 80 00 cc 	breq	8000a1b8 <__avr32_f64_div_round_subnormal+0x54>
8000a024:	e0 47 07 ff 	cp.w	r7,2047
8000a028:	e0 84 00 b5 	brge	8000a192 <__avr32_f64_div_round_subnormal+0x2e>
8000a02c:	f2 06 16 14 	lsr	r6,r9,0x14
8000a030:	a9 79       	lsl	r9,0x9
8000a032:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000a036:	a9 78       	lsl	r8,0x9
8000a038:	bd b9       	sbr	r9,0x1d
8000a03a:	e4 19 3f ff 	andh	r9,0x3fff
8000a03e:	ab d6       	cbr	r6,0xb
8000a040:	e0 80 00 e2 	breq	8000a204 <__avr32_f64_div_round_subnormal+0xa0>
8000a044:	e0 46 07 ff 	cp.w	r6,2047
8000a048:	e0 84 00 b2 	brge	8000a1ac <__avr32_f64_div_round_subnormal+0x48>
8000a04c:	0c 17       	sub	r7,r6
8000a04e:	fe 37 fc 01 	sub	r7,-1023
8000a052:	fc 1c 80 00 	movh	r12,0x8000
8000a056:	f8 03 16 01 	lsr	r3,r12,0x1
8000a05a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000a05e:	5c d4       	com	r4
8000a060:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000a064:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a068:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a06c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a070:	ea 03 15 02 	lsl	r3,r5,0x2
8000a074:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a078:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a07c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a080:	ea 03 15 02 	lsl	r3,r5,0x2
8000a084:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a088:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a08c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a090:	ea 03 15 02 	lsl	r3,r5,0x2
8000a094:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a098:	e4 09 07 40 	macu.d	r0,r2,r9
8000a09c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a0a0:	02 04       	add	r4,r1
8000a0a2:	5c 05       	acr	r5
8000a0a4:	a3 65       	lsl	r5,0x2
8000a0a6:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a0aa:	a3 64       	lsl	r4,0x2
8000a0ac:	5c 34       	neg	r4
8000a0ae:	f8 05 01 45 	sbc	r5,r12,r5
8000a0b2:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a0b6:	e4 05 07 40 	macu.d	r0,r2,r5
8000a0ba:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a0be:	02 04       	add	r4,r1
8000a0c0:	5c 05       	acr	r5
8000a0c2:	ea 03 15 02 	lsl	r3,r5,0x2
8000a0c6:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a0ca:	e8 02 15 02 	lsl	r2,r4,0x2
8000a0ce:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a0d2:	e4 09 07 40 	macu.d	r0,r2,r9
8000a0d6:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a0da:	02 04       	add	r4,r1
8000a0dc:	5c 05       	acr	r5
8000a0de:	a3 65       	lsl	r5,0x2
8000a0e0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a0e4:	a3 64       	lsl	r4,0x2
8000a0e6:	5c 34       	neg	r4
8000a0e8:	f8 05 01 45 	sbc	r5,r12,r5
8000a0ec:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a0f0:	e4 05 07 40 	macu.d	r0,r2,r5
8000a0f4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a0f8:	02 04       	add	r4,r1
8000a0fa:	5c 05       	acr	r5
8000a0fc:	ea 03 15 02 	lsl	r3,r5,0x2
8000a100:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a104:	e8 02 15 02 	lsl	r2,r4,0x2
8000a108:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000a10c:	e4 0b 07 40 	macu.d	r0,r2,r11
8000a110:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000a114:	02 02       	add	r2,r1
8000a116:	5c 03       	acr	r3
8000a118:	ed b3 00 1c 	bld	r3,0x1c
8000a11c:	c0 90       	breq	8000a12e <__avr32_f64_div+0x12a>
8000a11e:	a1 72       	lsl	r2,0x1
8000a120:	5c f3       	rol	r3
8000a122:	20 17       	sub	r7,1
8000a124:	a3 9a       	lsr	r10,0x3
8000a126:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000a12a:	a3 9b       	lsr	r11,0x3
8000a12c:	c0 58       	rjmp	8000a136 <__avr32_f64_div+0x132>
8000a12e:	a5 8a       	lsr	r10,0x4
8000a130:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000a134:	a5 8b       	lsr	r11,0x4
8000a136:	58 07       	cp.w	r7,0
8000a138:	e0 8a 00 8b 	brle	8000a24e <__avr32_f64_div_res_subnormal>
8000a13c:	e0 12 ff 00 	andl	r2,0xff00
8000a140:	e8 12 00 80 	orl	r2,0x80
8000a144:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a148:	e4 09 07 40 	macu.d	r0,r2,r9
8000a14c:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a150:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a154:	00 05       	add	r5,r0
8000a156:	f0 01 00 48 	adc	r8,r8,r1
8000a15a:	5c 09       	acr	r9
8000a15c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a160:	58 04       	cp.w	r4,0
8000a162:	5c 25       	cpc	r5

8000a164 <__avr32_f64_div_round_subnormal>:
8000a164:	f4 08 13 00 	cpc	r8,r10
8000a168:	f6 09 13 00 	cpc	r9,r11
8000a16c:	5f 36       	srlo	r6
8000a16e:	f8 06 17 00 	moveq	r6,r12
8000a172:	e4 0a 16 08 	lsr	r10,r2,0x8
8000a176:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000a17a:	e6 0b 16 08 	lsr	r11,r3,0x8
8000a17e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a182:	ed be 00 1f 	bld	lr,0x1f
8000a186:	ef bb 00 1f 	bst	r11,0x1f
8000a18a:	0c 0a       	add	r10,r6
8000a18c:	5c 0b       	acr	r11
8000a18e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a192:	e4 1b 00 0f 	andh	r11,0xf
8000a196:	14 4b       	or	r11,r10
8000a198:	e0 81 00 a7 	brne	8000a2e6 <__avr32_f64_div_res_subnormal+0x98>
8000a19c:	f2 06 16 14 	lsr	r6,r9,0x14
8000a1a0:	ab d6       	cbr	r6,0xb
8000a1a2:	e0 46 07 ff 	cp.w	r6,2047
8000a1a6:	e0 81 00 a4 	brne	8000a2ee <__avr32_f64_div_res_subnormal+0xa0>
8000a1aa:	c9 e8       	rjmp	8000a2e6 <__avr32_f64_div_res_subnormal+0x98>
8000a1ac:	e4 19 00 0f 	andh	r9,0xf
8000a1b0:	10 49       	or	r9,r8
8000a1b2:	e0 81 00 9a 	brne	8000a2e6 <__avr32_f64_div_res_subnormal+0x98>
8000a1b6:	c9 28       	rjmp	8000a2da <__avr32_f64_div_res_subnormal+0x8c>
8000a1b8:	a3 7b       	lsl	r11,0x3
8000a1ba:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000a1be:	a3 7a       	lsl	r10,0x3
8000a1c0:	f5 eb 10 04 	or	r4,r10,r11
8000a1c4:	e0 80 00 a0 	breq	8000a304 <__avr32_f64_div_op1_zero>
8000a1c8:	f6 04 12 00 	clz	r4,r11
8000a1cc:	c1 70       	breq	8000a1fa <__avr32_f64_div_round_subnormal+0x96>
8000a1ce:	c0 c3       	brcs	8000a1e6 <__avr32_f64_div_round_subnormal+0x82>
8000a1d0:	e8 05 11 20 	rsub	r5,r4,32
8000a1d4:	f6 04 09 4b 	lsl	r11,r11,r4
8000a1d8:	f4 05 0a 45 	lsr	r5,r10,r5
8000a1dc:	0a 4b       	or	r11,r5
8000a1de:	f4 04 09 4a 	lsl	r10,r10,r4
8000a1e2:	08 17       	sub	r7,r4
8000a1e4:	c0 b8       	rjmp	8000a1fa <__avr32_f64_div_round_subnormal+0x96>
8000a1e6:	f4 04 12 00 	clz	r4,r10
8000a1ea:	f9 b4 03 00 	movlo	r4,0
8000a1ee:	f7 b4 02 e0 	subhs	r4,-32
8000a1f2:	f4 04 09 4b 	lsl	r11,r10,r4
8000a1f6:	30 0a       	mov	r10,0
8000a1f8:	08 17       	sub	r7,r4
8000a1fa:	a3 8a       	lsr	r10,0x2
8000a1fc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000a200:	a3 8b       	lsr	r11,0x2
8000a202:	c1 1b       	rjmp	8000a024 <__avr32_f64_div+0x20>
8000a204:	a3 79       	lsl	r9,0x3
8000a206:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000a20a:	a3 78       	lsl	r8,0x3
8000a20c:	f3 e8 10 04 	or	r4,r9,r8
8000a210:	c6 f0       	breq	8000a2ee <__avr32_f64_div_res_subnormal+0xa0>
8000a212:	f2 04 12 00 	clz	r4,r9
8000a216:	c1 70       	breq	8000a244 <__avr32_f64_div_round_subnormal+0xe0>
8000a218:	c0 c3       	brcs	8000a230 <__avr32_f64_div_round_subnormal+0xcc>
8000a21a:	e8 05 11 20 	rsub	r5,r4,32
8000a21e:	f2 04 09 49 	lsl	r9,r9,r4
8000a222:	f0 05 0a 45 	lsr	r5,r8,r5
8000a226:	0a 49       	or	r9,r5
8000a228:	f0 04 09 48 	lsl	r8,r8,r4
8000a22c:	08 16       	sub	r6,r4
8000a22e:	c0 b8       	rjmp	8000a244 <__avr32_f64_div_round_subnormal+0xe0>
8000a230:	f0 04 12 00 	clz	r4,r8
8000a234:	f9 b4 03 00 	movlo	r4,0
8000a238:	f7 b4 02 e0 	subhs	r4,-32
8000a23c:	f0 04 09 49 	lsl	r9,r8,r4
8000a240:	30 08       	mov	r8,0
8000a242:	08 16       	sub	r6,r4
8000a244:	a3 88       	lsr	r8,0x2
8000a246:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000a24a:	a3 89       	lsr	r9,0x2
8000a24c:	cf ca       	rjmp	8000a044 <__avr32_f64_div+0x40>

8000a24e <__avr32_f64_div_res_subnormal>:
8000a24e:	5c 37       	neg	r7
8000a250:	2f f7       	sub	r7,-1
8000a252:	f1 b7 04 c0 	satu	r7,0x6
8000a256:	e0 47 00 20 	cp.w	r7,32
8000a25a:	c1 54       	brge	8000a284 <__avr32_f64_div_res_subnormal+0x36>
8000a25c:	ee 06 11 20 	rsub	r6,r7,32
8000a260:	e4 07 0a 42 	lsr	r2,r2,r7
8000a264:	e6 06 09 4c 	lsl	r12,r3,r6
8000a268:	18 42       	or	r2,r12
8000a26a:	e6 07 0a 43 	lsr	r3,r3,r7
8000a26e:	f4 06 09 41 	lsl	r1,r10,r6
8000a272:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a276:	f6 06 09 4c 	lsl	r12,r11,r6
8000a27a:	18 4a       	or	r10,r12
8000a27c:	f6 07 0a 4b 	lsr	r11,r11,r7
8000a280:	30 00       	mov	r0,0
8000a282:	c1 58       	rjmp	8000a2ac <__avr32_f64_div_res_subnormal+0x5e>
8000a284:	ee 06 11 20 	rsub	r6,r7,32
8000a288:	f9 b0 00 00 	moveq	r0,0
8000a28c:	f9 bc 00 00 	moveq	r12,0
8000a290:	c0 50       	breq	8000a29a <__avr32_f64_div_res_subnormal+0x4c>
8000a292:	f4 06 09 40 	lsl	r0,r10,r6
8000a296:	f6 06 09 4c 	lsl	r12,r11,r6
8000a29a:	e6 07 0a 42 	lsr	r2,r3,r7
8000a29e:	30 03       	mov	r3,0
8000a2a0:	f4 07 0a 41 	lsr	r1,r10,r7
8000a2a4:	18 41       	or	r1,r12
8000a2a6:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a2aa:	30 0b       	mov	r11,0
8000a2ac:	e0 12 ff 00 	andl	r2,0xff00
8000a2b0:	e8 12 00 80 	orl	r2,0x80
8000a2b4:	e6 08 06 46 	mulu.d	r6,r3,r8
8000a2b8:	e4 09 07 46 	macu.d	r6,r2,r9
8000a2bc:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a2c0:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a2c4:	0c 05       	add	r5,r6
8000a2c6:	f0 07 00 48 	adc	r8,r8,r7
8000a2ca:	5c 09       	acr	r9
8000a2cc:	30 07       	mov	r7,0
8000a2ce:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a2d2:	00 34       	cp.w	r4,r0
8000a2d4:	e2 05 13 00 	cpc	r5,r1
8000a2d8:	c4 6b       	rjmp	8000a164 <__avr32_f64_div_round_subnormal>
8000a2da:	1c 9b       	mov	r11,lr
8000a2dc:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a2e0:	30 0a       	mov	r10,0
8000a2e2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a2e6:	3f fb       	mov	r11,-1
8000a2e8:	30 0a       	mov	r10,0
8000a2ea:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a2ee:	f5 eb 10 04 	or	r4,r10,r11
8000a2f2:	c0 90       	breq	8000a304 <__avr32_f64_div_op1_zero>
8000a2f4:	1c 9b       	mov	r11,lr
8000a2f6:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a2fa:	ea 1b 7f f0 	orh	r11,0x7ff0
8000a2fe:	30 0a       	mov	r10,0
8000a300:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000a304 <__avr32_f64_div_op1_zero>:
8000a304:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000a308:	ce f0       	breq	8000a2e6 <__avr32_f64_div_res_subnormal+0x98>
8000a30a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000a30e:	e0 44 07 ff 	cp.w	r4,2047
8000a312:	ce 41       	brne	8000a2da <__avr32_f64_div_res_subnormal+0x8c>
8000a314:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000a318:	ce 10       	breq	8000a2da <__avr32_f64_div_res_subnormal+0x8c>
8000a31a:	ce 6b       	rjmp	8000a2e6 <__avr32_f64_div_res_subnormal+0x98>

8000a31c <__avr32_udiv64>:
8000a31c:	d4 31       	pushm	r0-r7,lr
8000a31e:	1a 97       	mov	r7,sp
8000a320:	20 3d       	sub	sp,12
8000a322:	10 9c       	mov	r12,r8
8000a324:	12 9e       	mov	lr,r9
8000a326:	14 93       	mov	r3,r10
8000a328:	58 09       	cp.w	r9,0
8000a32a:	e0 81 00 bd 	brne	8000a4a4 <__avr32_udiv64+0x188>
8000a32e:	16 38       	cp.w	r8,r11
8000a330:	e0 88 00 40 	brls	8000a3b0 <__avr32_udiv64+0x94>
8000a334:	f0 08 12 00 	clz	r8,r8
8000a338:	c0 d0       	breq	8000a352 <__avr32_udiv64+0x36>
8000a33a:	f6 08 09 4b 	lsl	r11,r11,r8
8000a33e:	f0 09 11 20 	rsub	r9,r8,32
8000a342:	f8 08 09 4c 	lsl	r12,r12,r8
8000a346:	f4 09 0a 49 	lsr	r9,r10,r9
8000a34a:	f4 08 09 43 	lsl	r3,r10,r8
8000a34e:	f3 eb 10 0b 	or	r11,r9,r11
8000a352:	f8 0e 16 10 	lsr	lr,r12,0x10
8000a356:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000a35a:	f6 0e 0d 00 	divu	r0,r11,lr
8000a35e:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a362:	00 99       	mov	r9,r0
8000a364:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a368:	e0 0a 02 48 	mul	r8,r0,r10
8000a36c:	10 3b       	cp.w	r11,r8
8000a36e:	c0 a2       	brcc	8000a382 <__avr32_udiv64+0x66>
8000a370:	20 19       	sub	r9,1
8000a372:	18 0b       	add	r11,r12
8000a374:	18 3b       	cp.w	r11,r12
8000a376:	c0 63       	brcs	8000a382 <__avr32_udiv64+0x66>
8000a378:	10 3b       	cp.w	r11,r8
8000a37a:	f7 b9 03 01 	sublo	r9,1
8000a37e:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a382:	f6 08 01 01 	sub	r1,r11,r8
8000a386:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a38a:	e2 0e 0d 00 	divu	r0,r1,lr
8000a38e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a392:	00 98       	mov	r8,r0
8000a394:	e0 0a 02 4a 	mul	r10,r0,r10
8000a398:	14 33       	cp.w	r3,r10
8000a39a:	c0 82       	brcc	8000a3aa <__avr32_udiv64+0x8e>
8000a39c:	20 18       	sub	r8,1
8000a39e:	18 03       	add	r3,r12
8000a3a0:	18 33       	cp.w	r3,r12
8000a3a2:	c0 43       	brcs	8000a3aa <__avr32_udiv64+0x8e>
8000a3a4:	14 33       	cp.w	r3,r10
8000a3a6:	f7 b8 03 01 	sublo	r8,1
8000a3aa:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000a3ae:	cd f8       	rjmp	8000a56c <__avr32_udiv64+0x250>
8000a3b0:	58 08       	cp.w	r8,0
8000a3b2:	c0 51       	brne	8000a3bc <__avr32_udiv64+0xa0>
8000a3b4:	30 19       	mov	r9,1
8000a3b6:	f2 08 0d 08 	divu	r8,r9,r8
8000a3ba:	10 9c       	mov	r12,r8
8000a3bc:	f8 06 12 00 	clz	r6,r12
8000a3c0:	c0 41       	brne	8000a3c8 <__avr32_udiv64+0xac>
8000a3c2:	18 1b       	sub	r11,r12
8000a3c4:	30 19       	mov	r9,1
8000a3c6:	c4 08       	rjmp	8000a446 <__avr32_udiv64+0x12a>
8000a3c8:	ec 01 11 20 	rsub	r1,r6,32
8000a3cc:	f4 01 0a 49 	lsr	r9,r10,r1
8000a3d0:	f8 06 09 4c 	lsl	r12,r12,r6
8000a3d4:	f6 06 09 48 	lsl	r8,r11,r6
8000a3d8:	f6 01 0a 41 	lsr	r1,r11,r1
8000a3dc:	f3 e8 10 08 	or	r8,r9,r8
8000a3e0:	f8 03 16 10 	lsr	r3,r12,0x10
8000a3e4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a3e8:	e2 03 0d 00 	divu	r0,r1,r3
8000a3ec:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a3f0:	00 9e       	mov	lr,r0
8000a3f2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a3f6:	e0 05 02 49 	mul	r9,r0,r5
8000a3fa:	12 3b       	cp.w	r11,r9
8000a3fc:	c0 a2       	brcc	8000a410 <__avr32_udiv64+0xf4>
8000a3fe:	20 1e       	sub	lr,1
8000a400:	18 0b       	add	r11,r12
8000a402:	18 3b       	cp.w	r11,r12
8000a404:	c0 63       	brcs	8000a410 <__avr32_udiv64+0xf4>
8000a406:	12 3b       	cp.w	r11,r9
8000a408:	f7 be 03 01 	sublo	lr,1
8000a40c:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a410:	12 1b       	sub	r11,r9
8000a412:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a416:	f6 03 0d 02 	divu	r2,r11,r3
8000a41a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000a41e:	04 99       	mov	r9,r2
8000a420:	e4 05 02 4b 	mul	r11,r2,r5
8000a424:	16 38       	cp.w	r8,r11
8000a426:	c0 a2       	brcc	8000a43a <__avr32_udiv64+0x11e>
8000a428:	20 19       	sub	r9,1
8000a42a:	18 08       	add	r8,r12
8000a42c:	18 38       	cp.w	r8,r12
8000a42e:	c0 63       	brcs	8000a43a <__avr32_udiv64+0x11e>
8000a430:	16 38       	cp.w	r8,r11
8000a432:	f7 b9 03 01 	sublo	r9,1
8000a436:	f1 dc e3 08 	addcs	r8,r8,r12
8000a43a:	f4 06 09 43 	lsl	r3,r10,r6
8000a43e:	f0 0b 01 0b 	sub	r11,r8,r11
8000a442:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000a446:	f8 06 16 10 	lsr	r6,r12,0x10
8000a44a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000a44e:	f6 06 0d 00 	divu	r0,r11,r6
8000a452:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a456:	00 9a       	mov	r10,r0
8000a458:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a45c:	e0 0e 02 48 	mul	r8,r0,lr
8000a460:	10 3b       	cp.w	r11,r8
8000a462:	c0 a2       	brcc	8000a476 <__avr32_udiv64+0x15a>
8000a464:	20 1a       	sub	r10,1
8000a466:	18 0b       	add	r11,r12
8000a468:	18 3b       	cp.w	r11,r12
8000a46a:	c0 63       	brcs	8000a476 <__avr32_udiv64+0x15a>
8000a46c:	10 3b       	cp.w	r11,r8
8000a46e:	f7 ba 03 01 	sublo	r10,1
8000a472:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a476:	f6 08 01 01 	sub	r1,r11,r8
8000a47a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a47e:	e2 06 0d 00 	divu	r0,r1,r6
8000a482:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a486:	00 98       	mov	r8,r0
8000a488:	e0 0e 02 4b 	mul	r11,r0,lr
8000a48c:	16 33       	cp.w	r3,r11
8000a48e:	c0 82       	brcc	8000a49e <__avr32_udiv64+0x182>
8000a490:	20 18       	sub	r8,1
8000a492:	18 03       	add	r3,r12
8000a494:	18 33       	cp.w	r3,r12
8000a496:	c0 43       	brcs	8000a49e <__avr32_udiv64+0x182>
8000a498:	16 33       	cp.w	r3,r11
8000a49a:	f7 b8 03 01 	sublo	r8,1
8000a49e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000a4a2:	c6 98       	rjmp	8000a574 <__avr32_udiv64+0x258>
8000a4a4:	16 39       	cp.w	r9,r11
8000a4a6:	e0 8b 00 65 	brhi	8000a570 <__avr32_udiv64+0x254>
8000a4aa:	f2 09 12 00 	clz	r9,r9
8000a4ae:	c0 b1       	brne	8000a4c4 <__avr32_udiv64+0x1a8>
8000a4b0:	10 3a       	cp.w	r10,r8
8000a4b2:	5f 2a       	srhs	r10
8000a4b4:	1c 3b       	cp.w	r11,lr
8000a4b6:	5f b8       	srhi	r8
8000a4b8:	10 4a       	or	r10,r8
8000a4ba:	f2 0a 18 00 	cp.b	r10,r9
8000a4be:	c5 90       	breq	8000a570 <__avr32_udiv64+0x254>
8000a4c0:	30 18       	mov	r8,1
8000a4c2:	c5 98       	rjmp	8000a574 <__avr32_udiv64+0x258>
8000a4c4:	f0 09 09 46 	lsl	r6,r8,r9
8000a4c8:	f2 03 11 20 	rsub	r3,r9,32
8000a4cc:	fc 09 09 4e 	lsl	lr,lr,r9
8000a4d0:	f0 03 0a 48 	lsr	r8,r8,r3
8000a4d4:	f6 09 09 4c 	lsl	r12,r11,r9
8000a4d8:	f4 03 0a 42 	lsr	r2,r10,r3
8000a4dc:	ef 46 ff f4 	st.w	r7[-12],r6
8000a4e0:	f6 03 0a 43 	lsr	r3,r11,r3
8000a4e4:	18 42       	or	r2,r12
8000a4e6:	f1 ee 10 0c 	or	r12,r8,lr
8000a4ea:	f8 01 16 10 	lsr	r1,r12,0x10
8000a4ee:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a4f2:	e6 01 0d 04 	divu	r4,r3,r1
8000a4f6:	e4 03 16 10 	lsr	r3,r2,0x10
8000a4fa:	08 9e       	mov	lr,r4
8000a4fc:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000a500:	e8 06 02 48 	mul	r8,r4,r6
8000a504:	10 33       	cp.w	r3,r8
8000a506:	c0 a2       	brcc	8000a51a <__avr32_udiv64+0x1fe>
8000a508:	20 1e       	sub	lr,1
8000a50a:	18 03       	add	r3,r12
8000a50c:	18 33       	cp.w	r3,r12
8000a50e:	c0 63       	brcs	8000a51a <__avr32_udiv64+0x1fe>
8000a510:	10 33       	cp.w	r3,r8
8000a512:	f7 be 03 01 	sublo	lr,1
8000a516:	e7 dc e3 03 	addcs	r3,r3,r12
8000a51a:	10 13       	sub	r3,r8
8000a51c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000a520:	e6 01 0d 00 	divu	r0,r3,r1
8000a524:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a528:	00 98       	mov	r8,r0
8000a52a:	e0 06 02 46 	mul	r6,r0,r6
8000a52e:	0c 3b       	cp.w	r11,r6
8000a530:	c0 a2       	brcc	8000a544 <__avr32_udiv64+0x228>
8000a532:	20 18       	sub	r8,1
8000a534:	18 0b       	add	r11,r12
8000a536:	18 3b       	cp.w	r11,r12
8000a538:	c0 63       	brcs	8000a544 <__avr32_udiv64+0x228>
8000a53a:	0c 3b       	cp.w	r11,r6
8000a53c:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a540:	f7 b8 03 01 	sublo	r8,1
8000a544:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000a548:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000a54c:	0c 1b       	sub	r11,r6
8000a54e:	f0 04 06 42 	mulu.d	r2,r8,r4
8000a552:	06 95       	mov	r5,r3
8000a554:	16 35       	cp.w	r5,r11
8000a556:	e0 8b 00 0a 	brhi	8000a56a <__avr32_udiv64+0x24e>
8000a55a:	5f 0b       	sreq	r11
8000a55c:	f4 09 09 49 	lsl	r9,r10,r9
8000a560:	12 32       	cp.w	r2,r9
8000a562:	5f b9       	srhi	r9
8000a564:	f7 e9 00 09 	and	r9,r11,r9
8000a568:	c0 60       	breq	8000a574 <__avr32_udiv64+0x258>
8000a56a:	20 18       	sub	r8,1
8000a56c:	30 09       	mov	r9,0
8000a56e:	c0 38       	rjmp	8000a574 <__avr32_udiv64+0x258>
8000a570:	30 09       	mov	r9,0
8000a572:	12 98       	mov	r8,r9
8000a574:	10 9a       	mov	r10,r8
8000a576:	12 93       	mov	r3,r9
8000a578:	10 92       	mov	r2,r8
8000a57a:	12 9b       	mov	r11,r9
8000a57c:	2f dd       	sub	sp,-12
8000a57e:	d8 32       	popm	r0-r7,pc

8000a580 <__avr32_umod64>:
8000a580:	d4 31       	pushm	r0-r7,lr
8000a582:	1a 97       	mov	r7,sp
8000a584:	20 3d       	sub	sp,12
8000a586:	10 9c       	mov	r12,r8
8000a588:	12 95       	mov	r5,r9
8000a58a:	14 9e       	mov	lr,r10
8000a58c:	16 91       	mov	r1,r11
8000a58e:	16 96       	mov	r6,r11
8000a590:	58 09       	cp.w	r9,0
8000a592:	e0 81 00 81 	brne	8000a694 <__avr32_umod64+0x114>
8000a596:	16 38       	cp.w	r8,r11
8000a598:	e0 88 00 12 	brls	8000a5bc <__avr32_umod64+0x3c>
8000a59c:	f0 08 12 00 	clz	r8,r8
8000a5a0:	c4 e0       	breq	8000a63c <__avr32_umod64+0xbc>
8000a5a2:	f6 08 09 46 	lsl	r6,r11,r8
8000a5a6:	f8 08 09 4c 	lsl	r12,r12,r8
8000a5aa:	f0 0b 11 20 	rsub	r11,r8,32
8000a5ae:	f4 08 09 4e 	lsl	lr,r10,r8
8000a5b2:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000a5b6:	f7 e6 10 06 	or	r6,r11,r6
8000a5ba:	c4 18       	rjmp	8000a63c <__avr32_umod64+0xbc>
8000a5bc:	58 08       	cp.w	r8,0
8000a5be:	c0 51       	brne	8000a5c8 <__avr32_umod64+0x48>
8000a5c0:	30 19       	mov	r9,1
8000a5c2:	f2 08 0d 08 	divu	r8,r9,r8
8000a5c6:	10 9c       	mov	r12,r8
8000a5c8:	f8 08 12 00 	clz	r8,r12
8000a5cc:	c0 31       	brne	8000a5d2 <__avr32_umod64+0x52>
8000a5ce:	18 16       	sub	r6,r12
8000a5d0:	c3 68       	rjmp	8000a63c <__avr32_umod64+0xbc>
8000a5d2:	f0 03 11 20 	rsub	r3,r8,32
8000a5d6:	f4 03 0a 4b 	lsr	r11,r10,r3
8000a5da:	f8 08 09 4c 	lsl	r12,r12,r8
8000a5de:	ec 08 09 49 	lsl	r9,r6,r8
8000a5e2:	ec 03 0a 43 	lsr	r3,r6,r3
8000a5e6:	f7 e9 10 09 	or	r9,r11,r9
8000a5ea:	f8 05 16 10 	lsr	r5,r12,0x10
8000a5ee:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a5f2:	e6 05 0d 02 	divu	r2,r3,r5
8000a5f6:	f2 0e 16 10 	lsr	lr,r9,0x10
8000a5fa:	ec 02 02 4b 	mul	r11,r6,r2
8000a5fe:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000a602:	16 3e       	cp.w	lr,r11
8000a604:	c0 72       	brcc	8000a612 <__avr32_umod64+0x92>
8000a606:	18 0e       	add	lr,r12
8000a608:	18 3e       	cp.w	lr,r12
8000a60a:	c0 43       	brcs	8000a612 <__avr32_umod64+0x92>
8000a60c:	16 3e       	cp.w	lr,r11
8000a60e:	fd dc e3 0e 	addcs	lr,lr,r12
8000a612:	fc 0b 01 03 	sub	r3,lr,r11
8000a616:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000a61a:	e6 05 0d 02 	divu	r2,r3,r5
8000a61e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a622:	a5 36       	mul	r6,r2
8000a624:	0c 39       	cp.w	r9,r6
8000a626:	c0 72       	brcc	8000a634 <__avr32_umod64+0xb4>
8000a628:	18 09       	add	r9,r12
8000a62a:	18 39       	cp.w	r9,r12
8000a62c:	c0 43       	brcs	8000a634 <__avr32_umod64+0xb4>
8000a62e:	0c 39       	cp.w	r9,r6
8000a630:	f3 dc e3 09 	addcs	r9,r9,r12
8000a634:	f2 06 01 06 	sub	r6,r9,r6
8000a638:	f4 08 09 4e 	lsl	lr,r10,r8
8000a63c:	f8 0a 16 10 	lsr	r10,r12,0x10
8000a640:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a644:	ec 0a 0d 02 	divu	r2,r6,r10
8000a648:	fc 09 16 10 	lsr	r9,lr,0x10
8000a64c:	ea 02 02 4b 	mul	r11,r5,r2
8000a650:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a654:	16 39       	cp.w	r9,r11
8000a656:	c0 72       	brcc	8000a664 <__avr32_umod64+0xe4>
8000a658:	18 09       	add	r9,r12
8000a65a:	18 39       	cp.w	r9,r12
8000a65c:	c0 43       	brcs	8000a664 <__avr32_umod64+0xe4>
8000a65e:	16 39       	cp.w	r9,r11
8000a660:	f3 dc e3 09 	addcs	r9,r9,r12
8000a664:	f2 0b 01 0b 	sub	r11,r9,r11
8000a668:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a66c:	f6 0a 0d 0a 	divu	r10,r11,r10
8000a670:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000a674:	ea 0a 02 4a 	mul	r10,r5,r10
8000a678:	14 3e       	cp.w	lr,r10
8000a67a:	c0 72       	brcc	8000a688 <__avr32_umod64+0x108>
8000a67c:	18 0e       	add	lr,r12
8000a67e:	18 3e       	cp.w	lr,r12
8000a680:	c0 43       	brcs	8000a688 <__avr32_umod64+0x108>
8000a682:	14 3e       	cp.w	lr,r10
8000a684:	fd dc e3 0e 	addcs	lr,lr,r12
8000a688:	fc 0a 01 0a 	sub	r10,lr,r10
8000a68c:	30 0b       	mov	r11,0
8000a68e:	f4 08 0a 4a 	lsr	r10,r10,r8
8000a692:	c7 b8       	rjmp	8000a788 <__avr32_umod64+0x208>
8000a694:	16 39       	cp.w	r9,r11
8000a696:	e0 8b 00 79 	brhi	8000a788 <__avr32_umod64+0x208>
8000a69a:	f2 09 12 00 	clz	r9,r9
8000a69e:	c1 21       	brne	8000a6c2 <__avr32_umod64+0x142>
8000a6a0:	10 3a       	cp.w	r10,r8
8000a6a2:	5f 2b       	srhs	r11
8000a6a4:	0a 31       	cp.w	r1,r5
8000a6a6:	5f ba       	srhi	r10
8000a6a8:	f7 ea 10 0a 	or	r10,r11,r10
8000a6ac:	f2 0a 18 00 	cp.b	r10,r9
8000a6b0:	c0 60       	breq	8000a6bc <__avr32_umod64+0x13c>
8000a6b2:	fc 08 01 0c 	sub	r12,lr,r8
8000a6b6:	e2 05 01 46 	sbc	r6,r1,r5
8000a6ba:	18 9e       	mov	lr,r12
8000a6bc:	0c 9b       	mov	r11,r6
8000a6be:	1c 9a       	mov	r10,lr
8000a6c0:	c6 48       	rjmp	8000a788 <__avr32_umod64+0x208>
8000a6c2:	ea 09 09 4c 	lsl	r12,r5,r9
8000a6c6:	f2 06 11 20 	rsub	r6,r9,32
8000a6ca:	f6 09 09 4b 	lsl	r11,r11,r9
8000a6ce:	f0 09 09 42 	lsl	r2,r8,r9
8000a6d2:	ef 46 ff f4 	st.w	r7[-12],r6
8000a6d6:	f0 06 0a 48 	lsr	r8,r8,r6
8000a6da:	18 48       	or	r8,r12
8000a6dc:	e2 06 0a 4c 	lsr	r12,r1,r6
8000a6e0:	f4 09 09 43 	lsl	r3,r10,r9
8000a6e4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000a6e8:	f4 06 0a 4a 	lsr	r10,r10,r6
8000a6ec:	16 4a       	or	r10,r11
8000a6ee:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a6f2:	f8 0b 0d 04 	divu	r4,r12,r11
8000a6f6:	f4 0c 16 10 	lsr	r12,r10,0x10
8000a6fa:	08 91       	mov	r1,r4
8000a6fc:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000a700:	e8 0e 02 46 	mul	r6,r4,lr
8000a704:	0c 3c       	cp.w	r12,r6
8000a706:	c0 a2       	brcc	8000a71a <__avr32_umod64+0x19a>
8000a708:	20 11       	sub	r1,1
8000a70a:	10 0c       	add	r12,r8
8000a70c:	10 3c       	cp.w	r12,r8
8000a70e:	c0 63       	brcs	8000a71a <__avr32_umod64+0x19a>
8000a710:	0c 3c       	cp.w	r12,r6
8000a712:	f7 b1 03 01 	sublo	r1,1
8000a716:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000a71a:	0c 1c       	sub	r12,r6
8000a71c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000a720:	f8 0b 0d 04 	divu	r4,r12,r11
8000a724:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000a728:	08 96       	mov	r6,r4
8000a72a:	e8 0e 02 4e 	mul	lr,r4,lr
8000a72e:	1c 3b       	cp.w	r11,lr
8000a730:	c0 a2       	brcc	8000a744 <__avr32_umod64+0x1c4>
8000a732:	20 16       	sub	r6,1
8000a734:	10 0b       	add	r11,r8
8000a736:	10 3b       	cp.w	r11,r8
8000a738:	c0 63       	brcs	8000a744 <__avr32_umod64+0x1c4>
8000a73a:	1c 3b       	cp.w	r11,lr
8000a73c:	f7 b6 03 01 	sublo	r6,1
8000a740:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000a744:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000a748:	1c 1b       	sub	r11,lr
8000a74a:	e2 02 06 40 	mulu.d	r0,r1,r2
8000a74e:	00 9e       	mov	lr,r0
8000a750:	02 9c       	mov	r12,r1
8000a752:	16 3c       	cp.w	r12,r11
8000a754:	e0 8b 00 08 	brhi	8000a764 <__avr32_umod64+0x1e4>
8000a758:	5f 06       	sreq	r6
8000a75a:	06 30       	cp.w	r0,r3
8000a75c:	5f ba       	srhi	r10
8000a75e:	ed ea 00 0a 	and	r10,r6,r10
8000a762:	c0 60       	breq	8000a76e <__avr32_umod64+0x1ee>
8000a764:	fc 02 01 04 	sub	r4,lr,r2
8000a768:	f8 08 01 4c 	sbc	r12,r12,r8
8000a76c:	08 9e       	mov	lr,r4
8000a76e:	e6 0e 01 0a 	sub	r10,r3,lr
8000a772:	f6 0c 01 4c 	sbc	r12,r11,r12
8000a776:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000a77a:	f8 09 0a 4b 	lsr	r11,r12,r9
8000a77e:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a782:	f8 01 09 4c 	lsl	r12,r12,r1
8000a786:	18 4a       	or	r10,r12
8000a788:	2f dd       	sub	sp,-12
8000a78a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000a800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000a800:	c0 08       	rjmp	8000a800 <_evba>
	...

8000a804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000a804:	c0 08       	rjmp	8000a804 <_handle_TLB_Multiple_Hit>
	...

8000a808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000a808:	c0 08       	rjmp	8000a808 <_handle_Bus_Error_Data_Fetch>
	...

8000a80c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000a80c:	c0 08       	rjmp	8000a80c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000a810:	c0 08       	rjmp	8000a810 <_handle_NMI>
	...

8000a814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000a814:	c0 08       	rjmp	8000a814 <_handle_Instruction_Address>
	...

8000a818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000a818:	c0 08       	rjmp	8000a818 <_handle_ITLB_Protection>
	...

8000a81c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000a81c:	c0 08       	rjmp	8000a81c <_handle_Breakpoint>
	...

8000a820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000a820:	c0 08       	rjmp	8000a820 <_handle_Illegal_Opcode>
	...

8000a824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000a824:	c0 08       	rjmp	8000a824 <_handle_Unimplemented_Instruction>
	...

8000a828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000a828:	c0 08       	rjmp	8000a828 <_handle_Privilege_Violation>
	...

8000a82c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000a82c:	c0 08       	rjmp	8000a82c <_handle_Floating_Point>
	...

8000a830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000a830:	c0 08       	rjmp	8000a830 <_handle_Coprocessor_Absent>
	...

8000a834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000a834:	c0 08       	rjmp	8000a834 <_handle_Data_Address_Read>
	...

8000a838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000a838:	c0 08       	rjmp	8000a838 <_handle_Data_Address_Write>
	...

8000a83c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000a83c:	c0 08       	rjmp	8000a83c <_handle_DTLB_Protection_Read>
	...

8000a840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000a840:	c0 08       	rjmp	8000a840 <_handle_DTLB_Protection_Write>
	...

8000a844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000a844:	c0 08       	rjmp	8000a844 <_handle_DTLB_Modified>
	...

8000a850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000a850:	c0 08       	rjmp	8000a850 <_handle_ITLB_Miss>
	...

8000a860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000a860:	c0 08       	rjmp	8000a860 <_handle_DTLB_Miss_Read>
	...

8000a870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000a870:	c0 08       	rjmp	8000a870 <_handle_DTLB_Miss_Write>
	...

8000a900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000a900:	c0 08       	rjmp	8000a900 <_handle_Supervisor_Call>
8000a902:	d7 03       	nop

8000a904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a904:	30 0c       	mov	r12,0
8000a906:	fe b0 d0 ab 	rcall	80004a5c <_get_interrupt_handler>
8000a90a:	58 0c       	cp.w	r12,0
8000a90c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a910:	d6 03       	rete

8000a912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a912:	30 1c       	mov	r12,1
8000a914:	fe b0 d0 a4 	rcall	80004a5c <_get_interrupt_handler>
8000a918:	58 0c       	cp.w	r12,0
8000a91a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a91e:	d6 03       	rete

8000a920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a920:	30 2c       	mov	r12,2
8000a922:	fe b0 d0 9d 	rcall	80004a5c <_get_interrupt_handler>
8000a926:	58 0c       	cp.w	r12,0
8000a928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a92c:	d6 03       	rete

8000a92e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a92e:	30 3c       	mov	r12,3
8000a930:	fe b0 d0 96 	rcall	80004a5c <_get_interrupt_handler>
8000a934:	58 0c       	cp.w	r12,0
8000a936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a93a:	d6 03       	rete
8000a93c:	d7 03       	nop
8000a93e:	d7 03       	nop
8000a940:	d7 03       	nop
8000a942:	d7 03       	nop
8000a944:	d7 03       	nop
8000a946:	d7 03       	nop
8000a948:	d7 03       	nop
8000a94a:	d7 03       	nop
8000a94c:	d7 03       	nop
8000a94e:	d7 03       	nop
8000a950:	d7 03       	nop
8000a952:	d7 03       	nop
8000a954:	d7 03       	nop
8000a956:	d7 03       	nop
8000a958:	d7 03       	nop
8000a95a:	d7 03       	nop
8000a95c:	d7 03       	nop
8000a95e:	d7 03       	nop
8000a960:	d7 03       	nop
8000a962:	d7 03       	nop
8000a964:	d7 03       	nop
8000a966:	d7 03       	nop
8000a968:	d7 03       	nop
8000a96a:	d7 03       	nop
8000a96c:	d7 03       	nop
8000a96e:	d7 03       	nop
8000a970:	d7 03       	nop
8000a972:	d7 03       	nop
8000a974:	d7 03       	nop
8000a976:	d7 03       	nop
8000a978:	d7 03       	nop
8000a97a:	d7 03       	nop
8000a97c:	d7 03       	nop
8000a97e:	d7 03       	nop
8000a980:	d7 03       	nop
8000a982:	d7 03       	nop
8000a984:	d7 03       	nop
8000a986:	d7 03       	nop
8000a988:	d7 03       	nop
8000a98a:	d7 03       	nop
8000a98c:	d7 03       	nop
8000a98e:	d7 03       	nop
8000a990:	d7 03       	nop
8000a992:	d7 03       	nop
8000a994:	d7 03       	nop
8000a996:	d7 03       	nop
8000a998:	d7 03       	nop
8000a99a:	d7 03       	nop
8000a99c:	d7 03       	nop
8000a99e:	d7 03       	nop
8000a9a0:	d7 03       	nop
8000a9a2:	d7 03       	nop
8000a9a4:	d7 03       	nop
8000a9a6:	d7 03       	nop
8000a9a8:	d7 03       	nop
8000a9aa:	d7 03       	nop
8000a9ac:	d7 03       	nop
8000a9ae:	d7 03       	nop
8000a9b0:	d7 03       	nop
8000a9b2:	d7 03       	nop
8000a9b4:	d7 03       	nop
8000a9b6:	d7 03       	nop
8000a9b8:	d7 03       	nop
8000a9ba:	d7 03       	nop
8000a9bc:	d7 03       	nop
8000a9be:	d7 03       	nop
8000a9c0:	d7 03       	nop
8000a9c2:	d7 03       	nop
8000a9c4:	d7 03       	nop
8000a9c6:	d7 03       	nop
8000a9c8:	d7 03       	nop
8000a9ca:	d7 03       	nop
8000a9cc:	d7 03       	nop
8000a9ce:	d7 03       	nop
8000a9d0:	d7 03       	nop
8000a9d2:	d7 03       	nop
8000a9d4:	d7 03       	nop
8000a9d6:	d7 03       	nop
8000a9d8:	d7 03       	nop
8000a9da:	d7 03       	nop
8000a9dc:	d7 03       	nop
8000a9de:	d7 03       	nop
8000a9e0:	d7 03       	nop
8000a9e2:	d7 03       	nop
8000a9e4:	d7 03       	nop
8000a9e6:	d7 03       	nop
8000a9e8:	d7 03       	nop
8000a9ea:	d7 03       	nop
8000a9ec:	d7 03       	nop
8000a9ee:	d7 03       	nop
8000a9f0:	d7 03       	nop
8000a9f2:	d7 03       	nop
8000a9f4:	d7 03       	nop
8000a9f6:	d7 03       	nop
8000a9f8:	d7 03       	nop
8000a9fa:	d7 03       	nop
8000a9fc:	d7 03       	nop
8000a9fe:	d7 03       	nop
