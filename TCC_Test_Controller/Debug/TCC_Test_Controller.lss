
TCC_Test_Controller.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006d28  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008e00  80008e00  00009200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001fe0  80009000  80009000  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000504  00000008  8000afe0  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000050c  8000b4e4  0000b90c  2**0
                  ALLOC
  8 .bss          00000358  00000510  00000510  00000000  2**2
                  ALLOC
  9 .heap         0000e798  00000868  00000868  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000b90c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000df0  00000000  00000000  0000b940  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001d5c  00000000  00000000  0000c730  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002c522  00000000  00000000  0000e48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000577c  00000000  00000000  0003a9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ff35  00000000  00000000  0004012a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000022c4  00000000  00000000  00050060  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000595b  00000000  00000000  00052324  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a9a1  00000000  00000000  00057c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00fa3291  00000000  00000000  00062620  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000e90  00000000  00000000  010058b8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cd 94 	sub	pc,pc,-12908

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ed 98 	sub	pc,pc,-4712

Disassembly of section .text:

80002008 <twim_master_interrupt_handler>:
80002008:	4a e8       	lddpc	r8,800020c0 <twim_master_interrupt_handler+0xb8>
8000200a:	70 08       	ld.w	r8,r8[0x0]
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000200c:	70 79       	ld.w	r9,r8[0x1c]
8000200e:	4a ea       	lddpc	r10,800020c4 <twim_master_interrupt_handler+0xbc>
80002010:	74 0a       	ld.w	r10,r10[0x0]
80002012:	f5 e9 00 09 	and	r9,r10,r9
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80002016:	12 9a       	mov	r10,r9
80002018:	e2 1a 07 00 	andl	r10,0x700,COH
8000201c:	c1 40       	breq	80002044 <twim_master_interrupt_handler+0x3c>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
8000201e:	e2 19 03 00 	andl	r9,0x300,COH
80002022:	f9 b9 01 fc 	movne	r9,-4
80002026:	f9 b9 00 fe 	moveq	r9,-2
8000202a:	4a 8a       	lddpc	r10,800020c8 <twim_master_interrupt_handler+0xc0>
8000202c:	95 09       	st.w	r10[0x0],r9
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000202e:	70 3a       	ld.w	r10,r8[0xc]
80002030:	30 09       	mov	r9,0
80002032:	f5 d9 d1 e1 	bfins	r10,r9,0xf,0x1
80002036:	91 3a       	st.w	r8[0xc],r10
		twim_inst->scr = ~0UL;
80002038:	3f fa       	mov	r10,-1
8000203a:	91 ba       	st.w	r8[0x2c],r10
		twim_inst->idr = ~0UL;
8000203c:	91 9a       	st.w	r8[0x24],r10
		twim_next = false;
8000203e:	4a 48       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002040:	b0 89       	st.b	r8[0x0],r9
80002042:	d6 03       	rete
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80002044:	f5 d9 c0 01 	bfextu	r10,r9,0x0,0x1
80002048:	c1 30       	breq	8000206e <twim_master_interrupt_handler+0x66>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000204a:	4a 2a       	lddpc	r10,800020d0 <twim_master_interrupt_handler+0xc8>
8000204c:	70 5b       	ld.w	r11,r8[0x14]
8000204e:	74 09       	ld.w	r9,r10[0x0]
80002050:	12 cb       	st.b	r9++,r11
		twim_rx_data++;
80002052:	95 09       	st.w	r10[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80002054:	4a 09       	lddpc	r9,800020d4 <twim_master_interrupt_handler+0xcc>
80002056:	72 0a       	ld.w	r10,r9[0x0]
80002058:	20 1a       	sub	r10,1
8000205a:	93 0a       	st.w	r9[0x0],r10
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8000205c:	72 09       	ld.w	r9,r9[0x0]
8000205e:	58 09       	cp.w	r9,0
80002060:	c2 f1       	brne	800020be <twim_master_interrupt_handler+0xb6>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80002062:	30 19       	mov	r9,1
80002064:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002066:	30 09       	mov	r9,0
80002068:	49 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
8000206a:	b0 89       	st.b	r8[0x0],r9
8000206c:	d6 03       	rete
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8000206e:	e2 19 00 02 	andl	r9,0x2,COH
80002072:	c2 60       	breq	800020be <twim_master_interrupt_handler+0xb6>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80002074:	49 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
80002076:	72 09       	ld.w	r9,r9[0x0]
80002078:	58 09       	cp.w	r9,0
8000207a:	c0 71       	brne	80002088 <twim_master_interrupt_handler+0x80>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8000207c:	30 29       	mov	r9,2
8000207e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80002080:	30 09       	mov	r9,0
80002082:	49 38       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
80002084:	b0 89       	st.b	r8[0x0],r9
80002086:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80002088:	49 5a       	lddpc	r10,800020dc <twim_master_interrupt_handler+0xd4>
8000208a:	74 09       	ld.w	r9,r10[0x0]
8000208c:	13 3b       	ld.ub	r11,r9++
8000208e:	91 6b       	st.w	r8[0x18],r11
80002090:	95 09       	st.w	r10[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80002092:	49 28       	lddpc	r8,800020d8 <twim_master_interrupt_handler+0xd0>
80002094:	70 09       	ld.w	r9,r8[0x0]
80002096:	20 19       	sub	r9,1
80002098:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8000209a:	70 08       	ld.w	r8,r8[0x0]
8000209c:	58 08       	cp.w	r8,0
8000209e:	c1 01       	brne	800020be <twim_master_interrupt_handler+0xb6>
				// Check for next transfer
				if(twim_next) {
800020a0:	48 b8       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020a2:	11 88       	ld.ub	r8,r8[0x0]
800020a4:	58 08       	cp.w	r8,0
800020a6:	c0 c0       	breq	800020be <twim_master_interrupt_handler+0xb6>
					twim_next = false;
800020a8:	30 09       	mov	r9,0
800020aa:	48 98       	lddpc	r8,800020cc <twim_master_interrupt_handler+0xc4>
800020ac:	b0 89       	st.b	r8[0x0],r9
					twim_tx_nb_bytes = twim_package->length;
800020ae:	48 d8       	lddpc	r8,800020e0 <twim_master_interrupt_handler+0xd8>
800020b0:	70 08       	ld.w	r8,r8[0x0]
800020b2:	70 3a       	ld.w	r10,r8[0xc]
800020b4:	48 99       	lddpc	r9,800020d8 <twim_master_interrupt_handler+0xd0>
800020b6:	93 0a       	st.w	r9[0x0],r10
					twim_tx_data = twim_package->buffer;
800020b8:	70 29       	ld.w	r9,r8[0x8]
800020ba:	48 98       	lddpc	r8,800020dc <twim_master_interrupt_handler+0xd4>
800020bc:	91 09       	st.w	r8[0x0],r9
800020be:	d6 03       	rete
800020c0:	00 00       	add	r0,r0
800020c2:	05 10       	ld.sh	r0,r2++
800020c4:	00 00       	add	r0,r0
800020c6:	05 24       	ld.uh	r4,r2++
800020c8:	00 00       	add	r0,r0
800020ca:	05 1c       	ld.sh	r12,r2++
800020cc:	00 00       	add	r0,r0
800020ce:	05 28       	ld.uh	r8,r2++
800020d0:	00 00       	add	r0,r0
800020d2:	05 14       	ld.sh	r4,r2++
800020d4:	00 00       	add	r0,r0
800020d6:	05 18       	ld.sh	r8,r2++
800020d8:	00 00       	add	r0,r0
800020da:	05 30       	ld.ub	r0,r2++
800020dc:	00 00       	add	r0,r0
800020de:	05 20       	ld.uh	r0,r2++
800020e0:	00 00       	add	r0,r0
800020e2:	05 2c       	ld.uh	r12,r2++

800020e4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800020e4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
800020e8:	f4 0b 0d 0a 	divu	r10,r10,r11
800020ec:	f4 08 16 01 	lsr	r8,r10,0x1
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
800020f0:	e0 48 00 ff 	cp.w	r8,255
800020f4:	e0 8b 00 04 	brhi	800020fc <twim_set_speed+0x18>
800020f8:	30 09       	mov	r9,0
800020fa:	c2 18       	rjmp	8000213c <twim_set_speed+0x58>
800020fc:	30 09       	mov	r9,0
800020fe:	30 16       	mov	r6,1
80002100:	30 7a       	mov	r10,7
80002102:	30 07       	mov	r7,0
		// increase clock divider
		cwgr_exp++;
80002104:	2f f9       	sub	r9,-1
80002106:	5c 59       	castu.b	r9
		// divide f_prescaled value
		f_prescaled /= 2;
80002108:	a1 98       	lsr	r8,0x1
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000210a:	e0 48 00 ff 	cp.w	r8,255
8000210e:	f9 be 0b 01 	movhi	lr,1
80002112:	f9 be 08 00 	movls	lr,0
80002116:	f2 0a 18 00 	cp.b	r10,r9
8000211a:	ec 0b 17 20 	movhs	r11,r6
8000211e:	f9 bb 03 00 	movlo	r11,0
80002122:	fd eb 00 0b 	and	r11,lr,r11
80002126:	ee 0b 18 00 	cp.b	r11,r7
8000212a:	ce d1       	brne	80002104 <twim_set_speed+0x20>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000212c:	30 7a       	mov	r10,7
8000212e:	f4 09 18 00 	cp.b	r9,r10
80002132:	e0 88 00 05 	brls	8000213c <twim_set_speed+0x58>
80002136:	3f 8c       	mov	r12,-8
80002138:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8000213c:	f0 0a 16 01 	lsr	r10,r8,0x1
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80002140:	f5 e8 11 0b 	or	r11,r10,r8<<0x10
80002144:	14 18       	sub	r8,r10
80002146:	f7 e8 10 88 	or	r8,r11,r8<<0x8
8000214a:	f1 e9 11 c9 	or	r9,r8,r9<<0x1c
8000214e:	99 19       	st.w	r12[0x4],r9
80002150:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0

80002154 <twim_status>:
/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
	uint32_t status = twim_inst->sr;
80002154:	48 38       	lddpc	r8,80002160 <twim_status+0xc>
80002156:	70 08       	ld.w	r8,r8[0x0]
80002158:	70 7c       	ld.w	r12,r8[0x1c]
		) {
		return 1;
	} else {
		return 0;
	}
}
8000215a:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000215e:	5e fc       	retal	r12
80002160:	00 00       	add	r0,r0
80002162:	05 10       	ld.sh	r0,r2++

80002164 <twim_disable_interrupt>:
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002164:	e1 b8 00 00 	mfsr	r8,0x0
	if (global_interrupt_enabled) {
80002168:	e6 18 00 01 	andh	r8,0x1,COH
8000216c:	c0 21       	brne	80002170 <twim_disable_interrupt+0xc>
		cpu_irq_disable ();
8000216e:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80002170:	3f f8       	mov	r8,-1
80002172:	99 98       	st.w	r12[0x24],r8
	// Clear the status flags
	twim->scr = ~0UL;
80002174:	99 b8       	st.w	r12[0x2c],r8
}
80002176:	5e fc       	retal	r12

80002178 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80002178:	eb cd 40 fe 	pushm	r1-r7,lr
8000217c:	18 97       	mov	r7,r12
8000217e:	16 93       	mov	r3,r11
80002180:	14 95       	mov	r5,r10
80002182:	12 92       	mov	r2,r9
80002184:	10 91       	mov	r1,r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002186:	30 14       	mov	r4,1
80002188:	99 04       	st.w	r12[0x0],r4
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000218a:	e0 68 00 80 	mov	r8,128
8000218e:	99 08       	st.w	r12[0x0],r8
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80002190:	30 28       	mov	r8,2
80002192:	99 08       	st.w	r12[0x0],r8
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80002194:	49 e6       	lddpc	r6,8000220c <twim_write+0x94>
80002196:	8d 0c       	st.w	r6[0x0],r12
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80002198:	f0 1f 00 1e 	mcall	80002210 <twim_write+0x98>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000219c:	49 e8       	lddpc	r8,80002214 <twim_write+0x9c>
8000219e:	91 03       	st.w	r8[0x0],r3
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800021a0:	49 e8       	lddpc	r8,80002218 <twim_write+0xa0>
800021a2:	91 05       	st.w	r8[0x0],r5
	// Set next transfer to false
	twim_next = false;
800021a4:	30 09       	mov	r9,0
800021a6:	49 e8       	lddpc	r8,8000221c <twim_write+0xa4>
800021a8:	b0 89       	st.b	r8[0x0],r9
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800021aa:	49 e9       	lddpc	r9,80002220 <twim_write+0xa8>
800021ac:	30 08       	mov	r8,0
800021ae:	93 08       	st.w	r9[0x0],r8
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800021b0:	6c 08       	ld.w	r8,r6[0x0]
800021b2:	b1 65       	lsl	r5,0x10
800021b4:	e8 15 e0 00 	orl	r5,0xe000
800021b8:	eb e2 10 12 	or	r2,r5,r2<<0x1
800021bc:	e5 e1 10 b1 	or	r1,r2,r1<<0xb
800021c0:	91 31       	st.w	r8[0xc],r1
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800021c2:	49 9a       	lddpc	r10,80002224 <twim_write+0xac>
800021c4:	e0 6b 03 02 	mov	r11,770
800021c8:	95 0b       	st.w	r10[0x0],r11
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800021ca:	74 0a       	ld.w	r10,r10[0x0]
800021cc:	91 8a       	st.w	r8[0x20],r10
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800021ce:	91 04       	st.w	r8[0x0],r4
	// Enable all interrupts
	cpu_irq_enable ();
800021d0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021d2:	72 08       	ld.w	r8,r9[0x0]
800021d4:	58 08       	cp.w	r8,0
800021d6:	c0 80       	breq	800021e6 <twim_write+0x6e>
800021d8:	c0 b8       	rjmp	800021ee <twim_write+0x76>
		cpu_relax();
800021da:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800021de:	6c 08       	ld.w	r8,r6[0x0]
800021e0:	58 08       	cp.w	r8,0
800021e2:	c0 30       	breq	800021e8 <twim_write+0x70>
800021e4:	c0 58       	rjmp	800021ee <twim_write+0x76>
800021e6:	48 f6       	lddpc	r6,80002220 <twim_write+0xa8>
800021e8:	f0 1f 00 10 	mcall	80002228 <twim_write+0xb0>
800021ec:	cf 70       	breq	800021da <twim_write+0x62>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800021ee:	30 28       	mov	r8,2
800021f0:	8f 08       	st.w	r7[0x0],r8
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021f2:	48 c8       	lddpc	r8,80002220 <twim_write+0xa8>
800021f4:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021f6:	5b c8       	cp.w	r8,-4
800021f8:	c0 70       	breq	80002206 <twim_write+0x8e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800021fa:	48 a8       	lddpc	r8,80002220 <twim_write+0xa8>
800021fc:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800021fe:	5b e8       	cp.w	r8,-2
80002200:	c0 30       	breq	80002206 <twim_write+0x8e>
80002202:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002206:	e3 cf c0 fe 	ldm	sp++,r1-r7,pc,r12=-1
8000220a:	00 00       	add	r0,r0
8000220c:	00 00       	add	r0,r0
8000220e:	05 10       	ld.sh	r0,r2++
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	21 64       	sub	r4,22
80002214:	00 00       	add	r0,r0
80002216:	05 20       	ld.uh	r0,r2++
80002218:	00 00       	add	r0,r0
8000221a:	05 30       	ld.ub	r0,r2++
8000221c:	00 00       	add	r0,r0
8000221e:	05 28       	ld.uh	r8,r2++
80002220:	00 00       	add	r0,r0
80002222:	05 1c       	ld.sh	r12,r2++
80002224:	00 00       	add	r0,r0
80002226:	05 24       	ld.uh	r4,r2++
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	21 54       	sub	r4,21

8000222c <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8000222c:	d4 01       	pushm	lr
8000222e:	20 1d       	sub	sp,4
	uint8_t data[1] = { 0 };
80002230:	30 08       	mov	r8,0
80002232:	ba 88       	st.b	sp[0x0],r8
	return (twim_write (twim,data,0,chip_addr,0));
80002234:	30 08       	mov	r8,0
80002236:	16 99       	mov	r9,r11
80002238:	10 9a       	mov	r10,r8
8000223a:	1a 9b       	mov	r11,sp
8000223c:	f0 1f 00 02 	mcall	80002244 <twim_probe+0x18>
}
80002240:	2f fd       	sub	sp,-4
80002242:	d8 02       	popm	pc
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	21 78       	sub	r8,23

80002248 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80002248:	eb cd 40 e0 	pushm	r5-r7,lr
8000224c:	18 97       	mov	r7,r12
8000224e:	16 95       	mov	r5,r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80002250:	e1 b8 00 00 	mfsr	r8,0x0
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80002254:	30 0a       	mov	r10,0
80002256:	4a 69       	lddpc	r9,800022ec <twim_master_init+0xa4>
80002258:	93 0a       	st.w	r9[0x0],r10
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8000225a:	e6 18 00 01 	andh	r8,0x1,COH
8000225e:	c0 b1       	brne	80002274 <twim_master_init+0x2c>
		cpu_irq_disable ();
80002260:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80002262:	3f f8       	mov	r8,-1
80002264:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002266:	30 18       	mov	r8,1
80002268:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000226a:	e0 68 00 80 	mov	r8,128
8000226e:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
80002270:	d5 03       	csrf	0x10
80002272:	c0 88       	rjmp	80002282 <twim_master_init+0x3a>
	transfer_status = TWI_SUCCESS;
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
		cpu_irq_disable ();
	}
	twim->idr = ~0UL;
80002274:	3f f8       	mov	r8,-1
80002276:	99 98       	st.w	r12[0x24],r8
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80002278:	30 18       	mov	r8,1
8000227a:	99 08       	st.w	r12[0x0],r8
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000227c:	e0 68 00 80 	mov	r8,128
80002280:	99 08       	st.w	r12[0x0],r8
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
80002282:	3f f8       	mov	r8,-1
80002284:	8f b8       	st.w	r7[0x2c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002286:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000228a:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twim_master_interrupt_handler,
8000228c:	30 1a       	mov	r10,1
8000228e:	e0 6b 03 20 	mov	r11,800
80002292:	49 8c       	lddpc	r12,800022f0 <twim_master_init+0xa8>
80002294:	f0 1f 00 18 	mcall	800022f4 <twim_master_init+0xac>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002298:	e6 16 00 01 	andh	r6,0x1,COH
8000229c:	c0 21       	brne	800022a0 <twim_master_init+0x58>
      cpu_irq_enable();
8000229e:	d5 03       	csrf	0x10
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);

	if (opt->smbus) {
800022a0:	eb 39 00 0c 	ld.ub	r9,r5[12]
800022a4:	30 08       	mov	r8,0
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
800022a6:	f0 09 18 00 	cp.b	r9,r8
800022aa:	f9 b8 01 10 	movne	r8,16
800022ae:	ef f8 1a 00 	st.wne	r7[0x0],r8
		twim->smbtr = (uint32_t) -1;
800022b2:	f9 b8 01 ff 	movne	r8,-1
800022b6:	ef f8 1a 02 	st.wne	r7[0x8],r8
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
800022ba:	6a 0a       	ld.w	r10,r5[0x0]
800022bc:	6a 1b       	ld.w	r11,r5[0x4]
800022be:	0e 9c       	mov	r12,r7
800022c0:	f0 1f 00 0e 	mcall	800022f8 <twim_master_init+0xb0>
800022c4:	5b 8c       	cp.w	r12,-8
800022c6:	c1 00       	breq	800022e6 <twim_master_init+0x9e>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800022c8:	6a 2b       	ld.w	r11,r5[0x8]
800022ca:	0e 9c       	mov	r12,r7
800022cc:	f0 1f 00 0c 	mcall	800022fc <twim_master_init+0xb4>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d0:	48 78       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022d4:	5b c8       	cp.w	r8,-4
800022d6:	c0 70       	breq	800022e4 <twim_master_init+0x9c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800022d8:	48 58       	lddpc	r8,800022ec <twim_master_init+0xa4>
800022da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800022dc:	5b e8       	cp.w	r8,-2
800022de:	c0 30       	breq	800022e4 <twim_master_init+0x9c>
800022e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800022e4:	3f fc       	mov	r12,-1
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
	}
	return STATUS_OK;
}
800022e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022ea:	00 00       	add	r0,r0
800022ec:	00 00       	add	r0,r0
800022ee:	05 1c       	ld.sh	r12,r2++
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	20 08       	sub	r8,0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	2f 6c       	sub	r12,-10
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	20 e4       	sub	r4,14
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	22 2c       	sub	r12,34

80002300 <twis_slave_interrupt_handler>:
/**
 * \internal
 * \brief TWIS interrupt handler
 */
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
80002300:	eb cd 40 e0 	pushm	r5-r7,lr
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
80002304:	4c 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002306:	70 06       	ld.w	r6,r8[0x0]
80002308:	6c 65       	ld.w	r5,r6[0x18]
	unsigned long enabled = twis_inst_slave->imr;
8000230a:	6c 97       	ld.w	r7,r6[0x24]
	unsigned long pending = status & enabled;

	// An error has occurred, set only address match active and return
	if (status & AVR32_TWIS_SR_ERROR_MASK) {
8000230c:	0a 98       	mov	r8,r5
8000230e:	e2 18 70 c0 	andl	r8,0x70c0,COH
80002312:	c0 b0       	breq	80002328 <twis_slave_interrupt_handler+0x28>
		twis_inst_slave->idr = ~0UL;
80002314:	3f f8       	mov	r8,-1
80002316:	8d 88       	st.w	r6[0x20],r8
		twis_inst_slave->scr = ~0UL;
80002318:	8d a8       	st.w	r6[0x28],r8
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
8000231a:	e0 78 00 00 	mov	r8,65536
8000231e:	8d 78       	st.w	r6[0x1c],r8

		twis_slave_fct.stop();
80002320:	4b a8       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
80002322:	70 28       	ld.w	r8,r8[0x8]
80002324:	5d 18       	icall	r8

		return;
80002326:	c6 b8       	rjmp	800023fc <twis_slave_interrupt_handler+0xfc>
ISR(twis_slave_interrupt_handler,CONF_TWIS_IRQ_GROUP,CONF_TWIS_IRQ_LEVEL)
{
	// Get status and interrupt mask register values
	unsigned long status  = twis_inst_slave->sr;
	unsigned long enabled = twis_inst_slave->imr;
	unsigned long pending = status & enabled;
80002328:	0a 67       	and	r7,r5

		return;
	}

	// Check if the slave address match flag is raised
	if (pending & AVR32_TWIS_IER_SAM_MASK) {
8000232a:	0e 98       	mov	r8,r7
8000232c:	e6 18 00 01 	andh	r8,0x1,COH
80002330:	c2 70       	breq	8000237e <twis_slave_interrupt_handler+0x7e>
		// Ignore repeated start and transmission complete flags
		if (pending & (AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK)) {
80002332:	0e 98       	mov	r8,r7
80002334:	e4 18 00 40 	andh	r8,0x40
80002338:	e0 18 00 08 	andl	r8,0x8
8000233c:	c0 60       	breq	80002348 <twis_slave_interrupt_handler+0x48>
			twis_inst_slave->scr = (AVR32_TWIS_SCR_REP_MASK |
8000233e:	30 88       	mov	r8,8
80002340:	ea 18 00 40 	orh	r8,0x40
80002344:	8d a8       	st.w	r6[0x28],r8
					AVR32_TWIS_SCR_TCOMP_MASK);
			twis_inst_slave->idr = (AVR32_TWIS_IDR_REP_MASK |
80002346:	8d 88       	st.w	r6[0x20],r8
					AVR32_TWIS_IDR_TCOMP_MASK);
		}
		pending &= ~(AVR32_TWIS_SR_REP_MASK | AVR32_TWIS_SR_TCOMP_MASK);
80002348:	e4 17 ff bf 	andh	r7,0xffbf
8000234c:	e0 17 ff f7 	andl	r7,0xfff7

		// Enable error handling
		twis_inst_slave->ier = AVR32_TWIS_SR_ERROR_MASK;
80002350:	e0 68 70 c0 	mov	r8,28864
80002354:	8d 78       	st.w	r6[0x1c],r8

		// Check if the slave should be in receive or transmit mode
		if (status & AVR32_TWIS_SR_TRA_MASK) {
80002356:	0a 98       	mov	r8,r5
80002358:	e2 18 00 20 	andl	r8,0x20,COH
8000235c:	c0 d0       	breq	80002376 <twis_slave_interrupt_handler+0x76>
			// Transmit mode
			twis_inst_slave->scr = AVR32_TWIS_SR_BTF_MASK;
8000235e:	fc 18 00 80 	movh	r8,0x80
80002362:	8d a8       	st.w	r6[0x28],r8
			twis_inst_slave->ier = AVR32_TWIS_IER_BTF_MASK
80002364:	30 88       	mov	r8,8
80002366:	ea 18 00 80 	orh	r8,0x80
8000236a:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_TCOMP_MASK;
			twis_inst_slave->thr = twis_slave_fct.tx();
8000236c:	4a 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000236e:	70 1c       	ld.w	r12,r8[0x4]
80002370:	5d 1c       	icall	r12
80002372:	8d 4c       	st.w	r6[0x10],r12
80002374:	c0 58       	rjmp	8000237e <twis_slave_interrupt_handler+0x7e>
		} else {
			// Receive mode
			twis_inst_slave->ier = AVR32_TWIS_IER_RXRDY_MASK
80002376:	30 98       	mov	r8,9
80002378:	ea 18 00 40 	orh	r8,0x40
8000237c:	8d 78       	st.w	r6[0x1c],r8
				| AVR32_TWIS_IER_REP_MASK;
		}
	}

	// Check if there is data ready to be read in the data receive register
	if (pending & AVR32_TWIS_IER_RXRDY_MASK) {
8000237e:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80002382:	c0 80       	breq	80002392 <twis_slave_interrupt_handler+0x92>
		// Call user specific receive function
		twis_slave_fct.rx(twis_inst_slave->rhr);
80002384:	4a 08       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
80002386:	70 08       	ld.w	r8,r8[0x0]
80002388:	70 3c       	ld.w	r12,r8[0xc]
8000238a:	4a 08       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
8000238c:	70 08       	ld.w	r8,r8[0x0]
8000238e:	5c 5c       	castu.b	r12
80002390:	5d 18       	icall	r8
	}

	// Check if the transmit ready flag is raised
	if (pending & AVR32_TWIS_SR_BTF_MASK) {
80002392:	0e 98       	mov	r8,r7
80002394:	e6 18 00 80 	andh	r8,0x80,COH
80002398:	c1 80       	breq	800023c8 <twis_slave_interrupt_handler+0xc8>
		if (status & AVR32_TWIS_SR_NAK_MASK) {
8000239a:	e2 15 01 00 	andl	r5,0x100,COH
8000239e:	c0 f0       	breq	800023bc <twis_slave_interrupt_handler+0xbc>
			twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK;
800023a0:	49 98       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023a2:	70 08       	ld.w	r8,r8[0x0]
800023a4:	fc 19 00 80 	movh	r9,0x80
800023a8:	91 89       	st.w	r8[0x20],r9
			twis_inst_slave->scr = AVR32_TWIS_SCR_BTF_MASK;
800023aa:	91 a9       	st.w	r8[0x28],r9
			twis_inst_slave->ier = AVR32_TWIS_IER_TCOMP_MASK
800023ac:	30 89       	mov	r9,8
800023ae:	ea 19 00 40 	orh	r9,0x40
800023b2:	91 79       	st.w	r8[0x1c],r9
				| AVR32_TWIS_IER_REP_MASK;
			// Clear the NAK
			twis_inst_slave->scr = AVR32_TWIS_SCR_NAK_MASK;
800023b4:	e0 69 01 00 	mov	r9,256
800023b8:	91 a9       	st.w	r8[0x28],r9
800023ba:	c0 78       	rjmp	800023c8 <twis_slave_interrupt_handler+0xc8>
		} else {
			twis_inst_slave->thr = twis_slave_fct.tx();
800023bc:	49 28       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023be:	70 06       	ld.w	r6,r8[0x0]
800023c0:	49 28       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023c2:	70 1c       	ld.w	r12,r8[0x4]
800023c4:	5d 1c       	icall	r12
800023c6:	8d 4c       	st.w	r6[0x10],r12
		}
	}

	// Check if the transmission complete or repeated start flags raised
	if (pending & (AVR32_TWIS_SR_TCOMP_MASK | AVR32_TWIS_SR_REP_MASK)) {
800023c8:	0e 98       	mov	r8,r7
800023ca:	e4 18 00 40 	andh	r8,0x40
800023ce:	e0 18 00 08 	andl	r8,0x8
800023d2:	c1 10       	breq	800023f4 <twis_slave_interrupt_handler+0xf4>
		// Clear transmit complete and repeated start flags
		twis_inst_slave->scr = AVR32_TWIS_SCR_TCOMP_MASK
800023d4:	48 c8       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023d6:	70 08       	ld.w	r8,r8[0x0]
800023d8:	30 89       	mov	r9,8
800023da:	ea 19 00 40 	orh	r9,0x40
800023de:	91 a9       	st.w	r8[0x28],r9
			| AVR32_TWIS_SCR_REP_MASK;
		// Disable transmission ready interrupt
		twis_inst_slave->idr = AVR32_TWIS_IDR_BTF_MASK
800023e0:	30 99       	mov	r9,9
800023e2:	ea 19 00 c0 	orh	r9,0xc0
800023e6:	91 89       	st.w	r8[0x20],r9
			| AVR32_TWIS_IDR_RXRDY_MASK
			| AVR32_TWIS_IDR_TCOMP_MASK
			| AVR32_TWIS_IDR_REP_MASK;
		// Enable slave address match interrupt
		twis_inst_slave->ier = AVR32_TWIS_IER_SAM_MASK;
800023e8:	e0 79 00 00 	mov	r9,65536
800023ec:	91 79       	st.w	r8[0x1c],r9
		// Call user specific stop function
		twis_slave_fct.stop();
800023ee:	48 78       	lddpc	r8,80002408 <twis_slave_interrupt_handler+0x108>
800023f0:	70 28       	ld.w	r8,r8[0x8]
800023f2:	5d 18       	icall	r8
	 *
	 * Fix/Workaround
	 * Clear SR.NAK only after the Byte Transfer Finished (BTF) bit of the same register has been
	 * set.
	 */
	twis_inst_slave->scr = pending & (~AVR32_TWIS_SCR_NAK_MASK);
800023f4:	48 48       	lddpc	r8,80002404 <twis_slave_interrupt_handler+0x104>
800023f6:	70 08       	ld.w	r8,r8[0x0]
800023f8:	a9 c7       	cbr	r7,0x8
800023fa:	91 a7       	st.w	r8[0x28],r7
	return;
}
800023fc:	e3 cd 40 e0 	ldm	sp++,r5-r7,lr
80002400:	d6 03       	rete
80002402:	00 00       	add	r0,r0
80002404:	00 00       	add	r0,r0
80002406:	05 40       	ld.w	r0,--r2
80002408:	00 00       	add	r0,r0
8000240a:	05 34       	ld.ub	r4,r2++

8000240c <twis_slave_init>:
 *              (see \ref twis_options_t)
 * \param *slave_fct  Pointer on application functions
 */
status_code_t twis_slave_init(volatile avr32_twis_t *twis, const twis_options_t *opt,
		const twis_slave_fct_t *slave_fct)
{
8000240c:	d4 21       	pushm	r4-r7,lr
8000240e:	18 97       	mov	r7,r12
80002410:	16 95       	mov	r5,r11
80002412:	14 94       	mov	r4,r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002414:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002418:	d3 03       	ssrf	0x10
	irqflags_t irq_save;

	irq_save = cpu_irq_save();

	twis->idr = ~0UL;
8000241a:	3f f8       	mov	r8,-1
8000241c:	99 88       	st.w	r12[0x20],r8
	twis->scr = ~0UL;
8000241e:	99 a8       	st.w	r12[0x28],r8

	// Reset the TWIS module
	twis->cr = AVR32_TWIS_CR_SWRST_MASK;
80002420:	e0 68 00 80 	mov	r8,128
80002424:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002426:	12 98       	mov	r8,r9
80002428:	e6 18 00 01 	andh	r8,0x1,COH
8000242c:	c0 21       	brne	80002430 <twis_slave_init+0x24>
      cpu_irq_enable();
8000242e:	d5 03       	csrf	0x10

	cpu_irq_restore(irq_save);

	// Clear the TWIS status register
	twis->scr = ~0UL;;
80002430:	3f f8       	mov	r8,-1
80002432:	8f a8       	st.w	r7[0x28],r8

	// Disable all interrupts
	cpu_irq_disable();
80002434:	d3 03       	ssrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002436:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000243a:	d3 03       	ssrf	0x10

	// register Register twis_slave_interrupt_handler interrupt on level CONF_TWIS_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(twis_slave_interrupt_handler,
8000243c:	30 1a       	mov	r10,1
8000243e:	e0 6b 03 60 	mov	r11,864
80002442:	4a 1c       	lddpc	r12,800024c4 <twis_slave_init+0xb8>
80002444:	f0 1f 00 21 	mcall	800024c8 <twis_slave_init+0xbc>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002448:	e6 16 00 01 	andh	r6,0x1,COH
8000244c:	c0 21       	brne	80002450 <twis_slave_init+0x44>
      cpu_irq_enable();
8000244e:	d5 03       	csrf	0x10
			CONF_TWIS_IRQ_LINE, CONF_TWIS_IRQ_LEVEL);
	cpu_irq_restore(flags);

	twis_inst_slave = twis;
80002450:	49 f8       	lddpc	r8,800024cc <twis_slave_init+0xc0>
80002452:	91 07       	st.w	r8[0x0],r7

	// Enable the TWI Slave Module and allow for clock stretching
	twis->cr = AVR32_TWIS_CR_SEN_MASK | AVR32_TWIS_CR_SMATCH_MASK
80002454:	31 58       	mov	r8,21
80002456:	8f 08       	st.w	r7[0x0],r8
	 */
#if AVR32_TWIS_H_VERSION > 120
	twis->cr |= AVR32_TWIS_CR_SOAM_MASK;
#endif

	if (opt->smbus) {
80002458:	eb 39 00 09 	ld.ub	r9,r5[9]
8000245c:	30 08       	mov	r8,0
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 40       	breq	8000246a <twis_slave_init+0x5e>
		twis->cr |= AVR32_TWIS_CR_SMEN_MASK;
80002464:	6e 08       	ld.w	r8,r7[0x0]
80002466:	a1 b8       	sbr	r8,0x1
80002468:	8f 08       	st.w	r7[0x0],r8
	}

	if (opt->tenbit) {
8000246a:	eb 39 00 0a 	ld.ub	r9,r5[10]
8000246e:	30 08       	mov	r8,0
80002470:	f0 09 18 00 	cp.b	r9,r8
80002474:	c0 40       	breq	8000247c <twis_slave_init+0x70>
		twis->cr |= AVR32_TWIS_CR_TENBIT_MASK;
80002476:	6e 08       	ld.w	r8,r7[0x0]
80002478:	bb a8       	sbr	r8,0x1a
8000247a:	8f 08       	st.w	r7[0x0],r8
	}

	// Set slave address
	twis->cr |= (opt->chip << AVR32_TWIS_CR_ADR_OFFSET);
8000247c:	6e 08       	ld.w	r8,r7[0x0]
8000247e:	eb 39 00 08 	ld.ub	r9,r5[8]
80002482:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002486:	8f 08       	st.w	r7[0x0],r8

	// Calculate the wait time from clk falling edge to
	//let the slave control the bus
	uint8_t setup_time = (opt->pba_hz / opt->speed)/7;
	twis->tr = (setup_time << AVR32_TWIS_TR_SUDAT_OFFSET);
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	6a 19       	ld.w	r9,r5[0x4]
8000248c:	f0 09 0d 08 	divu	r8,r8,r9
80002490:	10 9a       	mov	r10,r8
80002492:	e0 69 49 25 	mov	r9,18725
80002496:	ea 19 24 92 	orh	r9,0x2492
8000249a:	f0 09 06 48 	mulu.d	r8,r8,r9
8000249e:	12 1a       	sub	r10,r9
800024a0:	a1 9a       	lsr	r10,0x1
800024a2:	f4 09 00 09 	add	r9,r10,r9
800024a6:	f3 d9 c0 48 	bfextu	r9,r9,0x2,0x8
800024aa:	b1 69       	lsl	r9,0x10
800024ac:	8f 29       	st.w	r7[0x8],r9

	// Get a pointer to user specific functions
	twis_slave_fct = *slave_fct;
800024ae:	48 98       	lddpc	r8,800024d0 <twis_slave_init+0xc4>
800024b0:	e8 ea 00 00 	ld.d	r10,r4[0]
800024b4:	f0 eb 00 00 	st.d	r8[0],r10
800024b8:	68 29       	ld.w	r9,r4[0x8]
800024ba:	91 29       	st.w	r8[0x8],r9

	// Slave Address Match Interrupt Enable
	twis->ier = AVR32_TWIS_IER_SAM_MASK;
800024bc:	e0 78 00 00 	mov	r8,65536
800024c0:	8f 78       	st.w	r7[0x1c],r8

	return STATUS_OK;
}
800024c2:	d8 2a       	popm	r4-r7,pc,r12=0
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	23 00       	sub	r0,48
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	2f 6c       	sub	r12,-10
800024cc:	00 00       	add	r0,r0
800024ce:	05 40       	ld.w	r0,--r2
800024d0:	00 00       	add	r0,r0
800024d2:	05 34       	ld.ub	r4,r2++

800024d4 <masterReceiverTest>:
		}
	}
}

void masterReceiverTest()
{
800024d4:	d4 31       	pushm	r0-r7,lr
800024d6:	fa cd 01 04 	sub	sp,sp,260
	print_dbg("\n\n==============================\nExecutando i2c mrx...\n==============================\n");
800024da:	4a cb       	lddpc	r11,80002588 <masterReceiverTest+0xb4>
800024dc:	fc 7c 14 00 	mov	r12,-191488
800024e0:	f0 1f 00 2b 	mcall	8000258c <masterReceiverTest+0xb8>
800024e4:	4a b6       	lddpc	r6,80002590 <masterReceiverTest+0xbc>
800024e6:	2f e6       	sub	r6,-2
800024e8:	30 18       	mov	r8,1
800024ea:	30 07       	mov	r7,0
	cmd_frame_t ansFrame;
	char* text;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_RX)
800024ec:	30 24       	mov	r4,2
		{
			sentBytesCount = 0;
800024ee:	4a a0       	lddpc	r0,80002594 <masterReceiverTest+0xc0>
800024f0:	30 01       	mov	r1,0
			runningMrxTest = i; /* Para que a funcao de interrupcao TxFunction saiba qual teste estah sendo executado. */

			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
800024f2:	fc 72 14 00 	mov	r2,-191488
	cmd_frame_t ansFrame;
	char* text;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_RX)
800024f6:	0d 89       	ld.ub	r9,r6[0x0]
800024f8:	e8 09 18 00 	cp.b	r9,r4
800024fc:	c0 30       	breq	80002502 <masterReceiverTest+0x2e>
800024fe:	10 95       	mov	r5,r8
80002500:	c3 a8       	rjmp	80002574 <masterReceiverTest+0xa0>
		{
			sentBytesCount = 0;
80002502:	a0 81       	st.b	r0[0x0],r1
			runningMrxTest = i; /* Para que a funcao de interrupcao TxFunction saiba qual teste estah sendo executado. */
80002504:	4a 5a       	lddpc	r10,80002598 <masterReceiverTest+0xc4>
80002506:	b4 87       	st.b	r10[0x0],r7

			sprintf(text, "\nTest %d...", countAux++);
80002508:	f0 c5 ff ff 	sub	r5,r8,-1
8000250c:	1a d8       	st.w	--sp,r8
8000250e:	4a 4b       	lddpc	r11,8000259c <masterReceiverTest+0xc8>
80002510:	30 03       	mov	r3,0
80002512:	06 9c       	mov	r12,r3
80002514:	f0 1f 00 23 	mcall	800025a0 <masterReceiverTest+0xcc>
			print_dbg(text);
80002518:	06 9b       	mov	r11,r3
8000251a:	04 9c       	mov	r12,r2
8000251c:	f0 1f 00 1c 	mcall	8000258c <masterReceiverTest+0xb8>

			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002520:	ee 0b 15 07 	lsl	r11,r7,0x7
80002524:	0e 0b       	add	r11,r7
80002526:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000252a:	fa cd 01 04 	sub	sp,sp,260
8000252e:	e0 6a 01 03 	mov	r10,259
80002532:	49 88       	lddpc	r8,80002590 <masterReceiverTest+0xbc>
80002534:	f0 0b 00 0b 	add	r11,r8,r11
80002538:	1a 9c       	mov	r12,sp
8000253a:	f0 1f 00 1b 	mcall	800025a4 <masterReceiverTest+0xd0>
8000253e:	f0 1f 00 1b 	mcall	800025a8 <masterReceiverTest+0xd4>
			
			ansFrame = rcvTestCmdAnswer();
80002542:	fa cd fe f8 	sub	sp,sp,-264
80002546:	fa cc ff ff 	sub	r12,sp,-1
8000254a:	f0 1f 00 19 	mcall	800025ac <masterReceiverTest+0xd8>

			if(ansFrame.magicCode != 0)
8000254e:	1b 99       	ld.ub	r9,sp[0x1]
80002550:	1b a8       	ld.ub	r8,sp[0x2]
80002552:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002556:	c0 f0       	breq	80002574 <masterReceiverTest+0xa0>
			{
				if( ansFrame.data[0] == RESULT_TEST_FAIL )
80002558:	3f f8       	mov	r8,-1
8000255a:	1b d9       	ld.ub	r9,sp[0x5]
8000255c:	f0 09 18 00 	cp.b	r9,r8
80002560:	c0 61       	brne	8000256c <masterReceiverTest+0x98>
				{
					print_dbg( " FAIL" );
80002562:	49 4b       	lddpc	r11,800025b0 <masterReceiverTest+0xdc>
80002564:	04 9c       	mov	r12,r2
80002566:	f0 1f 00 0a 	mcall	8000258c <masterReceiverTest+0xb8>
8000256a:	c0 58       	rjmp	80002574 <masterReceiverTest+0xa0>
				}
				else
				{
					print_dbg( " PASS" );
8000256c:	49 2b       	lddpc	r11,800025b4 <masterReceiverTest+0xe0>
8000256e:	04 9c       	mov	r12,r2
80002570:	f0 1f 00 07 	mcall	8000258c <masterReceiverTest+0xb8>

	int i, timeout = 1000000, countAux = 1;
	cmd_frame_t ansFrame;
	char* text;

	for(i = 0; i < TEST_CASES_COUNT; i++ )
80002574:	2f f7       	sub	r7,-1
80002576:	ec c6 fe fd 	sub	r6,r6,-259
8000257a:	59 47       	cp.w	r7,20
8000257c:	c0 30       	breq	80002582 <masterReceiverTest+0xae>
8000257e:	0a 98       	mov	r8,r5
80002580:	cb bb       	rjmp	800024f6 <masterReceiverTest+0x22>
					print_dbg( " PASS" );
				}
			}
		}
	}
}
80002582:	2b fd       	sub	sp,-260
80002584:	d8 32       	popm	r0-r7,pc
80002586:	00 00       	add	r0,r0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	a4 48       	st.h	r2[0x8],r8
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	31 50       	mov	r0,21
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	90 00       	ld.sh	r0,r8[0x0]
80002594:	00 00       	add	r0,r0
80002596:	05 44       	ld.w	r4,--r2
80002598:	00 00       	add	r0,r0
8000259a:	05 47       	ld.w	r7,--r2
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	a4 a0       	st.b	r2[0x2],r0
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	34 fc       	mov	r12,79
800025a4:	80 00       	ld.sh	r0,r0[0x0]
800025a6:	33 b4       	mov	r4,59
800025a8:	80 00       	ld.sh	r0,r0[0x0]
800025aa:	2c 48       	sub	r8,-60
800025ac:	80 00       	ld.sh	r0,r0[0x0]
800025ae:	2b 44       	sub	r4,-76
800025b0:	80 00       	ld.sh	r0,r0[0x0]
800025b2:	a4 ac       	st.b	r2[0x2],r12
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	a4 b4       	st.b	r2[0x3],r4

800025b8 <slaveReceiverTest>:

void slaveReceiverTest()
{
800025b8:	d4 31       	pushm	r0-r7,lr
800025ba:	fa cd 01 04 	sub	sp,sp,260
	print_dbg("\n\n==============================\nExecutando i2c srx...\n==============================\n");
800025be:	4b fb       	lddpc	r11,800026b8 <slaveReceiverTest+0x100>
800025c0:	fc 7c 14 00 	mov	r12,-191488
800025c4:	f0 1f 00 3e 	mcall	800026bc <slaveReceiverTest+0x104>
800025c8:	4b e6       	lddpc	r6,800026c0 <slaveReceiverTest+0x108>
800025ca:	2f e6       	sub	r6,-2
800025cc:	30 18       	mov	r8,1
800025ce:	30 07       	mov	r7,0
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_S_RX)
800025d0:	30 44       	mov	r4,4
		{
			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
800025d2:	4b c3       	lddpc	r3,800026c0 <slaveReceiverTest+0x108>

			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
			twim_write( TWI_MASTER, &test_cases[i].data[0], test_cases[i].dataSize, CUBE_COMPUTER_ADDRESS, false );
800025d4:	0e 92       	mov	r2,r7
800025d6:	30 51       	mov	r1,5
800025d8:	fe 70 38 00 	mov	r0,-51200
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_S_RX)
800025dc:	0d 89       	ld.ub	r9,r6[0x0]
800025de:	e8 09 18 00 	cp.b	r9,r4
800025e2:	c0 30       	breq	800025e8 <slaveReceiverTest+0x30>
800025e4:	10 95       	mov	r5,r8
800025e6:	c4 88       	rjmp	80002676 <slaveReceiverTest+0xbe>
		{
			sprintf(text, "\nTest %d...", countAux++);
800025e8:	f0 c5 ff ff 	sub	r5,r8,-1
800025ec:	1a d8       	st.w	--sp,r8
800025ee:	4b 6b       	lddpc	r11,800026c4 <slaveReceiverTest+0x10c>
800025f0:	30 0c       	mov	r12,0
800025f2:	f0 1f 00 36 	mcall	800026c8 <slaveReceiverTest+0x110>
			print_dbg(text);
800025f6:	30 0b       	mov	r11,0
800025f8:	fc 7c 14 00 	mov	r12,-191488
800025fc:	f0 1f 00 30 	mcall	800026bc <slaveReceiverTest+0x104>
			
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002600:	ee 0b 15 07 	lsl	r11,r7,0x7
80002604:	0e 0b       	add	r11,r7
80002606:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000260a:	fa cd 01 04 	sub	sp,sp,260
8000260e:	e0 6a 01 03 	mov	r10,259
80002612:	e6 0b 00 0b 	add	r11,r3,r11
80002616:	1a 9c       	mov	r12,sp
80002618:	f0 1f 00 2d 	mcall	800026cc <slaveReceiverTest+0x114>
8000261c:	f0 1f 00 2d 	mcall	800026d0 <slaveReceiverTest+0x118>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002620:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002624:	e0 69 24 00 	mov	r9,9216
80002628:	ea 19 00 f4 	orh	r9,0xf4
8000262c:	f0 09 00 0a 	add	r10,r8,r9
80002630:	fa cd fe f8 	sub	sp,sp,-264
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002634:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002638:	14 38       	cp.w	r8,r10
8000263a:	e0 88 00 08 	brls	8000264a <slaveReceiverTest+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000263e:	12 38       	cp.w	r8,r9
80002640:	fe 98 ff fa 	brls	80002634 <slaveReceiverTest+0x7c>
80002644:	12 3a       	cp.w	r10,r9
80002646:	c1 f3       	brcs	80002684 <slaveReceiverTest+0xcc>
80002648:	cf 6b       	rjmp	80002634 <slaveReceiverTest+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000264a:	12 38       	cp.w	r8,r9
8000264c:	e0 8b 00 1c 	brhi	80002684 <slaveReceiverTest+0xcc>
80002650:	12 3a       	cp.w	r10,r9
80002652:	c1 93       	brcs	80002684 <slaveReceiverTest+0xcc>
80002654:	cf 0b       	rjmp	80002634 <slaveReceiverTest+0x7c>
			
			ansFrame = rcvTestCmdAnswer();
			
			if(ansFrame.magicCode != 0)
			{
				if( ansFrame.data[0] == RESULT_TEST_FAIL )
80002656:	3f f8       	mov	r8,-1
80002658:	1b d9       	ld.ub	r9,sp[0x5]
8000265a:	f0 09 18 00 	cp.b	r9,r8
8000265e:	c0 71       	brne	8000266c <slaveReceiverTest+0xb4>
				{
					print_dbg( " FAIL" );
80002660:	49 db       	lddpc	r11,800026d4 <slaveReceiverTest+0x11c>
80002662:	fc 7c 14 00 	mov	r12,-191488
80002666:	f0 1f 00 16 	mcall	800026bc <slaveReceiverTest+0x104>
8000266a:	c0 68       	rjmp	80002676 <slaveReceiverTest+0xbe>
				}
				else
				{
					print_dbg( " PASS" );
8000266c:	49 bb       	lddpc	r11,800026d8 <slaveReceiverTest+0x120>
8000266e:	fc 7c 14 00 	mov	r12,-191488
80002672:	f0 1f 00 13 	mcall	800026bc <slaveReceiverTest+0x104>
	
	int i, countAux = 1;
	cmd_frame_t ansFrame;
	char* text;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
80002676:	2f f7       	sub	r7,-1
80002678:	ec c6 fe fd 	sub	r6,r6,-259
8000267c:	59 47       	cp.w	r7,20
8000267e:	c1 b0       	breq	800026b4 <slaveReceiverTest+0xfc>
80002680:	0a 98       	mov	r8,r5
80002682:	ca db       	rjmp	800025dc <slaveReceiverTest+0x24>
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);

			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
			twim_write( TWI_MASTER, &test_cases[i].data[0], test_cases[i].dataSize, CUBE_COMPUTER_ADDRESS, false );
80002684:	ee 0b 15 07 	lsl	r11,r7,0x7
80002688:	0e 0b       	add	r11,r7
8000268a:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000268e:	2f cb       	sub	r11,-4
80002690:	04 98       	mov	r8,r2
80002692:	02 99       	mov	r9,r1
80002694:	0d 9a       	ld.ub	r10,r6[0x1]
80002696:	e6 0b 00 0b 	add	r11,r3,r11
8000269a:	00 9c       	mov	r12,r0
8000269c:	f0 1f 00 10 	mcall	800026dc <slaveReceiverTest+0x124>
			
			ansFrame = rcvTestCmdAnswer();
800026a0:	fa cc ff ff 	sub	r12,sp,-1
800026a4:	f0 1f 00 0f 	mcall	800026e0 <slaveReceiverTest+0x128>
			
			if(ansFrame.magicCode != 0)
800026a8:	1b 99       	ld.ub	r9,sp[0x1]
800026aa:	1b a8       	ld.ub	r8,sp[0x2]
800026ac:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800026b0:	cd 31       	brne	80002656 <slaveReceiverTest+0x9e>
800026b2:	ce 2b       	rjmp	80002676 <slaveReceiverTest+0xbe>
					print_dbg( " PASS" );
				}
			}
		}
	}
800026b4:	2b fd       	sub	sp,-260
800026b6:	d8 32       	popm	r0-r7,pc
800026b8:	80 00       	ld.sh	r0,r0[0x0]
800026ba:	a4 bc       	st.b	r2[0x3],r12
800026bc:	80 00       	ld.sh	r0,r0[0x0]
800026be:	31 50       	mov	r0,21
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	90 00       	ld.sh	r0,r8[0x0]
800026c4:	80 00       	ld.sh	r0,r0[0x0]
800026c6:	a4 a0       	st.b	r2[0x2],r0
800026c8:	80 00       	ld.sh	r0,r0[0x0]
800026ca:	34 fc       	mov	r12,79
800026cc:	80 00       	ld.sh	r0,r0[0x0]
800026ce:	33 b4       	mov	r4,59
800026d0:	80 00       	ld.sh	r0,r0[0x0]
800026d2:	2c 48       	sub	r8,-60
800026d4:	80 00       	ld.sh	r0,r0[0x0]
800026d6:	a4 ac       	st.b	r2[0x2],r12
800026d8:	80 00       	ld.sh	r0,r0[0x0]
800026da:	a4 b4       	st.b	r2[0x3],r4
800026dc:	80 00       	ld.sh	r0,r0[0x0]
800026de:	21 78       	sub	r8,23
800026e0:	80 00       	ld.sh	r0,r0[0x0]
800026e2:	2b 44       	sub	r4,-76

800026e4 <masterTransmitterTest>:
	masterReceiverTest();
	slaveReceiverTest();
}

void masterTransmitterTest()
{
800026e4:	d4 31       	pushm	r0-r7,lr
	print_dbg("\n\n==============================\nExecutando i2c mtx...\n==============================\n");
800026e6:	4c 7b       	lddpc	r11,80002800 <masterTransmitterTest+0x11c>
800026e8:	fc 7c 14 00 	mov	r12,-191488
800026ec:	f0 1f 00 46 	mcall	80002804 <masterTransmitterTest+0x120>
800026f0:	4c 66       	lddpc	r6,80002808 <masterTransmitterTest+0x124>
800026f2:	2f e6       	sub	r6,-2
800026f4:	30 17       	mov	r7,1
800026f6:	0e 98       	mov	r8,r7
800026f8:	30 05       	mov	r5,0
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_TX)
800026fa:	30 12       	mov	r2,1
		{
			trys = 0;
		
			sprintf(text, "\nTest %d...", countAux++);
			print_dbg(text);
800026fc:	fc 70 14 00 	mov	r0,-191488
		
			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
		
			/* Aguarda ateh o CC tenha enviado todos os bytes da transmissao de teste. */
			while( (transmissionEnded != true) && (++trys < timeout) ) {};
80002700:	4c 34       	lddpc	r4,8000280c <masterTransmitterTest+0x128>
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
	{
		if(test_cases[i].testType == TEST_TYPE_M_TX)
80002702:	0d 89       	ld.ub	r9,r6[0x0]
80002704:	e4 09 18 00 	cp.b	r9,r2
80002708:	c0 30       	breq	8000270e <masterTransmitterTest+0x2a>
8000270a:	10 93       	mov	r3,r8
8000270c:	c7 18       	rjmp	800027ee <masterTransmitterTest+0x10a>
		{
			trys = 0;
		
			sprintf(text, "\nTest %d...", countAux++);
8000270e:	f0 c3 ff ff 	sub	r3,r8,-1
80002712:	1a d8       	st.w	--sp,r8
80002714:	4b fb       	lddpc	r11,80002810 <masterTransmitterTest+0x12c>
80002716:	30 01       	mov	r1,0
80002718:	02 9c       	mov	r12,r1
8000271a:	f0 1f 00 3f 	mcall	80002814 <masterTransmitterTest+0x130>
			print_dbg(text);
8000271e:	02 9b       	mov	r11,r1
80002720:	00 9c       	mov	r12,r0
80002722:	f0 1f 00 39 	mcall	80002804 <masterTransmitterTest+0x120>
		
			//Notifica o CC sobre a execucao do teste e envia o comando.
			sendTestCmdFrame(test_cases[i]);
80002726:	ea 0b 15 07 	lsl	r11,r5,0x7
8000272a:	0a 0b       	add	r11,r5
8000272c:	ea 0b 00 1b 	add	r11,r5,r11<<0x1
80002730:	fa cd 01 04 	sub	sp,sp,260
80002734:	e0 6a 01 03 	mov	r10,259
80002738:	4b 49       	lddpc	r9,80002808 <masterTransmitterTest+0x124>
8000273a:	f2 0b 00 0b 	add	r11,r9,r11
8000273e:	1a 9c       	mov	r12,sp
80002740:	f0 1f 00 36 	mcall	80002818 <masterTransmitterTest+0x134>
80002744:	f0 1f 00 36 	mcall	8000281c <masterTransmitterTest+0x138>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002748:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000274c:	e0 69 24 00 	mov	r9,9216
80002750:	ea 19 00 f4 	orh	r9,0xf4
80002754:	f0 09 00 0a 	add	r10,r8,r9
80002758:	fa cd fe f8 	sub	sp,sp,-264
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000275c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002760:	14 38       	cp.w	r8,r10
80002762:	e0 88 00 08 	brls	80002772 <masterTransmitterTest+0x8e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002766:	12 38       	cp.w	r8,r9
80002768:	fe 98 ff fa 	brls	8000275c <masterTransmitterTest+0x78>
8000276c:	12 3a       	cp.w	r10,r9
8000276e:	c0 73       	brcs	8000277c <masterTransmitterTest+0x98>
80002770:	cf 6b       	rjmp	8000275c <masterTransmitterTest+0x78>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002772:	12 38       	cp.w	r8,r9
80002774:	e0 8b 00 04 	brhi	8000277c <masterTransmitterTest+0x98>
80002778:	12 3a       	cp.w	r10,r9
8000277a:	cf 12       	brcc	8000275c <masterTransmitterTest+0x78>
8000277c:	30 08       	mov	r8,0
		
			//Espera o CC se preparar para o teste.
			delay_ms(CC_PREPARE_TO_TEST_DELAY);
		
			/* Aguarda ateh o CC tenha enviado todos os bytes da transmissao de teste. */
			while( (transmissionEnded != true) && (++trys < timeout) ) {};
8000277e:	09 89       	ld.ub	r9,r4[0x0]
80002780:	58 09       	cp.w	r9,0
80002782:	c0 61       	brne	8000278e <masterTransmitterTest+0xaa>
80002784:	2f f8       	sub	r8,-1
80002786:	ee 58 42 40 	cp.w	r8,1000000
8000278a:	cf a1       	brne	8000277e <masterTransmitterTest+0x9a>
8000278c:	c0 58       	rjmp	80002796 <masterTransmitterTest+0xb2>
		
			if( trys >= timeout )
8000278e:	ee 58 42 3f 	cp.w	r8,999999
80002792:	e0 8a 00 07 	brle	800027a0 <masterTransmitterTest+0xbc>
			{
				print_dbg("\nErro - i2c_tests.c - masterTransmitterTest - timeout");
80002796:	4a 3b       	lddpc	r11,80002820 <masterTransmitterTest+0x13c>
80002798:	00 9c       	mov	r12,r0
8000279a:	f0 1f 00 1b 	mcall	80002804 <masterTransmitterTest+0x120>
8000279e:	30 07       	mov	r7,0
				testResult = false;
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
800027a0:	4a 18       	lddpc	r8,80002824 <masterTransmitterTest+0x140>
800027a2:	11 8c       	ld.ub	r12,r8[0x0]
800027a4:	58 0c       	cp.w	r12,0
800027a6:	e0 8a 00 15 	brle	800027d0 <masterTransmitterTest+0xec>
800027aa:	4a 08       	lddpc	r8,80002828 <masterTransmitterTest+0x144>
800027ac:	ea 0b 15 07 	lsl	r11,r5,0x7
800027b0:	0a 0b       	add	r11,r5
800027b2:	ea 0b 00 1b 	add	r11,r5,r11<<0x1
800027b6:	2f cb       	sub	r11,-4
800027b8:	49 49       	lddpc	r9,80002808 <masterTransmitterTest+0x124>
800027ba:	f2 0b 00 0b 	add	r11,r9,r11
	masterTransmitterTest();
	masterReceiverTest();
	slaveReceiverTest();
}

void masterTransmitterTest()
800027be:	10 0c       	add	r12,r8
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
			{
				if( i2cBytesBuffer[j] != test_cases[i].data[j] )
800027c0:	11 3a       	ld.ub	r10,r8++
800027c2:	17 39       	ld.ub	r9,r11++
800027c4:	f2 0a 18 00 	cp.b	r10,r9
800027c8:	f9 b7 01 00 	movne	r7,0
				print_dbg("\nErro - i2c_tests.c - masterTransmitterTest - timeout");
				testResult = false;
			}
		
			/* Compara o bytes recebidos com os bytes esperados */
			for( j = 0; j < receivedBytesCount; j++)
800027cc:	18 38       	cp.w	r8,r12
800027ce:	cf 91       	brne	800027c0 <masterTransmitterTest+0xdc>
				if( i2cBytesBuffer[j] != test_cases[i].data[j] )
				testResult = false;
			}
		
			/* Reseta as flags globais */
			receivedBytesCount = 0;
800027d0:	30 08       	mov	r8,0
800027d2:	49 59       	lddpc	r9,80002824 <masterTransmitterTest+0x140>
800027d4:	b2 88       	st.b	r9[0x0],r8
			transmissionEnded = false;
800027d6:	a8 88       	st.b	r4[0x0],r8
		
			/* Verifica e imprime o resultado do teste */
			if( testResult == false)
800027d8:	58 07       	cp.w	r7,0
800027da:	c0 61       	brne	800027e6 <masterTransmitterTest+0x102>
			{
				print_dbg( " FAIL" );
800027dc:	49 4b       	lddpc	r11,8000282c <masterTransmitterTest+0x148>
800027de:	00 9c       	mov	r12,r0
800027e0:	f0 1f 00 09 	mcall	80002804 <masterTransmitterTest+0x120>
800027e4:	c0 58       	rjmp	800027ee <masterTransmitterTest+0x10a>
			}
			else
			{
				print_dbg( " PASS" );
800027e6:	49 3b       	lddpc	r11,80002830 <masterTransmitterTest+0x14c>
800027e8:	00 9c       	mov	r12,r0
800027ea:	f0 1f 00 07 	mcall	80002804 <masterTransmitterTest+0x120>
	
	int i, j, timeout = 1000000, trys, countAux = 1;
	char* text;
	bool testResult = true;
	
	for(i = 0; i < TEST_CASES_COUNT; i++ )
800027ee:	2f f5       	sub	r5,-1
800027f0:	ec c6 fe fd 	sub	r6,r6,-259
800027f4:	59 45       	cp.w	r5,20
800027f6:	c0 30       	breq	800027fc <masterTransmitterTest+0x118>
800027f8:	06 98       	mov	r8,r3
800027fa:	c8 4b       	rjmp	80002702 <masterTransmitterTest+0x1e>
800027fc:	d8 32       	popm	r0-r7,pc
800027fe:	00 00       	add	r0,r0
80002800:	80 00       	ld.sh	r0,r0[0x0]
80002802:	a5 14       	ld.d	r4,--r2
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	31 50       	mov	r0,21
80002808:	80 00       	ld.sh	r0,r0[0x0]
8000280a:	90 00       	ld.sh	r0,r8[0x0]
8000280c:	00 00       	add	r0,r0
8000280e:	05 46       	ld.w	r6,--r2
80002810:	80 00       	ld.sh	r0,r0[0x0]
80002812:	a4 a0       	st.b	r2[0x2],r0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	34 fc       	mov	r12,79
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	33 b4       	mov	r4,59
8000281c:	80 00       	ld.sh	r0,r0[0x0]
8000281e:	2c 48       	sub	r8,-60
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	a5 6c       	lsl	r12,0x4
80002824:	00 00       	add	r0,r0
80002826:	05 45       	ld.w	r5,--r2
80002828:	00 00       	add	r0,r0
8000282a:	07 60       	ld.uh	r0,--r3
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	a4 ac       	st.b	r2[0x2],r12
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	a4 b4       	st.b	r2[0x3],r4

80002834 <i2c_test_all>:
	transmissionEnded = true;	
	gpio_tgl_gpio_pin(ITASAT_LED5);
}

void i2c_test_all()
{
80002834:	d4 01       	pushm	lr
	masterTransmitterTest();
80002836:	f0 1f 00 04 	mcall	80002844 <i2c_test_all+0x10>
	masterReceiverTest();
8000283a:	f0 1f 00 04 	mcall	80002848 <i2c_test_all+0x14>
	slaveReceiverTest();
8000283e:	f0 1f 00 04 	mcall	8000284c <i2c_test_all+0x18>
}
80002842:	d8 02       	popm	pc
80002844:	80 00       	ld.sh	r0,r0[0x0]
80002846:	26 e4       	sub	r4,110
80002848:	80 00       	ld.sh	r0,r0[0x0]
8000284a:	24 d4       	sub	r4,77
8000284c:	80 00       	ld.sh	r0,r0[0x0]
8000284e:	25 b8       	sub	r8,91

80002850 <StopFunction>:
	
	return byteToSend; /* Envia o byte de numero sentBytesCount do teste em andamento */
}

void StopFunction()
{
80002850:	d4 01       	pushm	lr
	/* Sinaliza que a transmissao terminou. */
	transmissionEnded = true;	
80002852:	30 19       	mov	r9,1
80002854:	48 38       	lddpc	r8,80002860 <StopFunction+0x10>
80002856:	b0 89       	st.b	r8[0x0],r9
	gpio_tgl_gpio_pin(ITASAT_LED5);
80002858:	30 dc       	mov	r12,13
8000285a:	f0 1f 00 03 	mcall	80002864 <StopFunction+0x14>
}
8000285e:	d8 02       	popm	pc
80002860:	00 00       	add	r0,r0
80002862:	05 46       	ld.w	r6,--r2
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	2f 4e       	sub	lr,-12

80002868 <TxFunction>:
	
	gpio_tgl_gpio_pin(ITASAT_LED7);
}

uint8_t TxFunction()
{
80002868:	eb cd 40 80 	pushm	r7,lr
	/* Armazena temporariamente o byte a ser enviado durante o teste. */
	uint8_t byteToSend = test_cases[runningMrxTest].data[sentBytesCount];
8000286c:	48 b9       	lddpc	r9,80002898 <TxFunction+0x30>
8000286e:	13 8a       	ld.ub	r10,r9[0x0]
80002870:	48 b8       	lddpc	r8,8000289c <TxFunction+0x34>
80002872:	11 88       	ld.ub	r8,r8[0x0]
80002874:	f0 0b 15 07 	lsl	r11,r8,0x7
80002878:	10 0b       	add	r11,r8
8000287a:	f0 0b 00 18 	add	r8,r8,r11<<0x1
8000287e:	48 9b       	lddpc	r11,800028a0 <TxFunction+0x38>
80002880:	f6 08 00 08 	add	r8,r11,r8
80002884:	14 08       	add	r8,r10
80002886:	11 c7       	ld.ub	r7,r8[0x4]
	
	/* Incrementa a posicao do proximo byte a ser transmitidos. */
	sentBytesCount++;
80002888:	2f fa       	sub	r10,-1
8000288a:	b2 8a       	st.b	r9[0x0],r10
	
	gpio_tgl_gpio_pin(ITASAT_LED6);
8000288c:	30 ec       	mov	r12,14
8000288e:	f0 1f 00 06 	mcall	800028a4 <TxFunction+0x3c>
	
	return byteToSend; /* Envia o byte de numero sentBytesCount do teste em andamento */
}
80002892:	0e 9c       	mov	r12,r7
80002894:	e3 cd 80 80 	ldm	sp++,r7,pc
80002898:	00 00       	add	r0,r0
8000289a:	05 44       	ld.w	r4,--r2
8000289c:	00 00       	add	r0,r0
8000289e:	05 47       	ld.w	r7,--r2
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	90 00       	ld.sh	r0,r8[0x0]
800028a4:	80 00       	ld.sh	r0,r0[0x0]
800028a6:	2f 4e       	sub	lr,-12

800028a8 <RxFunction>:
	if( STATUS_OK == twim_master_init( TWI_MASTER, &TWIM_OPTIONS ))
		gpio_set_pin_low( ITASAT_LED3 );
}

void RxFunction( uint8_t ReceivedData )
{
800028a8:	d4 01       	pushm	lr
	/* Armazena o byte recebido temporariamente na posicao adequada do buffer. */
	i2cBytesBuffer[receivedBytesCount++] = ReceivedData;
800028aa:	48 68       	lddpc	r8,800028c0 <RxFunction+0x18>
800028ac:	11 89       	ld.ub	r9,r8[0x0]
800028ae:	48 6a       	lddpc	r10,800028c4 <RxFunction+0x1c>
800028b0:	f4 09 0b 0c 	st.b	r10[r9],r12
800028b4:	2f f9       	sub	r9,-1
800028b6:	b0 89       	st.b	r8[0x0],r9
	
	gpio_tgl_gpio_pin(ITASAT_LED7);
800028b8:	30 fc       	mov	r12,15
800028ba:	f0 1f 00 04 	mcall	800028c8 <RxFunction+0x20>
}
800028be:	d8 02       	popm	pc
800028c0:	00 00       	add	r0,r0
800028c2:	05 45       	ld.w	r5,--r2
800028c4:	00 00       	add	r0,r0
800028c6:	07 60       	ld.uh	r0,--r3
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	2f 4e       	sub	lr,-12

800028cc <initI2CTestsInterface>:
	.tx = &TxFunction,
	.stop = &StopFunction
};

void initI2CTestsInterface()
{
800028cc:	d4 01       	pushm	lr
	/* Inicializacao dos GPIOs alocados ao controlador I2C. */
	gpio_enable_module_pin( TWIS0_1_TWD_PIN, TWIS0_1_TWD_FUNCTION );
800028ce:	30 0b       	mov	r11,0
800028d0:	34 2c       	mov	r12,66
800028d2:	f0 1f 00 0e 	mcall	80002908 <initI2CTestsInterface+0x3c>
	gpio_enable_module_pin( TWIS0_1_TWCK_PIN, TWIS0_1_TWCK_FUNCTION );
800028d6:	30 0b       	mov	r11,0
800028d8:	34 3c       	mov	r12,67
800028da:	f0 1f 00 0c 	mcall	80002908 <initI2CTestsInterface+0x3c>
	
	/* Inicializacao do controlador como Slave. */
	if( STATUS_OK == twis_slave_init( TWI_SLAVE, &TWIS_OPTIONS, &TWIS_FUNCTIONS ))
800028de:	48 ca       	lddpc	r10,8000290c <initI2CTestsInterface+0x40>
800028e0:	48 cb       	lddpc	r11,80002910 <initI2CTestsInterface+0x44>
800028e2:	fe 7c 40 00 	mov	r12,-49152
800028e6:	f0 1f 00 0c 	mcall	80002914 <initI2CTestsInterface+0x48>
800028ea:	c0 41       	brne	800028f2 <initI2CTestsInterface+0x26>
		gpio_set_pin_low( ITASAT_LED2 );
800028ec:	30 ac       	mov	r12,10
800028ee:	f0 1f 00 0b 	mcall	80002918 <initI2CTestsInterface+0x4c>

	/* Inicializacao do controlador como Master. */
	if( STATUS_OK == twim_master_init( TWI_MASTER, &TWIM_OPTIONS ))
800028f2:	48 bb       	lddpc	r11,8000291c <initI2CTestsInterface+0x50>
800028f4:	fe 7c 38 00 	mov	r12,-51200
800028f8:	f0 1f 00 0a 	mcall	80002920 <initI2CTestsInterface+0x54>
800028fc:	c0 41       	brne	80002904 <initI2CTestsInterface+0x38>
		gpio_set_pin_low( ITASAT_LED3 );
800028fe:	30 bc       	mov	r12,11
80002900:	f0 1f 00 06 	mcall	80002918 <initI2CTestsInterface+0x4c>
80002904:	d8 02       	popm	pc
80002906:	00 00       	add	r0,r0
80002908:	80 00       	ld.sh	r0,r0[0x0]
8000290a:	2d 74       	sub	r4,-41
8000290c:	80 00       	ld.sh	r0,r0[0x0]
8000290e:	a5 a4       	sbr	r4,0x4
80002910:	80 00       	ld.sh	r0,r0[0x0]
80002912:	a4 3c       	st.h	r2[0x6],r12
80002914:	80 00       	ld.sh	r0,r0[0x0]
80002916:	24 0c       	sub	r12,64
80002918:	80 00       	ld.sh	r0,r0[0x0]
8000291a:	2f 38       	sub	r8,-13
8000291c:	80 00       	ld.sh	r0,r0[0x0]
8000291e:	a5 b0       	sbr	r0,0x5
80002920:	80 00       	ld.sh	r0,r0[0x0]
80002922:	22 48       	sub	r8,36

80002924 <manage_command>:
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED0 );
}

void manage_command()
{
80002924:	eb cd 40 80 	pushm	r7,lr
	char* string_aux;
	bool cmd_recognized = false;
	command_buffer[free_index] = '\0';
80002928:	4b 0c       	lddpc	r12,800029e8 <manage_command+0xc4>
8000292a:	4b 18       	lddpc	r8,800029ec <manage_command+0xc8>
8000292c:	70 08       	ld.w	r8,r8[0x0]
8000292e:	30 09       	mov	r9,0
80002930:	f8 08 0b 09 	st.b	r12[r8],r9
	
	/* Execucao do comando "help", exibe todos os comandos no terminal. */
	if( strcmp( command_buffer, "help" ) == 0 )
80002934:	4a fb       	lddpc	r11,800029f0 <manage_command+0xcc>
80002936:	f0 1f 00 30 	mcall	800029f4 <manage_command+0xd0>
8000293a:	c0 30       	breq	80002940 <manage_command+0x1c>
8000293c:	30 07       	mov	r7,0
8000293e:	c1 b8       	rjmp	80002974 <manage_command+0x50>
	{
		print_dbg("\n\nhelp: Apresenta todos os comandos existentes.");
80002940:	4a eb       	lddpc	r11,800029f8 <manage_command+0xd4>
80002942:	fc 7c 14 00 	mov	r12,-191488
80002946:	f0 1f 00 2e 	mcall	800029fc <manage_command+0xd8>
		print_dbg("\n\ni2c all: Executa todos os testes do I2C.");
8000294a:	4a eb       	lddpc	r11,80002a00 <manage_command+0xdc>
8000294c:	fc 7c 14 00 	mov	r12,-191488
80002950:	f0 1f 00 2b 	mcall	800029fc <manage_command+0xd8>
		print_dbg("\n\ni2c mtx: Executa o teste da I2C com o CubeComputer como Master Transmitter.");
80002954:	4a cb       	lddpc	r11,80002a04 <manage_command+0xe0>
80002956:	fc 7c 14 00 	mov	r12,-191488
8000295a:	f0 1f 00 29 	mcall	800029fc <manage_command+0xd8>
		print_dbg("\n\ni2c mrx: Executa o teste da I2C com o CubeComputer como Master Receiver.");
8000295e:	4a bb       	lddpc	r11,80002a08 <manage_command+0xe4>
80002960:	fc 7c 14 00 	mov	r12,-191488
80002964:	f0 1f 00 26 	mcall	800029fc <manage_command+0xd8>
		print_dbg("\n\ni2c srx: Executa o teste da I2C com o CubeComputer como Slave Receiver.");
80002968:	4a 9b       	lddpc	r11,80002a0c <manage_command+0xe8>
8000296a:	fc 7c 14 00 	mov	r12,-191488
8000296e:	f0 1f 00 24 	mcall	800029fc <manage_command+0xd8>
80002972:	30 17       	mov	r7,1
		
		cmd_recognized = true;
	}
	
	/* Execucao do comando "reset", reinicializa todo o sistema. */
	if( strcmp( command_buffer, "reset" ) == 0 )
80002974:	4a 7b       	lddpc	r11,80002a10 <manage_command+0xec>
80002976:	49 dc       	lddpc	r12,800029e8 <manage_command+0xc4>
80002978:	f0 1f 00 1f 	mcall	800029f4 <manage_command+0xd0>
8000297c:	c0 91       	brne	8000298e <manage_command+0x6a>
	{
		general_initialize();
8000297e:	f0 1f 00 26 	mcall	80002a14 <manage_command+0xf0>
		print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
80002982:	4a 6b       	lddpc	r11,80002a18 <manage_command+0xf4>
80002984:	fc 7c 14 00 	mov	r12,-191488
80002988:	f0 1f 00 1d 	mcall	800029fc <manage_command+0xd8>
8000298c:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	/* Execucao do comando "i2c all", executa todos os testes I2C programados em i2c_tests.c */
	if( strcmp( command_buffer, "i2c all" ) == 0 )
8000298e:	4a 4b       	lddpc	r11,80002a1c <manage_command+0xf8>
80002990:	49 6c       	lddpc	r12,800029e8 <manage_command+0xc4>
80002992:	f0 1f 00 19 	mcall	800029f4 <manage_command+0xd0>
80002996:	c0 41       	brne	8000299e <manage_command+0x7a>
	{
		i2c_test_all();
80002998:	f0 1f 00 22 	mcall	80002a20 <manage_command+0xfc>
8000299c:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	/* Execucao do comando "i2c mtx", executa todos os testes I2C do tipo Master Transmitter. */
	if( strcmp( command_buffer, "i2c mtx" ) == 0 )
8000299e:	4a 2b       	lddpc	r11,80002a24 <manage_command+0x100>
800029a0:	49 2c       	lddpc	r12,800029e8 <manage_command+0xc4>
800029a2:	f0 1f 00 15 	mcall	800029f4 <manage_command+0xd0>
800029a6:	c0 41       	brne	800029ae <manage_command+0x8a>
	{
		masterTransmitterTest();
800029a8:	f0 1f 00 20 	mcall	80002a28 <manage_command+0x104>
800029ac:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	/* Execucao do comando "i2c mtx", executa todos os testes I2C do tipo Master Receiver. */
	if( strcmp( command_buffer, "i2c mrx" ) == 0 )
800029ae:	4a 0b       	lddpc	r11,80002a2c <manage_command+0x108>
800029b0:	48 ec       	lddpc	r12,800029e8 <manage_command+0xc4>
800029b2:	f0 1f 00 11 	mcall	800029f4 <manage_command+0xd0>
800029b6:	c0 41       	brne	800029be <manage_command+0x9a>
	{
		masterReceiverTest();
800029b8:	f0 1f 00 1e 	mcall	80002a30 <manage_command+0x10c>
800029bc:	30 17       	mov	r7,1
		cmd_recognized = true;
	}
	
	/* Execucao do comando "i2c mtx", executa todos os testes I2C do tipo Slave Receiver. */
	if( strcmp( command_buffer, "i2c srx" ) == 0 )
800029be:	49 eb       	lddpc	r11,80002a34 <manage_command+0x110>
800029c0:	48 ac       	lddpc	r12,800029e8 <manage_command+0xc4>
800029c2:	f0 1f 00 0d 	mcall	800029f4 <manage_command+0xd0>
800029c6:	c0 41       	brne	800029ce <manage_command+0xaa>
	{
		slaveReceiverTest();
800029c8:	f0 1f 00 1c 	mcall	80002a38 <manage_command+0x114>
800029cc:	c0 88       	rjmp	800029dc <manage_command+0xb8>
		cmd_recognized = true;
	}
	
	/* Quando o comando nao eh reconhecido exibe uma mensagem e volta ao funcionamento normal. */
	if(!cmd_recognized)
800029ce:	58 07       	cp.w	r7,0
800029d0:	c0 61       	brne	800029dc <manage_command+0xb8>
	{
		print_dbg("\n\nComando nao reconhecido!");
800029d2:	49 bb       	lddpc	r11,80002a3c <manage_command+0x118>
800029d4:	fc 7c 14 00 	mov	r12,-191488
800029d8:	f0 1f 00 09 	mcall	800029fc <manage_command+0xd8>
	}
	
	/* Apos o tratamento do comando no buffer, limpa o mesmo voltado o indice de controle para o inicio. */
	free_index = 0;
800029dc:	30 09       	mov	r9,0
800029de:	48 48       	lddpc	r8,800029ec <manage_command+0xc8>
800029e0:	91 09       	st.w	r8[0x0],r9
}
800029e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800029e6:	00 00       	add	r0,r0
800029e8:	00 00       	add	r0,r0
800029ea:	05 48       	ld.w	r8,--r2
800029ec:	00 00       	add	r0,r0
800029ee:	05 5c       	ld.sh	r12,--r2
800029f0:	80 00       	ld.sh	r0,r0[0x0]
800029f2:	a5 cc       	cbr	r12,0x4
800029f4:	80 00       	ld.sh	r0,r0[0x0]
800029f6:	35 34       	mov	r4,83
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	a5 d4       	cbr	r4,0x5
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	31 50       	mov	r0,21
80002a00:	80 00       	ld.sh	r0,r0[0x0]
80002a02:	a6 04       	st.h	r3[0x0],r4
80002a04:	80 00       	ld.sh	r0,r0[0x0]
80002a06:	a6 30       	st.h	r3[0x6],r0
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	a6 80       	st.b	r3[0x0],r0
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	a6 cc       	st.b	r3[0x4],r12
80002a10:	80 00       	ld.sh	r0,r0[0x0]
80002a12:	a7 18       	ld.d	r8,--r3
80002a14:	80 00       	ld.sh	r0,r0[0x0]
80002a16:	33 24       	mov	r4,50
80002a18:	80 00       	ld.sh	r0,r0[0x0]
80002a1a:	a7 20       	st.d	r3++,r0
80002a1c:	80 00       	ld.sh	r0,r0[0x0]
80002a1e:	a7 74       	lsl	r4,0x7
80002a20:	80 00       	ld.sh	r0,r0[0x0]
80002a22:	28 34       	sub	r4,-125
80002a24:	80 00       	ld.sh	r0,r0[0x0]
80002a26:	a7 7c       	lsl	r12,0x7
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	26 e4       	sub	r4,110
80002a2c:	80 00       	ld.sh	r0,r0[0x0]
80002a2e:	a7 84       	lsr	r4,0x6
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	24 d4       	sub	r4,77
80002a34:	80 00       	ld.sh	r0,r0[0x0]
80002a36:	a7 8c       	lsr	r12,0x6
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	25 b8       	sub	r8,91
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	a7 94       	lsr	r4,0x7

80002a40 <initTerminalInterface>:
	.paritytype = USART_NO_PARITY,
	.stopbits = USART_1_STOPBIT
};

void initTerminalInterface()
{
80002a40:	d4 01       	pushm	lr
	/* Inicializacao dos GPIOs utilizados pela USART do terminal. */
	gpio_enable_module_pin( USART1_1_TX_PIN, USART1_1_TX_FUNCTION );
80002a42:	30 0b       	mov	r11,0
80002a44:	33 1c       	mov	r12,49
80002a46:	f0 1f 00 0b 	mcall	80002a70 <initTerminalInterface+0x30>
	gpio_enable_module_pin( USART1_1_RX_PIN, USART1_1_RX_FUNCTION );
80002a4a:	30 0b       	mov	r11,0
80002a4c:	33 0c       	mov	r12,48
80002a4e:	f0 1f 00 09 	mcall	80002a70 <initTerminalInterface+0x30>
	
	/* Inicializacao do controlador USART do terminal. */
	if( usart_init_rs232( TERMINAL_UART, &TERMINAL_UART_OPTIONS, CPU_HZ ) == USART_SUCCESS )
80002a52:	e0 6a 24 00 	mov	r10,9216
80002a56:	ea 1a 00 f4 	orh	r10,0xf4
80002a5a:	48 7b       	lddpc	r11,80002a74 <initTerminalInterface+0x34>
80002a5c:	fc 7c 14 00 	mov	r12,-191488
80002a60:	f0 1f 00 06 	mcall	80002a78 <initTerminalInterface+0x38>
80002a64:	c0 41       	brne	80002a6c <initTerminalInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED0 );
80002a66:	30 8c       	mov	r12,8
80002a68:	f0 1f 00 05 	mcall	80002a7c <initTerminalInterface+0x3c>
80002a6c:	d8 02       	popm	pc
80002a6e:	00 00       	add	r0,r0
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	2d 74       	sub	r4,-41
80002a74:	80 00       	ld.sh	r0,r0[0x0]
80002a76:	a5 c0       	cbr	r0,0x4
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	31 a0       	mov	r0,26
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	2f 38       	sub	r8,-13

80002a80 <start_terminal>:
	/* Apos o tratamento do comando no buffer, limpa o mesmo voltado o indice de controle para o inicio. */
	free_index = 0;
}

void start_terminal()
{
80002a80:	eb cd 40 f8 	pushm	r3-r7,lr
	
	/* Se tudo funcionar normalmente esse loop nunca termina. */
	while(true)
	{
		/* Caso nenhum caracter exista no buffer, exibe um "-->" no terminal  */
		if(free_index == 0)
80002a84:	49 56       	lddpc	r6,80002ad8 <start_terminal+0x58>
			print_dbg("\n\n--> ");
80002a86:	49 63       	lddpc	r3,80002adc <start_terminal+0x5c>
80002a88:	fc 77 14 00 	mov	r7,-191488
		/* Trata o caracter recebido. */
		switch(received_char)
		{
			/* Caso o caracter seja recebido com erro, exibe uma mensagem no terminal e reinicia o sistema. */
			case USART_FAILURE:
				print_dbg("\nterminal_controller.c - start_terminal - USART_FAILURE");
80002a8c:	49 55       	lddpc	r5,80002ae0 <start_terminal+0x60>
			/*	Caso o caracter seja recebido corretamente e nao seja um enter adiciona o
			 * mesmo no buffer de comandos, incrementa o indice de controle do buffer e
			 * exibe o caracter recebido no terminal (echo).
			 */
			default:
				command_buffer[free_index] = (char) received_char;
80002a8e:	49 64       	lddpc	r4,80002ae4 <start_terminal+0x64>
	
	/* Se tudo funcionar normalmente esse loop nunca termina. */
	while(true)
	{
		/* Caso nenhum caracter exista no buffer, exibe um "-->" no terminal  */
		if(free_index == 0)
80002a90:	6c 08       	ld.w	r8,r6[0x0]
80002a92:	58 08       	cp.w	r8,0
80002a94:	c0 51       	brne	80002a9e <start_terminal+0x1e>
			print_dbg("\n\n--> ");
80002a96:	06 9b       	mov	r11,r3
80002a98:	0e 9c       	mov	r12,r7
80002a9a:	f0 1f 00 14 	mcall	80002ae8 <start_terminal+0x68>
		
		/* Aguarda ateh que um character seja digitado no terminal. */
		received_char = usart_getchar( TERMINAL_UART );
80002a9e:	0e 9c       	mov	r12,r7
80002aa0:	f0 1f 00 13 	mcall	80002aec <start_terminal+0x6c>

		/* Trata o caracter recebido. */
		switch(received_char)
80002aa4:	5b fc       	cp.w	r12,-1
80002aa6:	c0 40       	breq	80002aae <start_terminal+0x2e>
80002aa8:	58 dc       	cp.w	r12,13
80002aaa:	c0 c1       	brne	80002ac2 <start_terminal+0x42>
80002aac:	c0 88       	rjmp	80002abc <start_terminal+0x3c>
		{
			/* Caso o caracter seja recebido com erro, exibe uma mensagem no terminal e reinicia o sistema. */
			case USART_FAILURE:
				print_dbg("\nterminal_controller.c - start_terminal - USART_FAILURE");
80002aae:	0a 9b       	mov	r11,r5
80002ab0:	0e 9c       	mov	r12,r7
80002ab2:	f0 1f 00 0e 	mcall	80002ae8 <start_terminal+0x68>
				initTerminalInterface();
80002ab6:	f0 1f 00 0f 	mcall	80002af0 <start_terminal+0x70>
				break;
80002aba:	ce bb       	rjmp	80002a90 <start_terminal+0x10>
			
			/* Caso o caracter recebido seja um enter, chama a funcao manage_command(). */
			case ENTER_CHAR:
				manage_command();
80002abc:	f0 1f 00 0e 	mcall	80002af4 <start_terminal+0x74>
				break;
80002ac0:	ce 8b       	rjmp	80002a90 <start_terminal+0x10>
			/*	Caso o caracter seja recebido corretamente e nao seja um enter adiciona o
			 * mesmo no buffer de comandos, incrementa o indice de controle do buffer e
			 * exibe o caracter recebido no terminal (echo).
			 */
			default:
				command_buffer[free_index] = (char) received_char;
80002ac2:	6c 08       	ld.w	r8,r6[0x0]
80002ac4:	e8 08 0b 0c 	st.b	r4[r8],r12
				free_index++;
80002ac8:	2f f8       	sub	r8,-1
80002aca:	8d 08       	st.w	r6[0x0],r8
				usart_putchar( TERMINAL_UART, received_char ); //Echo in PC terminal.
80002acc:	18 9b       	mov	r11,r12
80002ace:	0e 9c       	mov	r12,r7
80002ad0:	f0 1f 00 0a 	mcall	80002af8 <start_terminal+0x78>
80002ad4:	cd eb       	rjmp	80002a90 <start_terminal+0x10>
80002ad6:	00 00       	add	r0,r0
80002ad8:	00 00       	add	r0,r0
80002ada:	05 5c       	ld.sh	r12,--r2
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	a7 b0       	sbr	r0,0x7
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	a7 b8       	sbr	r8,0x7
80002ae4:	00 00       	add	r0,r0
80002ae6:	05 48       	ld.w	r8,--r2
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	31 50       	mov	r0,21
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	30 e4       	mov	r4,14
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	2a 40       	sub	r0,-92
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	29 24       	sub	r4,-110
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	30 94       	mov	r4,9

80002afc <newEmptyTestCmdFrame>:
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint8_t testType, uint8_t dataSize)
{
80002afc:	eb cd 40 80 	pushm	r7,lr
80002b00:	fa cd 01 04 	sub	sp,sp,260
80002b04:	18 97       	mov	r7,r12
	newFrame.magicCode = MAGIC_CODE_CMDS;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	/* Preenche o array de dados com 0. */
	for(i = 0; i < dataSize; i++)
80002b06:	58 0a       	cp.w	r10,0
80002b08:	e0 8a 00 0a 	brle	80002b1c <newEmptyTestCmdFrame+0x20>
80002b0c:	fa c8 ff fb 	sub	r8,sp,-5
	/* Inicializa o controlador da USART de controle de testes. */
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
		gpio_set_pin_low( ITASAT_LED1 );
}

cmd_frame_t newEmptyTestCmdFrame(uint8_t testType, uint8_t dataSize)
80002b10:	f0 0a 00 0c 	add	r12,r8,r10
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	/* Preenche o array de dados com 0. */
	for(i = 0; i < dataSize; i++)
		newFrame.data[i] = 0;
80002b14:	30 09       	mov	r9,0
80002b16:	10 c9       	st.b	r8++,r9
	newFrame.magicCode = MAGIC_CODE_CMDS;
	newFrame.testType = testType;
	newFrame.dataSize = dataSize;
	
	/* Preenche o array de dados com 0. */
	for(i = 0; i < dataSize; i++)
80002b18:	18 38       	cp.w	r8,r12
80002b1a:	cf e1       	brne	80002b16 <newEmptyTestCmdFrame+0x1a>
		newFrame.data[i] = 0;
	
	return newFrame;
80002b1c:	33 c8       	mov	r8,60
80002b1e:	ba 98       	st.b	sp[0x1],r8
80002b20:	37 e8       	mov	r8,126
80002b22:	ba a8       	st.b	sp[0x2],r8
80002b24:	ba bb       	st.b	sp[0x3],r11
80002b26:	ba ca       	st.b	sp[0x4],r10
80002b28:	e0 6a 01 03 	mov	r10,259
80002b2c:	fa cb ff ff 	sub	r11,sp,-1
80002b30:	0e 9c       	mov	r12,r7
80002b32:	f0 1f 00 04 	mcall	80002b40 <newEmptyTestCmdFrame+0x44>
}
80002b36:	0e 9c       	mov	r12,r7
80002b38:	2b fd       	sub	sp,-260
80002b3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b3e:	00 00       	add	r0,r0
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	33 b4       	mov	r4,59

80002b44 <rcvTestCmdAnswer>:
		}
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
80002b44:	d4 31       	pushm	r0-r7,lr
80002b46:	fa cd 01 14 	sub	sp,sp,276
80002b4a:	18 92       	mov	r2,r12
80002b4c:	30 03       	mov	r3,0
80002b4e:	06 95       	mov	r5,r3
80002b50:	30 17       	mov	r7,1
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{
		/* O timeout faz com que o sistema nao trave aguardando uma resposta */
		rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
80002b52:	fe 74 28 00 	mov	r4,-55296
		/* 
		 *	Implementacao de um automato para identificacao dos 
		 * bytes recebidos e preenchimento do pacote de resposta
		 * recebido.
		 */
		switch( automataState )
80002b56:	30 26       	mov	r6,2
80002b58:	30 31       	mov	r1,3
					c++;
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == dataSize )
80002b5a:	06 90       	mov	r0,r3
		}
	}
}

cmd_frame_t rcvTestCmdAnswer()
{
80002b5c:	50 03       	stdsp	sp[0x0],r3
80002b5e:	c0 48       	rjmp	80002b66 <rcvTestCmdAnswer+0x22>
80002b60:	00 93       	mov	r3,r0
80002b62:	40 05       	lddsp	r5,sp[0x0]
80002b64:	30 17       	mov	r7,1
	cmd_frame_t cmdAwsFrameRcv;
	
	while(rcvAnswerFlag == 0)
	{
		/* O timeout faz com que o sistema nao trave aguardando uma resposta */
		rcvByte = usart_getchar_timeout( TESTS_EXEC_CTRL_UART );
80002b66:	08 9c       	mov	r12,r4
80002b68:	f0 1f 00 34 	mcall	80002c38 <rcvTestCmdAnswer+0xf4>
		
		/* 
		 *	Caso receba um byte com erro, exibe uma mensagem e reinicia 
		 * o sistema de testes.
		 */
		if(rcvByte == USART_TIMEOUT || rcvByte == USART_FAILURE)
80002b6c:	5b fc       	cp.w	r12,-1
80002b6e:	c0 c1       	brne	80002b86 <rcvTestCmdAnswer+0x42>
		{
			print_dbg("\n\ntests_execution_control - rcvTestCmdAnswer - USART_TIMEOUT OR USART_FAILURE");
80002b70:	4b 3b       	lddpc	r11,80002c3c <rcvTestCmdAnswer+0xf8>
80002b72:	fc 7c 14 00 	mov	r12,-191488
80002b76:	f0 1f 00 33 	mcall	80002c40 <rcvTestCmdAnswer+0xfc>
			cmdAwsFrameRcv.magicCode = 0;
			cmdAwsFrameRcv.dataSize = 0;
			cmdAwsFrameRcv.testType = 0;
			return cmdAwsFrameRcv;
80002b7a:	30 08       	mov	r8,0
80002b7c:	a4 88       	st.b	r2[0x0],r8
80002b7e:	a4 98       	st.b	r2[0x1],r8
80002b80:	a4 b8       	st.b	r2[0x3],r8
80002b82:	a4 a8       	st.b	r2[0x2],r8
80002b84:	c5 78       	rjmp	80002c32 <rcvTestCmdAnswer+0xee>
		/* 
		 *	Implementacao de um automato para identificacao dos 
		 * bytes recebidos e preenchimento do pacote de resposta
		 * recebido.
		 */
		switch( automataState )
80002b86:	ec 07 18 00 	cp.b	r7,r6
80002b8a:	c1 50       	breq	80002bb4 <rcvTestCmdAnswer+0x70>
80002b8c:	e0 8b 00 07 	brhi	80002b9a <rcvTestCmdAnswer+0x56>
80002b90:	30 18       	mov	r8,1
80002b92:	f0 07 18 00 	cp.b	r7,r8
80002b96:	ce 51       	brne	80002b60 <rcvTestCmdAnswer+0x1c>
80002b98:	c0 98       	rjmp	80002baa <rcvTestCmdAnswer+0x66>
80002b9a:	e2 07 18 00 	cp.b	r7,r1
80002b9e:	c1 20       	breq	80002bc2 <rcvTestCmdAnswer+0x7e>
80002ba0:	30 48       	mov	r8,4
80002ba2:	f0 07 18 00 	cp.b	r7,r8
80002ba6:	cd d1       	brne	80002b60 <rcvTestCmdAnswer+0x1c>
80002ba8:	c2 78       	rjmp	80002bf6 <rcvTestCmdAnswer+0xb2>
		{
		case 1:
			if( rcvByte == 0xE7 )
80002baa:	e0 4c 00 e7 	cp.w	r12,231
80002bae:	f9 b7 00 02 	moveq	r7,2
80002bb2:	cd ab       	rjmp	80002b66 <rcvTestCmdAnswer+0x22>
				automataState = 2;
			break;

		case 2:
			if( rcvByte == 0xC3 )
80002bb4:	e0 4c 00 c3 	cp.w	r12,195
80002bb8:	f9 b7 00 03 	moveq	r7,3
80002bbc:	f9 b7 01 01 	movne	r7,1
80002bc0:	cd 3b       	rjmp	80002b66 <rcvTestCmdAnswer+0x22>
			else
				automataState = 1;
			break;

		case 3:
			switch( c )
80002bc2:	30 08       	mov	r8,0
80002bc4:	f0 05 19 00 	cp.h	r5,r8
80002bc8:	c0 60       	breq	80002bd4 <rcvTestCmdAnswer+0x90>
80002bca:	30 19       	mov	r9,1
80002bcc:	f2 05 19 00 	cp.h	r5,r9
80002bd0:	cc b1       	brne	80002b66 <rcvTestCmdAnswer+0x22>
80002bd2:	c0 58       	rjmp	80002bdc <rcvTestCmdAnswer+0x98>
			{
			case 0:
				/* Recebendo o MSByte do testCaseNumber */
				testType = rcvByte;
80002bd4:	5c 5c       	castu.b	r12
80002bd6:	50 3c       	stdsp	sp[0xc],r12
80002bd8:	30 15       	mov	r5,1
				c++;
				break;
80002bda:	cc 6b       	rjmp	80002b66 <rcvTestCmdAnswer+0x22>

			case 1:
				/* Recebendo o MSByte do N */
				dataSize = rcvByte;
80002bdc:	e7 dc b0 10 	bfexts	r3,r12,0x0,0x10
				automataState = 4;
				c = 0;
				
				/* Comando identificado, agora basta receber os parametros */
				cmdAwsFrameRcv = newEmptyTestCmdFrame( testType, dataSize );
80002be0:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
80002be4:	40 3b       	lddsp	r11,sp[0xc]
80002be6:	04 9c       	mov	r12,r2
80002be8:	f0 1f 00 17 	mcall	80002c44 <rcvTestCmdAnswer+0x100>
80002bec:	05 b9       	ld.ub	r9,r2[0x3]
80002bee:	05 a8       	ld.ub	r8,r2[0x2]
				 * problemas, pois o automato identifica apenas frames com o parametro 0xE7C3.
				 */
				cmdAwsFrameRcv.magicCode = 0xE7C3;
				
				/* Caso nao irah ser recebido nenhum dado extra, o programa nao pode continuar aguardando*/
				if( dataSize == 0)
80002bf0:	58 03       	cp.w	r3,0
80002bf2:	c1 60       	breq	80002c1e <rcvTestCmdAnswer+0xda>
80002bf4:	c1 08       	rjmp	80002c14 <rcvTestCmdAnswer+0xd0>
				break;
			}
			break;

			case 4:
				if( c < dataSize )
80002bf6:	ea 03 19 00 	cp.h	r3,r5
80002bfa:	e0 88 00 09 	brls	80002c0c <rcvTestCmdAnswer+0xc8>
				{
					cmdAwsFrameRcv.data[c] = rcvByte;
80002bfe:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
80002c02:	e4 08 00 08 	add	r8,r2,r8
80002c06:	b0 cc       	st.b	r8[0x4],r12
					c++;
80002c08:	2f f5       	sub	r5,-1
80002c0a:	5c 85       	casts.h	r5
				}
				
				/* O estado 5 possui uma e-transicao, entao nao deve-se
				 * aguardar o recebimento de mais um byte para a mudanca de estado */
				if( c == dataSize )
80002c0c:	e6 05 19 00 	cp.h	r5,r3
80002c10:	ca b1       	brne	80002b66 <rcvTestCmdAnswer+0x22>
80002c12:	c0 88       	rjmp	80002c22 <rcvTestCmdAnswer+0xde>
80002c14:	50 19       	stdsp	sp[0x4],r9
80002c16:	50 28       	stdsp	sp[0x8],r8
80002c18:	00 95       	mov	r5,r0
80002c1a:	30 47       	mov	r7,4
80002c1c:	ca 5b       	rjmp	80002b66 <rcvTestCmdAnswer+0x22>
80002c1e:	50 19       	stdsp	sp[0x4],r9
80002c20:	50 28       	stdsp	sp[0x8],r8
				dataSize = 0;
				break;
		}
	}
	
	return cmdAwsFrameRcv;
80002c22:	3e 78       	mov	r8,-25
80002c24:	a4 88       	st.b	r2[0x0],r8
80002c26:	3c 38       	mov	r8,-61
80002c28:	a4 98       	st.b	r2[0x1],r8
80002c2a:	40 18       	lddsp	r8,sp[0x4]
80002c2c:	a4 b8       	st.b	r2[0x3],r8
80002c2e:	40 29       	lddsp	r9,sp[0x8]
80002c30:	a4 a9       	st.b	r2[0x2],r9
80002c32:	04 9c       	mov	r12,r2
80002c34:	2b bd       	sub	sp,-276
80002c36:	d8 32       	popm	r0-r7,pc
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	31 10       	mov	r0,17
80002c3c:	80 00       	ld.sh	r0,r0[0x0]
80002c3e:	a7 fc       	*unknown*
80002c40:	80 00       	ld.sh	r0,r0[0x0]
80002c42:	31 50       	mov	r0,21
80002c44:	80 00       	ld.sh	r0,r0[0x0]
80002c46:	2a fc       	sub	r12,-81

80002c48 <sendTestCmdFrame>:
	
	return newFrame;
}

void sendTestCmdFrame(cmd_frame_t frame)
{
80002c48:	eb cd 40 fc 	pushm	r2-r7,lr
80002c4c:	fa c4 ff e4 	sub	r4,sp,-28
80002c50:	88 07       	ld.sh	r7,r4[0x0]
80002c52:	09 a6       	ld.ub	r6,r4[0x2]
80002c54:	09 b5       	ld.ub	r5,r4[0x3]
	int aux, i;
	cmd_frame_t anwser;
	
	/* Send cmdCode */
	aux = (frame.magicCode>>8);	
	if( USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c56:	f7 d7 c1 08 	bfextu	r11,r7,0x8,0x8
80002c5a:	fe 7c 28 00 	mov	r12,-55296
80002c5e:	f0 1f 00 26 	mcall	80002cf4 <sendTestCmdFrame+0xac>
80002c62:	5b fc       	cp.w	r12,-1
80002c64:	c0 61       	brne	80002c70 <sendTestCmdFrame+0x28>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002c66:	4a 5b       	lddpc	r11,80002cf8 <sendTestCmdFrame+0xb0>
80002c68:	fc 7c 14 00 	mov	r12,-191488
80002c6c:	f0 1f 00 24 	mcall	80002cfc <sendTestCmdFrame+0xb4>
	}
	
	aux = (frame.magicCode&0x00FF);
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c70:	0e 9b       	mov	r11,r7
80002c72:	5c 5b       	castu.b	r11
80002c74:	fe 7c 28 00 	mov	r12,-55296
80002c78:	f0 1f 00 1f 	mcall	80002cf4 <sendTestCmdFrame+0xac>
80002c7c:	5b fc       	cp.w	r12,-1
80002c7e:	c0 61       	brne	80002c8a <sendTestCmdFrame+0x42>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002c80:	49 eb       	lddpc	r11,80002cf8 <sendTestCmdFrame+0xb0>
80002c82:	fc 7c 14 00 	mov	r12,-191488
80002c86:	f0 1f 00 1e 	mcall	80002cfc <sendTestCmdFrame+0xb4>
	}
	
	/* Send testType */
	aux = frame.testType;
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002c8a:	0c 9b       	mov	r11,r6
80002c8c:	fe 7c 28 00 	mov	r12,-55296
80002c90:	f0 1f 00 19 	mcall	80002cf4 <sendTestCmdFrame+0xac>
80002c94:	5b fc       	cp.w	r12,-1
80002c96:	c0 61       	brne	80002ca2 <sendTestCmdFrame+0x5a>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002c98:	49 8b       	lddpc	r11,80002cf8 <sendTestCmdFrame+0xb0>
80002c9a:	fc 7c 14 00 	mov	r12,-191488
80002c9e:	f0 1f 00 18 	mcall	80002cfc <sendTestCmdFrame+0xb4>
	}
	
	/* Send dataSize */
	aux = frame.dataSize;
	if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002ca2:	0a 9b       	mov	r11,r5
80002ca4:	fe 7c 28 00 	mov	r12,-55296
80002ca8:	f0 1f 00 13 	mcall	80002cf4 <sendTestCmdFrame+0xac>
80002cac:	5b fc       	cp.w	r12,-1
80002cae:	c0 61       	brne	80002cba <sendTestCmdFrame+0x72>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002cb0:	49 2b       	lddpc	r11,80002cf8 <sendTestCmdFrame+0xb0>
80002cb2:	fc 7c 14 00 	mov	r12,-191488
80002cb6:	f0 1f 00 12 	mcall	80002cfc <sendTestCmdFrame+0xb4>
	}
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
80002cba:	58 05       	cp.w	r5,0
80002cbc:	e0 8a 00 19 	brle	80002cee <sendTestCmdFrame+0xa6>
80002cc0:	e8 c6 ff fc 	sub	r6,r4,-4
80002cc4:	30 07       	mov	r7,0
	{
		aux = frame.data[i];		
		if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002cc6:	fe 74 28 00 	mov	r4,-55296
		{
			print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002cca:	48 c3       	lddpc	r3,80002cf8 <sendTestCmdFrame+0xb0>
80002ccc:	fc 72 14 00 	mov	r2,-191488
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
	{
		aux = frame.data[i];		
		if(USART_FAILURE == usart_putchar( TESTS_EXEC_CTRL_UART, aux))
80002cd0:	0d 8b       	ld.ub	r11,r6[0x0]
80002cd2:	08 9c       	mov	r12,r4
80002cd4:	f0 1f 00 08 	mcall	80002cf4 <sendTestCmdFrame+0xac>
80002cd8:	5b fc       	cp.w	r12,-1
80002cda:	c0 51       	brne	80002ce4 <sendTestCmdFrame+0x9c>
		{
			print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
80002cdc:	06 9b       	mov	r11,r3
80002cde:	04 9c       	mov	r12,r2
80002ce0:	f0 1f 00 07 	mcall	80002cfc <sendTestCmdFrame+0xb4>
	{
		print_dbg("\ntests_execution_control - sendTestCmdFrame - USART_FAILURE");
	}
	
	/* Send data */ 
	for( i = 0; i < frame.dataSize; i++)
80002ce4:	2f f7       	sub	r7,-1
80002ce6:	2f f6       	sub	r6,-1
80002ce8:	0e 35       	cp.w	r5,r7
80002cea:	fe 99 ff f3 	brgt	80002cd0 <sendTestCmdFrame+0x88>
80002cee:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002cf2:	00 00       	add	r0,r0
80002cf4:	80 00       	ld.sh	r0,r0[0x0]
80002cf6:	30 94       	mov	r4,9
80002cf8:	80 00       	ld.sh	r0,r0[0x0]
80002cfa:	a8 4c       	st.h	r4[0x8],r12
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	31 50       	mov	r0,21

80002d00 <initTestsExecContrInterface>:
		print_dbg(textAux);
	}
}

void initTestsExecContrInterface()
{
80002d00:	d4 01       	pushm	lr
	/* Inicializa os GPIOs alocados para a USART de controle. */
	gpio_enable_module_pin( USART0_1_TX_PIN, USART0_1_TX_FUNCTION );
80002d02:	30 3b       	mov	r11,3
80002d04:	35 0c       	mov	r12,80
80002d06:	f0 1f 00 0b 	mcall	80002d30 <initTestsExecContrInterface+0x30>
	gpio_enable_module_pin( USART0_1_RX_PIN, USART0_1_RX_FUNCTION );
80002d0a:	30 3b       	mov	r11,3
80002d0c:	34 fc       	mov	r12,79
80002d0e:	f0 1f 00 09 	mcall	80002d30 <initTestsExecContrInterface+0x30>
	
	/* Inicializa o controlador da USART de controle de testes. */
	if( usart_init_rs232( TESTS_EXEC_CTRL_UART, &TESTS_EXECUTION_CONTROL, CPU_HZ ) == USART_SUCCESS )
80002d12:	e0 6a 24 00 	mov	r10,9216
80002d16:	ea 1a 00 f4 	orh	r10,0xf4
80002d1a:	48 7b       	lddpc	r11,80002d34 <initTestsExecContrInterface+0x34>
80002d1c:	fe 7c 28 00 	mov	r12,-55296
80002d20:	f0 1f 00 06 	mcall	80002d38 <initTestsExecContrInterface+0x38>
80002d24:	c0 41       	brne	80002d2c <initTestsExecContrInterface+0x2c>
		gpio_set_pin_low( ITASAT_LED1 );
80002d26:	30 9c       	mov	r12,9
80002d28:	f0 1f 00 05 	mcall	80002d3c <initTestsExecContrInterface+0x3c>
80002d2c:	d8 02       	popm	pc
80002d2e:	00 00       	add	r0,r0
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	2d 74       	sub	r4,-41
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	a7 f0       	*unknown*
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	31 a0       	mov	r0,26
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2f 38       	sub	r8,-13

80002d40 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002d40:	fe 68 00 00 	mov	r8,-131072
80002d44:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002d46:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002d4a:	91 09       	st.w	r8[0x0],r9
}
80002d4c:	5e fc       	retal	r12
80002d4e:	d7 03       	nop

80002d50 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002d50:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002d52:	e0 68 8a 3f 	mov	r8,35391
80002d56:	ea 18 01 f7 	orh	r8,0x1f7
80002d5a:	10 3c       	cp.w	r12,r8
80002d5c:	e0 88 00 06 	brls	80002d68 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80002d60:	30 1c       	mov	r12,1
80002d62:	f0 1f 00 04 	mcall	80002d70 <flashc_set_bus_freq+0x20>
80002d66:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80002d68:	30 0c       	mov	r12,0
80002d6a:	f0 1f 00 02 	mcall	80002d70 <flashc_set_bus_freq+0x20>
80002d6e:	d8 02       	popm	pc
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	2d 40       	sub	r0,-44

80002d74 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002d74:	f8 08 16 05 	lsr	r8,r12,0x5
80002d78:	a9 78       	lsl	r8,0x9
80002d7a:	e0 28 e0 00 	sub	r8,57344

	/* Enable the correct function. */
	switch (function) {
80002d7e:	58 7b       	cp.w	r11,7
80002d80:	e0 8b 00 05 	brhi	80002d8a <gpio_enable_module_pin+0x16>
80002d84:	4a 09       	lddpc	r9,80002e04 <gpio_enable_module_pin+0x90>
80002d86:	f2 0b 03 2f 	ld.w	pc,r9[r11<<0x2]
80002d8a:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002d8c:	30 19       	mov	r9,1
80002d8e:	f2 0c 09 49 	lsl	r9,r9,r12
80002d92:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002d94:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002d96:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002d98:	c3 18       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002d9a:	30 19       	mov	r9,1
80002d9c:	f2 0c 09 49 	lsl	r9,r9,r12
80002da0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002da2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002da4:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002da6:	c2 a8       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002da8:	30 19       	mov	r9,1
80002daa:	f2 0c 09 49 	lsl	r9,r9,r12
80002dae:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002db0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002db2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002db4:	c2 38       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002db6:	30 19       	mov	r9,1
80002db8:	f2 0c 09 49 	lsl	r9,r9,r12
80002dbc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002dbe:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002dc0:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002dc2:	c1 c8       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002dc4:	30 19       	mov	r9,1
80002dc6:	f2 0c 09 49 	lsl	r9,r9,r12
80002dca:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002dcc:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002dce:	91 d9       	st.w	r8[0x34],r9
		break;
80002dd0:	c1 58       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002dd2:	30 19       	mov	r9,1
80002dd4:	f2 0c 09 49 	lsl	r9,r9,r12
80002dd8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002dda:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002ddc:	91 d9       	st.w	r8[0x34],r9
		break;
80002dde:	c0 e8       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002de0:	30 19       	mov	r9,1
80002de2:	f2 0c 09 49 	lsl	r9,r9,r12
80002de6:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002de8:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002dea:	91 d9       	st.w	r8[0x34],r9
		break;
80002dec:	c0 78       	rjmp	80002dfa <gpio_enable_module_pin+0x86>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002dee:	30 19       	mov	r9,1
80002df0:	f2 0c 09 49 	lsl	r9,r9,r12
80002df4:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002df6:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002df8:	91 d9       	st.w	r8[0x34],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002dfa:	30 19       	mov	r9,1
80002dfc:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e00:	91 2c       	st.w	r8[0x8],r12
80002e02:	5e fd       	retal	0
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	a8 c4       	st.b	r4[0x4],r4

80002e08 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002e08:	f8 08 16 05 	lsr	r8,r12,0x5
80002e0c:	a9 78       	lsl	r8,0x9
80002e0e:	e0 28 e0 00 	sub	r8,57344

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80002e12:	16 99       	mov	r9,r11
80002e14:	e2 19 00 08 	andl	r9,0x8,COH
80002e18:	c0 70       	breq	80002e26 <gpio_configure_pin+0x1e>
		gpio_port->pders = 1 << (pin & 0x1F);
80002e1a:	30 19       	mov	r9,1
80002e1c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e20:	f1 49 00 84 	st.w	r8[132],r9
80002e24:	c0 68       	rjmp	80002e30 <gpio_configure_pin+0x28>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80002e26:	30 19       	mov	r9,1
80002e28:	f2 0c 09 49 	lsl	r9,r9,r12
80002e2c:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002e30:	16 99       	mov	r9,r11
80002e32:	e2 19 00 04 	andl	r9,0x4,COH
80002e36:	c0 70       	breq	80002e44 <gpio_configure_pin+0x3c>
		gpio_port->puers = 1 << (pin & 0x1F);
80002e38:	30 19       	mov	r9,1
80002e3a:	f2 0c 09 49 	lsl	r9,r9,r12
80002e3e:	f1 49 00 74 	st.w	r8[116],r9
80002e42:	c0 68       	rjmp	80002e4e <gpio_configure_pin+0x46>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002e44:	30 19       	mov	r9,1
80002e46:	f2 0c 09 49 	lsl	r9,r9,r12
80002e4a:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80002e4e:	16 99       	mov	r9,r11
80002e50:	e2 19 00 40 	andl	r9,0x40,COH
80002e54:	c0 70       	breq	80002e62 <gpio_configure_pin+0x5a>
		gpio_port->odmers = 1 << (pin & 0x1F);
80002e56:	30 19       	mov	r9,1
80002e58:	f2 0c 09 49 	lsl	r9,r9,r12
80002e5c:	f1 49 00 e4 	st.w	r8[228],r9
80002e60:	c0 68       	rjmp	80002e6c <gpio_configure_pin+0x64>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80002e62:	30 19       	mov	r9,1
80002e64:	f2 0c 09 49 	lsl	r9,r9,r12
80002e68:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
80002e6c:	16 99       	mov	r9,r11
80002e6e:	e2 19 00 10 	andl	r9,0x10,COH
80002e72:	c0 70       	breq	80002e80 <gpio_configure_pin+0x78>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80002e74:	30 19       	mov	r9,1
80002e76:	f2 0c 09 49 	lsl	r9,r9,r12
80002e7a:	f1 49 01 04 	st.w	r8[260],r9
80002e7e:	c0 68       	rjmp	80002e8a <gpio_configure_pin+0x82>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80002e80:	30 19       	mov	r9,1
80002e82:	f2 0c 09 49 	lsl	r9,r9,r12
80002e86:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80002e8a:	16 99       	mov	r9,r11
80002e8c:	e2 19 00 20 	andl	r9,0x20,COH
80002e90:	c0 70       	breq	80002e9e <gpio_configure_pin+0x96>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80002e92:	30 19       	mov	r9,1
80002e94:	f2 0c 09 49 	lsl	r9,r9,r12
80002e98:	f1 49 01 14 	st.w	r8[276],r9
80002e9c:	c0 68       	rjmp	80002ea8 <gpio_configure_pin+0xa0>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
80002e9e:	30 19       	mov	r9,1
80002ea0:	f2 0c 09 49 	lsl	r9,r9,r12
80002ea4:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002ea8:	16 99       	mov	r9,r11
80002eaa:	e2 19 00 80 	andl	r9,0x80,COH
80002eae:	c2 40       	breq	80002ef6 <gpio_configure_pin+0xee>
		if (flags & GPIO_BOTHEDGES) {
80002eb0:	16 99       	mov	r9,r11
80002eb2:	e2 19 01 80 	andl	r9,0x180,COH
80002eb6:	c0 90       	breq	80002ec8 <gpio_configure_pin+0xc0>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002eb8:	30 19       	mov	r9,1
80002eba:	f2 0c 09 49 	lsl	r9,r9,r12
80002ebe:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002ec2:	f1 49 00 b8 	st.w	r8[184],r9
80002ec6:	c1 88       	rjmp	80002ef6 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_RISING) {
80002ec8:	16 99       	mov	r9,r11
80002eca:	e2 19 02 80 	andl	r9,0x280,COH
80002ece:	c0 90       	breq	80002ee0 <gpio_configure_pin+0xd8>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002ed0:	30 19       	mov	r9,1
80002ed2:	f2 0c 09 49 	lsl	r9,r9,r12
80002ed6:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002eda:	f1 49 00 b8 	st.w	r8[184],r9
80002ede:	c0 c8       	rjmp	80002ef6 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_FALLING) {
80002ee0:	16 99       	mov	r9,r11
80002ee2:	e2 19 03 80 	andl	r9,0x380,COH
80002ee6:	c0 80       	breq	80002ef6 <gpio_configure_pin+0xee>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002ee8:	30 19       	mov	r9,1
80002eea:	f2 0c 09 49 	lsl	r9,r9,r12
80002eee:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002ef2:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002ef6:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002efa:	c1 50       	breq	80002f24 <gpio_configure_pin+0x11c>
		if (flags & GPIO_INIT_HIGH) {
80002efc:	e2 1b 00 02 	andl	r11,0x2,COH
80002f00:	c0 70       	breq	80002f0e <gpio_configure_pin+0x106>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002f02:	30 19       	mov	r9,1
80002f04:	f2 0c 09 49 	lsl	r9,r9,r12
80002f08:	f1 49 00 54 	st.w	r8[84],r9
80002f0c:	c0 68       	rjmp	80002f18 <gpio_configure_pin+0x110>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002f0e:	30 19       	mov	r9,1
80002f10:	f2 0c 09 49 	lsl	r9,r9,r12
80002f14:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002f18:	30 19       	mov	r9,1
80002f1a:	f2 0c 09 49 	lsl	r9,r9,r12
80002f1e:	f1 49 00 44 	st.w	r8[68],r9
80002f22:	c0 68       	rjmp	80002f2e <gpio_configure_pin+0x126>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002f24:	30 19       	mov	r9,1
80002f26:	f2 0c 09 49 	lsl	r9,r9,r12
80002f2a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002f2e:	30 19       	mov	r9,1
80002f30:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f34:	91 1c       	st.w	r8[0x4],r12
}
80002f36:	5e fc       	retal	r12

80002f38 <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f38:	f8 08 16 05 	lsr	r8,r12,0x5
80002f3c:	a9 78       	lsl	r8,0x9
80002f3e:	e0 28 e0 00 	sub	r8,57344
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002f42:	30 19       	mov	r9,1
80002f44:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f48:	f1 4c 00 58 	st.w	r8[88],r12
}
80002f4c:	5e fc       	retal	r12

80002f4e <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002f4e:	f8 08 16 05 	lsr	r8,r12,0x5
80002f52:	a9 78       	lsl	r8,0x9
80002f54:	e0 28 e0 00 	sub	r8,57344
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002f58:	30 19       	mov	r9,1
80002f5a:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f5e:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002f62:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002f66:	91 1c       	st.w	r8[0x4],r12
}
80002f68:	5e fc       	retal	r12
80002f6a:	d7 03       	nop

80002f6c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002f6c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002f70:	49 99       	lddpc	r9,80002fd4 <INTC_register_interrupt+0x68>
80002f72:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002f76:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002f7a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002f7c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002f80:	58 0a       	cp.w	r10,0
80002f82:	c0 91       	brne	80002f94 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002f84:	49 59       	lddpc	r9,80002fd8 <INTC_register_interrupt+0x6c>
80002f86:	49 6a       	lddpc	r10,80002fdc <INTC_register_interrupt+0x70>
80002f88:	12 1a       	sub	r10,r9
80002f8a:	fe 79 00 00 	mov	r9,-65536
80002f8e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002f92:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002f94:	58 1a       	cp.w	r10,1
80002f96:	c0 a1       	brne	80002faa <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002f98:	49 09       	lddpc	r9,80002fd8 <INTC_register_interrupt+0x6c>
80002f9a:	49 2a       	lddpc	r10,80002fe0 <INTC_register_interrupt+0x74>
80002f9c:	12 1a       	sub	r10,r9
80002f9e:	bf aa       	sbr	r10,0x1e
80002fa0:	fe 79 00 00 	mov	r9,-65536
80002fa4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fa8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002faa:	58 2a       	cp.w	r10,2
80002fac:	c0 a1       	brne	80002fc0 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002fae:	48 b9       	lddpc	r9,80002fd8 <INTC_register_interrupt+0x6c>
80002fb0:	48 da       	lddpc	r10,80002fe4 <INTC_register_interrupt+0x78>
80002fb2:	12 1a       	sub	r10,r9
80002fb4:	bf ba       	sbr	r10,0x1f
80002fb6:	fe 79 00 00 	mov	r9,-65536
80002fba:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fbe:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002fc0:	48 69       	lddpc	r9,80002fd8 <INTC_register_interrupt+0x6c>
80002fc2:	48 aa       	lddpc	r10,80002fe8 <INTC_register_interrupt+0x7c>
80002fc4:	12 1a       	sub	r10,r9
80002fc6:	ea 1a c0 00 	orh	r10,0xc000
80002fca:	fe 79 00 00 	mov	r9,-65536
80002fce:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002fd2:	5e fc       	retal	r12
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	a8 e4       	st.b	r4[0x6],r4
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	8e 00       	ld.sh	r0,r7[0x0]
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	8f 04       	st.w	r7[0x0],r4
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	8f 12       	st.w	r7[0x4],r2
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	8f 20       	st.w	r7[0x8],r0
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	8f 2e       	st.w	r7[0x8],lr

80002fec <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002fec:	fe 78 00 00 	mov	r8,-65536
80002ff0:	e0 69 00 83 	mov	r9,131
80002ff4:	f2 0c 01 0c 	sub	r12,r9,r12
80002ff8:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002ffc:	f2 ca ff c0 	sub	r10,r9,-64
80003000:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003004:	58 08       	cp.w	r8,0
80003006:	c0 21       	brne	8000300a <_get_interrupt_handler+0x1e>
80003008:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000300a:	f0 08 12 00 	clz	r8,r8
8000300e:	48 5a       	lddpc	r10,80003020 <_get_interrupt_handler+0x34>
80003010:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003014:	f0 08 11 1f 	rsub	r8,r8,31
80003018:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000301a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000301e:	5e fc       	retal	r12
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	a8 e4       	st.b	r4[0x6],r4

80003024 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003024:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003026:	f6 08 15 04 	lsl	r8,r11,0x4
8000302a:	14 38       	cp.w	r8,r10
8000302c:	f9 b8 08 10 	movls	r8,16
80003030:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003034:	f0 0b 02 4b 	mul	r11,r8,r11
80003038:	f6 09 16 01 	lsr	r9,r11,0x1
8000303c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003040:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003044:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003048:	f2 cb 00 01 	sub	r11,r9,1
8000304c:	e0 4b ff fe 	cp.w	r11,65534
80003050:	e0 88 00 03 	brls	80003056 <usart_set_async_baudrate+0x32>
80003054:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003056:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003058:	e8 6e 00 00 	mov	lr,524288
8000305c:	59 08       	cp.w	r8,16
8000305e:	fc 08 17 10 	movne	r8,lr
80003062:	f9 b8 00 00 	moveq	r8,0
80003066:	e4 1b ff f7 	andh	r11,0xfff7
8000306a:	e0 1b fe cf 	andl	r11,0xfecf
8000306e:	16 48       	or	r8,r11
80003070:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003072:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003076:	f3 ea 11 09 	or	r9,r9,r10<<0x10
8000307a:	99 89       	st.w	r12[0x20],r9
8000307c:	d8 0a       	popm	pc,r12=0

8000307e <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8000307e:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80003080:	e2 18 00 02 	andl	r8,0x2,COH
80003084:	c0 31       	brne	8000308a <usart_write_char+0xc>
80003086:	30 2c       	mov	r12,2
80003088:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000308a:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
8000308e:	99 7b       	st.w	r12[0x1c],r11
80003090:	5e fd       	retal	0
80003092:	d7 03       	nop

80003094 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80003094:	eb cd 40 e0 	pushm	r5-r7,lr
80003098:	18 96       	mov	r6,r12
8000309a:	16 95       	mov	r5,r11
8000309c:	e0 77 86 9f 	mov	r7,99999
800030a0:	c0 68       	rjmp	800030ac <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800030a2:	58 07       	cp.w	r7,0
800030a4:	c0 31       	brne	800030aa <usart_putchar+0x16>
800030a6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
800030aa:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800030ac:	0a 9b       	mov	r11,r5
800030ae:	0c 9c       	mov	r12,r6
800030b0:	f0 1f 00 03 	mcall	800030bc <usart_putchar+0x28>
800030b4:	cf 71       	brne	800030a2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
800030b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800030ba:	00 00       	add	r0,r0
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	30 7e       	mov	lr,7

800030c0 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
800030c0:	78 58       	ld.w	r8,r12[0x14]
800030c2:	e2 18 00 e0 	andl	r8,0xe0,COH
800030c6:	c0 30       	breq	800030cc <usart_read_char+0xc>
800030c8:	30 4c       	mov	r12,4
800030ca:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
800030cc:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
800030ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030d2:	c0 31       	brne	800030d8 <usart_read_char+0x18>
800030d4:	30 3c       	mov	r12,3
800030d6:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
800030d8:	78 68       	ld.w	r8,r12[0x18]
800030da:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800030de:	97 08       	st.w	r11[0x0],r8
800030e0:	5e fd       	retal	0
800030e2:	d7 03       	nop

800030e4 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
800030e4:	eb cd 40 c0 	pushm	r6-r7,lr
800030e8:	20 1d       	sub	sp,4
800030ea:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
800030ec:	1a 97       	mov	r7,sp
800030ee:	1a 9b       	mov	r11,sp
800030f0:	0c 9c       	mov	r12,r6
800030f2:	f0 1f 00 07 	mcall	8000310c <usart_getchar+0x28>
800030f6:	58 3c       	cp.w	r12,3
800030f8:	cf b0       	breq	800030ee <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
800030fa:	58 4c       	cp.w	r12,4
800030fc:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
80003100:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80003104:	2f fd       	sub	sp,-4
80003106:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000310a:	00 00       	add	r0,r0
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	30 c0       	mov	r0,12

80003110 <usart_getchar_timeout>:

int usart_getchar_timeout(volatile avr32_usart_t *usart)
{
80003110:	eb cd 40 e0 	pushm	r5-r7,lr
80003114:	20 1d       	sub	sp,4
80003116:	18 96       	mov	r6,r12
80003118:	e0 67 96 80 	mov	r7,38528
8000311c:	ea 17 00 98 	orh	r7,0x98
	int c, ret, timeout = 10000000;

	while ( ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY) && timeout > 0)
80003120:	1a 95       	mov	r5,sp
80003122:	c0 28       	rjmp	80003126 <usart_getchar_timeout+0x16>
		timeout--;
80003124:	20 17       	sub	r7,1

int usart_getchar_timeout(volatile avr32_usart_t *usart)
{
	int c, ret, timeout = 10000000;

	while ( ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY) && timeout > 0)
80003126:	1a 9b       	mov	r11,sp
80003128:	0c 9c       	mov	r12,r6
8000312a:	f0 1f 00 09 	mcall	8000314c <usart_getchar_timeout+0x3c>
8000312e:	58 3c       	cp.w	r12,3
80003130:	c0 41       	brne	80003138 <usart_getchar_timeout+0x28>
80003132:	58 07       	cp.w	r7,0
80003134:	cf 81       	brne	80003124 <usart_getchar_timeout+0x14>
80003136:	c0 38       	rjmp	8000313c <usart_getchar_timeout+0x2c>
		timeout--;

	if (ret == USART_RX_ERROR)
80003138:	58 4c       	cp.w	r12,4
8000313a:	c0 50       	breq	80003144 <usart_getchar_timeout+0x34>
		return USART_FAILURE;

	if(timeout == 0)
8000313c:	58 07       	cp.w	r7,0
8000313e:	c0 30       	breq	80003144 <usart_getchar_timeout+0x34>
		return USART_TIMEOUT;

	return c;
80003140:	40 0c       	lddsp	r12,sp[0x0]
80003142:	c0 28       	rjmp	80003146 <usart_getchar_timeout+0x36>
80003144:	3f fc       	mov	r12,-1
}
80003146:	2f fd       	sub	sp,-4
80003148:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000314c:	80 00       	ld.sh	r0,r0[0x0]
8000314e:	30 c0       	mov	r0,12

80003150 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80003150:	eb cd 40 c0 	pushm	r6-r7,lr
80003154:	18 96       	mov	r6,r12
80003156:	16 97       	mov	r7,r11
  while (*string != '\0')
80003158:	17 8b       	ld.ub	r11,r11[0x0]
8000315a:	58 0b       	cp.w	r11,0
8000315c:	c0 80       	breq	8000316c <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
8000315e:	2f f7       	sub	r7,-1
80003160:	0c 9c       	mov	r12,r6
80003162:	f0 1f 00 04 	mcall	80003170 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80003166:	0f 8b       	ld.ub	r11,r7[0x0]
80003168:	58 0b       	cp.w	r11,0
8000316a:	cf a1       	brne	8000315e <usart_write_line+0xe>
8000316c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003170:	80 00       	ld.sh	r0,r0[0x0]
80003172:	30 94       	mov	r4,9

80003174 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003174:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003178:	e6 18 00 01 	andh	r8,0x1,COH
8000317c:	c0 71       	brne	8000318a <usart_reset+0x16>
8000317e:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003180:	3f f8       	mov	r8,-1
80003182:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80003184:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003186:	d5 03       	csrf	0x10
80003188:	c0 48       	rjmp	80003190 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
8000318a:	3f f8       	mov	r8,-1
8000318c:	99 38       	st.w	r12[0xc],r8
  usart->csr;
8000318e:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003190:	30 08       	mov	r8,0
80003192:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003194:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003196:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003198:	ea 68 61 0c 	mov	r8,680204
8000319c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000319e:	5e fc       	retal	r12

800031a0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800031a0:	eb cd 40 e0 	pushm	r5-r7,lr
800031a4:	18 96       	mov	r6,r12
800031a6:	16 97       	mov	r7,r11
800031a8:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800031aa:	f0 1f 00 2f 	mcall	80003264 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
800031ae:	58 07       	cp.w	r7,0
800031b0:	c5 80       	breq	80003260 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
800031b2:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800031b4:	30 49       	mov	r9,4
800031b6:	f2 08 18 00 	cp.b	r8,r9
800031ba:	e0 88 00 53 	brls	80003260 <usart_init_rs232+0xc0>
800031be:	30 99       	mov	r9,9
800031c0:	f2 08 18 00 	cp.b	r8,r9
800031c4:	e0 8b 00 4e 	brhi	80003260 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
800031c8:	0f d9       	ld.ub	r9,r7[0x5]
800031ca:	30 78       	mov	r8,7
800031cc:	f0 09 18 00 	cp.b	r9,r8
800031d0:	e0 8b 00 48 	brhi	80003260 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
800031d4:	8e 39       	ld.sh	r9,r7[0x6]
800031d6:	e0 68 01 01 	mov	r8,257
800031da:	f0 09 19 00 	cp.h	r9,r8
800031de:	e0 8b 00 41 	brhi	80003260 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
800031e2:	ef 39 00 08 	ld.ub	r9,r7[8]
800031e6:	30 38       	mov	r8,3
800031e8:	f0 09 18 00 	cp.b	r9,r8
800031ec:	e0 8b 00 3a 	brhi	80003260 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800031f0:	0a 9a       	mov	r10,r5
800031f2:	6e 0b       	ld.w	r11,r7[0x0]
800031f4:	0c 9c       	mov	r12,r6
800031f6:	f0 1f 00 1d 	mcall	80003268 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800031fa:	58 1c       	cp.w	r12,1
800031fc:	c3 20       	breq	80003260 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800031fe:	0f c8       	ld.ub	r8,r7[0x4]
80003200:	30 99       	mov	r9,9
80003202:	f2 08 18 00 	cp.b	r8,r9
80003206:	c0 51       	brne	80003210 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003208:	6c 18       	ld.w	r8,r6[0x4]
8000320a:	b1 b8       	sbr	r8,0x11
8000320c:	8d 18       	st.w	r6[0x4],r8
8000320e:	c0 68       	rjmp	8000321a <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003210:	6c 19       	ld.w	r9,r6[0x4]
80003212:	20 58       	sub	r8,5
80003214:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003218:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000321a:	6c 19       	ld.w	r9,r6[0x4]
8000321c:	ef 3a 00 08 	ld.ub	r10,r7[8]
80003220:	0f d8       	ld.ub	r8,r7[0x5]
80003222:	a9 78       	lsl	r8,0x9
80003224:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003228:	12 48       	or	r8,r9
8000322a:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000322c:	8e 38       	ld.sh	r8,r7[0x6]
8000322e:	30 29       	mov	r9,2
80003230:	f2 08 19 00 	cp.h	r8,r9
80003234:	e0 88 00 09 	brls	80003246 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003238:	6c 18       	ld.w	r8,r6[0x4]
8000323a:	ad b8       	sbr	r8,0xd
8000323c:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000323e:	8e b8       	ld.uh	r8,r7[0x6]
80003240:	20 28       	sub	r8,2
80003242:	8d a8       	st.w	r6[0x28],r8
80003244:	c0 68       	rjmp	80003250 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003246:	6c 19       	ld.w	r9,r6[0x4]
80003248:	5c 78       	castu.h	r8
8000324a:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
8000324e:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003250:	6c 18       	ld.w	r8,r6[0x4]
80003252:	e0 18 ff f0 	andl	r8,0xfff0
80003256:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003258:	35 08       	mov	r8,80
8000325a:	8d 08       	st.w	r6[0x0],r8
8000325c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003260:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	31 74       	mov	r4,23
80003268:	80 00       	ld.sh	r0,r0[0x0]
8000326a:	30 24       	mov	r4,2

8000326c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000326c:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003270:	fe c0 a4 70 	sub	r0,pc,-23440

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003274:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003278:	d5 53       	csrf	0x15
  cp      r0, r1
8000327a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000327c:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003280:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003282:	c0 72       	brcc	80003290 <idata_load_loop_end>
  cp      r0, r1
80003284:	fe c2 82 a4 	sub	r2,pc,-32092

80003288 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003288:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000328a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000328c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000328e:	cf d3       	brcs	80003288 <idata_load_loop>

80003290 <idata_load_loop_end>:
  mov     r2, 0
80003290:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003294:	e0 61 08 68 	mov	r1,2152
  cp      r0, r1
  brlo    udata_clear_loop
80003298:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000329a:	c0 62       	brcc	800032a6 <udata_clear_loop_end>
8000329c:	30 02       	mov	r2,0
8000329e:	30 03       	mov	r3,0

800032a0 <udata_clear_loop>:
800032a0:	a1 22       	st.d	r0++,r2
800032a2:	02 30       	cp.w	r0,r1
800032a4:	cf e3       	brcs	800032a0 <udata_clear_loop>

800032a6 <udata_clear_loop_end>:
800032a6:	fe cf ff 1a 	sub	pc,pc,-230
800032aa:	d7 03       	nop

800032ac <osc_priv_enable_osc0>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032ac:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032b0:	d3 03       	ssrf	0x10
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
800032b2:	fe 78 08 00 	mov	r8,-63488
800032b6:	32 4a       	mov	r10,36
800032b8:	ea 1a aa 00 	orh	r10,0xaa00
800032bc:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
800032be:	e0 7a 0c 07 	mov	r10,68615
800032c2:	91 9a       	st.w	r8[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800032c4:	12 98       	mov	r8,r9
800032c6:	e6 18 00 01 	andh	r8,0x1,COH
800032ca:	c0 21       	brne	800032ce <osc_priv_enable_osc0+0x22>
      cpu_irq_enable();
800032cc:	d5 03       	csrf	0x10
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
800032ce:	5e fc       	retal	r12

800032d0 <sysclk_set_source>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032d0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032d4:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
800032d6:	fe 78 04 00 	mov	r8,-64512
800032da:	fc 1a aa 00 	movh	r10,0xaa00
800032de:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
800032e2:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800032e4:	12 98       	mov	r8,r9
800032e6:	e6 18 00 01 	andh	r8,0x1,COH
800032ea:	c0 21       	brne	800032ee <sysclk_set_source+0x1e>
      cpu_irq_enable();
800032ec:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800032ee:	5e fc       	retal	r12

800032f0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800032f0:	d4 01       	pushm	lr
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
800032f2:	f0 1f 00 0a 	mcall	80003318 <sysclk_init+0x28>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
800032f6:	fe 78 08 00 	mov	r8,-63488
800032fa:	70 59       	ld.w	r9,r8[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032fc:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003300:	cf d0       	breq	800032fa <sysclk_init+0xa>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80003302:	e0 6c 24 00 	mov	r12,9216
80003306:	ea 1c 00 f4 	orh	r12,0xf4
8000330a:	f0 1f 00 05 	mcall	8000331c <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
8000330e:	30 1c       	mov	r12,1
80003310:	f0 1f 00 04 	mcall	80003320 <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003314:	d8 02       	popm	pc
80003316:	00 00       	add	r0,r0
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	32 ac       	mov	r12,42
8000331c:	80 00       	ld.sh	r0,r0[0x0]
8000331e:	2d 50       	sub	r0,-43
80003320:	80 00       	ld.sh	r0,r0[0x0]
80003322:	32 d0       	mov	r0,45

80003324 <general_initialize>:
	while(true)
		start_terminal();
}

void general_initialize()
{
80003324:	d4 01       	pushm	lr
	/* Inicializa o sistema de clocks do processador. */
	sysclk_init();
80003326:	f0 1f 00 15 	mcall	80003378 <general_initialize+0x54>
	
	/* Inicializa o sistema de delays. */
	delay_init(CPU_HZ);
	
	/* Configuracao dos GPIOs conectados aos LEDs da placa STK600 */
	gpio_configure_pin( ITASAT_LED0, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000332a:	30 3b       	mov	r11,3
8000332c:	30 8c       	mov	r12,8
8000332e:	f0 1f 00 14 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED1, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003332:	30 3b       	mov	r11,3
80003334:	30 9c       	mov	r12,9
80003336:	f0 1f 00 12 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED2, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000333a:	30 3b       	mov	r11,3
8000333c:	30 ac       	mov	r12,10
8000333e:	f0 1f 00 10 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED3, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003342:	30 3b       	mov	r11,3
80003344:	30 bc       	mov	r12,11
80003346:	f0 1f 00 0e 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED4, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000334a:	30 3b       	mov	r11,3
8000334c:	30 cc       	mov	r12,12
8000334e:	f0 1f 00 0c 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED5, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003352:	30 3b       	mov	r11,3
80003354:	30 dc       	mov	r12,13
80003356:	f0 1f 00 0a 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED6, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
8000335a:	30 3b       	mov	r11,3
8000335c:	30 ec       	mov	r12,14
8000335e:	f0 1f 00 08 	mcall	8000337c <general_initialize+0x58>
	gpio_configure_pin( ITASAT_LED7, GPIO_INIT_HIGH | GPIO_DIR_OUTPUT );
80003362:	30 3b       	mov	r11,3
80003364:	30 fc       	mov	r12,15
80003366:	f0 1f 00 06 	mcall	8000337c <general_initialize+0x58>
	
	/* Inicializa a interface USART conectada ao terminal */
	initTerminalInterface();
8000336a:	f0 1f 00 06 	mcall	80003380 <general_initialize+0x5c>
	
	/* Incializa a interface USART utilizada no controle dos testes. */
	initTestsExecContrInterface();
8000336e:	f0 1f 00 06 	mcall	80003384 <general_initialize+0x60>
	 * Inicializa a interface I2C conectada a interface sob testes.
	 *
	 * Importante: Caso o sistema esteja travando, verificar se 
	 * nao estah ocorrendo nenhum erro na inicializacao do I2C.
	 */
	initI2CTestsInterface();
80003372:	f0 1f 00 06 	mcall	80003388 <general_initialize+0x64>
}
80003376:	d8 02       	popm	pc
80003378:	80 00       	ld.sh	r0,r0[0x0]
8000337a:	32 f0       	mov	r0,47
8000337c:	80 00       	ld.sh	r0,r0[0x0]
8000337e:	2e 08       	sub	r8,-32
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	2a 40       	sub	r0,-92
80003384:	80 00       	ld.sh	r0,r0[0x0]
80003386:	2d 00       	sub	r0,-48
80003388:	80 00       	ld.sh	r0,r0[0x0]
8000338a:	28 cc       	sub	r12,-116

8000338c <main>:
#include <asf.h>
#include <itasat_pins_functions_stk600.h>
#include <tcc_test_controller.h>

int main (void)
{	
8000338c:	d4 01       	pushm	lr
	general_initialize();
8000338e:	f0 1f 00 06 	mcall	800033a4 <main+0x18>
	
	print_dbg("\n==============================\nTCC Test Controller\n==============================\n");
80003392:	48 6b       	lddpc	r11,800033a8 <main+0x1c>
80003394:	fc 7c 14 00 	mov	r12,-191488
80003398:	f0 1f 00 05 	mcall	800033ac <main+0x20>
	
	while(true)
		start_terminal();
8000339c:	f0 1f 00 05 	mcall	800033b0 <main+0x24>
800033a0:	cf eb       	rjmp	8000339c <main+0x10>
800033a2:	00 00       	add	r0,r0
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	33 24       	mov	r4,50
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	a7 20       	st.d	r3++,r0
800033ac:	80 00       	ld.sh	r0,r0[0x0]
800033ae:	31 50       	mov	r0,21
800033b0:	80 00       	ld.sh	r0,r0[0x0]
800033b2:	2a 80       	sub	r0,-88

800033b4 <memcpy>:
800033b4:	58 8a       	cp.w	r10,8
800033b6:	c2 f5       	brlt	80003414 <memcpy+0x60>
800033b8:	f9 eb 10 09 	or	r9,r12,r11
800033bc:	e2 19 00 03 	andl	r9,0x3,COH
800033c0:	e0 81 00 97 	brne	800034ee <memcpy+0x13a>
800033c4:	e0 4a 00 20 	cp.w	r10,32
800033c8:	c3 b4       	brge	8000343e <memcpy+0x8a>
800033ca:	f4 08 14 02 	asr	r8,r10,0x2
800033ce:	f0 09 11 08 	rsub	r9,r8,8
800033d2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800033d6:	76 69       	ld.w	r9,r11[0x18]
800033d8:	99 69       	st.w	r12[0x18],r9
800033da:	76 59       	ld.w	r9,r11[0x14]
800033dc:	99 59       	st.w	r12[0x14],r9
800033de:	76 49       	ld.w	r9,r11[0x10]
800033e0:	99 49       	st.w	r12[0x10],r9
800033e2:	76 39       	ld.w	r9,r11[0xc]
800033e4:	99 39       	st.w	r12[0xc],r9
800033e6:	76 29       	ld.w	r9,r11[0x8]
800033e8:	99 29       	st.w	r12[0x8],r9
800033ea:	76 19       	ld.w	r9,r11[0x4]
800033ec:	99 19       	st.w	r12[0x4],r9
800033ee:	76 09       	ld.w	r9,r11[0x0]
800033f0:	99 09       	st.w	r12[0x0],r9
800033f2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800033f6:	f8 08 00 28 	add	r8,r12,r8<<0x2
800033fa:	e0 1a 00 03 	andl	r10,0x3
800033fe:	f4 0a 11 04 	rsub	r10,r10,4
80003402:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003406:	17 a9       	ld.ub	r9,r11[0x2]
80003408:	b0 a9       	st.b	r8[0x2],r9
8000340a:	17 99       	ld.ub	r9,r11[0x1]
8000340c:	b0 99       	st.b	r8[0x1],r9
8000340e:	17 89       	ld.ub	r9,r11[0x0]
80003410:	b0 89       	st.b	r8[0x0],r9
80003412:	5e fc       	retal	r12
80003414:	f4 0a 11 09 	rsub	r10,r10,9
80003418:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000341c:	17 f9       	ld.ub	r9,r11[0x7]
8000341e:	b8 f9       	st.b	r12[0x7],r9
80003420:	17 e9       	ld.ub	r9,r11[0x6]
80003422:	b8 e9       	st.b	r12[0x6],r9
80003424:	17 d9       	ld.ub	r9,r11[0x5]
80003426:	b8 d9       	st.b	r12[0x5],r9
80003428:	17 c9       	ld.ub	r9,r11[0x4]
8000342a:	b8 c9       	st.b	r12[0x4],r9
8000342c:	17 b9       	ld.ub	r9,r11[0x3]
8000342e:	b8 b9       	st.b	r12[0x3],r9
80003430:	17 a9       	ld.ub	r9,r11[0x2]
80003432:	b8 a9       	st.b	r12[0x2],r9
80003434:	17 99       	ld.ub	r9,r11[0x1]
80003436:	b8 99       	st.b	r12[0x1],r9
80003438:	17 89       	ld.ub	r9,r11[0x0]
8000343a:	b8 89       	st.b	r12[0x0],r9
8000343c:	5e fc       	retal	r12
8000343e:	eb cd 40 c0 	pushm	r6-r7,lr
80003442:	18 99       	mov	r9,r12
80003444:	22 0a       	sub	r10,32
80003446:	b7 07       	ld.d	r6,r11++
80003448:	b3 26       	st.d	r9++,r6
8000344a:	b7 07       	ld.d	r6,r11++
8000344c:	b3 26       	st.d	r9++,r6
8000344e:	b7 07       	ld.d	r6,r11++
80003450:	b3 26       	st.d	r9++,r6
80003452:	b7 07       	ld.d	r6,r11++
80003454:	b3 26       	st.d	r9++,r6
80003456:	22 0a       	sub	r10,32
80003458:	cf 74       	brge	80003446 <memcpy+0x92>
8000345a:	2f 0a       	sub	r10,-16
8000345c:	c0 65       	brlt	80003468 <memcpy+0xb4>
8000345e:	b7 07       	ld.d	r6,r11++
80003460:	b3 26       	st.d	r9++,r6
80003462:	b7 07       	ld.d	r6,r11++
80003464:	b3 26       	st.d	r9++,r6
80003466:	21 0a       	sub	r10,16
80003468:	5c 3a       	neg	r10
8000346a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000346e:	d7 03       	nop
80003470:	d7 03       	nop
80003472:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003476:	f3 66 00 0e 	st.b	r9[14],r6
8000347a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000347e:	f3 66 00 0d 	st.b	r9[13],r6
80003482:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003486:	f3 66 00 0c 	st.b	r9[12],r6
8000348a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000348e:	f3 66 00 0b 	st.b	r9[11],r6
80003492:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003496:	f3 66 00 0a 	st.b	r9[10],r6
8000349a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000349e:	f3 66 00 09 	st.b	r9[9],r6
800034a2:	f7 36 00 08 	ld.ub	r6,r11[8]
800034a6:	f3 66 00 08 	st.b	r9[8],r6
800034aa:	f7 36 00 07 	ld.ub	r6,r11[7]
800034ae:	f3 66 00 07 	st.b	r9[7],r6
800034b2:	f7 36 00 06 	ld.ub	r6,r11[6]
800034b6:	f3 66 00 06 	st.b	r9[6],r6
800034ba:	f7 36 00 05 	ld.ub	r6,r11[5]
800034be:	f3 66 00 05 	st.b	r9[5],r6
800034c2:	f7 36 00 04 	ld.ub	r6,r11[4]
800034c6:	f3 66 00 04 	st.b	r9[4],r6
800034ca:	f7 36 00 03 	ld.ub	r6,r11[3]
800034ce:	f3 66 00 03 	st.b	r9[3],r6
800034d2:	f7 36 00 02 	ld.ub	r6,r11[2]
800034d6:	f3 66 00 02 	st.b	r9[2],r6
800034da:	f7 36 00 01 	ld.ub	r6,r11[1]
800034de:	f3 66 00 01 	st.b	r9[1],r6
800034e2:	f7 36 00 00 	ld.ub	r6,r11[0]
800034e6:	f3 66 00 00 	st.b	r9[0],r6
800034ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800034ee:	20 1a       	sub	r10,1
800034f0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800034f4:	f8 0a 0b 09 	st.b	r12[r10],r9
800034f8:	cf b1       	brne	800034ee <memcpy+0x13a>
800034fa:	5e fc       	retal	r12

800034fc <sprintf>:
800034fc:	d4 01       	pushm	lr
800034fe:	21 7d       	sub	sp,92
80003500:	e0 68 ff ff 	mov	r8,65535
80003504:	ea 18 7f ff 	orh	r8,0x7fff
80003508:	50 58       	stdsp	sp[0x14],r8
8000350a:	50 28       	stdsp	sp[0x8],r8
8000350c:	e0 68 02 08 	mov	r8,520
80003510:	ba 68       	st.h	sp[0xc],r8
80003512:	3f f8       	mov	r8,-1
80003514:	ba 78       	st.h	sp[0xe],r8
80003516:	e0 68 00 f8 	mov	r8,248
8000351a:	50 4c       	stdsp	sp[0x10],r12
8000351c:	16 9a       	mov	r10,r11
8000351e:	50 0c       	stdsp	sp[0x0],r12
80003520:	fa c9 ff a0 	sub	r9,sp,-96
80003524:	70 0c       	ld.w	r12,r8[0x0]
80003526:	1a 9b       	mov	r11,sp
80003528:	cf 2d       	rcall	8000390c <_vfprintf_r>
8000352a:	30 09       	mov	r9,0
8000352c:	40 08       	lddsp	r8,sp[0x0]
8000352e:	b0 89       	st.b	r8[0x0],r9
80003530:	2e 9d       	sub	sp,-92
80003532:	d8 02       	popm	pc

80003534 <strcmp>:
80003534:	f9 eb 10 0a 	or	r10,r12,r11
80003538:	e2 1a 00 03 	andl	r10,0x3,COH
8000353c:	c3 41       	brne	800035a4 <strcmp+0x70>
8000353e:	78 0a       	ld.w	r10,r12[0x0]
80003540:	76 09       	ld.w	r9,r11[0x0]
80003542:	5c ea       	tnbz	r10
80003544:	c1 70       	breq	80003572 <strcmp+0x3e>
80003546:	12 3a       	cp.w	r10,r9
80003548:	c1 51       	brne	80003572 <strcmp+0x3e>
8000354a:	78 1a       	ld.w	r10,r12[0x4]
8000354c:	76 19       	ld.w	r9,r11[0x4]
8000354e:	5c ea       	tnbz	r10
80003550:	c1 10       	breq	80003572 <strcmp+0x3e>
80003552:	12 3a       	cp.w	r10,r9
80003554:	c0 f1       	brne	80003572 <strcmp+0x3e>
80003556:	78 2a       	ld.w	r10,r12[0x8]
80003558:	76 29       	ld.w	r9,r11[0x8]
8000355a:	5c ea       	tnbz	r10
8000355c:	c0 b0       	breq	80003572 <strcmp+0x3e>
8000355e:	12 3a       	cp.w	r10,r9
80003560:	c0 91       	brne	80003572 <strcmp+0x3e>
80003562:	78 3a       	ld.w	r10,r12[0xc]
80003564:	76 39       	ld.w	r9,r11[0xc]
80003566:	5c ea       	tnbz	r10
80003568:	c0 50       	breq	80003572 <strcmp+0x3e>
8000356a:	2f 0c       	sub	r12,-16
8000356c:	2f 0b       	sub	r11,-16
8000356e:	12 3a       	cp.w	r10,r9
80003570:	ce 70       	breq	8000353e <strcmp+0xa>
80003572:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
80003576:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000357a:	5e 0c       	reteq	r12
8000357c:	16 1c       	sub	r12,r11
8000357e:	5e 1c       	retne	r12
80003580:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
80003584:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
80003588:	5e 0c       	reteq	r12
8000358a:	16 1c       	sub	r12,r11
8000358c:	5e 1c       	retne	r12
8000358e:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
80003592:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
80003596:	5e 0c       	reteq	r12
80003598:	16 1c       	sub	r12,r11
8000359a:	5e 1c       	retne	r12
8000359c:	5c 5a       	castu.b	r10
8000359e:	5c 59       	castu.b	r9
800035a0:	12 1a       	sub	r10,r9
800035a2:	5e fa       	retal	r10
800035a4:	17 8a       	ld.ub	r10,r11[0x0]
800035a6:	19 89       	ld.ub	r9,r12[0x0]
800035a8:	58 0a       	cp.w	r10,0
800035aa:	5e 09       	reteq	r9
800035ac:	14 19       	sub	r9,r10
800035ae:	5e 19       	retne	r9
800035b0:	17 9a       	ld.ub	r10,r11[0x1]
800035b2:	19 99       	ld.ub	r9,r12[0x1]
800035b4:	58 0a       	cp.w	r10,0
800035b6:	5e 09       	reteq	r9
800035b8:	14 19       	sub	r9,r10
800035ba:	5e 19       	retne	r9
800035bc:	17 aa       	ld.ub	r10,r11[0x2]
800035be:	19 a9       	ld.ub	r9,r12[0x2]
800035c0:	58 0a       	cp.w	r10,0
800035c2:	5e 09       	reteq	r9
800035c4:	14 19       	sub	r9,r10
800035c6:	5e 19       	retne	r9
800035c8:	17 ba       	ld.ub	r10,r11[0x3]
800035ca:	19 b9       	ld.ub	r9,r12[0x3]
800035cc:	58 0a       	cp.w	r10,0
800035ce:	5e 09       	reteq	r9
800035d0:	14 19       	sub	r9,r10
800035d2:	5e 19       	retne	r9
800035d4:	2f cb       	sub	r11,-4
800035d6:	2f cc       	sub	r12,-4
800035d8:	ce 6b       	rjmp	800035a4 <strcmp+0x70>
800035da:	d7 03       	nop

800035dc <get_arg>:
800035dc:	d4 31       	pushm	r0-r7,lr
800035de:	20 8d       	sub	sp,32
800035e0:	fa c4 ff bc 	sub	r4,sp,-68
800035e4:	50 4b       	stdsp	sp[0x10],r11
800035e6:	68 2e       	ld.w	lr,r4[0x8]
800035e8:	50 58       	stdsp	sp[0x14],r8
800035ea:	12 96       	mov	r6,r9
800035ec:	7c 0b       	ld.w	r11,lr[0x0]
800035ee:	70 05       	ld.w	r5,r8[0x0]
800035f0:	50 6e       	stdsp	sp[0x18],lr
800035f2:	58 0b       	cp.w	r11,0
800035f4:	f4 0b 17 00 	moveq	r11,r10
800035f8:	68 03       	ld.w	r3,r4[0x0]
800035fa:	68 11       	ld.w	r1,r4[0x4]
800035fc:	40 49       	lddsp	r9,sp[0x10]
800035fe:	30 08       	mov	r8,0
80003600:	c2 89       	rjmp	80003850 <get_arg+0x274>
80003602:	2f fb       	sub	r11,-1
80003604:	32 5c       	mov	r12,37
80003606:	17 8a       	ld.ub	r10,r11[0x0]
80003608:	f8 0a 18 00 	cp.b	r10,r12
8000360c:	5f 1e       	srne	lr
8000360e:	f0 0a 18 00 	cp.b	r10,r8
80003612:	5f 1c       	srne	r12
80003614:	fd ec 00 0c 	and	r12,lr,r12
80003618:	f0 0c 18 00 	cp.b	r12,r8
8000361c:	cf 31       	brne	80003602 <get_arg+0x26>
8000361e:	58 0a       	cp.w	r10,0
80003620:	e0 80 01 25 	breq	8000386a <get_arg+0x28e>
80003624:	30 0c       	mov	r12,0
80003626:	3f fa       	mov	r10,-1
80003628:	18 90       	mov	r0,r12
8000362a:	50 3a       	stdsp	sp[0xc],r10
8000362c:	18 94       	mov	r4,r12
8000362e:	18 92       	mov	r2,r12
80003630:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003634:	16 97       	mov	r7,r11
80003636:	50 7c       	stdsp	sp[0x1c],r12
80003638:	fe cc 89 08 	sub	r12,pc,-30456
8000363c:	0f 3a       	ld.ub	r10,r7++
8000363e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003642:	40 7c       	lddsp	r12,sp[0x1c]
80003644:	1c 0c       	add	r12,lr
80003646:	fe ce 89 de 	sub	lr,pc,-30242
8000364a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000364e:	20 1e       	sub	lr,1
80003650:	50 0e       	stdsp	sp[0x0],lr
80003652:	fe ce 8a 56 	sub	lr,pc,-30122
80003656:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000365a:	50 7c       	stdsp	sp[0x1c],r12
8000365c:	40 0c       	lddsp	r12,sp[0x0]
8000365e:	58 7c       	cp.w	r12,7
80003660:	e0 8b 00 f1 	brhi	80003842 <get_arg+0x266>
80003664:	fe ce 8c 08 	sub	lr,pc,-29688
80003668:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000366c:	36 8b       	mov	r11,104
8000366e:	f6 0a 18 00 	cp.b	r10,r11
80003672:	e0 80 00 e8 	breq	80003842 <get_arg+0x266>
80003676:	37 1b       	mov	r11,113
80003678:	f6 0a 18 00 	cp.b	r10,r11
8000367c:	c0 70       	breq	8000368a <get_arg+0xae>
8000367e:	34 cb       	mov	r11,76
80003680:	f6 0a 18 00 	cp.b	r10,r11
80003684:	c0 51       	brne	8000368e <get_arg+0xb2>
80003686:	a3 b4       	sbr	r4,0x3
80003688:	cd d8       	rjmp	80003842 <get_arg+0x266>
8000368a:	a5 b4       	sbr	r4,0x5
8000368c:	cd b8       	rjmp	80003842 <get_arg+0x266>
8000368e:	08 9a       	mov	r10,r4
80003690:	0e 9b       	mov	r11,r7
80003692:	a5 aa       	sbr	r10,0x4
80003694:	17 3c       	ld.ub	r12,r11++
80003696:	a5 b4       	sbr	r4,0x5
80003698:	36 ce       	mov	lr,108
8000369a:	fc 0c 18 00 	cp.b	r12,lr
8000369e:	e0 80 00 d3 	breq	80003844 <get_arg+0x268>
800036a2:	14 94       	mov	r4,r10
800036a4:	cc f8       	rjmp	80003842 <get_arg+0x266>
800036a6:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800036aa:	36 7c       	mov	r12,103
800036ac:	f8 0a 18 00 	cp.b	r10,r12
800036b0:	e0 8b 00 27 	brhi	800036fe <get_arg+0x122>
800036b4:	36 5b       	mov	r11,101
800036b6:	f6 0a 18 00 	cp.b	r10,r11
800036ba:	c4 82       	brcc	8000374a <get_arg+0x16e>
800036bc:	34 fb       	mov	r11,79
800036be:	f6 0a 18 00 	cp.b	r10,r11
800036c2:	c4 80       	breq	80003752 <get_arg+0x176>
800036c4:	e0 8b 00 0c 	brhi	800036dc <get_arg+0x100>
800036c8:	34 5b       	mov	r11,69
800036ca:	f6 0a 18 00 	cp.b	r10,r11
800036ce:	c3 e0       	breq	8000374a <get_arg+0x16e>
800036d0:	34 7b       	mov	r11,71
800036d2:	f6 0a 18 00 	cp.b	r10,r11
800036d6:	c3 a0       	breq	8000374a <get_arg+0x16e>
800036d8:	34 4b       	mov	r11,68
800036da:	c0 88       	rjmp	800036ea <get_arg+0x10e>
800036dc:	35 8b       	mov	r11,88
800036de:	f6 0a 18 00 	cp.b	r10,r11
800036e2:	c2 c0       	breq	8000373a <get_arg+0x15e>
800036e4:	e0 8b 00 07 	brhi	800036f2 <get_arg+0x116>
800036e8:	35 5b       	mov	r11,85
800036ea:	f6 0a 18 00 	cp.b	r10,r11
800036ee:	c3 51       	brne	80003758 <get_arg+0x17c>
800036f0:	c3 18       	rjmp	80003752 <get_arg+0x176>
800036f2:	36 3b       	mov	r11,99
800036f4:	f6 0a 18 00 	cp.b	r10,r11
800036f8:	c2 f0       	breq	80003756 <get_arg+0x17a>
800036fa:	36 4b       	mov	r11,100
800036fc:	c0 e8       	rjmp	80003718 <get_arg+0x13c>
800036fe:	37 0b       	mov	r11,112
80003700:	f6 0a 18 00 	cp.b	r10,r11
80003704:	c2 50       	breq	8000374e <get_arg+0x172>
80003706:	e0 8b 00 0d 	brhi	80003720 <get_arg+0x144>
8000370a:	36 eb       	mov	r11,110
8000370c:	f6 0a 18 00 	cp.b	r10,r11
80003710:	c1 f0       	breq	8000374e <get_arg+0x172>
80003712:	e0 8b 00 14 	brhi	8000373a <get_arg+0x15e>
80003716:	36 9b       	mov	r11,105
80003718:	f6 0a 18 00 	cp.b	r10,r11
8000371c:	c1 e1       	brne	80003758 <get_arg+0x17c>
8000371e:	c0 e8       	rjmp	8000373a <get_arg+0x15e>
80003720:	37 5b       	mov	r11,117
80003722:	f6 0a 18 00 	cp.b	r10,r11
80003726:	c0 a0       	breq	8000373a <get_arg+0x15e>
80003728:	37 8b       	mov	r11,120
8000372a:	f6 0a 18 00 	cp.b	r10,r11
8000372e:	c0 60       	breq	8000373a <get_arg+0x15e>
80003730:	37 3b       	mov	r11,115
80003732:	f6 0a 18 00 	cp.b	r10,r11
80003736:	c1 11       	brne	80003758 <get_arg+0x17c>
80003738:	c0 b8       	rjmp	8000374e <get_arg+0x172>
8000373a:	ed b4 00 04 	bld	r4,0x4
8000373e:	c0 a0       	breq	80003752 <get_arg+0x176>
80003740:	ed b4 00 05 	bld	r4,0x5
80003744:	c0 91       	brne	80003756 <get_arg+0x17a>
80003746:	30 20       	mov	r0,2
80003748:	c0 88       	rjmp	80003758 <get_arg+0x17c>
8000374a:	30 40       	mov	r0,4
8000374c:	c0 68       	rjmp	80003758 <get_arg+0x17c>
8000374e:	30 30       	mov	r0,3
80003750:	c0 48       	rjmp	80003758 <get_arg+0x17c>
80003752:	30 10       	mov	r0,1
80003754:	c0 28       	rjmp	80003758 <get_arg+0x17c>
80003756:	30 00       	mov	r0,0
80003758:	40 3b       	lddsp	r11,sp[0xc]
8000375a:	5b fb       	cp.w	r11,-1
8000375c:	c0 40       	breq	80003764 <get_arg+0x188>
8000375e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003762:	c7 08       	rjmp	80003842 <get_arg+0x266>
80003764:	58 60       	cp.w	r0,6
80003766:	e0 8b 00 6e 	brhi	80003842 <get_arg+0x266>
8000376a:	6c 0a       	ld.w	r10,r6[0x0]
8000376c:	ea cc ff ff 	sub	r12,r5,-1
80003770:	fe ce 8c f4 	sub	lr,pc,-29452
80003774:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003778:	f4 cb ff f8 	sub	r11,r10,-8
8000377c:	8d 0b       	st.w	r6[0x0],r11
8000377e:	f4 ea 00 00 	ld.d	r10,r10[0]
80003782:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003786:	c0 f8       	rjmp	800037a4 <get_arg+0x1c8>
80003788:	f4 cb ff fc 	sub	r11,r10,-4
8000378c:	8d 0b       	st.w	r6[0x0],r11
8000378e:	74 0a       	ld.w	r10,r10[0x0]
80003790:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003794:	c0 88       	rjmp	800037a4 <get_arg+0x1c8>
80003796:	f4 cb ff f8 	sub	r11,r10,-8
8000379a:	8d 0b       	st.w	r6[0x0],r11
8000379c:	f4 ea 00 00 	ld.d	r10,r10[0]
800037a0:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800037a4:	0e 9b       	mov	r11,r7
800037a6:	18 95       	mov	r5,r12
800037a8:	c4 e8       	rjmp	80003844 <get_arg+0x268>
800037aa:	62 0a       	ld.w	r10,r1[0x0]
800037ac:	5b fa       	cp.w	r10,-1
800037ae:	c0 b1       	brne	800037c4 <get_arg+0x1e8>
800037b0:	50 19       	stdsp	sp[0x4],r9
800037b2:	50 28       	stdsp	sp[0x8],r8
800037b4:	e0 6a 00 80 	mov	r10,128
800037b8:	30 0b       	mov	r11,0
800037ba:	02 9c       	mov	r12,r1
800037bc:	e0 a0 1d 78 	rcall	800072ac <memset>
800037c0:	40 28       	lddsp	r8,sp[0x8]
800037c2:	40 19       	lddsp	r9,sp[0x4]
800037c4:	e4 cc 00 01 	sub	r12,r2,1
800037c8:	0e 9b       	mov	r11,r7
800037ca:	50 3c       	stdsp	sp[0xc],r12
800037cc:	f2 0c 0c 49 	max	r9,r9,r12
800037d0:	c3 a8       	rjmp	80003844 <get_arg+0x268>
800037d2:	62 0a       	ld.w	r10,r1[0x0]
800037d4:	5b fa       	cp.w	r10,-1
800037d6:	c0 b1       	brne	800037ec <get_arg+0x210>
800037d8:	50 19       	stdsp	sp[0x4],r9
800037da:	50 28       	stdsp	sp[0x8],r8
800037dc:	e0 6a 00 80 	mov	r10,128
800037e0:	30 0b       	mov	r11,0
800037e2:	02 9c       	mov	r12,r1
800037e4:	e0 a0 1d 64 	rcall	800072ac <memset>
800037e8:	40 28       	lddsp	r8,sp[0x8]
800037ea:	40 19       	lddsp	r9,sp[0x4]
800037ec:	20 12       	sub	r2,1
800037ee:	30 0a       	mov	r10,0
800037f0:	0e 9b       	mov	r11,r7
800037f2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800037f6:	f2 02 0c 49 	max	r9,r9,r2
800037fa:	c2 58       	rjmp	80003844 <get_arg+0x268>
800037fc:	16 97       	mov	r7,r11
800037fe:	6c 0a       	ld.w	r10,r6[0x0]
80003800:	f4 cb ff fc 	sub	r11,r10,-4
80003804:	8d 0b       	st.w	r6[0x0],r11
80003806:	74 0a       	ld.w	r10,r10[0x0]
80003808:	0e 9b       	mov	r11,r7
8000380a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000380e:	2f f5       	sub	r5,-1
80003810:	c1 a8       	rjmp	80003844 <get_arg+0x268>
80003812:	f4 c2 00 30 	sub	r2,r10,48
80003816:	c0 68       	rjmp	80003822 <get_arg+0x246>
80003818:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000381c:	2f f7       	sub	r7,-1
8000381e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003822:	0f 8a       	ld.ub	r10,r7[0x0]
80003824:	58 0a       	cp.w	r10,0
80003826:	c0 e0       	breq	80003842 <get_arg+0x266>
80003828:	23 0a       	sub	r10,48
8000382a:	58 9a       	cp.w	r10,9
8000382c:	fe 98 ff f6 	brls	80003818 <get_arg+0x23c>
80003830:	c0 98       	rjmp	80003842 <get_arg+0x266>
80003832:	2f f7       	sub	r7,-1
80003834:	0f 8a       	ld.ub	r10,r7[0x0]
80003836:	58 0a       	cp.w	r10,0
80003838:	c0 50       	breq	80003842 <get_arg+0x266>
8000383a:	23 0a       	sub	r10,48
8000383c:	58 9a       	cp.w	r10,9
8000383e:	fe 98 ff fa 	brls	80003832 <get_arg+0x256>
80003842:	0e 9b       	mov	r11,r7
80003844:	40 7c       	lddsp	r12,sp[0x1c]
80003846:	30 ba       	mov	r10,11
80003848:	f4 0c 18 00 	cp.b	r12,r10
8000384c:	fe 91 fe f2 	brne	80003630 <get_arg+0x54>
80003850:	40 42       	lddsp	r2,sp[0x10]
80003852:	17 8c       	ld.ub	r12,r11[0x0]
80003854:	0a 32       	cp.w	r2,r5
80003856:	5f 4a       	srge	r10
80003858:	f0 0c 18 00 	cp.b	r12,r8
8000385c:	5f 1c       	srne	r12
8000385e:	f9 ea 00 0a 	and	r10,r12,r10
80003862:	f0 0a 18 00 	cp.b	r10,r8
80003866:	fe 91 fe cf 	brne	80003604 <get_arg+0x28>
8000386a:	30 08       	mov	r8,0
8000386c:	40 4e       	lddsp	lr,sp[0x10]
8000386e:	17 8a       	ld.ub	r10,r11[0x0]
80003870:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003874:	f0 0a 18 00 	cp.b	r10,r8
80003878:	fc 09 17 10 	movne	r9,lr
8000387c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003880:	06 9e       	mov	lr,r3
80003882:	c2 a8       	rjmp	800038d6 <get_arg+0x2fa>
80003884:	62 0a       	ld.w	r10,r1[0x0]
80003886:	58 3a       	cp.w	r10,3
80003888:	c1 e0       	breq	800038c4 <get_arg+0x2e8>
8000388a:	e0 89 00 07 	brgt	80003898 <get_arg+0x2bc>
8000388e:	58 1a       	cp.w	r10,1
80003890:	c1 a0       	breq	800038c4 <get_arg+0x2e8>
80003892:	58 2a       	cp.w	r10,2
80003894:	c1 81       	brne	800038c4 <get_arg+0x2e8>
80003896:	c0 58       	rjmp	800038a0 <get_arg+0x2c4>
80003898:	58 5a       	cp.w	r10,5
8000389a:	c0 c0       	breq	800038b2 <get_arg+0x2d6>
8000389c:	c0 b5       	brlt	800038b2 <get_arg+0x2d6>
8000389e:	c1 38       	rjmp	800038c4 <get_arg+0x2e8>
800038a0:	6c 0a       	ld.w	r10,r6[0x0]
800038a2:	f4 cc ff f8 	sub	r12,r10,-8
800038a6:	8d 0c       	st.w	r6[0x0],r12
800038a8:	f4 e2 00 00 	ld.d	r2,r10[0]
800038ac:	f0 e3 00 00 	st.d	r8[0],r2
800038b0:	c1 08       	rjmp	800038d0 <get_arg+0x2f4>
800038b2:	6c 0a       	ld.w	r10,r6[0x0]
800038b4:	f4 cc ff f8 	sub	r12,r10,-8
800038b8:	8d 0c       	st.w	r6[0x0],r12
800038ba:	f4 e2 00 00 	ld.d	r2,r10[0]
800038be:	f0 e3 00 00 	st.d	r8[0],r2
800038c2:	c0 78       	rjmp	800038d0 <get_arg+0x2f4>
800038c4:	6c 0a       	ld.w	r10,r6[0x0]
800038c6:	f4 cc ff fc 	sub	r12,r10,-4
800038ca:	8d 0c       	st.w	r6[0x0],r12
800038cc:	74 0a       	ld.w	r10,r10[0x0]
800038ce:	91 0a       	st.w	r8[0x0],r10
800038d0:	2f f5       	sub	r5,-1
800038d2:	2f 88       	sub	r8,-8
800038d4:	2f c1       	sub	r1,-4
800038d6:	12 35       	cp.w	r5,r9
800038d8:	fe 9a ff d6 	brle	80003884 <get_arg+0x2a8>
800038dc:	1c 93       	mov	r3,lr
800038de:	40 52       	lddsp	r2,sp[0x14]
800038e0:	40 6e       	lddsp	lr,sp[0x18]
800038e2:	85 05       	st.w	r2[0x0],r5
800038e4:	9d 0b       	st.w	lr[0x0],r11
800038e6:	40 4b       	lddsp	r11,sp[0x10]
800038e8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800038ec:	2f 8d       	sub	sp,-32
800038ee:	d8 32       	popm	r0-r7,pc

800038f0 <__sprint_r>:
800038f0:	d4 21       	pushm	r4-r7,lr
800038f2:	14 97       	mov	r7,r10
800038f4:	74 28       	ld.w	r8,r10[0x8]
800038f6:	58 08       	cp.w	r8,0
800038f8:	c0 41       	brne	80003900 <__sprint_r+0x10>
800038fa:	95 18       	st.w	r10[0x4],r8
800038fc:	10 9c       	mov	r12,r8
800038fe:	d8 22       	popm	r4-r7,pc
80003900:	e0 a0 18 b4 	rcall	80006a68 <__sfvwrite_r>
80003904:	30 08       	mov	r8,0
80003906:	8f 18       	st.w	r7[0x4],r8
80003908:	8f 28       	st.w	r7[0x8],r8
8000390a:	d8 22       	popm	r4-r7,pc

8000390c <_vfprintf_r>:
8000390c:	d4 31       	pushm	r0-r7,lr
8000390e:	fa cd 06 bc 	sub	sp,sp,1724
80003912:	51 09       	stdsp	sp[0x40],r9
80003914:	16 91       	mov	r1,r11
80003916:	14 97       	mov	r7,r10
80003918:	18 95       	mov	r5,r12
8000391a:	e0 a0 1a 1d 	rcall	80006d54 <_localeconv_r>
8000391e:	78 0c       	ld.w	r12,r12[0x0]
80003920:	50 cc       	stdsp	sp[0x30],r12
80003922:	58 05       	cp.w	r5,0
80003924:	c0 70       	breq	80003932 <_vfprintf_r+0x26>
80003926:	6a 68       	ld.w	r8,r5[0x18]
80003928:	58 08       	cp.w	r8,0
8000392a:	c0 41       	brne	80003932 <_vfprintf_r+0x26>
8000392c:	0a 9c       	mov	r12,r5
8000392e:	e0 a0 17 3d 	rcall	800067a8 <__sinit>
80003932:	fe c8 8a f2 	sub	r8,pc,-29966
80003936:	10 31       	cp.w	r1,r8
80003938:	c0 31       	brne	8000393e <_vfprintf_r+0x32>
8000393a:	6a 01       	ld.w	r1,r5[0x0]
8000393c:	c0 c8       	rjmp	80003954 <_vfprintf_r+0x48>
8000393e:	fe c8 8a de 	sub	r8,pc,-29986
80003942:	10 31       	cp.w	r1,r8
80003944:	c0 31       	brne	8000394a <_vfprintf_r+0x3e>
80003946:	6a 11       	ld.w	r1,r5[0x4]
80003948:	c0 68       	rjmp	80003954 <_vfprintf_r+0x48>
8000394a:	fe c8 8a ca 	sub	r8,pc,-30006
8000394e:	10 31       	cp.w	r1,r8
80003950:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003954:	82 68       	ld.sh	r8,r1[0xc]
80003956:	ed b8 00 03 	bld	r8,0x3
8000395a:	c0 41       	brne	80003962 <_vfprintf_r+0x56>
8000395c:	62 48       	ld.w	r8,r1[0x10]
8000395e:	58 08       	cp.w	r8,0
80003960:	c0 71       	brne	8000396e <_vfprintf_r+0x62>
80003962:	02 9b       	mov	r11,r1
80003964:	0a 9c       	mov	r12,r5
80003966:	e0 a0 0f 5d 	rcall	80005820 <__swsetup_r>
8000396a:	e0 81 0f 54 	brne	80005812 <_vfprintf_r+0x1f06>
8000396e:	82 68       	ld.sh	r8,r1[0xc]
80003970:	10 99       	mov	r9,r8
80003972:	e2 19 00 1a 	andl	r9,0x1a,COH
80003976:	58 a9       	cp.w	r9,10
80003978:	c3 c1       	brne	800039f0 <_vfprintf_r+0xe4>
8000397a:	82 79       	ld.sh	r9,r1[0xe]
8000397c:	30 0a       	mov	r10,0
8000397e:	f4 09 19 00 	cp.h	r9,r10
80003982:	c3 75       	brlt	800039f0 <_vfprintf_r+0xe4>
80003984:	a1 d8       	cbr	r8,0x1
80003986:	fb 58 05 d0 	st.h	sp[1488],r8
8000398a:	62 88       	ld.w	r8,r1[0x20]
8000398c:	fb 48 05 e4 	st.w	sp[1508],r8
80003990:	62 a8       	ld.w	r8,r1[0x28]
80003992:	fb 48 05 ec 	st.w	sp[1516],r8
80003996:	fa c8 ff bc 	sub	r8,sp,-68
8000399a:	fb 48 05 d4 	st.w	sp[1492],r8
8000399e:	fb 48 05 c4 	st.w	sp[1476],r8
800039a2:	e0 68 04 00 	mov	r8,1024
800039a6:	fb 48 05 d8 	st.w	sp[1496],r8
800039aa:	fb 48 05 cc 	st.w	sp[1484],r8
800039ae:	30 08       	mov	r8,0
800039b0:	fb 59 05 d2 	st.h	sp[1490],r9
800039b4:	0e 9a       	mov	r10,r7
800039b6:	41 09       	lddsp	r9,sp[0x40]
800039b8:	fa c7 fa 3c 	sub	r7,sp,-1476
800039bc:	fb 48 05 dc 	st.w	sp[1500],r8
800039c0:	0a 9c       	mov	r12,r5
800039c2:	0e 9b       	mov	r11,r7
800039c4:	ca 4f       	rcall	8000390c <_vfprintf_r>
800039c6:	50 bc       	stdsp	sp[0x2c],r12
800039c8:	c0 95       	brlt	800039da <_vfprintf_r+0xce>
800039ca:	0e 9b       	mov	r11,r7
800039cc:	0a 9c       	mov	r12,r5
800039ce:	e0 a0 16 15 	rcall	800065f8 <_fflush_r>
800039d2:	40 be       	lddsp	lr,sp[0x2c]
800039d4:	f9 be 01 ff 	movne	lr,-1
800039d8:	50 be       	stdsp	sp[0x2c],lr
800039da:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800039de:	ed b8 00 06 	bld	r8,0x6
800039e2:	e0 81 0f 1a 	brne	80005816 <_vfprintf_r+0x1f0a>
800039e6:	82 68       	ld.sh	r8,r1[0xc]
800039e8:	a7 a8       	sbr	r8,0x6
800039ea:	a2 68       	st.h	r1[0xc],r8
800039ec:	e0 8f 0f 15 	bral	80005816 <_vfprintf_r+0x1f0a>
800039f0:	30 08       	mov	r8,0
800039f2:	fb 48 06 b4 	st.w	sp[1716],r8
800039f6:	fb 48 06 90 	st.w	sp[1680],r8
800039fa:	fb 48 06 8c 	st.w	sp[1676],r8
800039fe:	fb 48 06 b0 	st.w	sp[1712],r8
80003a02:	30 08       	mov	r8,0
80003a04:	30 09       	mov	r9,0
80003a06:	50 a7       	stdsp	sp[0x28],r7
80003a08:	50 78       	stdsp	sp[0x1c],r8
80003a0a:	fa c3 f9 e0 	sub	r3,sp,-1568
80003a0e:	3f f8       	mov	r8,-1
80003a10:	50 59       	stdsp	sp[0x14],r9
80003a12:	fb 43 06 88 	st.w	sp[1672],r3
80003a16:	fb 48 05 44 	st.w	sp[1348],r8
80003a1a:	12 9c       	mov	r12,r9
80003a1c:	50 69       	stdsp	sp[0x18],r9
80003a1e:	50 d9       	stdsp	sp[0x34],r9
80003a20:	50 e9       	stdsp	sp[0x38],r9
80003a22:	50 b9       	stdsp	sp[0x2c],r9
80003a24:	12 97       	mov	r7,r9
80003a26:	0a 94       	mov	r4,r5
80003a28:	40 a2       	lddsp	r2,sp[0x28]
80003a2a:	32 5a       	mov	r10,37
80003a2c:	30 08       	mov	r8,0
80003a2e:	c0 28       	rjmp	80003a32 <_vfprintf_r+0x126>
80003a30:	2f f2       	sub	r2,-1
80003a32:	05 89       	ld.ub	r9,r2[0x0]
80003a34:	f0 09 18 00 	cp.b	r9,r8
80003a38:	5f 1b       	srne	r11
80003a3a:	f4 09 18 00 	cp.b	r9,r10
80003a3e:	5f 19       	srne	r9
80003a40:	f3 eb 00 0b 	and	r11,r9,r11
80003a44:	f0 0b 18 00 	cp.b	r11,r8
80003a48:	cf 41       	brne	80003a30 <_vfprintf_r+0x124>
80003a4a:	40 ab       	lddsp	r11,sp[0x28]
80003a4c:	e4 0b 01 06 	sub	r6,r2,r11
80003a50:	c1 e0       	breq	80003a8c <_vfprintf_r+0x180>
80003a52:	fa f8 06 90 	ld.w	r8,sp[1680]
80003a56:	0c 08       	add	r8,r6
80003a58:	87 0b       	st.w	r3[0x0],r11
80003a5a:	fb 48 06 90 	st.w	sp[1680],r8
80003a5e:	87 16       	st.w	r3[0x4],r6
80003a60:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003a64:	2f f8       	sub	r8,-1
80003a66:	fb 48 06 8c 	st.w	sp[1676],r8
80003a6a:	58 78       	cp.w	r8,7
80003a6c:	e0 89 00 04 	brgt	80003a74 <_vfprintf_r+0x168>
80003a70:	2f 83       	sub	r3,-8
80003a72:	c0 a8       	rjmp	80003a86 <_vfprintf_r+0x17a>
80003a74:	fa ca f9 78 	sub	r10,sp,-1672
80003a78:	02 9b       	mov	r11,r1
80003a7a:	08 9c       	mov	r12,r4
80003a7c:	c3 af       	rcall	800038f0 <__sprint_r>
80003a7e:	e0 81 0e c6 	brne	8000580a <_vfprintf_r+0x1efe>
80003a82:	fa c3 f9 e0 	sub	r3,sp,-1568
80003a86:	40 ba       	lddsp	r10,sp[0x2c]
80003a88:	0c 0a       	add	r10,r6
80003a8a:	50 ba       	stdsp	sp[0x2c],r10
80003a8c:	05 89       	ld.ub	r9,r2[0x0]
80003a8e:	30 08       	mov	r8,0
80003a90:	f0 09 18 00 	cp.b	r9,r8
80003a94:	e0 80 0e aa 	breq	800057e8 <_vfprintf_r+0x1edc>
80003a98:	30 09       	mov	r9,0
80003a9a:	fb 68 06 bb 	st.b	sp[1723],r8
80003a9e:	0e 96       	mov	r6,r7
80003aa0:	e4 c8 ff ff 	sub	r8,r2,-1
80003aa4:	3f fe       	mov	lr,-1
80003aa6:	50 93       	stdsp	sp[0x24],r3
80003aa8:	50 41       	stdsp	sp[0x10],r1
80003aaa:	0e 93       	mov	r3,r7
80003aac:	04 91       	mov	r1,r2
80003aae:	50 89       	stdsp	sp[0x20],r9
80003ab0:	50 a8       	stdsp	sp[0x28],r8
80003ab2:	50 2e       	stdsp	sp[0x8],lr
80003ab4:	50 39       	stdsp	sp[0xc],r9
80003ab6:	12 95       	mov	r5,r9
80003ab8:	12 90       	mov	r0,r9
80003aba:	10 97       	mov	r7,r8
80003abc:	08 92       	mov	r2,r4
80003abe:	c0 78       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003ac0:	3f fc       	mov	r12,-1
80003ac2:	08 97       	mov	r7,r4
80003ac4:	50 2c       	stdsp	sp[0x8],r12
80003ac6:	c0 38       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003ac8:	30 0b       	mov	r11,0
80003aca:	50 3b       	stdsp	sp[0xc],r11
80003acc:	0f 38       	ld.ub	r8,r7++
80003ace:	c0 28       	rjmp	80003ad2 <_vfprintf_r+0x1c6>
80003ad0:	12 90       	mov	r0,r9
80003ad2:	f0 c9 00 20 	sub	r9,r8,32
80003ad6:	e0 49 00 58 	cp.w	r9,88
80003ada:	e0 8b 0a 30 	brhi	80004f3a <_vfprintf_r+0x162e>
80003ade:	fe ca 90 46 	sub	r10,pc,-28602
80003ae2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003ae6:	50 a7       	stdsp	sp[0x28],r7
80003ae8:	50 80       	stdsp	sp[0x20],r0
80003aea:	0c 97       	mov	r7,r6
80003aec:	04 94       	mov	r4,r2
80003aee:	06 96       	mov	r6,r3
80003af0:	02 92       	mov	r2,r1
80003af2:	fe c9 8e 1e 	sub	r9,pc,-29154
80003af6:	40 93       	lddsp	r3,sp[0x24]
80003af8:	10 90       	mov	r0,r8
80003afa:	40 41       	lddsp	r1,sp[0x10]
80003afc:	50 d9       	stdsp	sp[0x34],r9
80003afe:	e0 8f 08 8e 	bral	80004c1a <_vfprintf_r+0x130e>
80003b02:	30 08       	mov	r8,0
80003b04:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003b08:	f0 09 18 00 	cp.b	r9,r8
80003b0c:	ce 01       	brne	80003acc <_vfprintf_r+0x1c0>
80003b0e:	32 08       	mov	r8,32
80003b10:	c6 e8       	rjmp	80003bec <_vfprintf_r+0x2e0>
80003b12:	a1 a5       	sbr	r5,0x0
80003b14:	cd cb       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003b16:	0f 89       	ld.ub	r9,r7[0x0]
80003b18:	f2 c8 00 30 	sub	r8,r9,48
80003b1c:	58 98       	cp.w	r8,9
80003b1e:	e0 8b 00 1d 	brhi	80003b58 <_vfprintf_r+0x24c>
80003b22:	ee c8 ff ff 	sub	r8,r7,-1
80003b26:	30 0b       	mov	r11,0
80003b28:	23 09       	sub	r9,48
80003b2a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003b2e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003b32:	11 39       	ld.ub	r9,r8++
80003b34:	f2 ca 00 30 	sub	r10,r9,48
80003b38:	58 9a       	cp.w	r10,9
80003b3a:	fe 98 ff f7 	brls	80003b28 <_vfprintf_r+0x21c>
80003b3e:	e0 49 00 24 	cp.w	r9,36
80003b42:	cc 31       	brne	80003ac8 <_vfprintf_r+0x1bc>
80003b44:	e0 4b 00 20 	cp.w	r11,32
80003b48:	e0 89 0e 60 	brgt	80005808 <_vfprintf_r+0x1efc>
80003b4c:	20 1b       	sub	r11,1
80003b4e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b52:	12 3b       	cp.w	r11,r9
80003b54:	c0 95       	brlt	80003b66 <_vfprintf_r+0x25a>
80003b56:	c1 08       	rjmp	80003b76 <_vfprintf_r+0x26a>
80003b58:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003b5c:	ec ca ff ff 	sub	r10,r6,-1
80003b60:	12 36       	cp.w	r6,r9
80003b62:	c1 f5       	brlt	80003ba0 <_vfprintf_r+0x294>
80003b64:	c2 68       	rjmp	80003bb0 <_vfprintf_r+0x2a4>
80003b66:	fa ce f9 44 	sub	lr,sp,-1724
80003b6a:	10 97       	mov	r7,r8
80003b6c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003b70:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003b74:	c3 58       	rjmp	80003bde <_vfprintf_r+0x2d2>
80003b76:	10 97       	mov	r7,r8
80003b78:	fa c8 f9 50 	sub	r8,sp,-1712
80003b7c:	1a d8       	st.w	--sp,r8
80003b7e:	fa c8 fa b8 	sub	r8,sp,-1352
80003b82:	1a d8       	st.w	--sp,r8
80003b84:	fa c8 fb b4 	sub	r8,sp,-1100
80003b88:	02 9a       	mov	r10,r1
80003b8a:	1a d8       	st.w	--sp,r8
80003b8c:	04 9c       	mov	r12,r2
80003b8e:	fa c8 f9 40 	sub	r8,sp,-1728
80003b92:	fa c9 ff b4 	sub	r9,sp,-76
80003b96:	fe b0 fd 23 	rcall	800035dc <get_arg>
80003b9a:	2f dd       	sub	sp,-12
80003b9c:	78 00       	ld.w	r0,r12[0x0]
80003b9e:	c2 08       	rjmp	80003bde <_vfprintf_r+0x2d2>
80003ba0:	fa cc f9 44 	sub	r12,sp,-1724
80003ba4:	14 96       	mov	r6,r10
80003ba6:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003baa:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003bae:	c1 88       	rjmp	80003bde <_vfprintf_r+0x2d2>
80003bb0:	41 08       	lddsp	r8,sp[0x40]
80003bb2:	59 f9       	cp.w	r9,31
80003bb4:	e0 89 00 11 	brgt	80003bd6 <_vfprintf_r+0x2ca>
80003bb8:	f0 cb ff fc 	sub	r11,r8,-4
80003bbc:	51 0b       	stdsp	sp[0x40],r11
80003bbe:	70 00       	ld.w	r0,r8[0x0]
80003bc0:	fa cb f9 44 	sub	r11,sp,-1724
80003bc4:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003bc8:	f1 40 fd 88 	st.w	r8[-632],r0
80003bcc:	2f f9       	sub	r9,-1
80003bce:	14 96       	mov	r6,r10
80003bd0:	fb 49 06 b4 	st.w	sp[1716],r9
80003bd4:	c0 58       	rjmp	80003bde <_vfprintf_r+0x2d2>
80003bd6:	70 00       	ld.w	r0,r8[0x0]
80003bd8:	14 96       	mov	r6,r10
80003bda:	2f c8       	sub	r8,-4
80003bdc:	51 08       	stdsp	sp[0x40],r8
80003bde:	58 00       	cp.w	r0,0
80003be0:	fe 94 ff 76 	brge	80003acc <_vfprintf_r+0x1c0>
80003be4:	5c 30       	neg	r0
80003be6:	a3 a5       	sbr	r5,0x2
80003be8:	c7 2b       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003bea:	32 b8       	mov	r8,43
80003bec:	fb 68 06 bb 	st.b	sp[1723],r8
80003bf0:	c6 eb       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003bf2:	0f 38       	ld.ub	r8,r7++
80003bf4:	e0 48 00 2a 	cp.w	r8,42
80003bf8:	c0 30       	breq	80003bfe <_vfprintf_r+0x2f2>
80003bfa:	30 09       	mov	r9,0
80003bfc:	c7 98       	rjmp	80003cee <_vfprintf_r+0x3e2>
80003bfe:	0f 88       	ld.ub	r8,r7[0x0]
80003c00:	f0 c9 00 30 	sub	r9,r8,48
80003c04:	58 99       	cp.w	r9,9
80003c06:	e0 8b 00 1f 	brhi	80003c44 <_vfprintf_r+0x338>
80003c0a:	ee c4 ff ff 	sub	r4,r7,-1
80003c0e:	30 0b       	mov	r11,0
80003c10:	23 08       	sub	r8,48
80003c12:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003c16:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003c1a:	09 38       	ld.ub	r8,r4++
80003c1c:	f0 c9 00 30 	sub	r9,r8,48
80003c20:	58 99       	cp.w	r9,9
80003c22:	fe 98 ff f7 	brls	80003c10 <_vfprintf_r+0x304>
80003c26:	e0 48 00 24 	cp.w	r8,36
80003c2a:	fe 91 ff 4f 	brne	80003ac8 <_vfprintf_r+0x1bc>
80003c2e:	e0 4b 00 20 	cp.w	r11,32
80003c32:	e0 89 0d eb 	brgt	80005808 <_vfprintf_r+0x1efc>
80003c36:	20 1b       	sub	r11,1
80003c38:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003c3c:	10 3b       	cp.w	r11,r8
80003c3e:	c0 a5       	brlt	80003c52 <_vfprintf_r+0x346>
80003c40:	c1 18       	rjmp	80003c62 <_vfprintf_r+0x356>
80003c42:	d7 03       	nop
80003c44:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003c48:	ec c9 ff ff 	sub	r9,r6,-1
80003c4c:	14 36       	cp.w	r6,r10
80003c4e:	c1 f5       	brlt	80003c8c <_vfprintf_r+0x380>
80003c50:	c2 88       	rjmp	80003ca0 <_vfprintf_r+0x394>
80003c52:	fa ca f9 44 	sub	r10,sp,-1724
80003c56:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003c5a:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003c5e:	50 2b       	stdsp	sp[0x8],r11
80003c60:	c3 c8       	rjmp	80003cd8 <_vfprintf_r+0x3cc>
80003c62:	fa c8 f9 50 	sub	r8,sp,-1712
80003c66:	1a d8       	st.w	--sp,r8
80003c68:	fa c8 fa b8 	sub	r8,sp,-1352
80003c6c:	1a d8       	st.w	--sp,r8
80003c6e:	fa c8 fb b4 	sub	r8,sp,-1100
80003c72:	02 9a       	mov	r10,r1
80003c74:	1a d8       	st.w	--sp,r8
80003c76:	04 9c       	mov	r12,r2
80003c78:	fa c8 f9 40 	sub	r8,sp,-1728
80003c7c:	fa c9 ff b4 	sub	r9,sp,-76
80003c80:	fe b0 fc ae 	rcall	800035dc <get_arg>
80003c84:	2f dd       	sub	sp,-12
80003c86:	78 0c       	ld.w	r12,r12[0x0]
80003c88:	50 2c       	stdsp	sp[0x8],r12
80003c8a:	c2 78       	rjmp	80003cd8 <_vfprintf_r+0x3cc>
80003c8c:	12 96       	mov	r6,r9
80003c8e:	0e 94       	mov	r4,r7
80003c90:	fa c9 f9 44 	sub	r9,sp,-1724
80003c94:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003c98:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003c9c:	50 28       	stdsp	sp[0x8],r8
80003c9e:	c1 d8       	rjmp	80003cd8 <_vfprintf_r+0x3cc>
80003ca0:	41 08       	lddsp	r8,sp[0x40]
80003ca2:	59 fa       	cp.w	r10,31
80003ca4:	e0 89 00 14 	brgt	80003ccc <_vfprintf_r+0x3c0>
80003ca8:	f0 cb ff fc 	sub	r11,r8,-4
80003cac:	70 08       	ld.w	r8,r8[0x0]
80003cae:	51 0b       	stdsp	sp[0x40],r11
80003cb0:	50 28       	stdsp	sp[0x8],r8
80003cb2:	fa c6 f9 44 	sub	r6,sp,-1724
80003cb6:	40 2e       	lddsp	lr,sp[0x8]
80003cb8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003cbc:	f1 4e fd 88 	st.w	r8[-632],lr
80003cc0:	2f fa       	sub	r10,-1
80003cc2:	0e 94       	mov	r4,r7
80003cc4:	fb 4a 06 b4 	st.w	sp[1716],r10
80003cc8:	12 96       	mov	r6,r9
80003cca:	c0 78       	rjmp	80003cd8 <_vfprintf_r+0x3cc>
80003ccc:	70 0c       	ld.w	r12,r8[0x0]
80003cce:	0e 94       	mov	r4,r7
80003cd0:	2f c8       	sub	r8,-4
80003cd2:	50 2c       	stdsp	sp[0x8],r12
80003cd4:	12 96       	mov	r6,r9
80003cd6:	51 08       	stdsp	sp[0x40],r8
80003cd8:	40 2b       	lddsp	r11,sp[0x8]
80003cda:	58 0b       	cp.w	r11,0
80003cdc:	fe 95 fe f2 	brlt	80003ac0 <_vfprintf_r+0x1b4>
80003ce0:	08 97       	mov	r7,r4
80003ce2:	cf 5a       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003ce4:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003ce8:	0f 38       	ld.ub	r8,r7++
80003cea:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003cee:	f0 ca 00 30 	sub	r10,r8,48
80003cf2:	58 9a       	cp.w	r10,9
80003cf4:	fe 98 ff f8 	brls	80003ce4 <_vfprintf_r+0x3d8>
80003cf8:	3f fa       	mov	r10,-1
80003cfa:	f2 0a 0c 49 	max	r9,r9,r10
80003cfe:	50 29       	stdsp	sp[0x8],r9
80003d00:	ce 9a       	rjmp	80003ad2 <_vfprintf_r+0x1c6>
80003d02:	a7 b5       	sbr	r5,0x7
80003d04:	ce 4a       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003d06:	30 09       	mov	r9,0
80003d08:	23 08       	sub	r8,48
80003d0a:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003d0e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003d12:	0f 38       	ld.ub	r8,r7++
80003d14:	f0 ca 00 30 	sub	r10,r8,48
80003d18:	58 9a       	cp.w	r10,9
80003d1a:	fe 98 ff f7 	brls	80003d08 <_vfprintf_r+0x3fc>
80003d1e:	e0 48 00 24 	cp.w	r8,36
80003d22:	fe 91 fe d7 	brne	80003ad0 <_vfprintf_r+0x1c4>
80003d26:	e0 49 00 20 	cp.w	r9,32
80003d2a:	e0 89 0d 6f 	brgt	80005808 <_vfprintf_r+0x1efc>
80003d2e:	f2 c3 00 01 	sub	r3,r9,1
80003d32:	30 19       	mov	r9,1
80003d34:	50 39       	stdsp	sp[0xc],r9
80003d36:	cc ba       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003d38:	a3 b5       	sbr	r5,0x3
80003d3a:	cc 9a       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003d3c:	a7 a5       	sbr	r5,0x6
80003d3e:	cc 7a       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003d40:	0a 98       	mov	r8,r5
80003d42:	a5 b5       	sbr	r5,0x5
80003d44:	a5 a8       	sbr	r8,0x4
80003d46:	0f 89       	ld.ub	r9,r7[0x0]
80003d48:	36 ce       	mov	lr,108
80003d4a:	fc 09 18 00 	cp.b	r9,lr
80003d4e:	f7 b7 00 ff 	subeq	r7,-1
80003d52:	f0 05 17 10 	movne	r5,r8
80003d56:	cb ba       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003d58:	a5 b5       	sbr	r5,0x5
80003d5a:	cb 9a       	rjmp	80003acc <_vfprintf_r+0x1c0>
80003d5c:	50 a7       	stdsp	sp[0x28],r7
80003d5e:	50 80       	stdsp	sp[0x20],r0
80003d60:	0c 97       	mov	r7,r6
80003d62:	10 90       	mov	r0,r8
80003d64:	06 96       	mov	r6,r3
80003d66:	04 94       	mov	r4,r2
80003d68:	40 93       	lddsp	r3,sp[0x24]
80003d6a:	02 92       	mov	r2,r1
80003d6c:	0e 99       	mov	r9,r7
80003d6e:	40 41       	lddsp	r1,sp[0x10]
80003d70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d74:	40 3c       	lddsp	r12,sp[0xc]
80003d76:	58 0c       	cp.w	r12,0
80003d78:	c1 d0       	breq	80003db2 <_vfprintf_r+0x4a6>
80003d7a:	10 36       	cp.w	r6,r8
80003d7c:	c0 64       	brge	80003d88 <_vfprintf_r+0x47c>
80003d7e:	fa cb f9 44 	sub	r11,sp,-1724
80003d82:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003d86:	c1 d8       	rjmp	80003dc0 <_vfprintf_r+0x4b4>
80003d88:	fa c8 f9 50 	sub	r8,sp,-1712
80003d8c:	1a d8       	st.w	--sp,r8
80003d8e:	fa c8 fa b8 	sub	r8,sp,-1352
80003d92:	1a d8       	st.w	--sp,r8
80003d94:	fa c8 fb b4 	sub	r8,sp,-1100
80003d98:	1a d8       	st.w	--sp,r8
80003d9a:	fa c8 f9 40 	sub	r8,sp,-1728
80003d9e:	fa c9 ff b4 	sub	r9,sp,-76
80003da2:	04 9a       	mov	r10,r2
80003da4:	0c 9b       	mov	r11,r6
80003da6:	08 9c       	mov	r12,r4
80003da8:	fe b0 fc 1a 	rcall	800035dc <get_arg>
80003dac:	2f dd       	sub	sp,-12
80003dae:	19 b8       	ld.ub	r8,r12[0x3]
80003db0:	c2 28       	rjmp	80003df4 <_vfprintf_r+0x4e8>
80003db2:	2f f7       	sub	r7,-1
80003db4:	10 39       	cp.w	r9,r8
80003db6:	c0 84       	brge	80003dc6 <_vfprintf_r+0x4ba>
80003db8:	fa ca f9 44 	sub	r10,sp,-1724
80003dbc:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003dc0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003dc4:	c1 88       	rjmp	80003df4 <_vfprintf_r+0x4e8>
80003dc6:	41 09       	lddsp	r9,sp[0x40]
80003dc8:	59 f8       	cp.w	r8,31
80003dca:	e0 89 00 12 	brgt	80003dee <_vfprintf_r+0x4e2>
80003dce:	f2 ca ff fc 	sub	r10,r9,-4
80003dd2:	51 0a       	stdsp	sp[0x40],r10
80003dd4:	72 09       	ld.w	r9,r9[0x0]
80003dd6:	fa c6 f9 44 	sub	r6,sp,-1724
80003dda:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003dde:	2f f8       	sub	r8,-1
80003de0:	f5 49 fd 88 	st.w	r10[-632],r9
80003de4:	fb 48 06 b4 	st.w	sp[1716],r8
80003de8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003dec:	c0 48       	rjmp	80003df4 <_vfprintf_r+0x4e8>
80003dee:	13 b8       	ld.ub	r8,r9[0x3]
80003df0:	2f c9       	sub	r9,-4
80003df2:	51 09       	stdsp	sp[0x40],r9
80003df4:	fb 68 06 60 	st.b	sp[1632],r8
80003df8:	30 0e       	mov	lr,0
80003dfa:	30 08       	mov	r8,0
80003dfc:	30 12       	mov	r2,1
80003dfe:	fb 68 06 bb 	st.b	sp[1723],r8
80003e02:	50 2e       	stdsp	sp[0x8],lr
80003e04:	e0 8f 08 ad 	bral	80004f5e <_vfprintf_r+0x1652>
80003e08:	50 a7       	stdsp	sp[0x28],r7
80003e0a:	50 80       	stdsp	sp[0x20],r0
80003e0c:	0c 97       	mov	r7,r6
80003e0e:	04 94       	mov	r4,r2
80003e10:	06 96       	mov	r6,r3
80003e12:	02 92       	mov	r2,r1
80003e14:	40 93       	lddsp	r3,sp[0x24]
80003e16:	10 90       	mov	r0,r8
80003e18:	40 41       	lddsp	r1,sp[0x10]
80003e1a:	a5 a5       	sbr	r5,0x4
80003e1c:	c0 a8       	rjmp	80003e30 <_vfprintf_r+0x524>
80003e1e:	50 a7       	stdsp	sp[0x28],r7
80003e20:	50 80       	stdsp	sp[0x20],r0
80003e22:	0c 97       	mov	r7,r6
80003e24:	04 94       	mov	r4,r2
80003e26:	06 96       	mov	r6,r3
80003e28:	02 92       	mov	r2,r1
80003e2a:	40 93       	lddsp	r3,sp[0x24]
80003e2c:	10 90       	mov	r0,r8
80003e2e:	40 41       	lddsp	r1,sp[0x10]
80003e30:	ed b5 00 05 	bld	r5,0x5
80003e34:	c5 11       	brne	80003ed6 <_vfprintf_r+0x5ca>
80003e36:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e3a:	40 3c       	lddsp	r12,sp[0xc]
80003e3c:	58 0c       	cp.w	r12,0
80003e3e:	c1 e0       	breq	80003e7a <_vfprintf_r+0x56e>
80003e40:	10 36       	cp.w	r6,r8
80003e42:	c0 64       	brge	80003e4e <_vfprintf_r+0x542>
80003e44:	fa cb f9 44 	sub	r11,sp,-1724
80003e48:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e4c:	c2 08       	rjmp	80003e8c <_vfprintf_r+0x580>
80003e4e:	fa c8 f9 50 	sub	r8,sp,-1712
80003e52:	1a d8       	st.w	--sp,r8
80003e54:	fa c8 fa b8 	sub	r8,sp,-1352
80003e58:	0c 9b       	mov	r11,r6
80003e5a:	1a d8       	st.w	--sp,r8
80003e5c:	fa c8 fb b4 	sub	r8,sp,-1100
80003e60:	1a d8       	st.w	--sp,r8
80003e62:	fa c9 ff b4 	sub	r9,sp,-76
80003e66:	fa c8 f9 40 	sub	r8,sp,-1728
80003e6a:	04 9a       	mov	r10,r2
80003e6c:	08 9c       	mov	r12,r4
80003e6e:	fe b0 fb b7 	rcall	800035dc <get_arg>
80003e72:	2f dd       	sub	sp,-12
80003e74:	78 1b       	ld.w	r11,r12[0x4]
80003e76:	78 09       	ld.w	r9,r12[0x0]
80003e78:	c2 b8       	rjmp	80003ece <_vfprintf_r+0x5c2>
80003e7a:	ee ca ff ff 	sub	r10,r7,-1
80003e7e:	10 37       	cp.w	r7,r8
80003e80:	c0 b4       	brge	80003e96 <_vfprintf_r+0x58a>
80003e82:	fa c9 f9 44 	sub	r9,sp,-1724
80003e86:	14 97       	mov	r7,r10
80003e88:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003e8c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003e90:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003e94:	c1 d8       	rjmp	80003ece <_vfprintf_r+0x5c2>
80003e96:	41 09       	lddsp	r9,sp[0x40]
80003e98:	59 f8       	cp.w	r8,31
80003e9a:	e0 89 00 14 	brgt	80003ec2 <_vfprintf_r+0x5b6>
80003e9e:	f2 cb ff f8 	sub	r11,r9,-8
80003ea2:	51 0b       	stdsp	sp[0x40],r11
80003ea4:	fa c6 f9 44 	sub	r6,sp,-1724
80003ea8:	72 1b       	ld.w	r11,r9[0x4]
80003eaa:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003eae:	72 09       	ld.w	r9,r9[0x0]
80003eb0:	f9 4b fd 8c 	st.w	r12[-628],r11
80003eb4:	f9 49 fd 88 	st.w	r12[-632],r9
80003eb8:	2f f8       	sub	r8,-1
80003eba:	14 97       	mov	r7,r10
80003ebc:	fb 48 06 b4 	st.w	sp[1716],r8
80003ec0:	c0 78       	rjmp	80003ece <_vfprintf_r+0x5c2>
80003ec2:	f2 c8 ff f8 	sub	r8,r9,-8
80003ec6:	72 1b       	ld.w	r11,r9[0x4]
80003ec8:	14 97       	mov	r7,r10
80003eca:	51 08       	stdsp	sp[0x40],r8
80003ecc:	72 09       	ld.w	r9,r9[0x0]
80003ece:	16 98       	mov	r8,r11
80003ed0:	fa e9 00 00 	st.d	sp[0],r8
80003ed4:	ca e8       	rjmp	80004030 <_vfprintf_r+0x724>
80003ed6:	ed b5 00 04 	bld	r5,0x4
80003eda:	c1 71       	brne	80003f08 <_vfprintf_r+0x5fc>
80003edc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ee0:	40 3e       	lddsp	lr,sp[0xc]
80003ee2:	58 0e       	cp.w	lr,0
80003ee4:	c0 80       	breq	80003ef4 <_vfprintf_r+0x5e8>
80003ee6:	10 36       	cp.w	r6,r8
80003ee8:	c6 94       	brge	80003fba <_vfprintf_r+0x6ae>
80003eea:	fa cc f9 44 	sub	r12,sp,-1724
80003eee:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003ef2:	c8 28       	rjmp	80003ff6 <_vfprintf_r+0x6ea>
80003ef4:	ee ca ff ff 	sub	r10,r7,-1
80003ef8:	10 37       	cp.w	r7,r8
80003efa:	e0 84 00 81 	brge	80003ffc <_vfprintf_r+0x6f0>
80003efe:	fa cb f9 44 	sub	r11,sp,-1724
80003f02:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f06:	c7 78       	rjmp	80003ff4 <_vfprintf_r+0x6e8>
80003f08:	ed b5 00 06 	bld	r5,0x6
80003f0c:	c4 b1       	brne	80003fa2 <_vfprintf_r+0x696>
80003f0e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f12:	40 3c       	lddsp	r12,sp[0xc]
80003f14:	58 0c       	cp.w	r12,0
80003f16:	c1 d0       	breq	80003f50 <_vfprintf_r+0x644>
80003f18:	10 36       	cp.w	r6,r8
80003f1a:	c0 64       	brge	80003f26 <_vfprintf_r+0x61a>
80003f1c:	fa cb f9 44 	sub	r11,sp,-1724
80003f20:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003f24:	c1 f8       	rjmp	80003f62 <_vfprintf_r+0x656>
80003f26:	fa c8 f9 50 	sub	r8,sp,-1712
80003f2a:	1a d8       	st.w	--sp,r8
80003f2c:	fa c8 fa b8 	sub	r8,sp,-1352
80003f30:	1a d8       	st.w	--sp,r8
80003f32:	fa c8 fb b4 	sub	r8,sp,-1100
80003f36:	1a d8       	st.w	--sp,r8
80003f38:	fa c8 f9 40 	sub	r8,sp,-1728
80003f3c:	fa c9 ff b4 	sub	r9,sp,-76
80003f40:	04 9a       	mov	r10,r2
80003f42:	0c 9b       	mov	r11,r6
80003f44:	08 9c       	mov	r12,r4
80003f46:	fe b0 fb 4b 	rcall	800035dc <get_arg>
80003f4a:	2f dd       	sub	sp,-12
80003f4c:	98 18       	ld.sh	r8,r12[0x2]
80003f4e:	c2 68       	rjmp	80003f9a <_vfprintf_r+0x68e>
80003f50:	ee ca ff ff 	sub	r10,r7,-1
80003f54:	10 37       	cp.w	r7,r8
80003f56:	c0 94       	brge	80003f68 <_vfprintf_r+0x65c>
80003f58:	fa c9 f9 44 	sub	r9,sp,-1724
80003f5c:	14 97       	mov	r7,r10
80003f5e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f62:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003f66:	c1 a8       	rjmp	80003f9a <_vfprintf_r+0x68e>
80003f68:	41 09       	lddsp	r9,sp[0x40]
80003f6a:	59 f8       	cp.w	r8,31
80003f6c:	e0 89 00 13 	brgt	80003f92 <_vfprintf_r+0x686>
80003f70:	f2 cb ff fc 	sub	r11,r9,-4
80003f74:	51 0b       	stdsp	sp[0x40],r11
80003f76:	72 09       	ld.w	r9,r9[0x0]
80003f78:	fa c6 f9 44 	sub	r6,sp,-1724
80003f7c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003f80:	2f f8       	sub	r8,-1
80003f82:	f7 49 fd 88 	st.w	r11[-632],r9
80003f86:	fb 48 06 b4 	st.w	sp[1716],r8
80003f8a:	14 97       	mov	r7,r10
80003f8c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003f90:	c0 58       	rjmp	80003f9a <_vfprintf_r+0x68e>
80003f92:	92 18       	ld.sh	r8,r9[0x2]
80003f94:	14 97       	mov	r7,r10
80003f96:	2f c9       	sub	r9,-4
80003f98:	51 09       	stdsp	sp[0x40],r9
80003f9a:	50 18       	stdsp	sp[0x4],r8
80003f9c:	bf 58       	asr	r8,0x1f
80003f9e:	50 08       	stdsp	sp[0x0],r8
80003fa0:	c4 88       	rjmp	80004030 <_vfprintf_r+0x724>
80003fa2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003fa6:	40 3c       	lddsp	r12,sp[0xc]
80003fa8:	58 0c       	cp.w	r12,0
80003faa:	c1 d0       	breq	80003fe4 <_vfprintf_r+0x6d8>
80003fac:	10 36       	cp.w	r6,r8
80003fae:	c0 64       	brge	80003fba <_vfprintf_r+0x6ae>
80003fb0:	fa cb f9 44 	sub	r11,sp,-1724
80003fb4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003fb8:	c1 f8       	rjmp	80003ff6 <_vfprintf_r+0x6ea>
80003fba:	fa c8 f9 50 	sub	r8,sp,-1712
80003fbe:	1a d8       	st.w	--sp,r8
80003fc0:	fa c8 fa b8 	sub	r8,sp,-1352
80003fc4:	0c 9b       	mov	r11,r6
80003fc6:	1a d8       	st.w	--sp,r8
80003fc8:	fa c8 fb b4 	sub	r8,sp,-1100
80003fcc:	04 9a       	mov	r10,r2
80003fce:	1a d8       	st.w	--sp,r8
80003fd0:	08 9c       	mov	r12,r4
80003fd2:	fa c8 f9 40 	sub	r8,sp,-1728
80003fd6:	fa c9 ff b4 	sub	r9,sp,-76
80003fda:	fe b0 fb 01 	rcall	800035dc <get_arg>
80003fde:	2f dd       	sub	sp,-12
80003fe0:	78 0b       	ld.w	r11,r12[0x0]
80003fe2:	c2 48       	rjmp	8000402a <_vfprintf_r+0x71e>
80003fe4:	ee ca ff ff 	sub	r10,r7,-1
80003fe8:	10 37       	cp.w	r7,r8
80003fea:	c0 94       	brge	80003ffc <_vfprintf_r+0x6f0>
80003fec:	fa c9 f9 44 	sub	r9,sp,-1724
80003ff0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003ff4:	14 97       	mov	r7,r10
80003ff6:	ec fb fd 88 	ld.w	r11,r6[-632]
80003ffa:	c1 88       	rjmp	8000402a <_vfprintf_r+0x71e>
80003ffc:	41 09       	lddsp	r9,sp[0x40]
80003ffe:	59 f8       	cp.w	r8,31
80004000:	e0 89 00 11 	brgt	80004022 <_vfprintf_r+0x716>
80004004:	f2 cb ff fc 	sub	r11,r9,-4
80004008:	51 0b       	stdsp	sp[0x40],r11
8000400a:	fa c6 f9 44 	sub	r6,sp,-1724
8000400e:	72 0b       	ld.w	r11,r9[0x0]
80004010:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004014:	f3 4b fd 88 	st.w	r9[-632],r11
80004018:	2f f8       	sub	r8,-1
8000401a:	14 97       	mov	r7,r10
8000401c:	fb 48 06 b4 	st.w	sp[1716],r8
80004020:	c0 58       	rjmp	8000402a <_vfprintf_r+0x71e>
80004022:	72 0b       	ld.w	r11,r9[0x0]
80004024:	14 97       	mov	r7,r10
80004026:	2f c9       	sub	r9,-4
80004028:	51 09       	stdsp	sp[0x40],r9
8000402a:	50 1b       	stdsp	sp[0x4],r11
8000402c:	bf 5b       	asr	r11,0x1f
8000402e:	50 0b       	stdsp	sp[0x0],r11
80004030:	fa ea 00 00 	ld.d	r10,sp[0]
80004034:	58 0a       	cp.w	r10,0
80004036:	5c 2b       	cpc	r11
80004038:	c0 e4       	brge	80004054 <_vfprintf_r+0x748>
8000403a:	30 08       	mov	r8,0
8000403c:	fa ea 00 00 	ld.d	r10,sp[0]
80004040:	30 09       	mov	r9,0
80004042:	f0 0a 01 0a 	sub	r10,r8,r10
80004046:	f2 0b 01 4b 	sbc	r11,r9,r11
8000404a:	32 d8       	mov	r8,45
8000404c:	fa eb 00 00 	st.d	sp[0],r10
80004050:	fb 68 06 bb 	st.b	sp[1723],r8
80004054:	30 18       	mov	r8,1
80004056:	e0 8f 06 fa 	bral	80004e4a <_vfprintf_r+0x153e>
8000405a:	50 a7       	stdsp	sp[0x28],r7
8000405c:	50 80       	stdsp	sp[0x20],r0
8000405e:	0c 97       	mov	r7,r6
80004060:	04 94       	mov	r4,r2
80004062:	06 96       	mov	r6,r3
80004064:	02 92       	mov	r2,r1
80004066:	40 93       	lddsp	r3,sp[0x24]
80004068:	10 90       	mov	r0,r8
8000406a:	40 41       	lddsp	r1,sp[0x10]
8000406c:	0e 99       	mov	r9,r7
8000406e:	ed b5 00 03 	bld	r5,0x3
80004072:	c4 11       	brne	800040f4 <_vfprintf_r+0x7e8>
80004074:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004078:	40 3a       	lddsp	r10,sp[0xc]
8000407a:	58 0a       	cp.w	r10,0
8000407c:	c1 90       	breq	800040ae <_vfprintf_r+0x7a2>
8000407e:	10 36       	cp.w	r6,r8
80004080:	c6 45       	brlt	80004148 <_vfprintf_r+0x83c>
80004082:	fa c8 f9 50 	sub	r8,sp,-1712
80004086:	1a d8       	st.w	--sp,r8
80004088:	fa c8 fa b8 	sub	r8,sp,-1352
8000408c:	1a d8       	st.w	--sp,r8
8000408e:	fa c8 fb b4 	sub	r8,sp,-1100
80004092:	0c 9b       	mov	r11,r6
80004094:	1a d8       	st.w	--sp,r8
80004096:	04 9a       	mov	r10,r2
80004098:	fa c8 f9 40 	sub	r8,sp,-1728
8000409c:	fa c9 ff b4 	sub	r9,sp,-76
800040a0:	08 9c       	mov	r12,r4
800040a2:	fe b0 fa 9d 	rcall	800035dc <get_arg>
800040a6:	2f dd       	sub	sp,-12
800040a8:	78 16       	ld.w	r6,r12[0x4]
800040aa:	50 76       	stdsp	sp[0x1c],r6
800040ac:	c4 88       	rjmp	8000413c <_vfprintf_r+0x830>
800040ae:	2f f7       	sub	r7,-1
800040b0:	10 39       	cp.w	r9,r8
800040b2:	c0 c4       	brge	800040ca <_vfprintf_r+0x7be>
800040b4:	fa ce f9 44 	sub	lr,sp,-1724
800040b8:	fc 06 00 36 	add	r6,lr,r6<<0x3
800040bc:	ec fc fd 8c 	ld.w	r12,r6[-628]
800040c0:	50 7c       	stdsp	sp[0x1c],r12
800040c2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800040c6:	50 56       	stdsp	sp[0x14],r6
800040c8:	c6 68       	rjmp	80004194 <_vfprintf_r+0x888>
800040ca:	41 09       	lddsp	r9,sp[0x40]
800040cc:	59 f8       	cp.w	r8,31
800040ce:	e0 89 00 10 	brgt	800040ee <_vfprintf_r+0x7e2>
800040d2:	f2 ca ff f8 	sub	r10,r9,-8
800040d6:	72 1b       	ld.w	r11,r9[0x4]
800040d8:	51 0a       	stdsp	sp[0x40],r10
800040da:	72 09       	ld.w	r9,r9[0x0]
800040dc:	fa ca f9 44 	sub	r10,sp,-1724
800040e0:	50 7b       	stdsp	sp[0x1c],r11
800040e2:	50 59       	stdsp	sp[0x14],r9
800040e4:	f4 08 00 39 	add	r9,r10,r8<<0x3
800040e8:	40 5b       	lddsp	r11,sp[0x14]
800040ea:	40 7a       	lddsp	r10,sp[0x1c]
800040ec:	c4 78       	rjmp	8000417a <_vfprintf_r+0x86e>
800040ee:	72 18       	ld.w	r8,r9[0x4]
800040f0:	50 78       	stdsp	sp[0x1c],r8
800040f2:	c4 c8       	rjmp	8000418a <_vfprintf_r+0x87e>
800040f4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040f8:	40 3e       	lddsp	lr,sp[0xc]
800040fa:	58 0e       	cp.w	lr,0
800040fc:	c2 30       	breq	80004142 <_vfprintf_r+0x836>
800040fe:	10 36       	cp.w	r6,r8
80004100:	c0 94       	brge	80004112 <_vfprintf_r+0x806>
80004102:	fa cc f9 44 	sub	r12,sp,-1724
80004106:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000410a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000410e:	50 7b       	stdsp	sp[0x1c],r11
80004110:	cd 9b       	rjmp	800040c2 <_vfprintf_r+0x7b6>
80004112:	fa c8 f9 50 	sub	r8,sp,-1712
80004116:	1a d8       	st.w	--sp,r8
80004118:	fa c8 fa b8 	sub	r8,sp,-1352
8000411c:	04 9a       	mov	r10,r2
8000411e:	1a d8       	st.w	--sp,r8
80004120:	fa c8 fb b4 	sub	r8,sp,-1100
80004124:	0c 9b       	mov	r11,r6
80004126:	1a d8       	st.w	--sp,r8
80004128:	08 9c       	mov	r12,r4
8000412a:	fa c8 f9 40 	sub	r8,sp,-1728
8000412e:	fa c9 ff b4 	sub	r9,sp,-76
80004132:	fe b0 fa 55 	rcall	800035dc <get_arg>
80004136:	2f dd       	sub	sp,-12
80004138:	78 1a       	ld.w	r10,r12[0x4]
8000413a:	50 7a       	stdsp	sp[0x1c],r10
8000413c:	78 0c       	ld.w	r12,r12[0x0]
8000413e:	50 5c       	stdsp	sp[0x14],r12
80004140:	c2 a8       	rjmp	80004194 <_vfprintf_r+0x888>
80004142:	2f f7       	sub	r7,-1
80004144:	10 39       	cp.w	r9,r8
80004146:	c0 94       	brge	80004158 <_vfprintf_r+0x84c>
80004148:	fa c9 f9 44 	sub	r9,sp,-1724
8000414c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004150:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004154:	50 78       	stdsp	sp[0x1c],r8
80004156:	cb 6b       	rjmp	800040c2 <_vfprintf_r+0x7b6>
80004158:	41 09       	lddsp	r9,sp[0x40]
8000415a:	59 f8       	cp.w	r8,31
8000415c:	e0 89 00 15 	brgt	80004186 <_vfprintf_r+0x87a>
80004160:	f2 ca ff f8 	sub	r10,r9,-8
80004164:	72 16       	ld.w	r6,r9[0x4]
80004166:	72 09       	ld.w	r9,r9[0x0]
80004168:	51 0a       	stdsp	sp[0x40],r10
8000416a:	50 59       	stdsp	sp[0x14],r9
8000416c:	fa ce f9 44 	sub	lr,sp,-1724
80004170:	50 76       	stdsp	sp[0x1c],r6
80004172:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004176:	40 5b       	lddsp	r11,sp[0x14]
80004178:	0c 9a       	mov	r10,r6
8000417a:	f2 eb fd 88 	st.d	r9[-632],r10
8000417e:	2f f8       	sub	r8,-1
80004180:	fb 48 06 b4 	st.w	sp[1716],r8
80004184:	c0 88       	rjmp	80004194 <_vfprintf_r+0x888>
80004186:	72 1c       	ld.w	r12,r9[0x4]
80004188:	50 7c       	stdsp	sp[0x1c],r12
8000418a:	f2 c8 ff f8 	sub	r8,r9,-8
8000418e:	51 08       	stdsp	sp[0x40],r8
80004190:	72 09       	ld.w	r9,r9[0x0]
80004192:	50 59       	stdsp	sp[0x14],r9
80004194:	40 5b       	lddsp	r11,sp[0x14]
80004196:	40 7a       	lddsp	r10,sp[0x1c]
80004198:	e0 a0 1c de 	rcall	80007b54 <__isinfd>
8000419c:	18 96       	mov	r6,r12
8000419e:	c1 70       	breq	800041cc <_vfprintf_r+0x8c0>
800041a0:	30 08       	mov	r8,0
800041a2:	30 09       	mov	r9,0
800041a4:	40 5b       	lddsp	r11,sp[0x14]
800041a6:	40 7a       	lddsp	r10,sp[0x1c]
800041a8:	e0 a0 21 cc 	rcall	80008540 <__avr32_f64_cmp_lt>
800041ac:	c0 40       	breq	800041b4 <_vfprintf_r+0x8a8>
800041ae:	32 d8       	mov	r8,45
800041b0:	fb 68 06 bb 	st.b	sp[1723],r8
800041b4:	fe c8 94 cc 	sub	r8,pc,-27444
800041b8:	fe c6 94 cc 	sub	r6,pc,-27444
800041bc:	a7 d5       	cbr	r5,0x7
800041be:	e0 40 00 47 	cp.w	r0,71
800041c2:	f0 06 17 a0 	movle	r6,r8
800041c6:	30 32       	mov	r2,3
800041c8:	e0 8f 06 ce 	bral	80004f64 <_vfprintf_r+0x1658>
800041cc:	40 5b       	lddsp	r11,sp[0x14]
800041ce:	40 7a       	lddsp	r10,sp[0x1c]
800041d0:	e0 a0 1c d7 	rcall	80007b7e <__isnand>
800041d4:	c0 e0       	breq	800041f0 <_vfprintf_r+0x8e4>
800041d6:	50 26       	stdsp	sp[0x8],r6
800041d8:	fe c8 94 e8 	sub	r8,pc,-27416
800041dc:	fe c6 94 e8 	sub	r6,pc,-27416
800041e0:	a7 d5       	cbr	r5,0x7
800041e2:	e0 40 00 47 	cp.w	r0,71
800041e6:	f0 06 17 a0 	movle	r6,r8
800041ea:	30 32       	mov	r2,3
800041ec:	e0 8f 06 c2 	bral	80004f70 <_vfprintf_r+0x1664>
800041f0:	40 2a       	lddsp	r10,sp[0x8]
800041f2:	5b fa       	cp.w	r10,-1
800041f4:	c0 41       	brne	800041fc <_vfprintf_r+0x8f0>
800041f6:	30 69       	mov	r9,6
800041f8:	50 29       	stdsp	sp[0x8],r9
800041fa:	c1 18       	rjmp	8000421c <_vfprintf_r+0x910>
800041fc:	e0 40 00 47 	cp.w	r0,71
80004200:	5f 09       	sreq	r9
80004202:	e0 40 00 67 	cp.w	r0,103
80004206:	5f 08       	sreq	r8
80004208:	f3 e8 10 08 	or	r8,r9,r8
8000420c:	f8 08 18 00 	cp.b	r8,r12
80004210:	c0 60       	breq	8000421c <_vfprintf_r+0x910>
80004212:	40 28       	lddsp	r8,sp[0x8]
80004214:	58 08       	cp.w	r8,0
80004216:	f9 b8 00 01 	moveq	r8,1
8000421a:	50 28       	stdsp	sp[0x8],r8
8000421c:	40 78       	lddsp	r8,sp[0x1c]
8000421e:	40 59       	lddsp	r9,sp[0x14]
80004220:	fa e9 06 94 	st.d	sp[1684],r8
80004224:	a9 a5       	sbr	r5,0x8
80004226:	fa f8 06 94 	ld.w	r8,sp[1684]
8000422a:	58 08       	cp.w	r8,0
8000422c:	c0 65       	brlt	80004238 <_vfprintf_r+0x92c>
8000422e:	40 5e       	lddsp	lr,sp[0x14]
80004230:	30 0c       	mov	r12,0
80004232:	50 6e       	stdsp	sp[0x18],lr
80004234:	50 9c       	stdsp	sp[0x24],r12
80004236:	c0 78       	rjmp	80004244 <_vfprintf_r+0x938>
80004238:	40 5b       	lddsp	r11,sp[0x14]
8000423a:	32 da       	mov	r10,45
8000423c:	ee 1b 80 00 	eorh	r11,0x8000
80004240:	50 9a       	stdsp	sp[0x24],r10
80004242:	50 6b       	stdsp	sp[0x18],r11
80004244:	e0 40 00 46 	cp.w	r0,70
80004248:	5f 09       	sreq	r9
8000424a:	e0 40 00 66 	cp.w	r0,102
8000424e:	5f 08       	sreq	r8
80004250:	f3 e8 10 08 	or	r8,r9,r8
80004254:	50 48       	stdsp	sp[0x10],r8
80004256:	c0 40       	breq	8000425e <_vfprintf_r+0x952>
80004258:	40 22       	lddsp	r2,sp[0x8]
8000425a:	30 39       	mov	r9,3
8000425c:	c1 08       	rjmp	8000427c <_vfprintf_r+0x970>
8000425e:	e0 40 00 45 	cp.w	r0,69
80004262:	5f 09       	sreq	r9
80004264:	e0 40 00 65 	cp.w	r0,101
80004268:	5f 08       	sreq	r8
8000426a:	40 22       	lddsp	r2,sp[0x8]
8000426c:	10 49       	or	r9,r8
8000426e:	2f f2       	sub	r2,-1
80004270:	40 46       	lddsp	r6,sp[0x10]
80004272:	ec 09 18 00 	cp.b	r9,r6
80004276:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000427a:	30 29       	mov	r9,2
8000427c:	fa c8 f9 5c 	sub	r8,sp,-1700
80004280:	1a d8       	st.w	--sp,r8
80004282:	fa c8 f9 54 	sub	r8,sp,-1708
80004286:	1a d8       	st.w	--sp,r8
80004288:	fa c8 f9 4c 	sub	r8,sp,-1716
8000428c:	08 9c       	mov	r12,r4
8000428e:	1a d8       	st.w	--sp,r8
80004290:	04 98       	mov	r8,r2
80004292:	40 9b       	lddsp	r11,sp[0x24]
80004294:	40 aa       	lddsp	r10,sp[0x28]
80004296:	e0 a0 0b c3 	rcall	80005a1c <_dtoa_r>
8000429a:	e0 40 00 47 	cp.w	r0,71
8000429e:	5f 19       	srne	r9
800042a0:	e0 40 00 67 	cp.w	r0,103
800042a4:	5f 18       	srne	r8
800042a6:	18 96       	mov	r6,r12
800042a8:	2f dd       	sub	sp,-12
800042aa:	f3 e8 00 08 	and	r8,r9,r8
800042ae:	c0 41       	brne	800042b6 <_vfprintf_r+0x9aa>
800042b0:	ed b5 00 00 	bld	r5,0x0
800042b4:	c3 01       	brne	80004314 <_vfprintf_r+0xa08>
800042b6:	ec 02 00 0e 	add	lr,r6,r2
800042ba:	50 3e       	stdsp	sp[0xc],lr
800042bc:	40 4c       	lddsp	r12,sp[0x10]
800042be:	58 0c       	cp.w	r12,0
800042c0:	c1 50       	breq	800042ea <_vfprintf_r+0x9de>
800042c2:	0d 89       	ld.ub	r9,r6[0x0]
800042c4:	33 08       	mov	r8,48
800042c6:	f0 09 18 00 	cp.b	r9,r8
800042ca:	c0 b1       	brne	800042e0 <_vfprintf_r+0x9d4>
800042cc:	30 08       	mov	r8,0
800042ce:	30 09       	mov	r9,0
800042d0:	40 6b       	lddsp	r11,sp[0x18]
800042d2:	40 7a       	lddsp	r10,sp[0x1c]
800042d4:	e0 a0 20 ef 	rcall	800084b2 <__avr32_f64_cmp_eq>
800042d8:	fb b2 00 01 	rsubeq	r2,1
800042dc:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800042e0:	40 3b       	lddsp	r11,sp[0xc]
800042e2:	fa f8 06 ac 	ld.w	r8,sp[1708]
800042e6:	10 0b       	add	r11,r8
800042e8:	50 3b       	stdsp	sp[0xc],r11
800042ea:	40 6b       	lddsp	r11,sp[0x18]
800042ec:	30 08       	mov	r8,0
800042ee:	30 09       	mov	r9,0
800042f0:	40 7a       	lddsp	r10,sp[0x1c]
800042f2:	e0 a0 20 e0 	rcall	800084b2 <__avr32_f64_cmp_eq>
800042f6:	c0 90       	breq	80004308 <_vfprintf_r+0x9fc>
800042f8:	40 3a       	lddsp	r10,sp[0xc]
800042fa:	fb 4a 06 a4 	st.w	sp[1700],r10
800042fe:	c0 58       	rjmp	80004308 <_vfprintf_r+0x9fc>
80004300:	10 c9       	st.b	r8++,r9
80004302:	fb 48 06 a4 	st.w	sp[1700],r8
80004306:	c0 28       	rjmp	8000430a <_vfprintf_r+0x9fe>
80004308:	33 09       	mov	r9,48
8000430a:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000430e:	40 3e       	lddsp	lr,sp[0xc]
80004310:	1c 38       	cp.w	r8,lr
80004312:	cf 73       	brcs	80004300 <_vfprintf_r+0x9f4>
80004314:	e0 40 00 47 	cp.w	r0,71
80004318:	5f 09       	sreq	r9
8000431a:	e0 40 00 67 	cp.w	r0,103
8000431e:	5f 08       	sreq	r8
80004320:	f3 e8 10 08 	or	r8,r9,r8
80004324:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004328:	0c 19       	sub	r9,r6
8000432a:	50 69       	stdsp	sp[0x18],r9
8000432c:	58 08       	cp.w	r8,0
8000432e:	c0 b0       	breq	80004344 <_vfprintf_r+0xa38>
80004330:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004334:	5b d8       	cp.w	r8,-3
80004336:	c0 55       	brlt	80004340 <_vfprintf_r+0xa34>
80004338:	40 2c       	lddsp	r12,sp[0x8]
8000433a:	18 38       	cp.w	r8,r12
8000433c:	e0 8a 00 6a 	brle	80004410 <_vfprintf_r+0xb04>
80004340:	20 20       	sub	r0,2
80004342:	c0 58       	rjmp	8000434c <_vfprintf_r+0xa40>
80004344:	e0 40 00 65 	cp.w	r0,101
80004348:	e0 89 00 46 	brgt	800043d4 <_vfprintf_r+0xac8>
8000434c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004350:	fb 60 06 9c 	st.b	sp[1692],r0
80004354:	20 1b       	sub	r11,1
80004356:	fb 4b 06 ac 	st.w	sp[1708],r11
8000435a:	c0 47       	brpl	80004362 <_vfprintf_r+0xa56>
8000435c:	5c 3b       	neg	r11
8000435e:	32 d8       	mov	r8,45
80004360:	c0 28       	rjmp	80004364 <_vfprintf_r+0xa58>
80004362:	32 b8       	mov	r8,43
80004364:	fb 68 06 9d 	st.b	sp[1693],r8
80004368:	58 9b       	cp.w	r11,9
8000436a:	e0 8a 00 1d 	brle	800043a4 <_vfprintf_r+0xa98>
8000436e:	fa c9 fa 35 	sub	r9,sp,-1483
80004372:	30 aa       	mov	r10,10
80004374:	12 98       	mov	r8,r9
80004376:	0e 9c       	mov	r12,r7
80004378:	0c 92       	mov	r2,r6
8000437a:	f6 0a 0c 06 	divs	r6,r11,r10
8000437e:	0e 9b       	mov	r11,r7
80004380:	2d 0b       	sub	r11,-48
80004382:	10 fb       	st.b	--r8,r11
80004384:	0c 9b       	mov	r11,r6
80004386:	58 96       	cp.w	r6,9
80004388:	fe 99 ff f9 	brgt	8000437a <_vfprintf_r+0xa6e>
8000438c:	2d 0b       	sub	r11,-48
8000438e:	18 97       	mov	r7,r12
80004390:	04 96       	mov	r6,r2
80004392:	10 fb       	st.b	--r8,r11
80004394:	fa ca f9 62 	sub	r10,sp,-1694
80004398:	c0 38       	rjmp	8000439e <_vfprintf_r+0xa92>
8000439a:	11 3b       	ld.ub	r11,r8++
8000439c:	14 cb       	st.b	r10++,r11
8000439e:	12 38       	cp.w	r8,r9
800043a0:	cf d3       	brcs	8000439a <_vfprintf_r+0xa8e>
800043a2:	c0 98       	rjmp	800043b4 <_vfprintf_r+0xaa8>
800043a4:	2d 0b       	sub	r11,-48
800043a6:	33 08       	mov	r8,48
800043a8:	fb 6b 06 9f 	st.b	sp[1695],r11
800043ac:	fb 68 06 9e 	st.b	sp[1694],r8
800043b0:	fa ca f9 60 	sub	r10,sp,-1696
800043b4:	fa c8 f9 64 	sub	r8,sp,-1692
800043b8:	f4 08 01 08 	sub	r8,r10,r8
800043bc:	50 e8       	stdsp	sp[0x38],r8
800043be:	10 92       	mov	r2,r8
800043c0:	40 6b       	lddsp	r11,sp[0x18]
800043c2:	16 02       	add	r2,r11
800043c4:	58 1b       	cp.w	r11,1
800043c6:	e0 89 00 05 	brgt	800043d0 <_vfprintf_r+0xac4>
800043ca:	ed b5 00 00 	bld	r5,0x0
800043ce:	c3 51       	brne	80004438 <_vfprintf_r+0xb2c>
800043d0:	2f f2       	sub	r2,-1
800043d2:	c3 38       	rjmp	80004438 <_vfprintf_r+0xb2c>
800043d4:	e0 40 00 66 	cp.w	r0,102
800043d8:	c1 c1       	brne	80004410 <_vfprintf_r+0xb04>
800043da:	fa f2 06 ac 	ld.w	r2,sp[1708]
800043de:	58 02       	cp.w	r2,0
800043e0:	e0 8a 00 0c 	brle	800043f8 <_vfprintf_r+0xaec>
800043e4:	40 2a       	lddsp	r10,sp[0x8]
800043e6:	58 0a       	cp.w	r10,0
800043e8:	c0 41       	brne	800043f0 <_vfprintf_r+0xae4>
800043ea:	ed b5 00 00 	bld	r5,0x0
800043ee:	c2 51       	brne	80004438 <_vfprintf_r+0xb2c>
800043f0:	2f f2       	sub	r2,-1
800043f2:	40 29       	lddsp	r9,sp[0x8]
800043f4:	12 02       	add	r2,r9
800043f6:	c0 b8       	rjmp	8000440c <_vfprintf_r+0xb00>
800043f8:	40 28       	lddsp	r8,sp[0x8]
800043fa:	58 08       	cp.w	r8,0
800043fc:	c0 61       	brne	80004408 <_vfprintf_r+0xafc>
800043fe:	ed b5 00 00 	bld	r5,0x0
80004402:	c0 30       	breq	80004408 <_vfprintf_r+0xafc>
80004404:	30 12       	mov	r2,1
80004406:	c1 98       	rjmp	80004438 <_vfprintf_r+0xb2c>
80004408:	40 22       	lddsp	r2,sp[0x8]
8000440a:	2f e2       	sub	r2,-2
8000440c:	36 60       	mov	r0,102
8000440e:	c1 58       	rjmp	80004438 <_vfprintf_r+0xb2c>
80004410:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004414:	40 6e       	lddsp	lr,sp[0x18]
80004416:	1c 32       	cp.w	r2,lr
80004418:	c0 65       	brlt	80004424 <_vfprintf_r+0xb18>
8000441a:	ed b5 00 00 	bld	r5,0x0
8000441e:	f7 b2 00 ff 	subeq	r2,-1
80004422:	c0 a8       	rjmp	80004436 <_vfprintf_r+0xb2a>
80004424:	e4 08 11 02 	rsub	r8,r2,2
80004428:	40 6c       	lddsp	r12,sp[0x18]
8000442a:	58 02       	cp.w	r2,0
8000442c:	f0 02 17 a0 	movle	r2,r8
80004430:	f9 b2 09 01 	movgt	r2,1
80004434:	18 02       	add	r2,r12
80004436:	36 70       	mov	r0,103
80004438:	40 9b       	lddsp	r11,sp[0x24]
8000443a:	58 0b       	cp.w	r11,0
8000443c:	e0 80 05 94 	breq	80004f64 <_vfprintf_r+0x1658>
80004440:	32 d8       	mov	r8,45
80004442:	fb 68 06 bb 	st.b	sp[1723],r8
80004446:	e0 8f 05 93 	bral	80004f6c <_vfprintf_r+0x1660>
8000444a:	50 a7       	stdsp	sp[0x28],r7
8000444c:	04 94       	mov	r4,r2
8000444e:	0c 97       	mov	r7,r6
80004450:	02 92       	mov	r2,r1
80004452:	06 96       	mov	r6,r3
80004454:	40 41       	lddsp	r1,sp[0x10]
80004456:	40 93       	lddsp	r3,sp[0x24]
80004458:	0e 99       	mov	r9,r7
8000445a:	ed b5 00 05 	bld	r5,0x5
8000445e:	c4 81       	brne	800044ee <_vfprintf_r+0xbe2>
80004460:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004464:	40 3e       	lddsp	lr,sp[0xc]
80004466:	58 0e       	cp.w	lr,0
80004468:	c1 d0       	breq	800044a2 <_vfprintf_r+0xb96>
8000446a:	10 36       	cp.w	r6,r8
8000446c:	c0 64       	brge	80004478 <_vfprintf_r+0xb6c>
8000446e:	fa cc f9 44 	sub	r12,sp,-1724
80004472:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004476:	c1 d8       	rjmp	800044b0 <_vfprintf_r+0xba4>
80004478:	fa c8 f9 50 	sub	r8,sp,-1712
8000447c:	1a d8       	st.w	--sp,r8
8000447e:	fa c8 fa b8 	sub	r8,sp,-1352
80004482:	04 9a       	mov	r10,r2
80004484:	1a d8       	st.w	--sp,r8
80004486:	fa c8 fb b4 	sub	r8,sp,-1100
8000448a:	0c 9b       	mov	r11,r6
8000448c:	1a d8       	st.w	--sp,r8
8000448e:	08 9c       	mov	r12,r4
80004490:	fa c8 f9 40 	sub	r8,sp,-1728
80004494:	fa c9 ff b4 	sub	r9,sp,-76
80004498:	fe b0 f8 a2 	rcall	800035dc <get_arg>
8000449c:	2f dd       	sub	sp,-12
8000449e:	78 0a       	ld.w	r10,r12[0x0]
800044a0:	c2 08       	rjmp	800044e0 <_vfprintf_r+0xbd4>
800044a2:	2f f7       	sub	r7,-1
800044a4:	10 39       	cp.w	r9,r8
800044a6:	c0 84       	brge	800044b6 <_vfprintf_r+0xbaa>
800044a8:	fa cb f9 44 	sub	r11,sp,-1724
800044ac:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044b0:	ec fa fd 88 	ld.w	r10,r6[-632]
800044b4:	c1 68       	rjmp	800044e0 <_vfprintf_r+0xbd4>
800044b6:	41 09       	lddsp	r9,sp[0x40]
800044b8:	59 f8       	cp.w	r8,31
800044ba:	e0 89 00 10 	brgt	800044da <_vfprintf_r+0xbce>
800044be:	f2 ca ff fc 	sub	r10,r9,-4
800044c2:	51 0a       	stdsp	sp[0x40],r10
800044c4:	fa c6 f9 44 	sub	r6,sp,-1724
800044c8:	72 0a       	ld.w	r10,r9[0x0]
800044ca:	ec 08 00 39 	add	r9,r6,r8<<0x3
800044ce:	f3 4a fd 88 	st.w	r9[-632],r10
800044d2:	2f f8       	sub	r8,-1
800044d4:	fb 48 06 b4 	st.w	sp[1716],r8
800044d8:	c0 48       	rjmp	800044e0 <_vfprintf_r+0xbd4>
800044da:	72 0a       	ld.w	r10,r9[0x0]
800044dc:	2f c9       	sub	r9,-4
800044de:	51 09       	stdsp	sp[0x40],r9
800044e0:	40 be       	lddsp	lr,sp[0x2c]
800044e2:	1c 98       	mov	r8,lr
800044e4:	95 1e       	st.w	r10[0x4],lr
800044e6:	bf 58       	asr	r8,0x1f
800044e8:	95 08       	st.w	r10[0x0],r8
800044ea:	fe 9f fa 9f 	bral	80003a28 <_vfprintf_r+0x11c>
800044ee:	ed b5 00 04 	bld	r5,0x4
800044f2:	c4 80       	breq	80004582 <_vfprintf_r+0xc76>
800044f4:	e2 15 00 40 	andl	r5,0x40,COH
800044f8:	c4 50       	breq	80004582 <_vfprintf_r+0xc76>
800044fa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044fe:	40 3c       	lddsp	r12,sp[0xc]
80004500:	58 0c       	cp.w	r12,0
80004502:	c1 d0       	breq	8000453c <_vfprintf_r+0xc30>
80004504:	10 36       	cp.w	r6,r8
80004506:	c0 64       	brge	80004512 <_vfprintf_r+0xc06>
80004508:	fa cb f9 44 	sub	r11,sp,-1724
8000450c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004510:	c1 d8       	rjmp	8000454a <_vfprintf_r+0xc3e>
80004512:	fa c8 f9 50 	sub	r8,sp,-1712
80004516:	1a d8       	st.w	--sp,r8
80004518:	fa c8 fa b8 	sub	r8,sp,-1352
8000451c:	04 9a       	mov	r10,r2
8000451e:	1a d8       	st.w	--sp,r8
80004520:	fa c8 fb b4 	sub	r8,sp,-1100
80004524:	0c 9b       	mov	r11,r6
80004526:	1a d8       	st.w	--sp,r8
80004528:	08 9c       	mov	r12,r4
8000452a:	fa c8 f9 40 	sub	r8,sp,-1728
8000452e:	fa c9 ff b4 	sub	r9,sp,-76
80004532:	fe b0 f8 55 	rcall	800035dc <get_arg>
80004536:	2f dd       	sub	sp,-12
80004538:	78 0a       	ld.w	r10,r12[0x0]
8000453a:	c2 08       	rjmp	8000457a <_vfprintf_r+0xc6e>
8000453c:	2f f7       	sub	r7,-1
8000453e:	10 39       	cp.w	r9,r8
80004540:	c0 84       	brge	80004550 <_vfprintf_r+0xc44>
80004542:	fa ca f9 44 	sub	r10,sp,-1724
80004546:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000454a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000454e:	c1 68       	rjmp	8000457a <_vfprintf_r+0xc6e>
80004550:	41 09       	lddsp	r9,sp[0x40]
80004552:	59 f8       	cp.w	r8,31
80004554:	e0 89 00 10 	brgt	80004574 <_vfprintf_r+0xc68>
80004558:	f2 ca ff fc 	sub	r10,r9,-4
8000455c:	51 0a       	stdsp	sp[0x40],r10
8000455e:	fa c6 f9 44 	sub	r6,sp,-1724
80004562:	72 0a       	ld.w	r10,r9[0x0]
80004564:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004568:	f3 4a fd 88 	st.w	r9[-632],r10
8000456c:	2f f8       	sub	r8,-1
8000456e:	fb 48 06 b4 	st.w	sp[1716],r8
80004572:	c0 48       	rjmp	8000457a <_vfprintf_r+0xc6e>
80004574:	72 0a       	ld.w	r10,r9[0x0]
80004576:	2f c9       	sub	r9,-4
80004578:	51 09       	stdsp	sp[0x40],r9
8000457a:	40 be       	lddsp	lr,sp[0x2c]
8000457c:	b4 0e       	st.h	r10[0x0],lr
8000457e:	fe 9f fa 55 	bral	80003a28 <_vfprintf_r+0x11c>
80004582:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004586:	40 3c       	lddsp	r12,sp[0xc]
80004588:	58 0c       	cp.w	r12,0
8000458a:	c1 d0       	breq	800045c4 <_vfprintf_r+0xcb8>
8000458c:	10 36       	cp.w	r6,r8
8000458e:	c0 64       	brge	8000459a <_vfprintf_r+0xc8e>
80004590:	fa cb f9 44 	sub	r11,sp,-1724
80004594:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004598:	c1 d8       	rjmp	800045d2 <_vfprintf_r+0xcc6>
8000459a:	fa c8 f9 50 	sub	r8,sp,-1712
8000459e:	1a d8       	st.w	--sp,r8
800045a0:	fa c8 fa b8 	sub	r8,sp,-1352
800045a4:	04 9a       	mov	r10,r2
800045a6:	1a d8       	st.w	--sp,r8
800045a8:	fa c8 fb b4 	sub	r8,sp,-1100
800045ac:	0c 9b       	mov	r11,r6
800045ae:	1a d8       	st.w	--sp,r8
800045b0:	08 9c       	mov	r12,r4
800045b2:	fa c8 f9 40 	sub	r8,sp,-1728
800045b6:	fa c9 ff b4 	sub	r9,sp,-76
800045ba:	fe b0 f8 11 	rcall	800035dc <get_arg>
800045be:	2f dd       	sub	sp,-12
800045c0:	78 0a       	ld.w	r10,r12[0x0]
800045c2:	c2 08       	rjmp	80004602 <_vfprintf_r+0xcf6>
800045c4:	2f f7       	sub	r7,-1
800045c6:	10 39       	cp.w	r9,r8
800045c8:	c0 84       	brge	800045d8 <_vfprintf_r+0xccc>
800045ca:	fa ca f9 44 	sub	r10,sp,-1724
800045ce:	f4 06 00 36 	add	r6,r10,r6<<0x3
800045d2:	ec fa fd 88 	ld.w	r10,r6[-632]
800045d6:	c1 68       	rjmp	80004602 <_vfprintf_r+0xcf6>
800045d8:	41 09       	lddsp	r9,sp[0x40]
800045da:	59 f8       	cp.w	r8,31
800045dc:	e0 89 00 10 	brgt	800045fc <_vfprintf_r+0xcf0>
800045e0:	f2 ca ff fc 	sub	r10,r9,-4
800045e4:	51 0a       	stdsp	sp[0x40],r10
800045e6:	fa c6 f9 44 	sub	r6,sp,-1724
800045ea:	72 0a       	ld.w	r10,r9[0x0]
800045ec:	ec 08 00 39 	add	r9,r6,r8<<0x3
800045f0:	f3 4a fd 88 	st.w	r9[-632],r10
800045f4:	2f f8       	sub	r8,-1
800045f6:	fb 48 06 b4 	st.w	sp[1716],r8
800045fa:	c0 48       	rjmp	80004602 <_vfprintf_r+0xcf6>
800045fc:	72 0a       	ld.w	r10,r9[0x0]
800045fe:	2f c9       	sub	r9,-4
80004600:	51 09       	stdsp	sp[0x40],r9
80004602:	40 be       	lddsp	lr,sp[0x2c]
80004604:	95 0e       	st.w	r10[0x0],lr
80004606:	fe 9f fa 11 	bral	80003a28 <_vfprintf_r+0x11c>
8000460a:	50 a7       	stdsp	sp[0x28],r7
8000460c:	50 80       	stdsp	sp[0x20],r0
8000460e:	0c 97       	mov	r7,r6
80004610:	04 94       	mov	r4,r2
80004612:	06 96       	mov	r6,r3
80004614:	02 92       	mov	r2,r1
80004616:	40 93       	lddsp	r3,sp[0x24]
80004618:	10 90       	mov	r0,r8
8000461a:	40 41       	lddsp	r1,sp[0x10]
8000461c:	a5 a5       	sbr	r5,0x4
8000461e:	c0 a8       	rjmp	80004632 <_vfprintf_r+0xd26>
80004620:	50 a7       	stdsp	sp[0x28],r7
80004622:	50 80       	stdsp	sp[0x20],r0
80004624:	0c 97       	mov	r7,r6
80004626:	04 94       	mov	r4,r2
80004628:	06 96       	mov	r6,r3
8000462a:	02 92       	mov	r2,r1
8000462c:	40 93       	lddsp	r3,sp[0x24]
8000462e:	10 90       	mov	r0,r8
80004630:	40 41       	lddsp	r1,sp[0x10]
80004632:	ed b5 00 05 	bld	r5,0x5
80004636:	c5 d1       	brne	800046f0 <_vfprintf_r+0xde4>
80004638:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000463c:	40 3c       	lddsp	r12,sp[0xc]
8000463e:	58 0c       	cp.w	r12,0
80004640:	c2 60       	breq	8000468c <_vfprintf_r+0xd80>
80004642:	10 36       	cp.w	r6,r8
80004644:	c0 a4       	brge	80004658 <_vfprintf_r+0xd4c>
80004646:	fa cb f9 44 	sub	r11,sp,-1724
8000464a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000464e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004652:	fa e9 00 00 	st.d	sp[0],r8
80004656:	c1 88       	rjmp	80004686 <_vfprintf_r+0xd7a>
80004658:	fa c8 f9 50 	sub	r8,sp,-1712
8000465c:	1a d8       	st.w	--sp,r8
8000465e:	fa c8 fa b8 	sub	r8,sp,-1352
80004662:	04 9a       	mov	r10,r2
80004664:	1a d8       	st.w	--sp,r8
80004666:	0c 9b       	mov	r11,r6
80004668:	fa c8 fb b4 	sub	r8,sp,-1100
8000466c:	08 9c       	mov	r12,r4
8000466e:	1a d8       	st.w	--sp,r8
80004670:	fa c8 f9 40 	sub	r8,sp,-1728
80004674:	fa c9 ff b4 	sub	r9,sp,-76
80004678:	fe b0 f7 b2 	rcall	800035dc <get_arg>
8000467c:	2f dd       	sub	sp,-12
8000467e:	f8 ea 00 00 	ld.d	r10,r12[0]
80004682:	fa eb 00 00 	st.d	sp[0],r10
80004686:	30 08       	mov	r8,0
80004688:	e0 8f 03 de 	bral	80004e44 <_vfprintf_r+0x1538>
8000468c:	ee ca ff ff 	sub	r10,r7,-1
80004690:	10 37       	cp.w	r7,r8
80004692:	c0 b4       	brge	800046a8 <_vfprintf_r+0xd9c>
80004694:	fa c9 f9 44 	sub	r9,sp,-1724
80004698:	14 97       	mov	r7,r10
8000469a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000469e:	ec ea fd 88 	ld.d	r10,r6[-632]
800046a2:	fa eb 00 00 	st.d	sp[0],r10
800046a6:	c1 88       	rjmp	800046d6 <_vfprintf_r+0xdca>
800046a8:	41 09       	lddsp	r9,sp[0x40]
800046aa:	59 f8       	cp.w	r8,31
800046ac:	e0 89 00 18 	brgt	800046dc <_vfprintf_r+0xdd0>
800046b0:	f2 e6 00 00 	ld.d	r6,r9[0]
800046b4:	f2 cb ff f8 	sub	r11,r9,-8
800046b8:	fa e7 00 00 	st.d	sp[0],r6
800046bc:	51 0b       	stdsp	sp[0x40],r11
800046be:	fa c6 f9 44 	sub	r6,sp,-1724
800046c2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800046c6:	fa e6 00 00 	ld.d	r6,sp[0]
800046ca:	f2 e7 fd 88 	st.d	r9[-632],r6
800046ce:	2f f8       	sub	r8,-1
800046d0:	14 97       	mov	r7,r10
800046d2:	fb 48 06 b4 	st.w	sp[1716],r8
800046d6:	40 38       	lddsp	r8,sp[0xc]
800046d8:	e0 8f 03 b6 	bral	80004e44 <_vfprintf_r+0x1538>
800046dc:	f2 e6 00 00 	ld.d	r6,r9[0]
800046e0:	40 38       	lddsp	r8,sp[0xc]
800046e2:	fa e7 00 00 	st.d	sp[0],r6
800046e6:	2f 89       	sub	r9,-8
800046e8:	14 97       	mov	r7,r10
800046ea:	51 09       	stdsp	sp[0x40],r9
800046ec:	e0 8f 03 ac 	bral	80004e44 <_vfprintf_r+0x1538>
800046f0:	ed b5 00 04 	bld	r5,0x4
800046f4:	c1 61       	brne	80004720 <_vfprintf_r+0xe14>
800046f6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046fa:	40 3e       	lddsp	lr,sp[0xc]
800046fc:	58 0e       	cp.w	lr,0
800046fe:	c0 80       	breq	8000470e <_vfprintf_r+0xe02>
80004700:	10 36       	cp.w	r6,r8
80004702:	c6 74       	brge	800047d0 <_vfprintf_r+0xec4>
80004704:	fa cc f9 44 	sub	r12,sp,-1724
80004708:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000470c:	c8 08       	rjmp	8000480c <_vfprintf_r+0xf00>
8000470e:	ee ca ff ff 	sub	r10,r7,-1
80004712:	10 37       	cp.w	r7,r8
80004714:	c7 f4       	brge	80004812 <_vfprintf_r+0xf06>
80004716:	fa cb f9 44 	sub	r11,sp,-1724
8000471a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000471e:	c7 68       	rjmp	8000480a <_vfprintf_r+0xefe>
80004720:	ed b5 00 06 	bld	r5,0x6
80004724:	c4 a1       	brne	800047b8 <_vfprintf_r+0xeac>
80004726:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000472a:	40 3c       	lddsp	r12,sp[0xc]
8000472c:	58 0c       	cp.w	r12,0
8000472e:	c1 d0       	breq	80004768 <_vfprintf_r+0xe5c>
80004730:	10 36       	cp.w	r6,r8
80004732:	c0 64       	brge	8000473e <_vfprintf_r+0xe32>
80004734:	fa cb f9 44 	sub	r11,sp,-1724
80004738:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000473c:	c1 f8       	rjmp	8000477a <_vfprintf_r+0xe6e>
8000473e:	fa c8 f9 50 	sub	r8,sp,-1712
80004742:	1a d8       	st.w	--sp,r8
80004744:	fa c8 fa b8 	sub	r8,sp,-1352
80004748:	1a d8       	st.w	--sp,r8
8000474a:	fa c8 fb b4 	sub	r8,sp,-1100
8000474e:	1a d8       	st.w	--sp,r8
80004750:	fa c8 f9 40 	sub	r8,sp,-1728
80004754:	fa c9 ff b4 	sub	r9,sp,-76
80004758:	04 9a       	mov	r10,r2
8000475a:	0c 9b       	mov	r11,r6
8000475c:	08 9c       	mov	r12,r4
8000475e:	fe b0 f7 3f 	rcall	800035dc <get_arg>
80004762:	2f dd       	sub	sp,-12
80004764:	98 18       	ld.sh	r8,r12[0x2]
80004766:	c2 68       	rjmp	800047b2 <_vfprintf_r+0xea6>
80004768:	ee ca ff ff 	sub	r10,r7,-1
8000476c:	10 37       	cp.w	r7,r8
8000476e:	c0 94       	brge	80004780 <_vfprintf_r+0xe74>
80004770:	fa c9 f9 44 	sub	r9,sp,-1724
80004774:	14 97       	mov	r7,r10
80004776:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000477a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000477e:	c1 a8       	rjmp	800047b2 <_vfprintf_r+0xea6>
80004780:	41 09       	lddsp	r9,sp[0x40]
80004782:	59 f8       	cp.w	r8,31
80004784:	e0 89 00 13 	brgt	800047aa <_vfprintf_r+0xe9e>
80004788:	f2 cb ff fc 	sub	r11,r9,-4
8000478c:	51 0b       	stdsp	sp[0x40],r11
8000478e:	72 09       	ld.w	r9,r9[0x0]
80004790:	fa c6 f9 44 	sub	r6,sp,-1724
80004794:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004798:	2f f8       	sub	r8,-1
8000479a:	f7 49 fd 88 	st.w	r11[-632],r9
8000479e:	fb 48 06 b4 	st.w	sp[1716],r8
800047a2:	14 97       	mov	r7,r10
800047a4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800047a8:	c0 58       	rjmp	800047b2 <_vfprintf_r+0xea6>
800047aa:	92 18       	ld.sh	r8,r9[0x2]
800047ac:	14 97       	mov	r7,r10
800047ae:	2f c9       	sub	r9,-4
800047b0:	51 09       	stdsp	sp[0x40],r9
800047b2:	5c 78       	castu.h	r8
800047b4:	50 18       	stdsp	sp[0x4],r8
800047b6:	c4 68       	rjmp	80004842 <_vfprintf_r+0xf36>
800047b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047bc:	40 3c       	lddsp	r12,sp[0xc]
800047be:	58 0c       	cp.w	r12,0
800047c0:	c1 d0       	breq	800047fa <_vfprintf_r+0xeee>
800047c2:	10 36       	cp.w	r6,r8
800047c4:	c0 64       	brge	800047d0 <_vfprintf_r+0xec4>
800047c6:	fa cb f9 44 	sub	r11,sp,-1724
800047ca:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047ce:	c1 f8       	rjmp	8000480c <_vfprintf_r+0xf00>
800047d0:	fa c8 f9 50 	sub	r8,sp,-1712
800047d4:	1a d8       	st.w	--sp,r8
800047d6:	fa c8 fa b8 	sub	r8,sp,-1352
800047da:	0c 9b       	mov	r11,r6
800047dc:	1a d8       	st.w	--sp,r8
800047de:	fa c8 fb b4 	sub	r8,sp,-1100
800047e2:	04 9a       	mov	r10,r2
800047e4:	1a d8       	st.w	--sp,r8
800047e6:	08 9c       	mov	r12,r4
800047e8:	fa c8 f9 40 	sub	r8,sp,-1728
800047ec:	fa c9 ff b4 	sub	r9,sp,-76
800047f0:	fe b0 f6 f6 	rcall	800035dc <get_arg>
800047f4:	2f dd       	sub	sp,-12
800047f6:	78 0b       	ld.w	r11,r12[0x0]
800047f8:	c2 48       	rjmp	80004840 <_vfprintf_r+0xf34>
800047fa:	ee ca ff ff 	sub	r10,r7,-1
800047fe:	10 37       	cp.w	r7,r8
80004800:	c0 94       	brge	80004812 <_vfprintf_r+0xf06>
80004802:	fa c9 f9 44 	sub	r9,sp,-1724
80004806:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000480a:	14 97       	mov	r7,r10
8000480c:	ec fb fd 88 	ld.w	r11,r6[-632]
80004810:	c1 88       	rjmp	80004840 <_vfprintf_r+0xf34>
80004812:	41 09       	lddsp	r9,sp[0x40]
80004814:	59 f8       	cp.w	r8,31
80004816:	e0 89 00 11 	brgt	80004838 <_vfprintf_r+0xf2c>
8000481a:	f2 cb ff fc 	sub	r11,r9,-4
8000481e:	51 0b       	stdsp	sp[0x40],r11
80004820:	fa c6 f9 44 	sub	r6,sp,-1724
80004824:	72 0b       	ld.w	r11,r9[0x0]
80004826:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000482a:	f3 4b fd 88 	st.w	r9[-632],r11
8000482e:	2f f8       	sub	r8,-1
80004830:	14 97       	mov	r7,r10
80004832:	fb 48 06 b4 	st.w	sp[1716],r8
80004836:	c0 58       	rjmp	80004840 <_vfprintf_r+0xf34>
80004838:	72 0b       	ld.w	r11,r9[0x0]
8000483a:	14 97       	mov	r7,r10
8000483c:	2f c9       	sub	r9,-4
8000483e:	51 09       	stdsp	sp[0x40],r9
80004840:	50 1b       	stdsp	sp[0x4],r11
80004842:	30 0e       	mov	lr,0
80004844:	50 0e       	stdsp	sp[0x0],lr
80004846:	1c 98       	mov	r8,lr
80004848:	e0 8f 02 fe 	bral	80004e44 <_vfprintf_r+0x1538>
8000484c:	50 a7       	stdsp	sp[0x28],r7
8000484e:	50 80       	stdsp	sp[0x20],r0
80004850:	0c 97       	mov	r7,r6
80004852:	04 94       	mov	r4,r2
80004854:	06 96       	mov	r6,r3
80004856:	02 92       	mov	r2,r1
80004858:	40 93       	lddsp	r3,sp[0x24]
8000485a:	40 41       	lddsp	r1,sp[0x10]
8000485c:	0e 99       	mov	r9,r7
8000485e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004862:	40 3c       	lddsp	r12,sp[0xc]
80004864:	58 0c       	cp.w	r12,0
80004866:	c1 d0       	breq	800048a0 <_vfprintf_r+0xf94>
80004868:	10 36       	cp.w	r6,r8
8000486a:	c0 64       	brge	80004876 <_vfprintf_r+0xf6a>
8000486c:	fa cb f9 44 	sub	r11,sp,-1724
80004870:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004874:	c1 d8       	rjmp	800048ae <_vfprintf_r+0xfa2>
80004876:	fa c8 f9 50 	sub	r8,sp,-1712
8000487a:	1a d8       	st.w	--sp,r8
8000487c:	fa c8 fa b8 	sub	r8,sp,-1352
80004880:	1a d8       	st.w	--sp,r8
80004882:	fa c8 fb b4 	sub	r8,sp,-1100
80004886:	1a d8       	st.w	--sp,r8
80004888:	fa c9 ff b4 	sub	r9,sp,-76
8000488c:	fa c8 f9 40 	sub	r8,sp,-1728
80004890:	04 9a       	mov	r10,r2
80004892:	0c 9b       	mov	r11,r6
80004894:	08 9c       	mov	r12,r4
80004896:	fe b0 f6 a3 	rcall	800035dc <get_arg>
8000489a:	2f dd       	sub	sp,-12
8000489c:	78 09       	ld.w	r9,r12[0x0]
8000489e:	c2 18       	rjmp	800048e0 <_vfprintf_r+0xfd4>
800048a0:	2f f7       	sub	r7,-1
800048a2:	10 39       	cp.w	r9,r8
800048a4:	c0 84       	brge	800048b4 <_vfprintf_r+0xfa8>
800048a6:	fa ca f9 44 	sub	r10,sp,-1724
800048aa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800048ae:	ec f9 fd 88 	ld.w	r9,r6[-632]
800048b2:	c1 78       	rjmp	800048e0 <_vfprintf_r+0xfd4>
800048b4:	41 09       	lddsp	r9,sp[0x40]
800048b6:	59 f8       	cp.w	r8,31
800048b8:	e0 89 00 10 	brgt	800048d8 <_vfprintf_r+0xfcc>
800048bc:	f2 ca ff fc 	sub	r10,r9,-4
800048c0:	51 0a       	stdsp	sp[0x40],r10
800048c2:	fa c6 f9 44 	sub	r6,sp,-1724
800048c6:	72 09       	ld.w	r9,r9[0x0]
800048c8:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800048cc:	f5 49 fd 88 	st.w	r10[-632],r9
800048d0:	2f f8       	sub	r8,-1
800048d2:	fb 48 06 b4 	st.w	sp[1716],r8
800048d6:	c0 58       	rjmp	800048e0 <_vfprintf_r+0xfd4>
800048d8:	f2 c8 ff fc 	sub	r8,r9,-4
800048dc:	51 08       	stdsp	sp[0x40],r8
800048de:	72 09       	ld.w	r9,r9[0x0]
800048e0:	33 08       	mov	r8,48
800048e2:	fb 68 06 b8 	st.b	sp[1720],r8
800048e6:	37 88       	mov	r8,120
800048e8:	30 0e       	mov	lr,0
800048ea:	fb 68 06 b9 	st.b	sp[1721],r8
800048ee:	fe cc 9b f6 	sub	r12,pc,-25610
800048f2:	50 19       	stdsp	sp[0x4],r9
800048f4:	a1 b5       	sbr	r5,0x1
800048f6:	50 0e       	stdsp	sp[0x0],lr
800048f8:	50 dc       	stdsp	sp[0x34],r12
800048fa:	30 28       	mov	r8,2
800048fc:	37 80       	mov	r0,120
800048fe:	e0 8f 02 a3 	bral	80004e44 <_vfprintf_r+0x1538>
80004902:	50 a7       	stdsp	sp[0x28],r7
80004904:	50 80       	stdsp	sp[0x20],r0
80004906:	10 90       	mov	r0,r8
80004908:	30 08       	mov	r8,0
8000490a:	fb 68 06 bb 	st.b	sp[1723],r8
8000490e:	0c 97       	mov	r7,r6
80004910:	04 94       	mov	r4,r2
80004912:	06 96       	mov	r6,r3
80004914:	02 92       	mov	r2,r1
80004916:	40 93       	lddsp	r3,sp[0x24]
80004918:	40 41       	lddsp	r1,sp[0x10]
8000491a:	0e 99       	mov	r9,r7
8000491c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004920:	40 3b       	lddsp	r11,sp[0xc]
80004922:	58 0b       	cp.w	r11,0
80004924:	c1 d0       	breq	8000495e <_vfprintf_r+0x1052>
80004926:	10 36       	cp.w	r6,r8
80004928:	c0 64       	brge	80004934 <_vfprintf_r+0x1028>
8000492a:	fa ca f9 44 	sub	r10,sp,-1724
8000492e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004932:	c1 d8       	rjmp	8000496c <_vfprintf_r+0x1060>
80004934:	fa c8 f9 50 	sub	r8,sp,-1712
80004938:	1a d8       	st.w	--sp,r8
8000493a:	fa c8 fa b8 	sub	r8,sp,-1352
8000493e:	1a d8       	st.w	--sp,r8
80004940:	fa c8 fb b4 	sub	r8,sp,-1100
80004944:	0c 9b       	mov	r11,r6
80004946:	1a d8       	st.w	--sp,r8
80004948:	04 9a       	mov	r10,r2
8000494a:	fa c8 f9 40 	sub	r8,sp,-1728
8000494e:	fa c9 ff b4 	sub	r9,sp,-76
80004952:	08 9c       	mov	r12,r4
80004954:	fe b0 f6 44 	rcall	800035dc <get_arg>
80004958:	2f dd       	sub	sp,-12
8000495a:	78 06       	ld.w	r6,r12[0x0]
8000495c:	c2 08       	rjmp	8000499c <_vfprintf_r+0x1090>
8000495e:	2f f7       	sub	r7,-1
80004960:	10 39       	cp.w	r9,r8
80004962:	c0 84       	brge	80004972 <_vfprintf_r+0x1066>
80004964:	fa c9 f9 44 	sub	r9,sp,-1724
80004968:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000496c:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004970:	c1 68       	rjmp	8000499c <_vfprintf_r+0x1090>
80004972:	41 09       	lddsp	r9,sp[0x40]
80004974:	59 f8       	cp.w	r8,31
80004976:	e0 89 00 10 	brgt	80004996 <_vfprintf_r+0x108a>
8000497a:	f2 ca ff fc 	sub	r10,r9,-4
8000497e:	51 0a       	stdsp	sp[0x40],r10
80004980:	72 06       	ld.w	r6,r9[0x0]
80004982:	fa ce f9 44 	sub	lr,sp,-1724
80004986:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000498a:	f3 46 fd 88 	st.w	r9[-632],r6
8000498e:	2f f8       	sub	r8,-1
80004990:	fb 48 06 b4 	st.w	sp[1716],r8
80004994:	c0 48       	rjmp	8000499c <_vfprintf_r+0x1090>
80004996:	72 06       	ld.w	r6,r9[0x0]
80004998:	2f c9       	sub	r9,-4
8000499a:	51 09       	stdsp	sp[0x40],r9
8000499c:	40 2c       	lddsp	r12,sp[0x8]
8000499e:	58 0c       	cp.w	r12,0
800049a0:	c1 05       	brlt	800049c0 <_vfprintf_r+0x10b4>
800049a2:	18 9a       	mov	r10,r12
800049a4:	30 0b       	mov	r11,0
800049a6:	0c 9c       	mov	r12,r6
800049a8:	e0 a0 14 58 	rcall	80007258 <memchr>
800049ac:	e0 80 02 df 	breq	80004f6a <_vfprintf_r+0x165e>
800049b0:	f8 06 01 02 	sub	r2,r12,r6
800049b4:	40 2b       	lddsp	r11,sp[0x8]
800049b6:	16 32       	cp.w	r2,r11
800049b8:	e0 89 02 d9 	brgt	80004f6a <_vfprintf_r+0x165e>
800049bc:	e0 8f 02 d4 	bral	80004f64 <_vfprintf_r+0x1658>
800049c0:	30 0a       	mov	r10,0
800049c2:	0c 9c       	mov	r12,r6
800049c4:	50 2a       	stdsp	sp[0x8],r10
800049c6:	e0 a0 19 33 	rcall	80007c2c <strlen>
800049ca:	18 92       	mov	r2,r12
800049cc:	e0 8f 02 d2 	bral	80004f70 <_vfprintf_r+0x1664>
800049d0:	50 a7       	stdsp	sp[0x28],r7
800049d2:	50 80       	stdsp	sp[0x20],r0
800049d4:	0c 97       	mov	r7,r6
800049d6:	04 94       	mov	r4,r2
800049d8:	06 96       	mov	r6,r3
800049da:	02 92       	mov	r2,r1
800049dc:	40 93       	lddsp	r3,sp[0x24]
800049de:	10 90       	mov	r0,r8
800049e0:	40 41       	lddsp	r1,sp[0x10]
800049e2:	a5 a5       	sbr	r5,0x4
800049e4:	c0 a8       	rjmp	800049f8 <_vfprintf_r+0x10ec>
800049e6:	50 a7       	stdsp	sp[0x28],r7
800049e8:	50 80       	stdsp	sp[0x20],r0
800049ea:	0c 97       	mov	r7,r6
800049ec:	04 94       	mov	r4,r2
800049ee:	06 96       	mov	r6,r3
800049f0:	02 92       	mov	r2,r1
800049f2:	40 93       	lddsp	r3,sp[0x24]
800049f4:	10 90       	mov	r0,r8
800049f6:	40 41       	lddsp	r1,sp[0x10]
800049f8:	ed b5 00 05 	bld	r5,0x5
800049fc:	c5 61       	brne	80004aa8 <_vfprintf_r+0x119c>
800049fe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a02:	40 39       	lddsp	r9,sp[0xc]
80004a04:	58 09       	cp.w	r9,0
80004a06:	c2 10       	breq	80004a48 <_vfprintf_r+0x113c>
80004a08:	10 36       	cp.w	r6,r8
80004a0a:	c0 74       	brge	80004a18 <_vfprintf_r+0x110c>
80004a0c:	fa c8 f9 44 	sub	r8,sp,-1724
80004a10:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a14:	c2 38       	rjmp	80004a5a <_vfprintf_r+0x114e>
80004a16:	d7 03       	nop
80004a18:	fa c8 f9 50 	sub	r8,sp,-1712
80004a1c:	1a d8       	st.w	--sp,r8
80004a1e:	fa c8 fa b8 	sub	r8,sp,-1352
80004a22:	1a d8       	st.w	--sp,r8
80004a24:	fa c8 fb b4 	sub	r8,sp,-1100
80004a28:	1a d8       	st.w	--sp,r8
80004a2a:	fa c8 f9 40 	sub	r8,sp,-1728
80004a2e:	fa c9 ff b4 	sub	r9,sp,-76
80004a32:	04 9a       	mov	r10,r2
80004a34:	0c 9b       	mov	r11,r6
80004a36:	08 9c       	mov	r12,r4
80004a38:	fe b0 f5 d2 	rcall	800035dc <get_arg>
80004a3c:	2f dd       	sub	sp,-12
80004a3e:	f8 e8 00 00 	ld.d	r8,r12[0]
80004a42:	fa e9 00 00 	st.d	sp[0],r8
80004a46:	c2 e8       	rjmp	80004aa2 <_vfprintf_r+0x1196>
80004a48:	ee ca ff ff 	sub	r10,r7,-1
80004a4c:	10 37       	cp.w	r7,r8
80004a4e:	c0 b4       	brge	80004a64 <_vfprintf_r+0x1158>
80004a50:	fa c8 f9 44 	sub	r8,sp,-1724
80004a54:	14 97       	mov	r7,r10
80004a56:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004a5a:	ec ea fd 88 	ld.d	r10,r6[-632]
80004a5e:	fa eb 00 00 	st.d	sp[0],r10
80004a62:	c2 08       	rjmp	80004aa2 <_vfprintf_r+0x1196>
80004a64:	41 09       	lddsp	r9,sp[0x40]
80004a66:	59 f8       	cp.w	r8,31
80004a68:	e0 89 00 16 	brgt	80004a94 <_vfprintf_r+0x1188>
80004a6c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004a70:	f2 cb ff f8 	sub	r11,r9,-8
80004a74:	fa e7 00 00 	st.d	sp[0],r6
80004a78:	51 0b       	stdsp	sp[0x40],r11
80004a7a:	fa c6 f9 44 	sub	r6,sp,-1724
80004a7e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a82:	fa e6 00 00 	ld.d	r6,sp[0]
80004a86:	f2 e7 fd 88 	st.d	r9[-632],r6
80004a8a:	2f f8       	sub	r8,-1
80004a8c:	14 97       	mov	r7,r10
80004a8e:	fb 48 06 b4 	st.w	sp[1716],r8
80004a92:	c0 88       	rjmp	80004aa2 <_vfprintf_r+0x1196>
80004a94:	f2 e6 00 00 	ld.d	r6,r9[0]
80004a98:	2f 89       	sub	r9,-8
80004a9a:	fa e7 00 00 	st.d	sp[0],r6
80004a9e:	51 09       	stdsp	sp[0x40],r9
80004aa0:	14 97       	mov	r7,r10
80004aa2:	30 18       	mov	r8,1
80004aa4:	e0 8f 01 d0 	bral	80004e44 <_vfprintf_r+0x1538>
80004aa8:	ed b5 00 04 	bld	r5,0x4
80004aac:	c1 61       	brne	80004ad8 <_vfprintf_r+0x11cc>
80004aae:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ab2:	40 3e       	lddsp	lr,sp[0xc]
80004ab4:	58 0e       	cp.w	lr,0
80004ab6:	c0 80       	breq	80004ac6 <_vfprintf_r+0x11ba>
80004ab8:	10 36       	cp.w	r6,r8
80004aba:	c6 74       	brge	80004b88 <_vfprintf_r+0x127c>
80004abc:	fa cc f9 44 	sub	r12,sp,-1724
80004ac0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004ac4:	c8 08       	rjmp	80004bc4 <_vfprintf_r+0x12b8>
80004ac6:	ee ca ff ff 	sub	r10,r7,-1
80004aca:	10 37       	cp.w	r7,r8
80004acc:	c7 f4       	brge	80004bca <_vfprintf_r+0x12be>
80004ace:	fa cb f9 44 	sub	r11,sp,-1724
80004ad2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ad6:	c7 68       	rjmp	80004bc2 <_vfprintf_r+0x12b6>
80004ad8:	ed b5 00 06 	bld	r5,0x6
80004adc:	c4 a1       	brne	80004b70 <_vfprintf_r+0x1264>
80004ade:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ae2:	40 3c       	lddsp	r12,sp[0xc]
80004ae4:	58 0c       	cp.w	r12,0
80004ae6:	c1 d0       	breq	80004b20 <_vfprintf_r+0x1214>
80004ae8:	10 36       	cp.w	r6,r8
80004aea:	c0 64       	brge	80004af6 <_vfprintf_r+0x11ea>
80004aec:	fa cb f9 44 	sub	r11,sp,-1724
80004af0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004af4:	c1 f8       	rjmp	80004b32 <_vfprintf_r+0x1226>
80004af6:	fa c8 f9 50 	sub	r8,sp,-1712
80004afa:	1a d8       	st.w	--sp,r8
80004afc:	fa c8 fa b8 	sub	r8,sp,-1352
80004b00:	1a d8       	st.w	--sp,r8
80004b02:	fa c8 fb b4 	sub	r8,sp,-1100
80004b06:	1a d8       	st.w	--sp,r8
80004b08:	fa c8 f9 40 	sub	r8,sp,-1728
80004b0c:	fa c9 ff b4 	sub	r9,sp,-76
80004b10:	04 9a       	mov	r10,r2
80004b12:	0c 9b       	mov	r11,r6
80004b14:	08 9c       	mov	r12,r4
80004b16:	fe b0 f5 63 	rcall	800035dc <get_arg>
80004b1a:	2f dd       	sub	sp,-12
80004b1c:	98 18       	ld.sh	r8,r12[0x2]
80004b1e:	c2 68       	rjmp	80004b6a <_vfprintf_r+0x125e>
80004b20:	ee ca ff ff 	sub	r10,r7,-1
80004b24:	10 37       	cp.w	r7,r8
80004b26:	c0 94       	brge	80004b38 <_vfprintf_r+0x122c>
80004b28:	fa c9 f9 44 	sub	r9,sp,-1724
80004b2c:	14 97       	mov	r7,r10
80004b2e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b32:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004b36:	c1 a8       	rjmp	80004b6a <_vfprintf_r+0x125e>
80004b38:	41 09       	lddsp	r9,sp[0x40]
80004b3a:	59 f8       	cp.w	r8,31
80004b3c:	e0 89 00 13 	brgt	80004b62 <_vfprintf_r+0x1256>
80004b40:	f2 cb ff fc 	sub	r11,r9,-4
80004b44:	51 0b       	stdsp	sp[0x40],r11
80004b46:	72 09       	ld.w	r9,r9[0x0]
80004b48:	fa c6 f9 44 	sub	r6,sp,-1724
80004b4c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004b50:	2f f8       	sub	r8,-1
80004b52:	f7 49 fd 88 	st.w	r11[-632],r9
80004b56:	fb 48 06 b4 	st.w	sp[1716],r8
80004b5a:	14 97       	mov	r7,r10
80004b5c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004b60:	c0 58       	rjmp	80004b6a <_vfprintf_r+0x125e>
80004b62:	92 18       	ld.sh	r8,r9[0x2]
80004b64:	14 97       	mov	r7,r10
80004b66:	2f c9       	sub	r9,-4
80004b68:	51 09       	stdsp	sp[0x40],r9
80004b6a:	5c 78       	castu.h	r8
80004b6c:	50 18       	stdsp	sp[0x4],r8
80004b6e:	c4 68       	rjmp	80004bfa <_vfprintf_r+0x12ee>
80004b70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b74:	40 3c       	lddsp	r12,sp[0xc]
80004b76:	58 0c       	cp.w	r12,0
80004b78:	c1 d0       	breq	80004bb2 <_vfprintf_r+0x12a6>
80004b7a:	10 36       	cp.w	r6,r8
80004b7c:	c0 64       	brge	80004b88 <_vfprintf_r+0x127c>
80004b7e:	fa cb f9 44 	sub	r11,sp,-1724
80004b82:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b86:	c1 f8       	rjmp	80004bc4 <_vfprintf_r+0x12b8>
80004b88:	fa c8 f9 50 	sub	r8,sp,-1712
80004b8c:	1a d8       	st.w	--sp,r8
80004b8e:	fa c8 fa b8 	sub	r8,sp,-1352
80004b92:	0c 9b       	mov	r11,r6
80004b94:	1a d8       	st.w	--sp,r8
80004b96:	fa c8 fb b4 	sub	r8,sp,-1100
80004b9a:	04 9a       	mov	r10,r2
80004b9c:	1a d8       	st.w	--sp,r8
80004b9e:	08 9c       	mov	r12,r4
80004ba0:	fa c8 f9 40 	sub	r8,sp,-1728
80004ba4:	fa c9 ff b4 	sub	r9,sp,-76
80004ba8:	fe b0 f5 1a 	rcall	800035dc <get_arg>
80004bac:	2f dd       	sub	sp,-12
80004bae:	78 0b       	ld.w	r11,r12[0x0]
80004bb0:	c2 48       	rjmp	80004bf8 <_vfprintf_r+0x12ec>
80004bb2:	ee ca ff ff 	sub	r10,r7,-1
80004bb6:	10 37       	cp.w	r7,r8
80004bb8:	c0 94       	brge	80004bca <_vfprintf_r+0x12be>
80004bba:	fa c9 f9 44 	sub	r9,sp,-1724
80004bbe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bc2:	14 97       	mov	r7,r10
80004bc4:	ec fb fd 88 	ld.w	r11,r6[-632]
80004bc8:	c1 88       	rjmp	80004bf8 <_vfprintf_r+0x12ec>
80004bca:	41 09       	lddsp	r9,sp[0x40]
80004bcc:	59 f8       	cp.w	r8,31
80004bce:	e0 89 00 11 	brgt	80004bf0 <_vfprintf_r+0x12e4>
80004bd2:	f2 cb ff fc 	sub	r11,r9,-4
80004bd6:	51 0b       	stdsp	sp[0x40],r11
80004bd8:	fa c6 f9 44 	sub	r6,sp,-1724
80004bdc:	72 0b       	ld.w	r11,r9[0x0]
80004bde:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004be2:	f3 4b fd 88 	st.w	r9[-632],r11
80004be6:	2f f8       	sub	r8,-1
80004be8:	14 97       	mov	r7,r10
80004bea:	fb 48 06 b4 	st.w	sp[1716],r8
80004bee:	c0 58       	rjmp	80004bf8 <_vfprintf_r+0x12ec>
80004bf0:	72 0b       	ld.w	r11,r9[0x0]
80004bf2:	14 97       	mov	r7,r10
80004bf4:	2f c9       	sub	r9,-4
80004bf6:	51 09       	stdsp	sp[0x40],r9
80004bf8:	50 1b       	stdsp	sp[0x4],r11
80004bfa:	30 0e       	mov	lr,0
80004bfc:	30 18       	mov	r8,1
80004bfe:	50 0e       	stdsp	sp[0x0],lr
80004c00:	c2 29       	rjmp	80004e44 <_vfprintf_r+0x1538>
80004c02:	50 a7       	stdsp	sp[0x28],r7
80004c04:	50 80       	stdsp	sp[0x20],r0
80004c06:	0c 97       	mov	r7,r6
80004c08:	04 94       	mov	r4,r2
80004c0a:	06 96       	mov	r6,r3
80004c0c:	02 92       	mov	r2,r1
80004c0e:	fe cc 9f 16 	sub	r12,pc,-24810
80004c12:	40 93       	lddsp	r3,sp[0x24]
80004c14:	10 90       	mov	r0,r8
80004c16:	40 41       	lddsp	r1,sp[0x10]
80004c18:	50 dc       	stdsp	sp[0x34],r12
80004c1a:	ed b5 00 05 	bld	r5,0x5
80004c1e:	c5 51       	brne	80004cc8 <_vfprintf_r+0x13bc>
80004c20:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c24:	40 3b       	lddsp	r11,sp[0xc]
80004c26:	58 0b       	cp.w	r11,0
80004c28:	c2 20       	breq	80004c6c <_vfprintf_r+0x1360>
80004c2a:	10 36       	cp.w	r6,r8
80004c2c:	c0 a4       	brge	80004c40 <_vfprintf_r+0x1334>
80004c2e:	fa ca f9 44 	sub	r10,sp,-1724
80004c32:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004c36:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004c3a:	fa e9 00 00 	st.d	sp[0],r8
80004c3e:	cf 28       	rjmp	80004e22 <_vfprintf_r+0x1516>
80004c40:	fa c8 f9 50 	sub	r8,sp,-1712
80004c44:	1a d8       	st.w	--sp,r8
80004c46:	fa c8 fa b8 	sub	r8,sp,-1352
80004c4a:	04 9a       	mov	r10,r2
80004c4c:	1a d8       	st.w	--sp,r8
80004c4e:	0c 9b       	mov	r11,r6
80004c50:	fa c8 fb b4 	sub	r8,sp,-1100
80004c54:	08 9c       	mov	r12,r4
80004c56:	1a d8       	st.w	--sp,r8
80004c58:	fa c8 f9 40 	sub	r8,sp,-1728
80004c5c:	fa c9 ff b4 	sub	r9,sp,-76
80004c60:	fe b0 f4 be 	rcall	800035dc <get_arg>
80004c64:	2f dd       	sub	sp,-12
80004c66:	f8 ea 00 00 	ld.d	r10,r12[0]
80004c6a:	c0 c8       	rjmp	80004c82 <_vfprintf_r+0x1376>
80004c6c:	ee ca ff ff 	sub	r10,r7,-1
80004c70:	10 37       	cp.w	r7,r8
80004c72:	c0 b4       	brge	80004c88 <_vfprintf_r+0x137c>
80004c74:	fa c9 f9 44 	sub	r9,sp,-1724
80004c78:	14 97       	mov	r7,r10
80004c7a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c7e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004c82:	fa eb 00 00 	st.d	sp[0],r10
80004c86:	cc e8       	rjmp	80004e22 <_vfprintf_r+0x1516>
80004c88:	41 09       	lddsp	r9,sp[0x40]
80004c8a:	59 f8       	cp.w	r8,31
80004c8c:	e0 89 00 16 	brgt	80004cb8 <_vfprintf_r+0x13ac>
80004c90:	f2 e6 00 00 	ld.d	r6,r9[0]
80004c94:	f2 cb ff f8 	sub	r11,r9,-8
80004c98:	fa e7 00 00 	st.d	sp[0],r6
80004c9c:	51 0b       	stdsp	sp[0x40],r11
80004c9e:	fa c6 f9 44 	sub	r6,sp,-1724
80004ca2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ca6:	fa e6 00 00 	ld.d	r6,sp[0]
80004caa:	f2 e7 fd 88 	st.d	r9[-632],r6
80004cae:	2f f8       	sub	r8,-1
80004cb0:	14 97       	mov	r7,r10
80004cb2:	fb 48 06 b4 	st.w	sp[1716],r8
80004cb6:	cb 68       	rjmp	80004e22 <_vfprintf_r+0x1516>
80004cb8:	f2 e6 00 00 	ld.d	r6,r9[0]
80004cbc:	2f 89       	sub	r9,-8
80004cbe:	fa e7 00 00 	st.d	sp[0],r6
80004cc2:	51 09       	stdsp	sp[0x40],r9
80004cc4:	14 97       	mov	r7,r10
80004cc6:	ca e8       	rjmp	80004e22 <_vfprintf_r+0x1516>
80004cc8:	ed b5 00 04 	bld	r5,0x4
80004ccc:	c1 71       	brne	80004cfa <_vfprintf_r+0x13ee>
80004cce:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cd2:	40 3e       	lddsp	lr,sp[0xc]
80004cd4:	58 0e       	cp.w	lr,0
80004cd6:	c0 80       	breq	80004ce6 <_vfprintf_r+0x13da>
80004cd8:	10 36       	cp.w	r6,r8
80004cda:	c6 94       	brge	80004dac <_vfprintf_r+0x14a0>
80004cdc:	fa cc f9 44 	sub	r12,sp,-1724
80004ce0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004ce4:	c8 28       	rjmp	80004de8 <_vfprintf_r+0x14dc>
80004ce6:	ee ca ff ff 	sub	r10,r7,-1
80004cea:	10 37       	cp.w	r7,r8
80004cec:	e0 84 00 81 	brge	80004dee <_vfprintf_r+0x14e2>
80004cf0:	fa cb f9 44 	sub	r11,sp,-1724
80004cf4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004cf8:	c7 78       	rjmp	80004de6 <_vfprintf_r+0x14da>
80004cfa:	ed b5 00 06 	bld	r5,0x6
80004cfe:	c4 b1       	brne	80004d94 <_vfprintf_r+0x1488>
80004d00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d04:	40 3c       	lddsp	r12,sp[0xc]
80004d06:	58 0c       	cp.w	r12,0
80004d08:	c1 d0       	breq	80004d42 <_vfprintf_r+0x1436>
80004d0a:	10 36       	cp.w	r6,r8
80004d0c:	c0 64       	brge	80004d18 <_vfprintf_r+0x140c>
80004d0e:	fa cb f9 44 	sub	r11,sp,-1724
80004d12:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d16:	c1 f8       	rjmp	80004d54 <_vfprintf_r+0x1448>
80004d18:	fa c8 f9 50 	sub	r8,sp,-1712
80004d1c:	1a d8       	st.w	--sp,r8
80004d1e:	fa c8 fa b8 	sub	r8,sp,-1352
80004d22:	1a d8       	st.w	--sp,r8
80004d24:	fa c8 fb b4 	sub	r8,sp,-1100
80004d28:	1a d8       	st.w	--sp,r8
80004d2a:	fa c8 f9 40 	sub	r8,sp,-1728
80004d2e:	fa c9 ff b4 	sub	r9,sp,-76
80004d32:	04 9a       	mov	r10,r2
80004d34:	0c 9b       	mov	r11,r6
80004d36:	08 9c       	mov	r12,r4
80004d38:	fe b0 f4 52 	rcall	800035dc <get_arg>
80004d3c:	2f dd       	sub	sp,-12
80004d3e:	98 18       	ld.sh	r8,r12[0x2]
80004d40:	c2 78       	rjmp	80004d8e <_vfprintf_r+0x1482>
80004d42:	ee ca ff ff 	sub	r10,r7,-1
80004d46:	10 37       	cp.w	r7,r8
80004d48:	c0 a4       	brge	80004d5c <_vfprintf_r+0x1450>
80004d4a:	fa c9 f9 44 	sub	r9,sp,-1724
80004d4e:	14 97       	mov	r7,r10
80004d50:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d54:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004d58:	c1 b8       	rjmp	80004d8e <_vfprintf_r+0x1482>
80004d5a:	d7 03       	nop
80004d5c:	41 09       	lddsp	r9,sp[0x40]
80004d5e:	59 f8       	cp.w	r8,31
80004d60:	e0 89 00 13 	brgt	80004d86 <_vfprintf_r+0x147a>
80004d64:	f2 cb ff fc 	sub	r11,r9,-4
80004d68:	51 0b       	stdsp	sp[0x40],r11
80004d6a:	72 09       	ld.w	r9,r9[0x0]
80004d6c:	fa c6 f9 44 	sub	r6,sp,-1724
80004d70:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004d74:	2f f8       	sub	r8,-1
80004d76:	f7 49 fd 88 	st.w	r11[-632],r9
80004d7a:	fb 48 06 b4 	st.w	sp[1716],r8
80004d7e:	14 97       	mov	r7,r10
80004d80:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004d84:	c0 58       	rjmp	80004d8e <_vfprintf_r+0x1482>
80004d86:	92 18       	ld.sh	r8,r9[0x2]
80004d88:	14 97       	mov	r7,r10
80004d8a:	2f c9       	sub	r9,-4
80004d8c:	51 09       	stdsp	sp[0x40],r9
80004d8e:	5c 78       	castu.h	r8
80004d90:	50 18       	stdsp	sp[0x4],r8
80004d92:	c4 68       	rjmp	80004e1e <_vfprintf_r+0x1512>
80004d94:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d98:	40 3c       	lddsp	r12,sp[0xc]
80004d9a:	58 0c       	cp.w	r12,0
80004d9c:	c1 d0       	breq	80004dd6 <_vfprintf_r+0x14ca>
80004d9e:	10 36       	cp.w	r6,r8
80004da0:	c0 64       	brge	80004dac <_vfprintf_r+0x14a0>
80004da2:	fa cb f9 44 	sub	r11,sp,-1724
80004da6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004daa:	c1 f8       	rjmp	80004de8 <_vfprintf_r+0x14dc>
80004dac:	fa c8 f9 50 	sub	r8,sp,-1712
80004db0:	1a d8       	st.w	--sp,r8
80004db2:	fa c8 fa b8 	sub	r8,sp,-1352
80004db6:	0c 9b       	mov	r11,r6
80004db8:	1a d8       	st.w	--sp,r8
80004dba:	fa c8 fb b4 	sub	r8,sp,-1100
80004dbe:	04 9a       	mov	r10,r2
80004dc0:	1a d8       	st.w	--sp,r8
80004dc2:	08 9c       	mov	r12,r4
80004dc4:	fa c8 f9 40 	sub	r8,sp,-1728
80004dc8:	fa c9 ff b4 	sub	r9,sp,-76
80004dcc:	fe b0 f4 08 	rcall	800035dc <get_arg>
80004dd0:	2f dd       	sub	sp,-12
80004dd2:	78 0b       	ld.w	r11,r12[0x0]
80004dd4:	c2 48       	rjmp	80004e1c <_vfprintf_r+0x1510>
80004dd6:	ee ca ff ff 	sub	r10,r7,-1
80004dda:	10 37       	cp.w	r7,r8
80004ddc:	c0 94       	brge	80004dee <_vfprintf_r+0x14e2>
80004dde:	fa c9 f9 44 	sub	r9,sp,-1724
80004de2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004de6:	14 97       	mov	r7,r10
80004de8:	ec fb fd 88 	ld.w	r11,r6[-632]
80004dec:	c1 88       	rjmp	80004e1c <_vfprintf_r+0x1510>
80004dee:	41 09       	lddsp	r9,sp[0x40]
80004df0:	59 f8       	cp.w	r8,31
80004df2:	e0 89 00 11 	brgt	80004e14 <_vfprintf_r+0x1508>
80004df6:	f2 cb ff fc 	sub	r11,r9,-4
80004dfa:	51 0b       	stdsp	sp[0x40],r11
80004dfc:	fa c6 f9 44 	sub	r6,sp,-1724
80004e00:	72 0b       	ld.w	r11,r9[0x0]
80004e02:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e06:	f3 4b fd 88 	st.w	r9[-632],r11
80004e0a:	2f f8       	sub	r8,-1
80004e0c:	14 97       	mov	r7,r10
80004e0e:	fb 48 06 b4 	st.w	sp[1716],r8
80004e12:	c0 58       	rjmp	80004e1c <_vfprintf_r+0x1510>
80004e14:	72 0b       	ld.w	r11,r9[0x0]
80004e16:	14 97       	mov	r7,r10
80004e18:	2f c9       	sub	r9,-4
80004e1a:	51 09       	stdsp	sp[0x40],r9
80004e1c:	50 1b       	stdsp	sp[0x4],r11
80004e1e:	30 0e       	mov	lr,0
80004e20:	50 0e       	stdsp	sp[0x0],lr
80004e22:	40 08       	lddsp	r8,sp[0x0]
80004e24:	40 1c       	lddsp	r12,sp[0x4]
80004e26:	18 48       	or	r8,r12
80004e28:	5f 19       	srne	r9
80004e2a:	0a 98       	mov	r8,r5
80004e2c:	eb e9 00 09 	and	r9,r5,r9
80004e30:	a1 b8       	sbr	r8,0x1
80004e32:	58 09       	cp.w	r9,0
80004e34:	c0 70       	breq	80004e42 <_vfprintf_r+0x1536>
80004e36:	10 95       	mov	r5,r8
80004e38:	fb 60 06 b9 	st.b	sp[1721],r0
80004e3c:	33 08       	mov	r8,48
80004e3e:	fb 68 06 b8 	st.b	sp[1720],r8
80004e42:	30 28       	mov	r8,2
80004e44:	30 09       	mov	r9,0
80004e46:	fb 69 06 bb 	st.b	sp[1723],r9
80004e4a:	0a 99       	mov	r9,r5
80004e4c:	a7 d9       	cbr	r9,0x7
80004e4e:	40 2b       	lddsp	r11,sp[0x8]
80004e50:	40 16       	lddsp	r6,sp[0x4]
80004e52:	58 0b       	cp.w	r11,0
80004e54:	5f 1a       	srne	r10
80004e56:	f2 05 17 40 	movge	r5,r9
80004e5a:	fa c2 f9 78 	sub	r2,sp,-1672
80004e5e:	40 09       	lddsp	r9,sp[0x0]
80004e60:	0c 49       	or	r9,r6
80004e62:	5f 19       	srne	r9
80004e64:	f5 e9 10 09 	or	r9,r10,r9
80004e68:	c5 c0       	breq	80004f20 <_vfprintf_r+0x1614>
80004e6a:	30 19       	mov	r9,1
80004e6c:	f2 08 18 00 	cp.b	r8,r9
80004e70:	c0 60       	breq	80004e7c <_vfprintf_r+0x1570>
80004e72:	30 29       	mov	r9,2
80004e74:	f2 08 18 00 	cp.b	r8,r9
80004e78:	c0 41       	brne	80004e80 <_vfprintf_r+0x1574>
80004e7a:	c3 c8       	rjmp	80004ef2 <_vfprintf_r+0x15e6>
80004e7c:	04 96       	mov	r6,r2
80004e7e:	c3 08       	rjmp	80004ede <_vfprintf_r+0x15d2>
80004e80:	04 96       	mov	r6,r2
80004e82:	fa e8 00 00 	ld.d	r8,sp[0]
80004e86:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004e8a:	2d 0a       	sub	r10,-48
80004e8c:	0c fa       	st.b	--r6,r10
80004e8e:	f0 0b 16 03 	lsr	r11,r8,0x3
80004e92:	f2 0c 16 03 	lsr	r12,r9,0x3
80004e96:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004e9a:	18 99       	mov	r9,r12
80004e9c:	16 98       	mov	r8,r11
80004e9e:	58 08       	cp.w	r8,0
80004ea0:	5c 29       	cpc	r9
80004ea2:	cf 21       	brne	80004e86 <_vfprintf_r+0x157a>
80004ea4:	fa e9 00 00 	st.d	sp[0],r8
80004ea8:	ed b5 00 00 	bld	r5,0x0
80004eac:	c4 51       	brne	80004f36 <_vfprintf_r+0x162a>
80004eae:	33 09       	mov	r9,48
80004eb0:	f2 0a 18 00 	cp.b	r10,r9
80004eb4:	c4 10       	breq	80004f36 <_vfprintf_r+0x162a>
80004eb6:	0c f9       	st.b	--r6,r9
80004eb8:	c3 f8       	rjmp	80004f36 <_vfprintf_r+0x162a>
80004eba:	fa ea 00 00 	ld.d	r10,sp[0]
80004ebe:	30 a8       	mov	r8,10
80004ec0:	30 09       	mov	r9,0
80004ec2:	e0 a0 1e 31 	rcall	80008b24 <__avr32_umod64>
80004ec6:	30 a8       	mov	r8,10
80004ec8:	2d 0a       	sub	r10,-48
80004eca:	30 09       	mov	r9,0
80004ecc:	ac 8a       	st.b	r6[0x0],r10
80004ece:	fa ea 00 00 	ld.d	r10,sp[0]
80004ed2:	e0 a0 1c f7 	rcall	800088c0 <__avr32_udiv64>
80004ed6:	16 99       	mov	r9,r11
80004ed8:	14 98       	mov	r8,r10
80004eda:	fa e9 00 00 	st.d	sp[0],r8
80004ede:	20 16       	sub	r6,1
80004ee0:	fa ea 00 00 	ld.d	r10,sp[0]
80004ee4:	58 9a       	cp.w	r10,9
80004ee6:	5c 2b       	cpc	r11
80004ee8:	fe 9b ff e9 	brhi	80004eba <_vfprintf_r+0x15ae>
80004eec:	1b f8       	ld.ub	r8,sp[0x7]
80004eee:	2d 08       	sub	r8,-48
80004ef0:	c2 08       	rjmp	80004f30 <_vfprintf_r+0x1624>
80004ef2:	04 96       	mov	r6,r2
80004ef4:	fa e8 00 00 	ld.d	r8,sp[0]
80004ef8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004efc:	40 de       	lddsp	lr,sp[0x34]
80004efe:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004f02:	0c fa       	st.b	--r6,r10
80004f04:	f2 0b 16 04 	lsr	r11,r9,0x4
80004f08:	f0 0a 16 04 	lsr	r10,r8,0x4
80004f0c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004f10:	16 99       	mov	r9,r11
80004f12:	14 98       	mov	r8,r10
80004f14:	58 08       	cp.w	r8,0
80004f16:	5c 29       	cpc	r9
80004f18:	cf 01       	brne	80004ef8 <_vfprintf_r+0x15ec>
80004f1a:	fa e9 00 00 	st.d	sp[0],r8
80004f1e:	c0 c8       	rjmp	80004f36 <_vfprintf_r+0x162a>
80004f20:	58 08       	cp.w	r8,0
80004f22:	c0 91       	brne	80004f34 <_vfprintf_r+0x1628>
80004f24:	ed b5 00 00 	bld	r5,0x0
80004f28:	c0 61       	brne	80004f34 <_vfprintf_r+0x1628>
80004f2a:	fa c6 f9 79 	sub	r6,sp,-1671
80004f2e:	33 08       	mov	r8,48
80004f30:	ac 88       	st.b	r6[0x0],r8
80004f32:	c0 28       	rjmp	80004f36 <_vfprintf_r+0x162a>
80004f34:	04 96       	mov	r6,r2
80004f36:	0c 12       	sub	r2,r6
80004f38:	c1 c8       	rjmp	80004f70 <_vfprintf_r+0x1664>
80004f3a:	50 a7       	stdsp	sp[0x28],r7
80004f3c:	50 80       	stdsp	sp[0x20],r0
80004f3e:	40 93       	lddsp	r3,sp[0x24]
80004f40:	0c 97       	mov	r7,r6
80004f42:	10 90       	mov	r0,r8
80004f44:	04 94       	mov	r4,r2
80004f46:	40 41       	lddsp	r1,sp[0x10]
80004f48:	58 08       	cp.w	r8,0
80004f4a:	e0 80 04 4f 	breq	800057e8 <_vfprintf_r+0x1edc>
80004f4e:	fb 68 06 60 	st.b	sp[1632],r8
80004f52:	30 0c       	mov	r12,0
80004f54:	30 08       	mov	r8,0
80004f56:	30 12       	mov	r2,1
80004f58:	fb 68 06 bb 	st.b	sp[1723],r8
80004f5c:	50 2c       	stdsp	sp[0x8],r12
80004f5e:	fa c6 f9 a0 	sub	r6,sp,-1632
80004f62:	c0 78       	rjmp	80004f70 <_vfprintf_r+0x1664>
80004f64:	30 0b       	mov	r11,0
80004f66:	50 2b       	stdsp	sp[0x8],r11
80004f68:	c0 48       	rjmp	80004f70 <_vfprintf_r+0x1664>
80004f6a:	40 22       	lddsp	r2,sp[0x8]
80004f6c:	30 0a       	mov	r10,0
80004f6e:	50 2a       	stdsp	sp[0x8],r10
80004f70:	40 29       	lddsp	r9,sp[0x8]
80004f72:	e4 09 0c 49 	max	r9,r2,r9
80004f76:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004f7a:	50 39       	stdsp	sp[0xc],r9
80004f7c:	0a 9e       	mov	lr,r5
80004f7e:	30 09       	mov	r9,0
80004f80:	e2 1e 00 02 	andl	lr,0x2,COH
80004f84:	f2 08 18 00 	cp.b	r8,r9
80004f88:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004f8c:	f7 b8 01 ff 	subne	r8,-1
80004f90:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004f94:	0a 9b       	mov	r11,r5
80004f96:	58 0e       	cp.w	lr,0
80004f98:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004f9c:	f7 bc 01 fe 	subne	r12,-2
80004fa0:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004fa4:	e2 1b 00 84 	andl	r11,0x84,COH
80004fa8:	50 fe       	stdsp	sp[0x3c],lr
80004faa:	50 9b       	stdsp	sp[0x24],r11
80004fac:	c4 71       	brne	8000503a <_vfprintf_r+0x172e>
80004fae:	40 8a       	lddsp	r10,sp[0x20]
80004fb0:	40 39       	lddsp	r9,sp[0xc]
80004fb2:	12 1a       	sub	r10,r9
80004fb4:	50 4a       	stdsp	sp[0x10],r10
80004fb6:	58 0a       	cp.w	r10,0
80004fb8:	e0 89 00 20 	brgt	80004ff8 <_vfprintf_r+0x16ec>
80004fbc:	c3 f8       	rjmp	8000503a <_vfprintf_r+0x172e>
80004fbe:	2f 09       	sub	r9,-16
80004fc0:	2f f8       	sub	r8,-1
80004fc2:	fe ce a2 b2 	sub	lr,pc,-23886
80004fc6:	31 0c       	mov	r12,16
80004fc8:	fb 49 06 90 	st.w	sp[1680],r9
80004fcc:	87 0e       	st.w	r3[0x0],lr
80004fce:	87 1c       	st.w	r3[0x4],r12
80004fd0:	fb 48 06 8c 	st.w	sp[1676],r8
80004fd4:	58 78       	cp.w	r8,7
80004fd6:	e0 89 00 04 	brgt	80004fde <_vfprintf_r+0x16d2>
80004fda:	2f 83       	sub	r3,-8
80004fdc:	c0 b8       	rjmp	80004ff2 <_vfprintf_r+0x16e6>
80004fde:	fa ca f9 78 	sub	r10,sp,-1672
80004fe2:	02 9b       	mov	r11,r1
80004fe4:	08 9c       	mov	r12,r4
80004fe6:	fe b0 f4 85 	rcall	800038f0 <__sprint_r>
80004fea:	e0 81 04 10 	brne	8000580a <_vfprintf_r+0x1efe>
80004fee:	fa c3 f9 e0 	sub	r3,sp,-1568
80004ff2:	40 4b       	lddsp	r11,sp[0x10]
80004ff4:	21 0b       	sub	r11,16
80004ff6:	50 4b       	stdsp	sp[0x10],r11
80004ff8:	fa f9 06 90 	ld.w	r9,sp[1680]
80004ffc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005000:	fe ca a2 f0 	sub	r10,pc,-23824
80005004:	40 4e       	lddsp	lr,sp[0x10]
80005006:	59 0e       	cp.w	lr,16
80005008:	fe 99 ff db 	brgt	80004fbe <_vfprintf_r+0x16b2>
8000500c:	1c 09       	add	r9,lr
8000500e:	2f f8       	sub	r8,-1
80005010:	87 0a       	st.w	r3[0x0],r10
80005012:	fb 49 06 90 	st.w	sp[1680],r9
80005016:	87 1e       	st.w	r3[0x4],lr
80005018:	fb 48 06 8c 	st.w	sp[1676],r8
8000501c:	58 78       	cp.w	r8,7
8000501e:	e0 89 00 04 	brgt	80005026 <_vfprintf_r+0x171a>
80005022:	2f 83       	sub	r3,-8
80005024:	c0 b8       	rjmp	8000503a <_vfprintf_r+0x172e>
80005026:	fa ca f9 78 	sub	r10,sp,-1672
8000502a:	02 9b       	mov	r11,r1
8000502c:	08 9c       	mov	r12,r4
8000502e:	fe b0 f4 61 	rcall	800038f0 <__sprint_r>
80005032:	e0 81 03 ec 	brne	8000580a <_vfprintf_r+0x1efe>
80005036:	fa c3 f9 e0 	sub	r3,sp,-1568
8000503a:	30 09       	mov	r9,0
8000503c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005040:	f2 08 18 00 	cp.b	r8,r9
80005044:	c1 f0       	breq	80005082 <_vfprintf_r+0x1776>
80005046:	fa f8 06 90 	ld.w	r8,sp[1680]
8000504a:	fa c9 f9 45 	sub	r9,sp,-1723
8000504e:	2f f8       	sub	r8,-1
80005050:	87 09       	st.w	r3[0x0],r9
80005052:	fb 48 06 90 	st.w	sp[1680],r8
80005056:	30 19       	mov	r9,1
80005058:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000505c:	87 19       	st.w	r3[0x4],r9
8000505e:	2f f8       	sub	r8,-1
80005060:	fb 48 06 8c 	st.w	sp[1676],r8
80005064:	58 78       	cp.w	r8,7
80005066:	e0 89 00 04 	brgt	8000506e <_vfprintf_r+0x1762>
8000506a:	2f 83       	sub	r3,-8
8000506c:	c0 b8       	rjmp	80005082 <_vfprintf_r+0x1776>
8000506e:	fa ca f9 78 	sub	r10,sp,-1672
80005072:	02 9b       	mov	r11,r1
80005074:	08 9c       	mov	r12,r4
80005076:	fe b0 f4 3d 	rcall	800038f0 <__sprint_r>
8000507a:	e0 81 03 c8 	brne	8000580a <_vfprintf_r+0x1efe>
8000507e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005082:	40 fc       	lddsp	r12,sp[0x3c]
80005084:	58 0c       	cp.w	r12,0
80005086:	c1 f0       	breq	800050c4 <_vfprintf_r+0x17b8>
80005088:	fa f8 06 90 	ld.w	r8,sp[1680]
8000508c:	fa c9 f9 48 	sub	r9,sp,-1720
80005090:	2f e8       	sub	r8,-2
80005092:	87 09       	st.w	r3[0x0],r9
80005094:	fb 48 06 90 	st.w	sp[1680],r8
80005098:	30 29       	mov	r9,2
8000509a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000509e:	87 19       	st.w	r3[0x4],r9
800050a0:	2f f8       	sub	r8,-1
800050a2:	fb 48 06 8c 	st.w	sp[1676],r8
800050a6:	58 78       	cp.w	r8,7
800050a8:	e0 89 00 04 	brgt	800050b0 <_vfprintf_r+0x17a4>
800050ac:	2f 83       	sub	r3,-8
800050ae:	c0 b8       	rjmp	800050c4 <_vfprintf_r+0x17b8>
800050b0:	fa ca f9 78 	sub	r10,sp,-1672
800050b4:	02 9b       	mov	r11,r1
800050b6:	08 9c       	mov	r12,r4
800050b8:	fe b0 f4 1c 	rcall	800038f0 <__sprint_r>
800050bc:	e0 81 03 a7 	brne	8000580a <_vfprintf_r+0x1efe>
800050c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800050c4:	40 9b       	lddsp	r11,sp[0x24]
800050c6:	e0 4b 00 80 	cp.w	r11,128
800050ca:	c4 71       	brne	80005158 <_vfprintf_r+0x184c>
800050cc:	40 8a       	lddsp	r10,sp[0x20]
800050ce:	40 39       	lddsp	r9,sp[0xc]
800050d0:	12 1a       	sub	r10,r9
800050d2:	50 4a       	stdsp	sp[0x10],r10
800050d4:	58 0a       	cp.w	r10,0
800050d6:	e0 89 00 20 	brgt	80005116 <_vfprintf_r+0x180a>
800050da:	c3 f8       	rjmp	80005158 <_vfprintf_r+0x184c>
800050dc:	2f 09       	sub	r9,-16
800050de:	2f f8       	sub	r8,-1
800050e0:	fe ce a3 c0 	sub	lr,pc,-23616
800050e4:	31 0c       	mov	r12,16
800050e6:	fb 49 06 90 	st.w	sp[1680],r9
800050ea:	87 0e       	st.w	r3[0x0],lr
800050ec:	87 1c       	st.w	r3[0x4],r12
800050ee:	fb 48 06 8c 	st.w	sp[1676],r8
800050f2:	58 78       	cp.w	r8,7
800050f4:	e0 89 00 04 	brgt	800050fc <_vfprintf_r+0x17f0>
800050f8:	2f 83       	sub	r3,-8
800050fa:	c0 b8       	rjmp	80005110 <_vfprintf_r+0x1804>
800050fc:	fa ca f9 78 	sub	r10,sp,-1672
80005100:	02 9b       	mov	r11,r1
80005102:	08 9c       	mov	r12,r4
80005104:	fe b0 f3 f6 	rcall	800038f0 <__sprint_r>
80005108:	e0 81 03 81 	brne	8000580a <_vfprintf_r+0x1efe>
8000510c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005110:	40 4b       	lddsp	r11,sp[0x10]
80005112:	21 0b       	sub	r11,16
80005114:	50 4b       	stdsp	sp[0x10],r11
80005116:	fa f9 06 90 	ld.w	r9,sp[1680]
8000511a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000511e:	fe ca a3 fe 	sub	r10,pc,-23554
80005122:	40 4e       	lddsp	lr,sp[0x10]
80005124:	59 0e       	cp.w	lr,16
80005126:	fe 99 ff db 	brgt	800050dc <_vfprintf_r+0x17d0>
8000512a:	1c 09       	add	r9,lr
8000512c:	2f f8       	sub	r8,-1
8000512e:	87 0a       	st.w	r3[0x0],r10
80005130:	fb 49 06 90 	st.w	sp[1680],r9
80005134:	87 1e       	st.w	r3[0x4],lr
80005136:	fb 48 06 8c 	st.w	sp[1676],r8
8000513a:	58 78       	cp.w	r8,7
8000513c:	e0 89 00 04 	brgt	80005144 <_vfprintf_r+0x1838>
80005140:	2f 83       	sub	r3,-8
80005142:	c0 b8       	rjmp	80005158 <_vfprintf_r+0x184c>
80005144:	fa ca f9 78 	sub	r10,sp,-1672
80005148:	02 9b       	mov	r11,r1
8000514a:	08 9c       	mov	r12,r4
8000514c:	fe b0 f3 d2 	rcall	800038f0 <__sprint_r>
80005150:	e0 81 03 5d 	brne	8000580a <_vfprintf_r+0x1efe>
80005154:	fa c3 f9 e0 	sub	r3,sp,-1568
80005158:	40 2c       	lddsp	r12,sp[0x8]
8000515a:	04 1c       	sub	r12,r2
8000515c:	50 2c       	stdsp	sp[0x8],r12
8000515e:	58 0c       	cp.w	r12,0
80005160:	e0 89 00 20 	brgt	800051a0 <_vfprintf_r+0x1894>
80005164:	c3 f8       	rjmp	800051e2 <_vfprintf_r+0x18d6>
80005166:	2f 09       	sub	r9,-16
80005168:	2f f8       	sub	r8,-1
8000516a:	fe cb a4 4a 	sub	r11,pc,-23478
8000516e:	31 0a       	mov	r10,16
80005170:	fb 49 06 90 	st.w	sp[1680],r9
80005174:	87 0b       	st.w	r3[0x0],r11
80005176:	87 1a       	st.w	r3[0x4],r10
80005178:	fb 48 06 8c 	st.w	sp[1676],r8
8000517c:	58 78       	cp.w	r8,7
8000517e:	e0 89 00 04 	brgt	80005186 <_vfprintf_r+0x187a>
80005182:	2f 83       	sub	r3,-8
80005184:	c0 b8       	rjmp	8000519a <_vfprintf_r+0x188e>
80005186:	fa ca f9 78 	sub	r10,sp,-1672
8000518a:	02 9b       	mov	r11,r1
8000518c:	08 9c       	mov	r12,r4
8000518e:	fe b0 f3 b1 	rcall	800038f0 <__sprint_r>
80005192:	e0 81 03 3c 	brne	8000580a <_vfprintf_r+0x1efe>
80005196:	fa c3 f9 e0 	sub	r3,sp,-1568
8000519a:	40 29       	lddsp	r9,sp[0x8]
8000519c:	21 09       	sub	r9,16
8000519e:	50 29       	stdsp	sp[0x8],r9
800051a0:	fa f9 06 90 	ld.w	r9,sp[1680]
800051a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051a8:	fe ca a4 88 	sub	r10,pc,-23416
800051ac:	40 2e       	lddsp	lr,sp[0x8]
800051ae:	59 0e       	cp.w	lr,16
800051b0:	fe 99 ff db 	brgt	80005166 <_vfprintf_r+0x185a>
800051b4:	1c 09       	add	r9,lr
800051b6:	2f f8       	sub	r8,-1
800051b8:	87 0a       	st.w	r3[0x0],r10
800051ba:	fb 49 06 90 	st.w	sp[1680],r9
800051be:	87 1e       	st.w	r3[0x4],lr
800051c0:	fb 48 06 8c 	st.w	sp[1676],r8
800051c4:	58 78       	cp.w	r8,7
800051c6:	e0 89 00 04 	brgt	800051ce <_vfprintf_r+0x18c2>
800051ca:	2f 83       	sub	r3,-8
800051cc:	c0 b8       	rjmp	800051e2 <_vfprintf_r+0x18d6>
800051ce:	fa ca f9 78 	sub	r10,sp,-1672
800051d2:	02 9b       	mov	r11,r1
800051d4:	08 9c       	mov	r12,r4
800051d6:	fe b0 f3 8d 	rcall	800038f0 <__sprint_r>
800051da:	e0 81 03 18 	brne	8000580a <_vfprintf_r+0x1efe>
800051de:	fa c3 f9 e0 	sub	r3,sp,-1568
800051e2:	ed b5 00 08 	bld	r5,0x8
800051e6:	c0 b0       	breq	800051fc <_vfprintf_r+0x18f0>
800051e8:	fa f8 06 90 	ld.w	r8,sp[1680]
800051ec:	87 12       	st.w	r3[0x4],r2
800051ee:	87 06       	st.w	r3[0x0],r6
800051f0:	f0 02 00 02 	add	r2,r8,r2
800051f4:	fb 42 06 90 	st.w	sp[1680],r2
800051f8:	e0 8f 01 d4 	bral	800055a0 <_vfprintf_r+0x1c94>
800051fc:	e0 40 00 65 	cp.w	r0,101
80005200:	e0 8a 01 d6 	brle	800055ac <_vfprintf_r+0x1ca0>
80005204:	30 08       	mov	r8,0
80005206:	30 09       	mov	r9,0
80005208:	40 5b       	lddsp	r11,sp[0x14]
8000520a:	40 7a       	lddsp	r10,sp[0x1c]
8000520c:	e0 a0 19 53 	rcall	800084b2 <__avr32_f64_cmp_eq>
80005210:	c7 90       	breq	80005302 <_vfprintf_r+0x19f6>
80005212:	fa f8 06 90 	ld.w	r8,sp[1680]
80005216:	fe c9 a5 0a 	sub	r9,pc,-23286
8000521a:	2f f8       	sub	r8,-1
8000521c:	87 09       	st.w	r3[0x0],r9
8000521e:	fb 48 06 90 	st.w	sp[1680],r8
80005222:	30 19       	mov	r9,1
80005224:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005228:	87 19       	st.w	r3[0x4],r9
8000522a:	2f f8       	sub	r8,-1
8000522c:	fb 48 06 8c 	st.w	sp[1676],r8
80005230:	58 78       	cp.w	r8,7
80005232:	e0 89 00 05 	brgt	8000523c <_vfprintf_r+0x1930>
80005236:	2f 83       	sub	r3,-8
80005238:	c0 c8       	rjmp	80005250 <_vfprintf_r+0x1944>
8000523a:	d7 03       	nop
8000523c:	fa ca f9 78 	sub	r10,sp,-1672
80005240:	02 9b       	mov	r11,r1
80005242:	08 9c       	mov	r12,r4
80005244:	fe b0 f3 56 	rcall	800038f0 <__sprint_r>
80005248:	e0 81 02 e1 	brne	8000580a <_vfprintf_r+0x1efe>
8000524c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005250:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005254:	40 6c       	lddsp	r12,sp[0x18]
80005256:	18 38       	cp.w	r8,r12
80005258:	c0 55       	brlt	80005262 <_vfprintf_r+0x1956>
8000525a:	ed b5 00 00 	bld	r5,0x0
8000525e:	e0 81 02 6b 	brne	80005734 <_vfprintf_r+0x1e28>
80005262:	fa f8 06 90 	ld.w	r8,sp[1680]
80005266:	2f f8       	sub	r8,-1
80005268:	40 cb       	lddsp	r11,sp[0x30]
8000526a:	fb 48 06 90 	st.w	sp[1680],r8
8000526e:	30 19       	mov	r9,1
80005270:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005274:	87 0b       	st.w	r3[0x0],r11
80005276:	2f f8       	sub	r8,-1
80005278:	87 19       	st.w	r3[0x4],r9
8000527a:	fb 48 06 8c 	st.w	sp[1676],r8
8000527e:	58 78       	cp.w	r8,7
80005280:	e0 89 00 04 	brgt	80005288 <_vfprintf_r+0x197c>
80005284:	2f 83       	sub	r3,-8
80005286:	c0 b8       	rjmp	8000529c <_vfprintf_r+0x1990>
80005288:	fa ca f9 78 	sub	r10,sp,-1672
8000528c:	02 9b       	mov	r11,r1
8000528e:	08 9c       	mov	r12,r4
80005290:	fe b0 f3 30 	rcall	800038f0 <__sprint_r>
80005294:	e0 81 02 bb 	brne	8000580a <_vfprintf_r+0x1efe>
80005298:	fa c3 f9 e0 	sub	r3,sp,-1568
8000529c:	40 66       	lddsp	r6,sp[0x18]
8000529e:	20 16       	sub	r6,1
800052a0:	58 06       	cp.w	r6,0
800052a2:	e0 89 00 1d 	brgt	800052dc <_vfprintf_r+0x19d0>
800052a6:	e0 8f 02 47 	bral	80005734 <_vfprintf_r+0x1e28>
800052aa:	2f 09       	sub	r9,-16
800052ac:	2f f8       	sub	r8,-1
800052ae:	fb 49 06 90 	st.w	sp[1680],r9
800052b2:	87 02       	st.w	r3[0x0],r2
800052b4:	87 10       	st.w	r3[0x4],r0
800052b6:	fb 48 06 8c 	st.w	sp[1676],r8
800052ba:	58 78       	cp.w	r8,7
800052bc:	e0 89 00 04 	brgt	800052c4 <_vfprintf_r+0x19b8>
800052c0:	2f 83       	sub	r3,-8
800052c2:	c0 b8       	rjmp	800052d8 <_vfprintf_r+0x19cc>
800052c4:	fa ca f9 78 	sub	r10,sp,-1672
800052c8:	02 9b       	mov	r11,r1
800052ca:	08 9c       	mov	r12,r4
800052cc:	fe b0 f3 12 	rcall	800038f0 <__sprint_r>
800052d0:	e0 81 02 9d 	brne	8000580a <_vfprintf_r+0x1efe>
800052d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800052d8:	21 06       	sub	r6,16
800052da:	c0 48       	rjmp	800052e2 <_vfprintf_r+0x19d6>
800052dc:	fe c2 a5 bc 	sub	r2,pc,-23108
800052e0:	31 00       	mov	r0,16
800052e2:	fa f9 06 90 	ld.w	r9,sp[1680]
800052e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052ea:	fe ca a5 ca 	sub	r10,pc,-23094
800052ee:	59 06       	cp.w	r6,16
800052f0:	fe 99 ff dd 	brgt	800052aa <_vfprintf_r+0x199e>
800052f4:	0c 09       	add	r9,r6
800052f6:	87 0a       	st.w	r3[0x0],r10
800052f8:	fb 49 06 90 	st.w	sp[1680],r9
800052fc:	2f f8       	sub	r8,-1
800052fe:	87 16       	st.w	r3[0x4],r6
80005300:	c5 39       	rjmp	800055a6 <_vfprintf_r+0x1c9a>
80005302:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005306:	58 0a       	cp.w	r10,0
80005308:	e0 89 00 92 	brgt	8000542c <_vfprintf_r+0x1b20>
8000530c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005310:	fe c9 a6 04 	sub	r9,pc,-23036
80005314:	2f f8       	sub	r8,-1
80005316:	87 09       	st.w	r3[0x0],r9
80005318:	fb 48 06 90 	st.w	sp[1680],r8
8000531c:	30 19       	mov	r9,1
8000531e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005322:	87 19       	st.w	r3[0x4],r9
80005324:	2f f8       	sub	r8,-1
80005326:	fb 48 06 8c 	st.w	sp[1676],r8
8000532a:	58 78       	cp.w	r8,7
8000532c:	e0 89 00 04 	brgt	80005334 <_vfprintf_r+0x1a28>
80005330:	2f 83       	sub	r3,-8
80005332:	c0 b8       	rjmp	80005348 <_vfprintf_r+0x1a3c>
80005334:	fa ca f9 78 	sub	r10,sp,-1672
80005338:	02 9b       	mov	r11,r1
8000533a:	08 9c       	mov	r12,r4
8000533c:	fe b0 f2 da 	rcall	800038f0 <__sprint_r>
80005340:	e0 81 02 65 	brne	8000580a <_vfprintf_r+0x1efe>
80005344:	fa c3 f9 e0 	sub	r3,sp,-1568
80005348:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000534c:	58 08       	cp.w	r8,0
8000534e:	c0 81       	brne	8000535e <_vfprintf_r+0x1a52>
80005350:	40 6a       	lddsp	r10,sp[0x18]
80005352:	58 0a       	cp.w	r10,0
80005354:	c0 51       	brne	8000535e <_vfprintf_r+0x1a52>
80005356:	ed b5 00 00 	bld	r5,0x0
8000535a:	e0 81 01 ed 	brne	80005734 <_vfprintf_r+0x1e28>
8000535e:	40 c9       	lddsp	r9,sp[0x30]
80005360:	fa f8 06 90 	ld.w	r8,sp[1680]
80005364:	2f f8       	sub	r8,-1
80005366:	87 09       	st.w	r3[0x0],r9
80005368:	fb 48 06 90 	st.w	sp[1680],r8
8000536c:	30 19       	mov	r9,1
8000536e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005372:	87 19       	st.w	r3[0x4],r9
80005374:	2f f8       	sub	r8,-1
80005376:	fb 48 06 8c 	st.w	sp[1676],r8
8000537a:	58 78       	cp.w	r8,7
8000537c:	e0 89 00 04 	brgt	80005384 <_vfprintf_r+0x1a78>
80005380:	2f 83       	sub	r3,-8
80005382:	c0 b8       	rjmp	80005398 <_vfprintf_r+0x1a8c>
80005384:	fa ca f9 78 	sub	r10,sp,-1672
80005388:	02 9b       	mov	r11,r1
8000538a:	08 9c       	mov	r12,r4
8000538c:	fe b0 f2 b2 	rcall	800038f0 <__sprint_r>
80005390:	e0 81 02 3d 	brne	8000580a <_vfprintf_r+0x1efe>
80005394:	fa c3 f9 e0 	sub	r3,sp,-1568
80005398:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000539c:	5c 32       	neg	r2
8000539e:	58 02       	cp.w	r2,0
800053a0:	e0 89 00 1d 	brgt	800053da <_vfprintf_r+0x1ace>
800053a4:	c3 d8       	rjmp	8000541e <_vfprintf_r+0x1b12>
800053a6:	2f 09       	sub	r9,-16
800053a8:	2f f8       	sub	r8,-1
800053aa:	31 0e       	mov	lr,16
800053ac:	fb 49 06 90 	st.w	sp[1680],r9
800053b0:	87 00       	st.w	r3[0x0],r0
800053b2:	87 1e       	st.w	r3[0x4],lr
800053b4:	fb 48 06 8c 	st.w	sp[1676],r8
800053b8:	58 78       	cp.w	r8,7
800053ba:	e0 89 00 04 	brgt	800053c2 <_vfprintf_r+0x1ab6>
800053be:	2f 83       	sub	r3,-8
800053c0:	c0 b8       	rjmp	800053d6 <_vfprintf_r+0x1aca>
800053c2:	fa ca f9 78 	sub	r10,sp,-1672
800053c6:	02 9b       	mov	r11,r1
800053c8:	08 9c       	mov	r12,r4
800053ca:	fe b0 f2 93 	rcall	800038f0 <__sprint_r>
800053ce:	e0 81 02 1e 	brne	8000580a <_vfprintf_r+0x1efe>
800053d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800053d6:	21 02       	sub	r2,16
800053d8:	c0 38       	rjmp	800053de <_vfprintf_r+0x1ad2>
800053da:	fe c0 a6 ba 	sub	r0,pc,-22854
800053de:	fa f9 06 90 	ld.w	r9,sp[1680]
800053e2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053e6:	fe ca a6 c6 	sub	r10,pc,-22842
800053ea:	59 02       	cp.w	r2,16
800053ec:	fe 99 ff dd 	brgt	800053a6 <_vfprintf_r+0x1a9a>
800053f0:	04 09       	add	r9,r2
800053f2:	2f f8       	sub	r8,-1
800053f4:	87 0a       	st.w	r3[0x0],r10
800053f6:	fb 49 06 90 	st.w	sp[1680],r9
800053fa:	87 12       	st.w	r3[0x4],r2
800053fc:	fb 48 06 8c 	st.w	sp[1676],r8
80005400:	58 78       	cp.w	r8,7
80005402:	e0 89 00 04 	brgt	8000540a <_vfprintf_r+0x1afe>
80005406:	2f 83       	sub	r3,-8
80005408:	c0 b8       	rjmp	8000541e <_vfprintf_r+0x1b12>
8000540a:	fa ca f9 78 	sub	r10,sp,-1672
8000540e:	02 9b       	mov	r11,r1
80005410:	08 9c       	mov	r12,r4
80005412:	fe b0 f2 6f 	rcall	800038f0 <__sprint_r>
80005416:	e0 81 01 fa 	brne	8000580a <_vfprintf_r+0x1efe>
8000541a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000541e:	40 6c       	lddsp	r12,sp[0x18]
80005420:	fa f8 06 90 	ld.w	r8,sp[1680]
80005424:	87 06       	st.w	r3[0x0],r6
80005426:	87 1c       	st.w	r3[0x4],r12
80005428:	18 08       	add	r8,r12
8000542a:	cb 98       	rjmp	8000559c <_vfprintf_r+0x1c90>
8000542c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005430:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005434:	40 6b       	lddsp	r11,sp[0x18]
80005436:	16 3a       	cp.w	r10,r11
80005438:	c6 f5       	brlt	80005516 <_vfprintf_r+0x1c0a>
8000543a:	16 09       	add	r9,r11
8000543c:	2f f8       	sub	r8,-1
8000543e:	87 06       	st.w	r3[0x0],r6
80005440:	fb 49 06 90 	st.w	sp[1680],r9
80005444:	87 1b       	st.w	r3[0x4],r11
80005446:	fb 48 06 8c 	st.w	sp[1676],r8
8000544a:	58 78       	cp.w	r8,7
8000544c:	e0 89 00 04 	brgt	80005454 <_vfprintf_r+0x1b48>
80005450:	2f 83       	sub	r3,-8
80005452:	c0 b8       	rjmp	80005468 <_vfprintf_r+0x1b5c>
80005454:	fa ca f9 78 	sub	r10,sp,-1672
80005458:	02 9b       	mov	r11,r1
8000545a:	08 9c       	mov	r12,r4
8000545c:	fe b0 f2 4a 	rcall	800038f0 <__sprint_r>
80005460:	e0 81 01 d5 	brne	8000580a <_vfprintf_r+0x1efe>
80005464:	fa c3 f9 e0 	sub	r3,sp,-1568
80005468:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000546c:	40 6a       	lddsp	r10,sp[0x18]
8000546e:	14 16       	sub	r6,r10
80005470:	58 06       	cp.w	r6,0
80005472:	e0 89 00 1c 	brgt	800054aa <_vfprintf_r+0x1b9e>
80005476:	c3 d8       	rjmp	800054f0 <_vfprintf_r+0x1be4>
80005478:	2f 09       	sub	r9,-16
8000547a:	2f f8       	sub	r8,-1
8000547c:	fb 49 06 90 	st.w	sp[1680],r9
80005480:	87 02       	st.w	r3[0x0],r2
80005482:	87 10       	st.w	r3[0x4],r0
80005484:	fb 48 06 8c 	st.w	sp[1676],r8
80005488:	58 78       	cp.w	r8,7
8000548a:	e0 89 00 04 	brgt	80005492 <_vfprintf_r+0x1b86>
8000548e:	2f 83       	sub	r3,-8
80005490:	c0 b8       	rjmp	800054a6 <_vfprintf_r+0x1b9a>
80005492:	fa ca f9 78 	sub	r10,sp,-1672
80005496:	02 9b       	mov	r11,r1
80005498:	08 9c       	mov	r12,r4
8000549a:	fe b0 f2 2b 	rcall	800038f0 <__sprint_r>
8000549e:	e0 81 01 b6 	brne	8000580a <_vfprintf_r+0x1efe>
800054a2:	fa c3 f9 e0 	sub	r3,sp,-1568
800054a6:	21 06       	sub	r6,16
800054a8:	c0 48       	rjmp	800054b0 <_vfprintf_r+0x1ba4>
800054aa:	fe c2 a7 8a 	sub	r2,pc,-22646
800054ae:	31 00       	mov	r0,16
800054b0:	fa f9 06 90 	ld.w	r9,sp[1680]
800054b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054b8:	fe ca a7 98 	sub	r10,pc,-22632
800054bc:	59 06       	cp.w	r6,16
800054be:	fe 99 ff dd 	brgt	80005478 <_vfprintf_r+0x1b6c>
800054c2:	0c 09       	add	r9,r6
800054c4:	2f f8       	sub	r8,-1
800054c6:	87 0a       	st.w	r3[0x0],r10
800054c8:	fb 49 06 90 	st.w	sp[1680],r9
800054cc:	87 16       	st.w	r3[0x4],r6
800054ce:	fb 48 06 8c 	st.w	sp[1676],r8
800054d2:	58 78       	cp.w	r8,7
800054d4:	e0 89 00 04 	brgt	800054dc <_vfprintf_r+0x1bd0>
800054d8:	2f 83       	sub	r3,-8
800054da:	c0 b8       	rjmp	800054f0 <_vfprintf_r+0x1be4>
800054dc:	fa ca f9 78 	sub	r10,sp,-1672
800054e0:	02 9b       	mov	r11,r1
800054e2:	08 9c       	mov	r12,r4
800054e4:	fe b0 f2 06 	rcall	800038f0 <__sprint_r>
800054e8:	e0 81 01 91 	brne	8000580a <_vfprintf_r+0x1efe>
800054ec:	fa c3 f9 e0 	sub	r3,sp,-1568
800054f0:	ed b5 00 00 	bld	r5,0x0
800054f4:	e0 81 01 20 	brne	80005734 <_vfprintf_r+0x1e28>
800054f8:	40 c9       	lddsp	r9,sp[0x30]
800054fa:	fa f8 06 90 	ld.w	r8,sp[1680]
800054fe:	2f f8       	sub	r8,-1
80005500:	87 09       	st.w	r3[0x0],r9
80005502:	fb 48 06 90 	st.w	sp[1680],r8
80005506:	30 19       	mov	r9,1
80005508:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000550c:	87 19       	st.w	r3[0x4],r9
8000550e:	2f f8       	sub	r8,-1
80005510:	fb 48 06 8c 	st.w	sp[1676],r8
80005514:	c0 29       	rjmp	80005718 <_vfprintf_r+0x1e0c>
80005516:	14 09       	add	r9,r10
80005518:	2f f8       	sub	r8,-1
8000551a:	fb 49 06 90 	st.w	sp[1680],r9
8000551e:	87 06       	st.w	r3[0x0],r6
80005520:	87 1a       	st.w	r3[0x4],r10
80005522:	fb 48 06 8c 	st.w	sp[1676],r8
80005526:	58 78       	cp.w	r8,7
80005528:	e0 89 00 04 	brgt	80005530 <_vfprintf_r+0x1c24>
8000552c:	2f 83       	sub	r3,-8
8000552e:	c0 b8       	rjmp	80005544 <_vfprintf_r+0x1c38>
80005530:	fa ca f9 78 	sub	r10,sp,-1672
80005534:	02 9b       	mov	r11,r1
80005536:	08 9c       	mov	r12,r4
80005538:	fe b0 f1 dc 	rcall	800038f0 <__sprint_r>
8000553c:	e0 81 01 67 	brne	8000580a <_vfprintf_r+0x1efe>
80005540:	fa c3 f9 e0 	sub	r3,sp,-1568
80005544:	40 c8       	lddsp	r8,sp[0x30]
80005546:	87 08       	st.w	r3[0x0],r8
80005548:	fa f8 06 90 	ld.w	r8,sp[1680]
8000554c:	2f f8       	sub	r8,-1
8000554e:	30 19       	mov	r9,1
80005550:	fb 48 06 90 	st.w	sp[1680],r8
80005554:	87 19       	st.w	r3[0x4],r9
80005556:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000555a:	2f f8       	sub	r8,-1
8000555c:	fb 48 06 8c 	st.w	sp[1676],r8
80005560:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005564:	58 78       	cp.w	r8,7
80005566:	e0 89 00 04 	brgt	8000556e <_vfprintf_r+0x1c62>
8000556a:	2f 83       	sub	r3,-8
8000556c:	c0 b8       	rjmp	80005582 <_vfprintf_r+0x1c76>
8000556e:	fa ca f9 78 	sub	r10,sp,-1672
80005572:	02 9b       	mov	r11,r1
80005574:	08 9c       	mov	r12,r4
80005576:	fe b0 f1 bd 	rcall	800038f0 <__sprint_r>
8000557a:	e0 81 01 48 	brne	8000580a <_vfprintf_r+0x1efe>
8000557e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005582:	04 06       	add	r6,r2
80005584:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005588:	87 06       	st.w	r3[0x0],r6
8000558a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000558e:	40 66       	lddsp	r6,sp[0x18]
80005590:	40 6e       	lddsp	lr,sp[0x18]
80005592:	10 16       	sub	r6,r8
80005594:	f2 08 01 08 	sub	r8,r9,r8
80005598:	87 16       	st.w	r3[0x4],r6
8000559a:	1c 08       	add	r8,lr
8000559c:	fb 48 06 90 	st.w	sp[1680],r8
800055a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055a4:	2f f8       	sub	r8,-1
800055a6:	fb 48 06 8c 	st.w	sp[1676],r8
800055aa:	cb 78       	rjmp	80005718 <_vfprintf_r+0x1e0c>
800055ac:	40 6c       	lddsp	r12,sp[0x18]
800055ae:	58 1c       	cp.w	r12,1
800055b0:	e0 89 00 06 	brgt	800055bc <_vfprintf_r+0x1cb0>
800055b4:	ed b5 00 00 	bld	r5,0x0
800055b8:	e0 81 00 85 	brne	800056c2 <_vfprintf_r+0x1db6>
800055bc:	fa f8 06 90 	ld.w	r8,sp[1680]
800055c0:	2f f8       	sub	r8,-1
800055c2:	30 19       	mov	r9,1
800055c4:	fb 48 06 90 	st.w	sp[1680],r8
800055c8:	87 06       	st.w	r3[0x0],r6
800055ca:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055ce:	87 19       	st.w	r3[0x4],r9
800055d0:	2f f8       	sub	r8,-1
800055d2:	fb 48 06 8c 	st.w	sp[1676],r8
800055d6:	58 78       	cp.w	r8,7
800055d8:	e0 89 00 04 	brgt	800055e0 <_vfprintf_r+0x1cd4>
800055dc:	2f 83       	sub	r3,-8
800055de:	c0 b8       	rjmp	800055f4 <_vfprintf_r+0x1ce8>
800055e0:	fa ca f9 78 	sub	r10,sp,-1672
800055e4:	02 9b       	mov	r11,r1
800055e6:	08 9c       	mov	r12,r4
800055e8:	fe b0 f1 84 	rcall	800038f0 <__sprint_r>
800055ec:	e0 81 01 0f 	brne	8000580a <_vfprintf_r+0x1efe>
800055f0:	fa c3 f9 e0 	sub	r3,sp,-1568
800055f4:	fa f8 06 90 	ld.w	r8,sp[1680]
800055f8:	2f f8       	sub	r8,-1
800055fa:	40 cb       	lddsp	r11,sp[0x30]
800055fc:	fb 48 06 90 	st.w	sp[1680],r8
80005600:	30 19       	mov	r9,1
80005602:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005606:	87 0b       	st.w	r3[0x0],r11
80005608:	2f f8       	sub	r8,-1
8000560a:	87 19       	st.w	r3[0x4],r9
8000560c:	fb 48 06 8c 	st.w	sp[1676],r8
80005610:	58 78       	cp.w	r8,7
80005612:	e0 89 00 05 	brgt	8000561c <_vfprintf_r+0x1d10>
80005616:	2f 83       	sub	r3,-8
80005618:	c0 c8       	rjmp	80005630 <_vfprintf_r+0x1d24>
8000561a:	d7 03       	nop
8000561c:	fa ca f9 78 	sub	r10,sp,-1672
80005620:	02 9b       	mov	r11,r1
80005622:	08 9c       	mov	r12,r4
80005624:	fe b0 f1 66 	rcall	800038f0 <__sprint_r>
80005628:	e0 81 00 f1 	brne	8000580a <_vfprintf_r+0x1efe>
8000562c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005630:	30 08       	mov	r8,0
80005632:	30 09       	mov	r9,0
80005634:	40 5b       	lddsp	r11,sp[0x14]
80005636:	40 7a       	lddsp	r10,sp[0x1c]
80005638:	e0 a0 17 3d 	rcall	800084b2 <__avr32_f64_cmp_eq>
8000563c:	40 68       	lddsp	r8,sp[0x18]
8000563e:	20 18       	sub	r8,1
80005640:	58 0c       	cp.w	r12,0
80005642:	c0 d1       	brne	8000565c <_vfprintf_r+0x1d50>
80005644:	2f f6       	sub	r6,-1
80005646:	87 18       	st.w	r3[0x4],r8
80005648:	87 06       	st.w	r3[0x0],r6
8000564a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000564e:	10 06       	add	r6,r8
80005650:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005654:	fb 46 06 90 	st.w	sp[1680],r6
80005658:	2f f8       	sub	r8,-1
8000565a:	c3 18       	rjmp	800056bc <_vfprintf_r+0x1db0>
8000565c:	10 96       	mov	r6,r8
8000565e:	58 08       	cp.w	r8,0
80005660:	e0 89 00 1c 	brgt	80005698 <_vfprintf_r+0x1d8c>
80005664:	c4 b8       	rjmp	800056fa <_vfprintf_r+0x1dee>
80005666:	2f 09       	sub	r9,-16
80005668:	2f f8       	sub	r8,-1
8000566a:	fb 49 06 90 	st.w	sp[1680],r9
8000566e:	87 02       	st.w	r3[0x0],r2
80005670:	87 10       	st.w	r3[0x4],r0
80005672:	fb 48 06 8c 	st.w	sp[1676],r8
80005676:	58 78       	cp.w	r8,7
80005678:	e0 89 00 04 	brgt	80005680 <_vfprintf_r+0x1d74>
8000567c:	2f 83       	sub	r3,-8
8000567e:	c0 b8       	rjmp	80005694 <_vfprintf_r+0x1d88>
80005680:	fa ca f9 78 	sub	r10,sp,-1672
80005684:	02 9b       	mov	r11,r1
80005686:	08 9c       	mov	r12,r4
80005688:	fe b0 f1 34 	rcall	800038f0 <__sprint_r>
8000568c:	e0 81 00 bf 	brne	8000580a <_vfprintf_r+0x1efe>
80005690:	fa c3 f9 e0 	sub	r3,sp,-1568
80005694:	21 06       	sub	r6,16
80005696:	c0 48       	rjmp	8000569e <_vfprintf_r+0x1d92>
80005698:	fe c2 a9 78 	sub	r2,pc,-22152
8000569c:	31 00       	mov	r0,16
8000569e:	fa f9 06 90 	ld.w	r9,sp[1680]
800056a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056a6:	fe ca a9 86 	sub	r10,pc,-22138
800056aa:	59 06       	cp.w	r6,16
800056ac:	fe 99 ff dd 	brgt	80005666 <_vfprintf_r+0x1d5a>
800056b0:	0c 09       	add	r9,r6
800056b2:	87 0a       	st.w	r3[0x0],r10
800056b4:	fb 49 06 90 	st.w	sp[1680],r9
800056b8:	2f f8       	sub	r8,-1
800056ba:	87 16       	st.w	r3[0x4],r6
800056bc:	fb 48 06 8c 	st.w	sp[1676],r8
800056c0:	c0 e8       	rjmp	800056dc <_vfprintf_r+0x1dd0>
800056c2:	fa f8 06 90 	ld.w	r8,sp[1680]
800056c6:	2f f8       	sub	r8,-1
800056c8:	30 19       	mov	r9,1
800056ca:	fb 48 06 90 	st.w	sp[1680],r8
800056ce:	87 06       	st.w	r3[0x0],r6
800056d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056d4:	87 19       	st.w	r3[0x4],r9
800056d6:	2f f8       	sub	r8,-1
800056d8:	fb 48 06 8c 	st.w	sp[1676],r8
800056dc:	58 78       	cp.w	r8,7
800056de:	e0 89 00 04 	brgt	800056e6 <_vfprintf_r+0x1dda>
800056e2:	2f 83       	sub	r3,-8
800056e4:	c0 b8       	rjmp	800056fa <_vfprintf_r+0x1dee>
800056e6:	fa ca f9 78 	sub	r10,sp,-1672
800056ea:	02 9b       	mov	r11,r1
800056ec:	08 9c       	mov	r12,r4
800056ee:	fe b0 f1 01 	rcall	800038f0 <__sprint_r>
800056f2:	e0 81 00 8c 	brne	8000580a <_vfprintf_r+0x1efe>
800056f6:	fa c3 f9 e0 	sub	r3,sp,-1568
800056fa:	40 ea       	lddsp	r10,sp[0x38]
800056fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005700:	14 08       	add	r8,r10
80005702:	fa c9 f9 64 	sub	r9,sp,-1692
80005706:	fb 48 06 90 	st.w	sp[1680],r8
8000570a:	87 1a       	st.w	r3[0x4],r10
8000570c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005710:	87 09       	st.w	r3[0x0],r9
80005712:	2f f8       	sub	r8,-1
80005714:	fb 48 06 8c 	st.w	sp[1676],r8
80005718:	58 78       	cp.w	r8,7
8000571a:	e0 89 00 04 	brgt	80005722 <_vfprintf_r+0x1e16>
8000571e:	2f 83       	sub	r3,-8
80005720:	c0 a8       	rjmp	80005734 <_vfprintf_r+0x1e28>
80005722:	fa ca f9 78 	sub	r10,sp,-1672
80005726:	02 9b       	mov	r11,r1
80005728:	08 9c       	mov	r12,r4
8000572a:	fe b0 f0 e3 	rcall	800038f0 <__sprint_r>
8000572e:	c6 e1       	brne	8000580a <_vfprintf_r+0x1efe>
80005730:	fa c3 f9 e0 	sub	r3,sp,-1568
80005734:	e2 15 00 04 	andl	r5,0x4,COH
80005738:	c3 f0       	breq	800057b6 <_vfprintf_r+0x1eaa>
8000573a:	40 86       	lddsp	r6,sp[0x20]
8000573c:	40 39       	lddsp	r9,sp[0xc]
8000573e:	12 16       	sub	r6,r9
80005740:	58 06       	cp.w	r6,0
80005742:	e0 89 00 1a 	brgt	80005776 <_vfprintf_r+0x1e6a>
80005746:	c3 88       	rjmp	800057b6 <_vfprintf_r+0x1eaa>
80005748:	2f 09       	sub	r9,-16
8000574a:	2f f8       	sub	r8,-1
8000574c:	fb 49 06 90 	st.w	sp[1680],r9
80005750:	87 05       	st.w	r3[0x0],r5
80005752:	87 12       	st.w	r3[0x4],r2
80005754:	fb 48 06 8c 	st.w	sp[1676],r8
80005758:	58 78       	cp.w	r8,7
8000575a:	e0 89 00 04 	brgt	80005762 <_vfprintf_r+0x1e56>
8000575e:	2f 83       	sub	r3,-8
80005760:	c0 98       	rjmp	80005772 <_vfprintf_r+0x1e66>
80005762:	00 9a       	mov	r10,r0
80005764:	02 9b       	mov	r11,r1
80005766:	08 9c       	mov	r12,r4
80005768:	fe b0 f0 c4 	rcall	800038f0 <__sprint_r>
8000576c:	c4 f1       	brne	8000580a <_vfprintf_r+0x1efe>
8000576e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005772:	21 06       	sub	r6,16
80005774:	c0 68       	rjmp	80005780 <_vfprintf_r+0x1e74>
80005776:	fe c5 aa 66 	sub	r5,pc,-21914
8000577a:	31 02       	mov	r2,16
8000577c:	fa c0 f9 78 	sub	r0,sp,-1672
80005780:	fa f9 06 90 	ld.w	r9,sp[1680]
80005784:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005788:	fe ca aa 78 	sub	r10,pc,-21896
8000578c:	59 06       	cp.w	r6,16
8000578e:	fe 99 ff dd 	brgt	80005748 <_vfprintf_r+0x1e3c>
80005792:	0c 09       	add	r9,r6
80005794:	2f f8       	sub	r8,-1
80005796:	87 0a       	st.w	r3[0x0],r10
80005798:	87 16       	st.w	r3[0x4],r6
8000579a:	fb 49 06 90 	st.w	sp[1680],r9
8000579e:	fb 48 06 8c 	st.w	sp[1676],r8
800057a2:	58 78       	cp.w	r8,7
800057a4:	e0 8a 00 09 	brle	800057b6 <_vfprintf_r+0x1eaa>
800057a8:	fa ca f9 78 	sub	r10,sp,-1672
800057ac:	02 9b       	mov	r11,r1
800057ae:	08 9c       	mov	r12,r4
800057b0:	fe b0 f0 a0 	rcall	800038f0 <__sprint_r>
800057b4:	c2 b1       	brne	8000580a <_vfprintf_r+0x1efe>
800057b6:	40 bc       	lddsp	r12,sp[0x2c]
800057b8:	40 36       	lddsp	r6,sp[0xc]
800057ba:	40 8e       	lddsp	lr,sp[0x20]
800057bc:	ec 0e 0c 48 	max	r8,r6,lr
800057c0:	10 0c       	add	r12,r8
800057c2:	50 bc       	stdsp	sp[0x2c],r12
800057c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800057c8:	58 08       	cp.w	r8,0
800057ca:	c0 80       	breq	800057da <_vfprintf_r+0x1ece>
800057cc:	fa ca f9 78 	sub	r10,sp,-1672
800057d0:	02 9b       	mov	r11,r1
800057d2:	08 9c       	mov	r12,r4
800057d4:	fe b0 f0 8e 	rcall	800038f0 <__sprint_r>
800057d8:	c1 91       	brne	8000580a <_vfprintf_r+0x1efe>
800057da:	30 0b       	mov	r11,0
800057dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800057e0:	fb 4b 06 8c 	st.w	sp[1676],r11
800057e4:	fe 9f f1 22 	bral	80003a28 <_vfprintf_r+0x11c>
800057e8:	08 95       	mov	r5,r4
800057ea:	fa f8 06 90 	ld.w	r8,sp[1680]
800057ee:	58 08       	cp.w	r8,0
800057f0:	c0 80       	breq	80005800 <_vfprintf_r+0x1ef4>
800057f2:	08 9c       	mov	r12,r4
800057f4:	fa ca f9 78 	sub	r10,sp,-1672
800057f8:	02 9b       	mov	r11,r1
800057fa:	fe b0 f0 7b 	rcall	800038f0 <__sprint_r>
800057fe:	c0 61       	brne	8000580a <_vfprintf_r+0x1efe>
80005800:	30 08       	mov	r8,0
80005802:	fb 48 06 8c 	st.w	sp[1676],r8
80005806:	c0 28       	rjmp	8000580a <_vfprintf_r+0x1efe>
80005808:	40 41       	lddsp	r1,sp[0x10]
8000580a:	82 68       	ld.sh	r8,r1[0xc]
8000580c:	ed b8 00 06 	bld	r8,0x6
80005810:	c0 31       	brne	80005816 <_vfprintf_r+0x1f0a>
80005812:	3f fa       	mov	r10,-1
80005814:	50 ba       	stdsp	sp[0x2c],r10
80005816:	40 bc       	lddsp	r12,sp[0x2c]
80005818:	fe 3d f9 44 	sub	sp,-1724
8000581c:	d8 32       	popm	r0-r7,pc
8000581e:	d7 03       	nop

80005820 <__swsetup_r>:
80005820:	d4 21       	pushm	r4-r7,lr
80005822:	e0 68 00 f8 	mov	r8,248
80005826:	18 96       	mov	r6,r12
80005828:	16 97       	mov	r7,r11
8000582a:	70 0c       	ld.w	r12,r8[0x0]
8000582c:	58 0c       	cp.w	r12,0
8000582e:	c0 60       	breq	8000583a <__swsetup_r+0x1a>
80005830:	78 68       	ld.w	r8,r12[0x18]
80005832:	58 08       	cp.w	r8,0
80005834:	c0 31       	brne	8000583a <__swsetup_r+0x1a>
80005836:	e0 a0 07 b9 	rcall	800067a8 <__sinit>
8000583a:	fe c8 a9 fa 	sub	r8,pc,-22022
8000583e:	10 37       	cp.w	r7,r8
80005840:	c0 61       	brne	8000584c <__swsetup_r+0x2c>
80005842:	e0 68 00 f8 	mov	r8,248
80005846:	70 08       	ld.w	r8,r8[0x0]
80005848:	70 07       	ld.w	r7,r8[0x0]
8000584a:	c1 28       	rjmp	8000586e <__swsetup_r+0x4e>
8000584c:	fe c8 a9 ec 	sub	r8,pc,-22036
80005850:	10 37       	cp.w	r7,r8
80005852:	c0 61       	brne	8000585e <__swsetup_r+0x3e>
80005854:	e0 68 00 f8 	mov	r8,248
80005858:	70 08       	ld.w	r8,r8[0x0]
8000585a:	70 17       	ld.w	r7,r8[0x4]
8000585c:	c0 98       	rjmp	8000586e <__swsetup_r+0x4e>
8000585e:	fe c8 a9 de 	sub	r8,pc,-22050
80005862:	10 37       	cp.w	r7,r8
80005864:	c0 51       	brne	8000586e <__swsetup_r+0x4e>
80005866:	e0 68 00 f8 	mov	r8,248
8000586a:	70 08       	ld.w	r8,r8[0x0]
8000586c:	70 27       	ld.w	r7,r8[0x8]
8000586e:	8e 68       	ld.sh	r8,r7[0xc]
80005870:	ed b8 00 03 	bld	r8,0x3
80005874:	c1 e0       	breq	800058b0 <__swsetup_r+0x90>
80005876:	ed b8 00 04 	bld	r8,0x4
8000587a:	c3 e1       	brne	800058f6 <__swsetup_r+0xd6>
8000587c:	ed b8 00 02 	bld	r8,0x2
80005880:	c1 51       	brne	800058aa <__swsetup_r+0x8a>
80005882:	6e db       	ld.w	r11,r7[0x34]
80005884:	58 0b       	cp.w	r11,0
80005886:	c0 a0       	breq	8000589a <__swsetup_r+0x7a>
80005888:	ee c8 ff bc 	sub	r8,r7,-68
8000588c:	10 3b       	cp.w	r11,r8
8000588e:	c0 40       	breq	80005896 <__swsetup_r+0x76>
80005890:	0c 9c       	mov	r12,r6
80005892:	e0 a0 08 25 	rcall	800068dc <_free_r>
80005896:	30 08       	mov	r8,0
80005898:	8f d8       	st.w	r7[0x34],r8
8000589a:	8e 68       	ld.sh	r8,r7[0xc]
8000589c:	e0 18 ff db 	andl	r8,0xffdb
800058a0:	ae 68       	st.h	r7[0xc],r8
800058a2:	30 08       	mov	r8,0
800058a4:	8f 18       	st.w	r7[0x4],r8
800058a6:	6e 48       	ld.w	r8,r7[0x10]
800058a8:	8f 08       	st.w	r7[0x0],r8
800058aa:	8e 68       	ld.sh	r8,r7[0xc]
800058ac:	a3 b8       	sbr	r8,0x3
800058ae:	ae 68       	st.h	r7[0xc],r8
800058b0:	6e 48       	ld.w	r8,r7[0x10]
800058b2:	58 08       	cp.w	r8,0
800058b4:	c0 b1       	brne	800058ca <__swsetup_r+0xaa>
800058b6:	8e 68       	ld.sh	r8,r7[0xc]
800058b8:	e2 18 02 80 	andl	r8,0x280,COH
800058bc:	e0 48 02 00 	cp.w	r8,512
800058c0:	c0 50       	breq	800058ca <__swsetup_r+0xaa>
800058c2:	0c 9c       	mov	r12,r6
800058c4:	0e 9b       	mov	r11,r7
800058c6:	e0 a0 0a 4b 	rcall	80006d5c <__smakebuf_r>
800058ca:	8e 69       	ld.sh	r9,r7[0xc]
800058cc:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800058d0:	c0 70       	breq	800058de <__swsetup_r+0xbe>
800058d2:	30 08       	mov	r8,0
800058d4:	8f 28       	st.w	r7[0x8],r8
800058d6:	6e 58       	ld.w	r8,r7[0x14]
800058d8:	5c 38       	neg	r8
800058da:	8f 68       	st.w	r7[0x18],r8
800058dc:	c0 68       	rjmp	800058e8 <__swsetup_r+0xc8>
800058de:	ed b9 00 01 	bld	r9,0x1
800058e2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800058e6:	8f 28       	st.w	r7[0x8],r8
800058e8:	6e 48       	ld.w	r8,r7[0x10]
800058ea:	58 08       	cp.w	r8,0
800058ec:	c0 61       	brne	800058f8 <__swsetup_r+0xd8>
800058ee:	8e 68       	ld.sh	r8,r7[0xc]
800058f0:	ed b8 00 07 	bld	r8,0x7
800058f4:	c0 21       	brne	800058f8 <__swsetup_r+0xd8>
800058f6:	dc 2a       	popm	r4-r7,pc,r12=-1
800058f8:	d8 2a       	popm	r4-r7,pc,r12=0
800058fa:	d7 03       	nop

800058fc <quorem>:
800058fc:	d4 31       	pushm	r0-r7,lr
800058fe:	20 2d       	sub	sp,8
80005900:	18 97       	mov	r7,r12
80005902:	78 48       	ld.w	r8,r12[0x10]
80005904:	76 46       	ld.w	r6,r11[0x10]
80005906:	0c 38       	cp.w	r8,r6
80005908:	c0 34       	brge	8000590e <quorem+0x12>
8000590a:	30 0c       	mov	r12,0
8000590c:	c8 58       	rjmp	80005a16 <quorem+0x11a>
8000590e:	ec c2 ff fc 	sub	r2,r6,-4
80005912:	f6 c3 ff ec 	sub	r3,r11,-20
80005916:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000591a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000591e:	2f f9       	sub	r9,-1
80005920:	20 16       	sub	r6,1
80005922:	f8 09 0d 08 	divu	r8,r12,r9
80005926:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000592a:	ee c4 ff ec 	sub	r4,r7,-20
8000592e:	10 95       	mov	r5,r8
80005930:	58 08       	cp.w	r8,0
80005932:	c4 10       	breq	800059b4 <quorem+0xb8>
80005934:	30 09       	mov	r9,0
80005936:	06 9a       	mov	r10,r3
80005938:	08 98       	mov	r8,r4
8000593a:	12 91       	mov	r1,r9
8000593c:	50 0b       	stdsp	sp[0x0],r11
8000593e:	70 0e       	ld.w	lr,r8[0x0]
80005940:	b1 8e       	lsr	lr,0x10
80005942:	50 1e       	stdsp	sp[0x4],lr
80005944:	15 0e       	ld.w	lr,r10++
80005946:	fc 00 16 10 	lsr	r0,lr,0x10
8000594a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000594e:	ea 0e 03 41 	mac	r1,r5,lr
80005952:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005956:	b1 81       	lsr	r1,0x10
80005958:	40 1b       	lddsp	r11,sp[0x4]
8000595a:	ea 00 02 40 	mul	r0,r5,r0
8000595e:	e2 00 00 00 	add	r0,r1,r0
80005962:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005966:	02 1b       	sub	r11,r1
80005968:	50 1b       	stdsp	sp[0x4],r11
8000596a:	70 0b       	ld.w	r11,r8[0x0]
8000596c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005970:	02 09       	add	r9,r1
80005972:	f2 0e 01 0e 	sub	lr,r9,lr
80005976:	b0 1e       	st.h	r8[0x2],lr
80005978:	fc 09 14 10 	asr	r9,lr,0x10
8000597c:	40 1e       	lddsp	lr,sp[0x4]
8000597e:	fc 09 00 09 	add	r9,lr,r9
80005982:	b0 09       	st.h	r8[0x0],r9
80005984:	e0 01 16 10 	lsr	r1,r0,0x10
80005988:	2f c8       	sub	r8,-4
8000598a:	b1 49       	asr	r9,0x10
8000598c:	04 3a       	cp.w	r10,r2
8000598e:	fe 98 ff d8 	brls	8000593e <quorem+0x42>
80005992:	40 0b       	lddsp	r11,sp[0x0]
80005994:	58 0c       	cp.w	r12,0
80005996:	c0 f1       	brne	800059b4 <quorem+0xb8>
80005998:	ec c8 ff fb 	sub	r8,r6,-5
8000599c:	ee 08 00 28 	add	r8,r7,r8<<0x2
800059a0:	c0 28       	rjmp	800059a4 <quorem+0xa8>
800059a2:	20 16       	sub	r6,1
800059a4:	20 48       	sub	r8,4
800059a6:	08 38       	cp.w	r8,r4
800059a8:	e0 88 00 05 	brls	800059b2 <quorem+0xb6>
800059ac:	70 09       	ld.w	r9,r8[0x0]
800059ae:	58 09       	cp.w	r9,0
800059b0:	cf 90       	breq	800059a2 <quorem+0xa6>
800059b2:	8f 46       	st.w	r7[0x10],r6
800059b4:	0e 9c       	mov	r12,r7
800059b6:	e0 a0 0c fb 	rcall	800073ac <__mcmp>
800059ba:	c2 d5       	brlt	80005a14 <quorem+0x118>
800059bc:	2f f5       	sub	r5,-1
800059be:	08 98       	mov	r8,r4
800059c0:	30 09       	mov	r9,0
800059c2:	07 0b       	ld.w	r11,r3++
800059c4:	f6 0a 16 10 	lsr	r10,r11,0x10
800059c8:	70 0c       	ld.w	r12,r8[0x0]
800059ca:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800059ce:	f8 0e 16 10 	lsr	lr,r12,0x10
800059d2:	14 1e       	sub	lr,r10
800059d4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800059d8:	16 1a       	sub	r10,r11
800059da:	12 0a       	add	r10,r9
800059dc:	b0 1a       	st.h	r8[0x2],r10
800059de:	b1 4a       	asr	r10,0x10
800059e0:	fc 0a 00 09 	add	r9,lr,r10
800059e4:	b0 09       	st.h	r8[0x0],r9
800059e6:	2f c8       	sub	r8,-4
800059e8:	b1 49       	asr	r9,0x10
800059ea:	04 33       	cp.w	r3,r2
800059ec:	fe 98 ff eb 	brls	800059c2 <quorem+0xc6>
800059f0:	ec c8 ff fb 	sub	r8,r6,-5
800059f4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800059f8:	58 09       	cp.w	r9,0
800059fa:	c0 d1       	brne	80005a14 <quorem+0x118>
800059fc:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005a00:	c0 28       	rjmp	80005a04 <quorem+0x108>
80005a02:	20 16       	sub	r6,1
80005a04:	20 48       	sub	r8,4
80005a06:	08 38       	cp.w	r8,r4
80005a08:	e0 88 00 05 	brls	80005a12 <quorem+0x116>
80005a0c:	70 09       	ld.w	r9,r8[0x0]
80005a0e:	58 09       	cp.w	r9,0
80005a10:	cf 90       	breq	80005a02 <quorem+0x106>
80005a12:	8f 46       	st.w	r7[0x10],r6
80005a14:	0a 9c       	mov	r12,r5
80005a16:	2f ed       	sub	sp,-8
80005a18:	d8 32       	popm	r0-r7,pc
80005a1a:	d7 03       	nop

80005a1c <_dtoa_r>:
80005a1c:	d4 31       	pushm	r0-r7,lr
80005a1e:	21 ad       	sub	sp,104
80005a20:	fa c4 ff 74 	sub	r4,sp,-140
80005a24:	18 97       	mov	r7,r12
80005a26:	16 95       	mov	r5,r11
80005a28:	68 2c       	ld.w	r12,r4[0x8]
80005a2a:	50 c9       	stdsp	sp[0x30],r9
80005a2c:	68 16       	ld.w	r6,r4[0x4]
80005a2e:	68 09       	ld.w	r9,r4[0x0]
80005a30:	50 e8       	stdsp	sp[0x38],r8
80005a32:	14 94       	mov	r4,r10
80005a34:	51 2c       	stdsp	sp[0x48],r12
80005a36:	fa e5 00 08 	st.d	sp[8],r4
80005a3a:	51 59       	stdsp	sp[0x54],r9
80005a3c:	6e 95       	ld.w	r5,r7[0x24]
80005a3e:	58 05       	cp.w	r5,0
80005a40:	c0 91       	brne	80005a52 <_dtoa_r+0x36>
80005a42:	31 0c       	mov	r12,16
80005a44:	e0 a0 09 ea 	rcall	80006e18 <malloc>
80005a48:	99 35       	st.w	r12[0xc],r5
80005a4a:	8f 9c       	st.w	r7[0x24],r12
80005a4c:	99 15       	st.w	r12[0x4],r5
80005a4e:	99 25       	st.w	r12[0x8],r5
80005a50:	99 05       	st.w	r12[0x0],r5
80005a52:	6e 99       	ld.w	r9,r7[0x24]
80005a54:	72 08       	ld.w	r8,r9[0x0]
80005a56:	58 08       	cp.w	r8,0
80005a58:	c0 f0       	breq	80005a76 <_dtoa_r+0x5a>
80005a5a:	72 1a       	ld.w	r10,r9[0x4]
80005a5c:	91 1a       	st.w	r8[0x4],r10
80005a5e:	30 1a       	mov	r10,1
80005a60:	72 19       	ld.w	r9,r9[0x4]
80005a62:	f4 09 09 49 	lsl	r9,r10,r9
80005a66:	10 9b       	mov	r11,r8
80005a68:	91 29       	st.w	r8[0x8],r9
80005a6a:	0e 9c       	mov	r12,r7
80005a6c:	e0 a0 0c ba 	rcall	800073e0 <_Bfree>
80005a70:	6e 98       	ld.w	r8,r7[0x24]
80005a72:	30 09       	mov	r9,0
80005a74:	91 09       	st.w	r8[0x0],r9
80005a76:	40 28       	lddsp	r8,sp[0x8]
80005a78:	10 94       	mov	r4,r8
80005a7a:	58 08       	cp.w	r8,0
80005a7c:	c0 64       	brge	80005a88 <_dtoa_r+0x6c>
80005a7e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005a82:	50 28       	stdsp	sp[0x8],r8
80005a84:	30 18       	mov	r8,1
80005a86:	c0 28       	rjmp	80005a8a <_dtoa_r+0x6e>
80005a88:	30 08       	mov	r8,0
80005a8a:	8d 08       	st.w	r6[0x0],r8
80005a8c:	fc 1c 7f f0 	movh	r12,0x7ff0
80005a90:	40 26       	lddsp	r6,sp[0x8]
80005a92:	0c 98       	mov	r8,r6
80005a94:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005a98:	18 38       	cp.w	r8,r12
80005a9a:	c2 01       	brne	80005ada <_dtoa_r+0xbe>
80005a9c:	e0 68 27 0f 	mov	r8,9999
80005aa0:	41 5b       	lddsp	r11,sp[0x54]
80005aa2:	97 08       	st.w	r11[0x0],r8
80005aa4:	40 3a       	lddsp	r10,sp[0xc]
80005aa6:	58 0a       	cp.w	r10,0
80005aa8:	c0 71       	brne	80005ab6 <_dtoa_r+0x9a>
80005aaa:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005aae:	c0 41       	brne	80005ab6 <_dtoa_r+0x9a>
80005ab0:	fe cc ac 80 	sub	r12,pc,-21376
80005ab4:	c0 38       	rjmp	80005aba <_dtoa_r+0x9e>
80005ab6:	fe cc ac 7a 	sub	r12,pc,-21382
80005aba:	41 29       	lddsp	r9,sp[0x48]
80005abc:	58 09       	cp.w	r9,0
80005abe:	e0 80 05 9a 	breq	800065f2 <_dtoa_r+0xbd6>
80005ac2:	f8 c8 ff fd 	sub	r8,r12,-3
80005ac6:	f8 c9 ff f8 	sub	r9,r12,-8
80005aca:	11 8b       	ld.ub	r11,r8[0x0]
80005acc:	30 0a       	mov	r10,0
80005ace:	41 25       	lddsp	r5,sp[0x48]
80005ad0:	f4 0b 18 00 	cp.b	r11,r10
80005ad4:	f2 08 17 10 	movne	r8,r9
80005ad8:	c1 68       	rjmp	80005b04 <_dtoa_r+0xe8>
80005ada:	fa ea 00 08 	ld.d	r10,sp[8]
80005ade:	30 08       	mov	r8,0
80005ae0:	fa eb 00 3c 	st.d	sp[60],r10
80005ae4:	30 09       	mov	r9,0
80005ae6:	e0 a0 14 e6 	rcall	800084b2 <__avr32_f64_cmp_eq>
80005aea:	c1 00       	breq	80005b0a <_dtoa_r+0xee>
80005aec:	30 18       	mov	r8,1
80005aee:	41 5a       	lddsp	r10,sp[0x54]
80005af0:	95 08       	st.w	r10[0x0],r8
80005af2:	fe cc ad e6 	sub	r12,pc,-21018
80005af6:	41 29       	lddsp	r9,sp[0x48]
80005af8:	f8 08 00 08 	add	r8,r12,r8
80005afc:	58 09       	cp.w	r9,0
80005afe:	e0 80 05 7a 	breq	800065f2 <_dtoa_r+0xbd6>
80005b02:	12 95       	mov	r5,r9
80005b04:	8b 08       	st.w	r5[0x0],r8
80005b06:	e0 8f 05 76 	bral	800065f2 <_dtoa_r+0xbd6>
80005b0a:	fa c8 ff 9c 	sub	r8,sp,-100
80005b0e:	fa c9 ff a0 	sub	r9,sp,-96
80005b12:	fa ea 00 3c 	ld.d	r10,sp[60]
80005b16:	0e 9c       	mov	r12,r7
80005b18:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005b1c:	e0 a0 0c b4 	rcall	80007484 <__d2b>
80005b20:	18 93       	mov	r3,r12
80005b22:	58 05       	cp.w	r5,0
80005b24:	c0 d0       	breq	80005b3e <_dtoa_r+0x122>
80005b26:	fa ea 00 3c 	ld.d	r10,sp[60]
80005b2a:	30 04       	mov	r4,0
80005b2c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005b30:	ea c5 03 ff 	sub	r5,r5,1023
80005b34:	10 9b       	mov	r11,r8
80005b36:	51 74       	stdsp	sp[0x5c],r4
80005b38:	ea 1b 3f f0 	orh	r11,0x3ff0
80005b3c:	c2 58       	rjmp	80005b86 <_dtoa_r+0x16a>
80005b3e:	41 88       	lddsp	r8,sp[0x60]
80005b40:	41 9c       	lddsp	r12,sp[0x64]
80005b42:	10 0c       	add	r12,r8
80005b44:	f8 c5 fb ce 	sub	r5,r12,-1074
80005b48:	e0 45 00 20 	cp.w	r5,32
80005b4c:	e0 8a 00 0e 	brle	80005b68 <_dtoa_r+0x14c>
80005b50:	f8 cc fb ee 	sub	r12,r12,-1042
80005b54:	40 3b       	lddsp	r11,sp[0xc]
80005b56:	ea 08 11 40 	rsub	r8,r5,64
80005b5a:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005b5e:	ec 08 09 46 	lsl	r6,r6,r8
80005b62:	0c 4c       	or	r12,r6
80005b64:	c0 78       	rjmp	80005b72 <_dtoa_r+0x156>
80005b66:	d7 03       	nop
80005b68:	ea 0c 11 20 	rsub	r12,r5,32
80005b6c:	40 3a       	lddsp	r10,sp[0xc]
80005b6e:	f4 0c 09 4c 	lsl	r12,r10,r12
80005b72:	e0 a0 14 2c 	rcall	800083ca <__avr32_u32_to_f64>
80005b76:	fc 18 fe 10 	movh	r8,0xfe10
80005b7a:	30 19       	mov	r9,1
80005b7c:	ea c5 04 33 	sub	r5,r5,1075
80005b80:	f0 0b 00 0b 	add	r11,r8,r11
80005b84:	51 79       	stdsp	sp[0x5c],r9
80005b86:	30 08       	mov	r8,0
80005b88:	fc 19 3f f8 	movh	r9,0x3ff8
80005b8c:	e0 a0 12 b4 	rcall	800080f4 <__avr32_f64_sub>
80005b90:	e0 68 43 61 	mov	r8,17249
80005b94:	ea 18 63 6f 	orh	r8,0x636f
80005b98:	e0 69 87 a7 	mov	r9,34727
80005b9c:	ea 19 3f d2 	orh	r9,0x3fd2
80005ba0:	e0 a0 11 be 	rcall	80007f1c <__avr32_f64_mul>
80005ba4:	e0 68 c8 b3 	mov	r8,51379
80005ba8:	ea 18 8b 60 	orh	r8,0x8b60
80005bac:	e0 69 8a 28 	mov	r9,35368
80005bb0:	ea 19 3f c6 	orh	r9,0x3fc6
80005bb4:	e0 a0 13 6e 	rcall	80008290 <__avr32_f64_add>
80005bb8:	0a 9c       	mov	r12,r5
80005bba:	14 90       	mov	r0,r10
80005bbc:	16 91       	mov	r1,r11
80005bbe:	e0 a0 14 0a 	rcall	800083d2 <__avr32_s32_to_f64>
80005bc2:	e0 68 79 fb 	mov	r8,31227
80005bc6:	ea 18 50 9f 	orh	r8,0x509f
80005bca:	e0 69 44 13 	mov	r9,17427
80005bce:	ea 19 3f d3 	orh	r9,0x3fd3
80005bd2:	e0 a0 11 a5 	rcall	80007f1c <__avr32_f64_mul>
80005bd6:	14 98       	mov	r8,r10
80005bd8:	16 99       	mov	r9,r11
80005bda:	00 9a       	mov	r10,r0
80005bdc:	02 9b       	mov	r11,r1
80005bde:	e0 a0 13 59 	rcall	80008290 <__avr32_f64_add>
80005be2:	14 90       	mov	r0,r10
80005be4:	16 91       	mov	r1,r11
80005be6:	e0 a0 13 df 	rcall	800083a4 <__avr32_f64_to_s32>
80005bea:	30 08       	mov	r8,0
80005bec:	18 96       	mov	r6,r12
80005bee:	30 09       	mov	r9,0
80005bf0:	00 9a       	mov	r10,r0
80005bf2:	02 9b       	mov	r11,r1
80005bf4:	e0 a0 14 a6 	rcall	80008540 <__avr32_f64_cmp_lt>
80005bf8:	c0 c0       	breq	80005c10 <_dtoa_r+0x1f4>
80005bfa:	0c 9c       	mov	r12,r6
80005bfc:	e0 a0 13 eb 	rcall	800083d2 <__avr32_s32_to_f64>
80005c00:	14 98       	mov	r8,r10
80005c02:	16 99       	mov	r9,r11
80005c04:	00 9a       	mov	r10,r0
80005c06:	02 9b       	mov	r11,r1
80005c08:	e0 a0 14 55 	rcall	800084b2 <__avr32_f64_cmp_eq>
80005c0c:	f7 b6 00 01 	subeq	r6,1
80005c10:	59 66       	cp.w	r6,22
80005c12:	e0 88 00 05 	brls	80005c1c <_dtoa_r+0x200>
80005c16:	30 18       	mov	r8,1
80005c18:	51 48       	stdsp	sp[0x50],r8
80005c1a:	c1 38       	rjmp	80005c40 <_dtoa_r+0x224>
80005c1c:	fe c8 ad 2c 	sub	r8,pc,-21204
80005c20:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c24:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005c28:	e0 a0 14 8c 	rcall	80008540 <__avr32_f64_cmp_lt>
80005c2c:	f9 b4 00 00 	moveq	r4,0
80005c30:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005c34:	f7 b6 01 01 	subne	r6,1
80005c38:	f9 bc 01 00 	movne	r12,0
80005c3c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005c40:	41 90       	lddsp	r0,sp[0x64]
80005c42:	20 10       	sub	r0,1
80005c44:	0a 10       	sub	r0,r5
80005c46:	c0 46       	brmi	80005c4e <_dtoa_r+0x232>
80005c48:	50 40       	stdsp	sp[0x10],r0
80005c4a:	30 00       	mov	r0,0
80005c4c:	c0 48       	rjmp	80005c54 <_dtoa_r+0x238>
80005c4e:	30 0b       	mov	r11,0
80005c50:	5c 30       	neg	r0
80005c52:	50 4b       	stdsp	sp[0x10],r11
80005c54:	ec 02 11 00 	rsub	r2,r6,0
80005c58:	58 06       	cp.w	r6,0
80005c5a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005c5e:	f5 d6 e4 0a 	addge	r10,r10,r6
80005c62:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005c66:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005c6a:	f9 b2 04 00 	movge	r2,0
80005c6e:	e1 d6 e5 10 	sublt	r0,r0,r6
80005c72:	f9 b9 05 00 	movlt	r9,0
80005c76:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005c7a:	40 c8       	lddsp	r8,sp[0x30]
80005c7c:	58 98       	cp.w	r8,9
80005c7e:	e0 8b 00 20 	brhi	80005cbe <_dtoa_r+0x2a2>
80005c82:	58 58       	cp.w	r8,5
80005c84:	f9 b4 0a 01 	movle	r4,1
80005c88:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005c8c:	f7 b5 09 04 	subgt	r5,4
80005c90:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005c94:	f9 b4 09 00 	movgt	r4,0
80005c98:	40 cc       	lddsp	r12,sp[0x30]
80005c9a:	58 3c       	cp.w	r12,3
80005c9c:	c2 d0       	breq	80005cf6 <_dtoa_r+0x2da>
80005c9e:	e0 89 00 05 	brgt	80005ca8 <_dtoa_r+0x28c>
80005ca2:	58 2c       	cp.w	r12,2
80005ca4:	c1 01       	brne	80005cc4 <_dtoa_r+0x2a8>
80005ca6:	c1 88       	rjmp	80005cd6 <_dtoa_r+0x2ba>
80005ca8:	40 cb       	lddsp	r11,sp[0x30]
80005caa:	58 4b       	cp.w	r11,4
80005cac:	c0 60       	breq	80005cb8 <_dtoa_r+0x29c>
80005cae:	58 5b       	cp.w	r11,5
80005cb0:	c0 a1       	brne	80005cc4 <_dtoa_r+0x2a8>
80005cb2:	30 1a       	mov	r10,1
80005cb4:	50 da       	stdsp	sp[0x34],r10
80005cb6:	c2 28       	rjmp	80005cfa <_dtoa_r+0x2de>
80005cb8:	30 19       	mov	r9,1
80005cba:	50 d9       	stdsp	sp[0x34],r9
80005cbc:	c0 f8       	rjmp	80005cda <_dtoa_r+0x2be>
80005cbe:	30 08       	mov	r8,0
80005cc0:	30 14       	mov	r4,1
80005cc2:	50 c8       	stdsp	sp[0x30],r8
80005cc4:	3f f5       	mov	r5,-1
80005cc6:	30 1c       	mov	r12,1
80005cc8:	30 0b       	mov	r11,0
80005cca:	50 95       	stdsp	sp[0x24],r5
80005ccc:	50 dc       	stdsp	sp[0x34],r12
80005cce:	0a 91       	mov	r1,r5
80005cd0:	31 28       	mov	r8,18
80005cd2:	50 eb       	stdsp	sp[0x38],r11
80005cd4:	c2 08       	rjmp	80005d14 <_dtoa_r+0x2f8>
80005cd6:	30 0a       	mov	r10,0
80005cd8:	50 da       	stdsp	sp[0x34],r10
80005cda:	40 e9       	lddsp	r9,sp[0x38]
80005cdc:	58 09       	cp.w	r9,0
80005cde:	e0 89 00 07 	brgt	80005cec <_dtoa_r+0x2d0>
80005ce2:	30 18       	mov	r8,1
80005ce4:	50 98       	stdsp	sp[0x24],r8
80005ce6:	10 91       	mov	r1,r8
80005ce8:	50 e8       	stdsp	sp[0x38],r8
80005cea:	c1 58       	rjmp	80005d14 <_dtoa_r+0x2f8>
80005cec:	40 e5       	lddsp	r5,sp[0x38]
80005cee:	50 95       	stdsp	sp[0x24],r5
80005cf0:	0a 91       	mov	r1,r5
80005cf2:	0a 98       	mov	r8,r5
80005cf4:	c1 08       	rjmp	80005d14 <_dtoa_r+0x2f8>
80005cf6:	30 0c       	mov	r12,0
80005cf8:	50 dc       	stdsp	sp[0x34],r12
80005cfa:	40 eb       	lddsp	r11,sp[0x38]
80005cfc:	ec 0b 00 0b 	add	r11,r6,r11
80005d00:	50 9b       	stdsp	sp[0x24],r11
80005d02:	16 98       	mov	r8,r11
80005d04:	2f f8       	sub	r8,-1
80005d06:	58 08       	cp.w	r8,0
80005d08:	e0 89 00 05 	brgt	80005d12 <_dtoa_r+0x2f6>
80005d0c:	10 91       	mov	r1,r8
80005d0e:	30 18       	mov	r8,1
80005d10:	c0 28       	rjmp	80005d14 <_dtoa_r+0x2f8>
80005d12:	10 91       	mov	r1,r8
80005d14:	30 09       	mov	r9,0
80005d16:	6e 9a       	ld.w	r10,r7[0x24]
80005d18:	95 19       	st.w	r10[0x4],r9
80005d1a:	30 49       	mov	r9,4
80005d1c:	c0 68       	rjmp	80005d28 <_dtoa_r+0x30c>
80005d1e:	d7 03       	nop
80005d20:	6a 1a       	ld.w	r10,r5[0x4]
80005d22:	a1 79       	lsl	r9,0x1
80005d24:	2f fa       	sub	r10,-1
80005d26:	8b 1a       	st.w	r5[0x4],r10
80005d28:	6e 95       	ld.w	r5,r7[0x24]
80005d2a:	f2 ca ff ec 	sub	r10,r9,-20
80005d2e:	10 3a       	cp.w	r10,r8
80005d30:	fe 98 ff f8 	brls	80005d20 <_dtoa_r+0x304>
80005d34:	6a 1b       	ld.w	r11,r5[0x4]
80005d36:	0e 9c       	mov	r12,r7
80005d38:	e0 a0 0b 6e 	rcall	80007414 <_Balloc>
80005d3c:	58 e1       	cp.w	r1,14
80005d3e:	5f 88       	srls	r8
80005d40:	8b 0c       	st.w	r5[0x0],r12
80005d42:	f1 e4 00 04 	and	r4,r8,r4
80005d46:	6e 98       	ld.w	r8,r7[0x24]
80005d48:	70 08       	ld.w	r8,r8[0x0]
80005d4a:	50 88       	stdsp	sp[0x20],r8
80005d4c:	e0 80 01 82 	breq	80006050 <_dtoa_r+0x634>
80005d50:	58 06       	cp.w	r6,0
80005d52:	e0 8a 00 43 	brle	80005dd8 <_dtoa_r+0x3bc>
80005d56:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005d5a:	fe c8 ae 6a 	sub	r8,pc,-20886
80005d5e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005d62:	fa e5 00 18 	st.d	sp[24],r4
80005d66:	ec 04 14 04 	asr	r4,r6,0x4
80005d6a:	ed b4 00 04 	bld	r4,0x4
80005d6e:	c0 30       	breq	80005d74 <_dtoa_r+0x358>
80005d70:	30 25       	mov	r5,2
80005d72:	c1 08       	rjmp	80005d92 <_dtoa_r+0x376>
80005d74:	fe c8 ad bc 	sub	r8,pc,-21060
80005d78:	f0 e8 00 20 	ld.d	r8,r8[32]
80005d7c:	fa ea 00 3c 	ld.d	r10,sp[60]
80005d80:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005d84:	e0 a0 14 12 	rcall	800085a8 <__avr32_f64_div>
80005d88:	30 35       	mov	r5,3
80005d8a:	14 98       	mov	r8,r10
80005d8c:	16 99       	mov	r9,r11
80005d8e:	fa e9 00 08 	st.d	sp[8],r8
80005d92:	fe cc ad da 	sub	r12,pc,-21030
80005d96:	50 a3       	stdsp	sp[0x28],r3
80005d98:	0c 93       	mov	r3,r6
80005d9a:	18 96       	mov	r6,r12
80005d9c:	c0 f8       	rjmp	80005dba <_dtoa_r+0x39e>
80005d9e:	fa ea 00 18 	ld.d	r10,sp[24]
80005da2:	ed b4 00 00 	bld	r4,0x0
80005da6:	c0 81       	brne	80005db6 <_dtoa_r+0x39a>
80005da8:	ec e8 00 00 	ld.d	r8,r6[0]
80005dac:	2f f5       	sub	r5,-1
80005dae:	e0 a0 10 b7 	rcall	80007f1c <__avr32_f64_mul>
80005db2:	fa eb 00 18 	st.d	sp[24],r10
80005db6:	a1 54       	asr	r4,0x1
80005db8:	2f 86       	sub	r6,-8
80005dba:	58 04       	cp.w	r4,0
80005dbc:	cf 11       	brne	80005d9e <_dtoa_r+0x382>
80005dbe:	fa e8 00 18 	ld.d	r8,sp[24]
80005dc2:	fa ea 00 08 	ld.d	r10,sp[8]
80005dc6:	06 96       	mov	r6,r3
80005dc8:	e0 a0 13 f0 	rcall	800085a8 <__avr32_f64_div>
80005dcc:	40 a3       	lddsp	r3,sp[0x28]
80005dce:	14 98       	mov	r8,r10
80005dd0:	16 99       	mov	r9,r11
80005dd2:	fa e9 00 08 	st.d	sp[8],r8
80005dd6:	c2 f8       	rjmp	80005e34 <_dtoa_r+0x418>
80005dd8:	ec 08 11 00 	rsub	r8,r6,0
80005ddc:	c0 31       	brne	80005de2 <_dtoa_r+0x3c6>
80005dde:	30 25       	mov	r5,2
80005de0:	c2 a8       	rjmp	80005e34 <_dtoa_r+0x418>
80005de2:	fe cc ae 2a 	sub	r12,pc,-20950
80005de6:	f0 04 14 04 	asr	r4,r8,0x4
80005dea:	50 1c       	stdsp	sp[0x4],r12
80005dec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005df0:	fe c9 af 00 	sub	r9,pc,-20736
80005df4:	fa ea 00 3c 	ld.d	r10,sp[60]
80005df8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005dfc:	e0 a0 10 90 	rcall	80007f1c <__avr32_f64_mul>
80005e00:	40 1c       	lddsp	r12,sp[0x4]
80005e02:	50 63       	stdsp	sp[0x18],r3
80005e04:	30 25       	mov	r5,2
80005e06:	0c 93       	mov	r3,r6
80005e08:	fa eb 00 08 	st.d	sp[8],r10
80005e0c:	18 96       	mov	r6,r12
80005e0e:	c0 f8       	rjmp	80005e2c <_dtoa_r+0x410>
80005e10:	fa ea 00 08 	ld.d	r10,sp[8]
80005e14:	ed b4 00 00 	bld	r4,0x0
80005e18:	c0 81       	brne	80005e28 <_dtoa_r+0x40c>
80005e1a:	ec e8 00 00 	ld.d	r8,r6[0]
80005e1e:	2f f5       	sub	r5,-1
80005e20:	e0 a0 10 7e 	rcall	80007f1c <__avr32_f64_mul>
80005e24:	fa eb 00 08 	st.d	sp[8],r10
80005e28:	a1 54       	asr	r4,0x1
80005e2a:	2f 86       	sub	r6,-8
80005e2c:	58 04       	cp.w	r4,0
80005e2e:	cf 11       	brne	80005e10 <_dtoa_r+0x3f4>
80005e30:	06 96       	mov	r6,r3
80005e32:	40 63       	lddsp	r3,sp[0x18]
80005e34:	41 4a       	lddsp	r10,sp[0x50]
80005e36:	58 0a       	cp.w	r10,0
80005e38:	c2 a0       	breq	80005e8c <_dtoa_r+0x470>
80005e3a:	fa e8 00 08 	ld.d	r8,sp[8]
80005e3e:	58 01       	cp.w	r1,0
80005e40:	5f 94       	srgt	r4
80005e42:	fa e9 00 18 	st.d	sp[24],r8
80005e46:	30 08       	mov	r8,0
80005e48:	fc 19 3f f0 	movh	r9,0x3ff0
80005e4c:	fa ea 00 18 	ld.d	r10,sp[24]
80005e50:	e0 a0 13 78 	rcall	80008540 <__avr32_f64_cmp_lt>
80005e54:	f9 bc 00 00 	moveq	r12,0
80005e58:	f9 bc 01 01 	movne	r12,1
80005e5c:	e9 ec 00 0c 	and	r12,r4,r12
80005e60:	c1 60       	breq	80005e8c <_dtoa_r+0x470>
80005e62:	40 98       	lddsp	r8,sp[0x24]
80005e64:	58 08       	cp.w	r8,0
80005e66:	e0 8a 00 f1 	brle	80006048 <_dtoa_r+0x62c>
80005e6a:	30 08       	mov	r8,0
80005e6c:	fc 19 40 24 	movh	r9,0x4024
80005e70:	ec c4 00 01 	sub	r4,r6,1
80005e74:	fa ea 00 18 	ld.d	r10,sp[24]
80005e78:	2f f5       	sub	r5,-1
80005e7a:	50 64       	stdsp	sp[0x18],r4
80005e7c:	e0 a0 10 50 	rcall	80007f1c <__avr32_f64_mul>
80005e80:	40 94       	lddsp	r4,sp[0x24]
80005e82:	14 98       	mov	r8,r10
80005e84:	16 99       	mov	r9,r11
80005e86:	fa e9 00 08 	st.d	sp[8],r8
80005e8a:	c0 38       	rjmp	80005e90 <_dtoa_r+0x474>
80005e8c:	50 66       	stdsp	sp[0x18],r6
80005e8e:	02 94       	mov	r4,r1
80005e90:	0a 9c       	mov	r12,r5
80005e92:	e0 a0 12 a0 	rcall	800083d2 <__avr32_s32_to_f64>
80005e96:	fa e8 00 08 	ld.d	r8,sp[8]
80005e9a:	e0 a0 10 41 	rcall	80007f1c <__avr32_f64_mul>
80005e9e:	30 08       	mov	r8,0
80005ea0:	fc 19 40 1c 	movh	r9,0x401c
80005ea4:	e0 a0 11 f6 	rcall	80008290 <__avr32_f64_add>
80005ea8:	14 98       	mov	r8,r10
80005eaa:	16 99       	mov	r9,r11
80005eac:	fa e9 00 28 	st.d	sp[40],r8
80005eb0:	fc 18 fc c0 	movh	r8,0xfcc0
80005eb4:	40 a5       	lddsp	r5,sp[0x28]
80005eb6:	10 05       	add	r5,r8
80005eb8:	50 a5       	stdsp	sp[0x28],r5
80005eba:	58 04       	cp.w	r4,0
80005ebc:	c2 11       	brne	80005efe <_dtoa_r+0x4e2>
80005ebe:	fa ea 00 08 	ld.d	r10,sp[8]
80005ec2:	30 08       	mov	r8,0
80005ec4:	fc 19 40 14 	movh	r9,0x4014
80005ec8:	e0 a0 11 16 	rcall	800080f4 <__avr32_f64_sub>
80005ecc:	40 bc       	lddsp	r12,sp[0x2c]
80005ece:	fa eb 00 08 	st.d	sp[8],r10
80005ed2:	14 98       	mov	r8,r10
80005ed4:	16 99       	mov	r9,r11
80005ed6:	18 9a       	mov	r10,r12
80005ed8:	0a 9b       	mov	r11,r5
80005eda:	e0 a0 13 33 	rcall	80008540 <__avr32_f64_cmp_lt>
80005ede:	e0 81 02 54 	brne	80006386 <_dtoa_r+0x96a>
80005ee2:	0a 98       	mov	r8,r5
80005ee4:	40 b9       	lddsp	r9,sp[0x2c]
80005ee6:	ee 18 80 00 	eorh	r8,0x8000
80005eea:	fa ea 00 08 	ld.d	r10,sp[8]
80005eee:	10 95       	mov	r5,r8
80005ef0:	12 98       	mov	r8,r9
80005ef2:	0a 99       	mov	r9,r5
80005ef4:	e0 a0 13 26 	rcall	80008540 <__avr32_f64_cmp_lt>
80005ef8:	e0 81 02 3e 	brne	80006374 <_dtoa_r+0x958>
80005efc:	ca 68       	rjmp	80006048 <_dtoa_r+0x62c>
80005efe:	fe c9 b0 0e 	sub	r9,pc,-20466
80005f02:	e8 c8 00 01 	sub	r8,r4,1
80005f06:	40 d5       	lddsp	r5,sp[0x34]
80005f08:	58 05       	cp.w	r5,0
80005f0a:	c4 f0       	breq	80005fa8 <_dtoa_r+0x58c>
80005f0c:	30 0c       	mov	r12,0
80005f0e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005f12:	51 3c       	stdsp	sp[0x4c],r12
80005f14:	30 0a       	mov	r10,0
80005f16:	fc 1b 3f e0 	movh	r11,0x3fe0
80005f1a:	e0 a0 13 47 	rcall	800085a8 <__avr32_f64_div>
80005f1e:	fa e8 00 28 	ld.d	r8,sp[40]
80005f22:	40 85       	lddsp	r5,sp[0x20]
80005f24:	e0 a0 10 e8 	rcall	800080f4 <__avr32_f64_sub>
80005f28:	fa eb 00 28 	st.d	sp[40],r10
80005f2c:	fa ea 00 08 	ld.d	r10,sp[8]
80005f30:	e0 a0 12 3a 	rcall	800083a4 <__avr32_f64_to_s32>
80005f34:	51 6c       	stdsp	sp[0x58],r12
80005f36:	e0 a0 12 4e 	rcall	800083d2 <__avr32_s32_to_f64>
80005f3a:	14 98       	mov	r8,r10
80005f3c:	16 99       	mov	r9,r11
80005f3e:	fa ea 00 08 	ld.d	r10,sp[8]
80005f42:	e0 a0 10 d9 	rcall	800080f4 <__avr32_f64_sub>
80005f46:	fa eb 00 08 	st.d	sp[8],r10
80005f4a:	41 68       	lddsp	r8,sp[0x58]
80005f4c:	2d 08       	sub	r8,-48
80005f4e:	0a c8       	st.b	r5++,r8
80005f50:	41 39       	lddsp	r9,sp[0x4c]
80005f52:	2f f9       	sub	r9,-1
80005f54:	51 39       	stdsp	sp[0x4c],r9
80005f56:	fa e8 00 28 	ld.d	r8,sp[40]
80005f5a:	e0 a0 12 f3 	rcall	80008540 <__avr32_f64_cmp_lt>
80005f5e:	e0 81 03 39 	brne	800065d0 <_dtoa_r+0xbb4>
80005f62:	fa e8 00 08 	ld.d	r8,sp[8]
80005f66:	30 0a       	mov	r10,0
80005f68:	fc 1b 3f f0 	movh	r11,0x3ff0
80005f6c:	e0 a0 10 c4 	rcall	800080f4 <__avr32_f64_sub>
80005f70:	fa e8 00 28 	ld.d	r8,sp[40]
80005f74:	e0 a0 12 e6 	rcall	80008540 <__avr32_f64_cmp_lt>
80005f78:	fa ea 00 28 	ld.d	r10,sp[40]
80005f7c:	30 08       	mov	r8,0
80005f7e:	fc 19 40 24 	movh	r9,0x4024
80005f82:	e0 81 00 da 	brne	80006136 <_dtoa_r+0x71a>
80005f86:	41 3c       	lddsp	r12,sp[0x4c]
80005f88:	08 3c       	cp.w	r12,r4
80005f8a:	c5 f4       	brge	80006048 <_dtoa_r+0x62c>
80005f8c:	e0 a0 0f c8 	rcall	80007f1c <__avr32_f64_mul>
80005f90:	30 08       	mov	r8,0
80005f92:	fa eb 00 28 	st.d	sp[40],r10
80005f96:	fc 19 40 24 	movh	r9,0x4024
80005f9a:	fa ea 00 08 	ld.d	r10,sp[8]
80005f9e:	e0 a0 0f bf 	rcall	80007f1c <__avr32_f64_mul>
80005fa2:	fa eb 00 08 	st.d	sp[8],r10
80005fa6:	cc 3b       	rjmp	80005f2c <_dtoa_r+0x510>
80005fa8:	40 85       	lddsp	r5,sp[0x20]
80005faa:	08 05       	add	r5,r4
80005fac:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005fb0:	51 35       	stdsp	sp[0x4c],r5
80005fb2:	fa e8 00 28 	ld.d	r8,sp[40]
80005fb6:	40 85       	lddsp	r5,sp[0x20]
80005fb8:	e0 a0 0f b2 	rcall	80007f1c <__avr32_f64_mul>
80005fbc:	fa eb 00 28 	st.d	sp[40],r10
80005fc0:	fa ea 00 08 	ld.d	r10,sp[8]
80005fc4:	e0 a0 11 f0 	rcall	800083a4 <__avr32_f64_to_s32>
80005fc8:	51 6c       	stdsp	sp[0x58],r12
80005fca:	e0 a0 12 04 	rcall	800083d2 <__avr32_s32_to_f64>
80005fce:	14 98       	mov	r8,r10
80005fd0:	16 99       	mov	r9,r11
80005fd2:	fa ea 00 08 	ld.d	r10,sp[8]
80005fd6:	e0 a0 10 8f 	rcall	800080f4 <__avr32_f64_sub>
80005fda:	fa eb 00 08 	st.d	sp[8],r10
80005fde:	41 68       	lddsp	r8,sp[0x58]
80005fe0:	2d 08       	sub	r8,-48
80005fe2:	0a c8       	st.b	r5++,r8
80005fe4:	41 3c       	lddsp	r12,sp[0x4c]
80005fe6:	18 35       	cp.w	r5,r12
80005fe8:	c2 81       	brne	80006038 <_dtoa_r+0x61c>
80005fea:	30 08       	mov	r8,0
80005fec:	fc 19 3f e0 	movh	r9,0x3fe0
80005ff0:	fa ea 00 28 	ld.d	r10,sp[40]
80005ff4:	e0 a0 11 4e 	rcall	80008290 <__avr32_f64_add>
80005ff8:	40 85       	lddsp	r5,sp[0x20]
80005ffa:	fa e8 00 08 	ld.d	r8,sp[8]
80005ffe:	08 05       	add	r5,r4
80006000:	e0 a0 12 a0 	rcall	80008540 <__avr32_f64_cmp_lt>
80006004:	e0 81 00 99 	brne	80006136 <_dtoa_r+0x71a>
80006008:	fa e8 00 28 	ld.d	r8,sp[40]
8000600c:	30 0a       	mov	r10,0
8000600e:	fc 1b 3f e0 	movh	r11,0x3fe0
80006012:	e0 a0 10 71 	rcall	800080f4 <__avr32_f64_sub>
80006016:	14 98       	mov	r8,r10
80006018:	16 99       	mov	r9,r11
8000601a:	fa ea 00 08 	ld.d	r10,sp[8]
8000601e:	e0 a0 12 91 	rcall	80008540 <__avr32_f64_cmp_lt>
80006022:	c1 30       	breq	80006048 <_dtoa_r+0x62c>
80006024:	33 09       	mov	r9,48
80006026:	0a 98       	mov	r8,r5
80006028:	11 7a       	ld.ub	r10,--r8
8000602a:	f2 0a 18 00 	cp.b	r10,r9
8000602e:	e0 81 02 d1 	brne	800065d0 <_dtoa_r+0xbb4>
80006032:	10 95       	mov	r5,r8
80006034:	cf 9b       	rjmp	80006026 <_dtoa_r+0x60a>
80006036:	d7 03       	nop
80006038:	30 08       	mov	r8,0
8000603a:	fc 19 40 24 	movh	r9,0x4024
8000603e:	e0 a0 0f 6f 	rcall	80007f1c <__avr32_f64_mul>
80006042:	fa eb 00 08 	st.d	sp[8],r10
80006046:	cb db       	rjmp	80005fc0 <_dtoa_r+0x5a4>
80006048:	fa ea 00 3c 	ld.d	r10,sp[60]
8000604c:	fa eb 00 08 	st.d	sp[8],r10
80006050:	58 e6       	cp.w	r6,14
80006052:	5f ab       	srle	r11
80006054:	41 8a       	lddsp	r10,sp[0x60]
80006056:	30 08       	mov	r8,0
80006058:	f4 09 11 ff 	rsub	r9,r10,-1
8000605c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006060:	f0 09 18 00 	cp.b	r9,r8
80006064:	e0 80 00 82 	breq	80006168 <_dtoa_r+0x74c>
80006068:	40 ea       	lddsp	r10,sp[0x38]
8000606a:	58 01       	cp.w	r1,0
8000606c:	5f a9       	srle	r9
8000606e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006072:	fe ca b1 82 	sub	r10,pc,-20094
80006076:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000607a:	fa e5 00 10 	st.d	sp[16],r4
8000607e:	f0 09 18 00 	cp.b	r9,r8
80006082:	c1 40       	breq	800060aa <_dtoa_r+0x68e>
80006084:	58 01       	cp.w	r1,0
80006086:	e0 81 01 77 	brne	80006374 <_dtoa_r+0x958>
8000608a:	30 08       	mov	r8,0
8000608c:	fc 19 40 14 	movh	r9,0x4014
80006090:	08 9a       	mov	r10,r4
80006092:	0a 9b       	mov	r11,r5
80006094:	e0 a0 0f 44 	rcall	80007f1c <__avr32_f64_mul>
80006098:	fa e8 00 08 	ld.d	r8,sp[8]
8000609c:	e0 a0 12 1e 	rcall	800084d8 <__avr32_f64_cmp_ge>
800060a0:	e0 81 01 6a 	brne	80006374 <_dtoa_r+0x958>
800060a4:	02 92       	mov	r2,r1
800060a6:	e0 8f 01 72 	bral	8000638a <_dtoa_r+0x96e>
800060aa:	40 85       	lddsp	r5,sp[0x20]
800060ac:	30 14       	mov	r4,1
800060ae:	fa e8 00 10 	ld.d	r8,sp[16]
800060b2:	fa ea 00 08 	ld.d	r10,sp[8]
800060b6:	e0 a0 12 79 	rcall	800085a8 <__avr32_f64_div>
800060ba:	e0 a0 11 75 	rcall	800083a4 <__avr32_f64_to_s32>
800060be:	18 92       	mov	r2,r12
800060c0:	e0 a0 11 89 	rcall	800083d2 <__avr32_s32_to_f64>
800060c4:	fa e8 00 10 	ld.d	r8,sp[16]
800060c8:	e0 a0 0f 2a 	rcall	80007f1c <__avr32_f64_mul>
800060cc:	14 98       	mov	r8,r10
800060ce:	16 99       	mov	r9,r11
800060d0:	fa ea 00 08 	ld.d	r10,sp[8]
800060d4:	e0 a0 10 10 	rcall	800080f4 <__avr32_f64_sub>
800060d8:	fa eb 00 08 	st.d	sp[8],r10
800060dc:	e4 c8 ff d0 	sub	r8,r2,-48
800060e0:	0a c8       	st.b	r5++,r8
800060e2:	fc 19 40 24 	movh	r9,0x4024
800060e6:	30 08       	mov	r8,0
800060e8:	02 34       	cp.w	r4,r1
800060ea:	c3 31       	brne	80006150 <_dtoa_r+0x734>
800060ec:	fa e8 00 08 	ld.d	r8,sp[8]
800060f0:	e0 a0 10 d0 	rcall	80008290 <__avr32_f64_add>
800060f4:	16 91       	mov	r1,r11
800060f6:	14 90       	mov	r0,r10
800060f8:	14 98       	mov	r8,r10
800060fa:	02 99       	mov	r9,r1
800060fc:	fa ea 00 10 	ld.d	r10,sp[16]
80006100:	e0 a0 12 20 	rcall	80008540 <__avr32_f64_cmp_lt>
80006104:	c1 a1       	brne	80006138 <_dtoa_r+0x71c>
80006106:	fa e8 00 10 	ld.d	r8,sp[16]
8000610a:	00 9a       	mov	r10,r0
8000610c:	02 9b       	mov	r11,r1
8000610e:	e0 a0 11 d2 	rcall	800084b2 <__avr32_f64_cmp_eq>
80006112:	e0 80 02 5e 	breq	800065ce <_dtoa_r+0xbb2>
80006116:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000611a:	c0 f1       	brne	80006138 <_dtoa_r+0x71c>
8000611c:	e0 8f 02 59 	bral	800065ce <_dtoa_r+0xbb2>
80006120:	40 8a       	lddsp	r10,sp[0x20]
80006122:	14 38       	cp.w	r8,r10
80006124:	c0 30       	breq	8000612a <_dtoa_r+0x70e>
80006126:	10 95       	mov	r5,r8
80006128:	c0 98       	rjmp	8000613a <_dtoa_r+0x71e>
8000612a:	33 08       	mov	r8,48
8000612c:	40 89       	lddsp	r9,sp[0x20]
8000612e:	2f f6       	sub	r6,-1
80006130:	b2 88       	st.b	r9[0x0],r8
80006132:	40 88       	lddsp	r8,sp[0x20]
80006134:	c0 88       	rjmp	80006144 <_dtoa_r+0x728>
80006136:	40 66       	lddsp	r6,sp[0x18]
80006138:	33 99       	mov	r9,57
8000613a:	0a 98       	mov	r8,r5
8000613c:	11 7a       	ld.ub	r10,--r8
8000613e:	f2 0a 18 00 	cp.b	r10,r9
80006142:	ce f0       	breq	80006120 <_dtoa_r+0x704>
80006144:	50 66       	stdsp	sp[0x18],r6
80006146:	11 89       	ld.ub	r9,r8[0x0]
80006148:	2f f9       	sub	r9,-1
8000614a:	b0 89       	st.b	r8[0x0],r9
8000614c:	e0 8f 02 42 	bral	800065d0 <_dtoa_r+0xbb4>
80006150:	e0 a0 0e e6 	rcall	80007f1c <__avr32_f64_mul>
80006154:	2f f4       	sub	r4,-1
80006156:	fa eb 00 08 	st.d	sp[8],r10
8000615a:	30 08       	mov	r8,0
8000615c:	30 09       	mov	r9,0
8000615e:	e0 a0 11 aa 	rcall	800084b2 <__avr32_f64_cmp_eq>
80006162:	ca 60       	breq	800060ae <_dtoa_r+0x692>
80006164:	e0 8f 02 35 	bral	800065ce <_dtoa_r+0xbb2>
80006168:	40 d8       	lddsp	r8,sp[0x34]
8000616a:	58 08       	cp.w	r8,0
8000616c:	c0 51       	brne	80006176 <_dtoa_r+0x75a>
8000616e:	04 98       	mov	r8,r2
80006170:	00 95       	mov	r5,r0
80006172:	40 d4       	lddsp	r4,sp[0x34]
80006174:	c3 78       	rjmp	800061e2 <_dtoa_r+0x7c6>
80006176:	40 c5       	lddsp	r5,sp[0x30]
80006178:	58 15       	cp.w	r5,1
8000617a:	e0 89 00 0f 	brgt	80006198 <_dtoa_r+0x77c>
8000617e:	41 74       	lddsp	r4,sp[0x5c]
80006180:	58 04       	cp.w	r4,0
80006182:	c0 40       	breq	8000618a <_dtoa_r+0x76e>
80006184:	f4 c9 fb cd 	sub	r9,r10,-1075
80006188:	c0 48       	rjmp	80006190 <_dtoa_r+0x774>
8000618a:	41 99       	lddsp	r9,sp[0x64]
8000618c:	f2 09 11 36 	rsub	r9,r9,54
80006190:	04 98       	mov	r8,r2
80006192:	00 95       	mov	r5,r0
80006194:	c1 c8       	rjmp	800061cc <_dtoa_r+0x7b0>
80006196:	d7 03       	nop
80006198:	e2 c8 00 01 	sub	r8,r1,1
8000619c:	58 01       	cp.w	r1,0
8000619e:	e0 05 17 40 	movge	r5,r0
800061a2:	e2 09 17 40 	movge	r9,r1
800061a6:	e1 d1 e5 15 	sublt	r5,r0,r1
800061aa:	f9 b9 05 00 	movlt	r9,0
800061ae:	10 32       	cp.w	r2,r8
800061b0:	e5 d8 e4 18 	subge	r8,r2,r8
800061b4:	f1 d2 e5 18 	sublt	r8,r8,r2
800061b8:	e5 d8 e5 02 	addlt	r2,r2,r8
800061bc:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800061c0:	f9 d8 e5 0c 	addlt	r12,r12,r8
800061c4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800061c8:	f9 b8 05 00 	movlt	r8,0
800061cc:	40 4b       	lddsp	r11,sp[0x10]
800061ce:	12 0b       	add	r11,r9
800061d0:	50 08       	stdsp	sp[0x0],r8
800061d2:	50 4b       	stdsp	sp[0x10],r11
800061d4:	12 00       	add	r0,r9
800061d6:	30 1b       	mov	r11,1
800061d8:	0e 9c       	mov	r12,r7
800061da:	e0 a0 0a d1 	rcall	8000777c <__i2b>
800061de:	40 08       	lddsp	r8,sp[0x0]
800061e0:	18 94       	mov	r4,r12
800061e2:	40 4a       	lddsp	r10,sp[0x10]
800061e4:	58 05       	cp.w	r5,0
800061e6:	5f 99       	srgt	r9
800061e8:	58 0a       	cp.w	r10,0
800061ea:	5f 9a       	srgt	r10
800061ec:	f5 e9 00 09 	and	r9,r10,r9
800061f0:	c0 80       	breq	80006200 <_dtoa_r+0x7e4>
800061f2:	40 4c       	lddsp	r12,sp[0x10]
800061f4:	f8 05 0d 49 	min	r9,r12,r5
800061f8:	12 1c       	sub	r12,r9
800061fa:	12 10       	sub	r0,r9
800061fc:	50 4c       	stdsp	sp[0x10],r12
800061fe:	12 15       	sub	r5,r9
80006200:	58 02       	cp.w	r2,0
80006202:	e0 8a 00 27 	brle	80006250 <_dtoa_r+0x834>
80006206:	40 db       	lddsp	r11,sp[0x34]
80006208:	58 0b       	cp.w	r11,0
8000620a:	c1 d0       	breq	80006244 <_dtoa_r+0x828>
8000620c:	58 08       	cp.w	r8,0
8000620e:	e0 8a 00 17 	brle	8000623c <_dtoa_r+0x820>
80006212:	10 9a       	mov	r10,r8
80006214:	50 08       	stdsp	sp[0x0],r8
80006216:	08 9b       	mov	r11,r4
80006218:	0e 9c       	mov	r12,r7
8000621a:	e0 a0 0a f7 	rcall	80007808 <__pow5mult>
8000621e:	06 9a       	mov	r10,r3
80006220:	18 9b       	mov	r11,r12
80006222:	18 94       	mov	r4,r12
80006224:	0e 9c       	mov	r12,r7
80006226:	e0 a0 0a 2b 	rcall	8000767c <__multiply>
8000622a:	18 99       	mov	r9,r12
8000622c:	06 9b       	mov	r11,r3
8000622e:	50 19       	stdsp	sp[0x4],r9
80006230:	0e 9c       	mov	r12,r7
80006232:	e0 a0 08 d7 	rcall	800073e0 <_Bfree>
80006236:	40 19       	lddsp	r9,sp[0x4]
80006238:	40 08       	lddsp	r8,sp[0x0]
8000623a:	12 93       	mov	r3,r9
8000623c:	e4 08 01 0a 	sub	r10,r2,r8
80006240:	c0 80       	breq	80006250 <_dtoa_r+0x834>
80006242:	c0 28       	rjmp	80006246 <_dtoa_r+0x82a>
80006244:	04 9a       	mov	r10,r2
80006246:	06 9b       	mov	r11,r3
80006248:	0e 9c       	mov	r12,r7
8000624a:	e0 a0 0a df 	rcall	80007808 <__pow5mult>
8000624e:	18 93       	mov	r3,r12
80006250:	30 1b       	mov	r11,1
80006252:	0e 9c       	mov	r12,r7
80006254:	e0 a0 0a 94 	rcall	8000777c <__i2b>
80006258:	41 1a       	lddsp	r10,sp[0x44]
8000625a:	18 92       	mov	r2,r12
8000625c:	58 0a       	cp.w	r10,0
8000625e:	e0 8a 00 07 	brle	8000626c <_dtoa_r+0x850>
80006262:	18 9b       	mov	r11,r12
80006264:	0e 9c       	mov	r12,r7
80006266:	e0 a0 0a d1 	rcall	80007808 <__pow5mult>
8000626a:	18 92       	mov	r2,r12
8000626c:	40 c9       	lddsp	r9,sp[0x30]
8000626e:	58 19       	cp.w	r9,1
80006270:	e0 89 00 14 	brgt	80006298 <_dtoa_r+0x87c>
80006274:	40 38       	lddsp	r8,sp[0xc]
80006276:	58 08       	cp.w	r8,0
80006278:	c1 01       	brne	80006298 <_dtoa_r+0x87c>
8000627a:	40 29       	lddsp	r9,sp[0x8]
8000627c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006280:	c0 c1       	brne	80006298 <_dtoa_r+0x87c>
80006282:	12 98       	mov	r8,r9
80006284:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006288:	c0 80       	breq	80006298 <_dtoa_r+0x87c>
8000628a:	40 4c       	lddsp	r12,sp[0x10]
8000628c:	30 1b       	mov	r11,1
8000628e:	2f fc       	sub	r12,-1
80006290:	2f f0       	sub	r0,-1
80006292:	50 4c       	stdsp	sp[0x10],r12
80006294:	50 6b       	stdsp	sp[0x18],r11
80006296:	c0 38       	rjmp	8000629c <_dtoa_r+0x880>
80006298:	30 0a       	mov	r10,0
8000629a:	50 6a       	stdsp	sp[0x18],r10
8000629c:	41 19       	lddsp	r9,sp[0x44]
8000629e:	58 09       	cp.w	r9,0
800062a0:	c0 31       	brne	800062a6 <_dtoa_r+0x88a>
800062a2:	30 1c       	mov	r12,1
800062a4:	c0 98       	rjmp	800062b6 <_dtoa_r+0x89a>
800062a6:	64 48       	ld.w	r8,r2[0x10]
800062a8:	2f c8       	sub	r8,-4
800062aa:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800062ae:	e0 a0 08 08 	rcall	800072be <__hi0bits>
800062b2:	f8 0c 11 20 	rsub	r12,r12,32
800062b6:	40 4b       	lddsp	r11,sp[0x10]
800062b8:	f8 0b 00 08 	add	r8,r12,r11
800062bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800062c0:	c0 c0       	breq	800062d8 <_dtoa_r+0x8bc>
800062c2:	f0 08 11 20 	rsub	r8,r8,32
800062c6:	58 48       	cp.w	r8,4
800062c8:	e0 8a 00 06 	brle	800062d4 <_dtoa_r+0x8b8>
800062cc:	20 48       	sub	r8,4
800062ce:	10 0b       	add	r11,r8
800062d0:	50 4b       	stdsp	sp[0x10],r11
800062d2:	c0 78       	rjmp	800062e0 <_dtoa_r+0x8c4>
800062d4:	58 48       	cp.w	r8,4
800062d6:	c0 70       	breq	800062e4 <_dtoa_r+0x8c8>
800062d8:	40 4a       	lddsp	r10,sp[0x10]
800062da:	2e 48       	sub	r8,-28
800062dc:	10 0a       	add	r10,r8
800062de:	50 4a       	stdsp	sp[0x10],r10
800062e0:	10 00       	add	r0,r8
800062e2:	10 05       	add	r5,r8
800062e4:	58 00       	cp.w	r0,0
800062e6:	e0 8a 00 08 	brle	800062f6 <_dtoa_r+0x8da>
800062ea:	06 9b       	mov	r11,r3
800062ec:	00 9a       	mov	r10,r0
800062ee:	0e 9c       	mov	r12,r7
800062f0:	e0 a0 09 82 	rcall	800075f4 <__lshift>
800062f4:	18 93       	mov	r3,r12
800062f6:	40 49       	lddsp	r9,sp[0x10]
800062f8:	58 09       	cp.w	r9,0
800062fa:	e0 8a 00 08 	brle	8000630a <_dtoa_r+0x8ee>
800062fe:	04 9b       	mov	r11,r2
80006300:	12 9a       	mov	r10,r9
80006302:	0e 9c       	mov	r12,r7
80006304:	e0 a0 09 78 	rcall	800075f4 <__lshift>
80006308:	18 92       	mov	r2,r12
8000630a:	41 48       	lddsp	r8,sp[0x50]
8000630c:	58 08       	cp.w	r8,0
8000630e:	c1 b0       	breq	80006344 <_dtoa_r+0x928>
80006310:	04 9b       	mov	r11,r2
80006312:	06 9c       	mov	r12,r3
80006314:	e0 a0 08 4c 	rcall	800073ac <__mcmp>
80006318:	c1 64       	brge	80006344 <_dtoa_r+0x928>
8000631a:	06 9b       	mov	r11,r3
8000631c:	30 09       	mov	r9,0
8000631e:	30 aa       	mov	r10,10
80006320:	0e 9c       	mov	r12,r7
80006322:	e0 a0 0a 35 	rcall	8000778c <__multadd>
80006326:	20 16       	sub	r6,1
80006328:	18 93       	mov	r3,r12
8000632a:	40 dc       	lddsp	r12,sp[0x34]
8000632c:	58 0c       	cp.w	r12,0
8000632e:	c0 31       	brne	80006334 <_dtoa_r+0x918>
80006330:	40 91       	lddsp	r1,sp[0x24]
80006332:	c0 98       	rjmp	80006344 <_dtoa_r+0x928>
80006334:	08 9b       	mov	r11,r4
80006336:	40 91       	lddsp	r1,sp[0x24]
80006338:	30 09       	mov	r9,0
8000633a:	30 aa       	mov	r10,10
8000633c:	0e 9c       	mov	r12,r7
8000633e:	e0 a0 0a 27 	rcall	8000778c <__multadd>
80006342:	18 94       	mov	r4,r12
80006344:	58 01       	cp.w	r1,0
80006346:	5f a9       	srle	r9
80006348:	40 cb       	lddsp	r11,sp[0x30]
8000634a:	58 2b       	cp.w	r11,2
8000634c:	5f 98       	srgt	r8
8000634e:	f3 e8 00 08 	and	r8,r9,r8
80006352:	c2 50       	breq	8000639c <_dtoa_r+0x980>
80006354:	58 01       	cp.w	r1,0
80006356:	c1 11       	brne	80006378 <_dtoa_r+0x95c>
80006358:	04 9b       	mov	r11,r2
8000635a:	02 99       	mov	r9,r1
8000635c:	30 5a       	mov	r10,5
8000635e:	0e 9c       	mov	r12,r7
80006360:	e0 a0 0a 16 	rcall	8000778c <__multadd>
80006364:	18 92       	mov	r2,r12
80006366:	18 9b       	mov	r11,r12
80006368:	06 9c       	mov	r12,r3
8000636a:	e0 a0 08 21 	rcall	800073ac <__mcmp>
8000636e:	e0 89 00 0f 	brgt	8000638c <_dtoa_r+0x970>
80006372:	c0 38       	rjmp	80006378 <_dtoa_r+0x95c>
80006374:	30 02       	mov	r2,0
80006376:	04 94       	mov	r4,r2
80006378:	40 ea       	lddsp	r10,sp[0x38]
8000637a:	30 09       	mov	r9,0
8000637c:	5c da       	com	r10
8000637e:	40 85       	lddsp	r5,sp[0x20]
80006380:	50 6a       	stdsp	sp[0x18],r10
80006382:	50 49       	stdsp	sp[0x10],r9
80006384:	c0 f9       	rjmp	800065a2 <_dtoa_r+0xb86>
80006386:	08 92       	mov	r2,r4
80006388:	40 66       	lddsp	r6,sp[0x18]
8000638a:	04 94       	mov	r4,r2
8000638c:	2f f6       	sub	r6,-1
8000638e:	50 66       	stdsp	sp[0x18],r6
80006390:	33 18       	mov	r8,49
80006392:	40 85       	lddsp	r5,sp[0x20]
80006394:	0a c8       	st.b	r5++,r8
80006396:	30 08       	mov	r8,0
80006398:	50 48       	stdsp	sp[0x10],r8
8000639a:	c0 49       	rjmp	800065a2 <_dtoa_r+0xb86>
8000639c:	40 dc       	lddsp	r12,sp[0x34]
8000639e:	58 0c       	cp.w	r12,0
800063a0:	e0 80 00 b5 	breq	8000650a <_dtoa_r+0xaee>
800063a4:	58 05       	cp.w	r5,0
800063a6:	e0 8a 00 08 	brle	800063b6 <_dtoa_r+0x99a>
800063aa:	08 9b       	mov	r11,r4
800063ac:	0a 9a       	mov	r10,r5
800063ae:	0e 9c       	mov	r12,r7
800063b0:	e0 a0 09 22 	rcall	800075f4 <__lshift>
800063b4:	18 94       	mov	r4,r12
800063b6:	40 6b       	lddsp	r11,sp[0x18]
800063b8:	58 0b       	cp.w	r11,0
800063ba:	c0 31       	brne	800063c0 <_dtoa_r+0x9a4>
800063bc:	08 9c       	mov	r12,r4
800063be:	c1 38       	rjmp	800063e4 <_dtoa_r+0x9c8>
800063c0:	68 1b       	ld.w	r11,r4[0x4]
800063c2:	0e 9c       	mov	r12,r7
800063c4:	e0 a0 08 28 	rcall	80007414 <_Balloc>
800063c8:	68 4a       	ld.w	r10,r4[0x10]
800063ca:	18 95       	mov	r5,r12
800063cc:	e8 cb ff f4 	sub	r11,r4,-12
800063d0:	2f ea       	sub	r10,-2
800063d2:	2f 4c       	sub	r12,-12
800063d4:	a3 6a       	lsl	r10,0x2
800063d6:	fe b0 e7 ef 	rcall	800033b4 <memcpy>
800063da:	0a 9b       	mov	r11,r5
800063dc:	30 1a       	mov	r10,1
800063de:	0e 9c       	mov	r12,r7
800063e0:	e0 a0 09 0a 	rcall	800075f4 <__lshift>
800063e4:	50 44       	stdsp	sp[0x10],r4
800063e6:	40 3a       	lddsp	r10,sp[0xc]
800063e8:	30 19       	mov	r9,1
800063ea:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800063ee:	18 94       	mov	r4,r12
800063f0:	50 da       	stdsp	sp[0x34],r10
800063f2:	40 85       	lddsp	r5,sp[0x20]
800063f4:	50 99       	stdsp	sp[0x24],r9
800063f6:	50 26       	stdsp	sp[0x8],r6
800063f8:	50 e1       	stdsp	sp[0x38],r1
800063fa:	04 9b       	mov	r11,r2
800063fc:	06 9c       	mov	r12,r3
800063fe:	fe b0 fa 7f 	rcall	800058fc <quorem>
80006402:	40 4b       	lddsp	r11,sp[0x10]
80006404:	f8 c0 ff d0 	sub	r0,r12,-48
80006408:	06 9c       	mov	r12,r3
8000640a:	e0 a0 07 d1 	rcall	800073ac <__mcmp>
8000640e:	08 9a       	mov	r10,r4
80006410:	50 6c       	stdsp	sp[0x18],r12
80006412:	04 9b       	mov	r11,r2
80006414:	0e 9c       	mov	r12,r7
80006416:	e0 a0 08 87 	rcall	80007524 <__mdiff>
8000641a:	18 91       	mov	r1,r12
8000641c:	78 38       	ld.w	r8,r12[0xc]
8000641e:	58 08       	cp.w	r8,0
80006420:	c0 30       	breq	80006426 <_dtoa_r+0xa0a>
80006422:	30 16       	mov	r6,1
80006424:	c0 68       	rjmp	80006430 <_dtoa_r+0xa14>
80006426:	18 9b       	mov	r11,r12
80006428:	06 9c       	mov	r12,r3
8000642a:	e0 a0 07 c1 	rcall	800073ac <__mcmp>
8000642e:	18 96       	mov	r6,r12
80006430:	0e 9c       	mov	r12,r7
80006432:	02 9b       	mov	r11,r1
80006434:	e0 a0 07 d6 	rcall	800073e0 <_Bfree>
80006438:	40 cc       	lddsp	r12,sp[0x30]
8000643a:	ed ec 10 08 	or	r8,r6,r12
8000643e:	c0 d1       	brne	80006458 <_dtoa_r+0xa3c>
80006440:	40 db       	lddsp	r11,sp[0x34]
80006442:	58 0b       	cp.w	r11,0
80006444:	c0 a1       	brne	80006458 <_dtoa_r+0xa3c>
80006446:	40 26       	lddsp	r6,sp[0x8]
80006448:	e0 40 00 39 	cp.w	r0,57
8000644c:	c3 00       	breq	800064ac <_dtoa_r+0xa90>
8000644e:	40 6a       	lddsp	r10,sp[0x18]
80006450:	58 0a       	cp.w	r10,0
80006452:	e0 89 00 24 	brgt	8000649a <_dtoa_r+0xa7e>
80006456:	c2 f8       	rjmp	800064b4 <_dtoa_r+0xa98>
80006458:	40 69       	lddsp	r9,sp[0x18]
8000645a:	58 09       	cp.w	r9,0
8000645c:	c0 85       	brlt	8000646c <_dtoa_r+0xa50>
8000645e:	12 98       	mov	r8,r9
80006460:	40 cc       	lddsp	r12,sp[0x30]
80006462:	18 48       	or	r8,r12
80006464:	c1 d1       	brne	8000649e <_dtoa_r+0xa82>
80006466:	40 db       	lddsp	r11,sp[0x34]
80006468:	58 0b       	cp.w	r11,0
8000646a:	c1 a1       	brne	8000649e <_dtoa_r+0xa82>
8000646c:	0c 99       	mov	r9,r6
8000646e:	40 26       	lddsp	r6,sp[0x8]
80006470:	58 09       	cp.w	r9,0
80006472:	e0 8a 00 21 	brle	800064b4 <_dtoa_r+0xa98>
80006476:	06 9b       	mov	r11,r3
80006478:	30 1a       	mov	r10,1
8000647a:	0e 9c       	mov	r12,r7
8000647c:	e0 a0 08 bc 	rcall	800075f4 <__lshift>
80006480:	04 9b       	mov	r11,r2
80006482:	18 93       	mov	r3,r12
80006484:	e0 a0 07 94 	rcall	800073ac <__mcmp>
80006488:	e0 89 00 06 	brgt	80006494 <_dtoa_r+0xa78>
8000648c:	c1 41       	brne	800064b4 <_dtoa_r+0xa98>
8000648e:	ed b0 00 00 	bld	r0,0x0
80006492:	c1 11       	brne	800064b4 <_dtoa_r+0xa98>
80006494:	e0 40 00 39 	cp.w	r0,57
80006498:	c0 a0       	breq	800064ac <_dtoa_r+0xa90>
8000649a:	2f f0       	sub	r0,-1
8000649c:	c0 c8       	rjmp	800064b4 <_dtoa_r+0xa98>
8000649e:	58 06       	cp.w	r6,0
800064a0:	e0 8a 00 0c 	brle	800064b8 <_dtoa_r+0xa9c>
800064a4:	40 26       	lddsp	r6,sp[0x8]
800064a6:	e0 40 00 39 	cp.w	r0,57
800064aa:	c0 41       	brne	800064b2 <_dtoa_r+0xa96>
800064ac:	33 98       	mov	r8,57
800064ae:	0a c8       	st.b	r5++,r8
800064b0:	c6 78       	rjmp	8000657e <_dtoa_r+0xb62>
800064b2:	2f f0       	sub	r0,-1
800064b4:	0a c0       	st.b	r5++,r0
800064b6:	c7 58       	rjmp	800065a0 <_dtoa_r+0xb84>
800064b8:	0a c0       	st.b	r5++,r0
800064ba:	40 9a       	lddsp	r10,sp[0x24]
800064bc:	40 e9       	lddsp	r9,sp[0x38]
800064be:	12 3a       	cp.w	r10,r9
800064c0:	c4 30       	breq	80006546 <_dtoa_r+0xb2a>
800064c2:	06 9b       	mov	r11,r3
800064c4:	30 09       	mov	r9,0
800064c6:	30 aa       	mov	r10,10
800064c8:	0e 9c       	mov	r12,r7
800064ca:	e0 a0 09 61 	rcall	8000778c <__multadd>
800064ce:	40 48       	lddsp	r8,sp[0x10]
800064d0:	18 93       	mov	r3,r12
800064d2:	08 38       	cp.w	r8,r4
800064d4:	c0 91       	brne	800064e6 <_dtoa_r+0xaca>
800064d6:	10 9b       	mov	r11,r8
800064d8:	30 09       	mov	r9,0
800064da:	30 aa       	mov	r10,10
800064dc:	0e 9c       	mov	r12,r7
800064de:	e0 a0 09 57 	rcall	8000778c <__multadd>
800064e2:	50 4c       	stdsp	sp[0x10],r12
800064e4:	c0 e8       	rjmp	80006500 <_dtoa_r+0xae4>
800064e6:	40 4b       	lddsp	r11,sp[0x10]
800064e8:	30 09       	mov	r9,0
800064ea:	30 aa       	mov	r10,10
800064ec:	0e 9c       	mov	r12,r7
800064ee:	e0 a0 09 4f 	rcall	8000778c <__multadd>
800064f2:	08 9b       	mov	r11,r4
800064f4:	50 4c       	stdsp	sp[0x10],r12
800064f6:	30 09       	mov	r9,0
800064f8:	30 aa       	mov	r10,10
800064fa:	0e 9c       	mov	r12,r7
800064fc:	e0 a0 09 48 	rcall	8000778c <__multadd>
80006500:	18 94       	mov	r4,r12
80006502:	40 9c       	lddsp	r12,sp[0x24]
80006504:	2f fc       	sub	r12,-1
80006506:	50 9c       	stdsp	sp[0x24],r12
80006508:	c7 9b       	rjmp	800063fa <_dtoa_r+0x9de>
8000650a:	30 18       	mov	r8,1
8000650c:	06 90       	mov	r0,r3
8000650e:	40 85       	lddsp	r5,sp[0x20]
80006510:	08 93       	mov	r3,r4
80006512:	0c 94       	mov	r4,r6
80006514:	10 96       	mov	r6,r8
80006516:	04 9b       	mov	r11,r2
80006518:	00 9c       	mov	r12,r0
8000651a:	fe b0 f9 f1 	rcall	800058fc <quorem>
8000651e:	2d 0c       	sub	r12,-48
80006520:	0a cc       	st.b	r5++,r12
80006522:	02 36       	cp.w	r6,r1
80006524:	c0 a4       	brge	80006538 <_dtoa_r+0xb1c>
80006526:	00 9b       	mov	r11,r0
80006528:	30 09       	mov	r9,0
8000652a:	30 aa       	mov	r10,10
8000652c:	0e 9c       	mov	r12,r7
8000652e:	2f f6       	sub	r6,-1
80006530:	e0 a0 09 2e 	rcall	8000778c <__multadd>
80006534:	18 90       	mov	r0,r12
80006536:	cf 0b       	rjmp	80006516 <_dtoa_r+0xafa>
80006538:	08 96       	mov	r6,r4
8000653a:	30 0b       	mov	r11,0
8000653c:	06 94       	mov	r4,r3
8000653e:	50 4b       	stdsp	sp[0x10],r11
80006540:	00 93       	mov	r3,r0
80006542:	18 90       	mov	r0,r12
80006544:	c0 28       	rjmp	80006548 <_dtoa_r+0xb2c>
80006546:	40 26       	lddsp	r6,sp[0x8]
80006548:	06 9b       	mov	r11,r3
8000654a:	30 1a       	mov	r10,1
8000654c:	0e 9c       	mov	r12,r7
8000654e:	e0 a0 08 53 	rcall	800075f4 <__lshift>
80006552:	04 9b       	mov	r11,r2
80006554:	18 93       	mov	r3,r12
80006556:	e0 a0 07 2b 	rcall	800073ac <__mcmp>
8000655a:	e0 89 00 12 	brgt	8000657e <_dtoa_r+0xb62>
8000655e:	c1 b1       	brne	80006594 <_dtoa_r+0xb78>
80006560:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006564:	c0 d1       	brne	8000657e <_dtoa_r+0xb62>
80006566:	c1 78       	rjmp	80006594 <_dtoa_r+0xb78>
80006568:	40 89       	lddsp	r9,sp[0x20]
8000656a:	12 38       	cp.w	r8,r9
8000656c:	c0 30       	breq	80006572 <_dtoa_r+0xb56>
8000656e:	10 95       	mov	r5,r8
80006570:	c0 88       	rjmp	80006580 <_dtoa_r+0xb64>
80006572:	2f f6       	sub	r6,-1
80006574:	50 66       	stdsp	sp[0x18],r6
80006576:	33 18       	mov	r8,49
80006578:	40 8c       	lddsp	r12,sp[0x20]
8000657a:	b8 88       	st.b	r12[0x0],r8
8000657c:	c1 38       	rjmp	800065a2 <_dtoa_r+0xb86>
8000657e:	33 9a       	mov	r10,57
80006580:	0a 98       	mov	r8,r5
80006582:	11 79       	ld.ub	r9,--r8
80006584:	f4 09 18 00 	cp.b	r9,r10
80006588:	cf 00       	breq	80006568 <_dtoa_r+0xb4c>
8000658a:	2f f9       	sub	r9,-1
8000658c:	b0 89       	st.b	r8[0x0],r9
8000658e:	c0 98       	rjmp	800065a0 <_dtoa_r+0xb84>
80006590:	10 95       	mov	r5,r8
80006592:	c0 28       	rjmp	80006596 <_dtoa_r+0xb7a>
80006594:	33 09       	mov	r9,48
80006596:	0a 98       	mov	r8,r5
80006598:	11 7a       	ld.ub	r10,--r8
8000659a:	f2 0a 18 00 	cp.b	r10,r9
8000659e:	cf 90       	breq	80006590 <_dtoa_r+0xb74>
800065a0:	50 66       	stdsp	sp[0x18],r6
800065a2:	04 9b       	mov	r11,r2
800065a4:	0e 9c       	mov	r12,r7
800065a6:	e0 a0 07 1d 	rcall	800073e0 <_Bfree>
800065aa:	58 04       	cp.w	r4,0
800065ac:	c1 20       	breq	800065d0 <_dtoa_r+0xbb4>
800065ae:	40 4b       	lddsp	r11,sp[0x10]
800065b0:	08 3b       	cp.w	r11,r4
800065b2:	5f 19       	srne	r9
800065b4:	58 0b       	cp.w	r11,0
800065b6:	5f 18       	srne	r8
800065b8:	f3 e8 00 08 	and	r8,r9,r8
800065bc:	c0 40       	breq	800065c4 <_dtoa_r+0xba8>
800065be:	0e 9c       	mov	r12,r7
800065c0:	e0 a0 07 10 	rcall	800073e0 <_Bfree>
800065c4:	08 9b       	mov	r11,r4
800065c6:	0e 9c       	mov	r12,r7
800065c8:	e0 a0 07 0c 	rcall	800073e0 <_Bfree>
800065cc:	c0 28       	rjmp	800065d0 <_dtoa_r+0xbb4>
800065ce:	50 66       	stdsp	sp[0x18],r6
800065d0:	0e 9c       	mov	r12,r7
800065d2:	06 9b       	mov	r11,r3
800065d4:	e0 a0 07 06 	rcall	800073e0 <_Bfree>
800065d8:	30 08       	mov	r8,0
800065da:	aa 88       	st.b	r5[0x0],r8
800065dc:	40 68       	lddsp	r8,sp[0x18]
800065de:	41 5a       	lddsp	r10,sp[0x54]
800065e0:	2f f8       	sub	r8,-1
800065e2:	41 29       	lddsp	r9,sp[0x48]
800065e4:	95 08       	st.w	r10[0x0],r8
800065e6:	40 8c       	lddsp	r12,sp[0x20]
800065e8:	58 09       	cp.w	r9,0
800065ea:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800065ee:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800065f2:	2e 6d       	sub	sp,-104
800065f4:	d8 32       	popm	r0-r7,pc
800065f6:	d7 03       	nop

800065f8 <_fflush_r>:
800065f8:	d4 21       	pushm	r4-r7,lr
800065fa:	16 97       	mov	r7,r11
800065fc:	18 96       	mov	r6,r12
800065fe:	76 48       	ld.w	r8,r11[0x10]
80006600:	58 08       	cp.w	r8,0
80006602:	c7 f0       	breq	80006700 <_fflush_r+0x108>
80006604:	58 0c       	cp.w	r12,0
80006606:	c0 50       	breq	80006610 <_fflush_r+0x18>
80006608:	78 68       	ld.w	r8,r12[0x18]
8000660a:	58 08       	cp.w	r8,0
8000660c:	c0 21       	brne	80006610 <_fflush_r+0x18>
8000660e:	cc dc       	rcall	800067a8 <__sinit>
80006610:	fe c8 b7 d0 	sub	r8,pc,-18480
80006614:	10 37       	cp.w	r7,r8
80006616:	c0 31       	brne	8000661c <_fflush_r+0x24>
80006618:	6c 07       	ld.w	r7,r6[0x0]
8000661a:	c0 c8       	rjmp	80006632 <_fflush_r+0x3a>
8000661c:	fe c8 b7 bc 	sub	r8,pc,-18500
80006620:	10 37       	cp.w	r7,r8
80006622:	c0 31       	brne	80006628 <_fflush_r+0x30>
80006624:	6c 17       	ld.w	r7,r6[0x4]
80006626:	c0 68       	rjmp	80006632 <_fflush_r+0x3a>
80006628:	fe c8 b7 a8 	sub	r8,pc,-18520
8000662c:	10 37       	cp.w	r7,r8
8000662e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006632:	8e 6a       	ld.sh	r10,r7[0xc]
80006634:	14 98       	mov	r8,r10
80006636:	ed ba 00 03 	bld	r10,0x3
8000663a:	c4 20       	breq	800066be <_fflush_r+0xc6>
8000663c:	ab ba       	sbr	r10,0xb
8000663e:	ae 6a       	st.h	r7[0xc],r10
80006640:	6e 18       	ld.w	r8,r7[0x4]
80006642:	58 08       	cp.w	r8,0
80006644:	e0 89 00 06 	brgt	80006650 <_fflush_r+0x58>
80006648:	6f 08       	ld.w	r8,r7[0x40]
8000664a:	58 08       	cp.w	r8,0
8000664c:	e0 8a 00 5a 	brle	80006700 <_fflush_r+0x108>
80006650:	6e b8       	ld.w	r8,r7[0x2c]
80006652:	58 08       	cp.w	r8,0
80006654:	c5 60       	breq	80006700 <_fflush_r+0x108>
80006656:	e2 1a 10 00 	andl	r10,0x1000,COH
8000665a:	c0 30       	breq	80006660 <_fflush_r+0x68>
8000665c:	6f 55       	ld.w	r5,r7[0x54]
8000665e:	c0 f8       	rjmp	8000667c <_fflush_r+0x84>
80006660:	30 19       	mov	r9,1
80006662:	6e 8b       	ld.w	r11,r7[0x20]
80006664:	0c 9c       	mov	r12,r6
80006666:	5d 18       	icall	r8
80006668:	18 95       	mov	r5,r12
8000666a:	5b fc       	cp.w	r12,-1
8000666c:	c0 81       	brne	8000667c <_fflush_r+0x84>
8000666e:	6c 38       	ld.w	r8,r6[0xc]
80006670:	59 d8       	cp.w	r8,29
80006672:	c4 70       	breq	80006700 <_fflush_r+0x108>
80006674:	8e 68       	ld.sh	r8,r7[0xc]
80006676:	a7 a8       	sbr	r8,0x6
80006678:	ae 68       	st.h	r7[0xc],r8
8000667a:	d8 22       	popm	r4-r7,pc
8000667c:	8e 68       	ld.sh	r8,r7[0xc]
8000667e:	ed b8 00 02 	bld	r8,0x2
80006682:	c0 91       	brne	80006694 <_fflush_r+0x9c>
80006684:	6e 18       	ld.w	r8,r7[0x4]
80006686:	10 15       	sub	r5,r8
80006688:	6e d8       	ld.w	r8,r7[0x34]
8000668a:	58 08       	cp.w	r8,0
8000668c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006690:	eb d8 e1 15 	subne	r5,r5,r8
80006694:	6e b8       	ld.w	r8,r7[0x2c]
80006696:	0c 9c       	mov	r12,r6
80006698:	30 09       	mov	r9,0
8000669a:	0a 9a       	mov	r10,r5
8000669c:	6e 8b       	ld.w	r11,r7[0x20]
8000669e:	5d 18       	icall	r8
800066a0:	8e 68       	ld.sh	r8,r7[0xc]
800066a2:	0a 3c       	cp.w	r12,r5
800066a4:	c2 61       	brne	800066f0 <_fflush_r+0xf8>
800066a6:	ab d8       	cbr	r8,0xb
800066a8:	30 0c       	mov	r12,0
800066aa:	6e 49       	ld.w	r9,r7[0x10]
800066ac:	ae 68       	st.h	r7[0xc],r8
800066ae:	8f 1c       	st.w	r7[0x4],r12
800066b0:	8f 09       	st.w	r7[0x0],r9
800066b2:	ed b8 00 0c 	bld	r8,0xc
800066b6:	c2 51       	brne	80006700 <_fflush_r+0x108>
800066b8:	ef 45 00 54 	st.w	r7[84],r5
800066bc:	d8 22       	popm	r4-r7,pc
800066be:	6e 45       	ld.w	r5,r7[0x10]
800066c0:	58 05       	cp.w	r5,0
800066c2:	c1 f0       	breq	80006700 <_fflush_r+0x108>
800066c4:	6e 04       	ld.w	r4,r7[0x0]
800066c6:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800066ca:	8f 05       	st.w	r7[0x0],r5
800066cc:	f9 b8 01 00 	movne	r8,0
800066d0:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800066d4:	0a 14       	sub	r4,r5
800066d6:	8f 28       	st.w	r7[0x8],r8
800066d8:	c1 18       	rjmp	800066fa <_fflush_r+0x102>
800066da:	08 99       	mov	r9,r4
800066dc:	0a 9a       	mov	r10,r5
800066de:	6e a8       	ld.w	r8,r7[0x28]
800066e0:	6e 8b       	ld.w	r11,r7[0x20]
800066e2:	0c 9c       	mov	r12,r6
800066e4:	5d 18       	icall	r8
800066e6:	18 14       	sub	r4,r12
800066e8:	58 0c       	cp.w	r12,0
800066ea:	e0 89 00 07 	brgt	800066f8 <_fflush_r+0x100>
800066ee:	8e 68       	ld.sh	r8,r7[0xc]
800066f0:	a7 a8       	sbr	r8,0x6
800066f2:	3f fc       	mov	r12,-1
800066f4:	ae 68       	st.h	r7[0xc],r8
800066f6:	d8 22       	popm	r4-r7,pc
800066f8:	18 05       	add	r5,r12
800066fa:	58 04       	cp.w	r4,0
800066fc:	fe 99 ff ef 	brgt	800066da <_fflush_r+0xe2>
80006700:	d8 2a       	popm	r4-r7,pc,r12=0
80006702:	d7 03       	nop

80006704 <__sfp_lock_acquire>:
80006704:	5e fc       	retal	r12

80006706 <__sfp_lock_release>:
80006706:	5e fc       	retal	r12

80006708 <_cleanup_r>:
80006708:	d4 01       	pushm	lr
8000670a:	fe cb e8 6a 	sub	r11,pc,-6038
8000670e:	e0 a0 02 fd 	rcall	80006d08 <_fwalk>
80006712:	d8 02       	popm	pc

80006714 <__sfmoreglue>:
80006714:	d4 21       	pushm	r4-r7,lr
80006716:	16 95       	mov	r5,r11
80006718:	f6 06 10 5c 	mul	r6,r11,92
8000671c:	ec cb ff f4 	sub	r11,r6,-12
80006720:	e0 a0 03 84 	rcall	80006e28 <_malloc_r>
80006724:	18 97       	mov	r7,r12
80006726:	c0 90       	breq	80006738 <__sfmoreglue+0x24>
80006728:	99 15       	st.w	r12[0x4],r5
8000672a:	30 0b       	mov	r11,0
8000672c:	2f 4c       	sub	r12,-12
8000672e:	0c 9a       	mov	r10,r6
80006730:	8f 2c       	st.w	r7[0x8],r12
80006732:	8f 0b       	st.w	r7[0x0],r11
80006734:	e0 a0 05 bc 	rcall	800072ac <memset>
80006738:	0e 9c       	mov	r12,r7
8000673a:	d8 22       	popm	r4-r7,pc

8000673c <__sfp>:
8000673c:	d4 21       	pushm	r4-r7,lr
8000673e:	fe c8 b8 9a 	sub	r8,pc,-18278
80006742:	18 96       	mov	r6,r12
80006744:	70 07       	ld.w	r7,r8[0x0]
80006746:	6e 68       	ld.w	r8,r7[0x18]
80006748:	58 08       	cp.w	r8,0
8000674a:	c0 31       	brne	80006750 <__sfp+0x14>
8000674c:	0e 9c       	mov	r12,r7
8000674e:	c2 dc       	rcall	800067a8 <__sinit>
80006750:	ee c7 ff 28 	sub	r7,r7,-216
80006754:	30 05       	mov	r5,0
80006756:	6e 2c       	ld.w	r12,r7[0x8]
80006758:	6e 18       	ld.w	r8,r7[0x4]
8000675a:	c0 68       	rjmp	80006766 <__sfp+0x2a>
8000675c:	98 69       	ld.sh	r9,r12[0xc]
8000675e:	ea 09 19 00 	cp.h	r9,r5
80006762:	c1 10       	breq	80006784 <__sfp+0x48>
80006764:	2a 4c       	sub	r12,-92
80006766:	20 18       	sub	r8,1
80006768:	cf a7       	brpl	8000675c <__sfp+0x20>
8000676a:	6e 08       	ld.w	r8,r7[0x0]
8000676c:	58 08       	cp.w	r8,0
8000676e:	c0 61       	brne	8000677a <__sfp+0x3e>
80006770:	30 4b       	mov	r11,4
80006772:	0c 9c       	mov	r12,r6
80006774:	cd 0f       	rcall	80006714 <__sfmoreglue>
80006776:	8f 0c       	st.w	r7[0x0],r12
80006778:	c0 30       	breq	8000677e <__sfp+0x42>
8000677a:	6e 07       	ld.w	r7,r7[0x0]
8000677c:	ce db       	rjmp	80006756 <__sfp+0x1a>
8000677e:	30 c8       	mov	r8,12
80006780:	8d 38       	st.w	r6[0xc],r8
80006782:	d8 22       	popm	r4-r7,pc
80006784:	30 08       	mov	r8,0
80006786:	f9 48 00 4c 	st.w	r12[76],r8
8000678a:	99 08       	st.w	r12[0x0],r8
8000678c:	99 28       	st.w	r12[0x8],r8
8000678e:	99 18       	st.w	r12[0x4],r8
80006790:	99 48       	st.w	r12[0x10],r8
80006792:	99 58       	st.w	r12[0x14],r8
80006794:	99 68       	st.w	r12[0x18],r8
80006796:	99 d8       	st.w	r12[0x34],r8
80006798:	99 e8       	st.w	r12[0x38],r8
8000679a:	f9 48 00 48 	st.w	r12[72],r8
8000679e:	3f f8       	mov	r8,-1
800067a0:	b8 78       	st.h	r12[0xe],r8
800067a2:	30 18       	mov	r8,1
800067a4:	b8 68       	st.h	r12[0xc],r8
800067a6:	d8 22       	popm	r4-r7,pc

800067a8 <__sinit>:
800067a8:	d4 21       	pushm	r4-r7,lr
800067aa:	18 96       	mov	r6,r12
800067ac:	78 67       	ld.w	r7,r12[0x18]
800067ae:	58 07       	cp.w	r7,0
800067b0:	c4 91       	brne	80006842 <__sinit+0x9a>
800067b2:	fe c8 00 aa 	sub	r8,pc,170
800067b6:	30 15       	mov	r5,1
800067b8:	99 a8       	st.w	r12[0x28],r8
800067ba:	f9 47 00 d8 	st.w	r12[216],r7
800067be:	f9 47 00 dc 	st.w	r12[220],r7
800067c2:	f9 47 00 e0 	st.w	r12[224],r7
800067c6:	99 65       	st.w	r12[0x18],r5
800067c8:	cb af       	rcall	8000673c <__sfp>
800067ca:	8d 0c       	st.w	r6[0x0],r12
800067cc:	0c 9c       	mov	r12,r6
800067ce:	cb 7f       	rcall	8000673c <__sfp>
800067d0:	8d 1c       	st.w	r6[0x4],r12
800067d2:	0c 9c       	mov	r12,r6
800067d4:	cb 4f       	rcall	8000673c <__sfp>
800067d6:	6c 09       	ld.w	r9,r6[0x0]
800067d8:	30 48       	mov	r8,4
800067da:	93 07       	st.w	r9[0x0],r7
800067dc:	b2 68       	st.h	r9[0xc],r8
800067de:	93 17       	st.w	r9[0x4],r7
800067e0:	93 27       	st.w	r9[0x8],r7
800067e2:	6c 18       	ld.w	r8,r6[0x4]
800067e4:	b2 77       	st.h	r9[0xe],r7
800067e6:	93 47       	st.w	r9[0x10],r7
800067e8:	93 57       	st.w	r9[0x14],r7
800067ea:	93 67       	st.w	r9[0x18],r7
800067ec:	93 89       	st.w	r9[0x20],r9
800067ee:	91 07       	st.w	r8[0x0],r7
800067f0:	91 17       	st.w	r8[0x4],r7
800067f2:	91 27       	st.w	r8[0x8],r7
800067f4:	fe ce eb e4 	sub	lr,pc,-5148
800067f8:	fe cb ec 14 	sub	r11,pc,-5100
800067fc:	93 9e       	st.w	r9[0x24],lr
800067fe:	93 ab       	st.w	r9[0x28],r11
80006800:	fe ca ec 3c 	sub	r10,pc,-5060
80006804:	fe c4 ec 48 	sub	r4,pc,-5048
80006808:	93 ba       	st.w	r9[0x2c],r10
8000680a:	93 c4       	st.w	r9[0x30],r4
8000680c:	30 99       	mov	r9,9
8000680e:	b0 69       	st.h	r8[0xc],r9
80006810:	b0 75       	st.h	r8[0xe],r5
80006812:	91 c4       	st.w	r8[0x30],r4
80006814:	91 47       	st.w	r8[0x10],r7
80006816:	91 57       	st.w	r8[0x14],r7
80006818:	91 67       	st.w	r8[0x18],r7
8000681a:	91 88       	st.w	r8[0x20],r8
8000681c:	91 9e       	st.w	r8[0x24],lr
8000681e:	91 ab       	st.w	r8[0x28],r11
80006820:	91 ba       	st.w	r8[0x2c],r10
80006822:	8d 2c       	st.w	r6[0x8],r12
80006824:	31 28       	mov	r8,18
80006826:	99 07       	st.w	r12[0x0],r7
80006828:	b8 68       	st.h	r12[0xc],r8
8000682a:	99 17       	st.w	r12[0x4],r7
8000682c:	99 27       	st.w	r12[0x8],r7
8000682e:	30 28       	mov	r8,2
80006830:	b8 78       	st.h	r12[0xe],r8
80006832:	99 c4       	st.w	r12[0x30],r4
80006834:	99 67       	st.w	r12[0x18],r7
80006836:	99 9e       	st.w	r12[0x24],lr
80006838:	99 ab       	st.w	r12[0x28],r11
8000683a:	99 ba       	st.w	r12[0x2c],r10
8000683c:	99 47       	st.w	r12[0x10],r7
8000683e:	99 57       	st.w	r12[0x14],r7
80006840:	99 8c       	st.w	r12[0x20],r12
80006842:	d8 22       	popm	r4-r7,pc

80006844 <_malloc_trim_r>:
80006844:	d4 21       	pushm	r4-r7,lr
80006846:	16 95       	mov	r5,r11
80006848:	18 97       	mov	r7,r12
8000684a:	e0 a0 05 38 	rcall	800072ba <__malloc_lock>
8000684e:	e0 64 00 fc 	mov	r4,252
80006852:	68 28       	ld.w	r8,r4[0x8]
80006854:	70 16       	ld.w	r6,r8[0x4]
80006856:	e0 16 ff fc 	andl	r6,0xfffc
8000685a:	ec c8 ff 91 	sub	r8,r6,-111
8000685e:	f0 05 01 05 	sub	r5,r8,r5
80006862:	e0 15 ff 80 	andl	r5,0xff80
80006866:	ea c5 00 80 	sub	r5,r5,128
8000686a:	e0 45 00 7f 	cp.w	r5,127
8000686e:	e0 8a 00 25 	brle	800068b8 <_malloc_trim_r+0x74>
80006872:	30 0b       	mov	r11,0
80006874:	0e 9c       	mov	r12,r7
80006876:	e0 a0 09 93 	rcall	80007b9c <_sbrk_r>
8000687a:	68 28       	ld.w	r8,r4[0x8]
8000687c:	0c 08       	add	r8,r6
8000687e:	10 3c       	cp.w	r12,r8
80006880:	c1 c1       	brne	800068b8 <_malloc_trim_r+0x74>
80006882:	ea 0b 11 00 	rsub	r11,r5,0
80006886:	0e 9c       	mov	r12,r7
80006888:	e0 a0 09 8a 	rcall	80007b9c <_sbrk_r>
8000688c:	5b fc       	cp.w	r12,-1
8000688e:	c1 91       	brne	800068c0 <_malloc_trim_r+0x7c>
80006890:	30 0b       	mov	r11,0
80006892:	0e 9c       	mov	r12,r7
80006894:	e0 a0 09 84 	rcall	80007b9c <_sbrk_r>
80006898:	68 28       	ld.w	r8,r4[0x8]
8000689a:	f8 08 01 09 	sub	r9,r12,r8
8000689e:	58 f9       	cp.w	r9,15
800068a0:	e0 8a 00 0c 	brle	800068b8 <_malloc_trim_r+0x74>
800068a4:	a1 a9       	sbr	r9,0x0
800068a6:	91 19       	st.w	r8[0x4],r9
800068a8:	e0 68 05 08 	mov	r8,1288
800068ac:	70 09       	ld.w	r9,r8[0x0]
800068ae:	e0 68 07 34 	mov	r8,1844
800068b2:	f8 09 01 09 	sub	r9,r12,r9
800068b6:	91 09       	st.w	r8[0x0],r9
800068b8:	0e 9c       	mov	r12,r7
800068ba:	e0 a0 05 01 	rcall	800072bc <__malloc_unlock>
800068be:	d8 2a       	popm	r4-r7,pc,r12=0
800068c0:	68 28       	ld.w	r8,r4[0x8]
800068c2:	0a 16       	sub	r6,r5
800068c4:	a1 a6       	sbr	r6,0x0
800068c6:	91 16       	st.w	r8[0x4],r6
800068c8:	e0 68 07 34 	mov	r8,1844
800068cc:	70 09       	ld.w	r9,r8[0x0]
800068ce:	0a 19       	sub	r9,r5
800068d0:	0e 9c       	mov	r12,r7
800068d2:	91 09       	st.w	r8[0x0],r9
800068d4:	e0 a0 04 f4 	rcall	800072bc <__malloc_unlock>
800068d8:	da 2a       	popm	r4-r7,pc,r12=1
800068da:	d7 03       	nop

800068dc <_free_r>:
800068dc:	d4 21       	pushm	r4-r7,lr
800068de:	16 96       	mov	r6,r11
800068e0:	18 97       	mov	r7,r12
800068e2:	58 0b       	cp.w	r11,0
800068e4:	e0 80 00 c0 	breq	80006a64 <_free_r+0x188>
800068e8:	e0 a0 04 e9 	rcall	800072ba <__malloc_lock>
800068ec:	20 86       	sub	r6,8
800068ee:	e0 6a 00 fc 	mov	r10,252
800068f2:	6c 18       	ld.w	r8,r6[0x4]
800068f4:	74 2e       	ld.w	lr,r10[0x8]
800068f6:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800068fa:	a1 c8       	cbr	r8,0x0
800068fc:	ec 08 00 09 	add	r9,r6,r8
80006900:	72 1b       	ld.w	r11,r9[0x4]
80006902:	e0 1b ff fc 	andl	r11,0xfffc
80006906:	1c 39       	cp.w	r9,lr
80006908:	c1 e1       	brne	80006944 <_free_r+0x68>
8000690a:	f6 08 00 08 	add	r8,r11,r8
8000690e:	58 0c       	cp.w	r12,0
80006910:	c0 81       	brne	80006920 <_free_r+0x44>
80006912:	6c 09       	ld.w	r9,r6[0x0]
80006914:	12 16       	sub	r6,r9
80006916:	12 08       	add	r8,r9
80006918:	6c 3b       	ld.w	r11,r6[0xc]
8000691a:	6c 29       	ld.w	r9,r6[0x8]
8000691c:	97 29       	st.w	r11[0x8],r9
8000691e:	93 3b       	st.w	r9[0xc],r11
80006920:	10 99       	mov	r9,r8
80006922:	95 26       	st.w	r10[0x8],r6
80006924:	a1 a9       	sbr	r9,0x0
80006926:	8d 19       	st.w	r6[0x4],r9
80006928:	e0 69 05 04 	mov	r9,1284
8000692c:	72 09       	ld.w	r9,r9[0x0]
8000692e:	12 38       	cp.w	r8,r9
80006930:	c0 63       	brcs	8000693c <_free_r+0x60>
80006932:	e0 68 07 30 	mov	r8,1840
80006936:	0e 9c       	mov	r12,r7
80006938:	70 0b       	ld.w	r11,r8[0x0]
8000693a:	c8 5f       	rcall	80006844 <_malloc_trim_r>
8000693c:	0e 9c       	mov	r12,r7
8000693e:	e0 a0 04 bf 	rcall	800072bc <__malloc_unlock>
80006942:	d8 22       	popm	r4-r7,pc
80006944:	93 1b       	st.w	r9[0x4],r11
80006946:	58 0c       	cp.w	r12,0
80006948:	c0 30       	breq	8000694e <_free_r+0x72>
8000694a:	30 0c       	mov	r12,0
8000694c:	c1 08       	rjmp	8000696c <_free_r+0x90>
8000694e:	6c 0e       	ld.w	lr,r6[0x0]
80006950:	f4 c5 ff f8 	sub	r5,r10,-8
80006954:	1c 16       	sub	r6,lr
80006956:	1c 08       	add	r8,lr
80006958:	6c 2e       	ld.w	lr,r6[0x8]
8000695a:	0a 3e       	cp.w	lr,r5
8000695c:	f9 bc 00 01 	moveq	r12,1
80006960:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006964:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006968:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000696c:	f2 0b 00 0e 	add	lr,r9,r11
80006970:	7c 1e       	ld.w	lr,lr[0x4]
80006972:	ed be 00 00 	bld	lr,0x0
80006976:	c1 40       	breq	8000699e <_free_r+0xc2>
80006978:	16 08       	add	r8,r11
8000697a:	58 0c       	cp.w	r12,0
8000697c:	c0 d1       	brne	80006996 <_free_r+0xba>
8000697e:	e0 6e 00 fc 	mov	lr,252
80006982:	72 2b       	ld.w	r11,r9[0x8]
80006984:	2f 8e       	sub	lr,-8
80006986:	1c 3b       	cp.w	r11,lr
80006988:	c0 71       	brne	80006996 <_free_r+0xba>
8000698a:	97 36       	st.w	r11[0xc],r6
8000698c:	97 26       	st.w	r11[0x8],r6
8000698e:	8d 2b       	st.w	r6[0x8],r11
80006990:	8d 3b       	st.w	r6[0xc],r11
80006992:	30 1c       	mov	r12,1
80006994:	c0 58       	rjmp	8000699e <_free_r+0xc2>
80006996:	72 2b       	ld.w	r11,r9[0x8]
80006998:	72 39       	ld.w	r9,r9[0xc]
8000699a:	93 2b       	st.w	r9[0x8],r11
8000699c:	97 39       	st.w	r11[0xc],r9
8000699e:	10 99       	mov	r9,r8
800069a0:	ec 08 09 08 	st.w	r6[r8],r8
800069a4:	a1 a9       	sbr	r9,0x0
800069a6:	8d 19       	st.w	r6[0x4],r9
800069a8:	58 0c       	cp.w	r12,0
800069aa:	c5 a1       	brne	80006a5e <_free_r+0x182>
800069ac:	e0 48 01 ff 	cp.w	r8,511
800069b0:	e0 8b 00 13 	brhi	800069d6 <_free_r+0xfa>
800069b4:	a3 98       	lsr	r8,0x3
800069b6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800069ba:	72 2b       	ld.w	r11,r9[0x8]
800069bc:	8d 39       	st.w	r6[0xc],r9
800069be:	8d 2b       	st.w	r6[0x8],r11
800069c0:	97 36       	st.w	r11[0xc],r6
800069c2:	93 26       	st.w	r9[0x8],r6
800069c4:	a3 48       	asr	r8,0x2
800069c6:	74 19       	ld.w	r9,r10[0x4]
800069c8:	30 1b       	mov	r11,1
800069ca:	f6 08 09 48 	lsl	r8,r11,r8
800069ce:	f3 e8 10 08 	or	r8,r9,r8
800069d2:	95 18       	st.w	r10[0x4],r8
800069d4:	c4 58       	rjmp	80006a5e <_free_r+0x182>
800069d6:	f0 0b 16 09 	lsr	r11,r8,0x9
800069da:	58 4b       	cp.w	r11,4
800069dc:	e0 8b 00 06 	brhi	800069e8 <_free_r+0x10c>
800069e0:	f0 0b 16 06 	lsr	r11,r8,0x6
800069e4:	2c 8b       	sub	r11,-56
800069e6:	c2 08       	rjmp	80006a26 <_free_r+0x14a>
800069e8:	59 4b       	cp.w	r11,20
800069ea:	e0 8b 00 04 	brhi	800069f2 <_free_r+0x116>
800069ee:	2a 5b       	sub	r11,-91
800069f0:	c1 b8       	rjmp	80006a26 <_free_r+0x14a>
800069f2:	e0 4b 00 54 	cp.w	r11,84
800069f6:	e0 8b 00 06 	brhi	80006a02 <_free_r+0x126>
800069fa:	f0 0b 16 0c 	lsr	r11,r8,0xc
800069fe:	29 2b       	sub	r11,-110
80006a00:	c1 38       	rjmp	80006a26 <_free_r+0x14a>
80006a02:	e0 4b 01 54 	cp.w	r11,340
80006a06:	e0 8b 00 06 	brhi	80006a12 <_free_r+0x136>
80006a0a:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006a0e:	28 9b       	sub	r11,-119
80006a10:	c0 b8       	rjmp	80006a26 <_free_r+0x14a>
80006a12:	e0 4b 05 54 	cp.w	r11,1364
80006a16:	e0 88 00 05 	brls	80006a20 <_free_r+0x144>
80006a1a:	37 eb       	mov	r11,126
80006a1c:	c0 58       	rjmp	80006a26 <_free_r+0x14a>
80006a1e:	d7 03       	nop
80006a20:	f0 0b 16 12 	lsr	r11,r8,0x12
80006a24:	28 4b       	sub	r11,-124
80006a26:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006a2a:	78 29       	ld.w	r9,r12[0x8]
80006a2c:	18 39       	cp.w	r9,r12
80006a2e:	c0 e1       	brne	80006a4a <_free_r+0x16e>
80006a30:	74 18       	ld.w	r8,r10[0x4]
80006a32:	a3 4b       	asr	r11,0x2
80006a34:	30 1c       	mov	r12,1
80006a36:	f8 0b 09 4b 	lsl	r11,r12,r11
80006a3a:	f1 eb 10 0b 	or	r11,r8,r11
80006a3e:	12 98       	mov	r8,r9
80006a40:	95 1b       	st.w	r10[0x4],r11
80006a42:	c0 a8       	rjmp	80006a56 <_free_r+0x17a>
80006a44:	72 29       	ld.w	r9,r9[0x8]
80006a46:	18 39       	cp.w	r9,r12
80006a48:	c0 60       	breq	80006a54 <_free_r+0x178>
80006a4a:	72 1a       	ld.w	r10,r9[0x4]
80006a4c:	e0 1a ff fc 	andl	r10,0xfffc
80006a50:	14 38       	cp.w	r8,r10
80006a52:	cf 93       	brcs	80006a44 <_free_r+0x168>
80006a54:	72 38       	ld.w	r8,r9[0xc]
80006a56:	8d 38       	st.w	r6[0xc],r8
80006a58:	8d 29       	st.w	r6[0x8],r9
80006a5a:	93 36       	st.w	r9[0xc],r6
80006a5c:	91 26       	st.w	r8[0x8],r6
80006a5e:	0e 9c       	mov	r12,r7
80006a60:	e0 a0 04 2e 	rcall	800072bc <__malloc_unlock>
80006a64:	d8 22       	popm	r4-r7,pc
80006a66:	d7 03       	nop

80006a68 <__sfvwrite_r>:
80006a68:	d4 31       	pushm	r0-r7,lr
80006a6a:	20 3d       	sub	sp,12
80006a6c:	14 94       	mov	r4,r10
80006a6e:	18 95       	mov	r5,r12
80006a70:	16 97       	mov	r7,r11
80006a72:	74 28       	ld.w	r8,r10[0x8]
80006a74:	58 08       	cp.w	r8,0
80006a76:	e0 80 01 45 	breq	80006d00 <__sfvwrite_r+0x298>
80006a7a:	96 68       	ld.sh	r8,r11[0xc]
80006a7c:	ed b8 00 03 	bld	r8,0x3
80006a80:	c0 41       	brne	80006a88 <__sfvwrite_r+0x20>
80006a82:	76 48       	ld.w	r8,r11[0x10]
80006a84:	58 08       	cp.w	r8,0
80006a86:	c0 c1       	brne	80006a9e <__sfvwrite_r+0x36>
80006a88:	0e 9b       	mov	r11,r7
80006a8a:	0a 9c       	mov	r12,r5
80006a8c:	fe b0 f6 ca 	rcall	80005820 <__swsetup_r>
80006a90:	c0 70       	breq	80006a9e <__sfvwrite_r+0x36>
80006a92:	8e 68       	ld.sh	r8,r7[0xc]
80006a94:	a7 a8       	sbr	r8,0x6
80006a96:	ae 68       	st.h	r7[0xc],r8
80006a98:	30 98       	mov	r8,9
80006a9a:	8b 38       	st.w	r5[0xc],r8
80006a9c:	c3 09       	rjmp	80006cfc <__sfvwrite_r+0x294>
80006a9e:	8e 63       	ld.sh	r3,r7[0xc]
80006aa0:	68 00       	ld.w	r0,r4[0x0]
80006aa2:	06 96       	mov	r6,r3
80006aa4:	e2 16 00 02 	andl	r6,0x2,COH
80006aa8:	c2 10       	breq	80006aea <__sfvwrite_r+0x82>
80006aaa:	30 03       	mov	r3,0
80006aac:	e0 62 04 00 	mov	r2,1024
80006ab0:	06 96       	mov	r6,r3
80006ab2:	c0 48       	rjmp	80006aba <__sfvwrite_r+0x52>
80006ab4:	60 03       	ld.w	r3,r0[0x0]
80006ab6:	60 16       	ld.w	r6,r0[0x4]
80006ab8:	2f 80       	sub	r0,-8
80006aba:	58 06       	cp.w	r6,0
80006abc:	cf c0       	breq	80006ab4 <__sfvwrite_r+0x4c>
80006abe:	e0 46 04 00 	cp.w	r6,1024
80006ac2:	ec 09 17 80 	movls	r9,r6
80006ac6:	e4 09 17 b0 	movhi	r9,r2
80006aca:	06 9a       	mov	r10,r3
80006acc:	6e a8       	ld.w	r8,r7[0x28]
80006ace:	6e 8b       	ld.w	r11,r7[0x20]
80006ad0:	0a 9c       	mov	r12,r5
80006ad2:	5d 18       	icall	r8
80006ad4:	18 16       	sub	r6,r12
80006ad6:	58 0c       	cp.w	r12,0
80006ad8:	e0 8a 01 0f 	brle	80006cf6 <__sfvwrite_r+0x28e>
80006adc:	68 28       	ld.w	r8,r4[0x8]
80006ade:	18 18       	sub	r8,r12
80006ae0:	89 28       	st.w	r4[0x8],r8
80006ae2:	e0 80 01 0f 	breq	80006d00 <__sfvwrite_r+0x298>
80006ae6:	18 03       	add	r3,r12
80006ae8:	ce 9b       	rjmp	80006aba <__sfvwrite_r+0x52>
80006aea:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006aee:	c0 70       	breq	80006afc <__sfvwrite_r+0x94>
80006af0:	50 06       	stdsp	sp[0x0],r6
80006af2:	0c 93       	mov	r3,r6
80006af4:	0c 91       	mov	r1,r6
80006af6:	50 15       	stdsp	sp[0x4],r5
80006af8:	08 92       	mov	r2,r4
80006afa:	c9 e8       	rjmp	80006c36 <__sfvwrite_r+0x1ce>
80006afc:	06 96       	mov	r6,r3
80006afe:	08 91       	mov	r1,r4
80006b00:	c0 48       	rjmp	80006b08 <__sfvwrite_r+0xa0>
80006b02:	60 03       	ld.w	r3,r0[0x0]
80006b04:	60 16       	ld.w	r6,r0[0x4]
80006b06:	2f 80       	sub	r0,-8
80006b08:	58 06       	cp.w	r6,0
80006b0a:	cf c0       	breq	80006b02 <__sfvwrite_r+0x9a>
80006b0c:	8e 68       	ld.sh	r8,r7[0xc]
80006b0e:	6e 24       	ld.w	r4,r7[0x8]
80006b10:	10 99       	mov	r9,r8
80006b12:	e2 19 02 00 	andl	r9,0x200,COH
80006b16:	c5 50       	breq	80006bc0 <__sfvwrite_r+0x158>
80006b18:	08 36       	cp.w	r6,r4
80006b1a:	c4 33       	brcs	80006ba0 <__sfvwrite_r+0x138>
80006b1c:	10 99       	mov	r9,r8
80006b1e:	e2 19 04 80 	andl	r9,0x480,COH
80006b22:	c3 f0       	breq	80006ba0 <__sfvwrite_r+0x138>
80006b24:	6e 4b       	ld.w	r11,r7[0x10]
80006b26:	6e 09       	ld.w	r9,r7[0x0]
80006b28:	16 19       	sub	r9,r11
80006b2a:	50 09       	stdsp	sp[0x0],r9
80006b2c:	6e 59       	ld.w	r9,r7[0x14]
80006b2e:	10 9c       	mov	r12,r8
80006b30:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006b34:	30 28       	mov	r8,2
80006b36:	f4 08 0c 08 	divs	r8,r10,r8
80006b3a:	fa e9 00 04 	st.d	sp[4],r8
80006b3e:	10 94       	mov	r4,r8
80006b40:	40 09       	lddsp	r9,sp[0x0]
80006b42:	e2 1c 04 00 	andl	r12,0x400,COH
80006b46:	2f f9       	sub	r9,-1
80006b48:	0c 09       	add	r9,r6
80006b4a:	12 38       	cp.w	r8,r9
80006b4c:	f2 04 17 30 	movlo	r4,r9
80006b50:	58 0c       	cp.w	r12,0
80006b52:	c1 00       	breq	80006b72 <__sfvwrite_r+0x10a>
80006b54:	08 9b       	mov	r11,r4
80006b56:	0a 9c       	mov	r12,r5
80006b58:	c6 8d       	rcall	80006e28 <_malloc_r>
80006b5a:	18 92       	mov	r2,r12
80006b5c:	c1 40       	breq	80006b84 <__sfvwrite_r+0x11c>
80006b5e:	40 0a       	lddsp	r10,sp[0x0]
80006b60:	6e 4b       	ld.w	r11,r7[0x10]
80006b62:	fe b0 e4 29 	rcall	800033b4 <memcpy>
80006b66:	8e 68       	ld.sh	r8,r7[0xc]
80006b68:	e0 18 fb 7f 	andl	r8,0xfb7f
80006b6c:	a7 b8       	sbr	r8,0x7
80006b6e:	ae 68       	st.h	r7[0xc],r8
80006b70:	c0 d8       	rjmp	80006b8a <__sfvwrite_r+0x122>
80006b72:	08 9a       	mov	r10,r4
80006b74:	0a 9c       	mov	r12,r5
80006b76:	e0 a0 06 8f 	rcall	80007894 <_realloc_r>
80006b7a:	18 92       	mov	r2,r12
80006b7c:	c0 71       	brne	80006b8a <__sfvwrite_r+0x122>
80006b7e:	6e 4b       	ld.w	r11,r7[0x10]
80006b80:	0a 9c       	mov	r12,r5
80006b82:	ca de       	rcall	800068dc <_free_r>
80006b84:	30 c8       	mov	r8,12
80006b86:	8b 38       	st.w	r5[0xc],r8
80006b88:	cb 78       	rjmp	80006cf6 <__sfvwrite_r+0x28e>
80006b8a:	40 0a       	lddsp	r10,sp[0x0]
80006b8c:	40 09       	lddsp	r9,sp[0x0]
80006b8e:	e8 0a 01 0a 	sub	r10,r4,r10
80006b92:	e4 09 00 08 	add	r8,r2,r9
80006b96:	8f 54       	st.w	r7[0x14],r4
80006b98:	8f 2a       	st.w	r7[0x8],r10
80006b9a:	8f 08       	st.w	r7[0x0],r8
80006b9c:	8f 42       	st.w	r7[0x10],r2
80006b9e:	0c 94       	mov	r4,r6
80006ba0:	08 36       	cp.w	r6,r4
80006ba2:	ec 04 17 30 	movlo	r4,r6
80006ba6:	06 9b       	mov	r11,r3
80006ba8:	08 9a       	mov	r10,r4
80006baa:	6e 0c       	ld.w	r12,r7[0x0]
80006bac:	e0 a0 03 61 	rcall	8000726e <memmove>
80006bb0:	6e 08       	ld.w	r8,r7[0x0]
80006bb2:	08 08       	add	r8,r4
80006bb4:	8f 08       	st.w	r7[0x0],r8
80006bb6:	6e 28       	ld.w	r8,r7[0x8]
80006bb8:	08 18       	sub	r8,r4
80006bba:	0c 94       	mov	r4,r6
80006bbc:	8f 28       	st.w	r7[0x8],r8
80006bbe:	c3 08       	rjmp	80006c1e <__sfvwrite_r+0x1b6>
80006bc0:	08 36       	cp.w	r6,r4
80006bc2:	5f ba       	srhi	r10
80006bc4:	6e 0c       	ld.w	r12,r7[0x0]
80006bc6:	6e 48       	ld.w	r8,r7[0x10]
80006bc8:	10 3c       	cp.w	r12,r8
80006bca:	5f b8       	srhi	r8
80006bcc:	f5 e8 00 08 	and	r8,r10,r8
80006bd0:	f2 08 18 00 	cp.b	r8,r9
80006bd4:	c0 e0       	breq	80006bf0 <__sfvwrite_r+0x188>
80006bd6:	06 9b       	mov	r11,r3
80006bd8:	08 9a       	mov	r10,r4
80006bda:	e0 a0 03 4a 	rcall	8000726e <memmove>
80006bde:	6e 08       	ld.w	r8,r7[0x0]
80006be0:	08 08       	add	r8,r4
80006be2:	0e 9b       	mov	r11,r7
80006be4:	8f 08       	st.w	r7[0x0],r8
80006be6:	0a 9c       	mov	r12,r5
80006be8:	fe b0 fd 08 	rcall	800065f8 <_fflush_r>
80006bec:	c1 90       	breq	80006c1e <__sfvwrite_r+0x1b6>
80006bee:	c8 48       	rjmp	80006cf6 <__sfvwrite_r+0x28e>
80006bf0:	6e 59       	ld.w	r9,r7[0x14]
80006bf2:	12 36       	cp.w	r6,r9
80006bf4:	c0 a3       	brcs	80006c08 <__sfvwrite_r+0x1a0>
80006bf6:	6e a8       	ld.w	r8,r7[0x28]
80006bf8:	06 9a       	mov	r10,r3
80006bfa:	6e 8b       	ld.w	r11,r7[0x20]
80006bfc:	0a 9c       	mov	r12,r5
80006bfe:	5d 18       	icall	r8
80006c00:	18 94       	mov	r4,r12
80006c02:	e0 89 00 0e 	brgt	80006c1e <__sfvwrite_r+0x1b6>
80006c06:	c7 88       	rjmp	80006cf6 <__sfvwrite_r+0x28e>
80006c08:	0c 9a       	mov	r10,r6
80006c0a:	06 9b       	mov	r11,r3
80006c0c:	e0 a0 03 31 	rcall	8000726e <memmove>
80006c10:	6e 08       	ld.w	r8,r7[0x0]
80006c12:	0c 08       	add	r8,r6
80006c14:	0c 94       	mov	r4,r6
80006c16:	8f 08       	st.w	r7[0x0],r8
80006c18:	6e 28       	ld.w	r8,r7[0x8]
80006c1a:	0c 18       	sub	r8,r6
80006c1c:	8f 28       	st.w	r7[0x8],r8
80006c1e:	62 28       	ld.w	r8,r1[0x8]
80006c20:	08 18       	sub	r8,r4
80006c22:	83 28       	st.w	r1[0x8],r8
80006c24:	c6 e0       	breq	80006d00 <__sfvwrite_r+0x298>
80006c26:	08 16       	sub	r6,r4
80006c28:	08 03       	add	r3,r4
80006c2a:	c6 fb       	rjmp	80006b08 <__sfvwrite_r+0xa0>
80006c2c:	60 03       	ld.w	r3,r0[0x0]
80006c2e:	60 11       	ld.w	r1,r0[0x4]
80006c30:	30 08       	mov	r8,0
80006c32:	2f 80       	sub	r0,-8
80006c34:	50 08       	stdsp	sp[0x0],r8
80006c36:	58 01       	cp.w	r1,0
80006c38:	cf a0       	breq	80006c2c <__sfvwrite_r+0x1c4>
80006c3a:	40 0a       	lddsp	r10,sp[0x0]
80006c3c:	58 0a       	cp.w	r10,0
80006c3e:	c1 51       	brne	80006c68 <__sfvwrite_r+0x200>
80006c40:	e2 c6 ff ff 	sub	r6,r1,-1
80006c44:	02 9a       	mov	r10,r1
80006c46:	30 ab       	mov	r11,10
80006c48:	06 9c       	mov	r12,r3
80006c4a:	e0 a0 03 07 	rcall	80007258 <memchr>
80006c4e:	f8 c8 ff ff 	sub	r8,r12,-1
80006c52:	58 0c       	cp.w	r12,0
80006c54:	f1 d3 e1 16 	subne	r6,r8,r3
80006c58:	f9 b9 01 01 	movne	r9,1
80006c5c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006c60:	f9 b8 00 01 	moveq	r8,1
80006c64:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006c68:	02 36       	cp.w	r6,r1
80006c6a:	ec 04 17 80 	movls	r4,r6
80006c6e:	e2 04 17 b0 	movhi	r4,r1
80006c72:	6e 59       	ld.w	r9,r7[0x14]
80006c74:	6e 25       	ld.w	r5,r7[0x8]
80006c76:	f2 05 00 05 	add	r5,r9,r5
80006c7a:	0a 34       	cp.w	r4,r5
80006c7c:	5f 9a       	srgt	r10
80006c7e:	6e 0c       	ld.w	r12,r7[0x0]
80006c80:	6e 48       	ld.w	r8,r7[0x10]
80006c82:	10 3c       	cp.w	r12,r8
80006c84:	5f b8       	srhi	r8
80006c86:	f5 e8 00 08 	and	r8,r10,r8
80006c8a:	30 0a       	mov	r10,0
80006c8c:	f4 08 18 00 	cp.b	r8,r10
80006c90:	c0 e0       	breq	80006cac <__sfvwrite_r+0x244>
80006c92:	06 9b       	mov	r11,r3
80006c94:	0a 9a       	mov	r10,r5
80006c96:	e0 a0 02 ec 	rcall	8000726e <memmove>
80006c9a:	6e 08       	ld.w	r8,r7[0x0]
80006c9c:	0a 08       	add	r8,r5
80006c9e:	0e 9b       	mov	r11,r7
80006ca0:	8f 08       	st.w	r7[0x0],r8
80006ca2:	40 1c       	lddsp	r12,sp[0x4]
80006ca4:	fe b0 fc aa 	rcall	800065f8 <_fflush_r>
80006ca8:	c1 80       	breq	80006cd8 <__sfvwrite_r+0x270>
80006caa:	c2 68       	rjmp	80006cf6 <__sfvwrite_r+0x28e>
80006cac:	12 34       	cp.w	r4,r9
80006cae:	c0 a5       	brlt	80006cc2 <__sfvwrite_r+0x25a>
80006cb0:	6e a8       	ld.w	r8,r7[0x28]
80006cb2:	06 9a       	mov	r10,r3
80006cb4:	6e 8b       	ld.w	r11,r7[0x20]
80006cb6:	40 1c       	lddsp	r12,sp[0x4]
80006cb8:	5d 18       	icall	r8
80006cba:	18 95       	mov	r5,r12
80006cbc:	e0 89 00 0e 	brgt	80006cd8 <__sfvwrite_r+0x270>
80006cc0:	c1 b8       	rjmp	80006cf6 <__sfvwrite_r+0x28e>
80006cc2:	08 9a       	mov	r10,r4
80006cc4:	06 9b       	mov	r11,r3
80006cc6:	e0 a0 02 d4 	rcall	8000726e <memmove>
80006cca:	6e 08       	ld.w	r8,r7[0x0]
80006ccc:	08 08       	add	r8,r4
80006cce:	08 95       	mov	r5,r4
80006cd0:	8f 08       	st.w	r7[0x0],r8
80006cd2:	6e 28       	ld.w	r8,r7[0x8]
80006cd4:	08 18       	sub	r8,r4
80006cd6:	8f 28       	st.w	r7[0x8],r8
80006cd8:	0a 16       	sub	r6,r5
80006cda:	c0 71       	brne	80006ce8 <__sfvwrite_r+0x280>
80006cdc:	0e 9b       	mov	r11,r7
80006cde:	40 1c       	lddsp	r12,sp[0x4]
80006ce0:	fe b0 fc 8c 	rcall	800065f8 <_fflush_r>
80006ce4:	c0 91       	brne	80006cf6 <__sfvwrite_r+0x28e>
80006ce6:	50 06       	stdsp	sp[0x0],r6
80006ce8:	64 28       	ld.w	r8,r2[0x8]
80006cea:	0a 18       	sub	r8,r5
80006cec:	85 28       	st.w	r2[0x8],r8
80006cee:	c0 90       	breq	80006d00 <__sfvwrite_r+0x298>
80006cf0:	0a 11       	sub	r1,r5
80006cf2:	0a 03       	add	r3,r5
80006cf4:	ca 1b       	rjmp	80006c36 <__sfvwrite_r+0x1ce>
80006cf6:	8e 68       	ld.sh	r8,r7[0xc]
80006cf8:	a7 a8       	sbr	r8,0x6
80006cfa:	ae 68       	st.h	r7[0xc],r8
80006cfc:	3f fc       	mov	r12,-1
80006cfe:	c0 28       	rjmp	80006d02 <__sfvwrite_r+0x29a>
80006d00:	30 0c       	mov	r12,0
80006d02:	2f dd       	sub	sp,-12
80006d04:	d8 32       	popm	r0-r7,pc
80006d06:	d7 03       	nop

80006d08 <_fwalk>:
80006d08:	d4 31       	pushm	r0-r7,lr
80006d0a:	30 05       	mov	r5,0
80006d0c:	16 91       	mov	r1,r11
80006d0e:	f8 c7 ff 28 	sub	r7,r12,-216
80006d12:	0a 92       	mov	r2,r5
80006d14:	fe b0 fc f8 	rcall	80006704 <__sfp_lock_acquire>
80006d18:	3f f3       	mov	r3,-1
80006d1a:	c1 68       	rjmp	80006d46 <_fwalk+0x3e>
80006d1c:	6e 26       	ld.w	r6,r7[0x8]
80006d1e:	6e 14       	ld.w	r4,r7[0x4]
80006d20:	2f 46       	sub	r6,-12
80006d22:	c0 c8       	rjmp	80006d3a <_fwalk+0x32>
80006d24:	8c 08       	ld.sh	r8,r6[0x0]
80006d26:	e4 08 19 00 	cp.h	r8,r2
80006d2a:	c0 70       	breq	80006d38 <_fwalk+0x30>
80006d2c:	8c 18       	ld.sh	r8,r6[0x2]
80006d2e:	e6 08 19 00 	cp.h	r8,r3
80006d32:	c0 30       	breq	80006d38 <_fwalk+0x30>
80006d34:	5d 11       	icall	r1
80006d36:	18 45       	or	r5,r12
80006d38:	2a 46       	sub	r6,-92
80006d3a:	20 14       	sub	r4,1
80006d3c:	ec cc 00 0c 	sub	r12,r6,12
80006d40:	58 04       	cp.w	r4,0
80006d42:	cf 14       	brge	80006d24 <_fwalk+0x1c>
80006d44:	6e 07       	ld.w	r7,r7[0x0]
80006d46:	58 07       	cp.w	r7,0
80006d48:	ce a1       	brne	80006d1c <_fwalk+0x14>
80006d4a:	fe b0 fc de 	rcall	80006706 <__sfp_lock_release>
80006d4e:	0a 9c       	mov	r12,r5
80006d50:	d8 32       	popm	r0-r7,pc
80006d52:	d7 03       	nop

80006d54 <_localeconv_r>:
80006d54:	fe cc be ac 	sub	r12,pc,-16724
80006d58:	5e fc       	retal	r12
80006d5a:	d7 03       	nop

80006d5c <__smakebuf_r>:
80006d5c:	d4 21       	pushm	r4-r7,lr
80006d5e:	20 fd       	sub	sp,60
80006d60:	96 68       	ld.sh	r8,r11[0xc]
80006d62:	16 97       	mov	r7,r11
80006d64:	18 96       	mov	r6,r12
80006d66:	e2 18 00 02 	andl	r8,0x2,COH
80006d6a:	c3 c1       	brne	80006de2 <__smakebuf_r+0x86>
80006d6c:	96 7b       	ld.sh	r11,r11[0xe]
80006d6e:	f0 0b 19 00 	cp.h	r11,r8
80006d72:	c0 55       	brlt	80006d7c <__smakebuf_r+0x20>
80006d74:	1a 9a       	mov	r10,sp
80006d76:	e0 a0 08 9d 	rcall	80007eb0 <_fstat_r>
80006d7a:	c0 f4       	brge	80006d98 <__smakebuf_r+0x3c>
80006d7c:	8e 65       	ld.sh	r5,r7[0xc]
80006d7e:	0a 98       	mov	r8,r5
80006d80:	ab b8       	sbr	r8,0xb
80006d82:	e2 15 00 80 	andl	r5,0x80,COH
80006d86:	ae 68       	st.h	r7[0xc],r8
80006d88:	30 04       	mov	r4,0
80006d8a:	e0 68 04 00 	mov	r8,1024
80006d8e:	f9 b5 01 40 	movne	r5,64
80006d92:	f0 05 17 00 	moveq	r5,r8
80006d96:	c1 c8       	rjmp	80006dce <__smakebuf_r+0x72>
80006d98:	40 18       	lddsp	r8,sp[0x4]
80006d9a:	e2 18 f0 00 	andl	r8,0xf000,COH
80006d9e:	e0 48 20 00 	cp.w	r8,8192
80006da2:	5f 04       	sreq	r4
80006da4:	e0 48 80 00 	cp.w	r8,32768
80006da8:	c0 e1       	brne	80006dc4 <__smakebuf_r+0x68>
80006daa:	6e b9       	ld.w	r9,r7[0x2c]
80006dac:	fe c8 f1 e8 	sub	r8,pc,-3608
80006db0:	10 39       	cp.w	r9,r8
80006db2:	c0 91       	brne	80006dc4 <__smakebuf_r+0x68>
80006db4:	8e 68       	ld.sh	r8,r7[0xc]
80006db6:	e0 65 04 00 	mov	r5,1024
80006dba:	ab a8       	sbr	r8,0xa
80006dbc:	ef 45 00 50 	st.w	r7[80],r5
80006dc0:	ae 68       	st.h	r7[0xc],r8
80006dc2:	c0 68       	rjmp	80006dce <__smakebuf_r+0x72>
80006dc4:	8e 68       	ld.sh	r8,r7[0xc]
80006dc6:	e0 65 04 00 	mov	r5,1024
80006dca:	ab b8       	sbr	r8,0xb
80006dcc:	ae 68       	st.h	r7[0xc],r8
80006dce:	0a 9b       	mov	r11,r5
80006dd0:	0c 9c       	mov	r12,r6
80006dd2:	c2 bc       	rcall	80006e28 <_malloc_r>
80006dd4:	8e 68       	ld.sh	r8,r7[0xc]
80006dd6:	c0 d1       	brne	80006df0 <__smakebuf_r+0x94>
80006dd8:	ed b8 00 09 	bld	r8,0x9
80006ddc:	c1 b0       	breq	80006e12 <__smakebuf_r+0xb6>
80006dde:	a1 b8       	sbr	r8,0x1
80006de0:	ae 68       	st.h	r7[0xc],r8
80006de2:	ee c8 ff b9 	sub	r8,r7,-71
80006de6:	8f 48       	st.w	r7[0x10],r8
80006de8:	8f 08       	st.w	r7[0x0],r8
80006dea:	30 18       	mov	r8,1
80006dec:	8f 58       	st.w	r7[0x14],r8
80006dee:	c1 28       	rjmp	80006e12 <__smakebuf_r+0xb6>
80006df0:	a7 b8       	sbr	r8,0x7
80006df2:	8f 4c       	st.w	r7[0x10],r12
80006df4:	ae 68       	st.h	r7[0xc],r8
80006df6:	8f 55       	st.w	r7[0x14],r5
80006df8:	fe c8 06 f0 	sub	r8,pc,1776
80006dfc:	8f 0c       	st.w	r7[0x0],r12
80006dfe:	8d a8       	st.w	r6[0x28],r8
80006e00:	58 04       	cp.w	r4,0
80006e02:	c0 80       	breq	80006e12 <__smakebuf_r+0xb6>
80006e04:	8e 7c       	ld.sh	r12,r7[0xe]
80006e06:	e0 a0 07 47 	rcall	80007c94 <isatty>
80006e0a:	c0 40       	breq	80006e12 <__smakebuf_r+0xb6>
80006e0c:	8e 68       	ld.sh	r8,r7[0xc]
80006e0e:	a1 a8       	sbr	r8,0x0
80006e10:	ae 68       	st.h	r7[0xc],r8
80006e12:	2f 1d       	sub	sp,-60
80006e14:	d8 22       	popm	r4-r7,pc
80006e16:	d7 03       	nop

80006e18 <malloc>:
80006e18:	d4 01       	pushm	lr
80006e1a:	e0 68 00 f8 	mov	r8,248
80006e1e:	18 9b       	mov	r11,r12
80006e20:	70 0c       	ld.w	r12,r8[0x0]
80006e22:	c0 3c       	rcall	80006e28 <_malloc_r>
80006e24:	d8 02       	popm	pc
80006e26:	d7 03       	nop

80006e28 <_malloc_r>:
80006e28:	d4 31       	pushm	r0-r7,lr
80006e2a:	f6 c8 ff f5 	sub	r8,r11,-11
80006e2e:	18 95       	mov	r5,r12
80006e30:	10 97       	mov	r7,r8
80006e32:	e0 17 ff f8 	andl	r7,0xfff8
80006e36:	59 68       	cp.w	r8,22
80006e38:	f9 b7 08 10 	movls	r7,16
80006e3c:	16 37       	cp.w	r7,r11
80006e3e:	5f 38       	srlo	r8
80006e40:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006e44:	c0 50       	breq	80006e4e <_malloc_r+0x26>
80006e46:	30 c8       	mov	r8,12
80006e48:	99 38       	st.w	r12[0xc],r8
80006e4a:	e0 8f 01 f7 	bral	80007238 <_malloc_r+0x410>
80006e4e:	e0 a0 02 36 	rcall	800072ba <__malloc_lock>
80006e52:	e0 47 01 f7 	cp.w	r7,503
80006e56:	e0 8b 00 1d 	brhi	80006e90 <_malloc_r+0x68>
80006e5a:	ee 03 16 03 	lsr	r3,r7,0x3
80006e5e:	e0 68 00 fc 	mov	r8,252
80006e62:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006e66:	70 36       	ld.w	r6,r8[0xc]
80006e68:	10 36       	cp.w	r6,r8
80006e6a:	c0 61       	brne	80006e76 <_malloc_r+0x4e>
80006e6c:	ec c8 ff f8 	sub	r8,r6,-8
80006e70:	70 36       	ld.w	r6,r8[0xc]
80006e72:	10 36       	cp.w	r6,r8
80006e74:	c0 c0       	breq	80006e8c <_malloc_r+0x64>
80006e76:	6c 18       	ld.w	r8,r6[0x4]
80006e78:	e0 18 ff fc 	andl	r8,0xfffc
80006e7c:	6c 3a       	ld.w	r10,r6[0xc]
80006e7e:	ec 08 00 09 	add	r9,r6,r8
80006e82:	0a 9c       	mov	r12,r5
80006e84:	6c 28       	ld.w	r8,r6[0x8]
80006e86:	95 28       	st.w	r10[0x8],r8
80006e88:	91 3a       	st.w	r8[0xc],r10
80006e8a:	c4 78       	rjmp	80006f18 <_malloc_r+0xf0>
80006e8c:	2f e3       	sub	r3,-2
80006e8e:	c4 d8       	rjmp	80006f28 <_malloc_r+0x100>
80006e90:	ee 03 16 09 	lsr	r3,r7,0x9
80006e94:	c0 41       	brne	80006e9c <_malloc_r+0x74>
80006e96:	ee 03 16 03 	lsr	r3,r7,0x3
80006e9a:	c2 68       	rjmp	80006ee6 <_malloc_r+0xbe>
80006e9c:	58 43       	cp.w	r3,4
80006e9e:	e0 8b 00 06 	brhi	80006eaa <_malloc_r+0x82>
80006ea2:	ee 03 16 06 	lsr	r3,r7,0x6
80006ea6:	2c 83       	sub	r3,-56
80006ea8:	c1 f8       	rjmp	80006ee6 <_malloc_r+0xbe>
80006eaa:	59 43       	cp.w	r3,20
80006eac:	e0 8b 00 04 	brhi	80006eb4 <_malloc_r+0x8c>
80006eb0:	2a 53       	sub	r3,-91
80006eb2:	c1 a8       	rjmp	80006ee6 <_malloc_r+0xbe>
80006eb4:	e0 43 00 54 	cp.w	r3,84
80006eb8:	e0 8b 00 06 	brhi	80006ec4 <_malloc_r+0x9c>
80006ebc:	ee 03 16 0c 	lsr	r3,r7,0xc
80006ec0:	29 23       	sub	r3,-110
80006ec2:	c1 28       	rjmp	80006ee6 <_malloc_r+0xbe>
80006ec4:	e0 43 01 54 	cp.w	r3,340
80006ec8:	e0 8b 00 06 	brhi	80006ed4 <_malloc_r+0xac>
80006ecc:	ee 03 16 0f 	lsr	r3,r7,0xf
80006ed0:	28 93       	sub	r3,-119
80006ed2:	c0 a8       	rjmp	80006ee6 <_malloc_r+0xbe>
80006ed4:	e0 43 05 54 	cp.w	r3,1364
80006ed8:	e0 88 00 04 	brls	80006ee0 <_malloc_r+0xb8>
80006edc:	37 e3       	mov	r3,126
80006ede:	c0 48       	rjmp	80006ee6 <_malloc_r+0xbe>
80006ee0:	ee 03 16 12 	lsr	r3,r7,0x12
80006ee4:	28 43       	sub	r3,-124
80006ee6:	e0 6a 00 fc 	mov	r10,252
80006eea:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006eee:	74 36       	ld.w	r6,r10[0xc]
80006ef0:	c1 98       	rjmp	80006f22 <_malloc_r+0xfa>
80006ef2:	6c 19       	ld.w	r9,r6[0x4]
80006ef4:	e0 19 ff fc 	andl	r9,0xfffc
80006ef8:	f2 07 01 0b 	sub	r11,r9,r7
80006efc:	58 fb       	cp.w	r11,15
80006efe:	e0 8a 00 04 	brle	80006f06 <_malloc_r+0xde>
80006f02:	20 13       	sub	r3,1
80006f04:	c1 18       	rjmp	80006f26 <_malloc_r+0xfe>
80006f06:	6c 38       	ld.w	r8,r6[0xc]
80006f08:	58 0b       	cp.w	r11,0
80006f0a:	c0 b5       	brlt	80006f20 <_malloc_r+0xf8>
80006f0c:	6c 2a       	ld.w	r10,r6[0x8]
80006f0e:	ec 09 00 09 	add	r9,r6,r9
80006f12:	0a 9c       	mov	r12,r5
80006f14:	91 2a       	st.w	r8[0x8],r10
80006f16:	95 38       	st.w	r10[0xc],r8
80006f18:	72 18       	ld.w	r8,r9[0x4]
80006f1a:	a1 a8       	sbr	r8,0x0
80006f1c:	93 18       	st.w	r9[0x4],r8
80006f1e:	cb c8       	rjmp	80007096 <_malloc_r+0x26e>
80006f20:	10 96       	mov	r6,r8
80006f22:	14 36       	cp.w	r6,r10
80006f24:	ce 71       	brne	80006ef2 <_malloc_r+0xca>
80006f26:	2f f3       	sub	r3,-1
80006f28:	e0 6a 00 fc 	mov	r10,252
80006f2c:	f4 cc ff f8 	sub	r12,r10,-8
80006f30:	78 26       	ld.w	r6,r12[0x8]
80006f32:	18 36       	cp.w	r6,r12
80006f34:	c6 c0       	breq	8000700c <_malloc_r+0x1e4>
80006f36:	6c 19       	ld.w	r9,r6[0x4]
80006f38:	e0 19 ff fc 	andl	r9,0xfffc
80006f3c:	f2 07 01 08 	sub	r8,r9,r7
80006f40:	58 f8       	cp.w	r8,15
80006f42:	e0 89 00 8f 	brgt	80007060 <_malloc_r+0x238>
80006f46:	99 3c       	st.w	r12[0xc],r12
80006f48:	99 2c       	st.w	r12[0x8],r12
80006f4a:	58 08       	cp.w	r8,0
80006f4c:	c0 55       	brlt	80006f56 <_malloc_r+0x12e>
80006f4e:	ec 09 00 09 	add	r9,r6,r9
80006f52:	0a 9c       	mov	r12,r5
80006f54:	ce 2b       	rjmp	80006f18 <_malloc_r+0xf0>
80006f56:	e0 49 01 ff 	cp.w	r9,511
80006f5a:	e0 8b 00 13 	brhi	80006f80 <_malloc_r+0x158>
80006f5e:	a3 99       	lsr	r9,0x3
80006f60:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006f64:	70 2b       	ld.w	r11,r8[0x8]
80006f66:	8d 38       	st.w	r6[0xc],r8
80006f68:	8d 2b       	st.w	r6[0x8],r11
80006f6a:	97 36       	st.w	r11[0xc],r6
80006f6c:	91 26       	st.w	r8[0x8],r6
80006f6e:	a3 49       	asr	r9,0x2
80006f70:	74 18       	ld.w	r8,r10[0x4]
80006f72:	30 1b       	mov	r11,1
80006f74:	f6 09 09 49 	lsl	r9,r11,r9
80006f78:	f1 e9 10 09 	or	r9,r8,r9
80006f7c:	95 19       	st.w	r10[0x4],r9
80006f7e:	c4 78       	rjmp	8000700c <_malloc_r+0x1e4>
80006f80:	f2 0a 16 09 	lsr	r10,r9,0x9
80006f84:	58 4a       	cp.w	r10,4
80006f86:	e0 8b 00 07 	brhi	80006f94 <_malloc_r+0x16c>
80006f8a:	f2 0a 16 06 	lsr	r10,r9,0x6
80006f8e:	2c 8a       	sub	r10,-56
80006f90:	c2 08       	rjmp	80006fd0 <_malloc_r+0x1a8>
80006f92:	d7 03       	nop
80006f94:	59 4a       	cp.w	r10,20
80006f96:	e0 8b 00 04 	brhi	80006f9e <_malloc_r+0x176>
80006f9a:	2a 5a       	sub	r10,-91
80006f9c:	c1 a8       	rjmp	80006fd0 <_malloc_r+0x1a8>
80006f9e:	e0 4a 00 54 	cp.w	r10,84
80006fa2:	e0 8b 00 06 	brhi	80006fae <_malloc_r+0x186>
80006fa6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006faa:	29 2a       	sub	r10,-110
80006fac:	c1 28       	rjmp	80006fd0 <_malloc_r+0x1a8>
80006fae:	e0 4a 01 54 	cp.w	r10,340
80006fb2:	e0 8b 00 06 	brhi	80006fbe <_malloc_r+0x196>
80006fb6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006fba:	28 9a       	sub	r10,-119
80006fbc:	c0 a8       	rjmp	80006fd0 <_malloc_r+0x1a8>
80006fbe:	e0 4a 05 54 	cp.w	r10,1364
80006fc2:	e0 88 00 04 	brls	80006fca <_malloc_r+0x1a2>
80006fc6:	37 ea       	mov	r10,126
80006fc8:	c0 48       	rjmp	80006fd0 <_malloc_r+0x1a8>
80006fca:	f2 0a 16 12 	lsr	r10,r9,0x12
80006fce:	28 4a       	sub	r10,-124
80006fd0:	e0 6b 00 fc 	mov	r11,252
80006fd4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006fd8:	68 28       	ld.w	r8,r4[0x8]
80006fda:	08 38       	cp.w	r8,r4
80006fdc:	c0 e1       	brne	80006ff8 <_malloc_r+0x1d0>
80006fde:	76 19       	ld.w	r9,r11[0x4]
80006fe0:	a3 4a       	asr	r10,0x2
80006fe2:	30 1e       	mov	lr,1
80006fe4:	fc 0a 09 4a 	lsl	r10,lr,r10
80006fe8:	f3 ea 10 0a 	or	r10,r9,r10
80006fec:	10 99       	mov	r9,r8
80006fee:	97 1a       	st.w	r11[0x4],r10
80006ff0:	c0 a8       	rjmp	80007004 <_malloc_r+0x1dc>
80006ff2:	70 28       	ld.w	r8,r8[0x8]
80006ff4:	08 38       	cp.w	r8,r4
80006ff6:	c0 60       	breq	80007002 <_malloc_r+0x1da>
80006ff8:	70 1a       	ld.w	r10,r8[0x4]
80006ffa:	e0 1a ff fc 	andl	r10,0xfffc
80006ffe:	14 39       	cp.w	r9,r10
80007000:	cf 93       	brcs	80006ff2 <_malloc_r+0x1ca>
80007002:	70 39       	ld.w	r9,r8[0xc]
80007004:	8d 39       	st.w	r6[0xc],r9
80007006:	8d 28       	st.w	r6[0x8],r8
80007008:	91 36       	st.w	r8[0xc],r6
8000700a:	93 26       	st.w	r9[0x8],r6
8000700c:	e6 08 14 02 	asr	r8,r3,0x2
80007010:	30 1b       	mov	r11,1
80007012:	e0 64 00 fc 	mov	r4,252
80007016:	f6 08 09 4b 	lsl	r11,r11,r8
8000701a:	68 18       	ld.w	r8,r4[0x4]
8000701c:	10 3b       	cp.w	r11,r8
8000701e:	e0 8b 00 69 	brhi	800070f0 <_malloc_r+0x2c8>
80007022:	f7 e8 00 09 	and	r9,r11,r8
80007026:	c0 b1       	brne	8000703c <_malloc_r+0x214>
80007028:	e0 13 ff fc 	andl	r3,0xfffc
8000702c:	a1 7b       	lsl	r11,0x1
8000702e:	2f c3       	sub	r3,-4
80007030:	c0 38       	rjmp	80007036 <_malloc_r+0x20e>
80007032:	2f c3       	sub	r3,-4
80007034:	a1 7b       	lsl	r11,0x1
80007036:	f7 e8 00 09 	and	r9,r11,r8
8000703a:	cf c0       	breq	80007032 <_malloc_r+0x20a>
8000703c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007040:	06 92       	mov	r2,r3
80007042:	1c 91       	mov	r1,lr
80007044:	62 36       	ld.w	r6,r1[0xc]
80007046:	c2 d8       	rjmp	800070a0 <_malloc_r+0x278>
80007048:	6c 1a       	ld.w	r10,r6[0x4]
8000704a:	e0 1a ff fc 	andl	r10,0xfffc
8000704e:	f4 07 01 08 	sub	r8,r10,r7
80007052:	58 f8       	cp.w	r8,15
80007054:	e0 8a 00 15 	brle	8000707e <_malloc_r+0x256>
80007058:	6c 3a       	ld.w	r10,r6[0xc]
8000705a:	6c 29       	ld.w	r9,r6[0x8]
8000705c:	95 29       	st.w	r10[0x8],r9
8000705e:	93 3a       	st.w	r9[0xc],r10
80007060:	0e 99       	mov	r9,r7
80007062:	ec 07 00 07 	add	r7,r6,r7
80007066:	a1 a9       	sbr	r9,0x0
80007068:	99 37       	st.w	r12[0xc],r7
8000706a:	99 27       	st.w	r12[0x8],r7
8000706c:	8d 19       	st.w	r6[0x4],r9
8000706e:	ee 08 09 08 	st.w	r7[r8],r8
80007072:	8f 2c       	st.w	r7[0x8],r12
80007074:	8f 3c       	st.w	r7[0xc],r12
80007076:	a1 a8       	sbr	r8,0x0
80007078:	0a 9c       	mov	r12,r5
8000707a:	8f 18       	st.w	r7[0x4],r8
8000707c:	c0 d8       	rjmp	80007096 <_malloc_r+0x26e>
8000707e:	6c 39       	ld.w	r9,r6[0xc]
80007080:	58 08       	cp.w	r8,0
80007082:	c0 e5       	brlt	8000709e <_malloc_r+0x276>
80007084:	ec 0a 00 0a 	add	r10,r6,r10
80007088:	74 18       	ld.w	r8,r10[0x4]
8000708a:	a1 a8       	sbr	r8,0x0
8000708c:	0a 9c       	mov	r12,r5
8000708e:	95 18       	st.w	r10[0x4],r8
80007090:	6c 28       	ld.w	r8,r6[0x8]
80007092:	93 28       	st.w	r9[0x8],r8
80007094:	91 39       	st.w	r8[0xc],r9
80007096:	c1 3d       	rcall	800072bc <__malloc_unlock>
80007098:	ec cc ff f8 	sub	r12,r6,-8
8000709c:	d8 32       	popm	r0-r7,pc
8000709e:	12 96       	mov	r6,r9
800070a0:	02 36       	cp.w	r6,r1
800070a2:	cd 31       	brne	80007048 <_malloc_r+0x220>
800070a4:	2f f2       	sub	r2,-1
800070a6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800070aa:	c0 30       	breq	800070b0 <_malloc_r+0x288>
800070ac:	2f 81       	sub	r1,-8
800070ae:	cc bb       	rjmp	80007044 <_malloc_r+0x21c>
800070b0:	1c 98       	mov	r8,lr
800070b2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800070b6:	c0 81       	brne	800070c6 <_malloc_r+0x29e>
800070b8:	68 19       	ld.w	r9,r4[0x4]
800070ba:	f6 08 11 ff 	rsub	r8,r11,-1
800070be:	f3 e8 00 08 	and	r8,r9,r8
800070c2:	89 18       	st.w	r4[0x4],r8
800070c4:	c0 78       	rjmp	800070d2 <_malloc_r+0x2aa>
800070c6:	f0 c9 00 08 	sub	r9,r8,8
800070ca:	20 13       	sub	r3,1
800070cc:	70 08       	ld.w	r8,r8[0x0]
800070ce:	12 38       	cp.w	r8,r9
800070d0:	cf 10       	breq	800070b2 <_malloc_r+0x28a>
800070d2:	a1 7b       	lsl	r11,0x1
800070d4:	68 18       	ld.w	r8,r4[0x4]
800070d6:	10 3b       	cp.w	r11,r8
800070d8:	e0 8b 00 0c 	brhi	800070f0 <_malloc_r+0x2c8>
800070dc:	58 0b       	cp.w	r11,0
800070de:	c0 90       	breq	800070f0 <_malloc_r+0x2c8>
800070e0:	04 93       	mov	r3,r2
800070e2:	c0 38       	rjmp	800070e8 <_malloc_r+0x2c0>
800070e4:	2f c3       	sub	r3,-4
800070e6:	a1 7b       	lsl	r11,0x1
800070e8:	f7 e8 00 09 	and	r9,r11,r8
800070ec:	ca 81       	brne	8000703c <_malloc_r+0x214>
800070ee:	cf bb       	rjmp	800070e4 <_malloc_r+0x2bc>
800070f0:	68 23       	ld.w	r3,r4[0x8]
800070f2:	66 12       	ld.w	r2,r3[0x4]
800070f4:	e0 12 ff fc 	andl	r2,0xfffc
800070f8:	0e 32       	cp.w	r2,r7
800070fa:	5f 39       	srlo	r9
800070fc:	e4 07 01 08 	sub	r8,r2,r7
80007100:	58 f8       	cp.w	r8,15
80007102:	5f aa       	srle	r10
80007104:	f5 e9 10 09 	or	r9,r10,r9
80007108:	e0 80 00 9a 	breq	8000723c <_malloc_r+0x414>
8000710c:	e0 68 07 30 	mov	r8,1840
80007110:	70 01       	ld.w	r1,r8[0x0]
80007112:	e0 68 05 08 	mov	r8,1288
80007116:	2f 01       	sub	r1,-16
80007118:	70 08       	ld.w	r8,r8[0x0]
8000711a:	0e 01       	add	r1,r7
8000711c:	5b f8       	cp.w	r8,-1
8000711e:	c0 40       	breq	80007126 <_malloc_r+0x2fe>
80007120:	28 11       	sub	r1,-127
80007122:	e0 11 ff 80 	andl	r1,0xff80
80007126:	02 9b       	mov	r11,r1
80007128:	0a 9c       	mov	r12,r5
8000712a:	e0 a0 05 39 	rcall	80007b9c <_sbrk_r>
8000712e:	18 96       	mov	r6,r12
80007130:	5b fc       	cp.w	r12,-1
80007132:	c7 50       	breq	8000721c <_malloc_r+0x3f4>
80007134:	e6 02 00 08 	add	r8,r3,r2
80007138:	10 3c       	cp.w	r12,r8
8000713a:	c0 32       	brcc	80007140 <_malloc_r+0x318>
8000713c:	08 33       	cp.w	r3,r4
8000713e:	c6 f1       	brne	8000721c <_malloc_r+0x3f4>
80007140:	e0 6a 07 34 	mov	r10,1844
80007144:	74 09       	ld.w	r9,r10[0x0]
80007146:	e2 09 00 09 	add	r9,r1,r9
8000714a:	95 09       	st.w	r10[0x0],r9
8000714c:	10 36       	cp.w	r6,r8
8000714e:	c0 a1       	brne	80007162 <_malloc_r+0x33a>
80007150:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007154:	c0 71       	brne	80007162 <_malloc_r+0x33a>
80007156:	e2 02 00 02 	add	r2,r1,r2
8000715a:	68 28       	ld.w	r8,r4[0x8]
8000715c:	a1 a2       	sbr	r2,0x0
8000715e:	91 12       	st.w	r8[0x4],r2
80007160:	c4 f8       	rjmp	800071fe <_malloc_r+0x3d6>
80007162:	e0 6a 05 08 	mov	r10,1288
80007166:	74 0b       	ld.w	r11,r10[0x0]
80007168:	5b fb       	cp.w	r11,-1
8000716a:	c0 31       	brne	80007170 <_malloc_r+0x348>
8000716c:	95 06       	st.w	r10[0x0],r6
8000716e:	c0 78       	rjmp	8000717c <_malloc_r+0x354>
80007170:	ec 09 00 09 	add	r9,r6,r9
80007174:	e0 6a 07 34 	mov	r10,1844
80007178:	10 19       	sub	r9,r8
8000717a:	95 09       	st.w	r10[0x0],r9
8000717c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007180:	f0 09 11 08 	rsub	r9,r8,8
80007184:	58 08       	cp.w	r8,0
80007186:	f2 08 17 10 	movne	r8,r9
8000718a:	ed d8 e1 06 	addne	r6,r6,r8
8000718e:	28 08       	sub	r8,-128
80007190:	ec 01 00 01 	add	r1,r6,r1
80007194:	0a 9c       	mov	r12,r5
80007196:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000719a:	f0 01 01 01 	sub	r1,r8,r1
8000719e:	02 9b       	mov	r11,r1
800071a0:	e0 a0 04 fe 	rcall	80007b9c <_sbrk_r>
800071a4:	e0 68 07 34 	mov	r8,1844
800071a8:	5b fc       	cp.w	r12,-1
800071aa:	ec 0c 17 00 	moveq	r12,r6
800071ae:	f9 b1 00 00 	moveq	r1,0
800071b2:	70 09       	ld.w	r9,r8[0x0]
800071b4:	0c 1c       	sub	r12,r6
800071b6:	89 26       	st.w	r4[0x8],r6
800071b8:	02 0c       	add	r12,r1
800071ba:	12 01       	add	r1,r9
800071bc:	a1 ac       	sbr	r12,0x0
800071be:	91 01       	st.w	r8[0x0],r1
800071c0:	8d 1c       	st.w	r6[0x4],r12
800071c2:	08 33       	cp.w	r3,r4
800071c4:	c1 d0       	breq	800071fe <_malloc_r+0x3d6>
800071c6:	58 f2       	cp.w	r2,15
800071c8:	e0 8b 00 05 	brhi	800071d2 <_malloc_r+0x3aa>
800071cc:	30 18       	mov	r8,1
800071ce:	8d 18       	st.w	r6[0x4],r8
800071d0:	c2 68       	rjmp	8000721c <_malloc_r+0x3f4>
800071d2:	30 59       	mov	r9,5
800071d4:	20 c2       	sub	r2,12
800071d6:	e0 12 ff f8 	andl	r2,0xfff8
800071da:	e6 02 00 08 	add	r8,r3,r2
800071de:	91 29       	st.w	r8[0x8],r9
800071e0:	91 19       	st.w	r8[0x4],r9
800071e2:	66 18       	ld.w	r8,r3[0x4]
800071e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800071e8:	e5 e8 10 08 	or	r8,r2,r8
800071ec:	87 18       	st.w	r3[0x4],r8
800071ee:	58 f2       	cp.w	r2,15
800071f0:	e0 88 00 07 	brls	800071fe <_malloc_r+0x3d6>
800071f4:	e6 cb ff f8 	sub	r11,r3,-8
800071f8:	0a 9c       	mov	r12,r5
800071fa:	fe b0 fb 71 	rcall	800068dc <_free_r>
800071fe:	e0 69 07 2c 	mov	r9,1836
80007202:	72 0a       	ld.w	r10,r9[0x0]
80007204:	e0 68 07 34 	mov	r8,1844
80007208:	70 08       	ld.w	r8,r8[0x0]
8000720a:	14 38       	cp.w	r8,r10
8000720c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007210:	e0 69 07 28 	mov	r9,1832
80007214:	72 0a       	ld.w	r10,r9[0x0]
80007216:	14 38       	cp.w	r8,r10
80007218:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000721c:	68 28       	ld.w	r8,r4[0x8]
8000721e:	70 18       	ld.w	r8,r8[0x4]
80007220:	e0 18 ff fc 	andl	r8,0xfffc
80007224:	0e 38       	cp.w	r8,r7
80007226:	5f 39       	srlo	r9
80007228:	0e 18       	sub	r8,r7
8000722a:	58 f8       	cp.w	r8,15
8000722c:	5f aa       	srle	r10
8000722e:	f5 e9 10 09 	or	r9,r10,r9
80007232:	c0 50       	breq	8000723c <_malloc_r+0x414>
80007234:	0a 9c       	mov	r12,r5
80007236:	c4 3c       	rcall	800072bc <__malloc_unlock>
80007238:	d8 3a       	popm	r0-r7,pc,r12=0
8000723a:	d7 03       	nop
8000723c:	68 26       	ld.w	r6,r4[0x8]
8000723e:	a1 a8       	sbr	r8,0x0
80007240:	0e 99       	mov	r9,r7
80007242:	a1 a9       	sbr	r9,0x0
80007244:	8d 19       	st.w	r6[0x4],r9
80007246:	ec 07 00 07 	add	r7,r6,r7
8000724a:	0a 9c       	mov	r12,r5
8000724c:	89 27       	st.w	r4[0x8],r7
8000724e:	8f 18       	st.w	r7[0x4],r8
80007250:	c3 6c       	rcall	800072bc <__malloc_unlock>
80007252:	ec cc ff f8 	sub	r12,r6,-8
80007256:	d8 32       	popm	r0-r7,pc

80007258 <memchr>:
80007258:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000725c:	c0 68       	rjmp	80007268 <memchr+0x10>
8000725e:	20 1a       	sub	r10,1
80007260:	19 88       	ld.ub	r8,r12[0x0]
80007262:	16 38       	cp.w	r8,r11
80007264:	5e 0c       	reteq	r12
80007266:	2f fc       	sub	r12,-1
80007268:	58 0a       	cp.w	r10,0
8000726a:	cf a1       	brne	8000725e <memchr+0x6>
8000726c:	5e fa       	retal	r10

8000726e <memmove>:
8000726e:	d4 01       	pushm	lr
80007270:	18 3b       	cp.w	r11,r12
80007272:	c1 92       	brcc	800072a4 <memmove+0x36>
80007274:	f6 0a 00 09 	add	r9,r11,r10
80007278:	12 3c       	cp.w	r12,r9
8000727a:	c1 52       	brcc	800072a4 <memmove+0x36>
8000727c:	f8 0a 00 0b 	add	r11,r12,r10
80007280:	30 08       	mov	r8,0
80007282:	c0 68       	rjmp	8000728e <memmove+0x20>
80007284:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007288:	20 1a       	sub	r10,1
8000728a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000728e:	20 18       	sub	r8,1
80007290:	58 0a       	cp.w	r10,0
80007292:	cf 91       	brne	80007284 <memmove+0x16>
80007294:	d8 02       	popm	pc
80007296:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000729a:	20 1a       	sub	r10,1
8000729c:	f8 08 0b 09 	st.b	r12[r8],r9
800072a0:	2f f8       	sub	r8,-1
800072a2:	c0 28       	rjmp	800072a6 <memmove+0x38>
800072a4:	30 08       	mov	r8,0
800072a6:	58 0a       	cp.w	r10,0
800072a8:	cf 71       	brne	80007296 <memmove+0x28>
800072aa:	d8 02       	popm	pc

800072ac <memset>:
800072ac:	18 98       	mov	r8,r12
800072ae:	c0 38       	rjmp	800072b4 <memset+0x8>
800072b0:	10 cb       	st.b	r8++,r11
800072b2:	20 1a       	sub	r10,1
800072b4:	58 0a       	cp.w	r10,0
800072b6:	cf d1       	brne	800072b0 <memset+0x4>
800072b8:	5e fc       	retal	r12

800072ba <__malloc_lock>:
800072ba:	5e fc       	retal	r12

800072bc <__malloc_unlock>:
800072bc:	5e fc       	retal	r12

800072be <__hi0bits>:
800072be:	18 98       	mov	r8,r12
800072c0:	e0 1c 00 00 	andl	r12,0x0
800072c4:	f0 09 15 10 	lsl	r9,r8,0x10
800072c8:	58 0c       	cp.w	r12,0
800072ca:	f2 08 17 00 	moveq	r8,r9
800072ce:	f9 bc 00 10 	moveq	r12,16
800072d2:	f9 bc 01 00 	movne	r12,0
800072d6:	10 9a       	mov	r10,r8
800072d8:	f0 09 15 08 	lsl	r9,r8,0x8
800072dc:	e6 1a ff 00 	andh	r10,0xff00,COH
800072e0:	f7 bc 00 f8 	subeq	r12,-8
800072e4:	f2 08 17 00 	moveq	r8,r9
800072e8:	10 9a       	mov	r10,r8
800072ea:	f0 09 15 04 	lsl	r9,r8,0x4
800072ee:	e6 1a f0 00 	andh	r10,0xf000,COH
800072f2:	f7 bc 00 fc 	subeq	r12,-4
800072f6:	f2 08 17 00 	moveq	r8,r9
800072fa:	10 9a       	mov	r10,r8
800072fc:	f0 09 15 02 	lsl	r9,r8,0x2
80007300:	e6 1a c0 00 	andh	r10,0xc000,COH
80007304:	f7 bc 00 fe 	subeq	r12,-2
80007308:	f2 08 17 00 	moveq	r8,r9
8000730c:	58 08       	cp.w	r8,0
8000730e:	5e 5c       	retlt	r12
80007310:	ed b8 00 1e 	bld	r8,0x1e
80007314:	f9 bc 01 20 	movne	r12,32
80007318:	f7 bc 00 ff 	subeq	r12,-1
8000731c:	5e fc       	retal	r12

8000731e <__lo0bits>:
8000731e:	18 99       	mov	r9,r12
80007320:	78 08       	ld.w	r8,r12[0x0]
80007322:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007326:	c1 50       	breq	80007350 <__lo0bits+0x32>
80007328:	ed b8 00 00 	bld	r8,0x0
8000732c:	c0 21       	brne	80007330 <__lo0bits+0x12>
8000732e:	5e fd       	retal	0
80007330:	10 9b       	mov	r11,r8
80007332:	f0 0a 16 01 	lsr	r10,r8,0x1
80007336:	e2 1b 00 02 	andl	r11,0x2,COH
8000733a:	a3 88       	lsr	r8,0x2
8000733c:	58 0b       	cp.w	r11,0
8000733e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007342:	f9 bc 01 01 	movne	r12,1
80007346:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000734a:	f9 bc 00 02 	moveq	r12,2
8000734e:	5e fc       	retal	r12
80007350:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007354:	f0 0b 16 10 	lsr	r11,r8,0x10
80007358:	58 0a       	cp.w	r10,0
8000735a:	f6 08 17 00 	moveq	r8,r11
8000735e:	f9 bc 00 10 	moveq	r12,16
80007362:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007366:	f0 0a 16 08 	lsr	r10,r8,0x8
8000736a:	58 0b       	cp.w	r11,0
8000736c:	f7 bc 00 f8 	subeq	r12,-8
80007370:	f4 08 17 00 	moveq	r8,r10
80007374:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007378:	f0 0a 16 04 	lsr	r10,r8,0x4
8000737c:	58 0b       	cp.w	r11,0
8000737e:	f7 bc 00 fc 	subeq	r12,-4
80007382:	f4 08 17 00 	moveq	r8,r10
80007386:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000738a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000738e:	58 0b       	cp.w	r11,0
80007390:	f7 bc 00 fe 	subeq	r12,-2
80007394:	f4 08 17 00 	moveq	r8,r10
80007398:	ed b8 00 00 	bld	r8,0x0
8000739c:	c0 60       	breq	800073a8 <__lo0bits+0x8a>
8000739e:	a1 98       	lsr	r8,0x1
800073a0:	c0 31       	brne	800073a6 <__lo0bits+0x88>
800073a2:	32 0c       	mov	r12,32
800073a4:	5e fc       	retal	r12
800073a6:	2f fc       	sub	r12,-1
800073a8:	93 08       	st.w	r9[0x0],r8
800073aa:	5e fc       	retal	r12

800073ac <__mcmp>:
800073ac:	d4 01       	pushm	lr
800073ae:	18 98       	mov	r8,r12
800073b0:	76 49       	ld.w	r9,r11[0x10]
800073b2:	78 4c       	ld.w	r12,r12[0x10]
800073b4:	12 1c       	sub	r12,r9
800073b6:	c1 31       	brne	800073dc <__mcmp+0x30>
800073b8:	2f b9       	sub	r9,-5
800073ba:	a3 69       	lsl	r9,0x2
800073bc:	12 0b       	add	r11,r9
800073be:	f0 09 00 09 	add	r9,r8,r9
800073c2:	2e c8       	sub	r8,-20
800073c4:	13 4e       	ld.w	lr,--r9
800073c6:	17 4a       	ld.w	r10,--r11
800073c8:	14 3e       	cp.w	lr,r10
800073ca:	c0 60       	breq	800073d6 <__mcmp+0x2a>
800073cc:	f9 bc 03 ff 	movlo	r12,-1
800073d0:	f9 bc 02 01 	movhs	r12,1
800073d4:	d8 02       	popm	pc
800073d6:	10 39       	cp.w	r9,r8
800073d8:	fe 9b ff f6 	brhi	800073c4 <__mcmp+0x18>
800073dc:	d8 02       	popm	pc
800073de:	d7 03       	nop

800073e0 <_Bfree>:
800073e0:	d4 21       	pushm	r4-r7,lr
800073e2:	18 97       	mov	r7,r12
800073e4:	16 95       	mov	r5,r11
800073e6:	78 96       	ld.w	r6,r12[0x24]
800073e8:	58 06       	cp.w	r6,0
800073ea:	c0 91       	brne	800073fc <_Bfree+0x1c>
800073ec:	31 0c       	mov	r12,16
800073ee:	fe b0 fd 15 	rcall	80006e18 <malloc>
800073f2:	99 36       	st.w	r12[0xc],r6
800073f4:	8f 9c       	st.w	r7[0x24],r12
800073f6:	99 16       	st.w	r12[0x4],r6
800073f8:	99 26       	st.w	r12[0x8],r6
800073fa:	99 06       	st.w	r12[0x0],r6
800073fc:	58 05       	cp.w	r5,0
800073fe:	c0 90       	breq	80007410 <_Bfree+0x30>
80007400:	6a 19       	ld.w	r9,r5[0x4]
80007402:	6e 98       	ld.w	r8,r7[0x24]
80007404:	70 38       	ld.w	r8,r8[0xc]
80007406:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000740a:	8b 0a       	st.w	r5[0x0],r10
8000740c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007410:	d8 22       	popm	r4-r7,pc
80007412:	d7 03       	nop

80007414 <_Balloc>:
80007414:	d4 21       	pushm	r4-r7,lr
80007416:	18 97       	mov	r7,r12
80007418:	16 96       	mov	r6,r11
8000741a:	78 95       	ld.w	r5,r12[0x24]
8000741c:	58 05       	cp.w	r5,0
8000741e:	c0 91       	brne	80007430 <_Balloc+0x1c>
80007420:	31 0c       	mov	r12,16
80007422:	fe b0 fc fb 	rcall	80006e18 <malloc>
80007426:	99 35       	st.w	r12[0xc],r5
80007428:	8f 9c       	st.w	r7[0x24],r12
8000742a:	99 15       	st.w	r12[0x4],r5
8000742c:	99 25       	st.w	r12[0x8],r5
8000742e:	99 05       	st.w	r12[0x0],r5
80007430:	6e 95       	ld.w	r5,r7[0x24]
80007432:	6a 38       	ld.w	r8,r5[0xc]
80007434:	58 08       	cp.w	r8,0
80007436:	c0 b1       	brne	8000744c <_Balloc+0x38>
80007438:	31 0a       	mov	r10,16
8000743a:	30 4b       	mov	r11,4
8000743c:	0e 9c       	mov	r12,r7
8000743e:	e0 a0 04 93 	rcall	80007d64 <_calloc_r>
80007442:	8b 3c       	st.w	r5[0xc],r12
80007444:	6e 98       	ld.w	r8,r7[0x24]
80007446:	70 3c       	ld.w	r12,r8[0xc]
80007448:	58 0c       	cp.w	r12,0
8000744a:	c1 b0       	breq	80007480 <_Balloc+0x6c>
8000744c:	6e 98       	ld.w	r8,r7[0x24]
8000744e:	70 38       	ld.w	r8,r8[0xc]
80007450:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007454:	70 0c       	ld.w	r12,r8[0x0]
80007456:	58 0c       	cp.w	r12,0
80007458:	c0 40       	breq	80007460 <_Balloc+0x4c>
8000745a:	78 09       	ld.w	r9,r12[0x0]
8000745c:	91 09       	st.w	r8[0x0],r9
8000745e:	c0 e8       	rjmp	8000747a <_Balloc+0x66>
80007460:	0e 9c       	mov	r12,r7
80007462:	30 17       	mov	r7,1
80007464:	0e 9b       	mov	r11,r7
80007466:	ee 06 09 47 	lsl	r7,r7,r6
8000746a:	ee ca ff fb 	sub	r10,r7,-5
8000746e:	a3 6a       	lsl	r10,0x2
80007470:	e0 a0 04 7a 	rcall	80007d64 <_calloc_r>
80007474:	c0 60       	breq	80007480 <_Balloc+0x6c>
80007476:	99 16       	st.w	r12[0x4],r6
80007478:	99 27       	st.w	r12[0x8],r7
8000747a:	30 08       	mov	r8,0
8000747c:	99 38       	st.w	r12[0xc],r8
8000747e:	99 48       	st.w	r12[0x10],r8
80007480:	d8 22       	popm	r4-r7,pc
80007482:	d7 03       	nop

80007484 <__d2b>:
80007484:	d4 31       	pushm	r0-r7,lr
80007486:	20 2d       	sub	sp,8
80007488:	16 93       	mov	r3,r11
8000748a:	12 96       	mov	r6,r9
8000748c:	10 95       	mov	r5,r8
8000748e:	14 92       	mov	r2,r10
80007490:	30 1b       	mov	r11,1
80007492:	cc 1f       	rcall	80007414 <_Balloc>
80007494:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007498:	50 09       	stdsp	sp[0x0],r9
8000749a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000749e:	b5 a9       	sbr	r9,0x14
800074a0:	f0 01 16 14 	lsr	r1,r8,0x14
800074a4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800074a8:	18 94       	mov	r4,r12
800074aa:	58 02       	cp.w	r2,0
800074ac:	c1 d0       	breq	800074e6 <__d2b+0x62>
800074ae:	fa cc ff f8 	sub	r12,sp,-8
800074b2:	18 d2       	st.w	--r12,r2
800074b4:	c3 5f       	rcall	8000731e <__lo0bits>
800074b6:	40 18       	lddsp	r8,sp[0x4]
800074b8:	c0 d0       	breq	800074d2 <__d2b+0x4e>
800074ba:	40 09       	lddsp	r9,sp[0x0]
800074bc:	f8 0a 11 20 	rsub	r10,r12,32
800074c0:	f2 0a 09 4a 	lsl	r10,r9,r10
800074c4:	f5 e8 10 08 	or	r8,r10,r8
800074c8:	89 58       	st.w	r4[0x14],r8
800074ca:	f2 0c 0a 49 	lsr	r9,r9,r12
800074ce:	50 09       	stdsp	sp[0x0],r9
800074d0:	c0 28       	rjmp	800074d4 <__d2b+0x50>
800074d2:	89 58       	st.w	r4[0x14],r8
800074d4:	40 08       	lddsp	r8,sp[0x0]
800074d6:	58 08       	cp.w	r8,0
800074d8:	f9 b3 01 02 	movne	r3,2
800074dc:	f9 b3 00 01 	moveq	r3,1
800074e0:	89 68       	st.w	r4[0x18],r8
800074e2:	89 43       	st.w	r4[0x10],r3
800074e4:	c0 88       	rjmp	800074f4 <__d2b+0x70>
800074e6:	1a 9c       	mov	r12,sp
800074e8:	c1 bf       	rcall	8000731e <__lo0bits>
800074ea:	30 13       	mov	r3,1
800074ec:	40 08       	lddsp	r8,sp[0x0]
800074ee:	2e 0c       	sub	r12,-32
800074f0:	89 43       	st.w	r4[0x10],r3
800074f2:	89 58       	st.w	r4[0x14],r8
800074f4:	58 01       	cp.w	r1,0
800074f6:	c0 90       	breq	80007508 <__d2b+0x84>
800074f8:	e2 c1 04 33 	sub	r1,r1,1075
800074fc:	18 01       	add	r1,r12
800074fe:	8d 01       	st.w	r6[0x0],r1
80007500:	f8 0c 11 35 	rsub	r12,r12,53
80007504:	8b 0c       	st.w	r5[0x0],r12
80007506:	c0 c8       	rjmp	8000751e <__d2b+0x9a>
80007508:	e6 c8 ff fc 	sub	r8,r3,-4
8000750c:	f8 cc 04 32 	sub	r12,r12,1074
80007510:	a5 73       	lsl	r3,0x5
80007512:	8d 0c       	st.w	r6[0x0],r12
80007514:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007518:	cd 3e       	rcall	800072be <__hi0bits>
8000751a:	18 13       	sub	r3,r12
8000751c:	8b 03       	st.w	r5[0x0],r3
8000751e:	08 9c       	mov	r12,r4
80007520:	2f ed       	sub	sp,-8
80007522:	d8 32       	popm	r0-r7,pc

80007524 <__mdiff>:
80007524:	d4 31       	pushm	r0-r7,lr
80007526:	74 48       	ld.w	r8,r10[0x10]
80007528:	76 45       	ld.w	r5,r11[0x10]
8000752a:	16 97       	mov	r7,r11
8000752c:	14 96       	mov	r6,r10
8000752e:	10 15       	sub	r5,r8
80007530:	c1 31       	brne	80007556 <__mdiff+0x32>
80007532:	2f b8       	sub	r8,-5
80007534:	ee ce ff ec 	sub	lr,r7,-20
80007538:	a3 68       	lsl	r8,0x2
8000753a:	f4 08 00 0b 	add	r11,r10,r8
8000753e:	ee 08 00 08 	add	r8,r7,r8
80007542:	11 4a       	ld.w	r10,--r8
80007544:	17 49       	ld.w	r9,--r11
80007546:	12 3a       	cp.w	r10,r9
80007548:	c0 30       	breq	8000754e <__mdiff+0x2a>
8000754a:	c0 e2       	brcc	80007566 <__mdiff+0x42>
8000754c:	c0 78       	rjmp	8000755a <__mdiff+0x36>
8000754e:	1c 38       	cp.w	r8,lr
80007550:	fe 9b ff f9 	brhi	80007542 <__mdiff+0x1e>
80007554:	c4 98       	rjmp	800075e6 <__mdiff+0xc2>
80007556:	58 05       	cp.w	r5,0
80007558:	c0 64       	brge	80007564 <__mdiff+0x40>
8000755a:	0e 98       	mov	r8,r7
8000755c:	30 15       	mov	r5,1
8000755e:	0c 97       	mov	r7,r6
80007560:	10 96       	mov	r6,r8
80007562:	c0 28       	rjmp	80007566 <__mdiff+0x42>
80007564:	30 05       	mov	r5,0
80007566:	6e 1b       	ld.w	r11,r7[0x4]
80007568:	c5 6f       	rcall	80007414 <_Balloc>
8000756a:	6e 49       	ld.w	r9,r7[0x10]
8000756c:	6c 44       	ld.w	r4,r6[0x10]
8000756e:	99 35       	st.w	r12[0xc],r5
80007570:	2f b4       	sub	r4,-5
80007572:	f2 c5 ff fb 	sub	r5,r9,-5
80007576:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000757a:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000757e:	2e c6       	sub	r6,-20
80007580:	2e c7       	sub	r7,-20
80007582:	f8 c8 ff ec 	sub	r8,r12,-20
80007586:	30 0a       	mov	r10,0
80007588:	0f 0e       	ld.w	lr,r7++
8000758a:	0d 0b       	ld.w	r11,r6++
8000758c:	fc 02 16 10 	lsr	r2,lr,0x10
80007590:	f6 03 16 10 	lsr	r3,r11,0x10
80007594:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007598:	e4 03 01 03 	sub	r3,r2,r3
8000759c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800075a0:	fc 0b 01 0b 	sub	r11,lr,r11
800075a4:	f6 0a 00 0a 	add	r10,r11,r10
800075a8:	b0 1a       	st.h	r8[0x2],r10
800075aa:	b1 4a       	asr	r10,0x10
800075ac:	e6 0a 00 0a 	add	r10,r3,r10
800075b0:	b0 0a       	st.h	r8[0x0],r10
800075b2:	2f c8       	sub	r8,-4
800075b4:	b1 4a       	asr	r10,0x10
800075b6:	08 36       	cp.w	r6,r4
800075b8:	ce 83       	brcs	80007588 <__mdiff+0x64>
800075ba:	c0 d8       	rjmp	800075d4 <__mdiff+0xb0>
800075bc:	0f 0b       	ld.w	r11,r7++
800075be:	f6 0e 16 10 	lsr	lr,r11,0x10
800075c2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800075c6:	16 0a       	add	r10,r11
800075c8:	b0 1a       	st.h	r8[0x2],r10
800075ca:	b1 4a       	asr	r10,0x10
800075cc:	1c 0a       	add	r10,lr
800075ce:	b0 0a       	st.h	r8[0x0],r10
800075d0:	2f c8       	sub	r8,-4
800075d2:	b1 4a       	asr	r10,0x10
800075d4:	0a 37       	cp.w	r7,r5
800075d6:	cf 33       	brcs	800075bc <__mdiff+0x98>
800075d8:	c0 28       	rjmp	800075dc <__mdiff+0xb8>
800075da:	20 19       	sub	r9,1
800075dc:	11 4a       	ld.w	r10,--r8
800075de:	58 0a       	cp.w	r10,0
800075e0:	cf d0       	breq	800075da <__mdiff+0xb6>
800075e2:	99 49       	st.w	r12[0x10],r9
800075e4:	d8 32       	popm	r0-r7,pc
800075e6:	30 0b       	mov	r11,0
800075e8:	c1 6f       	rcall	80007414 <_Balloc>
800075ea:	30 18       	mov	r8,1
800075ec:	99 48       	st.w	r12[0x10],r8
800075ee:	30 08       	mov	r8,0
800075f0:	99 58       	st.w	r12[0x14],r8
800075f2:	d8 32       	popm	r0-r7,pc

800075f4 <__lshift>:
800075f4:	d4 31       	pushm	r0-r7,lr
800075f6:	16 97       	mov	r7,r11
800075f8:	76 46       	ld.w	r6,r11[0x10]
800075fa:	f4 02 14 05 	asr	r2,r10,0x5
800075fe:	2f f6       	sub	r6,-1
80007600:	14 93       	mov	r3,r10
80007602:	18 94       	mov	r4,r12
80007604:	04 06       	add	r6,r2
80007606:	76 1b       	ld.w	r11,r11[0x4]
80007608:	6e 28       	ld.w	r8,r7[0x8]
8000760a:	c0 38       	rjmp	80007610 <__lshift+0x1c>
8000760c:	2f fb       	sub	r11,-1
8000760e:	a1 78       	lsl	r8,0x1
80007610:	10 36       	cp.w	r6,r8
80007612:	fe 99 ff fd 	brgt	8000760c <__lshift+0x18>
80007616:	08 9c       	mov	r12,r4
80007618:	cf ee       	rcall	80007414 <_Balloc>
8000761a:	30 09       	mov	r9,0
8000761c:	18 95       	mov	r5,r12
8000761e:	f8 c8 ff ec 	sub	r8,r12,-20
80007622:	12 9a       	mov	r10,r9
80007624:	c0 38       	rjmp	8000762a <__lshift+0x36>
80007626:	10 aa       	st.w	r8++,r10
80007628:	2f f9       	sub	r9,-1
8000762a:	04 39       	cp.w	r9,r2
8000762c:	cf d5       	brlt	80007626 <__lshift+0x32>
8000762e:	6e 4b       	ld.w	r11,r7[0x10]
80007630:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007634:	2f bb       	sub	r11,-5
80007636:	ee c9 ff ec 	sub	r9,r7,-20
8000763a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000763e:	58 03       	cp.w	r3,0
80007640:	c1 30       	breq	80007666 <__lshift+0x72>
80007642:	e6 0c 11 20 	rsub	r12,r3,32
80007646:	30 0a       	mov	r10,0
80007648:	72 02       	ld.w	r2,r9[0x0]
8000764a:	e4 03 09 42 	lsl	r2,r2,r3
8000764e:	04 4a       	or	r10,r2
80007650:	10 aa       	st.w	r8++,r10
80007652:	13 0a       	ld.w	r10,r9++
80007654:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007658:	16 39       	cp.w	r9,r11
8000765a:	cf 73       	brcs	80007648 <__lshift+0x54>
8000765c:	91 0a       	st.w	r8[0x0],r10
8000765e:	58 0a       	cp.w	r10,0
80007660:	c0 70       	breq	8000766e <__lshift+0x7a>
80007662:	2f f6       	sub	r6,-1
80007664:	c0 58       	rjmp	8000766e <__lshift+0x7a>
80007666:	13 0a       	ld.w	r10,r9++
80007668:	10 aa       	st.w	r8++,r10
8000766a:	16 39       	cp.w	r9,r11
8000766c:	cf d3       	brcs	80007666 <__lshift+0x72>
8000766e:	08 9c       	mov	r12,r4
80007670:	20 16       	sub	r6,1
80007672:	0e 9b       	mov	r11,r7
80007674:	8b 46       	st.w	r5[0x10],r6
80007676:	cb 5e       	rcall	800073e0 <_Bfree>
80007678:	0a 9c       	mov	r12,r5
8000767a:	d8 32       	popm	r0-r7,pc

8000767c <__multiply>:
8000767c:	d4 31       	pushm	r0-r7,lr
8000767e:	20 2d       	sub	sp,8
80007680:	76 49       	ld.w	r9,r11[0x10]
80007682:	74 48       	ld.w	r8,r10[0x10]
80007684:	16 96       	mov	r6,r11
80007686:	14 95       	mov	r5,r10
80007688:	10 39       	cp.w	r9,r8
8000768a:	ec 08 17 50 	movlt	r8,r6
8000768e:	ea 06 17 50 	movlt	r6,r5
80007692:	f0 05 17 50 	movlt	r5,r8
80007696:	6c 28       	ld.w	r8,r6[0x8]
80007698:	76 43       	ld.w	r3,r11[0x10]
8000769a:	74 42       	ld.w	r2,r10[0x10]
8000769c:	76 1b       	ld.w	r11,r11[0x4]
8000769e:	e4 03 00 07 	add	r7,r2,r3
800076a2:	10 37       	cp.w	r7,r8
800076a4:	f7 bb 09 ff 	subgt	r11,-1
800076a8:	cb 6e       	rcall	80007414 <_Balloc>
800076aa:	ee c4 ff fb 	sub	r4,r7,-5
800076ae:	f8 c9 ff ec 	sub	r9,r12,-20
800076b2:	f8 04 00 24 	add	r4,r12,r4<<0x2
800076b6:	30 0a       	mov	r10,0
800076b8:	12 98       	mov	r8,r9
800076ba:	c0 28       	rjmp	800076be <__multiply+0x42>
800076bc:	10 aa       	st.w	r8++,r10
800076be:	08 38       	cp.w	r8,r4
800076c0:	cf e3       	brcs	800076bc <__multiply+0x40>
800076c2:	2f b3       	sub	r3,-5
800076c4:	2f b2       	sub	r2,-5
800076c6:	ec 03 00 23 	add	r3,r6,r3<<0x2
800076ca:	ea 02 00 22 	add	r2,r5,r2<<0x2
800076ce:	ec cb ff ec 	sub	r11,r6,-20
800076d2:	50 12       	stdsp	sp[0x4],r2
800076d4:	ea ca ff ec 	sub	r10,r5,-20
800076d8:	c4 48       	rjmp	80007760 <__multiply+0xe4>
800076da:	94 95       	ld.uh	r5,r10[0x2]
800076dc:	58 05       	cp.w	r5,0
800076de:	c2 00       	breq	8000771e <__multiply+0xa2>
800076e0:	12 98       	mov	r8,r9
800076e2:	16 96       	mov	r6,r11
800076e4:	30 0e       	mov	lr,0
800076e6:	50 09       	stdsp	sp[0x0],r9
800076e8:	0d 02       	ld.w	r2,r6++
800076ea:	e4 00 16 10 	lsr	r0,r2,0x10
800076ee:	70 01       	ld.w	r1,r8[0x0]
800076f0:	70 09       	ld.w	r9,r8[0x0]
800076f2:	b1 81       	lsr	r1,0x10
800076f4:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800076f8:	e0 05 03 41 	mac	r1,r0,r5
800076fc:	ab 32       	mul	r2,r5
800076fe:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007702:	00 02       	add	r2,r0
80007704:	e4 0e 00 0e 	add	lr,r2,lr
80007708:	b0 1e       	st.h	r8[0x2],lr
8000770a:	b1 8e       	lsr	lr,0x10
8000770c:	1c 01       	add	r1,lr
8000770e:	b0 01       	st.h	r8[0x0],r1
80007710:	e2 0e 16 10 	lsr	lr,r1,0x10
80007714:	2f c8       	sub	r8,-4
80007716:	06 36       	cp.w	r6,r3
80007718:	ce 83       	brcs	800076e8 <__multiply+0x6c>
8000771a:	40 09       	lddsp	r9,sp[0x0]
8000771c:	91 0e       	st.w	r8[0x0],lr
8000771e:	94 86       	ld.uh	r6,r10[0x0]
80007720:	58 06       	cp.w	r6,0
80007722:	c1 d0       	breq	8000775c <__multiply+0xe0>
80007724:	72 02       	ld.w	r2,r9[0x0]
80007726:	12 98       	mov	r8,r9
80007728:	16 9e       	mov	lr,r11
8000772a:	30 05       	mov	r5,0
8000772c:	b0 12       	st.h	r8[0x2],r2
8000772e:	1d 01       	ld.w	r1,lr++
80007730:	90 82       	ld.uh	r2,r8[0x0]
80007732:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007736:	ad 30       	mul	r0,r6
80007738:	e0 02 00 02 	add	r2,r0,r2
8000773c:	e4 05 00 05 	add	r5,r2,r5
80007740:	b0 05       	st.h	r8[0x0],r5
80007742:	b1 85       	lsr	r5,0x10
80007744:	b1 81       	lsr	r1,0x10
80007746:	2f c8       	sub	r8,-4
80007748:	ad 31       	mul	r1,r6
8000774a:	90 92       	ld.uh	r2,r8[0x2]
8000774c:	e2 02 00 02 	add	r2,r1,r2
80007750:	0a 02       	add	r2,r5
80007752:	e4 05 16 10 	lsr	r5,r2,0x10
80007756:	06 3e       	cp.w	lr,r3
80007758:	ce a3       	brcs	8000772c <__multiply+0xb0>
8000775a:	91 02       	st.w	r8[0x0],r2
8000775c:	2f ca       	sub	r10,-4
8000775e:	2f c9       	sub	r9,-4
80007760:	40 18       	lddsp	r8,sp[0x4]
80007762:	10 3a       	cp.w	r10,r8
80007764:	cb b3       	brcs	800076da <__multiply+0x5e>
80007766:	c0 28       	rjmp	8000776a <__multiply+0xee>
80007768:	20 17       	sub	r7,1
8000776a:	58 07       	cp.w	r7,0
8000776c:	e0 8a 00 05 	brle	80007776 <__multiply+0xfa>
80007770:	09 48       	ld.w	r8,--r4
80007772:	58 08       	cp.w	r8,0
80007774:	cf a0       	breq	80007768 <__multiply+0xec>
80007776:	99 47       	st.w	r12[0x10],r7
80007778:	2f ed       	sub	sp,-8
8000777a:	d8 32       	popm	r0-r7,pc

8000777c <__i2b>:
8000777c:	d4 21       	pushm	r4-r7,lr
8000777e:	16 97       	mov	r7,r11
80007780:	30 1b       	mov	r11,1
80007782:	c4 9e       	rcall	80007414 <_Balloc>
80007784:	30 19       	mov	r9,1
80007786:	99 57       	st.w	r12[0x14],r7
80007788:	99 49       	st.w	r12[0x10],r9
8000778a:	d8 22       	popm	r4-r7,pc

8000778c <__multadd>:
8000778c:	d4 31       	pushm	r0-r7,lr
8000778e:	30 08       	mov	r8,0
80007790:	12 95       	mov	r5,r9
80007792:	16 97       	mov	r7,r11
80007794:	18 96       	mov	r6,r12
80007796:	76 44       	ld.w	r4,r11[0x10]
80007798:	f6 c9 ff ec 	sub	r9,r11,-20
8000779c:	72 0b       	ld.w	r11,r9[0x0]
8000779e:	f6 0c 16 10 	lsr	r12,r11,0x10
800077a2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800077a6:	f4 0c 02 4c 	mul	r12,r10,r12
800077aa:	f4 0b 03 45 	mac	r5,r10,r11
800077ae:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800077b2:	b1 85       	lsr	r5,0x10
800077b4:	18 05       	add	r5,r12
800077b6:	ea 0c 15 10 	lsl	r12,r5,0x10
800077ba:	f8 0b 00 0b 	add	r11,r12,r11
800077be:	12 ab       	st.w	r9++,r11
800077c0:	2f f8       	sub	r8,-1
800077c2:	b1 85       	lsr	r5,0x10
800077c4:	08 38       	cp.w	r8,r4
800077c6:	ce b5       	brlt	8000779c <__multadd+0x10>
800077c8:	58 05       	cp.w	r5,0
800077ca:	c1 c0       	breq	80007802 <__multadd+0x76>
800077cc:	6e 28       	ld.w	r8,r7[0x8]
800077ce:	10 34       	cp.w	r4,r8
800077d0:	c1 35       	brlt	800077f6 <__multadd+0x6a>
800077d2:	6e 1b       	ld.w	r11,r7[0x4]
800077d4:	0c 9c       	mov	r12,r6
800077d6:	2f fb       	sub	r11,-1
800077d8:	c1 ee       	rcall	80007414 <_Balloc>
800077da:	6e 4a       	ld.w	r10,r7[0x10]
800077dc:	ee cb ff f4 	sub	r11,r7,-12
800077e0:	18 93       	mov	r3,r12
800077e2:	2f ea       	sub	r10,-2
800077e4:	2f 4c       	sub	r12,-12
800077e6:	a3 6a       	lsl	r10,0x2
800077e8:	fe b0 dd e6 	rcall	800033b4 <memcpy>
800077ec:	0e 9b       	mov	r11,r7
800077ee:	0c 9c       	mov	r12,r6
800077f0:	fe b0 fd f8 	rcall	800073e0 <_Bfree>
800077f4:	06 97       	mov	r7,r3
800077f6:	e8 c8 ff ff 	sub	r8,r4,-1
800077fa:	2f b4       	sub	r4,-5
800077fc:	8f 48       	st.w	r7[0x10],r8
800077fe:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007802:	0e 9c       	mov	r12,r7
80007804:	d8 32       	popm	r0-r7,pc
80007806:	d7 03       	nop

80007808 <__pow5mult>:
80007808:	d4 31       	pushm	r0-r7,lr
8000780a:	14 96       	mov	r6,r10
8000780c:	18 97       	mov	r7,r12
8000780e:	16 94       	mov	r4,r11
80007810:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007814:	c0 90       	breq	80007826 <__pow5mult+0x1e>
80007816:	20 18       	sub	r8,1
80007818:	fe c9 c9 34 	sub	r9,pc,-14028
8000781c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007820:	30 09       	mov	r9,0
80007822:	cb 5f       	rcall	8000778c <__multadd>
80007824:	18 94       	mov	r4,r12
80007826:	a3 46       	asr	r6,0x2
80007828:	c3 40       	breq	80007890 <__pow5mult+0x88>
8000782a:	6e 95       	ld.w	r5,r7[0x24]
8000782c:	58 05       	cp.w	r5,0
8000782e:	c0 91       	brne	80007840 <__pow5mult+0x38>
80007830:	31 0c       	mov	r12,16
80007832:	fe b0 fa f3 	rcall	80006e18 <malloc>
80007836:	99 35       	st.w	r12[0xc],r5
80007838:	8f 9c       	st.w	r7[0x24],r12
8000783a:	99 15       	st.w	r12[0x4],r5
8000783c:	99 25       	st.w	r12[0x8],r5
8000783e:	99 05       	st.w	r12[0x0],r5
80007840:	6e 93       	ld.w	r3,r7[0x24]
80007842:	66 25       	ld.w	r5,r3[0x8]
80007844:	58 05       	cp.w	r5,0
80007846:	c0 c1       	brne	8000785e <__pow5mult+0x56>
80007848:	e0 6b 02 71 	mov	r11,625
8000784c:	0e 9c       	mov	r12,r7
8000784e:	c9 7f       	rcall	8000777c <__i2b>
80007850:	87 2c       	st.w	r3[0x8],r12
80007852:	30 08       	mov	r8,0
80007854:	18 95       	mov	r5,r12
80007856:	99 08       	st.w	r12[0x0],r8
80007858:	c0 38       	rjmp	8000785e <__pow5mult+0x56>
8000785a:	06 9c       	mov	r12,r3
8000785c:	18 95       	mov	r5,r12
8000785e:	ed b6 00 00 	bld	r6,0x0
80007862:	c0 b1       	brne	80007878 <__pow5mult+0x70>
80007864:	08 9b       	mov	r11,r4
80007866:	0a 9a       	mov	r10,r5
80007868:	0e 9c       	mov	r12,r7
8000786a:	c0 9f       	rcall	8000767c <__multiply>
8000786c:	08 9b       	mov	r11,r4
8000786e:	18 93       	mov	r3,r12
80007870:	0e 9c       	mov	r12,r7
80007872:	06 94       	mov	r4,r3
80007874:	fe b0 fd b6 	rcall	800073e0 <_Bfree>
80007878:	a1 56       	asr	r6,0x1
8000787a:	c0 b0       	breq	80007890 <__pow5mult+0x88>
8000787c:	6a 03       	ld.w	r3,r5[0x0]
8000787e:	58 03       	cp.w	r3,0
80007880:	ce d1       	brne	8000785a <__pow5mult+0x52>
80007882:	0a 9a       	mov	r10,r5
80007884:	0a 9b       	mov	r11,r5
80007886:	0e 9c       	mov	r12,r7
80007888:	cf ae       	rcall	8000767c <__multiply>
8000788a:	8b 0c       	st.w	r5[0x0],r12
8000788c:	99 03       	st.w	r12[0x0],r3
8000788e:	ce 7b       	rjmp	8000785c <__pow5mult+0x54>
80007890:	08 9c       	mov	r12,r4
80007892:	d8 32       	popm	r0-r7,pc

80007894 <_realloc_r>:
80007894:	d4 31       	pushm	r0-r7,lr
80007896:	20 1d       	sub	sp,4
80007898:	16 94       	mov	r4,r11
8000789a:	18 92       	mov	r2,r12
8000789c:	14 9b       	mov	r11,r10
8000789e:	58 04       	cp.w	r4,0
800078a0:	c0 51       	brne	800078aa <_realloc_r+0x16>
800078a2:	fe b0 fa c3 	rcall	80006e28 <_malloc_r>
800078a6:	18 95       	mov	r5,r12
800078a8:	c5 39       	rjmp	80007b4e <_realloc_r+0x2ba>
800078aa:	50 0a       	stdsp	sp[0x0],r10
800078ac:	fe b0 fd 07 	rcall	800072ba <__malloc_lock>
800078b0:	40 0b       	lddsp	r11,sp[0x0]
800078b2:	f6 c8 ff f5 	sub	r8,r11,-11
800078b6:	e8 c1 00 08 	sub	r1,r4,8
800078ba:	10 96       	mov	r6,r8
800078bc:	62 1c       	ld.w	r12,r1[0x4]
800078be:	e0 16 ff f8 	andl	r6,0xfff8
800078c2:	59 68       	cp.w	r8,22
800078c4:	f9 b6 08 10 	movls	r6,16
800078c8:	16 36       	cp.w	r6,r11
800078ca:	5f 38       	srlo	r8
800078cc:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800078d0:	c0 50       	breq	800078da <_realloc_r+0x46>
800078d2:	30 c8       	mov	r8,12
800078d4:	30 05       	mov	r5,0
800078d6:	85 38       	st.w	r2[0xc],r8
800078d8:	c3 b9       	rjmp	80007b4e <_realloc_r+0x2ba>
800078da:	18 90       	mov	r0,r12
800078dc:	e0 10 ff fc 	andl	r0,0xfffc
800078e0:	0c 30       	cp.w	r0,r6
800078e2:	e0 84 01 0b 	brge	80007af8 <_realloc_r+0x264>
800078e6:	e0 68 00 fc 	mov	r8,252
800078ea:	e2 00 00 09 	add	r9,r1,r0
800078ee:	70 25       	ld.w	r5,r8[0x8]
800078f0:	0a 39       	cp.w	r9,r5
800078f2:	c0 90       	breq	80007904 <_realloc_r+0x70>
800078f4:	72 1a       	ld.w	r10,r9[0x4]
800078f6:	a1 ca       	cbr	r10,0x0
800078f8:	f2 0a 00 0a 	add	r10,r9,r10
800078fc:	74 1a       	ld.w	r10,r10[0x4]
800078fe:	ed ba 00 00 	bld	r10,0x0
80007902:	c2 20       	breq	80007946 <_realloc_r+0xb2>
80007904:	72 1a       	ld.w	r10,r9[0x4]
80007906:	e0 1a ff fc 	andl	r10,0xfffc
8000790a:	f4 00 00 03 	add	r3,r10,r0
8000790e:	0a 39       	cp.w	r9,r5
80007910:	c1 31       	brne	80007936 <_realloc_r+0xa2>
80007912:	ec c7 ff f0 	sub	r7,r6,-16
80007916:	0e 33       	cp.w	r3,r7
80007918:	c1 95       	brlt	8000794a <_realloc_r+0xb6>
8000791a:	e2 06 00 09 	add	r9,r1,r6
8000791e:	0c 13       	sub	r3,r6
80007920:	a1 a3       	sbr	r3,0x0
80007922:	93 13       	st.w	r9[0x4],r3
80007924:	91 29       	st.w	r8[0x8],r9
80007926:	04 9c       	mov	r12,r2
80007928:	62 18       	ld.w	r8,r1[0x4]
8000792a:	08 95       	mov	r5,r4
8000792c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007930:	10 46       	or	r6,r8
80007932:	83 16       	st.w	r1[0x4],r6
80007934:	c0 b9       	rjmp	80007b4a <_realloc_r+0x2b6>
80007936:	0c 33       	cp.w	r3,r6
80007938:	c0 95       	brlt	8000794a <_realloc_r+0xb6>
8000793a:	72 28       	ld.w	r8,r9[0x8]
8000793c:	02 97       	mov	r7,r1
8000793e:	72 39       	ld.w	r9,r9[0xc]
80007940:	93 28       	st.w	r9[0x8],r8
80007942:	91 39       	st.w	r8[0xc],r9
80007944:	cd c8       	rjmp	80007afc <_realloc_r+0x268>
80007946:	30 0a       	mov	r10,0
80007948:	14 99       	mov	r9,r10
8000794a:	ed bc 00 00 	bld	r12,0x0
8000794e:	e0 80 00 95 	breq	80007a78 <_realloc_r+0x1e4>
80007952:	62 07       	ld.w	r7,r1[0x0]
80007954:	e2 07 01 07 	sub	r7,r1,r7
80007958:	6e 1c       	ld.w	r12,r7[0x4]
8000795a:	e0 1c ff fc 	andl	r12,0xfffc
8000795e:	58 09       	cp.w	r9,0
80007960:	c5 60       	breq	80007a0c <_realloc_r+0x178>
80007962:	f8 00 00 03 	add	r3,r12,r0
80007966:	0a 39       	cp.w	r9,r5
80007968:	c4 81       	brne	800079f8 <_realloc_r+0x164>
8000796a:	14 03       	add	r3,r10
8000796c:	ec c9 ff f0 	sub	r9,r6,-16
80007970:	12 33       	cp.w	r3,r9
80007972:	c4 d5       	brlt	80007a0c <_realloc_r+0x178>
80007974:	6e 3a       	ld.w	r10,r7[0xc]
80007976:	6e 29       	ld.w	r9,r7[0x8]
80007978:	95 29       	st.w	r10[0x8],r9
8000797a:	93 3a       	st.w	r9[0xc],r10
8000797c:	ee c5 ff f8 	sub	r5,r7,-8
80007980:	e0 ca 00 04 	sub	r10,r0,4
80007984:	e0 4a 00 24 	cp.w	r10,36
80007988:	e0 8b 00 25 	brhi	800079d2 <_realloc_r+0x13e>
8000798c:	0a 99       	mov	r9,r5
8000798e:	59 3a       	cp.w	r10,19
80007990:	e0 88 00 1a 	brls	800079c4 <_realloc_r+0x130>
80007994:	09 09       	ld.w	r9,r4++
80007996:	8b 09       	st.w	r5[0x0],r9
80007998:	09 09       	ld.w	r9,r4++
8000799a:	8f 39       	st.w	r7[0xc],r9
8000799c:	ee c9 ff f0 	sub	r9,r7,-16
800079a0:	59 ba       	cp.w	r10,27
800079a2:	e0 88 00 11 	brls	800079c4 <_realloc_r+0x130>
800079a6:	09 0b       	ld.w	r11,r4++
800079a8:	93 0b       	st.w	r9[0x0],r11
800079aa:	09 09       	ld.w	r9,r4++
800079ac:	8f 59       	st.w	r7[0x14],r9
800079ae:	ee c9 ff e8 	sub	r9,r7,-24
800079b2:	e0 4a 00 24 	cp.w	r10,36
800079b6:	c0 71       	brne	800079c4 <_realloc_r+0x130>
800079b8:	09 0a       	ld.w	r10,r4++
800079ba:	93 0a       	st.w	r9[0x0],r10
800079bc:	ee c9 ff e0 	sub	r9,r7,-32
800079c0:	09 0a       	ld.w	r10,r4++
800079c2:	8f 7a       	st.w	r7[0x1c],r10
800079c4:	09 0a       	ld.w	r10,r4++
800079c6:	12 aa       	st.w	r9++,r10
800079c8:	68 0a       	ld.w	r10,r4[0x0]
800079ca:	93 0a       	st.w	r9[0x0],r10
800079cc:	68 1a       	ld.w	r10,r4[0x4]
800079ce:	93 1a       	st.w	r9[0x4],r10
800079d0:	c0 78       	rjmp	800079de <_realloc_r+0x14a>
800079d2:	50 08       	stdsp	sp[0x0],r8
800079d4:	08 9b       	mov	r11,r4
800079d6:	0a 9c       	mov	r12,r5
800079d8:	fe b0 fc 4b 	rcall	8000726e <memmove>
800079dc:	40 08       	lddsp	r8,sp[0x0]
800079de:	ee 06 00 09 	add	r9,r7,r6
800079e2:	0c 13       	sub	r3,r6
800079e4:	a1 a3       	sbr	r3,0x0
800079e6:	93 13       	st.w	r9[0x4],r3
800079e8:	91 29       	st.w	r8[0x8],r9
800079ea:	04 9c       	mov	r12,r2
800079ec:	6e 18       	ld.w	r8,r7[0x4]
800079ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079f2:	10 46       	or	r6,r8
800079f4:	8f 16       	st.w	r7[0x4],r6
800079f6:	ca a8       	rjmp	80007b4a <_realloc_r+0x2b6>
800079f8:	14 03       	add	r3,r10
800079fa:	0c 33       	cp.w	r3,r6
800079fc:	c0 85       	brlt	80007a0c <_realloc_r+0x178>
800079fe:	72 28       	ld.w	r8,r9[0x8]
80007a00:	72 39       	ld.w	r9,r9[0xc]
80007a02:	93 28       	st.w	r9[0x8],r8
80007a04:	91 39       	st.w	r8[0xc],r9
80007a06:	6e 28       	ld.w	r8,r7[0x8]
80007a08:	6e 39       	ld.w	r9,r7[0xc]
80007a0a:	c0 78       	rjmp	80007a18 <_realloc_r+0x184>
80007a0c:	f8 00 00 03 	add	r3,r12,r0
80007a10:	0c 33       	cp.w	r3,r6
80007a12:	c3 35       	brlt	80007a78 <_realloc_r+0x1e4>
80007a14:	6e 39       	ld.w	r9,r7[0xc]
80007a16:	6e 28       	ld.w	r8,r7[0x8]
80007a18:	93 28       	st.w	r9[0x8],r8
80007a1a:	91 39       	st.w	r8[0xc],r9
80007a1c:	e0 ca 00 04 	sub	r10,r0,4
80007a20:	ee cc ff f8 	sub	r12,r7,-8
80007a24:	e0 4a 00 24 	cp.w	r10,36
80007a28:	e0 8b 00 24 	brhi	80007a70 <_realloc_r+0x1dc>
80007a2c:	59 3a       	cp.w	r10,19
80007a2e:	e0 88 00 1a 	brls	80007a62 <_realloc_r+0x1ce>
80007a32:	09 08       	ld.w	r8,r4++
80007a34:	99 08       	st.w	r12[0x0],r8
80007a36:	09 08       	ld.w	r8,r4++
80007a38:	8f 38       	st.w	r7[0xc],r8
80007a3a:	ee cc ff f0 	sub	r12,r7,-16
80007a3e:	59 ba       	cp.w	r10,27
80007a40:	e0 88 00 11 	brls	80007a62 <_realloc_r+0x1ce>
80007a44:	09 08       	ld.w	r8,r4++
80007a46:	99 08       	st.w	r12[0x0],r8
80007a48:	09 08       	ld.w	r8,r4++
80007a4a:	8f 58       	st.w	r7[0x14],r8
80007a4c:	ee cc ff e8 	sub	r12,r7,-24
80007a50:	e0 4a 00 24 	cp.w	r10,36
80007a54:	c0 71       	brne	80007a62 <_realloc_r+0x1ce>
80007a56:	09 08       	ld.w	r8,r4++
80007a58:	99 08       	st.w	r12[0x0],r8
80007a5a:	ee cc ff e0 	sub	r12,r7,-32
80007a5e:	09 08       	ld.w	r8,r4++
80007a60:	8f 78       	st.w	r7[0x1c],r8
80007a62:	09 08       	ld.w	r8,r4++
80007a64:	18 a8       	st.w	r12++,r8
80007a66:	68 08       	ld.w	r8,r4[0x0]
80007a68:	99 08       	st.w	r12[0x0],r8
80007a6a:	68 18       	ld.w	r8,r4[0x4]
80007a6c:	99 18       	st.w	r12[0x4],r8
80007a6e:	c4 78       	rjmp	80007afc <_realloc_r+0x268>
80007a70:	08 9b       	mov	r11,r4
80007a72:	fe b0 fb fe 	rcall	8000726e <memmove>
80007a76:	c4 38       	rjmp	80007afc <_realloc_r+0x268>
80007a78:	04 9c       	mov	r12,r2
80007a7a:	fe b0 f9 d7 	rcall	80006e28 <_malloc_r>
80007a7e:	18 95       	mov	r5,r12
80007a80:	c3 a0       	breq	80007af4 <_realloc_r+0x260>
80007a82:	62 18       	ld.w	r8,r1[0x4]
80007a84:	f8 c9 00 08 	sub	r9,r12,8
80007a88:	a1 c8       	cbr	r8,0x0
80007a8a:	e2 08 00 08 	add	r8,r1,r8
80007a8e:	10 39       	cp.w	r9,r8
80007a90:	c0 71       	brne	80007a9e <_realloc_r+0x20a>
80007a92:	72 13       	ld.w	r3,r9[0x4]
80007a94:	02 97       	mov	r7,r1
80007a96:	e0 13 ff fc 	andl	r3,0xfffc
80007a9a:	00 03       	add	r3,r0
80007a9c:	c3 08       	rjmp	80007afc <_realloc_r+0x268>
80007a9e:	e0 ca 00 04 	sub	r10,r0,4
80007aa2:	e0 4a 00 24 	cp.w	r10,36
80007aa6:	e0 8b 00 20 	brhi	80007ae6 <_realloc_r+0x252>
80007aaa:	08 99       	mov	r9,r4
80007aac:	18 98       	mov	r8,r12
80007aae:	59 3a       	cp.w	r10,19
80007ab0:	e0 88 00 14 	brls	80007ad8 <_realloc_r+0x244>
80007ab4:	13 0b       	ld.w	r11,r9++
80007ab6:	10 ab       	st.w	r8++,r11
80007ab8:	13 0b       	ld.w	r11,r9++
80007aba:	10 ab       	st.w	r8++,r11
80007abc:	59 ba       	cp.w	r10,27
80007abe:	e0 88 00 0d 	brls	80007ad8 <_realloc_r+0x244>
80007ac2:	13 0b       	ld.w	r11,r9++
80007ac4:	10 ab       	st.w	r8++,r11
80007ac6:	13 0b       	ld.w	r11,r9++
80007ac8:	10 ab       	st.w	r8++,r11
80007aca:	e0 4a 00 24 	cp.w	r10,36
80007ace:	c0 51       	brne	80007ad8 <_realloc_r+0x244>
80007ad0:	13 0a       	ld.w	r10,r9++
80007ad2:	10 aa       	st.w	r8++,r10
80007ad4:	13 0a       	ld.w	r10,r9++
80007ad6:	10 aa       	st.w	r8++,r10
80007ad8:	13 0a       	ld.w	r10,r9++
80007ada:	10 aa       	st.w	r8++,r10
80007adc:	72 0a       	ld.w	r10,r9[0x0]
80007ade:	91 0a       	st.w	r8[0x0],r10
80007ae0:	72 19       	ld.w	r9,r9[0x4]
80007ae2:	91 19       	st.w	r8[0x4],r9
80007ae4:	c0 48       	rjmp	80007aec <_realloc_r+0x258>
80007ae6:	08 9b       	mov	r11,r4
80007ae8:	fe b0 fb c3 	rcall	8000726e <memmove>
80007aec:	08 9b       	mov	r11,r4
80007aee:	04 9c       	mov	r12,r2
80007af0:	fe b0 f6 f6 	rcall	800068dc <_free_r>
80007af4:	04 9c       	mov	r12,r2
80007af6:	c2 a8       	rjmp	80007b4a <_realloc_r+0x2b6>
80007af8:	00 93       	mov	r3,r0
80007afa:	02 97       	mov	r7,r1
80007afc:	e6 06 01 09 	sub	r9,r3,r6
80007b00:	6e 18       	ld.w	r8,r7[0x4]
80007b02:	58 f9       	cp.w	r9,15
80007b04:	e0 88 00 16 	brls	80007b30 <_realloc_r+0x29c>
80007b08:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b0c:	ed e8 10 08 	or	r8,r6,r8
80007b10:	8f 18       	st.w	r7[0x4],r8
80007b12:	12 98       	mov	r8,r9
80007b14:	a1 a8       	sbr	r8,0x0
80007b16:	ee 06 00 0b 	add	r11,r7,r6
80007b1a:	f6 09 00 09 	add	r9,r11,r9
80007b1e:	97 18       	st.w	r11[0x4],r8
80007b20:	72 18       	ld.w	r8,r9[0x4]
80007b22:	a1 a8       	sbr	r8,0x0
80007b24:	2f 8b       	sub	r11,-8
80007b26:	93 18       	st.w	r9[0x4],r8
80007b28:	04 9c       	mov	r12,r2
80007b2a:	fe b0 f6 d9 	rcall	800068dc <_free_r>
80007b2e:	c0 b8       	rjmp	80007b44 <_realloc_r+0x2b0>
80007b30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b34:	e7 e8 10 08 	or	r8,r3,r8
80007b38:	8f 18       	st.w	r7[0x4],r8
80007b3a:	ee 03 00 03 	add	r3,r7,r3
80007b3e:	66 18       	ld.w	r8,r3[0x4]
80007b40:	a1 a8       	sbr	r8,0x0
80007b42:	87 18       	st.w	r3[0x4],r8
80007b44:	04 9c       	mov	r12,r2
80007b46:	ee c5 ff f8 	sub	r5,r7,-8
80007b4a:	fe b0 fb b9 	rcall	800072bc <__malloc_unlock>
80007b4e:	0a 9c       	mov	r12,r5
80007b50:	2f fd       	sub	sp,-4
80007b52:	d8 32       	popm	r0-r7,pc

80007b54 <__isinfd>:
80007b54:	14 98       	mov	r8,r10
80007b56:	fc 19 7f f0 	movh	r9,0x7ff0
80007b5a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b5e:	f0 0b 11 00 	rsub	r11,r8,0
80007b62:	f7 e8 10 08 	or	r8,r11,r8
80007b66:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007b6a:	f2 08 01 08 	sub	r8,r9,r8
80007b6e:	f0 0c 11 00 	rsub	r12,r8,0
80007b72:	f9 e8 10 08 	or	r8,r12,r8
80007b76:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007b7a:	2f fc       	sub	r12,-1
80007b7c:	5e fc       	retal	r12

80007b7e <__isnand>:
80007b7e:	14 98       	mov	r8,r10
80007b80:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007b84:	f0 0c 11 00 	rsub	r12,r8,0
80007b88:	10 4c       	or	r12,r8
80007b8a:	fc 18 7f f0 	movh	r8,0x7ff0
80007b8e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007b92:	f0 0c 01 0c 	sub	r12,r8,r12
80007b96:	bf 9c       	lsr	r12,0x1f
80007b98:	5e fc       	retal	r12
80007b9a:	d7 03       	nop

80007b9c <_sbrk_r>:
80007b9c:	d4 21       	pushm	r4-r7,lr
80007b9e:	30 08       	mov	r8,0
80007ba0:	18 97       	mov	r7,r12
80007ba2:	e0 66 08 60 	mov	r6,2144
80007ba6:	16 9c       	mov	r12,r11
80007ba8:	8d 08       	st.w	r6[0x0],r8
80007baa:	ca fc       	rcall	80007d08 <_sbrk>
80007bac:	5b fc       	cp.w	r12,-1
80007bae:	c0 51       	brne	80007bb8 <_sbrk_r+0x1c>
80007bb0:	6c 08       	ld.w	r8,r6[0x0]
80007bb2:	58 08       	cp.w	r8,0
80007bb4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007bb8:	d8 22       	popm	r4-r7,pc
80007bba:	d7 03       	nop

80007bbc <__sclose>:
80007bbc:	d4 01       	pushm	lr
80007bbe:	96 7b       	ld.sh	r11,r11[0xe]
80007bc0:	cf ec       	rcall	80007dbc <_close_r>
80007bc2:	d8 02       	popm	pc

80007bc4 <__sseek>:
80007bc4:	d4 21       	pushm	r4-r7,lr
80007bc6:	16 97       	mov	r7,r11
80007bc8:	96 7b       	ld.sh	r11,r11[0xe]
80007bca:	c8 5d       	rcall	80007ed4 <_lseek_r>
80007bcc:	8e 68       	ld.sh	r8,r7[0xc]
80007bce:	10 99       	mov	r9,r8
80007bd0:	ad c8       	cbr	r8,0xc
80007bd2:	ad a9       	sbr	r9,0xc
80007bd4:	5b fc       	cp.w	r12,-1
80007bd6:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007bda:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007bde:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007be2:	d8 22       	popm	r4-r7,pc

80007be4 <__swrite>:
80007be4:	d4 21       	pushm	r4-r7,lr
80007be6:	96 68       	ld.sh	r8,r11[0xc]
80007be8:	16 97       	mov	r7,r11
80007bea:	14 95       	mov	r5,r10
80007bec:	12 94       	mov	r4,r9
80007bee:	e2 18 01 00 	andl	r8,0x100,COH
80007bf2:	18 96       	mov	r6,r12
80007bf4:	c0 50       	breq	80007bfe <__swrite+0x1a>
80007bf6:	30 29       	mov	r9,2
80007bf8:	30 0a       	mov	r10,0
80007bfa:	96 7b       	ld.sh	r11,r11[0xe]
80007bfc:	c6 cd       	rcall	80007ed4 <_lseek_r>
80007bfe:	8e 68       	ld.sh	r8,r7[0xc]
80007c00:	ad c8       	cbr	r8,0xc
80007c02:	08 99       	mov	r9,r4
80007c04:	0a 9a       	mov	r10,r5
80007c06:	8e 7b       	ld.sh	r11,r7[0xe]
80007c08:	0c 9c       	mov	r12,r6
80007c0a:	ae 68       	st.h	r7[0xc],r8
80007c0c:	c9 ac       	rcall	80007d40 <_write_r>
80007c0e:	d8 22       	popm	r4-r7,pc

80007c10 <__sread>:
80007c10:	d4 21       	pushm	r4-r7,lr
80007c12:	16 97       	mov	r7,r11
80007c14:	96 7b       	ld.sh	r11,r11[0xe]
80007c16:	c7 1d       	rcall	80007ef8 <_read_r>
80007c18:	c0 65       	brlt	80007c24 <__sread+0x14>
80007c1a:	6f 58       	ld.w	r8,r7[0x54]
80007c1c:	18 08       	add	r8,r12
80007c1e:	ef 48 00 54 	st.w	r7[84],r8
80007c22:	d8 22       	popm	r4-r7,pc
80007c24:	8e 68       	ld.sh	r8,r7[0xc]
80007c26:	ad c8       	cbr	r8,0xc
80007c28:	ae 68       	st.h	r7[0xc],r8
80007c2a:	d8 22       	popm	r4-r7,pc

80007c2c <strlen>:
80007c2c:	30 09       	mov	r9,0
80007c2e:	18 98       	mov	r8,r12
80007c30:	c0 28       	rjmp	80007c34 <strlen+0x8>
80007c32:	2f f8       	sub	r8,-1
80007c34:	11 8a       	ld.ub	r10,r8[0x0]
80007c36:	f2 0a 18 00 	cp.b	r10,r9
80007c3a:	cf c1       	brne	80007c32 <strlen+0x6>
80007c3c:	f0 0c 01 0c 	sub	r12,r8,r12
80007c40:	5e fc       	retal	r12
80007c42:	d7 03       	nop

80007c44 <_close>:
80007c44:	30 28       	mov	r8,2
80007c46:	d6 73       	breakpoint
80007c48:	3f fc       	mov	r12,-1
80007c4a:	35 8b       	mov	r11,88
80007c4c:	58 0c       	cp.w	r12,0
80007c4e:	5e 4c       	retge	r12
80007c50:	e0 6a 08 60 	mov	r10,2144
80007c54:	95 0b       	st.w	r10[0x0],r11
80007c56:	5e fc       	retal	r12

80007c58 <_lseek>:
80007c58:	30 58       	mov	r8,5
80007c5a:	d6 73       	breakpoint
80007c5c:	3f fc       	mov	r12,-1
80007c5e:	35 8b       	mov	r11,88
80007c60:	58 0c       	cp.w	r12,0
80007c62:	5e 4c       	retge	r12
80007c64:	e0 6a 08 60 	mov	r10,2144
80007c68:	95 0b       	st.w	r10[0x0],r11
80007c6a:	5e fc       	retal	r12

80007c6c <_read>:
80007c6c:	30 38       	mov	r8,3
80007c6e:	d6 73       	breakpoint
80007c70:	3f fc       	mov	r12,-1
80007c72:	35 8b       	mov	r11,88
80007c74:	58 0c       	cp.w	r12,0
80007c76:	5e 4c       	retge	r12
80007c78:	e0 6a 08 60 	mov	r10,2144
80007c7c:	95 0b       	st.w	r10[0x0],r11
80007c7e:	5e fc       	retal	r12

80007c80 <_write>:
80007c80:	30 48       	mov	r8,4
80007c82:	d6 73       	breakpoint
80007c84:	3f fc       	mov	r12,-1
80007c86:	35 8b       	mov	r11,88
80007c88:	58 0c       	cp.w	r12,0
80007c8a:	5e 4c       	retge	r12
80007c8c:	e0 6a 08 60 	mov	r10,2144
80007c90:	95 0b       	st.w	r10[0x0],r11
80007c92:	5e fc       	retal	r12

80007c94 <isatty>:
80007c94:	30 b8       	mov	r8,11
80007c96:	d6 73       	breakpoint
80007c98:	3f fc       	mov	r12,-1
80007c9a:	35 8b       	mov	r11,88
80007c9c:	58 0c       	cp.w	r12,0
80007c9e:	5e 4c       	retge	r12
80007ca0:	e0 6a 08 60 	mov	r10,2144
80007ca4:	95 0b       	st.w	r10[0x0],r11
80007ca6:	5e fc       	retal	r12

80007ca8 <_fstat_host>:
80007ca8:	30 98       	mov	r8,9
80007caa:	d6 73       	breakpoint
80007cac:	3f fc       	mov	r12,-1
80007cae:	35 8b       	mov	r11,88
80007cb0:	58 0c       	cp.w	r12,0
80007cb2:	5e 4c       	retge	r12
80007cb4:	e0 6a 08 60 	mov	r10,2144
80007cb8:	95 0b       	st.w	r10[0x0],r11
80007cba:	5e fc       	retal	r12

80007cbc <_fstat>:
80007cbc:	d4 21       	pushm	r4-r7,lr
80007cbe:	21 0d       	sub	sp,64
80007cc0:	16 97       	mov	r7,r11
80007cc2:	1a 9b       	mov	r11,sp
80007cc4:	cf 2f       	rcall	80007ca8 <_fstat_host>
80007cc6:	c0 34       	brge	80007ccc <_fstat+0x10>
80007cc8:	3f fc       	mov	r12,-1
80007cca:	c1 c8       	rjmp	80007d02 <_fstat+0x46>
80007ccc:	40 08       	lddsp	r8,sp[0x0]
80007cce:	ae 08       	st.h	r7[0x0],r8
80007cd0:	40 18       	lddsp	r8,sp[0x4]
80007cd2:	ae 18       	st.h	r7[0x2],r8
80007cd4:	40 28       	lddsp	r8,sp[0x8]
80007cd6:	8f 18       	st.w	r7[0x4],r8
80007cd8:	40 38       	lddsp	r8,sp[0xc]
80007cda:	ae 48       	st.h	r7[0x8],r8
80007cdc:	40 48       	lddsp	r8,sp[0x10]
80007cde:	ae 58       	st.h	r7[0xa],r8
80007ce0:	40 58       	lddsp	r8,sp[0x14]
80007ce2:	ae 68       	st.h	r7[0xc],r8
80007ce4:	40 68       	lddsp	r8,sp[0x18]
80007ce6:	ae 78       	st.h	r7[0xe],r8
80007ce8:	40 88       	lddsp	r8,sp[0x20]
80007cea:	8f 48       	st.w	r7[0x10],r8
80007cec:	40 a8       	lddsp	r8,sp[0x28]
80007cee:	8f b8       	st.w	r7[0x2c],r8
80007cf0:	40 c8       	lddsp	r8,sp[0x30]
80007cf2:	8f c8       	st.w	r7[0x30],r8
80007cf4:	40 d8       	lddsp	r8,sp[0x34]
80007cf6:	8f 58       	st.w	r7[0x14],r8
80007cf8:	40 e8       	lddsp	r8,sp[0x38]
80007cfa:	30 0c       	mov	r12,0
80007cfc:	8f 78       	st.w	r7[0x1c],r8
80007cfe:	40 f8       	lddsp	r8,sp[0x3c]
80007d00:	8f 98       	st.w	r7[0x24],r8
80007d02:	2f 0d       	sub	sp,-64
80007d04:	d8 22       	popm	r4-r7,pc
80007d06:	d7 03       	nop

80007d08 <_sbrk>:
80007d08:	d4 01       	pushm	lr
80007d0a:	e0 68 07 5c 	mov	r8,1884
80007d0e:	70 09       	ld.w	r9,r8[0x0]
80007d10:	58 09       	cp.w	r9,0
80007d12:	c0 41       	brne	80007d1a <_sbrk+0x12>
80007d14:	e0 69 08 68 	mov	r9,2152
80007d18:	91 09       	st.w	r8[0x0],r9
80007d1a:	e0 69 07 5c 	mov	r9,1884
80007d1e:	e0 6a f0 00 	mov	r10,61440
80007d22:	72 08       	ld.w	r8,r9[0x0]
80007d24:	f0 0c 00 0c 	add	r12,r8,r12
80007d28:	14 3c       	cp.w	r12,r10
80007d2a:	e0 8b 00 04 	brhi	80007d32 <_sbrk+0x2a>
80007d2e:	93 0c       	st.w	r9[0x0],r12
80007d30:	c0 58       	rjmp	80007d3a <_sbrk+0x32>
80007d32:	c5 5c       	rcall	80007ddc <__errno>
80007d34:	30 c8       	mov	r8,12
80007d36:	99 08       	st.w	r12[0x0],r8
80007d38:	3f f8       	mov	r8,-1
80007d3a:	10 9c       	mov	r12,r8
80007d3c:	d8 02       	popm	pc
80007d3e:	d7 03       	nop

80007d40 <_write_r>:
80007d40:	d4 21       	pushm	r4-r7,lr
80007d42:	16 98       	mov	r8,r11
80007d44:	18 97       	mov	r7,r12
80007d46:	10 9c       	mov	r12,r8
80007d48:	30 08       	mov	r8,0
80007d4a:	14 9b       	mov	r11,r10
80007d4c:	e0 66 08 60 	mov	r6,2144
80007d50:	12 9a       	mov	r10,r9
80007d52:	8d 08       	st.w	r6[0x0],r8
80007d54:	c9 6f       	rcall	80007c80 <_write>
80007d56:	5b fc       	cp.w	r12,-1
80007d58:	c0 51       	brne	80007d62 <_write_r+0x22>
80007d5a:	6c 08       	ld.w	r8,r6[0x0]
80007d5c:	58 08       	cp.w	r8,0
80007d5e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d62:	d8 22       	popm	r4-r7,pc

80007d64 <_calloc_r>:
80007d64:	d4 21       	pushm	r4-r7,lr
80007d66:	f4 0b 02 4b 	mul	r11,r10,r11
80007d6a:	fe b0 f8 5f 	rcall	80006e28 <_malloc_r>
80007d6e:	18 97       	mov	r7,r12
80007d70:	c2 30       	breq	80007db6 <_calloc_r+0x52>
80007d72:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007d76:	e0 1a ff fc 	andl	r10,0xfffc
80007d7a:	20 4a       	sub	r10,4
80007d7c:	e0 4a 00 24 	cp.w	r10,36
80007d80:	e0 8b 00 18 	brhi	80007db0 <_calloc_r+0x4c>
80007d84:	18 98       	mov	r8,r12
80007d86:	59 3a       	cp.w	r10,19
80007d88:	e0 88 00 0f 	brls	80007da6 <_calloc_r+0x42>
80007d8c:	30 09       	mov	r9,0
80007d8e:	10 a9       	st.w	r8++,r9
80007d90:	10 a9       	st.w	r8++,r9
80007d92:	59 ba       	cp.w	r10,27
80007d94:	e0 88 00 09 	brls	80007da6 <_calloc_r+0x42>
80007d98:	10 a9       	st.w	r8++,r9
80007d9a:	10 a9       	st.w	r8++,r9
80007d9c:	e0 4a 00 24 	cp.w	r10,36
80007da0:	c0 31       	brne	80007da6 <_calloc_r+0x42>
80007da2:	10 a9       	st.w	r8++,r9
80007da4:	10 a9       	st.w	r8++,r9
80007da6:	30 09       	mov	r9,0
80007da8:	10 a9       	st.w	r8++,r9
80007daa:	91 19       	st.w	r8[0x4],r9
80007dac:	91 09       	st.w	r8[0x0],r9
80007dae:	c0 48       	rjmp	80007db6 <_calloc_r+0x52>
80007db0:	30 0b       	mov	r11,0
80007db2:	fe b0 fa 7d 	rcall	800072ac <memset>
80007db6:	0e 9c       	mov	r12,r7
80007db8:	d8 22       	popm	r4-r7,pc
80007dba:	d7 03       	nop

80007dbc <_close_r>:
80007dbc:	d4 21       	pushm	r4-r7,lr
80007dbe:	30 08       	mov	r8,0
80007dc0:	18 97       	mov	r7,r12
80007dc2:	e0 66 08 60 	mov	r6,2144
80007dc6:	16 9c       	mov	r12,r11
80007dc8:	8d 08       	st.w	r6[0x0],r8
80007dca:	c3 df       	rcall	80007c44 <_close>
80007dcc:	5b fc       	cp.w	r12,-1
80007dce:	c0 51       	brne	80007dd8 <_close_r+0x1c>
80007dd0:	6c 08       	ld.w	r8,r6[0x0]
80007dd2:	58 08       	cp.w	r8,0
80007dd4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007dd8:	d8 22       	popm	r4-r7,pc
80007dda:	d7 03       	nop

80007ddc <__errno>:
80007ddc:	e0 68 00 f8 	mov	r8,248
80007de0:	70 0c       	ld.w	r12,r8[0x0]
80007de2:	2f 4c       	sub	r12,-12
80007de4:	5e fc       	retal	r12
80007de6:	d7 03       	nop

80007de8 <_fclose_r>:
80007de8:	d4 21       	pushm	r4-r7,lr
80007dea:	18 96       	mov	r6,r12
80007dec:	16 97       	mov	r7,r11
80007dee:	58 0b       	cp.w	r11,0
80007df0:	c0 31       	brne	80007df6 <_fclose_r+0xe>
80007df2:	16 95       	mov	r5,r11
80007df4:	c5 38       	rjmp	80007e9a <_fclose_r+0xb2>
80007df6:	fe b0 f4 87 	rcall	80006704 <__sfp_lock_acquire>
80007dfa:	58 06       	cp.w	r6,0
80007dfc:	c0 70       	breq	80007e0a <_fclose_r+0x22>
80007dfe:	6c 68       	ld.w	r8,r6[0x18]
80007e00:	58 08       	cp.w	r8,0
80007e02:	c0 41       	brne	80007e0a <_fclose_r+0x22>
80007e04:	0c 9c       	mov	r12,r6
80007e06:	fe b0 f4 d1 	rcall	800067a8 <__sinit>
80007e0a:	fe c8 cf ca 	sub	r8,pc,-12342
80007e0e:	10 37       	cp.w	r7,r8
80007e10:	c0 31       	brne	80007e16 <_fclose_r+0x2e>
80007e12:	6c 07       	ld.w	r7,r6[0x0]
80007e14:	c0 c8       	rjmp	80007e2c <_fclose_r+0x44>
80007e16:	fe c8 cf b6 	sub	r8,pc,-12362
80007e1a:	10 37       	cp.w	r7,r8
80007e1c:	c0 31       	brne	80007e22 <_fclose_r+0x3a>
80007e1e:	6c 17       	ld.w	r7,r6[0x4]
80007e20:	c0 68       	rjmp	80007e2c <_fclose_r+0x44>
80007e22:	fe c8 cf a2 	sub	r8,pc,-12382
80007e26:	10 37       	cp.w	r7,r8
80007e28:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007e2c:	8e 69       	ld.sh	r9,r7[0xc]
80007e2e:	30 08       	mov	r8,0
80007e30:	f0 09 19 00 	cp.h	r9,r8
80007e34:	c0 51       	brne	80007e3e <_fclose_r+0x56>
80007e36:	fe b0 f4 68 	rcall	80006706 <__sfp_lock_release>
80007e3a:	30 05       	mov	r5,0
80007e3c:	c2 f8       	rjmp	80007e9a <_fclose_r+0xb2>
80007e3e:	0e 9b       	mov	r11,r7
80007e40:	0c 9c       	mov	r12,r6
80007e42:	fe b0 f3 db 	rcall	800065f8 <_fflush_r>
80007e46:	6e c8       	ld.w	r8,r7[0x30]
80007e48:	18 95       	mov	r5,r12
80007e4a:	58 08       	cp.w	r8,0
80007e4c:	c0 60       	breq	80007e58 <_fclose_r+0x70>
80007e4e:	6e 8b       	ld.w	r11,r7[0x20]
80007e50:	0c 9c       	mov	r12,r6
80007e52:	5d 18       	icall	r8
80007e54:	f9 b5 05 ff 	movlt	r5,-1
80007e58:	8e 68       	ld.sh	r8,r7[0xc]
80007e5a:	ed b8 00 07 	bld	r8,0x7
80007e5e:	c0 51       	brne	80007e68 <_fclose_r+0x80>
80007e60:	6e 4b       	ld.w	r11,r7[0x10]
80007e62:	0c 9c       	mov	r12,r6
80007e64:	fe b0 f5 3c 	rcall	800068dc <_free_r>
80007e68:	6e db       	ld.w	r11,r7[0x34]
80007e6a:	58 0b       	cp.w	r11,0
80007e6c:	c0 a0       	breq	80007e80 <_fclose_r+0x98>
80007e6e:	ee c8 ff bc 	sub	r8,r7,-68
80007e72:	10 3b       	cp.w	r11,r8
80007e74:	c0 40       	breq	80007e7c <_fclose_r+0x94>
80007e76:	0c 9c       	mov	r12,r6
80007e78:	fe b0 f5 32 	rcall	800068dc <_free_r>
80007e7c:	30 08       	mov	r8,0
80007e7e:	8f d8       	st.w	r7[0x34],r8
80007e80:	6f 2b       	ld.w	r11,r7[0x48]
80007e82:	58 0b       	cp.w	r11,0
80007e84:	c0 70       	breq	80007e92 <_fclose_r+0xaa>
80007e86:	0c 9c       	mov	r12,r6
80007e88:	fe b0 f5 2a 	rcall	800068dc <_free_r>
80007e8c:	30 08       	mov	r8,0
80007e8e:	ef 48 00 48 	st.w	r7[72],r8
80007e92:	30 08       	mov	r8,0
80007e94:	ae 68       	st.h	r7[0xc],r8
80007e96:	fe b0 f4 38 	rcall	80006706 <__sfp_lock_release>
80007e9a:	0a 9c       	mov	r12,r5
80007e9c:	d8 22       	popm	r4-r7,pc
80007e9e:	d7 03       	nop

80007ea0 <fclose>:
80007ea0:	d4 01       	pushm	lr
80007ea2:	e0 68 00 f8 	mov	r8,248
80007ea6:	18 9b       	mov	r11,r12
80007ea8:	70 0c       	ld.w	r12,r8[0x0]
80007eaa:	c9 ff       	rcall	80007de8 <_fclose_r>
80007eac:	d8 02       	popm	pc
80007eae:	d7 03       	nop

80007eb0 <_fstat_r>:
80007eb0:	d4 21       	pushm	r4-r7,lr
80007eb2:	16 98       	mov	r8,r11
80007eb4:	18 97       	mov	r7,r12
80007eb6:	10 9c       	mov	r12,r8
80007eb8:	30 08       	mov	r8,0
80007eba:	e0 66 08 60 	mov	r6,2144
80007ebe:	14 9b       	mov	r11,r10
80007ec0:	8d 08       	st.w	r6[0x0],r8
80007ec2:	cf de       	rcall	80007cbc <_fstat>
80007ec4:	5b fc       	cp.w	r12,-1
80007ec6:	c0 51       	brne	80007ed0 <_fstat_r+0x20>
80007ec8:	6c 08       	ld.w	r8,r6[0x0]
80007eca:	58 08       	cp.w	r8,0
80007ecc:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ed0:	d8 22       	popm	r4-r7,pc
80007ed2:	d7 03       	nop

80007ed4 <_lseek_r>:
80007ed4:	d4 21       	pushm	r4-r7,lr
80007ed6:	16 98       	mov	r8,r11
80007ed8:	18 97       	mov	r7,r12
80007eda:	10 9c       	mov	r12,r8
80007edc:	30 08       	mov	r8,0
80007ede:	14 9b       	mov	r11,r10
80007ee0:	e0 66 08 60 	mov	r6,2144
80007ee4:	12 9a       	mov	r10,r9
80007ee6:	8d 08       	st.w	r6[0x0],r8
80007ee8:	cb 8e       	rcall	80007c58 <_lseek>
80007eea:	5b fc       	cp.w	r12,-1
80007eec:	c0 51       	brne	80007ef6 <_lseek_r+0x22>
80007eee:	6c 08       	ld.w	r8,r6[0x0]
80007ef0:	58 08       	cp.w	r8,0
80007ef2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ef6:	d8 22       	popm	r4-r7,pc

80007ef8 <_read_r>:
80007ef8:	d4 21       	pushm	r4-r7,lr
80007efa:	16 98       	mov	r8,r11
80007efc:	18 97       	mov	r7,r12
80007efe:	10 9c       	mov	r12,r8
80007f00:	30 08       	mov	r8,0
80007f02:	14 9b       	mov	r11,r10
80007f04:	e0 66 08 60 	mov	r6,2144
80007f08:	12 9a       	mov	r10,r9
80007f0a:	8d 08       	st.w	r6[0x0],r8
80007f0c:	cb 0e       	rcall	80007c6c <_read>
80007f0e:	5b fc       	cp.w	r12,-1
80007f10:	c0 51       	brne	80007f1a <_read_r+0x22>
80007f12:	6c 08       	ld.w	r8,r6[0x0]
80007f14:	58 08       	cp.w	r8,0
80007f16:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007f1a:	d8 22       	popm	r4-r7,pc

80007f1c <__avr32_f64_mul>:
80007f1c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007f20:	e0 80 00 dc 	breq	800080d8 <__avr32_f64_mul_op1_zero>
80007f24:	d4 21       	pushm	r4-r7,lr
80007f26:	f7 e9 20 0e 	eor	lr,r11,r9
80007f2a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007f2e:	30 15       	mov	r5,1
80007f30:	c4 30       	breq	80007fb6 <__avr32_f64_mul_op1_subnormal>
80007f32:	ab 6b       	lsl	r11,0xa
80007f34:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007f38:	ab 6a       	lsl	r10,0xa
80007f3a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007f3e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007f42:	c5 c0       	breq	80007ffa <__avr32_f64_mul_op2_subnormal>
80007f44:	a1 78       	lsl	r8,0x1
80007f46:	5c f9       	rol	r9
80007f48:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007f4c:	e0 47 07 ff 	cp.w	r7,2047
80007f50:	c7 70       	breq	8000803e <__avr32_f64_mul_op_nan_or_inf>
80007f52:	e0 46 07 ff 	cp.w	r6,2047
80007f56:	c7 40       	breq	8000803e <__avr32_f64_mul_op_nan_or_inf>
80007f58:	ee 06 00 0c 	add	r12,r7,r6
80007f5c:	e0 2c 03 fe 	sub	r12,1022
80007f60:	f6 08 06 44 	mulu.d	r4,r11,r8
80007f64:	f4 09 07 44 	macu.d	r4,r10,r9
80007f68:	f4 08 06 46 	mulu.d	r6,r10,r8
80007f6c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007f70:	08 07       	add	r7,r4
80007f72:	f4 05 00 4a 	adc	r10,r10,r5
80007f76:	5c 0b       	acr	r11
80007f78:	ed bb 00 14 	bld	r11,0x14
80007f7c:	c0 50       	breq	80007f86 <__avr32_f64_mul+0x6a>
80007f7e:	a1 77       	lsl	r7,0x1
80007f80:	5c fa       	rol	r10
80007f82:	5c fb       	rol	r11
80007f84:	20 1c       	sub	r12,1
80007f86:	58 0c       	cp.w	r12,0
80007f88:	e0 8a 00 6f 	brle	80008066 <__avr32_f64_mul_res_subnormal>
80007f8c:	e0 4c 07 ff 	cp.w	r12,2047
80007f90:	e0 84 00 9c 	brge	800080c8 <__avr32_f64_mul_res_inf>
80007f94:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007f98:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007f9c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007fa0:	ee 17 80 00 	eorh	r7,0x8000
80007fa4:	f1 b7 04 20 	satu	r7,0x1
80007fa8:	0e 0a       	add	r10,r7
80007faa:	5c 0b       	acr	r11
80007fac:	ed be 00 1f 	bld	lr,0x1f
80007fb0:	ef bb 00 1f 	bst	r11,0x1f
80007fb4:	d8 22       	popm	r4-r7,pc

80007fb6 <__avr32_f64_mul_op1_subnormal>:
80007fb6:	e4 1b 00 0f 	andh	r11,0xf
80007fba:	f4 0c 12 00 	clz	r12,r10
80007fbe:	f6 06 12 00 	clz	r6,r11
80007fc2:	f7 bc 03 e1 	sublo	r12,-31
80007fc6:	f8 06 17 30 	movlo	r6,r12
80007fca:	f7 b6 02 01 	subhs	r6,1
80007fce:	e0 46 00 20 	cp.w	r6,32
80007fd2:	c0 d4       	brge	80007fec <__avr32_f64_mul_op1_subnormal+0x36>
80007fd4:	ec 0c 11 20 	rsub	r12,r6,32
80007fd8:	f6 06 09 4b 	lsl	r11,r11,r6
80007fdc:	f4 0c 0a 4c 	lsr	r12,r10,r12
80007fe0:	18 4b       	or	r11,r12
80007fe2:	f4 06 09 4a 	lsl	r10,r10,r6
80007fe6:	20 b6       	sub	r6,11
80007fe8:	0c 17       	sub	r7,r6
80007fea:	ca ab       	rjmp	80007f3e <__avr32_f64_mul+0x22>
80007fec:	f4 06 09 4b 	lsl	r11,r10,r6
80007ff0:	c6 40       	breq	800080b8 <__avr32_f64_mul_res_zero>
80007ff2:	30 0a       	mov	r10,0
80007ff4:	20 b6       	sub	r6,11
80007ff6:	0c 17       	sub	r7,r6
80007ff8:	ca 3b       	rjmp	80007f3e <__avr32_f64_mul+0x22>

80007ffa <__avr32_f64_mul_op2_subnormal>:
80007ffa:	e4 19 00 0f 	andh	r9,0xf
80007ffe:	f0 0c 12 00 	clz	r12,r8
80008002:	f2 05 12 00 	clz	r5,r9
80008006:	f7 bc 03 ea 	sublo	r12,-22
8000800a:	f8 05 17 30 	movlo	r5,r12
8000800e:	f7 b5 02 0a 	subhs	r5,10
80008012:	e0 45 00 20 	cp.w	r5,32
80008016:	c0 d4       	brge	80008030 <__avr32_f64_mul_op2_subnormal+0x36>
80008018:	ea 0c 11 20 	rsub	r12,r5,32
8000801c:	f2 05 09 49 	lsl	r9,r9,r5
80008020:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008024:	18 49       	or	r9,r12
80008026:	f0 05 09 48 	lsl	r8,r8,r5
8000802a:	20 25       	sub	r5,2
8000802c:	0a 16       	sub	r6,r5
8000802e:	c8 fb       	rjmp	80007f4c <__avr32_f64_mul+0x30>
80008030:	f0 05 09 49 	lsl	r9,r8,r5
80008034:	c4 20       	breq	800080b8 <__avr32_f64_mul_res_zero>
80008036:	30 08       	mov	r8,0
80008038:	20 25       	sub	r5,2
8000803a:	0a 16       	sub	r6,r5
8000803c:	c8 8b       	rjmp	80007f4c <__avr32_f64_mul+0x30>

8000803e <__avr32_f64_mul_op_nan_or_inf>:
8000803e:	e4 19 00 0f 	andh	r9,0xf
80008042:	e4 1b 00 0f 	andh	r11,0xf
80008046:	14 4b       	or	r11,r10
80008048:	10 49       	or	r9,r8
8000804a:	e0 47 07 ff 	cp.w	r7,2047
8000804e:	c0 91       	brne	80008060 <__avr32_f64_mul_op1_not_naninf>
80008050:	58 0b       	cp.w	r11,0
80008052:	c3 81       	brne	800080c2 <__avr32_f64_mul_res_nan>
80008054:	e0 46 07 ff 	cp.w	r6,2047
80008058:	c3 81       	brne	800080c8 <__avr32_f64_mul_res_inf>
8000805a:	58 09       	cp.w	r9,0
8000805c:	c3 60       	breq	800080c8 <__avr32_f64_mul_res_inf>
8000805e:	c3 28       	rjmp	800080c2 <__avr32_f64_mul_res_nan>

80008060 <__avr32_f64_mul_op1_not_naninf>:
80008060:	58 09       	cp.w	r9,0
80008062:	c3 30       	breq	800080c8 <__avr32_f64_mul_res_inf>
80008064:	c2 f8       	rjmp	800080c2 <__avr32_f64_mul_res_nan>

80008066 <__avr32_f64_mul_res_subnormal>:
80008066:	5c 3c       	neg	r12
80008068:	2f fc       	sub	r12,-1
8000806a:	f1 bc 04 c0 	satu	r12,0x6
8000806e:	e0 4c 00 20 	cp.w	r12,32
80008072:	c1 14       	brge	80008094 <__avr32_f64_mul_res_subnormal+0x2e>
80008074:	f8 08 11 20 	rsub	r8,r12,32
80008078:	0e 46       	or	r6,r7
8000807a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000807e:	f4 08 09 49 	lsl	r9,r10,r8
80008082:	12 47       	or	r7,r9
80008084:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008088:	f6 08 09 49 	lsl	r9,r11,r8
8000808c:	12 4a       	or	r10,r9
8000808e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008092:	c8 3b       	rjmp	80007f98 <__avr32_f64_mul+0x7c>
80008094:	f8 08 11 20 	rsub	r8,r12,32
80008098:	f9 b9 00 00 	moveq	r9,0
8000809c:	c0 30       	breq	800080a2 <__avr32_f64_mul_res_subnormal+0x3c>
8000809e:	f6 08 09 49 	lsl	r9,r11,r8
800080a2:	0e 46       	or	r6,r7
800080a4:	ed ea 10 16 	or	r6,r6,r10<<0x1
800080a8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800080ac:	f3 ea 10 07 	or	r7,r9,r10
800080b0:	f6 0c 0a 4a 	lsr	r10,r11,r12
800080b4:	30 0b       	mov	r11,0
800080b6:	c7 1b       	rjmp	80007f98 <__avr32_f64_mul+0x7c>

800080b8 <__avr32_f64_mul_res_zero>:
800080b8:	1c 9b       	mov	r11,lr
800080ba:	e6 1b 80 00 	andh	r11,0x8000,COH
800080be:	30 0a       	mov	r10,0
800080c0:	d8 22       	popm	r4-r7,pc

800080c2 <__avr32_f64_mul_res_nan>:
800080c2:	3f fb       	mov	r11,-1
800080c4:	3f fa       	mov	r10,-1
800080c6:	d8 22       	popm	r4-r7,pc

800080c8 <__avr32_f64_mul_res_inf>:
800080c8:	f0 6b 00 00 	mov	r11,-1048576
800080cc:	ed be 00 1f 	bld	lr,0x1f
800080d0:	ef bb 00 1f 	bst	r11,0x1f
800080d4:	30 0a       	mov	r10,0
800080d6:	d8 22       	popm	r4-r7,pc

800080d8 <__avr32_f64_mul_op1_zero>:
800080d8:	f7 e9 20 0b 	eor	r11,r11,r9
800080dc:	e6 1b 80 00 	andh	r11,0x8000,COH
800080e0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800080e4:	e0 4c 07 ff 	cp.w	r12,2047
800080e8:	5e 1c       	retne	r12
800080ea:	3f fa       	mov	r10,-1
800080ec:	3f fb       	mov	r11,-1
800080ee:	5e fc       	retal	r12

800080f0 <__avr32_f64_sub_from_add>:
800080f0:	ee 19 80 00 	eorh	r9,0x8000

800080f4 <__avr32_f64_sub>:
800080f4:	f7 e9 20 0c 	eor	r12,r11,r9
800080f8:	e0 86 00 ca 	brmi	8000828c <__avr32_f64_add_from_sub>
800080fc:	eb cd 40 e0 	pushm	r5-r7,lr
80008100:	16 9c       	mov	r12,r11
80008102:	e6 1c 80 00 	andh	r12,0x8000,COH
80008106:	bf db       	cbr	r11,0x1f
80008108:	bf d9       	cbr	r9,0x1f
8000810a:	10 3a       	cp.w	r10,r8
8000810c:	f2 0b 13 00 	cpc	r11,r9
80008110:	c0 92       	brcc	80008122 <__avr32_f64_sub+0x2e>
80008112:	16 97       	mov	r7,r11
80008114:	12 9b       	mov	r11,r9
80008116:	0e 99       	mov	r9,r7
80008118:	14 97       	mov	r7,r10
8000811a:	10 9a       	mov	r10,r8
8000811c:	0e 98       	mov	r8,r7
8000811e:	ee 1c 80 00 	eorh	r12,0x8000
80008122:	f6 07 16 14 	lsr	r7,r11,0x14
80008126:	ab 7b       	lsl	r11,0xb
80008128:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000812c:	ab 7a       	lsl	r10,0xb
8000812e:	bf bb       	sbr	r11,0x1f
80008130:	f2 06 16 14 	lsr	r6,r9,0x14
80008134:	c4 40       	breq	800081bc <__avr32_f64_sub_opL_subnormal>
80008136:	ab 79       	lsl	r9,0xb
80008138:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000813c:	ab 78       	lsl	r8,0xb
8000813e:	bf b9       	sbr	r9,0x1f

80008140 <__avr32_f64_sub_opL_subnormal_done>:
80008140:	e0 47 07 ff 	cp.w	r7,2047
80008144:	c4 f0       	breq	800081e2 <__avr32_f64_sub_opH_nan_or_inf>
80008146:	0e 26       	rsub	r6,r7
80008148:	c1 20       	breq	8000816c <__avr32_f64_sub_shift_done>
8000814a:	ec 05 11 20 	rsub	r5,r6,32
8000814e:	e0 46 00 20 	cp.w	r6,32
80008152:	c7 c2       	brcc	8000824a <__avr32_f64_sub_longshift>
80008154:	f0 05 09 4e 	lsl	lr,r8,r5
80008158:	f2 05 09 45 	lsl	r5,r9,r5
8000815c:	f0 06 0a 48 	lsr	r8,r8,r6
80008160:	f2 06 0a 49 	lsr	r9,r9,r6
80008164:	0a 48       	or	r8,r5
80008166:	58 0e       	cp.w	lr,0
80008168:	5f 1e       	srne	lr
8000816a:	1c 48       	or	r8,lr

8000816c <__avr32_f64_sub_shift_done>:
8000816c:	10 1a       	sub	r10,r8
8000816e:	f6 09 01 4b 	sbc	r11,r11,r9
80008172:	f6 06 12 00 	clz	r6,r11
80008176:	c0 e0       	breq	80008192 <__avr32_f64_sub_longnormalize_done>
80008178:	c7 83       	brcs	80008268 <__avr32_f64_sub_longnormalize>
8000817a:	ec 0e 11 20 	rsub	lr,r6,32
8000817e:	f6 06 09 4b 	lsl	r11,r11,r6
80008182:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008186:	1c 4b       	or	r11,lr
80008188:	f4 06 09 4a 	lsl	r10,r10,r6
8000818c:	0c 17       	sub	r7,r6
8000818e:	e0 8a 00 39 	brle	80008200 <__avr32_f64_sub_subnormal_result>

80008192 <__avr32_f64_sub_longnormalize_done>:
80008192:	f4 09 15 15 	lsl	r9,r10,0x15
80008196:	ab 9a       	lsr	r10,0xb
80008198:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000819c:	ab 9b       	lsr	r11,0xb
8000819e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800081a2:	18 4b       	or	r11,r12

800081a4 <__avr32_f64_sub_round>:
800081a4:	fc 17 80 00 	movh	r7,0x8000
800081a8:	ed ba 00 00 	bld	r10,0x0
800081ac:	f7 b7 01 ff 	subne	r7,-1
800081b0:	0e 39       	cp.w	r9,r7
800081b2:	5f 29       	srhs	r9
800081b4:	12 0a       	add	r10,r9
800081b6:	5c 0b       	acr	r11
800081b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081bc <__avr32_f64_sub_opL_subnormal>:
800081bc:	ab 79       	lsl	r9,0xb
800081be:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800081c2:	ab 78       	lsl	r8,0xb
800081c4:	f3 e8 10 0e 	or	lr,r9,r8
800081c8:	f9 b6 01 01 	movne	r6,1
800081cc:	ee 0e 11 00 	rsub	lr,r7,0
800081d0:	f9 b7 00 01 	moveq	r7,1
800081d4:	ef bb 00 1f 	bst	r11,0x1f
800081d8:	f7 ea 10 0e 	or	lr,r11,r10
800081dc:	f9 b7 00 00 	moveq	r7,0
800081e0:	cb 0b       	rjmp	80008140 <__avr32_f64_sub_opL_subnormal_done>

800081e2 <__avr32_f64_sub_opH_nan_or_inf>:
800081e2:	bf db       	cbr	r11,0x1f
800081e4:	f7 ea 10 0e 	or	lr,r11,r10
800081e8:	c0 81       	brne	800081f8 <__avr32_f64_sub_return_nan>
800081ea:	e0 46 07 ff 	cp.w	r6,2047
800081ee:	c0 50       	breq	800081f8 <__avr32_f64_sub_return_nan>
800081f0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800081f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081f8 <__avr32_f64_sub_return_nan>:
800081f8:	3f fa       	mov	r10,-1
800081fa:	3f fb       	mov	r11,-1
800081fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008200 <__avr32_f64_sub_subnormal_result>:
80008200:	5c 37       	neg	r7
80008202:	2f f7       	sub	r7,-1
80008204:	f1 b7 04 c0 	satu	r7,0x6
80008208:	e0 47 00 20 	cp.w	r7,32
8000820c:	c1 14       	brge	8000822e <__avr32_f64_sub_subnormal_result+0x2e>
8000820e:	ee 08 11 20 	rsub	r8,r7,32
80008212:	f4 08 09 49 	lsl	r9,r10,r8
80008216:	5f 16       	srne	r6
80008218:	f4 07 0a 4a 	lsr	r10,r10,r7
8000821c:	0c 4a       	or	r10,r6
8000821e:	f6 08 09 49 	lsl	r9,r11,r8
80008222:	f5 e9 10 0a 	or	r10,r10,r9
80008226:	f4 07 0a 4b 	lsr	r11,r10,r7
8000822a:	30 07       	mov	r7,0
8000822c:	cb 3b       	rjmp	80008192 <__avr32_f64_sub_longnormalize_done>
8000822e:	ee 08 11 40 	rsub	r8,r7,64
80008232:	f6 08 09 49 	lsl	r9,r11,r8
80008236:	14 49       	or	r9,r10
80008238:	5f 16       	srne	r6
8000823a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000823e:	0c 4a       	or	r10,r6
80008240:	30 0b       	mov	r11,0
80008242:	30 07       	mov	r7,0
80008244:	ca 7b       	rjmp	80008192 <__avr32_f64_sub_longnormalize_done>
80008246:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000824a <__avr32_f64_sub_longshift>:
8000824a:	f1 b6 04 c0 	satu	r6,0x6
8000824e:	f0 0e 17 00 	moveq	lr,r8
80008252:	c0 40       	breq	8000825a <__avr32_f64_sub_longshift+0x10>
80008254:	f2 05 09 4e 	lsl	lr,r9,r5
80008258:	10 4e       	or	lr,r8
8000825a:	f2 06 0a 48 	lsr	r8,r9,r6
8000825e:	30 09       	mov	r9,0
80008260:	58 0e       	cp.w	lr,0
80008262:	5f 1e       	srne	lr
80008264:	1c 48       	or	r8,lr
80008266:	c8 3b       	rjmp	8000816c <__avr32_f64_sub_shift_done>

80008268 <__avr32_f64_sub_longnormalize>:
80008268:	f4 06 12 00 	clz	r6,r10
8000826c:	f9 b7 03 00 	movlo	r7,0
80008270:	f9 b6 03 00 	movlo	r6,0
80008274:	f9 bc 03 00 	movlo	r12,0
80008278:	f7 b6 02 e0 	subhs	r6,-32
8000827c:	f4 06 09 4b 	lsl	r11,r10,r6
80008280:	30 0a       	mov	r10,0
80008282:	0c 17       	sub	r7,r6
80008284:	fe 9a ff be 	brle	80008200 <__avr32_f64_sub_subnormal_result>
80008288:	c8 5b       	rjmp	80008192 <__avr32_f64_sub_longnormalize_done>
8000828a:	d7 03       	nop

8000828c <__avr32_f64_add_from_sub>:
8000828c:	ee 19 80 00 	eorh	r9,0x8000

80008290 <__avr32_f64_add>:
80008290:	f7 e9 20 0c 	eor	r12,r11,r9
80008294:	fe 96 ff 2e 	brmi	800080f0 <__avr32_f64_sub_from_add>
80008298:	eb cd 40 e0 	pushm	r5-r7,lr
8000829c:	16 9c       	mov	r12,r11
8000829e:	e6 1c 80 00 	andh	r12,0x8000,COH
800082a2:	bf db       	cbr	r11,0x1f
800082a4:	bf d9       	cbr	r9,0x1f
800082a6:	12 3b       	cp.w	r11,r9
800082a8:	c0 72       	brcc	800082b6 <__avr32_f64_add+0x26>
800082aa:	16 97       	mov	r7,r11
800082ac:	12 9b       	mov	r11,r9
800082ae:	0e 99       	mov	r9,r7
800082b0:	14 97       	mov	r7,r10
800082b2:	10 9a       	mov	r10,r8
800082b4:	0e 98       	mov	r8,r7
800082b6:	30 0e       	mov	lr,0
800082b8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800082bc:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800082c0:	b5 ab       	sbr	r11,0x14
800082c2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800082c6:	c6 20       	breq	8000838a <__avr32_f64_add_op2_subnormal>
800082c8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800082cc:	b5 a9       	sbr	r9,0x14
800082ce:	e0 47 07 ff 	cp.w	r7,2047
800082d2:	c2 80       	breq	80008322 <__avr32_f64_add_opH_nan_or_inf>
800082d4:	0e 26       	rsub	r6,r7
800082d6:	c1 20       	breq	800082fa <__avr32_f64_add_shift_done>
800082d8:	e0 46 00 36 	cp.w	r6,54
800082dc:	c1 52       	brcc	80008306 <__avr32_f64_add_res_of_done>
800082de:	ec 05 11 20 	rsub	r5,r6,32
800082e2:	e0 46 00 20 	cp.w	r6,32
800082e6:	c3 52       	brcc	80008350 <__avr32_f64_add_longshift>
800082e8:	f0 05 09 4e 	lsl	lr,r8,r5
800082ec:	f2 05 09 45 	lsl	r5,r9,r5
800082f0:	f0 06 0a 48 	lsr	r8,r8,r6
800082f4:	f2 06 0a 49 	lsr	r9,r9,r6
800082f8:	0a 48       	or	r8,r5

800082fa <__avr32_f64_add_shift_done>:
800082fa:	10 0a       	add	r10,r8
800082fc:	f6 09 00 4b 	adc	r11,r11,r9
80008300:	ed bb 00 15 	bld	r11,0x15
80008304:	c3 40       	breq	8000836c <__avr32_f64_add_res_of>

80008306 <__avr32_f64_add_res_of_done>:
80008306:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000830a:	18 4b       	or	r11,r12

8000830c <__avr32_f64_add_round>:
8000830c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008310:	18 4e       	or	lr,r12
80008312:	ee 1e 80 00 	eorh	lr,0x8000
80008316:	f1 be 04 20 	satu	lr,0x1
8000831a:	1c 0a       	add	r10,lr
8000831c:	5c 0b       	acr	r11
8000831e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008322 <__avr32_f64_add_opH_nan_or_inf>:
80008322:	b5 cb       	cbr	r11,0x14
80008324:	f7 ea 10 0e 	or	lr,r11,r10
80008328:	c1 01       	brne	80008348 <__avr32_f64_add_return_nan>
8000832a:	e0 46 07 ff 	cp.w	r6,2047
8000832e:	c0 30       	breq	80008334 <__avr32_f64_add_opL_nan_or_inf>
80008330:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008334 <__avr32_f64_add_opL_nan_or_inf>:
80008334:	b5 c9       	cbr	r9,0x14
80008336:	f3 e8 10 0e 	or	lr,r9,r8
8000833a:	c0 71       	brne	80008348 <__avr32_f64_add_return_nan>
8000833c:	30 0a       	mov	r10,0
8000833e:	fc 1b 7f f0 	movh	r11,0x7ff0
80008342:	18 4b       	or	r11,r12
80008344:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008348 <__avr32_f64_add_return_nan>:
80008348:	3f fa       	mov	r10,-1
8000834a:	3f fb       	mov	r11,-1
8000834c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008350 <__avr32_f64_add_longshift>:
80008350:	f1 b6 04 c0 	satu	r6,0x6
80008354:	f0 0e 17 00 	moveq	lr,r8
80008358:	c0 60       	breq	80008364 <__avr32_f64_add_longshift+0x14>
8000835a:	f2 05 09 4e 	lsl	lr,r9,r5
8000835e:	58 08       	cp.w	r8,0
80008360:	5f 18       	srne	r8
80008362:	10 4e       	or	lr,r8
80008364:	f2 06 0a 48 	lsr	r8,r9,r6
80008368:	30 09       	mov	r9,0
8000836a:	cc 8b       	rjmp	800082fa <__avr32_f64_add_shift_done>

8000836c <__avr32_f64_add_res_of>:
8000836c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008370:	a1 9b       	lsr	r11,0x1
80008372:	5d 0a       	ror	r10
80008374:	5d 0e       	ror	lr
80008376:	2f f7       	sub	r7,-1
80008378:	e0 47 07 ff 	cp.w	r7,2047
8000837c:	f9 ba 00 00 	moveq	r10,0
80008380:	f9 bb 00 00 	moveq	r11,0
80008384:	f9 be 00 00 	moveq	lr,0
80008388:	cb fb       	rjmp	80008306 <__avr32_f64_add_res_of_done>

8000838a <__avr32_f64_add_op2_subnormal>:
8000838a:	30 16       	mov	r6,1
8000838c:	58 07       	cp.w	r7,0
8000838e:	ca 01       	brne	800082ce <__avr32_f64_add+0x3e>
80008390:	b5 cb       	cbr	r11,0x14
80008392:	10 0a       	add	r10,r8
80008394:	f6 09 00 4b 	adc	r11,r11,r9
80008398:	18 4b       	or	r11,r12
8000839a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000839e:	d7 03       	nop

800083a0 <__avr32_f64_to_u32>:
800083a0:	58 0b       	cp.w	r11,0
800083a2:	5e 6d       	retmi	0

800083a4 <__avr32_f64_to_s32>:
800083a4:	f6 0c 15 01 	lsl	r12,r11,0x1
800083a8:	b5 9c       	lsr	r12,0x15
800083aa:	e0 2c 03 ff 	sub	r12,1023
800083ae:	5e 3d       	retlo	0
800083b0:	f8 0c 11 1f 	rsub	r12,r12,31
800083b4:	16 99       	mov	r9,r11
800083b6:	ab 7b       	lsl	r11,0xb
800083b8:	bf bb       	sbr	r11,0x1f
800083ba:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800083be:	f6 0c 0a 4b 	lsr	r11,r11,r12
800083c2:	a1 79       	lsl	r9,0x1
800083c4:	5e 2b       	reths	r11
800083c6:	5c 3b       	neg	r11
800083c8:	5e fb       	retal	r11

800083ca <__avr32_u32_to_f64>:
800083ca:	f8 cb 00 00 	sub	r11,r12,0
800083ce:	30 0c       	mov	r12,0
800083d0:	c0 38       	rjmp	800083d6 <__avr32_s32_to_f64+0x4>

800083d2 <__avr32_s32_to_f64>:
800083d2:	18 9b       	mov	r11,r12
800083d4:	5c 4b       	abs	r11
800083d6:	30 0a       	mov	r10,0
800083d8:	5e 0b       	reteq	r11
800083da:	d4 01       	pushm	lr
800083dc:	e0 69 04 1e 	mov	r9,1054
800083e0:	f6 08 12 00 	clz	r8,r11
800083e4:	c1 70       	breq	80008412 <__avr32_s32_to_f64+0x40>
800083e6:	c0 c3       	brcs	800083fe <__avr32_s32_to_f64+0x2c>
800083e8:	f0 0e 11 20 	rsub	lr,r8,32
800083ec:	f6 08 09 4b 	lsl	r11,r11,r8
800083f0:	f4 0e 0a 4e 	lsr	lr,r10,lr
800083f4:	1c 4b       	or	r11,lr
800083f6:	f4 08 09 4a 	lsl	r10,r10,r8
800083fa:	10 19       	sub	r9,r8
800083fc:	c0 b8       	rjmp	80008412 <__avr32_s32_to_f64+0x40>
800083fe:	f4 08 12 00 	clz	r8,r10
80008402:	f9 b8 03 00 	movlo	r8,0
80008406:	f7 b8 02 e0 	subhs	r8,-32
8000840a:	f4 08 09 4b 	lsl	r11,r10,r8
8000840e:	30 0a       	mov	r10,0
80008410:	10 19       	sub	r9,r8
80008412:	58 09       	cp.w	r9,0
80008414:	e0 89 00 30 	brgt	80008474 <__avr32_s32_to_f64+0xa2>
80008418:	5c 39       	neg	r9
8000841a:	2f f9       	sub	r9,-1
8000841c:	e0 49 00 36 	cp.w	r9,54
80008420:	c0 43       	brcs	80008428 <__avr32_s32_to_f64+0x56>
80008422:	30 0b       	mov	r11,0
80008424:	30 0a       	mov	r10,0
80008426:	c2 68       	rjmp	80008472 <__avr32_s32_to_f64+0xa0>
80008428:	2f 69       	sub	r9,-10
8000842a:	f2 08 11 20 	rsub	r8,r9,32
8000842e:	e0 49 00 20 	cp.w	r9,32
80008432:	c0 b2       	brcc	80008448 <__avr32_s32_to_f64+0x76>
80008434:	f4 08 09 4e 	lsl	lr,r10,r8
80008438:	f6 08 09 48 	lsl	r8,r11,r8
8000843c:	f4 09 0a 4a 	lsr	r10,r10,r9
80008440:	f6 09 0a 4b 	lsr	r11,r11,r9
80008444:	10 4b       	or	r11,r8
80008446:	c0 88       	rjmp	80008456 <__avr32_s32_to_f64+0x84>
80008448:	f6 08 09 4e 	lsl	lr,r11,r8
8000844c:	14 4e       	or	lr,r10
8000844e:	16 9a       	mov	r10,r11
80008450:	30 0b       	mov	r11,0
80008452:	f4 09 0a 4a 	lsr	r10,r10,r9
80008456:	ed ba 00 00 	bld	r10,0x0
8000845a:	c0 92       	brcc	8000846c <__avr32_s32_to_f64+0x9a>
8000845c:	1c 7e       	tst	lr,lr
8000845e:	c0 41       	brne	80008466 <__avr32_s32_to_f64+0x94>
80008460:	ed ba 00 01 	bld	r10,0x1
80008464:	c0 42       	brcc	8000846c <__avr32_s32_to_f64+0x9a>
80008466:	2f fa       	sub	r10,-1
80008468:	f7 bb 02 ff 	subhs	r11,-1
8000846c:	5c fc       	rol	r12
8000846e:	5d 0b       	ror	r11
80008470:	5d 0a       	ror	r10
80008472:	d8 02       	popm	pc
80008474:	e0 68 03 ff 	mov	r8,1023
80008478:	ed ba 00 0b 	bld	r10,0xb
8000847c:	f7 b8 00 ff 	subeq	r8,-1
80008480:	10 0a       	add	r10,r8
80008482:	5c 0b       	acr	r11
80008484:	f7 b9 03 fe 	sublo	r9,-2
80008488:	e0 49 07 ff 	cp.w	r9,2047
8000848c:	c0 55       	brlt	80008496 <__avr32_s32_to_f64+0xc4>
8000848e:	30 0a       	mov	r10,0
80008490:	fc 1b ff e0 	movh	r11,0xffe0
80008494:	c0 c8       	rjmp	800084ac <__floatsidf_return_op1>
80008496:	ed bb 00 1f 	bld	r11,0x1f
8000849a:	f7 b9 01 01 	subne	r9,1
8000849e:	ab 9a       	lsr	r10,0xb
800084a0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800084a4:	a1 7b       	lsl	r11,0x1
800084a6:	ab 9b       	lsr	r11,0xb
800084a8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800084ac <__floatsidf_return_op1>:
800084ac:	a1 7c       	lsl	r12,0x1
800084ae:	5d 0b       	ror	r11
800084b0:	d8 02       	popm	pc

800084b2 <__avr32_f64_cmp_eq>:
800084b2:	10 3a       	cp.w	r10,r8
800084b4:	f2 0b 13 00 	cpc	r11,r9
800084b8:	c0 80       	breq	800084c8 <__avr32_f64_cmp_eq+0x16>
800084ba:	a1 7b       	lsl	r11,0x1
800084bc:	a1 79       	lsl	r9,0x1
800084be:	14 4b       	or	r11,r10
800084c0:	12 4b       	or	r11,r9
800084c2:	10 4b       	or	r11,r8
800084c4:	5e 0f       	reteq	1
800084c6:	5e fd       	retal	0
800084c8:	a1 7b       	lsl	r11,0x1
800084ca:	fc 1c ff e0 	movh	r12,0xffe0
800084ce:	58 0a       	cp.w	r10,0
800084d0:	f8 0b 13 00 	cpc	r11,r12
800084d4:	5e 8f       	retls	1
800084d6:	5e fd       	retal	0

800084d8 <__avr32_f64_cmp_ge>:
800084d8:	1a de       	st.w	--sp,lr
800084da:	1a d7       	st.w	--sp,r7
800084dc:	a1 7b       	lsl	r11,0x1
800084de:	5f 3c       	srlo	r12
800084e0:	a1 79       	lsl	r9,0x1
800084e2:	5f 37       	srlo	r7
800084e4:	5c fc       	rol	r12
800084e6:	fc 1e ff e0 	movh	lr,0xffe0
800084ea:	58 0a       	cp.w	r10,0
800084ec:	fc 0b 13 00 	cpc	r11,lr
800084f0:	e0 8b 00 1d 	brhi	8000852a <__avr32_f64_cmp_ge+0x52>
800084f4:	58 08       	cp.w	r8,0
800084f6:	fc 09 13 00 	cpc	r9,lr
800084fa:	e0 8b 00 18 	brhi	8000852a <__avr32_f64_cmp_ge+0x52>
800084fe:	58 0b       	cp.w	r11,0
80008500:	f5 ba 00 00 	subfeq	r10,0
80008504:	c1 50       	breq	8000852e <__avr32_f64_cmp_ge+0x56>
80008506:	1b 07       	ld.w	r7,sp++
80008508:	1b 0e       	ld.w	lr,sp++
8000850a:	58 3c       	cp.w	r12,3
8000850c:	c0 a0       	breq	80008520 <__avr32_f64_cmp_ge+0x48>
8000850e:	58 1c       	cp.w	r12,1
80008510:	c0 33       	brcs	80008516 <__avr32_f64_cmp_ge+0x3e>
80008512:	5e 0f       	reteq	1
80008514:	5e 1d       	retne	0
80008516:	10 3a       	cp.w	r10,r8
80008518:	f2 0b 13 00 	cpc	r11,r9
8000851c:	5e 2f       	reths	1
8000851e:	5e 3d       	retlo	0
80008520:	14 38       	cp.w	r8,r10
80008522:	f6 09 13 00 	cpc	r9,r11
80008526:	5e 2f       	reths	1
80008528:	5e 3d       	retlo	0
8000852a:	1b 07       	ld.w	r7,sp++
8000852c:	d8 0a       	popm	pc,r12=0
8000852e:	58 17       	cp.w	r7,1
80008530:	5f 0c       	sreq	r12
80008532:	58 09       	cp.w	r9,0
80008534:	f5 b8 00 00 	subfeq	r8,0
80008538:	1b 07       	ld.w	r7,sp++
8000853a:	1b 0e       	ld.w	lr,sp++
8000853c:	5e 0f       	reteq	1
8000853e:	5e fc       	retal	r12

80008540 <__avr32_f64_cmp_lt>:
80008540:	1a de       	st.w	--sp,lr
80008542:	1a d7       	st.w	--sp,r7
80008544:	a1 7b       	lsl	r11,0x1
80008546:	5f 3c       	srlo	r12
80008548:	a1 79       	lsl	r9,0x1
8000854a:	5f 37       	srlo	r7
8000854c:	5c fc       	rol	r12
8000854e:	fc 1e ff e0 	movh	lr,0xffe0
80008552:	58 0a       	cp.w	r10,0
80008554:	fc 0b 13 00 	cpc	r11,lr
80008558:	e0 8b 00 1d 	brhi	80008592 <__avr32_f64_cmp_lt+0x52>
8000855c:	58 08       	cp.w	r8,0
8000855e:	fc 09 13 00 	cpc	r9,lr
80008562:	e0 8b 00 18 	brhi	80008592 <__avr32_f64_cmp_lt+0x52>
80008566:	58 0b       	cp.w	r11,0
80008568:	f5 ba 00 00 	subfeq	r10,0
8000856c:	c1 50       	breq	80008596 <__avr32_f64_cmp_lt+0x56>
8000856e:	1b 07       	ld.w	r7,sp++
80008570:	1b 0e       	ld.w	lr,sp++
80008572:	58 3c       	cp.w	r12,3
80008574:	c0 a0       	breq	80008588 <__avr32_f64_cmp_lt+0x48>
80008576:	58 1c       	cp.w	r12,1
80008578:	c0 33       	brcs	8000857e <__avr32_f64_cmp_lt+0x3e>
8000857a:	5e 0d       	reteq	0
8000857c:	5e 1f       	retne	1
8000857e:	10 3a       	cp.w	r10,r8
80008580:	f2 0b 13 00 	cpc	r11,r9
80008584:	5e 2d       	reths	0
80008586:	5e 3f       	retlo	1
80008588:	14 38       	cp.w	r8,r10
8000858a:	f6 09 13 00 	cpc	r9,r11
8000858e:	5e 2d       	reths	0
80008590:	5e 3f       	retlo	1
80008592:	1b 07       	ld.w	r7,sp++
80008594:	d8 0a       	popm	pc,r12=0
80008596:	58 17       	cp.w	r7,1
80008598:	5f 1c       	srne	r12
8000859a:	58 09       	cp.w	r9,0
8000859c:	f5 b8 00 00 	subfeq	r8,0
800085a0:	1b 07       	ld.w	r7,sp++
800085a2:	1b 0e       	ld.w	lr,sp++
800085a4:	5e 0d       	reteq	0
800085a6:	5e fc       	retal	r12

800085a8 <__avr32_f64_div>:
800085a8:	eb cd 40 ff 	pushm	r0-r7,lr
800085ac:	f7 e9 20 0e 	eor	lr,r11,r9
800085b0:	f6 07 16 14 	lsr	r7,r11,0x14
800085b4:	a9 7b       	lsl	r11,0x9
800085b6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800085ba:	a9 7a       	lsl	r10,0x9
800085bc:	bd bb       	sbr	r11,0x1d
800085be:	e4 1b 3f ff 	andh	r11,0x3fff
800085c2:	ab d7       	cbr	r7,0xb
800085c4:	e0 80 00 cc 	breq	8000875c <__avr32_f64_div_round_subnormal+0x54>
800085c8:	e0 47 07 ff 	cp.w	r7,2047
800085cc:	e0 84 00 b5 	brge	80008736 <__avr32_f64_div_round_subnormal+0x2e>
800085d0:	f2 06 16 14 	lsr	r6,r9,0x14
800085d4:	a9 79       	lsl	r9,0x9
800085d6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800085da:	a9 78       	lsl	r8,0x9
800085dc:	bd b9       	sbr	r9,0x1d
800085de:	e4 19 3f ff 	andh	r9,0x3fff
800085e2:	ab d6       	cbr	r6,0xb
800085e4:	e0 80 00 e2 	breq	800087a8 <__avr32_f64_div_round_subnormal+0xa0>
800085e8:	e0 46 07 ff 	cp.w	r6,2047
800085ec:	e0 84 00 b2 	brge	80008750 <__avr32_f64_div_round_subnormal+0x48>
800085f0:	0c 17       	sub	r7,r6
800085f2:	fe 37 fc 01 	sub	r7,-1023
800085f6:	fc 1c 80 00 	movh	r12,0x8000
800085fa:	f8 03 16 01 	lsr	r3,r12,0x1
800085fe:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008602:	5c d4       	com	r4
80008604:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008608:	e6 09 06 44 	mulu.d	r4,r3,r9
8000860c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008610:	e6 05 06 44 	mulu.d	r4,r3,r5
80008614:	ea 03 15 02 	lsl	r3,r5,0x2
80008618:	e6 09 06 44 	mulu.d	r4,r3,r9
8000861c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008620:	e6 05 06 44 	mulu.d	r4,r3,r5
80008624:	ea 03 15 02 	lsl	r3,r5,0x2
80008628:	e6 09 06 44 	mulu.d	r4,r3,r9
8000862c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008630:	e6 05 06 44 	mulu.d	r4,r3,r5
80008634:	ea 03 15 02 	lsl	r3,r5,0x2
80008638:	e6 08 06 40 	mulu.d	r0,r3,r8
8000863c:	e4 09 07 40 	macu.d	r0,r2,r9
80008640:	e6 09 06 44 	mulu.d	r4,r3,r9
80008644:	02 04       	add	r4,r1
80008646:	5c 05       	acr	r5
80008648:	a3 65       	lsl	r5,0x2
8000864a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000864e:	a3 64       	lsl	r4,0x2
80008650:	5c 34       	neg	r4
80008652:	f8 05 01 45 	sbc	r5,r12,r5
80008656:	e6 04 06 40 	mulu.d	r0,r3,r4
8000865a:	e4 05 07 40 	macu.d	r0,r2,r5
8000865e:	e6 05 06 44 	mulu.d	r4,r3,r5
80008662:	02 04       	add	r4,r1
80008664:	5c 05       	acr	r5
80008666:	ea 03 15 02 	lsl	r3,r5,0x2
8000866a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000866e:	e8 02 15 02 	lsl	r2,r4,0x2
80008672:	e6 08 06 40 	mulu.d	r0,r3,r8
80008676:	e4 09 07 40 	macu.d	r0,r2,r9
8000867a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000867e:	02 04       	add	r4,r1
80008680:	5c 05       	acr	r5
80008682:	a3 65       	lsl	r5,0x2
80008684:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008688:	a3 64       	lsl	r4,0x2
8000868a:	5c 34       	neg	r4
8000868c:	f8 05 01 45 	sbc	r5,r12,r5
80008690:	e6 04 06 40 	mulu.d	r0,r3,r4
80008694:	e4 05 07 40 	macu.d	r0,r2,r5
80008698:	e6 05 06 44 	mulu.d	r4,r3,r5
8000869c:	02 04       	add	r4,r1
8000869e:	5c 05       	acr	r5
800086a0:	ea 03 15 02 	lsl	r3,r5,0x2
800086a4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800086a8:	e8 02 15 02 	lsl	r2,r4,0x2
800086ac:	e6 0a 06 40 	mulu.d	r0,r3,r10
800086b0:	e4 0b 07 40 	macu.d	r0,r2,r11
800086b4:	e6 0b 06 42 	mulu.d	r2,r3,r11
800086b8:	02 02       	add	r2,r1
800086ba:	5c 03       	acr	r3
800086bc:	ed b3 00 1c 	bld	r3,0x1c
800086c0:	c0 90       	breq	800086d2 <__avr32_f64_div+0x12a>
800086c2:	a1 72       	lsl	r2,0x1
800086c4:	5c f3       	rol	r3
800086c6:	20 17       	sub	r7,1
800086c8:	a3 9a       	lsr	r10,0x3
800086ca:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800086ce:	a3 9b       	lsr	r11,0x3
800086d0:	c0 58       	rjmp	800086da <__avr32_f64_div+0x132>
800086d2:	a5 8a       	lsr	r10,0x4
800086d4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800086d8:	a5 8b       	lsr	r11,0x4
800086da:	58 07       	cp.w	r7,0
800086dc:	e0 8a 00 8b 	brle	800087f2 <__avr32_f64_div_res_subnormal>
800086e0:	e0 12 ff 00 	andl	r2,0xff00
800086e4:	e8 12 00 80 	orl	r2,0x80
800086e8:	e6 08 06 40 	mulu.d	r0,r3,r8
800086ec:	e4 09 07 40 	macu.d	r0,r2,r9
800086f0:	e4 08 06 44 	mulu.d	r4,r2,r8
800086f4:	e6 09 06 48 	mulu.d	r8,r3,r9
800086f8:	00 05       	add	r5,r0
800086fa:	f0 01 00 48 	adc	r8,r8,r1
800086fe:	5c 09       	acr	r9
80008700:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008704:	58 04       	cp.w	r4,0
80008706:	5c 25       	cpc	r5

80008708 <__avr32_f64_div_round_subnormal>:
80008708:	f4 08 13 00 	cpc	r8,r10
8000870c:	f6 09 13 00 	cpc	r9,r11
80008710:	5f 36       	srlo	r6
80008712:	f8 06 17 00 	moveq	r6,r12
80008716:	e4 0a 16 08 	lsr	r10,r2,0x8
8000871a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000871e:	e6 0b 16 08 	lsr	r11,r3,0x8
80008722:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008726:	ed be 00 1f 	bld	lr,0x1f
8000872a:	ef bb 00 1f 	bst	r11,0x1f
8000872e:	0c 0a       	add	r10,r6
80008730:	5c 0b       	acr	r11
80008732:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008736:	e4 1b 00 0f 	andh	r11,0xf
8000873a:	14 4b       	or	r11,r10
8000873c:	e0 81 00 a7 	brne	8000888a <__avr32_f64_div_res_subnormal+0x98>
80008740:	f2 06 16 14 	lsr	r6,r9,0x14
80008744:	ab d6       	cbr	r6,0xb
80008746:	e0 46 07 ff 	cp.w	r6,2047
8000874a:	e0 81 00 a4 	brne	80008892 <__avr32_f64_div_res_subnormal+0xa0>
8000874e:	c9 e8       	rjmp	8000888a <__avr32_f64_div_res_subnormal+0x98>
80008750:	e4 19 00 0f 	andh	r9,0xf
80008754:	10 49       	or	r9,r8
80008756:	e0 81 00 9a 	brne	8000888a <__avr32_f64_div_res_subnormal+0x98>
8000875a:	c9 28       	rjmp	8000887e <__avr32_f64_div_res_subnormal+0x8c>
8000875c:	a3 7b       	lsl	r11,0x3
8000875e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008762:	a3 7a       	lsl	r10,0x3
80008764:	f5 eb 10 04 	or	r4,r10,r11
80008768:	e0 80 00 a0 	breq	800088a8 <__avr32_f64_div_op1_zero>
8000876c:	f6 04 12 00 	clz	r4,r11
80008770:	c1 70       	breq	8000879e <__avr32_f64_div_round_subnormal+0x96>
80008772:	c0 c3       	brcs	8000878a <__avr32_f64_div_round_subnormal+0x82>
80008774:	e8 05 11 20 	rsub	r5,r4,32
80008778:	f6 04 09 4b 	lsl	r11,r11,r4
8000877c:	f4 05 0a 45 	lsr	r5,r10,r5
80008780:	0a 4b       	or	r11,r5
80008782:	f4 04 09 4a 	lsl	r10,r10,r4
80008786:	08 17       	sub	r7,r4
80008788:	c0 b8       	rjmp	8000879e <__avr32_f64_div_round_subnormal+0x96>
8000878a:	f4 04 12 00 	clz	r4,r10
8000878e:	f9 b4 03 00 	movlo	r4,0
80008792:	f7 b4 02 e0 	subhs	r4,-32
80008796:	f4 04 09 4b 	lsl	r11,r10,r4
8000879a:	30 0a       	mov	r10,0
8000879c:	08 17       	sub	r7,r4
8000879e:	a3 8a       	lsr	r10,0x2
800087a0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800087a4:	a3 8b       	lsr	r11,0x2
800087a6:	c1 1b       	rjmp	800085c8 <__avr32_f64_div+0x20>
800087a8:	a3 79       	lsl	r9,0x3
800087aa:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800087ae:	a3 78       	lsl	r8,0x3
800087b0:	f3 e8 10 04 	or	r4,r9,r8
800087b4:	c6 f0       	breq	80008892 <__avr32_f64_div_res_subnormal+0xa0>
800087b6:	f2 04 12 00 	clz	r4,r9
800087ba:	c1 70       	breq	800087e8 <__avr32_f64_div_round_subnormal+0xe0>
800087bc:	c0 c3       	brcs	800087d4 <__avr32_f64_div_round_subnormal+0xcc>
800087be:	e8 05 11 20 	rsub	r5,r4,32
800087c2:	f2 04 09 49 	lsl	r9,r9,r4
800087c6:	f0 05 0a 45 	lsr	r5,r8,r5
800087ca:	0a 49       	or	r9,r5
800087cc:	f0 04 09 48 	lsl	r8,r8,r4
800087d0:	08 16       	sub	r6,r4
800087d2:	c0 b8       	rjmp	800087e8 <__avr32_f64_div_round_subnormal+0xe0>
800087d4:	f0 04 12 00 	clz	r4,r8
800087d8:	f9 b4 03 00 	movlo	r4,0
800087dc:	f7 b4 02 e0 	subhs	r4,-32
800087e0:	f0 04 09 49 	lsl	r9,r8,r4
800087e4:	30 08       	mov	r8,0
800087e6:	08 16       	sub	r6,r4
800087e8:	a3 88       	lsr	r8,0x2
800087ea:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800087ee:	a3 89       	lsr	r9,0x2
800087f0:	cf ca       	rjmp	800085e8 <__avr32_f64_div+0x40>

800087f2 <__avr32_f64_div_res_subnormal>:
800087f2:	5c 37       	neg	r7
800087f4:	2f f7       	sub	r7,-1
800087f6:	f1 b7 04 c0 	satu	r7,0x6
800087fa:	e0 47 00 20 	cp.w	r7,32
800087fe:	c1 54       	brge	80008828 <__avr32_f64_div_res_subnormal+0x36>
80008800:	ee 06 11 20 	rsub	r6,r7,32
80008804:	e4 07 0a 42 	lsr	r2,r2,r7
80008808:	e6 06 09 4c 	lsl	r12,r3,r6
8000880c:	18 42       	or	r2,r12
8000880e:	e6 07 0a 43 	lsr	r3,r3,r7
80008812:	f4 06 09 41 	lsl	r1,r10,r6
80008816:	f4 07 0a 4a 	lsr	r10,r10,r7
8000881a:	f6 06 09 4c 	lsl	r12,r11,r6
8000881e:	18 4a       	or	r10,r12
80008820:	f6 07 0a 4b 	lsr	r11,r11,r7
80008824:	30 00       	mov	r0,0
80008826:	c1 58       	rjmp	80008850 <__avr32_f64_div_res_subnormal+0x5e>
80008828:	ee 06 11 20 	rsub	r6,r7,32
8000882c:	f9 b0 00 00 	moveq	r0,0
80008830:	f9 bc 00 00 	moveq	r12,0
80008834:	c0 50       	breq	8000883e <__avr32_f64_div_res_subnormal+0x4c>
80008836:	f4 06 09 40 	lsl	r0,r10,r6
8000883a:	f6 06 09 4c 	lsl	r12,r11,r6
8000883e:	e6 07 0a 42 	lsr	r2,r3,r7
80008842:	30 03       	mov	r3,0
80008844:	f4 07 0a 41 	lsr	r1,r10,r7
80008848:	18 41       	or	r1,r12
8000884a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000884e:	30 0b       	mov	r11,0
80008850:	e0 12 ff 00 	andl	r2,0xff00
80008854:	e8 12 00 80 	orl	r2,0x80
80008858:	e6 08 06 46 	mulu.d	r6,r3,r8
8000885c:	e4 09 07 46 	macu.d	r6,r2,r9
80008860:	e4 08 06 44 	mulu.d	r4,r2,r8
80008864:	e6 09 06 48 	mulu.d	r8,r3,r9
80008868:	0c 05       	add	r5,r6
8000886a:	f0 07 00 48 	adc	r8,r8,r7
8000886e:	5c 09       	acr	r9
80008870:	30 07       	mov	r7,0
80008872:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008876:	00 34       	cp.w	r4,r0
80008878:	e2 05 13 00 	cpc	r5,r1
8000887c:	c4 6b       	rjmp	80008708 <__avr32_f64_div_round_subnormal>
8000887e:	1c 9b       	mov	r11,lr
80008880:	e6 1b 80 00 	andh	r11,0x8000,COH
80008884:	30 0a       	mov	r10,0
80008886:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000888a:	3f fb       	mov	r11,-1
8000888c:	30 0a       	mov	r10,0
8000888e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008892:	f5 eb 10 04 	or	r4,r10,r11
80008896:	c0 90       	breq	800088a8 <__avr32_f64_div_op1_zero>
80008898:	1c 9b       	mov	r11,lr
8000889a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000889e:	ea 1b 7f f0 	orh	r11,0x7ff0
800088a2:	30 0a       	mov	r10,0
800088a4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800088a8 <__avr32_f64_div_op1_zero>:
800088a8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800088ac:	ce f0       	breq	8000888a <__avr32_f64_div_res_subnormal+0x98>
800088ae:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800088b2:	e0 44 07 ff 	cp.w	r4,2047
800088b6:	ce 41       	brne	8000887e <__avr32_f64_div_res_subnormal+0x8c>
800088b8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800088bc:	ce 10       	breq	8000887e <__avr32_f64_div_res_subnormal+0x8c>
800088be:	ce 6b       	rjmp	8000888a <__avr32_f64_div_res_subnormal+0x98>

800088c0 <__avr32_udiv64>:
800088c0:	d4 31       	pushm	r0-r7,lr
800088c2:	1a 97       	mov	r7,sp
800088c4:	20 3d       	sub	sp,12
800088c6:	10 9c       	mov	r12,r8
800088c8:	12 9e       	mov	lr,r9
800088ca:	14 93       	mov	r3,r10
800088cc:	58 09       	cp.w	r9,0
800088ce:	e0 81 00 bd 	brne	80008a48 <__avr32_udiv64+0x188>
800088d2:	16 38       	cp.w	r8,r11
800088d4:	e0 88 00 40 	brls	80008954 <__avr32_udiv64+0x94>
800088d8:	f0 08 12 00 	clz	r8,r8
800088dc:	c0 d0       	breq	800088f6 <__avr32_udiv64+0x36>
800088de:	f6 08 09 4b 	lsl	r11,r11,r8
800088e2:	f0 09 11 20 	rsub	r9,r8,32
800088e6:	f8 08 09 4c 	lsl	r12,r12,r8
800088ea:	f4 09 0a 49 	lsr	r9,r10,r9
800088ee:	f4 08 09 43 	lsl	r3,r10,r8
800088f2:	f3 eb 10 0b 	or	r11,r9,r11
800088f6:	f8 0e 16 10 	lsr	lr,r12,0x10
800088fa:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800088fe:	f6 0e 0d 00 	divu	r0,r11,lr
80008902:	e6 0b 16 10 	lsr	r11,r3,0x10
80008906:	00 99       	mov	r9,r0
80008908:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000890c:	e0 0a 02 48 	mul	r8,r0,r10
80008910:	10 3b       	cp.w	r11,r8
80008912:	c0 a2       	brcc	80008926 <__avr32_udiv64+0x66>
80008914:	20 19       	sub	r9,1
80008916:	18 0b       	add	r11,r12
80008918:	18 3b       	cp.w	r11,r12
8000891a:	c0 63       	brcs	80008926 <__avr32_udiv64+0x66>
8000891c:	10 3b       	cp.w	r11,r8
8000891e:	f7 b9 03 01 	sublo	r9,1
80008922:	f7 dc e3 0b 	addcs	r11,r11,r12
80008926:	f6 08 01 01 	sub	r1,r11,r8
8000892a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000892e:	e2 0e 0d 00 	divu	r0,r1,lr
80008932:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008936:	00 98       	mov	r8,r0
80008938:	e0 0a 02 4a 	mul	r10,r0,r10
8000893c:	14 33       	cp.w	r3,r10
8000893e:	c0 82       	brcc	8000894e <__avr32_udiv64+0x8e>
80008940:	20 18       	sub	r8,1
80008942:	18 03       	add	r3,r12
80008944:	18 33       	cp.w	r3,r12
80008946:	c0 43       	brcs	8000894e <__avr32_udiv64+0x8e>
80008948:	14 33       	cp.w	r3,r10
8000894a:	f7 b8 03 01 	sublo	r8,1
8000894e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008952:	cd f8       	rjmp	80008b10 <__avr32_udiv64+0x250>
80008954:	58 08       	cp.w	r8,0
80008956:	c0 51       	brne	80008960 <__avr32_udiv64+0xa0>
80008958:	30 19       	mov	r9,1
8000895a:	f2 08 0d 08 	divu	r8,r9,r8
8000895e:	10 9c       	mov	r12,r8
80008960:	f8 06 12 00 	clz	r6,r12
80008964:	c0 41       	brne	8000896c <__avr32_udiv64+0xac>
80008966:	18 1b       	sub	r11,r12
80008968:	30 19       	mov	r9,1
8000896a:	c4 08       	rjmp	800089ea <__avr32_udiv64+0x12a>
8000896c:	ec 01 11 20 	rsub	r1,r6,32
80008970:	f4 01 0a 49 	lsr	r9,r10,r1
80008974:	f8 06 09 4c 	lsl	r12,r12,r6
80008978:	f6 06 09 48 	lsl	r8,r11,r6
8000897c:	f6 01 0a 41 	lsr	r1,r11,r1
80008980:	f3 e8 10 08 	or	r8,r9,r8
80008984:	f8 03 16 10 	lsr	r3,r12,0x10
80008988:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000898c:	e2 03 0d 00 	divu	r0,r1,r3
80008990:	f0 0b 16 10 	lsr	r11,r8,0x10
80008994:	00 9e       	mov	lr,r0
80008996:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000899a:	e0 05 02 49 	mul	r9,r0,r5
8000899e:	12 3b       	cp.w	r11,r9
800089a0:	c0 a2       	brcc	800089b4 <__avr32_udiv64+0xf4>
800089a2:	20 1e       	sub	lr,1
800089a4:	18 0b       	add	r11,r12
800089a6:	18 3b       	cp.w	r11,r12
800089a8:	c0 63       	brcs	800089b4 <__avr32_udiv64+0xf4>
800089aa:	12 3b       	cp.w	r11,r9
800089ac:	f7 be 03 01 	sublo	lr,1
800089b0:	f7 dc e3 0b 	addcs	r11,r11,r12
800089b4:	12 1b       	sub	r11,r9
800089b6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800089ba:	f6 03 0d 02 	divu	r2,r11,r3
800089be:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800089c2:	04 99       	mov	r9,r2
800089c4:	e4 05 02 4b 	mul	r11,r2,r5
800089c8:	16 38       	cp.w	r8,r11
800089ca:	c0 a2       	brcc	800089de <__avr32_udiv64+0x11e>
800089cc:	20 19       	sub	r9,1
800089ce:	18 08       	add	r8,r12
800089d0:	18 38       	cp.w	r8,r12
800089d2:	c0 63       	brcs	800089de <__avr32_udiv64+0x11e>
800089d4:	16 38       	cp.w	r8,r11
800089d6:	f7 b9 03 01 	sublo	r9,1
800089da:	f1 dc e3 08 	addcs	r8,r8,r12
800089de:	f4 06 09 43 	lsl	r3,r10,r6
800089e2:	f0 0b 01 0b 	sub	r11,r8,r11
800089e6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800089ea:	f8 06 16 10 	lsr	r6,r12,0x10
800089ee:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800089f2:	f6 06 0d 00 	divu	r0,r11,r6
800089f6:	e6 0b 16 10 	lsr	r11,r3,0x10
800089fa:	00 9a       	mov	r10,r0
800089fc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008a00:	e0 0e 02 48 	mul	r8,r0,lr
80008a04:	10 3b       	cp.w	r11,r8
80008a06:	c0 a2       	brcc	80008a1a <__avr32_udiv64+0x15a>
80008a08:	20 1a       	sub	r10,1
80008a0a:	18 0b       	add	r11,r12
80008a0c:	18 3b       	cp.w	r11,r12
80008a0e:	c0 63       	brcs	80008a1a <__avr32_udiv64+0x15a>
80008a10:	10 3b       	cp.w	r11,r8
80008a12:	f7 ba 03 01 	sublo	r10,1
80008a16:	f7 dc e3 0b 	addcs	r11,r11,r12
80008a1a:	f6 08 01 01 	sub	r1,r11,r8
80008a1e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008a22:	e2 06 0d 00 	divu	r0,r1,r6
80008a26:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008a2a:	00 98       	mov	r8,r0
80008a2c:	e0 0e 02 4b 	mul	r11,r0,lr
80008a30:	16 33       	cp.w	r3,r11
80008a32:	c0 82       	brcc	80008a42 <__avr32_udiv64+0x182>
80008a34:	20 18       	sub	r8,1
80008a36:	18 03       	add	r3,r12
80008a38:	18 33       	cp.w	r3,r12
80008a3a:	c0 43       	brcs	80008a42 <__avr32_udiv64+0x182>
80008a3c:	16 33       	cp.w	r3,r11
80008a3e:	f7 b8 03 01 	sublo	r8,1
80008a42:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008a46:	c6 98       	rjmp	80008b18 <__avr32_udiv64+0x258>
80008a48:	16 39       	cp.w	r9,r11
80008a4a:	e0 8b 00 65 	brhi	80008b14 <__avr32_udiv64+0x254>
80008a4e:	f2 09 12 00 	clz	r9,r9
80008a52:	c0 b1       	brne	80008a68 <__avr32_udiv64+0x1a8>
80008a54:	10 3a       	cp.w	r10,r8
80008a56:	5f 2a       	srhs	r10
80008a58:	1c 3b       	cp.w	r11,lr
80008a5a:	5f b8       	srhi	r8
80008a5c:	10 4a       	or	r10,r8
80008a5e:	f2 0a 18 00 	cp.b	r10,r9
80008a62:	c5 90       	breq	80008b14 <__avr32_udiv64+0x254>
80008a64:	30 18       	mov	r8,1
80008a66:	c5 98       	rjmp	80008b18 <__avr32_udiv64+0x258>
80008a68:	f0 09 09 46 	lsl	r6,r8,r9
80008a6c:	f2 03 11 20 	rsub	r3,r9,32
80008a70:	fc 09 09 4e 	lsl	lr,lr,r9
80008a74:	f0 03 0a 48 	lsr	r8,r8,r3
80008a78:	f6 09 09 4c 	lsl	r12,r11,r9
80008a7c:	f4 03 0a 42 	lsr	r2,r10,r3
80008a80:	ef 46 ff f4 	st.w	r7[-12],r6
80008a84:	f6 03 0a 43 	lsr	r3,r11,r3
80008a88:	18 42       	or	r2,r12
80008a8a:	f1 ee 10 0c 	or	r12,r8,lr
80008a8e:	f8 01 16 10 	lsr	r1,r12,0x10
80008a92:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008a96:	e6 01 0d 04 	divu	r4,r3,r1
80008a9a:	e4 03 16 10 	lsr	r3,r2,0x10
80008a9e:	08 9e       	mov	lr,r4
80008aa0:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008aa4:	e8 06 02 48 	mul	r8,r4,r6
80008aa8:	10 33       	cp.w	r3,r8
80008aaa:	c0 a2       	brcc	80008abe <__avr32_udiv64+0x1fe>
80008aac:	20 1e       	sub	lr,1
80008aae:	18 03       	add	r3,r12
80008ab0:	18 33       	cp.w	r3,r12
80008ab2:	c0 63       	brcs	80008abe <__avr32_udiv64+0x1fe>
80008ab4:	10 33       	cp.w	r3,r8
80008ab6:	f7 be 03 01 	sublo	lr,1
80008aba:	e7 dc e3 03 	addcs	r3,r3,r12
80008abe:	10 13       	sub	r3,r8
80008ac0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008ac4:	e6 01 0d 00 	divu	r0,r3,r1
80008ac8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008acc:	00 98       	mov	r8,r0
80008ace:	e0 06 02 46 	mul	r6,r0,r6
80008ad2:	0c 3b       	cp.w	r11,r6
80008ad4:	c0 a2       	brcc	80008ae8 <__avr32_udiv64+0x228>
80008ad6:	20 18       	sub	r8,1
80008ad8:	18 0b       	add	r11,r12
80008ada:	18 3b       	cp.w	r11,r12
80008adc:	c0 63       	brcs	80008ae8 <__avr32_udiv64+0x228>
80008ade:	0c 3b       	cp.w	r11,r6
80008ae0:	f7 dc e3 0b 	addcs	r11,r11,r12
80008ae4:	f7 b8 03 01 	sublo	r8,1
80008ae8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008aec:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008af0:	0c 1b       	sub	r11,r6
80008af2:	f0 04 06 42 	mulu.d	r2,r8,r4
80008af6:	06 95       	mov	r5,r3
80008af8:	16 35       	cp.w	r5,r11
80008afa:	e0 8b 00 0a 	brhi	80008b0e <__avr32_udiv64+0x24e>
80008afe:	5f 0b       	sreq	r11
80008b00:	f4 09 09 49 	lsl	r9,r10,r9
80008b04:	12 32       	cp.w	r2,r9
80008b06:	5f b9       	srhi	r9
80008b08:	f7 e9 00 09 	and	r9,r11,r9
80008b0c:	c0 60       	breq	80008b18 <__avr32_udiv64+0x258>
80008b0e:	20 18       	sub	r8,1
80008b10:	30 09       	mov	r9,0
80008b12:	c0 38       	rjmp	80008b18 <__avr32_udiv64+0x258>
80008b14:	30 09       	mov	r9,0
80008b16:	12 98       	mov	r8,r9
80008b18:	10 9a       	mov	r10,r8
80008b1a:	12 93       	mov	r3,r9
80008b1c:	10 92       	mov	r2,r8
80008b1e:	12 9b       	mov	r11,r9
80008b20:	2f dd       	sub	sp,-12
80008b22:	d8 32       	popm	r0-r7,pc

80008b24 <__avr32_umod64>:
80008b24:	d4 31       	pushm	r0-r7,lr
80008b26:	1a 97       	mov	r7,sp
80008b28:	20 3d       	sub	sp,12
80008b2a:	10 9c       	mov	r12,r8
80008b2c:	12 95       	mov	r5,r9
80008b2e:	14 9e       	mov	lr,r10
80008b30:	16 91       	mov	r1,r11
80008b32:	16 96       	mov	r6,r11
80008b34:	58 09       	cp.w	r9,0
80008b36:	e0 81 00 81 	brne	80008c38 <__avr32_umod64+0x114>
80008b3a:	16 38       	cp.w	r8,r11
80008b3c:	e0 88 00 12 	brls	80008b60 <__avr32_umod64+0x3c>
80008b40:	f0 08 12 00 	clz	r8,r8
80008b44:	c4 e0       	breq	80008be0 <__avr32_umod64+0xbc>
80008b46:	f6 08 09 46 	lsl	r6,r11,r8
80008b4a:	f8 08 09 4c 	lsl	r12,r12,r8
80008b4e:	f0 0b 11 20 	rsub	r11,r8,32
80008b52:	f4 08 09 4e 	lsl	lr,r10,r8
80008b56:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008b5a:	f7 e6 10 06 	or	r6,r11,r6
80008b5e:	c4 18       	rjmp	80008be0 <__avr32_umod64+0xbc>
80008b60:	58 08       	cp.w	r8,0
80008b62:	c0 51       	brne	80008b6c <__avr32_umod64+0x48>
80008b64:	30 19       	mov	r9,1
80008b66:	f2 08 0d 08 	divu	r8,r9,r8
80008b6a:	10 9c       	mov	r12,r8
80008b6c:	f8 08 12 00 	clz	r8,r12
80008b70:	c0 31       	brne	80008b76 <__avr32_umod64+0x52>
80008b72:	18 16       	sub	r6,r12
80008b74:	c3 68       	rjmp	80008be0 <__avr32_umod64+0xbc>
80008b76:	f0 03 11 20 	rsub	r3,r8,32
80008b7a:	f4 03 0a 4b 	lsr	r11,r10,r3
80008b7e:	f8 08 09 4c 	lsl	r12,r12,r8
80008b82:	ec 08 09 49 	lsl	r9,r6,r8
80008b86:	ec 03 0a 43 	lsr	r3,r6,r3
80008b8a:	f7 e9 10 09 	or	r9,r11,r9
80008b8e:	f8 05 16 10 	lsr	r5,r12,0x10
80008b92:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008b96:	e6 05 0d 02 	divu	r2,r3,r5
80008b9a:	f2 0e 16 10 	lsr	lr,r9,0x10
80008b9e:	ec 02 02 4b 	mul	r11,r6,r2
80008ba2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008ba6:	16 3e       	cp.w	lr,r11
80008ba8:	c0 72       	brcc	80008bb6 <__avr32_umod64+0x92>
80008baa:	18 0e       	add	lr,r12
80008bac:	18 3e       	cp.w	lr,r12
80008bae:	c0 43       	brcs	80008bb6 <__avr32_umod64+0x92>
80008bb0:	16 3e       	cp.w	lr,r11
80008bb2:	fd dc e3 0e 	addcs	lr,lr,r12
80008bb6:	fc 0b 01 03 	sub	r3,lr,r11
80008bba:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008bbe:	e6 05 0d 02 	divu	r2,r3,r5
80008bc2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008bc6:	a5 36       	mul	r6,r2
80008bc8:	0c 39       	cp.w	r9,r6
80008bca:	c0 72       	brcc	80008bd8 <__avr32_umod64+0xb4>
80008bcc:	18 09       	add	r9,r12
80008bce:	18 39       	cp.w	r9,r12
80008bd0:	c0 43       	brcs	80008bd8 <__avr32_umod64+0xb4>
80008bd2:	0c 39       	cp.w	r9,r6
80008bd4:	f3 dc e3 09 	addcs	r9,r9,r12
80008bd8:	f2 06 01 06 	sub	r6,r9,r6
80008bdc:	f4 08 09 4e 	lsl	lr,r10,r8
80008be0:	f8 0a 16 10 	lsr	r10,r12,0x10
80008be4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008be8:	ec 0a 0d 02 	divu	r2,r6,r10
80008bec:	fc 09 16 10 	lsr	r9,lr,0x10
80008bf0:	ea 02 02 4b 	mul	r11,r5,r2
80008bf4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008bf8:	16 39       	cp.w	r9,r11
80008bfa:	c0 72       	brcc	80008c08 <__avr32_umod64+0xe4>
80008bfc:	18 09       	add	r9,r12
80008bfe:	18 39       	cp.w	r9,r12
80008c00:	c0 43       	brcs	80008c08 <__avr32_umod64+0xe4>
80008c02:	16 39       	cp.w	r9,r11
80008c04:	f3 dc e3 09 	addcs	r9,r9,r12
80008c08:	f2 0b 01 0b 	sub	r11,r9,r11
80008c0c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008c10:	f6 0a 0d 0a 	divu	r10,r11,r10
80008c14:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008c18:	ea 0a 02 4a 	mul	r10,r5,r10
80008c1c:	14 3e       	cp.w	lr,r10
80008c1e:	c0 72       	brcc	80008c2c <__avr32_umod64+0x108>
80008c20:	18 0e       	add	lr,r12
80008c22:	18 3e       	cp.w	lr,r12
80008c24:	c0 43       	brcs	80008c2c <__avr32_umod64+0x108>
80008c26:	14 3e       	cp.w	lr,r10
80008c28:	fd dc e3 0e 	addcs	lr,lr,r12
80008c2c:	fc 0a 01 0a 	sub	r10,lr,r10
80008c30:	30 0b       	mov	r11,0
80008c32:	f4 08 0a 4a 	lsr	r10,r10,r8
80008c36:	c7 b8       	rjmp	80008d2c <__avr32_umod64+0x208>
80008c38:	16 39       	cp.w	r9,r11
80008c3a:	e0 8b 00 79 	brhi	80008d2c <__avr32_umod64+0x208>
80008c3e:	f2 09 12 00 	clz	r9,r9
80008c42:	c1 21       	brne	80008c66 <__avr32_umod64+0x142>
80008c44:	10 3a       	cp.w	r10,r8
80008c46:	5f 2b       	srhs	r11
80008c48:	0a 31       	cp.w	r1,r5
80008c4a:	5f ba       	srhi	r10
80008c4c:	f7 ea 10 0a 	or	r10,r11,r10
80008c50:	f2 0a 18 00 	cp.b	r10,r9
80008c54:	c0 60       	breq	80008c60 <__avr32_umod64+0x13c>
80008c56:	fc 08 01 0c 	sub	r12,lr,r8
80008c5a:	e2 05 01 46 	sbc	r6,r1,r5
80008c5e:	18 9e       	mov	lr,r12
80008c60:	0c 9b       	mov	r11,r6
80008c62:	1c 9a       	mov	r10,lr
80008c64:	c6 48       	rjmp	80008d2c <__avr32_umod64+0x208>
80008c66:	ea 09 09 4c 	lsl	r12,r5,r9
80008c6a:	f2 06 11 20 	rsub	r6,r9,32
80008c6e:	f6 09 09 4b 	lsl	r11,r11,r9
80008c72:	f0 09 09 42 	lsl	r2,r8,r9
80008c76:	ef 46 ff f4 	st.w	r7[-12],r6
80008c7a:	f0 06 0a 48 	lsr	r8,r8,r6
80008c7e:	18 48       	or	r8,r12
80008c80:	e2 06 0a 4c 	lsr	r12,r1,r6
80008c84:	f4 09 09 43 	lsl	r3,r10,r9
80008c88:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008c8c:	f4 06 0a 4a 	lsr	r10,r10,r6
80008c90:	16 4a       	or	r10,r11
80008c92:	f0 0b 16 10 	lsr	r11,r8,0x10
80008c96:	f8 0b 0d 04 	divu	r4,r12,r11
80008c9a:	f4 0c 16 10 	lsr	r12,r10,0x10
80008c9e:	08 91       	mov	r1,r4
80008ca0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008ca4:	e8 0e 02 46 	mul	r6,r4,lr
80008ca8:	0c 3c       	cp.w	r12,r6
80008caa:	c0 a2       	brcc	80008cbe <__avr32_umod64+0x19a>
80008cac:	20 11       	sub	r1,1
80008cae:	10 0c       	add	r12,r8
80008cb0:	10 3c       	cp.w	r12,r8
80008cb2:	c0 63       	brcs	80008cbe <__avr32_umod64+0x19a>
80008cb4:	0c 3c       	cp.w	r12,r6
80008cb6:	f7 b1 03 01 	sublo	r1,1
80008cba:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008cbe:	0c 1c       	sub	r12,r6
80008cc0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008cc4:	f8 0b 0d 04 	divu	r4,r12,r11
80008cc8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008ccc:	08 96       	mov	r6,r4
80008cce:	e8 0e 02 4e 	mul	lr,r4,lr
80008cd2:	1c 3b       	cp.w	r11,lr
80008cd4:	c0 a2       	brcc	80008ce8 <__avr32_umod64+0x1c4>
80008cd6:	20 16       	sub	r6,1
80008cd8:	10 0b       	add	r11,r8
80008cda:	10 3b       	cp.w	r11,r8
80008cdc:	c0 63       	brcs	80008ce8 <__avr32_umod64+0x1c4>
80008cde:	1c 3b       	cp.w	r11,lr
80008ce0:	f7 b6 03 01 	sublo	r6,1
80008ce4:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008ce8:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008cec:	1c 1b       	sub	r11,lr
80008cee:	e2 02 06 40 	mulu.d	r0,r1,r2
80008cf2:	00 9e       	mov	lr,r0
80008cf4:	02 9c       	mov	r12,r1
80008cf6:	16 3c       	cp.w	r12,r11
80008cf8:	e0 8b 00 08 	brhi	80008d08 <__avr32_umod64+0x1e4>
80008cfc:	5f 06       	sreq	r6
80008cfe:	06 30       	cp.w	r0,r3
80008d00:	5f ba       	srhi	r10
80008d02:	ed ea 00 0a 	and	r10,r6,r10
80008d06:	c0 60       	breq	80008d12 <__avr32_umod64+0x1ee>
80008d08:	fc 02 01 04 	sub	r4,lr,r2
80008d0c:	f8 08 01 4c 	sbc	r12,r12,r8
80008d10:	08 9e       	mov	lr,r4
80008d12:	e6 0e 01 0a 	sub	r10,r3,lr
80008d16:	f6 0c 01 4c 	sbc	r12,r11,r12
80008d1a:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008d1e:	f8 09 0a 4b 	lsr	r11,r12,r9
80008d22:	f4 09 0a 4a 	lsr	r10,r10,r9
80008d26:	f8 01 09 4c 	lsl	r12,r12,r1
80008d2a:	18 4a       	or	r10,r12
80008d2c:	2f dd       	sub	sp,-12
80008d2e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008e00:	c0 08       	rjmp	80008e00 <_evba>
	...

80008e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008e04:	c0 08       	rjmp	80008e04 <_handle_TLB_Multiple_Hit>
	...

80008e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008e08:	c0 08       	rjmp	80008e08 <_handle_Bus_Error_Data_Fetch>
	...

80008e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008e0c:	c0 08       	rjmp	80008e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008e10:	c0 08       	rjmp	80008e10 <_handle_NMI>
	...

80008e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008e14:	c0 08       	rjmp	80008e14 <_handle_Instruction_Address>
	...

80008e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008e18:	c0 08       	rjmp	80008e18 <_handle_ITLB_Protection>
	...

80008e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008e1c:	c0 08       	rjmp	80008e1c <_handle_Breakpoint>
	...

80008e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008e20:	c0 08       	rjmp	80008e20 <_handle_Illegal_Opcode>
	...

80008e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008e24:	c0 08       	rjmp	80008e24 <_handle_Unimplemented_Instruction>
	...

80008e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008e28:	c0 08       	rjmp	80008e28 <_handle_Privilege_Violation>
	...

80008e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008e2c:	c0 08       	rjmp	80008e2c <_handle_Floating_Point>
	...

80008e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008e30:	c0 08       	rjmp	80008e30 <_handle_Coprocessor_Absent>
	...

80008e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008e34:	c0 08       	rjmp	80008e34 <_handle_Data_Address_Read>
	...

80008e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008e38:	c0 08       	rjmp	80008e38 <_handle_Data_Address_Write>
	...

80008e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008e3c:	c0 08       	rjmp	80008e3c <_handle_DTLB_Protection_Read>
	...

80008e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008e40:	c0 08       	rjmp	80008e40 <_handle_DTLB_Protection_Write>
	...

80008e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008e44:	c0 08       	rjmp	80008e44 <_handle_DTLB_Modified>
	...

80008e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008e50:	c0 08       	rjmp	80008e50 <_handle_ITLB_Miss>
	...

80008e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008e60:	c0 08       	rjmp	80008e60 <_handle_DTLB_Miss_Read>
	...

80008e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008e70:	c0 08       	rjmp	80008e70 <_handle_DTLB_Miss_Write>
	...

80008f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008f00:	c0 08       	rjmp	80008f00 <_handle_Supervisor_Call>
80008f02:	d7 03       	nop

80008f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f04:	30 0c       	mov	r12,0
80008f06:	fe b0 d0 73 	rcall	80002fec <_get_interrupt_handler>
80008f0a:	58 0c       	cp.w	r12,0
80008f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f10:	d6 03       	rete

80008f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f12:	30 1c       	mov	r12,1
80008f14:	fe b0 d0 6c 	rcall	80002fec <_get_interrupt_handler>
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f1e:	d6 03       	rete

80008f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f20:	30 2c       	mov	r12,2
80008f22:	fe b0 d0 65 	rcall	80002fec <_get_interrupt_handler>
80008f26:	58 0c       	cp.w	r12,0
80008f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f2c:	d6 03       	rete

80008f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008f2e:	30 3c       	mov	r12,3
80008f30:	fe b0 d0 5e 	rcall	80002fec <_get_interrupt_handler>
80008f34:	58 0c       	cp.w	r12,0
80008f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008f3a:	d6 03       	rete
80008f3c:	d7 03       	nop
80008f3e:	d7 03       	nop
80008f40:	d7 03       	nop
80008f42:	d7 03       	nop
80008f44:	d7 03       	nop
80008f46:	d7 03       	nop
80008f48:	d7 03       	nop
80008f4a:	d7 03       	nop
80008f4c:	d7 03       	nop
80008f4e:	d7 03       	nop
80008f50:	d7 03       	nop
80008f52:	d7 03       	nop
80008f54:	d7 03       	nop
80008f56:	d7 03       	nop
80008f58:	d7 03       	nop
80008f5a:	d7 03       	nop
80008f5c:	d7 03       	nop
80008f5e:	d7 03       	nop
80008f60:	d7 03       	nop
80008f62:	d7 03       	nop
80008f64:	d7 03       	nop
80008f66:	d7 03       	nop
80008f68:	d7 03       	nop
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	d7 03       	nop
80008f70:	d7 03       	nop
80008f72:	d7 03       	nop
80008f74:	d7 03       	nop
80008f76:	d7 03       	nop
80008f78:	d7 03       	nop
80008f7a:	d7 03       	nop
80008f7c:	d7 03       	nop
80008f7e:	d7 03       	nop
80008f80:	d7 03       	nop
80008f82:	d7 03       	nop
80008f84:	d7 03       	nop
80008f86:	d7 03       	nop
80008f88:	d7 03       	nop
80008f8a:	d7 03       	nop
80008f8c:	d7 03       	nop
80008f8e:	d7 03       	nop
80008f90:	d7 03       	nop
80008f92:	d7 03       	nop
80008f94:	d7 03       	nop
80008f96:	d7 03       	nop
80008f98:	d7 03       	nop
80008f9a:	d7 03       	nop
80008f9c:	d7 03       	nop
80008f9e:	d7 03       	nop
80008fa0:	d7 03       	nop
80008fa2:	d7 03       	nop
80008fa4:	d7 03       	nop
80008fa6:	d7 03       	nop
80008fa8:	d7 03       	nop
80008faa:	d7 03       	nop
80008fac:	d7 03       	nop
80008fae:	d7 03       	nop
80008fb0:	d7 03       	nop
80008fb2:	d7 03       	nop
80008fb4:	d7 03       	nop
80008fb6:	d7 03       	nop
80008fb8:	d7 03       	nop
80008fba:	d7 03       	nop
80008fbc:	d7 03       	nop
80008fbe:	d7 03       	nop
80008fc0:	d7 03       	nop
80008fc2:	d7 03       	nop
80008fc4:	d7 03       	nop
80008fc6:	d7 03       	nop
80008fc8:	d7 03       	nop
80008fca:	d7 03       	nop
80008fcc:	d7 03       	nop
80008fce:	d7 03       	nop
80008fd0:	d7 03       	nop
80008fd2:	d7 03       	nop
80008fd4:	d7 03       	nop
80008fd6:	d7 03       	nop
80008fd8:	d7 03       	nop
80008fda:	d7 03       	nop
80008fdc:	d7 03       	nop
80008fde:	d7 03       	nop
80008fe0:	d7 03       	nop
80008fe2:	d7 03       	nop
80008fe4:	d7 03       	nop
80008fe6:	d7 03       	nop
80008fe8:	d7 03       	nop
80008fea:	d7 03       	nop
80008fec:	d7 03       	nop
80008fee:	d7 03       	nop
80008ff0:	d7 03       	nop
80008ff2:	d7 03       	nop
80008ff4:	d7 03       	nop
80008ff6:	d7 03       	nop
80008ff8:	d7 03       	nop
80008ffa:	d7 03       	nop
80008ffc:	d7 03       	nop
80008ffe:	d7 03       	nop
